#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright &copy; 2014-2016 NetApp, Inc. All Rights Reserved.
#
# CONFIDENTIALITY NOTICE: THIS SOFTWARE CONTAINS CONFIDENTIAL INFORMATION OF
# NETAPP, INC. USE, DISCLOSURE OR REPRODUCTION IS PROHIBITED WITHOUT THE PRIOR
# EXPRESS WRITTEN PERMISSION OF NETAPP, INC.
"""
Module contains user defined objects directly implemented to map to the Element
API.
"""
from __future__ import unicode_literals
from __future__ import absolute_import
from solidfire.common import model as data_model

AUTO_GENERATE_SECRET = "AUTO-GENERATE-CHAP-SECRET"


class CHAPSecret(data_model.DataObject):
    """
    A representation of the CHAP Secret

    :param secret: [required] A 12 - 16 character string.
    :type start: str

    """

    secret = data_model.property(
        "secret", str,
        array=False, optional=False,
        documentation="A 12 - 16 character string."
    )

    def auto_generate(self):
        """
        Used in 'AddAccount' and 'ModifyAccount' to cause a CHAP Secret to be
        auto generated by the cluster.
        """
        self.secret = AUTO_GENERATE_SECRET
        return self

    def __init__(self, **kwargs):
        data_model.DataObject.__init__(self, **kwargs)

    @classmethod
    def custom_extract(cls, data):
        """
        Deserialize the property from json.

        :param data: the data to be converted.

        :return: the extracted data.
        """
        chap = CHAPSecret()
        chap.secret = data
        return chap

    def custom_to_json(self):
        """
        Custom json serialize logic
        :return:
        """
        if self.secret == AUTO_GENERATE_SECRET:
            return None
        else:
            return self.secret


class FrequencyTypes:
    """
    User Defined object (does not correlate to and API Object) which enumerates
    the different types of Snapshot Schedules.
    """
    Time_Interval = "Time Interval"
    Days_Of_Month = "Days Of Month"
    Days_Of_Week = "Days Of Week"

    types = {Time_Interval, Days_Of_Month, Days_Of_Week}


class Weekday:
    """
    A better representation of the Weekday.
    """

    Sunday = ('Sunday', 1)
    Monday = ('Monday', 2)
    Tuesday = ('Tuesday', 3)
    Wednesday = ('Wednesday', 4)
    Thursday = ('Thursday', 5)
    Friday = ('Friday', 6)
    Saturday = ('Saturday', 7)

    all_weekdays = [Sunday, Monday, Tuesday, Wednesday, Thursday, Friday,
                    Saturday]

    @staticmethod
    def from_id(weekday_id):
        for weekday in Weekday.all_weekdays:
            if weekday[1] == weekday_id:
                return weekday
        raise AttributeError

    @staticmethod
    def from_name(weekday_name):
        for weekday in Weekday.all_weekdays:
            if weekday[0] == weekday_name:
                return weekday
        raise AttributeError


class Frequency(data_model.DataObject):
    """
    User Defined object (does not correlate to and API Object) which simplifies
    the construction of Snapshot Schedule objects.

     :param minutes: Number of minutes between snapshots or the minute at
     which the snapshot will occur in "Days of Week", or "Days of Month" mode.
     Valid values  0 - 59
     :type minutes: int

    :param hours: Number of hours between snapshots or hour at which the
    snapshot will occur in "Days of Week", or "Days of Month" mode.
    Valid values  0 - 24
    :type hours: int

    :param monthdays: The days of the month that a snapshot will be made.
    Valid values  1 - 31
    :type monthdays: int

    :param weekdays: Day of the week the snapshot is to be created.
    Required Values (if used)
    Day - 0 - 6 (Sunday - Saturday).
    :type weekdays: Weekday[]

    :param days: Time Interval days between snapshot.
    :type days: int[]
    """
    @staticmethod
    def types():
        """
        Returns the list of FrequencyTypes.
        :return:
        """
        return FrequencyTypes()

    def set_type(self, a_type):
        """
        Sets the FrequencyType of this Frequency object.

        :param a_type:
        :type: a_type: FrequencyType
        :return: the selected FrequencyType
        """
        if a_type in Frequency.types().types:
            self.freq_type = a_type
        else:
            raise AttributeError
        return self.freq_type

    minutes = data_model.property(
        "minutes", int,
        array=False, optional=False,
        documentation="Number of minutes between snapshots or the minute at "
                      "which the snapshot will occur in \"Days of Week\", or "
                      "\"Days of Month\" mode. Valid values  0 - 59"
    )

    hours = data_model.property(
        "hours", int,
        array=False, optional=False,
        documentation="Number of hours between snapshots or hour at which the "
                      "snapshot will occur in \"Days of Week\", or \"Days of "
                      "Month\" mode. Valid values  0 - 24"
    )

    monthdays = data_model.property(
        "monthdays", int,
        array=True, optional=False,
        documentation="The days of the month that a snapshot will be made. "
                      "Valid values  1 - 31"
    )

    weekdays = data_model.property(
        "weekdays", Weekday,
        array=True, optional=False,
        documentation="Day of the week the snapshot is to be created. "
                      "Required Values (if used)"
                      ""
                      "Day - 0 - 6 (Sunday - Saturday)."
    )

    days = data_model.property(
        "days", int,
        array=True, optional=False,
        documentation="Time Interval days between snapshot."
    )

    def __init__(self, **kwargs):
        self.freq_type = None

        data_model.DataObject.__init__(self, **kwargs)

from unittest.mock import MagicMock
from solidfire.factory import ElementFactory
from solidfire.__init__ import *
import UnitTests.Resources as Resources

def test_cancel_clone_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_CancelClone_v9_0)

    
    clone_id = 42 # clone_id
    result = ef.cancel_clone(clone_id,)

def test_cancel_group_clone_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_CancelGroupClone_v9_0)

    
    group_clone_id = 42 # group_clone_id
    result = ef.cancel_group_clone(group_clone_id,)

def test_copy_volume_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_CopyVolume_v9_0)

    
    volume_id = 42 # volume_id
    dst_volume_id = 42 # dst_volume_id
    snapshot_id = 42 # snapshot_id
    result = ef.copy_volume(volume_id,dst_volume_id,)
    assert result.async_handle == 9, "Died on +.async_handle"
    assert result.clone_id == 5, "Died on +.clone_id"

def test_create_storage_container_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_CreateStorageContainer_v9_0)

    
    name = "" # name
    initiator_secret = "" # initiator_secret
    target_secret = "" # target_secret
    result = ef.create_storage_container(name,)
    assert result.storage_container.status == """active""", "Died on +.storage_container.status"
    assert result.storage_container.storage_container_id == UUID("2b0653fb-3d64-4ae0-9ef8-356e685b0b2e"), "Died on .storage_container.storage_container_id"
    assert result.storage_container.name == """ExampleName""", "Died on +.storage_container.name"
    assert result.storage_container.initiator_secret == """Z5k)Cf~jiIxp3R4[""", "Died on +.storage_container.initiator_secret"
    assert result.storage_container.target_secret == """N07S4}aEh5oU]L0l""", "Died on +.storage_container.target_secret"
    assert result.storage_container.protocol_endpoint_type == """SCSI""", "Died on +.storage_container.protocol_endpoint_type"
    assert result.storage_container.account_id == 111, "Died on +.storage_container.account_id"

def test_create_volume_access_group_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_CreateVolumeAccessGroup_v9_0)

    
    name = "" # name
    initiators = "" # initiators
    volumes = 42 # volumes
    virtual_network_id = 42 # virtual_network_id
    virtual_network_tags = 42 # virtual_network_tags
    attributes = dict() # attributes
    result = ef.create_volume_access_group(name,)
    assert result.volume_access_group.name == """myaccessgroup""", "Died on +.volume_access_group.name"
    assert result.volume_access_group.initiator_ids[0] == 95, "Died on +.volume_access_group.initiator_ids[0]"
    assert result.volume_access_group.volumes[0] == 327, "Died on +.volume_access_group.volumes[0]"
    assert result.volume_access_group.initiators[0] == """iqn.1993-08.org.debian: 01: a31b1d799d5c""", "Died on +.volume_access_group.initiators[0]"
    assert type(result.volume_access_group.attributes) is dict, "Died on .volume_access_group.attributes"
    assert result.volume_access_group.volume_access_group_id == 96, "Died on +.volume_access_group.volume_access_group_id"
    assert result.volume_access_group_id == 96, "Died on +.volume_access_group_id"

def test_delete_storage_containers_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_DeleteStorageContainers_v9_0)

    
    storage_container_ids = UUID("2b0653fb-3d64-4ae0-9ef8-356e685b0b2e") # storage_container_ids
    result = ef.delete_storage_containers(storage_container_ids,)

def test_delete_volumes_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_DeleteVolumes_v9_0)

    
    account_ids = 42 # account_ids
    volume_access_group_ids = 42 # volume_access_group_ids
    volume_ids = 42 # volume_ids
    result = ef.delete_volumes()
    assert result.volumes[0].status == """active""", "Died on +.volumes[0].status"
    assert result.volumes[0].enable512e == False, "Died on +.volumes[0].enable512e"
    assert result.volumes[0].qos.burst_iops == 15000, "Died on +.volumes[0].qos.burst_iops"
    assert result.volumes[0].qos.burst_time == 60, "Died on +.volumes[0].qos.burst_time"
    assert result.volumes[0].qos.min_iops == 100, "Died on +.volumes[0].qos.min_iops"
    assert result.volumes[0].qos.max_iops == 15000, "Died on +.volumes[0].qos.max_iops"
    assert result.volumes[0].name == """vclient-030-v00001""", "Died on +.volumes[0].name"
    assert result.volumes[0].scsi_naadevice_id == """6f47acc100000000707a737200000001""", "Died on +.volumes[0].scsi_naadevice_id"
    assert result.volumes[0].total_size == 10000003072, "Died on +.volumes[0].total_size"
    assert result.volumes[0].block_size == 4096, "Died on +.volumes[0].block_size"
    assert result.volumes[0].scsi_euidevice_id == """707a737200000001f47acc0100000000""", "Died on +.volumes[0].scsi_euidevice_id"
    assert result.volumes[0].volume_id == 1, "Died on +.volumes[0].volume_id"
    assert result.volumes[0].access == """readWrite""", "Died on +.volumes[0].access"
    assert result.volumes[0].iqn == """iqn.2010-01.com.solidfire:pzsr.vclient-030-v00001.1""", "Died on +.volumes[0].iqn"
    assert result.volumes[0].slice_count == 1, "Died on +.volumes[0].slice_count"
    assert type(result.volumes[0].attributes) is dict, "Died on .volumes[0].attributes"
    assert result.volumes[0].account_id == 1, "Died on +.volumes[0].account_id"
    assert result.volumes[0].create_time == """2015-03-06T18:50:56Z""", "Died on +.volumes[0].create_time"
    assert result.volumes[0].virtual_volume_id == UUID("b4528ea8-2930-41a0-8b8e-6361e1f0a71f"), "Died on .volumes[0].virtual_volume_id"

def test_enable_feature_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_EnableFeature_v9_0)

    
    feature = "" # feature
    result = ef.enable_feature(feature,)

def test_get_account_efficiency_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetAccountEfficiency_v9_0)

    
    account_id = 42 # account_id
    result = ef.get_account_efficiency(account_id,)
    assert result.timestamp == """2016-12-08T16:00:03Z""", "Died on +.timestamp"

def test_get_cluster_hardware_info_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9_0)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_drive_config_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetDriveConfig_v9_0)

    
    result = ef.get_drive_config()
    assert result.drive_config.num_slice_expected == 1, "Died on +.drive_config.num_slice_expected"
    assert result.drive_config.num_total_expected == 11, "Died on +.drive_config.num_total_expected"
    assert result.drive_config.drives[14].security_locked == False, "Died on +.drive_config.drives[14].security_locked"
    assert result.drive_config.drives[14].serial == """slot10""", "Died on +.drive_config.drives[14].serial"
    assert result.drive_config.drives[14].size == 0, "Died on +.drive_config.drives[14].size"
    assert result.drive_config.drives[14].slot == 10, "Died on +.drive_config.drives[14].slot"
    assert result.drive_config.drives[14].uuid == UUID("9d62ad9e-a097-d5d6-d4f7-1d27193270a1"), "Died on .drive_config.drives[14].uuid"
    assert result.drive_config.drives[14].dev_path == """/dev/slot10""", "Died on +.drive_config.drives[14].dev_path"
    assert result.drive_config.drives[14].version == """Unknown""", "Died on +.drive_config.drives[14].version"
    assert result.drive_config.drives[14].security_supported == False, "Died on +.drive_config.drives[14].security_supported"
    assert result.drive_config.drives[14].drive_type == """Block""", "Died on +.drive_config.drives[14].drive_type"
    assert result.drive_config.drives[14].product == """Unknown""", "Died on +.drive_config.drives[14].product"
    assert result.drive_config.drives[14].vendor == """Unknown""", "Died on +.drive_config.drives[14].vendor"
    assert result.drive_config.drives[14].security_enabled == False, "Died on +.drive_config.drives[14].security_enabled"
    assert result.drive_config.drives[14].security_frozen == False, "Died on +.drive_config.drives[14].security_frozen"
    assert result.drive_config.drives[14].connected == False, "Died on +.drive_config.drives[14].connected"
    assert result.drive_config.drives[14].path == """/dev/slot10""", "Died on +.drive_config.drives[14].path"
    assert result.drive_config.drives[14].scsi_state == """Unknown""", "Died on +.drive_config.drives[14].scsi_state"
    assert result.drive_config.drives[14].scsi_compat_id == """slot10""", "Died on +.drive_config.drives[14].scsi_compat_id"
    assert result.drive_config.drives[14].name == """slot10""", "Died on +.drive_config.drives[14].name"
    assert result.drive_config.drives[14].dev == 0, "Died on +.drive_config.drives[14].dev"
    assert result.drive_config.drives[14].security_at_maximum == False, "Died on +.drive_config.drives[14].security_at_maximum"
    assert result.drive_config.drives[14].path_link == """/dev/slot10""", "Died on +.drive_config.drives[14].path_link"
    assert result.drive_config.drives[13].security_locked == False, "Died on +.drive_config.drives[13].security_locked"
    assert result.drive_config.drives[13].serial == """slot9""", "Died on +.drive_config.drives[13].serial"
    assert result.drive_config.drives[13].size == 0, "Died on +.drive_config.drives[13].size"
    assert result.drive_config.drives[13].slot == 9, "Died on +.drive_config.drives[13].slot"
    assert result.drive_config.drives[13].uuid == UUID("612e2106-7032-850a-a16d-4980b53ffb23"), "Died on .drive_config.drives[13].uuid"
    assert result.drive_config.drives[13].dev_path == """/dev/slot9""", "Died on +.drive_config.drives[13].dev_path"
    assert result.drive_config.drives[13].version == """Unknown""", "Died on +.drive_config.drives[13].version"
    assert result.drive_config.drives[13].security_supported == False, "Died on +.drive_config.drives[13].security_supported"
    assert result.drive_config.drives[13].drive_type == """Block""", "Died on +.drive_config.drives[13].drive_type"
    assert result.drive_config.drives[13].product == """Unknown""", "Died on +.drive_config.drives[13].product"
    assert result.drive_config.drives[13].vendor == """Unknown""", "Died on +.drive_config.drives[13].vendor"
    assert result.drive_config.drives[13].security_enabled == False, "Died on +.drive_config.drives[13].security_enabled"
    assert result.drive_config.drives[13].security_frozen == False, "Died on +.drive_config.drives[13].security_frozen"
    assert result.drive_config.drives[13].connected == False, "Died on +.drive_config.drives[13].connected"
    assert result.drive_config.drives[13].path == """/dev/slot9""", "Died on +.drive_config.drives[13].path"
    assert result.drive_config.drives[13].scsi_state == """Unknown""", "Died on +.drive_config.drives[13].scsi_state"
    assert result.drive_config.drives[13].scsi_compat_id == """slot9""", "Died on +.drive_config.drives[13].scsi_compat_id"
    assert result.drive_config.drives[13].name == """slot9""", "Died on +.drive_config.drives[13].name"
    assert result.drive_config.drives[13].dev == 0, "Died on +.drive_config.drives[13].dev"
    assert result.drive_config.drives[13].security_at_maximum == False, "Died on +.drive_config.drives[13].security_at_maximum"
    assert result.drive_config.drives[13].path_link == """/dev/slot9""", "Died on +.drive_config.drives[13].path_link"
    assert result.drive_config.drives[12].security_locked == False, "Died on +.drive_config.drives[12].security_locked"
    assert result.drive_config.drives[12].serial == """slot8""", "Died on +.drive_config.drives[12].serial"
    assert result.drive_config.drives[12].size == 0, "Died on +.drive_config.drives[12].size"
    assert result.drive_config.drives[12].slot == 8, "Died on +.drive_config.drives[12].slot"
    assert result.drive_config.drives[12].uuid == UUID("28384068-fdee-1dae-21e3-493558121657"), "Died on .drive_config.drives[12].uuid"
    assert result.drive_config.drives[12].dev_path == """/dev/slot8""", "Died on +.drive_config.drives[12].dev_path"
    assert result.drive_config.drives[12].version == """Unknown""", "Died on +.drive_config.drives[12].version"
    assert result.drive_config.drives[12].security_supported == False, "Died on +.drive_config.drives[12].security_supported"
    assert result.drive_config.drives[12].drive_type == """Block""", "Died on +.drive_config.drives[12].drive_type"
    assert result.drive_config.drives[12].product == """Unknown""", "Died on +.drive_config.drives[12].product"
    assert result.drive_config.drives[12].vendor == """Unknown""", "Died on +.drive_config.drives[12].vendor"
    assert result.drive_config.drives[12].security_enabled == False, "Died on +.drive_config.drives[12].security_enabled"
    assert result.drive_config.drives[12].security_frozen == False, "Died on +.drive_config.drives[12].security_frozen"
    assert result.drive_config.drives[12].connected == False, "Died on +.drive_config.drives[12].connected"
    assert result.drive_config.drives[12].path == """/dev/slot8""", "Died on +.drive_config.drives[12].path"
    assert result.drive_config.drives[12].scsi_state == """Unknown""", "Died on +.drive_config.drives[12].scsi_state"
    assert result.drive_config.drives[12].scsi_compat_id == """slot8""", "Died on +.drive_config.drives[12].scsi_compat_id"
    assert result.drive_config.drives[12].name == """slot8""", "Died on +.drive_config.drives[12].name"
    assert result.drive_config.drives[12].dev == 0, "Died on +.drive_config.drives[12].dev"
    assert result.drive_config.drives[12].security_at_maximum == False, "Died on +.drive_config.drives[12].security_at_maximum"
    assert result.drive_config.drives[12].path_link == """/dev/slot8""", "Died on +.drive_config.drives[12].path_link"
    assert result.drive_config.drives[11].security_locked == False, "Died on +.drive_config.drives[11].security_locked"
    assert result.drive_config.drives[11].serial == """slot7""", "Died on +.drive_config.drives[11].serial"
    assert result.drive_config.drives[11].size == 0, "Died on +.drive_config.drives[11].size"
    assert result.drive_config.drives[11].slot == 7, "Died on +.drive_config.drives[11].slot"
    assert result.drive_config.drives[11].uuid == UUID("76c29a96-68a6-2d8e-6416-392f9fd07919"), "Died on .drive_config.drives[11].uuid"
    assert result.drive_config.drives[11].dev_path == """/dev/slot7""", "Died on +.drive_config.drives[11].dev_path"
    assert result.drive_config.drives[11].version == """Unknown""", "Died on +.drive_config.drives[11].version"
    assert result.drive_config.drives[11].security_supported == False, "Died on +.drive_config.drives[11].security_supported"
    assert result.drive_config.drives[11].drive_type == """Block""", "Died on +.drive_config.drives[11].drive_type"
    assert result.drive_config.drives[11].product == """Unknown""", "Died on +.drive_config.drives[11].product"
    assert result.drive_config.drives[11].vendor == """Unknown""", "Died on +.drive_config.drives[11].vendor"
    assert result.drive_config.drives[11].security_enabled == False, "Died on +.drive_config.drives[11].security_enabled"
    assert result.drive_config.drives[11].security_frozen == False, "Died on +.drive_config.drives[11].security_frozen"
    assert result.drive_config.drives[11].connected == False, "Died on +.drive_config.drives[11].connected"
    assert result.drive_config.drives[11].path == """/dev/slot7""", "Died on +.drive_config.drives[11].path"
    assert result.drive_config.drives[11].scsi_state == """Unknown""", "Died on +.drive_config.drives[11].scsi_state"
    assert result.drive_config.drives[11].scsi_compat_id == """slot7""", "Died on +.drive_config.drives[11].scsi_compat_id"
    assert result.drive_config.drives[11].name == """slot7""", "Died on +.drive_config.drives[11].name"
    assert result.drive_config.drives[11].dev == 0, "Died on +.drive_config.drives[11].dev"
    assert result.drive_config.drives[11].security_at_maximum == False, "Died on +.drive_config.drives[11].security_at_maximum"
    assert result.drive_config.drives[11].path_link == """/dev/slot7""", "Died on +.drive_config.drives[11].path_link"
    assert result.drive_config.drives[10].security_locked == False, "Died on +.drive_config.drives[10].security_locked"
    assert result.drive_config.drives[10].serial == """slot6""", "Died on +.drive_config.drives[10].serial"
    assert result.drive_config.drives[10].size == 0, "Died on +.drive_config.drives[10].size"
    assert result.drive_config.drives[10].slot == 6, "Died on +.drive_config.drives[10].slot"
    assert result.drive_config.drives[10].uuid == UUID("c1b04a69-49a0-fdee-b818-c6cdfafd6cd5"), "Died on .drive_config.drives[10].uuid"
    assert result.drive_config.drives[10].dev_path == """/dev/slot6""", "Died on +.drive_config.drives[10].dev_path"
    assert result.drive_config.drives[10].version == """Unknown""", "Died on +.drive_config.drives[10].version"
    assert result.drive_config.drives[10].security_supported == False, "Died on +.drive_config.drives[10].security_supported"
    assert result.drive_config.drives[10].drive_type == """Block""", "Died on +.drive_config.drives[10].drive_type"
    assert result.drive_config.drives[10].product == """Unknown""", "Died on +.drive_config.drives[10].product"
    assert result.drive_config.drives[10].vendor == """Unknown""", "Died on +.drive_config.drives[10].vendor"
    assert result.drive_config.drives[10].security_enabled == False, "Died on +.drive_config.drives[10].security_enabled"
    assert result.drive_config.drives[10].security_frozen == False, "Died on +.drive_config.drives[10].security_frozen"
    assert result.drive_config.drives[10].connected == False, "Died on +.drive_config.drives[10].connected"
    assert result.drive_config.drives[10].path == """/dev/slot6""", "Died on +.drive_config.drives[10].path"
    assert result.drive_config.drives[10].scsi_state == """Unknown""", "Died on +.drive_config.drives[10].scsi_state"
    assert result.drive_config.drives[10].scsi_compat_id == """slot6""", "Died on +.drive_config.drives[10].scsi_compat_id"
    assert result.drive_config.drives[10].name == """slot6""", "Died on +.drive_config.drives[10].name"
    assert result.drive_config.drives[10].dev == 0, "Died on +.drive_config.drives[10].dev"
    assert result.drive_config.drives[10].security_at_maximum == False, "Died on +.drive_config.drives[10].security_at_maximum"
    assert result.drive_config.drives[10].path_link == """/dev/slot6""", "Died on +.drive_config.drives[10].path_link"
    assert result.drive_config.drives[9].security_locked == False, "Died on +.drive_config.drives[9].security_locked"
    assert result.drive_config.drives[9].serial == """slot5""", "Died on +.drive_config.drives[9].serial"
    assert result.drive_config.drives[9].size == 0, "Died on +.drive_config.drives[9].size"
    assert result.drive_config.drives[9].slot == 5, "Died on +.drive_config.drives[9].slot"
    assert result.drive_config.drives[9].uuid == UUID("b31123fa-9a17-0ccd-deab-deac32a58371"), "Died on .drive_config.drives[9].uuid"
    assert result.drive_config.drives[9].dev_path == """/dev/slot5""", "Died on +.drive_config.drives[9].dev_path"
    assert result.drive_config.drives[9].version == """Unknown""", "Died on +.drive_config.drives[9].version"
    assert result.drive_config.drives[9].security_supported == False, "Died on +.drive_config.drives[9].security_supported"
    assert result.drive_config.drives[9].drive_type == """Block""", "Died on +.drive_config.drives[9].drive_type"
    assert result.drive_config.drives[9].product == """Unknown""", "Died on +.drive_config.drives[9].product"
    assert result.drive_config.drives[9].vendor == """Unknown""", "Died on +.drive_config.drives[9].vendor"
    assert result.drive_config.drives[9].security_enabled == False, "Died on +.drive_config.drives[9].security_enabled"
    assert result.drive_config.drives[9].security_frozen == False, "Died on +.drive_config.drives[9].security_frozen"
    assert result.drive_config.drives[9].connected == False, "Died on +.drive_config.drives[9].connected"
    assert result.drive_config.drives[9].path == """/dev/slot5""", "Died on +.drive_config.drives[9].path"
    assert result.drive_config.drives[9].scsi_state == """Unknown""", "Died on +.drive_config.drives[9].scsi_state"
    assert result.drive_config.drives[9].scsi_compat_id == """slot5""", "Died on +.drive_config.drives[9].scsi_compat_id"
    assert result.drive_config.drives[9].name == """slot5""", "Died on +.drive_config.drives[9].name"
    assert result.drive_config.drives[9].dev == 0, "Died on +.drive_config.drives[9].dev"
    assert result.drive_config.drives[9].security_at_maximum == False, "Died on +.drive_config.drives[9].security_at_maximum"
    assert result.drive_config.drives[9].path_link == """/dev/slot5""", "Died on +.drive_config.drives[9].path_link"
    assert result.drive_config.drives[8].security_locked == False, "Died on +.drive_config.drives[8].security_locked"
    assert result.drive_config.drives[8].serial == """slot4""", "Died on +.drive_config.drives[8].serial"
    assert result.drive_config.drives[8].size == 0, "Died on +.drive_config.drives[8].size"
    assert result.drive_config.drives[8].slot == 4, "Died on +.drive_config.drives[8].slot"
    assert result.drive_config.drives[8].uuid == UUID("76e3d13f-88c5-c334-8f0b-8486964d369e"), "Died on .drive_config.drives[8].uuid"
    assert result.drive_config.drives[8].dev_path == """/dev/slot4""", "Died on +.drive_config.drives[8].dev_path"
    assert result.drive_config.drives[8].version == """Unknown""", "Died on +.drive_config.drives[8].version"
    assert result.drive_config.drives[8].security_supported == False, "Died on +.drive_config.drives[8].security_supported"
    assert result.drive_config.drives[8].drive_type == """Block""", "Died on +.drive_config.drives[8].drive_type"
    assert result.drive_config.drives[8].product == """Unknown""", "Died on +.drive_config.drives[8].product"
    assert result.drive_config.drives[8].vendor == """Unknown""", "Died on +.drive_config.drives[8].vendor"
    assert result.drive_config.drives[8].security_enabled == False, "Died on +.drive_config.drives[8].security_enabled"
    assert result.drive_config.drives[8].security_frozen == False, "Died on +.drive_config.drives[8].security_frozen"
    assert result.drive_config.drives[8].connected == False, "Died on +.drive_config.drives[8].connected"
    assert result.drive_config.drives[8].path == """/dev/slot4""", "Died on +.drive_config.drives[8].path"
    assert result.drive_config.drives[8].scsi_state == """Unknown""", "Died on +.drive_config.drives[8].scsi_state"
    assert result.drive_config.drives[8].scsi_compat_id == """slot4""", "Died on +.drive_config.drives[8].scsi_compat_id"
    assert result.drive_config.drives[8].name == """slot4""", "Died on +.drive_config.drives[8].name"
    assert result.drive_config.drives[8].dev == 0, "Died on +.drive_config.drives[8].dev"
    assert result.drive_config.drives[8].security_at_maximum == False, "Died on +.drive_config.drives[8].security_at_maximum"
    assert result.drive_config.drives[8].path_link == """/dev/slot4""", "Died on +.drive_config.drives[8].path_link"
    assert result.drive_config.drives[7].security_locked == False, "Died on +.drive_config.drives[7].security_locked"
    assert result.drive_config.drives[7].serial == """slot3""", "Died on +.drive_config.drives[7].serial"
    assert result.drive_config.drives[7].size == 0, "Died on +.drive_config.drives[7].size"
    assert result.drive_config.drives[7].slot == 3, "Died on +.drive_config.drives[7].slot"
    assert result.drive_config.drives[7].uuid == UUID("25b903d1-3b55-d53f-a556-47b28f91b728"), "Died on .drive_config.drives[7].uuid"
    assert result.drive_config.drives[7].dev_path == """/dev/slot3""", "Died on +.drive_config.drives[7].dev_path"
    assert result.drive_config.drives[7].version == """Unknown""", "Died on +.drive_config.drives[7].version"
    assert result.drive_config.drives[7].security_supported == False, "Died on +.drive_config.drives[7].security_supported"
    assert result.drive_config.drives[7].drive_type == """Block""", "Died on +.drive_config.drives[7].drive_type"
    assert result.drive_config.drives[7].product == """Unknown""", "Died on +.drive_config.drives[7].product"
    assert result.drive_config.drives[7].vendor == """Unknown""", "Died on +.drive_config.drives[7].vendor"
    assert result.drive_config.drives[7].security_enabled == False, "Died on +.drive_config.drives[7].security_enabled"
    assert result.drive_config.drives[7].security_frozen == False, "Died on +.drive_config.drives[7].security_frozen"
    assert result.drive_config.drives[7].connected == False, "Died on +.drive_config.drives[7].connected"
    assert result.drive_config.drives[7].path == """/dev/slot3""", "Died on +.drive_config.drives[7].path"
    assert result.drive_config.drives[7].scsi_state == """Unknown""", "Died on +.drive_config.drives[7].scsi_state"
    assert result.drive_config.drives[7].scsi_compat_id == """slot3""", "Died on +.drive_config.drives[7].scsi_compat_id"
    assert result.drive_config.drives[7].name == """slot3""", "Died on +.drive_config.drives[7].name"
    assert result.drive_config.drives[7].dev == 0, "Died on +.drive_config.drives[7].dev"
    assert result.drive_config.drives[7].security_at_maximum == False, "Died on +.drive_config.drives[7].security_at_maximum"
    assert result.drive_config.drives[7].path_link == """/dev/slot3""", "Died on +.drive_config.drives[7].path_link"
    assert result.drive_config.drives[6].security_locked == False, "Died on +.drive_config.drives[6].security_locked"
    assert result.drive_config.drives[6].serial == """slot2""", "Died on +.drive_config.drives[6].serial"
    assert result.drive_config.drives[6].size == 0, "Died on +.drive_config.drives[6].size"
    assert result.drive_config.drives[6].slot == 2, "Died on +.drive_config.drives[6].slot"
    assert result.drive_config.drives[6].uuid == UUID("d92f909d-c606-4c27-d17a-4cb6db95a35c"), "Died on .drive_config.drives[6].uuid"
    assert result.drive_config.drives[6].dev_path == """/dev/slot2""", "Died on +.drive_config.drives[6].dev_path"
    assert result.drive_config.drives[6].version == """Unknown""", "Died on +.drive_config.drives[6].version"
    assert result.drive_config.drives[6].security_supported == False, "Died on +.drive_config.drives[6].security_supported"
    assert result.drive_config.drives[6].drive_type == """Block""", "Died on +.drive_config.drives[6].drive_type"
    assert result.drive_config.drives[6].product == """Unknown""", "Died on +.drive_config.drives[6].product"
    assert result.drive_config.drives[6].vendor == """Unknown""", "Died on +.drive_config.drives[6].vendor"
    assert result.drive_config.drives[6].security_enabled == False, "Died on +.drive_config.drives[6].security_enabled"
    assert result.drive_config.drives[6].security_frozen == False, "Died on +.drive_config.drives[6].security_frozen"
    assert result.drive_config.drives[6].connected == False, "Died on +.drive_config.drives[6].connected"
    assert result.drive_config.drives[6].path == """/dev/slot2""", "Died on +.drive_config.drives[6].path"
    assert result.drive_config.drives[6].scsi_state == """Unknown""", "Died on +.drive_config.drives[6].scsi_state"
    assert result.drive_config.drives[6].scsi_compat_id == """slot2""", "Died on +.drive_config.drives[6].scsi_compat_id"
    assert result.drive_config.drives[6].name == """slot2""", "Died on +.drive_config.drives[6].name"
    assert result.drive_config.drives[6].dev == 0, "Died on +.drive_config.drives[6].dev"
    assert result.drive_config.drives[6].security_at_maximum == False, "Died on +.drive_config.drives[6].security_at_maximum"
    assert result.drive_config.drives[6].path_link == """/dev/slot2""", "Died on +.drive_config.drives[6].path_link"
    assert result.drive_config.drives[5].security_locked == False, "Died on +.drive_config.drives[5].security_locked"
    assert result.drive_config.drives[5].serial == """scsi-36000c29b0d225d4342d5750a81af4ea6""", "Died on +.drive_config.drives[5].serial"
    assert result.drive_config.drives[5].size == 268435456000, "Died on +.drive_config.drives[5].size"
    assert result.drive_config.drives[5].slot == 1, "Died on +.drive_config.drives[5].slot"
    assert result.drive_config.drives[5].uuid == UUID("a6944a6f-46f4-addb-ba1e-4c237b5fedc5"), "Died on .drive_config.drives[5].uuid"
    assert result.drive_config.drives[5].dev_path == """/dev/slot1""", "Died on +.drive_config.drives[5].dev_path"
    assert result.drive_config.drives[5].version == """Unknown""", "Died on +.drive_config.drives[5].version"
    assert result.drive_config.drives[5].security_supported == False, "Died on +.drive_config.drives[5].security_supported"
    assert result.drive_config.drives[5].drive_type == """Block""", "Died on +.drive_config.drives[5].drive_type"
    assert result.drive_config.drives[5].product == """Unknown""", "Died on +.drive_config.drives[5].product"
    assert result.drive_config.drives[5].vendor == """Unknown""", "Died on +.drive_config.drives[5].vendor"
    assert result.drive_config.drives[5].security_enabled == False, "Died on +.drive_config.drives[5].security_enabled"
    assert result.drive_config.drives[5].security_frozen == False, "Died on +.drive_config.drives[5].security_frozen"
    assert result.drive_config.drives[5].connected == True, "Died on +.drive_config.drives[5].connected"
    assert result.drive_config.drives[5].canonical_name == """sdb""", "Died on +.drive_config.drives[5].canonical_name"
    assert result.drive_config.drives[5].path == """/dev/sdb""", "Died on +.drive_config.drives[5].path"
    assert result.drive_config.drives[5].scsi_state == """Running""", "Died on +.drive_config.drives[5].scsi_state"
    assert result.drive_config.drives[5].scsi_compat_id == """scsi-36000c29b0d225d4342d5750a81af4ea6""", "Died on +.drive_config.drives[5].scsi_compat_id"
    assert result.drive_config.drives[5].name == """scsi-36000c29b0d225d4342d5750a81af4ea6""", "Died on +.drive_config.drives[5].name"
    assert result.drive_config.drives[5].dev == 2064, "Died on +.drive_config.drives[5].dev"
    assert result.drive_config.drives[5].security_at_maximum == False, "Died on +.drive_config.drives[5].security_at_maximum"
    assert result.drive_config.drives[5].path_link == """/dev/slot1""", "Died on +.drive_config.drives[5].path_link"
    assert result.drive_config.drives[4].security_locked == False, "Died on +.drive_config.drives[4].security_locked"
    assert result.drive_config.drives[4].serial == """scsi-36000c29551932b43ba5bb11c3cd54c1e-part6""", "Died on +.drive_config.drives[4].serial"
    assert result.drive_config.drives[4].size == 216787845120, "Died on +.drive_config.drives[4].size"
    assert result.drive_config.drives[4].slot == 0, "Died on +.drive_config.drives[4].slot"
    assert result.drive_config.drives[4].uuid == UUID("38b3c943-9e45-88e9-1ebe-130b4186d8da"), "Died on .drive_config.drives[4].uuid"
    assert result.drive_config.drives[4].dev_path == """/dev/slot0p6""", "Died on +.drive_config.drives[4].dev_path"
    assert result.drive_config.drives[4].version == """Unknown""", "Died on +.drive_config.drives[4].version"
    assert result.drive_config.drives[4].security_supported == False, "Died on +.drive_config.drives[4].security_supported"
    assert result.drive_config.drives[4].drive_type == """Slice""", "Died on +.drive_config.drives[4].drive_type"
    assert result.drive_config.drives[4].product == """Unknown""", "Died on +.drive_config.drives[4].product"
    assert result.drive_config.drives[4].vendor == """Unknown""", "Died on +.drive_config.drives[4].vendor"
    assert result.drive_config.drives[4].security_enabled == False, "Died on +.drive_config.drives[4].security_enabled"
    assert result.drive_config.drives[4].security_frozen == False, "Died on +.drive_config.drives[4].security_frozen"
    assert result.drive_config.drives[4].connected == True, "Died on +.drive_config.drives[4].connected"
    assert result.drive_config.drives[4].canonical_name == """sda""", "Died on +.drive_config.drives[4].canonical_name"
    assert result.drive_config.drives[4].path == """/dev/sda6""", "Died on +.drive_config.drives[4].path"
    assert result.drive_config.drives[4].scsi_state == """Running""", "Died on +.drive_config.drives[4].scsi_state"
    assert result.drive_config.drives[4].scsi_compat_id == """scsi-36000c29551932b43ba5bb11c3cd54c1e-part6""", "Died on +.drive_config.drives[4].scsi_compat_id"
    assert result.drive_config.drives[4].name == """scsi-36000c29551932b43ba5bb11c3cd54c1e-part6""", "Died on +.drive_config.drives[4].name"
    assert result.drive_config.drives[4].dev == 2054, "Died on +.drive_config.drives[4].dev"
    assert result.drive_config.drives[4].security_at_maximum == False, "Died on +.drive_config.drives[4].security_at_maximum"
    assert result.drive_config.drives[4].path_link == """/dev/slot0p6""", "Died on +.drive_config.drives[4].path_link"
    assert result.drive_config.drives[3].security_locked == False, "Died on +.drive_config.drives[3].security_locked"
    assert result.drive_config.drives[3].serial == """pendingDirtyBlocks""", "Died on +.drive_config.drives[3].serial"
    assert result.drive_config.drives[3].size == 9223372036854775807, "Died on +.drive_config.drives[3].size"
    assert result.drive_config.drives[3].slot == -2, "Died on +.drive_config.drives[3].slot"
    assert result.drive_config.drives[3].uuid == UUID("00abd0dc-ff28-2825-7faa-38e9a49d66a4"), "Died on .drive_config.drives[3].uuid"
    assert result.drive_config.drives[3].dev_path == """/mnt/pendingDirtyBlocks""", "Died on +.drive_config.drives[3].dev_path"
    assert result.drive_config.drives[3].version == """Unknown""", "Died on +.drive_config.drives[3].version"
    assert result.drive_config.drives[3].security_supported == False, "Died on +.drive_config.drives[3].security_supported"
    assert result.drive_config.drives[3].drive_type == """System""", "Died on +.drive_config.drives[3].drive_type"
    assert result.drive_config.drives[3].product == """Unknown""", "Died on +.drive_config.drives[3].product"
    assert result.drive_config.drives[3].vendor == """Unknown""", "Died on +.drive_config.drives[3].vendor"
    assert result.drive_config.drives[3].security_enabled == False, "Died on +.drive_config.drives[3].security_enabled"
    assert result.drive_config.drives[3].security_frozen == False, "Died on +.drive_config.drives[3].security_frozen"
    assert result.drive_config.drives[3].connected == False, "Died on +.drive_config.drives[3].connected"
    assert result.drive_config.drives[3].canonical_name == """pendingDirtyBlocks""", "Died on +.drive_config.drives[3].canonical_name"
    assert result.drive_config.drives[3].path == """/mnt/pendingDirtyBlocks""", "Died on +.drive_config.drives[3].path"
    assert result.drive_config.drives[3].scsi_state == """Unknown""", "Died on +.drive_config.drives[3].scsi_state"
    assert result.drive_config.drives[3].scsi_compat_id == """pendingDirtyBlocks""", "Died on +.drive_config.drives[3].scsi_compat_id"
    assert result.drive_config.drives[3].name == """pendingDirtyBlocks""", "Died on +.drive_config.drives[3].name"
    assert result.drive_config.drives[3].dev == 0, "Died on +.drive_config.drives[3].dev"
    assert result.drive_config.drives[3].security_at_maximum == False, "Died on +.drive_config.drives[3].security_at_maximum"
    assert result.drive_config.drives[3].path_link == """/mnt/pendingDirtyBlocks""", "Died on +.drive_config.drives[3].path_link"
    assert result.drive_config.drives[2].security_locked == False, "Died on +.drive_config.drives[2].security_locked"
    assert result.drive_config.drives[2].serial == """log""", "Died on +.drive_config.drives[2].serial"
    assert result.drive_config.drives[2].size == 9223372036854775807, "Died on +.drive_config.drives[2].size"
    assert result.drive_config.drives[2].slot == -2, "Died on +.drive_config.drives[2].slot"
    assert result.drive_config.drives[2].uuid == UUID("dc1d71bb-b5c4-d2a5-e936-db79ef10c19f"), "Died on .drive_config.drives[2].uuid"
    assert result.drive_config.drives[2].dev_path == """/var/log""", "Died on +.drive_config.drives[2].dev_path"
    assert result.drive_config.drives[2].version == """Unknown""", "Died on +.drive_config.drives[2].version"
    assert result.drive_config.drives[2].security_supported == False, "Died on +.drive_config.drives[2].security_supported"
    assert result.drive_config.drives[2].drive_type == """System""", "Died on +.drive_config.drives[2].drive_type"
    assert result.drive_config.drives[2].product == """Unknown""", "Died on +.drive_config.drives[2].product"
    assert result.drive_config.drives[2].vendor == """Unknown""", "Died on +.drive_config.drives[2].vendor"
    assert result.drive_config.drives[2].security_enabled == False, "Died on +.drive_config.drives[2].security_enabled"
    assert result.drive_config.drives[2].security_frozen == False, "Died on +.drive_config.drives[2].security_frozen"
    assert result.drive_config.drives[2].connected == False, "Died on +.drive_config.drives[2].connected"
    assert result.drive_config.drives[2].canonical_name == """log""", "Died on +.drive_config.drives[2].canonical_name"
    assert result.drive_config.drives[2].path == """/var/log""", "Died on +.drive_config.drives[2].path"
    assert result.drive_config.drives[2].scsi_state == """Unknown""", "Died on +.drive_config.drives[2].scsi_state"
    assert result.drive_config.drives[2].scsi_compat_id == """log""", "Died on +.drive_config.drives[2].scsi_compat_id"
    assert result.drive_config.drives[2].name == """log""", "Died on +.drive_config.drives[2].name"
    assert result.drive_config.drives[2].dev == 0, "Died on +.drive_config.drives[2].dev"
    assert result.drive_config.drives[2].security_at_maximum == False, "Died on +.drive_config.drives[2].security_at_maximum"
    assert result.drive_config.drives[2].path_link == """/var/log""", "Died on +.drive_config.drives[2].path_link"
    assert result.drive_config.drives[1].security_locked == False, "Died on +.drive_config.drives[1].security_locked"
    assert result.drive_config.drives[1].serial == """/""", "Died on +.drive_config.drives[1].serial"
    assert result.drive_config.drives[1].size == 9223372036854775807, "Died on +.drive_config.drives[1].size"
    assert result.drive_config.drives[1].slot == -2, "Died on +.drive_config.drives[1].slot"
    assert result.drive_config.drives[1].uuid == UUID("6666cd76-f969-5646-9e7b-e39d750cc7d9"), "Died on .drive_config.drives[1].uuid"
    assert result.drive_config.drives[1].dev_path == """/""", "Died on +.drive_config.drives[1].dev_path"
    assert result.drive_config.drives[1].version == """Unknown""", "Died on +.drive_config.drives[1].version"
    assert result.drive_config.drives[1].security_supported == False, "Died on +.drive_config.drives[1].security_supported"
    assert result.drive_config.drives[1].drive_type == """System""", "Died on +.drive_config.drives[1].drive_type"
    assert result.drive_config.drives[1].product == """Unknown""", "Died on +.drive_config.drives[1].product"
    assert result.drive_config.drives[1].vendor == """Unknown""", "Died on +.drive_config.drives[1].vendor"
    assert result.drive_config.drives[1].security_enabled == False, "Died on +.drive_config.drives[1].security_enabled"
    assert result.drive_config.drives[1].security_frozen == False, "Died on +.drive_config.drives[1].security_frozen"
    assert result.drive_config.drives[1].connected == False, "Died on +.drive_config.drives[1].connected"
    assert result.drive_config.drives[1].canonical_name == """/""", "Died on +.drive_config.drives[1].canonical_name"
    assert result.drive_config.drives[1].path == """/""", "Died on +.drive_config.drives[1].path"
    assert result.drive_config.drives[1].scsi_state == """Unknown""", "Died on +.drive_config.drives[1].scsi_state"
    assert result.drive_config.drives[1].scsi_compat_id == """/""", "Died on +.drive_config.drives[1].scsi_compat_id"
    assert result.drive_config.drives[1].name == """/""", "Died on +.drive_config.drives[1].name"
    assert result.drive_config.drives[1].dev == 0, "Died on +.drive_config.drives[1].dev"
    assert result.drive_config.drives[1].security_at_maximum == False, "Died on +.drive_config.drives[1].security_at_maximum"
    assert result.drive_config.drives[1].path_link == """/""", "Died on +.drive_config.drives[1].path_link"
    assert result.drive_config.drives[0].security_locked == False, "Died on +.drive_config.drives[0].security_locked"
    assert result.drive_config.drives[0].serial == """boot""", "Died on +.drive_config.drives[0].serial"
    assert result.drive_config.drives[0].size == 1024, "Died on +.drive_config.drives[0].size"
    assert result.drive_config.drives[0].slot == -2, "Died on +.drive_config.drives[0].slot"
    assert result.drive_config.drives[0].uuid == UUID("881cc415-7ed6-41a3-65a8-6452f27ed745"), "Died on .drive_config.drives[0].uuid"
    assert result.drive_config.drives[0].dev_path == """/boot""", "Died on +.drive_config.drives[0].dev_path"
    assert result.drive_config.drives[0].version == """Unknown""", "Died on +.drive_config.drives[0].version"
    assert result.drive_config.drives[0].security_supported == False, "Died on +.drive_config.drives[0].security_supported"
    assert result.drive_config.drives[0].drive_type == """System""", "Died on +.drive_config.drives[0].drive_type"
    assert result.drive_config.drives[0].product == """Unknown""", "Died on +.drive_config.drives[0].product"
    assert result.drive_config.drives[0].vendor == """Unknown""", "Died on +.drive_config.drives[0].vendor"
    assert result.drive_config.drives[0].security_enabled == False, "Died on +.drive_config.drives[0].security_enabled"
    assert result.drive_config.drives[0].security_frozen == False, "Died on +.drive_config.drives[0].security_frozen"
    assert result.drive_config.drives[0].connected == False, "Died on +.drive_config.drives[0].connected"
    assert result.drive_config.drives[0].canonical_name == """boot""", "Died on +.drive_config.drives[0].canonical_name"
    assert result.drive_config.drives[0].path == """/boot""", "Died on +.drive_config.drives[0].path"
    assert result.drive_config.drives[0].scsi_state == """Unknown""", "Died on +.drive_config.drives[0].scsi_state"
    assert result.drive_config.drives[0].scsi_compat_id == """boot""", "Died on +.drive_config.drives[0].scsi_compat_id"
    assert result.drive_config.drives[0].name == """boot""", "Died on +.drive_config.drives[0].name"
    assert result.drive_config.drives[0].dev == 0, "Died on +.drive_config.drives[0].dev"
    assert result.drive_config.drives[0].security_at_maximum == False, "Died on +.drive_config.drives[0].security_at_maximum"
    assert result.drive_config.drives[0].path_link == """/boot""", "Died on +.drive_config.drives[0].path_link"
    assert result.drive_config.num_slice_actual == 1, "Died on +.drive_config.num_slice_actual"
    assert result.drive_config.num_block_actual == 1, "Died on +.drive_config.num_block_actual"
    assert result.drive_config.num_total_actual == 2, "Died on +.drive_config.num_total_actual"
    assert result.drive_config.num_block_expected == 10, "Died on +.drive_config.num_block_expected"

def test_get_drive_config_v9_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetDriveConfig_v9_1)

    
    result = ef.get_drive_config()
    assert result.drive_config.num_slice_expected == 1, "Died on +.drive_config.num_slice_expected"
    assert result.drive_config.num_total_expected == 11, "Died on +.drive_config.num_total_expected"
    assert result.drive_config.drives[14].security_locked == False, "Died on +.drive_config.drives[14].security_locked"
    assert result.drive_config.drives[14].serial == """slot10""", "Died on +.drive_config.drives[14].serial"
    assert result.drive_config.drives[14].size == 0, "Died on +.drive_config.drives[14].size"
    assert result.drive_config.drives[14].slot == 10, "Died on +.drive_config.drives[14].slot"
    assert result.drive_config.drives[14].uuid == UUID("9d62ad9e-a097-d5d6-d4f7-1d27193270a1"), "Died on .drive_config.drives[14].uuid"
    assert result.drive_config.drives[14].dev_path == """/dev/slot10""", "Died on +.drive_config.drives[14].dev_path"
    assert result.drive_config.drives[14].version == """Unknown""", "Died on +.drive_config.drives[14].version"
    assert result.drive_config.drives[14].security_supported == False, "Died on +.drive_config.drives[14].security_supported"
    assert result.drive_config.drives[14].drive_type == """Block""", "Died on +.drive_config.drives[14].drive_type"
    assert result.drive_config.drives[14].product == """Unknown""", "Died on +.drive_config.drives[14].product"
    assert result.drive_config.drives[14].vendor == """Unknown""", "Died on +.drive_config.drives[14].vendor"
    assert result.drive_config.drives[14].security_enabled == False, "Died on +.drive_config.drives[14].security_enabled"
    assert result.drive_config.drives[14].security_frozen == False, "Died on +.drive_config.drives[14].security_frozen"
    assert result.drive_config.drives[14].connected == False, "Died on +.drive_config.drives[14].connected"
    assert result.drive_config.drives[14].path == """/dev/slot10""", "Died on +.drive_config.drives[14].path"
    assert result.drive_config.drives[14].scsi_state == """Unknown""", "Died on +.drive_config.drives[14].scsi_state"
    assert result.drive_config.drives[14].scsi_compat_id == """slot10""", "Died on +.drive_config.drives[14].scsi_compat_id"
    assert result.drive_config.drives[14].name == """slot10""", "Died on +.drive_config.drives[14].name"
    assert result.drive_config.drives[14].dev == 0, "Died on +.drive_config.drives[14].dev"
    assert result.drive_config.drives[14].security_at_maximum == False, "Died on +.drive_config.drives[14].security_at_maximum"
    assert result.drive_config.drives[14].path_link == """/dev/slot10""", "Died on +.drive_config.drives[14].path_link"
    assert result.drive_config.drives[13].security_locked == False, "Died on +.drive_config.drives[13].security_locked"
    assert result.drive_config.drives[13].serial == """slot9""", "Died on +.drive_config.drives[13].serial"
    assert result.drive_config.drives[13].size == 0, "Died on +.drive_config.drives[13].size"
    assert result.drive_config.drives[13].slot == 9, "Died on +.drive_config.drives[13].slot"
    assert result.drive_config.drives[13].uuid == UUID("612e2106-7032-850a-a16d-4980b53ffb23"), "Died on .drive_config.drives[13].uuid"
    assert result.drive_config.drives[13].dev_path == """/dev/slot9""", "Died on +.drive_config.drives[13].dev_path"
    assert result.drive_config.drives[13].version == """Unknown""", "Died on +.drive_config.drives[13].version"
    assert result.drive_config.drives[13].security_supported == False, "Died on +.drive_config.drives[13].security_supported"
    assert result.drive_config.drives[13].drive_type == """Block""", "Died on +.drive_config.drives[13].drive_type"
    assert result.drive_config.drives[13].product == """Unknown""", "Died on +.drive_config.drives[13].product"
    assert result.drive_config.drives[13].vendor == """Unknown""", "Died on +.drive_config.drives[13].vendor"
    assert result.drive_config.drives[13].security_enabled == False, "Died on +.drive_config.drives[13].security_enabled"
    assert result.drive_config.drives[13].security_frozen == False, "Died on +.drive_config.drives[13].security_frozen"
    assert result.drive_config.drives[13].connected == False, "Died on +.drive_config.drives[13].connected"
    assert result.drive_config.drives[13].path == """/dev/slot9""", "Died on +.drive_config.drives[13].path"
    assert result.drive_config.drives[13].scsi_state == """Unknown""", "Died on +.drive_config.drives[13].scsi_state"
    assert result.drive_config.drives[13].scsi_compat_id == """slot9""", "Died on +.drive_config.drives[13].scsi_compat_id"
    assert result.drive_config.drives[13].name == """slot9""", "Died on +.drive_config.drives[13].name"
    assert result.drive_config.drives[13].dev == 0, "Died on +.drive_config.drives[13].dev"
    assert result.drive_config.drives[13].security_at_maximum == False, "Died on +.drive_config.drives[13].security_at_maximum"
    assert result.drive_config.drives[13].path_link == """/dev/slot9""", "Died on +.drive_config.drives[13].path_link"
    assert result.drive_config.drives[12].security_locked == False, "Died on +.drive_config.drives[12].security_locked"
    assert result.drive_config.drives[12].serial == """slot8""", "Died on +.drive_config.drives[12].serial"
    assert result.drive_config.drives[12].size == 0, "Died on +.drive_config.drives[12].size"
    assert result.drive_config.drives[12].slot == 8, "Died on +.drive_config.drives[12].slot"
    assert result.drive_config.drives[12].uuid == UUID("28384068-fdee-1dae-21e3-493558121657"), "Died on .drive_config.drives[12].uuid"
    assert result.drive_config.drives[12].dev_path == """/dev/slot8""", "Died on +.drive_config.drives[12].dev_path"
    assert result.drive_config.drives[12].version == """Unknown""", "Died on +.drive_config.drives[12].version"
    assert result.drive_config.drives[12].security_supported == False, "Died on +.drive_config.drives[12].security_supported"
    assert result.drive_config.drives[12].drive_type == """Block""", "Died on +.drive_config.drives[12].drive_type"
    assert result.drive_config.drives[12].product == """Unknown""", "Died on +.drive_config.drives[12].product"
    assert result.drive_config.drives[12].vendor == """Unknown""", "Died on +.drive_config.drives[12].vendor"
    assert result.drive_config.drives[12].security_enabled == False, "Died on +.drive_config.drives[12].security_enabled"
    assert result.drive_config.drives[12].security_frozen == False, "Died on +.drive_config.drives[12].security_frozen"
    assert result.drive_config.drives[12].connected == False, "Died on +.drive_config.drives[12].connected"
    assert result.drive_config.drives[12].path == """/dev/slot8""", "Died on +.drive_config.drives[12].path"
    assert result.drive_config.drives[12].scsi_state == """Unknown""", "Died on +.drive_config.drives[12].scsi_state"
    assert result.drive_config.drives[12].scsi_compat_id == """slot8""", "Died on +.drive_config.drives[12].scsi_compat_id"
    assert result.drive_config.drives[12].name == """slot8""", "Died on +.drive_config.drives[12].name"
    assert result.drive_config.drives[12].dev == 0, "Died on +.drive_config.drives[12].dev"
    assert result.drive_config.drives[12].security_at_maximum == False, "Died on +.drive_config.drives[12].security_at_maximum"
    assert result.drive_config.drives[12].path_link == """/dev/slot8""", "Died on +.drive_config.drives[12].path_link"
    assert result.drive_config.drives[11].security_locked == False, "Died on +.drive_config.drives[11].security_locked"
    assert result.drive_config.drives[11].serial == """slot7""", "Died on +.drive_config.drives[11].serial"
    assert result.drive_config.drives[11].size == 0, "Died on +.drive_config.drives[11].size"
    assert result.drive_config.drives[11].slot == 7, "Died on +.drive_config.drives[11].slot"
    assert result.drive_config.drives[11].uuid == UUID("76c29a96-68a6-2d8e-6416-392f9fd07919"), "Died on .drive_config.drives[11].uuid"
    assert result.drive_config.drives[11].dev_path == """/dev/slot7""", "Died on +.drive_config.drives[11].dev_path"
    assert result.drive_config.drives[11].version == """Unknown""", "Died on +.drive_config.drives[11].version"
    assert result.drive_config.drives[11].security_supported == False, "Died on +.drive_config.drives[11].security_supported"
    assert result.drive_config.drives[11].drive_type == """Block""", "Died on +.drive_config.drives[11].drive_type"
    assert result.drive_config.drives[11].product == """Unknown""", "Died on +.drive_config.drives[11].product"
    assert result.drive_config.drives[11].vendor == """Unknown""", "Died on +.drive_config.drives[11].vendor"
    assert result.drive_config.drives[11].security_enabled == False, "Died on +.drive_config.drives[11].security_enabled"
    assert result.drive_config.drives[11].security_frozen == False, "Died on +.drive_config.drives[11].security_frozen"
    assert result.drive_config.drives[11].connected == False, "Died on +.drive_config.drives[11].connected"
    assert result.drive_config.drives[11].path == """/dev/slot7""", "Died on +.drive_config.drives[11].path"
    assert result.drive_config.drives[11].scsi_state == """Unknown""", "Died on +.drive_config.drives[11].scsi_state"
    assert result.drive_config.drives[11].scsi_compat_id == """slot7""", "Died on +.drive_config.drives[11].scsi_compat_id"
    assert result.drive_config.drives[11].name == """slot7""", "Died on +.drive_config.drives[11].name"
    assert result.drive_config.drives[11].dev == 0, "Died on +.drive_config.drives[11].dev"
    assert result.drive_config.drives[11].security_at_maximum == False, "Died on +.drive_config.drives[11].security_at_maximum"
    assert result.drive_config.drives[11].path_link == """/dev/slot7""", "Died on +.drive_config.drives[11].path_link"
    assert result.drive_config.drives[10].security_locked == False, "Died on +.drive_config.drives[10].security_locked"
    assert result.drive_config.drives[10].serial == """slot6""", "Died on +.drive_config.drives[10].serial"
    assert result.drive_config.drives[10].size == 0, "Died on +.drive_config.drives[10].size"
    assert result.drive_config.drives[10].slot == 6, "Died on +.drive_config.drives[10].slot"
    assert result.drive_config.drives[10].uuid == UUID("c1b04a69-49a0-fdee-b818-c6cdfafd6cd5"), "Died on .drive_config.drives[10].uuid"
    assert result.drive_config.drives[10].dev_path == """/dev/slot6""", "Died on +.drive_config.drives[10].dev_path"
    assert result.drive_config.drives[10].version == """Unknown""", "Died on +.drive_config.drives[10].version"
    assert result.drive_config.drives[10].security_supported == False, "Died on +.drive_config.drives[10].security_supported"
    assert result.drive_config.drives[10].drive_type == """Block""", "Died on +.drive_config.drives[10].drive_type"
    assert result.drive_config.drives[10].product == """Unknown""", "Died on +.drive_config.drives[10].product"
    assert result.drive_config.drives[10].vendor == """Unknown""", "Died on +.drive_config.drives[10].vendor"
    assert result.drive_config.drives[10].security_enabled == False, "Died on +.drive_config.drives[10].security_enabled"
    assert result.drive_config.drives[10].security_frozen == False, "Died on +.drive_config.drives[10].security_frozen"
    assert result.drive_config.drives[10].connected == False, "Died on +.drive_config.drives[10].connected"
    assert result.drive_config.drives[10].path == """/dev/slot6""", "Died on +.drive_config.drives[10].path"
    assert result.drive_config.drives[10].scsi_state == """Unknown""", "Died on +.drive_config.drives[10].scsi_state"
    assert result.drive_config.drives[10].scsi_compat_id == """slot6""", "Died on +.drive_config.drives[10].scsi_compat_id"
    assert result.drive_config.drives[10].name == """slot6""", "Died on +.drive_config.drives[10].name"
    assert result.drive_config.drives[10].dev == 0, "Died on +.drive_config.drives[10].dev"
    assert result.drive_config.drives[10].security_at_maximum == False, "Died on +.drive_config.drives[10].security_at_maximum"
    assert result.drive_config.drives[10].path_link == """/dev/slot6""", "Died on +.drive_config.drives[10].path_link"
    assert result.drive_config.drives[9].security_locked == False, "Died on +.drive_config.drives[9].security_locked"
    assert result.drive_config.drives[9].serial == """slot5""", "Died on +.drive_config.drives[9].serial"
    assert result.drive_config.drives[9].size == 0, "Died on +.drive_config.drives[9].size"
    assert result.drive_config.drives[9].slot == 5, "Died on +.drive_config.drives[9].slot"
    assert result.drive_config.drives[9].uuid == UUID("b31123fa-9a17-0ccd-deab-deac32a58371"), "Died on .drive_config.drives[9].uuid"
    assert result.drive_config.drives[9].dev_path == """/dev/slot5""", "Died on +.drive_config.drives[9].dev_path"
    assert result.drive_config.drives[9].version == """Unknown""", "Died on +.drive_config.drives[9].version"
    assert result.drive_config.drives[9].security_supported == False, "Died on +.drive_config.drives[9].security_supported"
    assert result.drive_config.drives[9].drive_type == """Block""", "Died on +.drive_config.drives[9].drive_type"
    assert result.drive_config.drives[9].product == """Unknown""", "Died on +.drive_config.drives[9].product"
    assert result.drive_config.drives[9].vendor == """Unknown""", "Died on +.drive_config.drives[9].vendor"
    assert result.drive_config.drives[9].security_enabled == False, "Died on +.drive_config.drives[9].security_enabled"
    assert result.drive_config.drives[9].security_frozen == False, "Died on +.drive_config.drives[9].security_frozen"
    assert result.drive_config.drives[9].connected == False, "Died on +.drive_config.drives[9].connected"
    assert result.drive_config.drives[9].path == """/dev/slot5""", "Died on +.drive_config.drives[9].path"
    assert result.drive_config.drives[9].scsi_state == """Unknown""", "Died on +.drive_config.drives[9].scsi_state"
    assert result.drive_config.drives[9].scsi_compat_id == """slot5""", "Died on +.drive_config.drives[9].scsi_compat_id"
    assert result.drive_config.drives[9].name == """slot5""", "Died on +.drive_config.drives[9].name"
    assert result.drive_config.drives[9].dev == 0, "Died on +.drive_config.drives[9].dev"
    assert result.drive_config.drives[9].security_at_maximum == False, "Died on +.drive_config.drives[9].security_at_maximum"
    assert result.drive_config.drives[9].path_link == """/dev/slot5""", "Died on +.drive_config.drives[9].path_link"
    assert result.drive_config.drives[8].security_locked == False, "Died on +.drive_config.drives[8].security_locked"
    assert result.drive_config.drives[8].serial == """slot4""", "Died on +.drive_config.drives[8].serial"
    assert result.drive_config.drives[8].size == 0, "Died on +.drive_config.drives[8].size"
    assert result.drive_config.drives[8].slot == 4, "Died on +.drive_config.drives[8].slot"
    assert result.drive_config.drives[8].uuid == UUID("76e3d13f-88c5-c334-8f0b-8486964d369e"), "Died on .drive_config.drives[8].uuid"
    assert result.drive_config.drives[8].dev_path == """/dev/slot4""", "Died on +.drive_config.drives[8].dev_path"
    assert result.drive_config.drives[8].version == """Unknown""", "Died on +.drive_config.drives[8].version"
    assert result.drive_config.drives[8].security_supported == False, "Died on +.drive_config.drives[8].security_supported"
    assert result.drive_config.drives[8].drive_type == """Block""", "Died on +.drive_config.drives[8].drive_type"
    assert result.drive_config.drives[8].product == """Unknown""", "Died on +.drive_config.drives[8].product"
    assert result.drive_config.drives[8].vendor == """Unknown""", "Died on +.drive_config.drives[8].vendor"
    assert result.drive_config.drives[8].security_enabled == False, "Died on +.drive_config.drives[8].security_enabled"
    assert result.drive_config.drives[8].security_frozen == False, "Died on +.drive_config.drives[8].security_frozen"
    assert result.drive_config.drives[8].connected == False, "Died on +.drive_config.drives[8].connected"
    assert result.drive_config.drives[8].path == """/dev/slot4""", "Died on +.drive_config.drives[8].path"
    assert result.drive_config.drives[8].scsi_state == """Unknown""", "Died on +.drive_config.drives[8].scsi_state"
    assert result.drive_config.drives[8].scsi_compat_id == """slot4""", "Died on +.drive_config.drives[8].scsi_compat_id"
    assert result.drive_config.drives[8].name == """slot4""", "Died on +.drive_config.drives[8].name"
    assert result.drive_config.drives[8].dev == 0, "Died on +.drive_config.drives[8].dev"
    assert result.drive_config.drives[8].security_at_maximum == False, "Died on +.drive_config.drives[8].security_at_maximum"
    assert result.drive_config.drives[8].path_link == """/dev/slot4""", "Died on +.drive_config.drives[8].path_link"
    assert result.drive_config.drives[7].security_locked == False, "Died on +.drive_config.drives[7].security_locked"
    assert result.drive_config.drives[7].serial == """slot3""", "Died on +.drive_config.drives[7].serial"
    assert result.drive_config.drives[7].size == 0, "Died on +.drive_config.drives[7].size"
    assert result.drive_config.drives[7].slot == 3, "Died on +.drive_config.drives[7].slot"
    assert result.drive_config.drives[7].uuid == UUID("25b903d1-3b55-d53f-a556-47b28f91b728"), "Died on .drive_config.drives[7].uuid"
    assert result.drive_config.drives[7].dev_path == """/dev/slot3""", "Died on +.drive_config.drives[7].dev_path"
    assert result.drive_config.drives[7].version == """Unknown""", "Died on +.drive_config.drives[7].version"
    assert result.drive_config.drives[7].security_supported == False, "Died on +.drive_config.drives[7].security_supported"
    assert result.drive_config.drives[7].drive_type == """Block""", "Died on +.drive_config.drives[7].drive_type"
    assert result.drive_config.drives[7].product == """Unknown""", "Died on +.drive_config.drives[7].product"
    assert result.drive_config.drives[7].vendor == """Unknown""", "Died on +.drive_config.drives[7].vendor"
    assert result.drive_config.drives[7].security_enabled == False, "Died on +.drive_config.drives[7].security_enabled"
    assert result.drive_config.drives[7].security_frozen == False, "Died on +.drive_config.drives[7].security_frozen"
    assert result.drive_config.drives[7].connected == False, "Died on +.drive_config.drives[7].connected"
    assert result.drive_config.drives[7].path == """/dev/slot3""", "Died on +.drive_config.drives[7].path"
    assert result.drive_config.drives[7].scsi_state == """Unknown""", "Died on +.drive_config.drives[7].scsi_state"
    assert result.drive_config.drives[7].scsi_compat_id == """slot3""", "Died on +.drive_config.drives[7].scsi_compat_id"
    assert result.drive_config.drives[7].name == """slot3""", "Died on +.drive_config.drives[7].name"
    assert result.drive_config.drives[7].dev == 0, "Died on +.drive_config.drives[7].dev"
    assert result.drive_config.drives[7].security_at_maximum == False, "Died on +.drive_config.drives[7].security_at_maximum"
    assert result.drive_config.drives[7].path_link == """/dev/slot3""", "Died on +.drive_config.drives[7].path_link"
    assert result.drive_config.drives[6].security_locked == False, "Died on +.drive_config.drives[6].security_locked"
    assert result.drive_config.drives[6].serial == """slot2""", "Died on +.drive_config.drives[6].serial"
    assert result.drive_config.drives[6].size == 0, "Died on +.drive_config.drives[6].size"
    assert result.drive_config.drives[6].slot == 2, "Died on +.drive_config.drives[6].slot"
    assert result.drive_config.drives[6].uuid == UUID("d92f909d-c606-4c27-d17a-4cb6db95a35c"), "Died on .drive_config.drives[6].uuid"
    assert result.drive_config.drives[6].dev_path == """/dev/slot2""", "Died on +.drive_config.drives[6].dev_path"
    assert result.drive_config.drives[6].version == """Unknown""", "Died on +.drive_config.drives[6].version"
    assert result.drive_config.drives[6].security_supported == False, "Died on +.drive_config.drives[6].security_supported"
    assert result.drive_config.drives[6].drive_type == """Block""", "Died on +.drive_config.drives[6].drive_type"
    assert result.drive_config.drives[6].product == """Unknown""", "Died on +.drive_config.drives[6].product"
    assert result.drive_config.drives[6].vendor == """Unknown""", "Died on +.drive_config.drives[6].vendor"
    assert result.drive_config.drives[6].security_enabled == False, "Died on +.drive_config.drives[6].security_enabled"
    assert result.drive_config.drives[6].security_frozen == False, "Died on +.drive_config.drives[6].security_frozen"
    assert result.drive_config.drives[6].connected == False, "Died on +.drive_config.drives[6].connected"
    assert result.drive_config.drives[6].path == """/dev/slot2""", "Died on +.drive_config.drives[6].path"
    assert result.drive_config.drives[6].scsi_state == """Unknown""", "Died on +.drive_config.drives[6].scsi_state"
    assert result.drive_config.drives[6].scsi_compat_id == """slot2""", "Died on +.drive_config.drives[6].scsi_compat_id"
    assert result.drive_config.drives[6].name == """slot2""", "Died on +.drive_config.drives[6].name"
    assert result.drive_config.drives[6].dev == 0, "Died on +.drive_config.drives[6].dev"
    assert result.drive_config.drives[6].security_at_maximum == False, "Died on +.drive_config.drives[6].security_at_maximum"
    assert result.drive_config.drives[6].path_link == """/dev/slot2""", "Died on +.drive_config.drives[6].path_link"
    assert result.drive_config.drives[5].security_locked == False, "Died on +.drive_config.drives[5].security_locked"
    assert result.drive_config.drives[5].serial == """scsi-36000c29b0d225d4342d5750a81af4ea6""", "Died on +.drive_config.drives[5].serial"
    assert result.drive_config.drives[5].size == 268435456000, "Died on +.drive_config.drives[5].size"
    assert result.drive_config.drives[5].slot == 1, "Died on +.drive_config.drives[5].slot"
    assert result.drive_config.drives[5].uuid == UUID("a6944a6f-46f4-addb-ba1e-4c237b5fedc5"), "Died on .drive_config.drives[5].uuid"
    assert result.drive_config.drives[5].dev_path == """/dev/slot1""", "Died on +.drive_config.drives[5].dev_path"
    assert result.drive_config.drives[5].version == """Unknown""", "Died on +.drive_config.drives[5].version"
    assert result.drive_config.drives[5].security_supported == False, "Died on +.drive_config.drives[5].security_supported"
    assert result.drive_config.drives[5].drive_type == """Block""", "Died on +.drive_config.drives[5].drive_type"
    assert result.drive_config.drives[5].product == """Unknown""", "Died on +.drive_config.drives[5].product"
    assert result.drive_config.drives[5].vendor == """Unknown""", "Died on +.drive_config.drives[5].vendor"
    assert result.drive_config.drives[5].security_enabled == False, "Died on +.drive_config.drives[5].security_enabled"
    assert result.drive_config.drives[5].security_frozen == False, "Died on +.drive_config.drives[5].security_frozen"
    assert result.drive_config.drives[5].connected == True, "Died on +.drive_config.drives[5].connected"
    assert result.drive_config.drives[5].canonical_name == """sdb""", "Died on +.drive_config.drives[5].canonical_name"
    assert result.drive_config.drives[5].path == """/dev/sdb""", "Died on +.drive_config.drives[5].path"
    assert result.drive_config.drives[5].scsi_state == """Running""", "Died on +.drive_config.drives[5].scsi_state"
    assert result.drive_config.drives[5].scsi_compat_id == """scsi-36000c29b0d225d4342d5750a81af4ea6""", "Died on +.drive_config.drives[5].scsi_compat_id"
    assert result.drive_config.drives[5].name == """scsi-36000c29b0d225d4342d5750a81af4ea6""", "Died on +.drive_config.drives[5].name"
    assert result.drive_config.drives[5].dev == 2064, "Died on +.drive_config.drives[5].dev"
    assert result.drive_config.drives[5].security_at_maximum == False, "Died on +.drive_config.drives[5].security_at_maximum"
    assert result.drive_config.drives[5].path_link == """/dev/slot1""", "Died on +.drive_config.drives[5].path_link"
    assert result.drive_config.drives[4].security_locked == False, "Died on +.drive_config.drives[4].security_locked"
    assert result.drive_config.drives[4].serial == """scsi-36000c29551932b43ba5bb11c3cd54c1e-part6""", "Died on +.drive_config.drives[4].serial"
    assert result.drive_config.drives[4].size == 216787845120, "Died on +.drive_config.drives[4].size"
    assert result.drive_config.drives[4].slot == 0, "Died on +.drive_config.drives[4].slot"
    assert result.drive_config.drives[4].uuid == UUID("38b3c943-9e45-88e9-1ebe-130b4186d8da"), "Died on .drive_config.drives[4].uuid"
    assert result.drive_config.drives[4].dev_path == """/dev/slot0p6""", "Died on +.drive_config.drives[4].dev_path"
    assert result.drive_config.drives[4].version == """Unknown""", "Died on +.drive_config.drives[4].version"
    assert result.drive_config.drives[4].security_supported == False, "Died on +.drive_config.drives[4].security_supported"
    assert result.drive_config.drives[4].drive_type == """Slice""", "Died on +.drive_config.drives[4].drive_type"
    assert result.drive_config.drives[4].product == """Unknown""", "Died on +.drive_config.drives[4].product"
    assert result.drive_config.drives[4].vendor == """Unknown""", "Died on +.drive_config.drives[4].vendor"
    assert result.drive_config.drives[4].security_enabled == False, "Died on +.drive_config.drives[4].security_enabled"
    assert result.drive_config.drives[4].security_frozen == False, "Died on +.drive_config.drives[4].security_frozen"
    assert result.drive_config.drives[4].connected == True, "Died on +.drive_config.drives[4].connected"
    assert result.drive_config.drives[4].canonical_name == """sda""", "Died on +.drive_config.drives[4].canonical_name"
    assert result.drive_config.drives[4].path == """/dev/sda6""", "Died on +.drive_config.drives[4].path"
    assert result.drive_config.drives[4].scsi_state == """Running""", "Died on +.drive_config.drives[4].scsi_state"
    assert result.drive_config.drives[4].scsi_compat_id == """scsi-36000c29551932b43ba5bb11c3cd54c1e-part6""", "Died on +.drive_config.drives[4].scsi_compat_id"
    assert result.drive_config.drives[4].name == """scsi-36000c29551932b43ba5bb11c3cd54c1e-part6""", "Died on +.drive_config.drives[4].name"
    assert result.drive_config.drives[4].dev == 2054, "Died on +.drive_config.drives[4].dev"
    assert result.drive_config.drives[4].security_at_maximum == False, "Died on +.drive_config.drives[4].security_at_maximum"
    assert result.drive_config.drives[4].path_link == """/dev/slot0p6""", "Died on +.drive_config.drives[4].path_link"
    assert result.drive_config.drives[3].security_locked == False, "Died on +.drive_config.drives[3].security_locked"
    assert result.drive_config.drives[3].serial == """pendingDirtyBlocks""", "Died on +.drive_config.drives[3].serial"
    assert result.drive_config.drives[3].size == 9223372036854775807, "Died on +.drive_config.drives[3].size"
    assert result.drive_config.drives[3].slot == -2, "Died on +.drive_config.drives[3].slot"
    assert result.drive_config.drives[3].uuid == UUID("00abd0dc-ff28-2825-7faa-38e9a49d66a4"), "Died on .drive_config.drives[3].uuid"
    assert result.drive_config.drives[3].dev_path == """/mnt/pendingDirtyBlocks""", "Died on +.drive_config.drives[3].dev_path"
    assert result.drive_config.drives[3].version == """Unknown""", "Died on +.drive_config.drives[3].version"
    assert result.drive_config.drives[3].security_supported == False, "Died on +.drive_config.drives[3].security_supported"
    assert result.drive_config.drives[3].drive_type == """System""", "Died on +.drive_config.drives[3].drive_type"
    assert result.drive_config.drives[3].product == """Unknown""", "Died on +.drive_config.drives[3].product"
    assert result.drive_config.drives[3].vendor == """Unknown""", "Died on +.drive_config.drives[3].vendor"
    assert result.drive_config.drives[3].security_enabled == False, "Died on +.drive_config.drives[3].security_enabled"
    assert result.drive_config.drives[3].security_frozen == False, "Died on +.drive_config.drives[3].security_frozen"
    assert result.drive_config.drives[3].connected == False, "Died on +.drive_config.drives[3].connected"
    assert result.drive_config.drives[3].canonical_name == """pendingDirtyBlocks""", "Died on +.drive_config.drives[3].canonical_name"
    assert result.drive_config.drives[3].path == """/mnt/pendingDirtyBlocks""", "Died on +.drive_config.drives[3].path"
    assert result.drive_config.drives[3].scsi_state == """Unknown""", "Died on +.drive_config.drives[3].scsi_state"
    assert result.drive_config.drives[3].scsi_compat_id == """pendingDirtyBlocks""", "Died on +.drive_config.drives[3].scsi_compat_id"
    assert result.drive_config.drives[3].name == """pendingDirtyBlocks""", "Died on +.drive_config.drives[3].name"
    assert result.drive_config.drives[3].dev == 0, "Died on +.drive_config.drives[3].dev"
    assert result.drive_config.drives[3].security_at_maximum == False, "Died on +.drive_config.drives[3].security_at_maximum"
    assert result.drive_config.drives[3].path_link == """/mnt/pendingDirtyBlocks""", "Died on +.drive_config.drives[3].path_link"
    assert result.drive_config.drives[2].security_locked == False, "Died on +.drive_config.drives[2].security_locked"
    assert result.drive_config.drives[2].serial == """log""", "Died on +.drive_config.drives[2].serial"
    assert result.drive_config.drives[2].size == 9223372036854775807, "Died on +.drive_config.drives[2].size"
    assert result.drive_config.drives[2].slot == -2, "Died on +.drive_config.drives[2].slot"
    assert result.drive_config.drives[2].uuid == UUID("dc1d71bb-b5c4-d2a5-e936-db79ef10c19f"), "Died on .drive_config.drives[2].uuid"
    assert result.drive_config.drives[2].dev_path == """/var/log""", "Died on +.drive_config.drives[2].dev_path"
    assert result.drive_config.drives[2].version == """Unknown""", "Died on +.drive_config.drives[2].version"
    assert result.drive_config.drives[2].security_supported == False, "Died on +.drive_config.drives[2].security_supported"
    assert result.drive_config.drives[2].drive_type == """System""", "Died on +.drive_config.drives[2].drive_type"
    assert result.drive_config.drives[2].product == """Unknown""", "Died on +.drive_config.drives[2].product"
    assert result.drive_config.drives[2].vendor == """Unknown""", "Died on +.drive_config.drives[2].vendor"
    assert result.drive_config.drives[2].security_enabled == False, "Died on +.drive_config.drives[2].security_enabled"
    assert result.drive_config.drives[2].security_frozen == False, "Died on +.drive_config.drives[2].security_frozen"
    assert result.drive_config.drives[2].connected == False, "Died on +.drive_config.drives[2].connected"
    assert result.drive_config.drives[2].canonical_name == """log""", "Died on +.drive_config.drives[2].canonical_name"
    assert result.drive_config.drives[2].path == """/var/log""", "Died on +.drive_config.drives[2].path"
    assert result.drive_config.drives[2].scsi_state == """Unknown""", "Died on +.drive_config.drives[2].scsi_state"
    assert result.drive_config.drives[2].scsi_compat_id == """log""", "Died on +.drive_config.drives[2].scsi_compat_id"
    assert result.drive_config.drives[2].name == """log""", "Died on +.drive_config.drives[2].name"
    assert result.drive_config.drives[2].dev == 0, "Died on +.drive_config.drives[2].dev"
    assert result.drive_config.drives[2].security_at_maximum == False, "Died on +.drive_config.drives[2].security_at_maximum"
    assert result.drive_config.drives[2].path_link == """/var/log""", "Died on +.drive_config.drives[2].path_link"
    assert result.drive_config.drives[1].security_locked == False, "Died on +.drive_config.drives[1].security_locked"
    assert result.drive_config.drives[1].serial == """/""", "Died on +.drive_config.drives[1].serial"
    assert result.drive_config.drives[1].size == 9223372036854775807, "Died on +.drive_config.drives[1].size"
    assert result.drive_config.drives[1].slot == -2, "Died on +.drive_config.drives[1].slot"
    assert result.drive_config.drives[1].uuid == UUID("6666cd76-f969-5646-9e7b-e39d750cc7d9"), "Died on .drive_config.drives[1].uuid"
    assert result.drive_config.drives[1].dev_path == """/""", "Died on +.drive_config.drives[1].dev_path"
    assert result.drive_config.drives[1].version == """Unknown""", "Died on +.drive_config.drives[1].version"
    assert result.drive_config.drives[1].security_supported == False, "Died on +.drive_config.drives[1].security_supported"
    assert result.drive_config.drives[1].drive_type == """System""", "Died on +.drive_config.drives[1].drive_type"
    assert result.drive_config.drives[1].product == """Unknown""", "Died on +.drive_config.drives[1].product"
    assert result.drive_config.drives[1].vendor == """Unknown""", "Died on +.drive_config.drives[1].vendor"
    assert result.drive_config.drives[1].security_enabled == False, "Died on +.drive_config.drives[1].security_enabled"
    assert result.drive_config.drives[1].security_frozen == False, "Died on +.drive_config.drives[1].security_frozen"
    assert result.drive_config.drives[1].connected == False, "Died on +.drive_config.drives[1].connected"
    assert result.drive_config.drives[1].canonical_name == """/""", "Died on +.drive_config.drives[1].canonical_name"
    assert result.drive_config.drives[1].path == """/""", "Died on +.drive_config.drives[1].path"
    assert result.drive_config.drives[1].scsi_state == """Unknown""", "Died on +.drive_config.drives[1].scsi_state"
    assert result.drive_config.drives[1].scsi_compat_id == """/""", "Died on +.drive_config.drives[1].scsi_compat_id"
    assert result.drive_config.drives[1].name == """/""", "Died on +.drive_config.drives[1].name"
    assert result.drive_config.drives[1].dev == 0, "Died on +.drive_config.drives[1].dev"
    assert result.drive_config.drives[1].security_at_maximum == False, "Died on +.drive_config.drives[1].security_at_maximum"
    assert result.drive_config.drives[1].path_link == """/""", "Died on +.drive_config.drives[1].path_link"
    assert result.drive_config.drives[0].security_locked == False, "Died on +.drive_config.drives[0].security_locked"
    assert result.drive_config.drives[0].serial == """boot""", "Died on +.drive_config.drives[0].serial"
    assert result.drive_config.drives[0].size == 1024, "Died on +.drive_config.drives[0].size"
    assert result.drive_config.drives[0].slot == -2, "Died on +.drive_config.drives[0].slot"
    assert result.drive_config.drives[0].uuid == UUID("881cc415-7ed6-41a3-65a8-6452f27ed745"), "Died on .drive_config.drives[0].uuid"
    assert result.drive_config.drives[0].dev_path == """/boot""", "Died on +.drive_config.drives[0].dev_path"
    assert result.drive_config.drives[0].version == """Unknown""", "Died on +.drive_config.drives[0].version"
    assert result.drive_config.drives[0].security_supported == False, "Died on +.drive_config.drives[0].security_supported"
    assert result.drive_config.drives[0].drive_type == """System""", "Died on +.drive_config.drives[0].drive_type"
    assert result.drive_config.drives[0].product == """Unknown""", "Died on +.drive_config.drives[0].product"
    assert result.drive_config.drives[0].vendor == """Unknown""", "Died on +.drive_config.drives[0].vendor"
    assert result.drive_config.drives[0].security_enabled == False, "Died on +.drive_config.drives[0].security_enabled"
    assert result.drive_config.drives[0].security_frozen == False, "Died on +.drive_config.drives[0].security_frozen"
    assert result.drive_config.drives[0].connected == False, "Died on +.drive_config.drives[0].connected"
    assert result.drive_config.drives[0].canonical_name == """boot""", "Died on +.drive_config.drives[0].canonical_name"
    assert result.drive_config.drives[0].path == """/boot""", "Died on +.drive_config.drives[0].path"
    assert result.drive_config.drives[0].scsi_state == """Unknown""", "Died on +.drive_config.drives[0].scsi_state"
    assert result.drive_config.drives[0].scsi_compat_id == """boot""", "Died on +.drive_config.drives[0].scsi_compat_id"
    assert result.drive_config.drives[0].name == """boot""", "Died on +.drive_config.drives[0].name"
    assert result.drive_config.drives[0].dev == 0, "Died on +.drive_config.drives[0].dev"
    assert result.drive_config.drives[0].security_at_maximum == False, "Died on +.drive_config.drives[0].security_at_maximum"
    assert result.drive_config.drives[0].path_link == """/boot""", "Died on +.drive_config.drives[0].path_link"
    assert result.drive_config.num_slice_actual == 1, "Died on +.drive_config.num_slice_actual"
    assert result.drive_config.num_block_actual == 1, "Died on +.drive_config.num_block_actual"
    assert result.drive_config.num_total_actual == 2, "Died on +.drive_config.num_total_actual"
    assert result.drive_config.num_block_expected == 10, "Died on +.drive_config.num_block_expected"

def test_get_drive_config_v9_2():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetDriveConfig_v9_2)

    
    result = ef.get_drive_config()
    assert result.drive_config.num_slice_expected == 1, "Died on +.drive_config.num_slice_expected"
    assert result.drive_config.num_total_expected == 11, "Died on +.drive_config.num_total_expected"
    assert result.drive_config.drives[14].security_locked == False, "Died on +.drive_config.drives[14].security_locked"
    assert result.drive_config.drives[14].serial == """slot10""", "Died on +.drive_config.drives[14].serial"
    assert result.drive_config.drives[14].size == 0, "Died on +.drive_config.drives[14].size"
    assert result.drive_config.drives[14].slot == 10, "Died on +.drive_config.drives[14].slot"
    assert result.drive_config.drives[14].uuid == UUID("9d62ad9e-a097-d5d6-d4f7-1d27193270a1"), "Died on .drive_config.drives[14].uuid"
    assert result.drive_config.drives[14].dev_path == """/dev/slot10""", "Died on +.drive_config.drives[14].dev_path"
    assert result.drive_config.drives[14].version == """Unknown""", "Died on +.drive_config.drives[14].version"
    assert result.drive_config.drives[14].security_supported == False, "Died on +.drive_config.drives[14].security_supported"
    assert result.drive_config.drives[14].drive_type == """Block""", "Died on +.drive_config.drives[14].drive_type"
    assert result.drive_config.drives[14].product == """Unknown""", "Died on +.drive_config.drives[14].product"
    assert result.drive_config.drives[14].vendor == """Unknown""", "Died on +.drive_config.drives[14].vendor"
    assert result.drive_config.drives[14].security_enabled == False, "Died on +.drive_config.drives[14].security_enabled"
    assert result.drive_config.drives[14].security_frozen == False, "Died on +.drive_config.drives[14].security_frozen"
    assert result.drive_config.drives[14].connected == False, "Died on +.drive_config.drives[14].connected"
    assert result.drive_config.drives[14].path == """/dev/slot10""", "Died on +.drive_config.drives[14].path"
    assert result.drive_config.drives[14].scsi_state == """Unknown""", "Died on +.drive_config.drives[14].scsi_state"
    assert result.drive_config.drives[14].scsi_compat_id == """slot10""", "Died on +.drive_config.drives[14].scsi_compat_id"
    assert result.drive_config.drives[14].name == """slot10""", "Died on +.drive_config.drives[14].name"
    assert result.drive_config.drives[14].dev == 0, "Died on +.drive_config.drives[14].dev"
    assert result.drive_config.drives[14].security_at_maximum == False, "Died on +.drive_config.drives[14].security_at_maximum"
    assert result.drive_config.drives[14].path_link == """/dev/slot10""", "Died on +.drive_config.drives[14].path_link"
    assert result.drive_config.drives[13].security_locked == False, "Died on +.drive_config.drives[13].security_locked"
    assert result.drive_config.drives[13].serial == """slot9""", "Died on +.drive_config.drives[13].serial"
    assert result.drive_config.drives[13].size == 0, "Died on +.drive_config.drives[13].size"
    assert result.drive_config.drives[13].slot == 9, "Died on +.drive_config.drives[13].slot"
    assert result.drive_config.drives[13].uuid == UUID("612e2106-7032-850a-a16d-4980b53ffb23"), "Died on .drive_config.drives[13].uuid"
    assert result.drive_config.drives[13].dev_path == """/dev/slot9""", "Died on +.drive_config.drives[13].dev_path"
    assert result.drive_config.drives[13].version == """Unknown""", "Died on +.drive_config.drives[13].version"
    assert result.drive_config.drives[13].security_supported == False, "Died on +.drive_config.drives[13].security_supported"
    assert result.drive_config.drives[13].drive_type == """Block""", "Died on +.drive_config.drives[13].drive_type"
    assert result.drive_config.drives[13].product == """Unknown""", "Died on +.drive_config.drives[13].product"
    assert result.drive_config.drives[13].vendor == """Unknown""", "Died on +.drive_config.drives[13].vendor"
    assert result.drive_config.drives[13].security_enabled == False, "Died on +.drive_config.drives[13].security_enabled"
    assert result.drive_config.drives[13].security_frozen == False, "Died on +.drive_config.drives[13].security_frozen"
    assert result.drive_config.drives[13].connected == False, "Died on +.drive_config.drives[13].connected"
    assert result.drive_config.drives[13].path == """/dev/slot9""", "Died on +.drive_config.drives[13].path"
    assert result.drive_config.drives[13].scsi_state == """Unknown""", "Died on +.drive_config.drives[13].scsi_state"
    assert result.drive_config.drives[13].scsi_compat_id == """slot9""", "Died on +.drive_config.drives[13].scsi_compat_id"
    assert result.drive_config.drives[13].name == """slot9""", "Died on +.drive_config.drives[13].name"
    assert result.drive_config.drives[13].dev == 0, "Died on +.drive_config.drives[13].dev"
    assert result.drive_config.drives[13].security_at_maximum == False, "Died on +.drive_config.drives[13].security_at_maximum"
    assert result.drive_config.drives[13].path_link == """/dev/slot9""", "Died on +.drive_config.drives[13].path_link"
    assert result.drive_config.drives[12].security_locked == False, "Died on +.drive_config.drives[12].security_locked"
    assert result.drive_config.drives[12].serial == """slot8""", "Died on +.drive_config.drives[12].serial"
    assert result.drive_config.drives[12].size == 0, "Died on +.drive_config.drives[12].size"
    assert result.drive_config.drives[12].slot == 8, "Died on +.drive_config.drives[12].slot"
    assert result.drive_config.drives[12].uuid == UUID("28384068-fdee-1dae-21e3-493558121657"), "Died on .drive_config.drives[12].uuid"
    assert result.drive_config.drives[12].dev_path == """/dev/slot8""", "Died on +.drive_config.drives[12].dev_path"
    assert result.drive_config.drives[12].version == """Unknown""", "Died on +.drive_config.drives[12].version"
    assert result.drive_config.drives[12].security_supported == False, "Died on +.drive_config.drives[12].security_supported"
    assert result.drive_config.drives[12].drive_type == """Block""", "Died on +.drive_config.drives[12].drive_type"
    assert result.drive_config.drives[12].product == """Unknown""", "Died on +.drive_config.drives[12].product"
    assert result.drive_config.drives[12].vendor == """Unknown""", "Died on +.drive_config.drives[12].vendor"
    assert result.drive_config.drives[12].security_enabled == False, "Died on +.drive_config.drives[12].security_enabled"
    assert result.drive_config.drives[12].security_frozen == False, "Died on +.drive_config.drives[12].security_frozen"
    assert result.drive_config.drives[12].connected == False, "Died on +.drive_config.drives[12].connected"
    assert result.drive_config.drives[12].path == """/dev/slot8""", "Died on +.drive_config.drives[12].path"
    assert result.drive_config.drives[12].scsi_state == """Unknown""", "Died on +.drive_config.drives[12].scsi_state"
    assert result.drive_config.drives[12].scsi_compat_id == """slot8""", "Died on +.drive_config.drives[12].scsi_compat_id"
    assert result.drive_config.drives[12].name == """slot8""", "Died on +.drive_config.drives[12].name"
    assert result.drive_config.drives[12].dev == 0, "Died on +.drive_config.drives[12].dev"
    assert result.drive_config.drives[12].security_at_maximum == False, "Died on +.drive_config.drives[12].security_at_maximum"
    assert result.drive_config.drives[12].path_link == """/dev/slot8""", "Died on +.drive_config.drives[12].path_link"
    assert result.drive_config.drives[11].security_locked == False, "Died on +.drive_config.drives[11].security_locked"
    assert result.drive_config.drives[11].serial == """slot7""", "Died on +.drive_config.drives[11].serial"
    assert result.drive_config.drives[11].size == 0, "Died on +.drive_config.drives[11].size"
    assert result.drive_config.drives[11].slot == 7, "Died on +.drive_config.drives[11].slot"
    assert result.drive_config.drives[11].uuid == UUID("76c29a96-68a6-2d8e-6416-392f9fd07919"), "Died on .drive_config.drives[11].uuid"
    assert result.drive_config.drives[11].dev_path == """/dev/slot7""", "Died on +.drive_config.drives[11].dev_path"
    assert result.drive_config.drives[11].version == """Unknown""", "Died on +.drive_config.drives[11].version"
    assert result.drive_config.drives[11].security_supported == False, "Died on +.drive_config.drives[11].security_supported"
    assert result.drive_config.drives[11].drive_type == """Block""", "Died on +.drive_config.drives[11].drive_type"
    assert result.drive_config.drives[11].product == """Unknown""", "Died on +.drive_config.drives[11].product"
    assert result.drive_config.drives[11].vendor == """Unknown""", "Died on +.drive_config.drives[11].vendor"
    assert result.drive_config.drives[11].security_enabled == False, "Died on +.drive_config.drives[11].security_enabled"
    assert result.drive_config.drives[11].security_frozen == False, "Died on +.drive_config.drives[11].security_frozen"
    assert result.drive_config.drives[11].connected == False, "Died on +.drive_config.drives[11].connected"
    assert result.drive_config.drives[11].path == """/dev/slot7""", "Died on +.drive_config.drives[11].path"
    assert result.drive_config.drives[11].scsi_state == """Unknown""", "Died on +.drive_config.drives[11].scsi_state"
    assert result.drive_config.drives[11].scsi_compat_id == """slot7""", "Died on +.drive_config.drives[11].scsi_compat_id"
    assert result.drive_config.drives[11].name == """slot7""", "Died on +.drive_config.drives[11].name"
    assert result.drive_config.drives[11].dev == 0, "Died on +.drive_config.drives[11].dev"
    assert result.drive_config.drives[11].security_at_maximum == False, "Died on +.drive_config.drives[11].security_at_maximum"
    assert result.drive_config.drives[11].path_link == """/dev/slot7""", "Died on +.drive_config.drives[11].path_link"
    assert result.drive_config.drives[10].security_locked == False, "Died on +.drive_config.drives[10].security_locked"
    assert result.drive_config.drives[10].serial == """slot6""", "Died on +.drive_config.drives[10].serial"
    assert result.drive_config.drives[10].size == 0, "Died on +.drive_config.drives[10].size"
    assert result.drive_config.drives[10].slot == 6, "Died on +.drive_config.drives[10].slot"
    assert result.drive_config.drives[10].uuid == UUID("c1b04a69-49a0-fdee-b818-c6cdfafd6cd5"), "Died on .drive_config.drives[10].uuid"
    assert result.drive_config.drives[10].dev_path == """/dev/slot6""", "Died on +.drive_config.drives[10].dev_path"
    assert result.drive_config.drives[10].version == """Unknown""", "Died on +.drive_config.drives[10].version"
    assert result.drive_config.drives[10].security_supported == False, "Died on +.drive_config.drives[10].security_supported"
    assert result.drive_config.drives[10].drive_type == """Block""", "Died on +.drive_config.drives[10].drive_type"
    assert result.drive_config.drives[10].product == """Unknown""", "Died on +.drive_config.drives[10].product"
    assert result.drive_config.drives[10].vendor == """Unknown""", "Died on +.drive_config.drives[10].vendor"
    assert result.drive_config.drives[10].security_enabled == False, "Died on +.drive_config.drives[10].security_enabled"
    assert result.drive_config.drives[10].security_frozen == False, "Died on +.drive_config.drives[10].security_frozen"
    assert result.drive_config.drives[10].connected == False, "Died on +.drive_config.drives[10].connected"
    assert result.drive_config.drives[10].path == """/dev/slot6""", "Died on +.drive_config.drives[10].path"
    assert result.drive_config.drives[10].scsi_state == """Unknown""", "Died on +.drive_config.drives[10].scsi_state"
    assert result.drive_config.drives[10].scsi_compat_id == """slot6""", "Died on +.drive_config.drives[10].scsi_compat_id"
    assert result.drive_config.drives[10].name == """slot6""", "Died on +.drive_config.drives[10].name"
    assert result.drive_config.drives[10].dev == 0, "Died on +.drive_config.drives[10].dev"
    assert result.drive_config.drives[10].security_at_maximum == False, "Died on +.drive_config.drives[10].security_at_maximum"
    assert result.drive_config.drives[10].path_link == """/dev/slot6""", "Died on +.drive_config.drives[10].path_link"
    assert result.drive_config.drives[9].security_locked == False, "Died on +.drive_config.drives[9].security_locked"
    assert result.drive_config.drives[9].serial == """slot5""", "Died on +.drive_config.drives[9].serial"
    assert result.drive_config.drives[9].size == 0, "Died on +.drive_config.drives[9].size"
    assert result.drive_config.drives[9].slot == 5, "Died on +.drive_config.drives[9].slot"
    assert result.drive_config.drives[9].uuid == UUID("b31123fa-9a17-0ccd-deab-deac32a58371"), "Died on .drive_config.drives[9].uuid"
    assert result.drive_config.drives[9].dev_path == """/dev/slot5""", "Died on +.drive_config.drives[9].dev_path"
    assert result.drive_config.drives[9].version == """Unknown""", "Died on +.drive_config.drives[9].version"
    assert result.drive_config.drives[9].security_supported == False, "Died on +.drive_config.drives[9].security_supported"
    assert result.drive_config.drives[9].drive_type == """Block""", "Died on +.drive_config.drives[9].drive_type"
    assert result.drive_config.drives[9].product == """Unknown""", "Died on +.drive_config.drives[9].product"
    assert result.drive_config.drives[9].vendor == """Unknown""", "Died on +.drive_config.drives[9].vendor"
    assert result.drive_config.drives[9].security_enabled == False, "Died on +.drive_config.drives[9].security_enabled"
    assert result.drive_config.drives[9].security_frozen == False, "Died on +.drive_config.drives[9].security_frozen"
    assert result.drive_config.drives[9].connected == False, "Died on +.drive_config.drives[9].connected"
    assert result.drive_config.drives[9].path == """/dev/slot5""", "Died on +.drive_config.drives[9].path"
    assert result.drive_config.drives[9].scsi_state == """Unknown""", "Died on +.drive_config.drives[9].scsi_state"
    assert result.drive_config.drives[9].scsi_compat_id == """slot5""", "Died on +.drive_config.drives[9].scsi_compat_id"
    assert result.drive_config.drives[9].name == """slot5""", "Died on +.drive_config.drives[9].name"
    assert result.drive_config.drives[9].dev == 0, "Died on +.drive_config.drives[9].dev"
    assert result.drive_config.drives[9].security_at_maximum == False, "Died on +.drive_config.drives[9].security_at_maximum"
    assert result.drive_config.drives[9].path_link == """/dev/slot5""", "Died on +.drive_config.drives[9].path_link"
    assert result.drive_config.drives[8].security_locked == False, "Died on +.drive_config.drives[8].security_locked"
    assert result.drive_config.drives[8].serial == """slot4""", "Died on +.drive_config.drives[8].serial"
    assert result.drive_config.drives[8].size == 0, "Died on +.drive_config.drives[8].size"
    assert result.drive_config.drives[8].slot == 4, "Died on +.drive_config.drives[8].slot"
    assert result.drive_config.drives[8].uuid == UUID("76e3d13f-88c5-c334-8f0b-8486964d369e"), "Died on .drive_config.drives[8].uuid"
    assert result.drive_config.drives[8].dev_path == """/dev/slot4""", "Died on +.drive_config.drives[8].dev_path"
    assert result.drive_config.drives[8].version == """Unknown""", "Died on +.drive_config.drives[8].version"
    assert result.drive_config.drives[8].security_supported == False, "Died on +.drive_config.drives[8].security_supported"
    assert result.drive_config.drives[8].drive_type == """Block""", "Died on +.drive_config.drives[8].drive_type"
    assert result.drive_config.drives[8].product == """Unknown""", "Died on +.drive_config.drives[8].product"
    assert result.drive_config.drives[8].vendor == """Unknown""", "Died on +.drive_config.drives[8].vendor"
    assert result.drive_config.drives[8].security_enabled == False, "Died on +.drive_config.drives[8].security_enabled"
    assert result.drive_config.drives[8].security_frozen == False, "Died on +.drive_config.drives[8].security_frozen"
    assert result.drive_config.drives[8].connected == False, "Died on +.drive_config.drives[8].connected"
    assert result.drive_config.drives[8].path == """/dev/slot4""", "Died on +.drive_config.drives[8].path"
    assert result.drive_config.drives[8].scsi_state == """Unknown""", "Died on +.drive_config.drives[8].scsi_state"
    assert result.drive_config.drives[8].scsi_compat_id == """slot4""", "Died on +.drive_config.drives[8].scsi_compat_id"
    assert result.drive_config.drives[8].name == """slot4""", "Died on +.drive_config.drives[8].name"
    assert result.drive_config.drives[8].dev == 0, "Died on +.drive_config.drives[8].dev"
    assert result.drive_config.drives[8].security_at_maximum == False, "Died on +.drive_config.drives[8].security_at_maximum"
    assert result.drive_config.drives[8].path_link == """/dev/slot4""", "Died on +.drive_config.drives[8].path_link"
    assert result.drive_config.drives[7].security_locked == False, "Died on +.drive_config.drives[7].security_locked"
    assert result.drive_config.drives[7].serial == """slot3""", "Died on +.drive_config.drives[7].serial"
    assert result.drive_config.drives[7].size == 0, "Died on +.drive_config.drives[7].size"
    assert result.drive_config.drives[7].slot == 3, "Died on +.drive_config.drives[7].slot"
    assert result.drive_config.drives[7].uuid == UUID("25b903d1-3b55-d53f-a556-47b28f91b728"), "Died on .drive_config.drives[7].uuid"
    assert result.drive_config.drives[7].dev_path == """/dev/slot3""", "Died on +.drive_config.drives[7].dev_path"
    assert result.drive_config.drives[7].version == """Unknown""", "Died on +.drive_config.drives[7].version"
    assert result.drive_config.drives[7].security_supported == False, "Died on +.drive_config.drives[7].security_supported"
    assert result.drive_config.drives[7].drive_type == """Block""", "Died on +.drive_config.drives[7].drive_type"
    assert result.drive_config.drives[7].product == """Unknown""", "Died on +.drive_config.drives[7].product"
    assert result.drive_config.drives[7].vendor == """Unknown""", "Died on +.drive_config.drives[7].vendor"
    assert result.drive_config.drives[7].security_enabled == False, "Died on +.drive_config.drives[7].security_enabled"
    assert result.drive_config.drives[7].security_frozen == False, "Died on +.drive_config.drives[7].security_frozen"
    assert result.drive_config.drives[7].connected == False, "Died on +.drive_config.drives[7].connected"
    assert result.drive_config.drives[7].path == """/dev/slot3""", "Died on +.drive_config.drives[7].path"
    assert result.drive_config.drives[7].scsi_state == """Unknown""", "Died on +.drive_config.drives[7].scsi_state"
    assert result.drive_config.drives[7].scsi_compat_id == """slot3""", "Died on +.drive_config.drives[7].scsi_compat_id"
    assert result.drive_config.drives[7].name == """slot3""", "Died on +.drive_config.drives[7].name"
    assert result.drive_config.drives[7].dev == 0, "Died on +.drive_config.drives[7].dev"
    assert result.drive_config.drives[7].security_at_maximum == False, "Died on +.drive_config.drives[7].security_at_maximum"
    assert result.drive_config.drives[7].path_link == """/dev/slot3""", "Died on +.drive_config.drives[7].path_link"
    assert result.drive_config.drives[6].security_locked == False, "Died on +.drive_config.drives[6].security_locked"
    assert result.drive_config.drives[6].serial == """slot2""", "Died on +.drive_config.drives[6].serial"
    assert result.drive_config.drives[6].size == 0, "Died on +.drive_config.drives[6].size"
    assert result.drive_config.drives[6].slot == 2, "Died on +.drive_config.drives[6].slot"
    assert result.drive_config.drives[6].uuid == UUID("d92f909d-c606-4c27-d17a-4cb6db95a35c"), "Died on .drive_config.drives[6].uuid"
    assert result.drive_config.drives[6].dev_path == """/dev/slot2""", "Died on +.drive_config.drives[6].dev_path"
    assert result.drive_config.drives[6].version == """Unknown""", "Died on +.drive_config.drives[6].version"
    assert result.drive_config.drives[6].security_supported == False, "Died on +.drive_config.drives[6].security_supported"
    assert result.drive_config.drives[6].drive_type == """Block""", "Died on +.drive_config.drives[6].drive_type"
    assert result.drive_config.drives[6].product == """Unknown""", "Died on +.drive_config.drives[6].product"
    assert result.drive_config.drives[6].vendor == """Unknown""", "Died on +.drive_config.drives[6].vendor"
    assert result.drive_config.drives[6].security_enabled == False, "Died on +.drive_config.drives[6].security_enabled"
    assert result.drive_config.drives[6].security_frozen == False, "Died on +.drive_config.drives[6].security_frozen"
    assert result.drive_config.drives[6].connected == False, "Died on +.drive_config.drives[6].connected"
    assert result.drive_config.drives[6].path == """/dev/slot2""", "Died on +.drive_config.drives[6].path"
    assert result.drive_config.drives[6].scsi_state == """Unknown""", "Died on +.drive_config.drives[6].scsi_state"
    assert result.drive_config.drives[6].scsi_compat_id == """slot2""", "Died on +.drive_config.drives[6].scsi_compat_id"
    assert result.drive_config.drives[6].name == """slot2""", "Died on +.drive_config.drives[6].name"
    assert result.drive_config.drives[6].dev == 0, "Died on +.drive_config.drives[6].dev"
    assert result.drive_config.drives[6].security_at_maximum == False, "Died on +.drive_config.drives[6].security_at_maximum"
    assert result.drive_config.drives[6].path_link == """/dev/slot2""", "Died on +.drive_config.drives[6].path_link"
    assert result.drive_config.drives[5].security_locked == False, "Died on +.drive_config.drives[5].security_locked"
    assert result.drive_config.drives[5].serial == """scsi-36000c29b0d225d4342d5750a81af4ea6""", "Died on +.drive_config.drives[5].serial"
    assert result.drive_config.drives[5].size == 268435456000, "Died on +.drive_config.drives[5].size"
    assert result.drive_config.drives[5].slot == 1, "Died on +.drive_config.drives[5].slot"
    assert result.drive_config.drives[5].uuid == UUID("a6944a6f-46f4-addb-ba1e-4c237b5fedc5"), "Died on .drive_config.drives[5].uuid"
    assert result.drive_config.drives[5].dev_path == """/dev/slot1""", "Died on +.drive_config.drives[5].dev_path"
    assert result.drive_config.drives[5].version == """Unknown""", "Died on +.drive_config.drives[5].version"
    assert result.drive_config.drives[5].security_supported == False, "Died on +.drive_config.drives[5].security_supported"
    assert result.drive_config.drives[5].drive_type == """Block""", "Died on +.drive_config.drives[5].drive_type"
    assert result.drive_config.drives[5].product == """Unknown""", "Died on +.drive_config.drives[5].product"
    assert result.drive_config.drives[5].vendor == """Unknown""", "Died on +.drive_config.drives[5].vendor"
    assert result.drive_config.drives[5].security_enabled == False, "Died on +.drive_config.drives[5].security_enabled"
    assert result.drive_config.drives[5].security_frozen == False, "Died on +.drive_config.drives[5].security_frozen"
    assert result.drive_config.drives[5].connected == True, "Died on +.drive_config.drives[5].connected"
    assert result.drive_config.drives[5].canonical_name == """sdb""", "Died on +.drive_config.drives[5].canonical_name"
    assert result.drive_config.drives[5].path == """/dev/sdb""", "Died on +.drive_config.drives[5].path"
    assert result.drive_config.drives[5].scsi_state == """Running""", "Died on +.drive_config.drives[5].scsi_state"
    assert result.drive_config.drives[5].scsi_compat_id == """scsi-36000c29b0d225d4342d5750a81af4ea6""", "Died on +.drive_config.drives[5].scsi_compat_id"
    assert result.drive_config.drives[5].name == """scsi-36000c29b0d225d4342d5750a81af4ea6""", "Died on +.drive_config.drives[5].name"
    assert result.drive_config.drives[5].dev == 2064, "Died on +.drive_config.drives[5].dev"
    assert result.drive_config.drives[5].security_at_maximum == False, "Died on +.drive_config.drives[5].security_at_maximum"
    assert result.drive_config.drives[5].path_link == """/dev/slot1""", "Died on +.drive_config.drives[5].path_link"
    assert result.drive_config.drives[4].security_locked == False, "Died on +.drive_config.drives[4].security_locked"
    assert result.drive_config.drives[4].serial == """scsi-36000c29551932b43ba5bb11c3cd54c1e-part6""", "Died on +.drive_config.drives[4].serial"
    assert result.drive_config.drives[4].size == 216787845120, "Died on +.drive_config.drives[4].size"
    assert result.drive_config.drives[4].slot == 0, "Died on +.drive_config.drives[4].slot"
    assert result.drive_config.drives[4].uuid == UUID("38b3c943-9e45-88e9-1ebe-130b4186d8da"), "Died on .drive_config.drives[4].uuid"
    assert result.drive_config.drives[4].dev_path == """/dev/slot0p6""", "Died on +.drive_config.drives[4].dev_path"
    assert result.drive_config.drives[4].version == """Unknown""", "Died on +.drive_config.drives[4].version"
    assert result.drive_config.drives[4].security_supported == False, "Died on +.drive_config.drives[4].security_supported"
    assert result.drive_config.drives[4].drive_type == """Slice""", "Died on +.drive_config.drives[4].drive_type"
    assert result.drive_config.drives[4].product == """Unknown""", "Died on +.drive_config.drives[4].product"
    assert result.drive_config.drives[4].vendor == """Unknown""", "Died on +.drive_config.drives[4].vendor"
    assert result.drive_config.drives[4].security_enabled == False, "Died on +.drive_config.drives[4].security_enabled"
    assert result.drive_config.drives[4].security_frozen == False, "Died on +.drive_config.drives[4].security_frozen"
    assert result.drive_config.drives[4].connected == True, "Died on +.drive_config.drives[4].connected"
    assert result.drive_config.drives[4].canonical_name == """sda""", "Died on +.drive_config.drives[4].canonical_name"
    assert result.drive_config.drives[4].path == """/dev/sda6""", "Died on +.drive_config.drives[4].path"
    assert result.drive_config.drives[4].scsi_state == """Running""", "Died on +.drive_config.drives[4].scsi_state"
    assert result.drive_config.drives[4].scsi_compat_id == """scsi-36000c29551932b43ba5bb11c3cd54c1e-part6""", "Died on +.drive_config.drives[4].scsi_compat_id"
    assert result.drive_config.drives[4].name == """scsi-36000c29551932b43ba5bb11c3cd54c1e-part6""", "Died on +.drive_config.drives[4].name"
    assert result.drive_config.drives[4].dev == 2054, "Died on +.drive_config.drives[4].dev"
    assert result.drive_config.drives[4].security_at_maximum == False, "Died on +.drive_config.drives[4].security_at_maximum"
    assert result.drive_config.drives[4].path_link == """/dev/slot0p6""", "Died on +.drive_config.drives[4].path_link"
    assert result.drive_config.drives[3].security_locked == False, "Died on +.drive_config.drives[3].security_locked"
    assert result.drive_config.drives[3].serial == """pendingDirtyBlocks""", "Died on +.drive_config.drives[3].serial"
    assert result.drive_config.drives[3].size == 9223372036854775807, "Died on +.drive_config.drives[3].size"
    assert result.drive_config.drives[3].slot == -2, "Died on +.drive_config.drives[3].slot"
    assert result.drive_config.drives[3].uuid == UUID("00abd0dc-ff28-2825-7faa-38e9a49d66a4"), "Died on .drive_config.drives[3].uuid"
    assert result.drive_config.drives[3].dev_path == """/mnt/pendingDirtyBlocks""", "Died on +.drive_config.drives[3].dev_path"
    assert result.drive_config.drives[3].version == """Unknown""", "Died on +.drive_config.drives[3].version"
    assert result.drive_config.drives[3].security_supported == False, "Died on +.drive_config.drives[3].security_supported"
    assert result.drive_config.drives[3].drive_type == """System""", "Died on +.drive_config.drives[3].drive_type"
    assert result.drive_config.drives[3].product == """Unknown""", "Died on +.drive_config.drives[3].product"
    assert result.drive_config.drives[3].vendor == """Unknown""", "Died on +.drive_config.drives[3].vendor"
    assert result.drive_config.drives[3].security_enabled == False, "Died on +.drive_config.drives[3].security_enabled"
    assert result.drive_config.drives[3].security_frozen == False, "Died on +.drive_config.drives[3].security_frozen"
    assert result.drive_config.drives[3].connected == False, "Died on +.drive_config.drives[3].connected"
    assert result.drive_config.drives[3].canonical_name == """pendingDirtyBlocks""", "Died on +.drive_config.drives[3].canonical_name"
    assert result.drive_config.drives[3].path == """/mnt/pendingDirtyBlocks""", "Died on +.drive_config.drives[3].path"
    assert result.drive_config.drives[3].scsi_state == """Unknown""", "Died on +.drive_config.drives[3].scsi_state"
    assert result.drive_config.drives[3].scsi_compat_id == """pendingDirtyBlocks""", "Died on +.drive_config.drives[3].scsi_compat_id"
    assert result.drive_config.drives[3].name == """pendingDirtyBlocks""", "Died on +.drive_config.drives[3].name"
    assert result.drive_config.drives[3].dev == 0, "Died on +.drive_config.drives[3].dev"
    assert result.drive_config.drives[3].security_at_maximum == False, "Died on +.drive_config.drives[3].security_at_maximum"
    assert result.drive_config.drives[3].path_link == """/mnt/pendingDirtyBlocks""", "Died on +.drive_config.drives[3].path_link"
    assert result.drive_config.drives[2].security_locked == False, "Died on +.drive_config.drives[2].security_locked"
    assert result.drive_config.drives[2].serial == """log""", "Died on +.drive_config.drives[2].serial"
    assert result.drive_config.drives[2].size == 9223372036854775807, "Died on +.drive_config.drives[2].size"
    assert result.drive_config.drives[2].slot == -2, "Died on +.drive_config.drives[2].slot"
    assert result.drive_config.drives[2].uuid == UUID("dc1d71bb-b5c4-d2a5-e936-db79ef10c19f"), "Died on .drive_config.drives[2].uuid"
    assert result.drive_config.drives[2].dev_path == """/var/log""", "Died on +.drive_config.drives[2].dev_path"
    assert result.drive_config.drives[2].version == """Unknown""", "Died on +.drive_config.drives[2].version"
    assert result.drive_config.drives[2].security_supported == False, "Died on +.drive_config.drives[2].security_supported"
    assert result.drive_config.drives[2].drive_type == """System""", "Died on +.drive_config.drives[2].drive_type"
    assert result.drive_config.drives[2].product == """Unknown""", "Died on +.drive_config.drives[2].product"
    assert result.drive_config.drives[2].vendor == """Unknown""", "Died on +.drive_config.drives[2].vendor"
    assert result.drive_config.drives[2].security_enabled == False, "Died on +.drive_config.drives[2].security_enabled"
    assert result.drive_config.drives[2].security_frozen == False, "Died on +.drive_config.drives[2].security_frozen"
    assert result.drive_config.drives[2].connected == False, "Died on +.drive_config.drives[2].connected"
    assert result.drive_config.drives[2].canonical_name == """log""", "Died on +.drive_config.drives[2].canonical_name"
    assert result.drive_config.drives[2].path == """/var/log""", "Died on +.drive_config.drives[2].path"
    assert result.drive_config.drives[2].scsi_state == """Unknown""", "Died on +.drive_config.drives[2].scsi_state"
    assert result.drive_config.drives[2].scsi_compat_id == """log""", "Died on +.drive_config.drives[2].scsi_compat_id"
    assert result.drive_config.drives[2].name == """log""", "Died on +.drive_config.drives[2].name"
    assert result.drive_config.drives[2].dev == 0, "Died on +.drive_config.drives[2].dev"
    assert result.drive_config.drives[2].security_at_maximum == False, "Died on +.drive_config.drives[2].security_at_maximum"
    assert result.drive_config.drives[2].path_link == """/var/log""", "Died on +.drive_config.drives[2].path_link"
    assert result.drive_config.drives[1].security_locked == False, "Died on +.drive_config.drives[1].security_locked"
    assert result.drive_config.drives[1].serial == """/""", "Died on +.drive_config.drives[1].serial"
    assert result.drive_config.drives[1].size == 9223372036854775807, "Died on +.drive_config.drives[1].size"
    assert result.drive_config.drives[1].slot == -2, "Died on +.drive_config.drives[1].slot"
    assert result.drive_config.drives[1].uuid == UUID("6666cd76-f969-5646-9e7b-e39d750cc7d9"), "Died on .drive_config.drives[1].uuid"
    assert result.drive_config.drives[1].dev_path == """/""", "Died on +.drive_config.drives[1].dev_path"
    assert result.drive_config.drives[1].version == """Unknown""", "Died on +.drive_config.drives[1].version"
    assert result.drive_config.drives[1].security_supported == False, "Died on +.drive_config.drives[1].security_supported"
    assert result.drive_config.drives[1].drive_type == """System""", "Died on +.drive_config.drives[1].drive_type"
    assert result.drive_config.drives[1].product == """Unknown""", "Died on +.drive_config.drives[1].product"
    assert result.drive_config.drives[1].vendor == """Unknown""", "Died on +.drive_config.drives[1].vendor"
    assert result.drive_config.drives[1].security_enabled == False, "Died on +.drive_config.drives[1].security_enabled"
    assert result.drive_config.drives[1].security_frozen == False, "Died on +.drive_config.drives[1].security_frozen"
    assert result.drive_config.drives[1].connected == False, "Died on +.drive_config.drives[1].connected"
    assert result.drive_config.drives[1].canonical_name == """/""", "Died on +.drive_config.drives[1].canonical_name"
    assert result.drive_config.drives[1].path == """/""", "Died on +.drive_config.drives[1].path"
    assert result.drive_config.drives[1].scsi_state == """Unknown""", "Died on +.drive_config.drives[1].scsi_state"
    assert result.drive_config.drives[1].scsi_compat_id == """/""", "Died on +.drive_config.drives[1].scsi_compat_id"
    assert result.drive_config.drives[1].name == """/""", "Died on +.drive_config.drives[1].name"
    assert result.drive_config.drives[1].dev == 0, "Died on +.drive_config.drives[1].dev"
    assert result.drive_config.drives[1].security_at_maximum == False, "Died on +.drive_config.drives[1].security_at_maximum"
    assert result.drive_config.drives[1].path_link == """/""", "Died on +.drive_config.drives[1].path_link"
    assert result.drive_config.drives[0].security_locked == False, "Died on +.drive_config.drives[0].security_locked"
    assert result.drive_config.drives[0].serial == """boot""", "Died on +.drive_config.drives[0].serial"
    assert result.drive_config.drives[0].size == 1024, "Died on +.drive_config.drives[0].size"
    assert result.drive_config.drives[0].slot == -2, "Died on +.drive_config.drives[0].slot"
    assert result.drive_config.drives[0].uuid == UUID("881cc415-7ed6-41a3-65a8-6452f27ed745"), "Died on .drive_config.drives[0].uuid"
    assert result.drive_config.drives[0].dev_path == """/boot""", "Died on +.drive_config.drives[0].dev_path"
    assert result.drive_config.drives[0].version == """Unknown""", "Died on +.drive_config.drives[0].version"
    assert result.drive_config.drives[0].security_supported == False, "Died on +.drive_config.drives[0].security_supported"
    assert result.drive_config.drives[0].drive_type == """System""", "Died on +.drive_config.drives[0].drive_type"
    assert result.drive_config.drives[0].product == """Unknown""", "Died on +.drive_config.drives[0].product"
    assert result.drive_config.drives[0].vendor == """Unknown""", "Died on +.drive_config.drives[0].vendor"
    assert result.drive_config.drives[0].security_enabled == False, "Died on +.drive_config.drives[0].security_enabled"
    assert result.drive_config.drives[0].security_frozen == False, "Died on +.drive_config.drives[0].security_frozen"
    assert result.drive_config.drives[0].connected == False, "Died on +.drive_config.drives[0].connected"
    assert result.drive_config.drives[0].canonical_name == """boot""", "Died on +.drive_config.drives[0].canonical_name"
    assert result.drive_config.drives[0].path == """/boot""", "Died on +.drive_config.drives[0].path"
    assert result.drive_config.drives[0].scsi_state == """Unknown""", "Died on +.drive_config.drives[0].scsi_state"
    assert result.drive_config.drives[0].scsi_compat_id == """boot""", "Died on +.drive_config.drives[0].scsi_compat_id"
    assert result.drive_config.drives[0].name == """boot""", "Died on +.drive_config.drives[0].name"
    assert result.drive_config.drives[0].dev == 0, "Died on +.drive_config.drives[0].dev"
    assert result.drive_config.drives[0].security_at_maximum == False, "Died on +.drive_config.drives[0].security_at_maximum"
    assert result.drive_config.drives[0].path_link == """/boot""", "Died on +.drive_config.drives[0].path_link"
    assert result.drive_config.num_slice_actual == 1, "Died on +.drive_config.num_slice_actual"
    assert result.drive_config.num_block_actual == 1, "Died on +.drive_config.num_block_actual"
    assert result.drive_config.num_total_actual == 2, "Died on +.drive_config.num_total_actual"
    assert result.drive_config.num_block_expected == 10, "Died on +.drive_config.num_block_expected"

def test_get_feature_status_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetFeatureStatus_v9_0)

    
    feature = "" # feature
    result = ef.get_feature_status()
    assert result.features[0].enabled == True, "Died on +.features[0].enabled"
    assert result.features[0].feature == """Vvols""", "Died on +.features[0].feature"

def test_get_hardware_config_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetHardwareConfig_v9_0)

    
    result = ef.get_hardware_config()
    assert type(result.hardware_config) is dict, "Died on .hardware_config"

def test_get_hardware_info_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetHardwareInfo_v9_0)

    
    result = ef.get_hardware_info()
    assert type(result.hardware_info) is dict, "Died on .hardware_info"

def test_get_hardware_info_v9_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetHardwareInfo_v9_1)

    
    result = ef.get_hardware_info()
    assert type(result.hardware_info) is dict, "Died on .hardware_info"

def test_get_hardware_info_v9_2():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetHardwareInfo_v9_2)

    
    result = ef.get_hardware_info()
    assert type(result.hardware_info) is dict, "Died on .hardware_info"

def test_get_hardware_info_v9_3():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetHardwareInfo_v9_3)

    
    result = ef.get_hardware_info()
    assert type(result.hardware_info) is dict, "Died on .hardware_info"

def test_get_ipmi_config_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetIpmiConfig_v9_0)

    
    chassis_type = "" # chassis_type
    force = True # force
    result = ef.get_ipmi_config(force,)
    assert type(result.nodes[3].result) is dict, "Died on .nodes[3].result"
    assert result.nodes[3].node_id == 4, "Died on +.nodes[3].node_id"
    assert type(result.nodes[2].result) is dict, "Died on .nodes[2].result"
    assert result.nodes[2].node_id == 3, "Died on +.nodes[2].node_id"
    assert type(result.nodes[1].result) is dict, "Died on .nodes[1].result"
    assert result.nodes[1].node_id == 2, "Died on +.nodes[1].node_id"
    assert type(result.nodes[0].result) is dict, "Died on .nodes[0].result"
    assert result.nodes[0].node_id == 1, "Died on +.nodes[0].node_id"

def test_get_ipmi_config_v9_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetIpmiConfig_v9_1)

    
    chassis_type = "" # chassis_type
    force = True # force
    result = ef.get_ipmi_config(force,)
    assert type(result.nodes[0].result) is dict, "Died on .nodes[0].result"
    assert result.nodes[0].node_id == 1, "Died on +.nodes[0].node_id"

def test_get_ipmi_info_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetIpmiInfo_v9_0)

    
    force = True # force
    result = ef.get_ipmi_info(force,)
    assert type(result.nodes[3].result.ipmi_info.sensors[138]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[138]"
    assert type(result.nodes[3].result.ipmi_info.sensors[137]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[137]"
    assert type(result.nodes[3].result.ipmi_info.sensors[136]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[136]"
    assert type(result.nodes[3].result.ipmi_info.sensors[135]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[135]"
    assert type(result.nodes[3].result.ipmi_info.sensors[134]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[134]"
    assert type(result.nodes[3].result.ipmi_info.sensors[133]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[133]"
    assert type(result.nodes[3].result.ipmi_info.sensors[132]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[132]"
    assert type(result.nodes[3].result.ipmi_info.sensors[131]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[131]"
    assert type(result.nodes[3].result.ipmi_info.sensors[130]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[130]"
    assert type(result.nodes[3].result.ipmi_info.sensors[129]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[129]"
    assert type(result.nodes[3].result.ipmi_info.sensors[128]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[128]"
    assert type(result.nodes[3].result.ipmi_info.sensors[127]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[127]"
    assert type(result.nodes[3].result.ipmi_info.sensors[126]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[126]"
    assert type(result.nodes[3].result.ipmi_info.sensors[125]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[125]"
    assert type(result.nodes[3].result.ipmi_info.sensors[124]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[124]"
    assert type(result.nodes[3].result.ipmi_info.sensors[123]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[123]"
    assert type(result.nodes[3].result.ipmi_info.sensors[122]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[122]"
    assert type(result.nodes[3].result.ipmi_info.sensors[121]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[121]"
    assert type(result.nodes[3].result.ipmi_info.sensors[120]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[120]"
    assert type(result.nodes[3].result.ipmi_info.sensors[119]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[119]"
    assert type(result.nodes[3].result.ipmi_info.sensors[118]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[118]"
    assert type(result.nodes[3].result.ipmi_info.sensors[117]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[117]"
    assert type(result.nodes[3].result.ipmi_info.sensors[116]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[116]"
    assert type(result.nodes[3].result.ipmi_info.sensors[115]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[115]"
    assert type(result.nodes[3].result.ipmi_info.sensors[114]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[114]"
    assert type(result.nodes[3].result.ipmi_info.sensors[113]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[113]"
    assert type(result.nodes[3].result.ipmi_info.sensors[112]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[112]"
    assert type(result.nodes[3].result.ipmi_info.sensors[111]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[111]"
    assert type(result.nodes[3].result.ipmi_info.sensors[110]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[110]"
    assert type(result.nodes[3].result.ipmi_info.sensors[109]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[109]"
    assert type(result.nodes[3].result.ipmi_info.sensors[108]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[108]"
    assert type(result.nodes[3].result.ipmi_info.sensors[107]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[107]"
    assert type(result.nodes[3].result.ipmi_info.sensors[106]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[106]"
    assert type(result.nodes[3].result.ipmi_info.sensors[105]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[105]"
    assert type(result.nodes[3].result.ipmi_info.sensors[104]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[104]"
    assert type(result.nodes[3].result.ipmi_info.sensors[103]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[103]"
    assert type(result.nodes[3].result.ipmi_info.sensors[102]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[102]"
    assert type(result.nodes[3].result.ipmi_info.sensors[101]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[101]"
    assert type(result.nodes[3].result.ipmi_info.sensors[100]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[100]"
    assert type(result.nodes[3].result.ipmi_info.sensors[99]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[99]"
    assert type(result.nodes[3].result.ipmi_info.sensors[98]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[98]"
    assert type(result.nodes[3].result.ipmi_info.sensors[97]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[97]"
    assert type(result.nodes[3].result.ipmi_info.sensors[96]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[96]"
    assert type(result.nodes[3].result.ipmi_info.sensors[95]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[95]"
    assert type(result.nodes[3].result.ipmi_info.sensors[94]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[94]"
    assert type(result.nodes[3].result.ipmi_info.sensors[93]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[93]"
    assert type(result.nodes[3].result.ipmi_info.sensors[92]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[92]"
    assert type(result.nodes[3].result.ipmi_info.sensors[91]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[91]"
    assert type(result.nodes[3].result.ipmi_info.sensors[90]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[90]"
    assert type(result.nodes[3].result.ipmi_info.sensors[89]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[89]"
    assert type(result.nodes[3].result.ipmi_info.sensors[88]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[88]"
    assert type(result.nodes[3].result.ipmi_info.sensors[87]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[87]"
    assert type(result.nodes[3].result.ipmi_info.sensors[86]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[86]"
    assert type(result.nodes[3].result.ipmi_info.sensors[85]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[85]"
    assert type(result.nodes[3].result.ipmi_info.sensors[84]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[84]"
    assert type(result.nodes[3].result.ipmi_info.sensors[83]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[83]"
    assert type(result.nodes[3].result.ipmi_info.sensors[82]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[82]"
    assert type(result.nodes[3].result.ipmi_info.sensors[81]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[81]"
    assert type(result.nodes[3].result.ipmi_info.sensors[80]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[80]"
    assert type(result.nodes[3].result.ipmi_info.sensors[79]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[79]"
    assert type(result.nodes[3].result.ipmi_info.sensors[78]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[78]"
    assert type(result.nodes[3].result.ipmi_info.sensors[77]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[77]"
    assert type(result.nodes[3].result.ipmi_info.sensors[76]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[76]"
    assert type(result.nodes[3].result.ipmi_info.sensors[75]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[75]"
    assert type(result.nodes[3].result.ipmi_info.sensors[74]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[74]"
    assert type(result.nodes[3].result.ipmi_info.sensors[73]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[73]"
    assert type(result.nodes[3].result.ipmi_info.sensors[72]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[72]"
    assert type(result.nodes[3].result.ipmi_info.sensors[71]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[71]"
    assert type(result.nodes[3].result.ipmi_info.sensors[70]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[70]"
    assert type(result.nodes[3].result.ipmi_info.sensors[69]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[69]"
    assert type(result.nodes[3].result.ipmi_info.sensors[68]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[68]"
    assert type(result.nodes[3].result.ipmi_info.sensors[67]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[67]"
    assert type(result.nodes[3].result.ipmi_info.sensors[66]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[66]"
    assert type(result.nodes[3].result.ipmi_info.sensors[65]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[65]"
    assert type(result.nodes[3].result.ipmi_info.sensors[64]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[64]"
    assert type(result.nodes[3].result.ipmi_info.sensors[63]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[63]"
    assert type(result.nodes[3].result.ipmi_info.sensors[62]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[62]"
    assert type(result.nodes[3].result.ipmi_info.sensors[61]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[61]"
    assert type(result.nodes[3].result.ipmi_info.sensors[60]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[60]"
    assert type(result.nodes[3].result.ipmi_info.sensors[59]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[59]"
    assert type(result.nodes[3].result.ipmi_info.sensors[58]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[58]"
    assert type(result.nodes[3].result.ipmi_info.sensors[57]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[57]"
    assert type(result.nodes[3].result.ipmi_info.sensors[56]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[56]"
    assert type(result.nodes[3].result.ipmi_info.sensors[55]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[55]"
    assert type(result.nodes[3].result.ipmi_info.sensors[54]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[54]"
    assert type(result.nodes[3].result.ipmi_info.sensors[53]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[53]"
    assert type(result.nodes[3].result.ipmi_info.sensors[52]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[52]"
    assert type(result.nodes[3].result.ipmi_info.sensors[51]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[51]"
    assert type(result.nodes[3].result.ipmi_info.sensors[50]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[50]"
    assert type(result.nodes[3].result.ipmi_info.sensors[49]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[49]"
    assert type(result.nodes[3].result.ipmi_info.sensors[48]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[48]"
    assert type(result.nodes[3].result.ipmi_info.sensors[47]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[47]"
    assert type(result.nodes[3].result.ipmi_info.sensors[46]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[46]"
    assert type(result.nodes[3].result.ipmi_info.sensors[45]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[45]"
    assert type(result.nodes[3].result.ipmi_info.sensors[44]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[44]"
    assert type(result.nodes[3].result.ipmi_info.sensors[43]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[43]"
    assert type(result.nodes[3].result.ipmi_info.sensors[42]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[42]"
    assert type(result.nodes[3].result.ipmi_info.sensors[41]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[41]"
    assert type(result.nodes[3].result.ipmi_info.sensors[40]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[40]"
    assert type(result.nodes[3].result.ipmi_info.sensors[39]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[39]"
    assert type(result.nodes[3].result.ipmi_info.sensors[38]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[38]"
    assert type(result.nodes[3].result.ipmi_info.sensors[37]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[37]"
    assert type(result.nodes[3].result.ipmi_info.sensors[36]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[36]"
    assert type(result.nodes[3].result.ipmi_info.sensors[35]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[35]"
    assert type(result.nodes[3].result.ipmi_info.sensors[34]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[34]"
    assert type(result.nodes[3].result.ipmi_info.sensors[33]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[33]"
    assert type(result.nodes[3].result.ipmi_info.sensors[32]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[32]"
    assert type(result.nodes[3].result.ipmi_info.sensors[31]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[31]"
    assert type(result.nodes[3].result.ipmi_info.sensors[30]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[30]"
    assert type(result.nodes[3].result.ipmi_info.sensors[29]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[29]"
    assert type(result.nodes[3].result.ipmi_info.sensors[28]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[28]"
    assert type(result.nodes[3].result.ipmi_info.sensors[27]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[27]"
    assert type(result.nodes[3].result.ipmi_info.sensors[26]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[26]"
    assert type(result.nodes[3].result.ipmi_info.sensors[25]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[25]"
    assert type(result.nodes[3].result.ipmi_info.sensors[24]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[24]"
    assert type(result.nodes[3].result.ipmi_info.sensors[23]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[23]"
    assert type(result.nodes[3].result.ipmi_info.sensors[22]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[22]"
    assert type(result.nodes[3].result.ipmi_info.sensors[21]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[21]"
    assert type(result.nodes[3].result.ipmi_info.sensors[20]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[20]"
    assert type(result.nodes[3].result.ipmi_info.sensors[19]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[19]"
    assert type(result.nodes[3].result.ipmi_info.sensors[18]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[18]"
    assert type(result.nodes[3].result.ipmi_info.sensors[17]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[17]"
    assert type(result.nodes[3].result.ipmi_info.sensors[16]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[16]"
    assert type(result.nodes[3].result.ipmi_info.sensors[15]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[15]"
    assert type(result.nodes[3].result.ipmi_info.sensors[14]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[14]"
    assert type(result.nodes[3].result.ipmi_info.sensors[13]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[13]"
    assert type(result.nodes[3].result.ipmi_info.sensors[12]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[12]"
    assert type(result.nodes[3].result.ipmi_info.sensors[11]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[11]"
    assert type(result.nodes[3].result.ipmi_info.sensors[10]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[10]"
    assert type(result.nodes[3].result.ipmi_info.sensors[9]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[9]"
    assert type(result.nodes[3].result.ipmi_info.sensors[8]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[8]"
    assert type(result.nodes[3].result.ipmi_info.sensors[7]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[7]"
    assert type(result.nodes[3].result.ipmi_info.sensors[6]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[6]"
    assert type(result.nodes[3].result.ipmi_info.sensors[5]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[5]"
    assert type(result.nodes[3].result.ipmi_info.sensors[4]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[4]"
    assert type(result.nodes[3].result.ipmi_info.sensors[3]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[3]"
    assert type(result.nodes[3].result.ipmi_info.sensors[2]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[2]"
    assert type(result.nodes[3].result.ipmi_info.sensors[1]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[1]"
    assert type(result.nodes[3].result.ipmi_info.sensors[0]) is dict, "Died on .nodes[3].result.ipmi_info.sensors[0]"
    assert result.nodes[3].node_id == 4, "Died on +.nodes[3].node_id"
    assert type(result.nodes[2].result.ipmi_info.sensors[134]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[134]"
    assert type(result.nodes[2].result.ipmi_info.sensors[133]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[133]"
    assert type(result.nodes[2].result.ipmi_info.sensors[132]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[132]"
    assert type(result.nodes[2].result.ipmi_info.sensors[131]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[131]"
    assert type(result.nodes[2].result.ipmi_info.sensors[130]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[130]"
    assert type(result.nodes[2].result.ipmi_info.sensors[129]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[129]"
    assert type(result.nodes[2].result.ipmi_info.sensors[128]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[128]"
    assert type(result.nodes[2].result.ipmi_info.sensors[127]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[127]"
    assert type(result.nodes[2].result.ipmi_info.sensors[126]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[126]"
    assert type(result.nodes[2].result.ipmi_info.sensors[125]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[125]"
    assert type(result.nodes[2].result.ipmi_info.sensors[124]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[124]"
    assert type(result.nodes[2].result.ipmi_info.sensors[123]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[123]"
    assert type(result.nodes[2].result.ipmi_info.sensors[122]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[122]"
    assert type(result.nodes[2].result.ipmi_info.sensors[121]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[121]"
    assert type(result.nodes[2].result.ipmi_info.sensors[120]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[120]"
    assert type(result.nodes[2].result.ipmi_info.sensors[119]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[119]"
    assert type(result.nodes[2].result.ipmi_info.sensors[118]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[118]"
    assert type(result.nodes[2].result.ipmi_info.sensors[117]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[117]"
    assert type(result.nodes[2].result.ipmi_info.sensors[116]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[116]"
    assert type(result.nodes[2].result.ipmi_info.sensors[115]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[115]"
    assert type(result.nodes[2].result.ipmi_info.sensors[114]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[114]"
    assert type(result.nodes[2].result.ipmi_info.sensors[113]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[113]"
    assert type(result.nodes[2].result.ipmi_info.sensors[112]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[112]"
    assert type(result.nodes[2].result.ipmi_info.sensors[111]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[111]"
    assert type(result.nodes[2].result.ipmi_info.sensors[110]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[110]"
    assert type(result.nodes[2].result.ipmi_info.sensors[109]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[109]"
    assert type(result.nodes[2].result.ipmi_info.sensors[108]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[108]"
    assert type(result.nodes[2].result.ipmi_info.sensors[107]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[107]"
    assert type(result.nodes[2].result.ipmi_info.sensors[106]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[106]"
    assert type(result.nodes[2].result.ipmi_info.sensors[105]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[105]"
    assert type(result.nodes[2].result.ipmi_info.sensors[104]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[104]"
    assert type(result.nodes[2].result.ipmi_info.sensors[103]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[103]"
    assert type(result.nodes[2].result.ipmi_info.sensors[102]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[102]"
    assert type(result.nodes[2].result.ipmi_info.sensors[101]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[101]"
    assert type(result.nodes[2].result.ipmi_info.sensors[100]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[100]"
    assert type(result.nodes[2].result.ipmi_info.sensors[99]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[99]"
    assert type(result.nodes[2].result.ipmi_info.sensors[98]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[98]"
    assert type(result.nodes[2].result.ipmi_info.sensors[97]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[97]"
    assert type(result.nodes[2].result.ipmi_info.sensors[96]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[96]"
    assert type(result.nodes[2].result.ipmi_info.sensors[95]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[95]"
    assert type(result.nodes[2].result.ipmi_info.sensors[94]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[94]"
    assert type(result.nodes[2].result.ipmi_info.sensors[93]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[93]"
    assert type(result.nodes[2].result.ipmi_info.sensors[92]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[92]"
    assert type(result.nodes[2].result.ipmi_info.sensors[91]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[91]"
    assert type(result.nodes[2].result.ipmi_info.sensors[90]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[90]"
    assert type(result.nodes[2].result.ipmi_info.sensors[89]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[89]"
    assert type(result.nodes[2].result.ipmi_info.sensors[88]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[88]"
    assert type(result.nodes[2].result.ipmi_info.sensors[87]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[87]"
    assert type(result.nodes[2].result.ipmi_info.sensors[86]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[86]"
    assert type(result.nodes[2].result.ipmi_info.sensors[85]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[85]"
    assert type(result.nodes[2].result.ipmi_info.sensors[84]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[84]"
    assert type(result.nodes[2].result.ipmi_info.sensors[83]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[83]"
    assert type(result.nodes[2].result.ipmi_info.sensors[82]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[82]"
    assert type(result.nodes[2].result.ipmi_info.sensors[81]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[81]"
    assert type(result.nodes[2].result.ipmi_info.sensors[80]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[80]"
    assert type(result.nodes[2].result.ipmi_info.sensors[79]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[79]"
    assert type(result.nodes[2].result.ipmi_info.sensors[78]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[78]"
    assert type(result.nodes[2].result.ipmi_info.sensors[77]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[77]"
    assert type(result.nodes[2].result.ipmi_info.sensors[76]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[76]"
    assert type(result.nodes[2].result.ipmi_info.sensors[75]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[75]"
    assert type(result.nodes[2].result.ipmi_info.sensors[74]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[74]"
    assert type(result.nodes[2].result.ipmi_info.sensors[73]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[73]"
    assert type(result.nodes[2].result.ipmi_info.sensors[72]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[72]"
    assert type(result.nodes[2].result.ipmi_info.sensors[71]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[71]"
    assert type(result.nodes[2].result.ipmi_info.sensors[70]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[70]"
    assert type(result.nodes[2].result.ipmi_info.sensors[69]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[69]"
    assert type(result.nodes[2].result.ipmi_info.sensors[68]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[68]"
    assert type(result.nodes[2].result.ipmi_info.sensors[67]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[67]"
    assert type(result.nodes[2].result.ipmi_info.sensors[66]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[66]"
    assert type(result.nodes[2].result.ipmi_info.sensors[65]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[65]"
    assert type(result.nodes[2].result.ipmi_info.sensors[64]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[64]"
    assert type(result.nodes[2].result.ipmi_info.sensors[63]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[63]"
    assert type(result.nodes[2].result.ipmi_info.sensors[62]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[62]"
    assert type(result.nodes[2].result.ipmi_info.sensors[61]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[61]"
    assert type(result.nodes[2].result.ipmi_info.sensors[60]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[60]"
    assert type(result.nodes[2].result.ipmi_info.sensors[59]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[59]"
    assert type(result.nodes[2].result.ipmi_info.sensors[58]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[58]"
    assert type(result.nodes[2].result.ipmi_info.sensors[57]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[57]"
    assert type(result.nodes[2].result.ipmi_info.sensors[56]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[56]"
    assert type(result.nodes[2].result.ipmi_info.sensors[55]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[55]"
    assert type(result.nodes[2].result.ipmi_info.sensors[54]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[54]"
    assert type(result.nodes[2].result.ipmi_info.sensors[53]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[53]"
    assert type(result.nodes[2].result.ipmi_info.sensors[52]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[52]"
    assert type(result.nodes[2].result.ipmi_info.sensors[51]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[51]"
    assert type(result.nodes[2].result.ipmi_info.sensors[50]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[50]"
    assert type(result.nodes[2].result.ipmi_info.sensors[49]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[49]"
    assert type(result.nodes[2].result.ipmi_info.sensors[48]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[48]"
    assert type(result.nodes[2].result.ipmi_info.sensors[47]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[47]"
    assert type(result.nodes[2].result.ipmi_info.sensors[46]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[46]"
    assert type(result.nodes[2].result.ipmi_info.sensors[45]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[45]"
    assert type(result.nodes[2].result.ipmi_info.sensors[44]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[44]"
    assert type(result.nodes[2].result.ipmi_info.sensors[43]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[43]"
    assert type(result.nodes[2].result.ipmi_info.sensors[42]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[42]"
    assert type(result.nodes[2].result.ipmi_info.sensors[41]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[41]"
    assert type(result.nodes[2].result.ipmi_info.sensors[40]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[40]"
    assert type(result.nodes[2].result.ipmi_info.sensors[39]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[39]"
    assert type(result.nodes[2].result.ipmi_info.sensors[38]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[38]"
    assert type(result.nodes[2].result.ipmi_info.sensors[37]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[37]"
    assert type(result.nodes[2].result.ipmi_info.sensors[36]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[36]"
    assert type(result.nodes[2].result.ipmi_info.sensors[35]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[35]"
    assert type(result.nodes[2].result.ipmi_info.sensors[34]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[34]"
    assert type(result.nodes[2].result.ipmi_info.sensors[33]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[33]"
    assert type(result.nodes[2].result.ipmi_info.sensors[32]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[32]"
    assert type(result.nodes[2].result.ipmi_info.sensors[31]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[31]"
    assert type(result.nodes[2].result.ipmi_info.sensors[30]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[30]"
    assert type(result.nodes[2].result.ipmi_info.sensors[29]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[29]"
    assert type(result.nodes[2].result.ipmi_info.sensors[28]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[28]"
    assert type(result.nodes[2].result.ipmi_info.sensors[27]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[27]"
    assert type(result.nodes[2].result.ipmi_info.sensors[26]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[26]"
    assert type(result.nodes[2].result.ipmi_info.sensors[25]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[25]"
    assert type(result.nodes[2].result.ipmi_info.sensors[24]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[24]"
    assert type(result.nodes[2].result.ipmi_info.sensors[23]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[23]"
    assert type(result.nodes[2].result.ipmi_info.sensors[22]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[22]"
    assert type(result.nodes[2].result.ipmi_info.sensors[21]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[21]"
    assert type(result.nodes[2].result.ipmi_info.sensors[20]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[20]"
    assert type(result.nodes[2].result.ipmi_info.sensors[19]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[19]"
    assert type(result.nodes[2].result.ipmi_info.sensors[18]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[18]"
    assert type(result.nodes[2].result.ipmi_info.sensors[17]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[17]"
    assert type(result.nodes[2].result.ipmi_info.sensors[16]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[16]"
    assert type(result.nodes[2].result.ipmi_info.sensors[15]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[15]"
    assert type(result.nodes[2].result.ipmi_info.sensors[14]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[14]"
    assert type(result.nodes[2].result.ipmi_info.sensors[13]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[13]"
    assert type(result.nodes[2].result.ipmi_info.sensors[12]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[12]"
    assert type(result.nodes[2].result.ipmi_info.sensors[11]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[11]"
    assert type(result.nodes[2].result.ipmi_info.sensors[10]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[10]"
    assert type(result.nodes[2].result.ipmi_info.sensors[9]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[9]"
    assert type(result.nodes[2].result.ipmi_info.sensors[8]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[8]"
    assert type(result.nodes[2].result.ipmi_info.sensors[7]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[7]"
    assert type(result.nodes[2].result.ipmi_info.sensors[6]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[6]"
    assert type(result.nodes[2].result.ipmi_info.sensors[5]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[5]"
    assert type(result.nodes[2].result.ipmi_info.sensors[4]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[4]"
    assert type(result.nodes[2].result.ipmi_info.sensors[3]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[3]"
    assert type(result.nodes[2].result.ipmi_info.sensors[2]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[2]"
    assert type(result.nodes[2].result.ipmi_info.sensors[1]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[1]"
    assert type(result.nodes[2].result.ipmi_info.sensors[0]) is dict, "Died on .nodes[2].result.ipmi_info.sensors[0]"
    assert result.nodes[2].node_id == 3, "Died on +.nodes[2].node_id"
    assert type(result.nodes[1].result.ipmi_info.sensors[138]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[138]"
    assert type(result.nodes[1].result.ipmi_info.sensors[137]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[137]"
    assert type(result.nodes[1].result.ipmi_info.sensors[136]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[136]"
    assert type(result.nodes[1].result.ipmi_info.sensors[135]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[135]"
    assert type(result.nodes[1].result.ipmi_info.sensors[134]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[134]"
    assert type(result.nodes[1].result.ipmi_info.sensors[133]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[133]"
    assert type(result.nodes[1].result.ipmi_info.sensors[132]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[132]"
    assert type(result.nodes[1].result.ipmi_info.sensors[131]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[131]"
    assert type(result.nodes[1].result.ipmi_info.sensors[130]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[130]"
    assert type(result.nodes[1].result.ipmi_info.sensors[129]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[129]"
    assert type(result.nodes[1].result.ipmi_info.sensors[128]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[128]"
    assert type(result.nodes[1].result.ipmi_info.sensors[127]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[127]"
    assert type(result.nodes[1].result.ipmi_info.sensors[126]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[126]"
    assert type(result.nodes[1].result.ipmi_info.sensors[125]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[125]"
    assert type(result.nodes[1].result.ipmi_info.sensors[124]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[124]"
    assert type(result.nodes[1].result.ipmi_info.sensors[123]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[123]"
    assert type(result.nodes[1].result.ipmi_info.sensors[122]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[122]"
    assert type(result.nodes[1].result.ipmi_info.sensors[121]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[121]"
    assert type(result.nodes[1].result.ipmi_info.sensors[120]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[120]"
    assert type(result.nodes[1].result.ipmi_info.sensors[119]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[119]"
    assert type(result.nodes[1].result.ipmi_info.sensors[118]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[118]"
    assert type(result.nodes[1].result.ipmi_info.sensors[117]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[117]"
    assert type(result.nodes[1].result.ipmi_info.sensors[116]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[116]"
    assert type(result.nodes[1].result.ipmi_info.sensors[115]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[115]"
    assert type(result.nodes[1].result.ipmi_info.sensors[114]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[114]"
    assert type(result.nodes[1].result.ipmi_info.sensors[113]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[113]"
    assert type(result.nodes[1].result.ipmi_info.sensors[112]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[112]"
    assert type(result.nodes[1].result.ipmi_info.sensors[111]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[111]"
    assert type(result.nodes[1].result.ipmi_info.sensors[110]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[110]"
    assert type(result.nodes[1].result.ipmi_info.sensors[109]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[109]"
    assert type(result.nodes[1].result.ipmi_info.sensors[108]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[108]"
    assert type(result.nodes[1].result.ipmi_info.sensors[107]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[107]"
    assert type(result.nodes[1].result.ipmi_info.sensors[106]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[106]"
    assert type(result.nodes[1].result.ipmi_info.sensors[105]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[105]"
    assert type(result.nodes[1].result.ipmi_info.sensors[104]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[104]"
    assert type(result.nodes[1].result.ipmi_info.sensors[103]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[103]"
    assert type(result.nodes[1].result.ipmi_info.sensors[102]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[102]"
    assert type(result.nodes[1].result.ipmi_info.sensors[101]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[101]"
    assert type(result.nodes[1].result.ipmi_info.sensors[100]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[100]"
    assert type(result.nodes[1].result.ipmi_info.sensors[99]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[99]"
    assert type(result.nodes[1].result.ipmi_info.sensors[98]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[98]"
    assert type(result.nodes[1].result.ipmi_info.sensors[97]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[97]"
    assert type(result.nodes[1].result.ipmi_info.sensors[96]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[96]"
    assert type(result.nodes[1].result.ipmi_info.sensors[95]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[95]"
    assert type(result.nodes[1].result.ipmi_info.sensors[94]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[94]"
    assert type(result.nodes[1].result.ipmi_info.sensors[93]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[93]"
    assert type(result.nodes[1].result.ipmi_info.sensors[92]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[92]"
    assert type(result.nodes[1].result.ipmi_info.sensors[91]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[91]"
    assert type(result.nodes[1].result.ipmi_info.sensors[90]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[90]"
    assert type(result.nodes[1].result.ipmi_info.sensors[89]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[89]"
    assert type(result.nodes[1].result.ipmi_info.sensors[88]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[88]"
    assert type(result.nodes[1].result.ipmi_info.sensors[87]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[87]"
    assert type(result.nodes[1].result.ipmi_info.sensors[86]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[86]"
    assert type(result.nodes[1].result.ipmi_info.sensors[85]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[85]"
    assert type(result.nodes[1].result.ipmi_info.sensors[84]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[84]"
    assert type(result.nodes[1].result.ipmi_info.sensors[83]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[83]"
    assert type(result.nodes[1].result.ipmi_info.sensors[82]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[82]"
    assert type(result.nodes[1].result.ipmi_info.sensors[81]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[81]"
    assert type(result.nodes[1].result.ipmi_info.sensors[80]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[80]"
    assert type(result.nodes[1].result.ipmi_info.sensors[79]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[79]"
    assert type(result.nodes[1].result.ipmi_info.sensors[78]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[78]"
    assert type(result.nodes[1].result.ipmi_info.sensors[77]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[77]"
    assert type(result.nodes[1].result.ipmi_info.sensors[76]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[76]"
    assert type(result.nodes[1].result.ipmi_info.sensors[75]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[75]"
    assert type(result.nodes[1].result.ipmi_info.sensors[74]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[74]"
    assert type(result.nodes[1].result.ipmi_info.sensors[73]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[73]"
    assert type(result.nodes[1].result.ipmi_info.sensors[72]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[72]"
    assert type(result.nodes[1].result.ipmi_info.sensors[71]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[71]"
    assert type(result.nodes[1].result.ipmi_info.sensors[70]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[70]"
    assert type(result.nodes[1].result.ipmi_info.sensors[69]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[69]"
    assert type(result.nodes[1].result.ipmi_info.sensors[68]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[68]"
    assert type(result.nodes[1].result.ipmi_info.sensors[67]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[67]"
    assert type(result.nodes[1].result.ipmi_info.sensors[66]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[66]"
    assert type(result.nodes[1].result.ipmi_info.sensors[65]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[65]"
    assert type(result.nodes[1].result.ipmi_info.sensors[64]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[64]"
    assert type(result.nodes[1].result.ipmi_info.sensors[63]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[63]"
    assert type(result.nodes[1].result.ipmi_info.sensors[62]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[62]"
    assert type(result.nodes[1].result.ipmi_info.sensors[61]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[61]"
    assert type(result.nodes[1].result.ipmi_info.sensors[60]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[60]"
    assert type(result.nodes[1].result.ipmi_info.sensors[59]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[59]"
    assert type(result.nodes[1].result.ipmi_info.sensors[58]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[58]"
    assert type(result.nodes[1].result.ipmi_info.sensors[57]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[57]"
    assert type(result.nodes[1].result.ipmi_info.sensors[56]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[56]"
    assert type(result.nodes[1].result.ipmi_info.sensors[55]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[55]"
    assert type(result.nodes[1].result.ipmi_info.sensors[54]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[54]"
    assert type(result.nodes[1].result.ipmi_info.sensors[53]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[53]"
    assert type(result.nodes[1].result.ipmi_info.sensors[52]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[52]"
    assert type(result.nodes[1].result.ipmi_info.sensors[51]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[51]"
    assert type(result.nodes[1].result.ipmi_info.sensors[50]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[50]"
    assert type(result.nodes[1].result.ipmi_info.sensors[49]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[49]"
    assert type(result.nodes[1].result.ipmi_info.sensors[48]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[48]"
    assert type(result.nodes[1].result.ipmi_info.sensors[47]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[47]"
    assert type(result.nodes[1].result.ipmi_info.sensors[46]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[46]"
    assert type(result.nodes[1].result.ipmi_info.sensors[45]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[45]"
    assert type(result.nodes[1].result.ipmi_info.sensors[44]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[44]"
    assert type(result.nodes[1].result.ipmi_info.sensors[43]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[43]"
    assert type(result.nodes[1].result.ipmi_info.sensors[42]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[42]"
    assert type(result.nodes[1].result.ipmi_info.sensors[41]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[41]"
    assert type(result.nodes[1].result.ipmi_info.sensors[40]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[40]"
    assert type(result.nodes[1].result.ipmi_info.sensors[39]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[39]"
    assert type(result.nodes[1].result.ipmi_info.sensors[38]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[38]"
    assert type(result.nodes[1].result.ipmi_info.sensors[37]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[37]"
    assert type(result.nodes[1].result.ipmi_info.sensors[36]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[36]"
    assert type(result.nodes[1].result.ipmi_info.sensors[35]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[35]"
    assert type(result.nodes[1].result.ipmi_info.sensors[34]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[34]"
    assert type(result.nodes[1].result.ipmi_info.sensors[33]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[33]"
    assert type(result.nodes[1].result.ipmi_info.sensors[32]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[32]"
    assert type(result.nodes[1].result.ipmi_info.sensors[31]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[31]"
    assert type(result.nodes[1].result.ipmi_info.sensors[30]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[30]"
    assert type(result.nodes[1].result.ipmi_info.sensors[29]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[29]"
    assert type(result.nodes[1].result.ipmi_info.sensors[28]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[28]"
    assert type(result.nodes[1].result.ipmi_info.sensors[27]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[27]"
    assert type(result.nodes[1].result.ipmi_info.sensors[26]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[26]"
    assert type(result.nodes[1].result.ipmi_info.sensors[25]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[25]"
    assert type(result.nodes[1].result.ipmi_info.sensors[24]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[24]"
    assert type(result.nodes[1].result.ipmi_info.sensors[23]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[23]"
    assert type(result.nodes[1].result.ipmi_info.sensors[22]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[22]"
    assert type(result.nodes[1].result.ipmi_info.sensors[21]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[21]"
    assert type(result.nodes[1].result.ipmi_info.sensors[20]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[20]"
    assert type(result.nodes[1].result.ipmi_info.sensors[19]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[19]"
    assert type(result.nodes[1].result.ipmi_info.sensors[18]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[18]"
    assert type(result.nodes[1].result.ipmi_info.sensors[17]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[17]"
    assert type(result.nodes[1].result.ipmi_info.sensors[16]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[16]"
    assert type(result.nodes[1].result.ipmi_info.sensors[15]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[15]"
    assert type(result.nodes[1].result.ipmi_info.sensors[14]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[14]"
    assert type(result.nodes[1].result.ipmi_info.sensors[13]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[13]"
    assert type(result.nodes[1].result.ipmi_info.sensors[12]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[12]"
    assert type(result.nodes[1].result.ipmi_info.sensors[11]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[11]"
    assert type(result.nodes[1].result.ipmi_info.sensors[10]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[10]"
    assert type(result.nodes[1].result.ipmi_info.sensors[9]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[9]"
    assert type(result.nodes[1].result.ipmi_info.sensors[8]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[8]"
    assert type(result.nodes[1].result.ipmi_info.sensors[7]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[7]"
    assert type(result.nodes[1].result.ipmi_info.sensors[6]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[6]"
    assert type(result.nodes[1].result.ipmi_info.sensors[5]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[5]"
    assert type(result.nodes[1].result.ipmi_info.sensors[4]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[4]"
    assert type(result.nodes[1].result.ipmi_info.sensors[3]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[3]"
    assert type(result.nodes[1].result.ipmi_info.sensors[2]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[2]"
    assert type(result.nodes[1].result.ipmi_info.sensors[1]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[1]"
    assert type(result.nodes[1].result.ipmi_info.sensors[0]) is dict, "Died on .nodes[1].result.ipmi_info.sensors[0]"
    assert result.nodes[1].node_id == 2, "Died on +.nodes[1].node_id"
    assert type(result.nodes[0].result.ipmi_info.sensors[138]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[138]"
    assert type(result.nodes[0].result.ipmi_info.sensors[137]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[137]"
    assert type(result.nodes[0].result.ipmi_info.sensors[136]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[136]"
    assert type(result.nodes[0].result.ipmi_info.sensors[135]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[135]"
    assert type(result.nodes[0].result.ipmi_info.sensors[134]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[134]"
    assert type(result.nodes[0].result.ipmi_info.sensors[133]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[133]"
    assert type(result.nodes[0].result.ipmi_info.sensors[132]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[132]"
    assert type(result.nodes[0].result.ipmi_info.sensors[131]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[131]"
    assert type(result.nodes[0].result.ipmi_info.sensors[130]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[130]"
    assert type(result.nodes[0].result.ipmi_info.sensors[129]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[129]"
    assert type(result.nodes[0].result.ipmi_info.sensors[128]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[128]"
    assert type(result.nodes[0].result.ipmi_info.sensors[127]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[127]"
    assert type(result.nodes[0].result.ipmi_info.sensors[126]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[126]"
    assert type(result.nodes[0].result.ipmi_info.sensors[125]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[125]"
    assert type(result.nodes[0].result.ipmi_info.sensors[124]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[124]"
    assert type(result.nodes[0].result.ipmi_info.sensors[123]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[123]"
    assert type(result.nodes[0].result.ipmi_info.sensors[122]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[122]"
    assert type(result.nodes[0].result.ipmi_info.sensors[121]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[121]"
    assert type(result.nodes[0].result.ipmi_info.sensors[120]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[120]"
    assert type(result.nodes[0].result.ipmi_info.sensors[119]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[119]"
    assert type(result.nodes[0].result.ipmi_info.sensors[118]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[118]"
    assert type(result.nodes[0].result.ipmi_info.sensors[117]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[117]"
    assert type(result.nodes[0].result.ipmi_info.sensors[116]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[116]"
    assert type(result.nodes[0].result.ipmi_info.sensors[115]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[115]"
    assert type(result.nodes[0].result.ipmi_info.sensors[114]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[114]"
    assert type(result.nodes[0].result.ipmi_info.sensors[113]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[113]"
    assert type(result.nodes[0].result.ipmi_info.sensors[112]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[112]"
    assert type(result.nodes[0].result.ipmi_info.sensors[111]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[111]"
    assert type(result.nodes[0].result.ipmi_info.sensors[110]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[110]"
    assert type(result.nodes[0].result.ipmi_info.sensors[109]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[109]"
    assert type(result.nodes[0].result.ipmi_info.sensors[108]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[108]"
    assert type(result.nodes[0].result.ipmi_info.sensors[107]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[107]"
    assert type(result.nodes[0].result.ipmi_info.sensors[106]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[106]"
    assert type(result.nodes[0].result.ipmi_info.sensors[105]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[105]"
    assert type(result.nodes[0].result.ipmi_info.sensors[104]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[104]"
    assert type(result.nodes[0].result.ipmi_info.sensors[103]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[103]"
    assert type(result.nodes[0].result.ipmi_info.sensors[102]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[102]"
    assert type(result.nodes[0].result.ipmi_info.sensors[101]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[101]"
    assert type(result.nodes[0].result.ipmi_info.sensors[100]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[100]"
    assert type(result.nodes[0].result.ipmi_info.sensors[99]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[99]"
    assert type(result.nodes[0].result.ipmi_info.sensors[98]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[98]"
    assert type(result.nodes[0].result.ipmi_info.sensors[97]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[97]"
    assert type(result.nodes[0].result.ipmi_info.sensors[96]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[96]"
    assert type(result.nodes[0].result.ipmi_info.sensors[95]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[95]"
    assert type(result.nodes[0].result.ipmi_info.sensors[94]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[94]"
    assert type(result.nodes[0].result.ipmi_info.sensors[93]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[93]"
    assert type(result.nodes[0].result.ipmi_info.sensors[92]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[92]"
    assert type(result.nodes[0].result.ipmi_info.sensors[91]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[91]"
    assert type(result.nodes[0].result.ipmi_info.sensors[90]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[90]"
    assert type(result.nodes[0].result.ipmi_info.sensors[89]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[89]"
    assert type(result.nodes[0].result.ipmi_info.sensors[88]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[88]"
    assert type(result.nodes[0].result.ipmi_info.sensors[87]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[87]"
    assert type(result.nodes[0].result.ipmi_info.sensors[86]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[86]"
    assert type(result.nodes[0].result.ipmi_info.sensors[85]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[85]"
    assert type(result.nodes[0].result.ipmi_info.sensors[84]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[84]"
    assert type(result.nodes[0].result.ipmi_info.sensors[83]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[83]"
    assert type(result.nodes[0].result.ipmi_info.sensors[82]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[82]"
    assert type(result.nodes[0].result.ipmi_info.sensors[81]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[81]"
    assert type(result.nodes[0].result.ipmi_info.sensors[80]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[80]"
    assert type(result.nodes[0].result.ipmi_info.sensors[79]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[79]"
    assert type(result.nodes[0].result.ipmi_info.sensors[78]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[78]"
    assert type(result.nodes[0].result.ipmi_info.sensors[77]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[77]"
    assert type(result.nodes[0].result.ipmi_info.sensors[76]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[76]"
    assert type(result.nodes[0].result.ipmi_info.sensors[75]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[75]"
    assert type(result.nodes[0].result.ipmi_info.sensors[74]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[74]"
    assert type(result.nodes[0].result.ipmi_info.sensors[73]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[73]"
    assert type(result.nodes[0].result.ipmi_info.sensors[72]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[72]"
    assert type(result.nodes[0].result.ipmi_info.sensors[71]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[71]"
    assert type(result.nodes[0].result.ipmi_info.sensors[70]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[70]"
    assert type(result.nodes[0].result.ipmi_info.sensors[69]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[69]"
    assert type(result.nodes[0].result.ipmi_info.sensors[68]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[68]"
    assert type(result.nodes[0].result.ipmi_info.sensors[67]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[67]"
    assert type(result.nodes[0].result.ipmi_info.sensors[66]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[66]"
    assert type(result.nodes[0].result.ipmi_info.sensors[65]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[65]"
    assert type(result.nodes[0].result.ipmi_info.sensors[64]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[64]"
    assert type(result.nodes[0].result.ipmi_info.sensors[63]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[63]"
    assert type(result.nodes[0].result.ipmi_info.sensors[62]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[62]"
    assert type(result.nodes[0].result.ipmi_info.sensors[61]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[61]"
    assert type(result.nodes[0].result.ipmi_info.sensors[60]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[60]"
    assert type(result.nodes[0].result.ipmi_info.sensors[59]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[59]"
    assert type(result.nodes[0].result.ipmi_info.sensors[58]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[58]"
    assert type(result.nodes[0].result.ipmi_info.sensors[57]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[57]"
    assert type(result.nodes[0].result.ipmi_info.sensors[56]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[56]"
    assert type(result.nodes[0].result.ipmi_info.sensors[55]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[55]"
    assert type(result.nodes[0].result.ipmi_info.sensors[54]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[54]"
    assert type(result.nodes[0].result.ipmi_info.sensors[53]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[53]"
    assert type(result.nodes[0].result.ipmi_info.sensors[52]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[52]"
    assert type(result.nodes[0].result.ipmi_info.sensors[51]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[51]"
    assert type(result.nodes[0].result.ipmi_info.sensors[50]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[50]"
    assert type(result.nodes[0].result.ipmi_info.sensors[49]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[49]"
    assert type(result.nodes[0].result.ipmi_info.sensors[48]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[48]"
    assert type(result.nodes[0].result.ipmi_info.sensors[47]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[47]"
    assert type(result.nodes[0].result.ipmi_info.sensors[46]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[46]"
    assert type(result.nodes[0].result.ipmi_info.sensors[45]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[45]"
    assert type(result.nodes[0].result.ipmi_info.sensors[44]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[44]"
    assert type(result.nodes[0].result.ipmi_info.sensors[43]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[43]"
    assert type(result.nodes[0].result.ipmi_info.sensors[42]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[42]"
    assert type(result.nodes[0].result.ipmi_info.sensors[41]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[41]"
    assert type(result.nodes[0].result.ipmi_info.sensors[40]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[40]"
    assert type(result.nodes[0].result.ipmi_info.sensors[39]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[39]"
    assert type(result.nodes[0].result.ipmi_info.sensors[38]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[38]"
    assert type(result.nodes[0].result.ipmi_info.sensors[37]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[37]"
    assert type(result.nodes[0].result.ipmi_info.sensors[36]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[36]"
    assert type(result.nodes[0].result.ipmi_info.sensors[35]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[35]"
    assert type(result.nodes[0].result.ipmi_info.sensors[34]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[34]"
    assert type(result.nodes[0].result.ipmi_info.sensors[33]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[33]"
    assert type(result.nodes[0].result.ipmi_info.sensors[32]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[32]"
    assert type(result.nodes[0].result.ipmi_info.sensors[31]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[31]"
    assert type(result.nodes[0].result.ipmi_info.sensors[30]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[30]"
    assert type(result.nodes[0].result.ipmi_info.sensors[29]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[29]"
    assert type(result.nodes[0].result.ipmi_info.sensors[28]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[28]"
    assert type(result.nodes[0].result.ipmi_info.sensors[27]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[27]"
    assert type(result.nodes[0].result.ipmi_info.sensors[26]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[26]"
    assert type(result.nodes[0].result.ipmi_info.sensors[25]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[25]"
    assert type(result.nodes[0].result.ipmi_info.sensors[24]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[24]"
    assert type(result.nodes[0].result.ipmi_info.sensors[23]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[23]"
    assert type(result.nodes[0].result.ipmi_info.sensors[22]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[22]"
    assert type(result.nodes[0].result.ipmi_info.sensors[21]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[21]"
    assert type(result.nodes[0].result.ipmi_info.sensors[20]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[20]"
    assert type(result.nodes[0].result.ipmi_info.sensors[19]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[19]"
    assert type(result.nodes[0].result.ipmi_info.sensors[18]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[18]"
    assert type(result.nodes[0].result.ipmi_info.sensors[17]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[17]"
    assert type(result.nodes[0].result.ipmi_info.sensors[16]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[16]"
    assert type(result.nodes[0].result.ipmi_info.sensors[15]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[15]"
    assert type(result.nodes[0].result.ipmi_info.sensors[14]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[14]"
    assert type(result.nodes[0].result.ipmi_info.sensors[13]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[13]"
    assert type(result.nodes[0].result.ipmi_info.sensors[12]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[12]"
    assert type(result.nodes[0].result.ipmi_info.sensors[11]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[11]"
    assert type(result.nodes[0].result.ipmi_info.sensors[10]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[10]"
    assert type(result.nodes[0].result.ipmi_info.sensors[9]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[9]"
    assert type(result.nodes[0].result.ipmi_info.sensors[8]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[8]"
    assert type(result.nodes[0].result.ipmi_info.sensors[7]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[7]"
    assert type(result.nodes[0].result.ipmi_info.sensors[6]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[6]"
    assert type(result.nodes[0].result.ipmi_info.sensors[5]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[5]"
    assert type(result.nodes[0].result.ipmi_info.sensors[4]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[4]"
    assert type(result.nodes[0].result.ipmi_info.sensors[3]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[3]"
    assert type(result.nodes[0].result.ipmi_info.sensors[2]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[2]"
    assert type(result.nodes[0].result.ipmi_info.sensors[1]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[1]"
    assert type(result.nodes[0].result.ipmi_info.sensors[0]) is dict, "Died on .nodes[0].result.ipmi_info.sensors[0]"
    assert result.nodes[0].node_id == 1, "Died on +.nodes[0].node_id"

def test_get_limits_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetLimits_v9_0)

    
    result = ef.get_limits()
    assert result.initiator_count_max == 0, "Died on +.initiator_count_max"
    assert result.iscsi_sessions_from_fibre_channel_nodes_max == 4096, "Died on +.iscsi_sessions_from_fibre_channel_nodes_max"
    assert result.cluster_pairs_count_max == 4, "Died on +.cluster_pairs_count_max"
    assert result.volume_max_iopsmin == 100, "Died on +.volume_max_iopsmin"
    assert result.volume_size_max == 8000000491520, "Died on +.volume_size_max"
    assert result.volume_burst_iopsmax == 100000, "Died on +.volume_burst_iopsmax"
    assert result.clone_jobs_per_volume_max == 2, "Died on +.clone_jobs_per_volume_max"
    assert result.volumes_per_volume_access_group_count_max == 2000, "Died on +.volumes_per_volume_access_group_count_max"
    assert result.initiator_name_length_max == 224, "Died on +.initiator_name_length_max"
    assert result.volume_name_length_min == 1, "Died on +.volume_name_length_min"
    assert result.volume_min_iopsmin == 50, "Died on +.volume_min_iopsmin"
    assert result.snapshots_per_volume_max == 32, "Died on +.snapshots_per_volume_max"
    assert result.volume_access_groups_per_volume_count_max == 4, "Died on +.volume_access_groups_per_volume_count_max"
    assert result.volumes_per_group_snapshot_max == 32, "Died on +.volumes_per_group_snapshot_max"
    assert result.volume_max_iopsmax == 100000, "Died on +.volume_max_iopsmax"
    assert result.volume_access_groups_per_initiator_count_max == 1, "Died on +.volume_access_groups_per_initiator_count_max"
    assert result.bulk_volume_jobs_per_node_max == 8, "Died on +.bulk_volume_jobs_per_node_max"
    assert result.initiators_per_volume_access_group_count_max == 64, "Died on +.initiators_per_volume_access_group_count_max"
    assert result.volume_access_group_name_length_max == 64, "Died on +.volume_access_group_name_length_max"
    assert result.account_name_length_min == 1, "Died on +.account_name_length_min"
    assert result.volume_name_length_max == 64, "Died on +.volume_name_length_max"
    assert result.secret_length_max == 16, "Died on +.secret_length_max"
    assert result.account_count_max == 5000, "Died on +.account_count_max"
    assert result.volume_access_group_count_max == 1000, "Died on +.volume_access_group_count_max"
    assert result.secret_length_min == 12, "Died on +.secret_length_min"
    assert result.volume_access_group_lun_max == 16383, "Died on +.volume_access_group_lun_max"
    assert result.volume_access_group_name_length_min == 1, "Died on +.volume_access_group_name_length_min"
    assert result.volumes_per_account_count_max == 2000, "Died on +.volumes_per_account_count_max"
    assert result.snapshot_name_length_max == 64, "Died on +.snapshot_name_length_max"
    assert result.bulk_volume_jobs_per_volume_max == 2, "Died on +.bulk_volume_jobs_per_volume_max"
    assert result.volume_count_max == 4000, "Died on +.volume_count_max"
    assert result.volume_size_min == 1000000000, "Died on +.volume_size_min"
    assert result.initiator_alias_length_max == 224, "Died on +.initiator_alias_length_max"
    assert result.volume_burst_iopsmin == 100, "Died on +.volume_burst_iopsmin"
    assert result.volume_min_iopsmax == 15000, "Died on +.volume_min_iopsmax"
    assert result.account_name_length_max == 64, "Died on +.account_name_length_max"

def test_get_network_config_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetNetworkConfig_v9_0)

    
    result = ef.get_network_config()
    assert result.network.bond1_g.mac_address == """d4:ae:52:8a:6c:7b""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.virtual_network_tag == """1064""", "Died on +.network.bond1_g.virtual_network_tag"
    assert result.network.bond1_g.symmetric_route_rules[3] == """ip route add default via 10.30.95.254""", "Died on +.network.bond1_g.symmetric_route_rules[3]"
    assert result.network.bond1_g.symmetric_route_rules[2] == """ip rule add from 10.30.65.161 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[2]"
    assert result.network.bond1_g.symmetric_route_rules[1] == """ip route add default via 10.30.95.254 dev Bond1G src 10.30.65.161 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[1]"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add 10.30.64.0/19 dev Bond1G src 10.30.65.161 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.30.95.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """d4:ae:52:8a:6c:7b""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """10.30.64.0""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.224.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.30.65.161""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.network == """10.30.64.0""", "Died on +.network.bond1_g.network"
    assert result.network.bond1_g.method == """static""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_fail_over_mac == """None""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.224.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """ActivePassive""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.30.65.161""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_downdelay == """200""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """d4:ae:52:8a:6c:77""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.virtual_network_tag == """2064""", "Died on +.network.bond10_g.virtual_network_tag"
    assert result.network.bond10_g.symmetric_route_rules[2] == """ip rule add from 192.168.65.161 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[2]"
    assert result.network.bond10_g.symmetric_route_rules[1] == """ip route add default via 192.168.95.254 dev Bond10G src 192.168.65.161 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[1]"
    assert result.network.bond10_g.symmetric_route_rules[0] == """ip route add 192.168.64.0/19 dev Bond10G src 192.168.65.161 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[0]"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.gateway == """192.168.95.254""", "Died on +.network.bond10_g.gateway"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """d4:ae:52:8a:6c:77""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """192.168.64.0""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.224.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """192.168.65.161""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.network == """192.168.64.0""", "Died on +.network.bond10_g.network"
    assert result.network.bond10_g.method == """static""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_fail_over_mac == """None""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.224.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """ActivePassive""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """192.168.65.161""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_downdelay == """200""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """d4:ae:52:8a:6c:7d""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """d4:ae:52:8a:6c:7b""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """d4:ae:52:8a:6c:7d""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """d4:ae:52:8a:6c:7b""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """d4:ae:52:8a:6c:7b""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """d4:ae:52:8a:6c:7b""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """d4:ae:52:8a:6c:7b""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """d4:ae:52:8a:6c:7b""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """d4:ae:52:8a:6c:79""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """d4:ae:52:8a:6c:77""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """d4:ae:52:8a:6c:79""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """d4:ae:52:8a:6c:77""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """d4:ae:52:8a:6c:77""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """d4:ae:52:8a:6c:77""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """d4:ae:52:8a:6c:77""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """d4:ae:52:8a:6c:77""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_get_node_hardware_info_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetNodeHardwareInfo_v9_0)

    
    node_id = 42 # node_id
    result = ef.get_node_hardware_info(node_id,)
    assert type(result.node_hardware_info) is dict, "Died on .node_hardware_info"

def test_get_nvram_info_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetNvramInfo_v9_0)

    
    result = ef.get_nvram_info()
    assert type(result.nvram_info) is dict, "Died on .nvram_info"

def test_get_origin_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetOrigin_v9_0)

    
    force = True # force
    result = ef.get_origin(force,)
    assert result.nodes[3].result.origin is None, "Died on .nodes[3].result.origin"
    assert result.nodes[3].node_id == 4, "Died on +.nodes[3].node_id"
    assert result.nodes[2].result.origin.contract_quantity == 0, "Died on +.nodes[2].result.origin.contract_quantity"
    assert result.nodes[2].result.origin.contract_name == """00002265""", "Died on +.nodes[2].result.origin.contract_name"
    assert result.nodes[2].result.origin.integrator == """StackVelocity""", "Died on +.nodes[2].result.origin.integrator"
    assert result.nodes[2].result.origin.contract_type == """Master""", "Died on +.nodes[2].result.origin.contract_type"
    assert result.nodes[2].result.origin.signature.pubkey == """MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxmKgEBzyZv2jFZpucao7HT9lYuR3g/18thP/7arwflrtDauIaPaIbnsuDVWgbPKHsqBkth9XCnDF16yBOFYoJLZ+vW0kNS7Z/CiCiLlmAXIa4voeEqLsQ55IbAhjMXfrGauyUHZYunMBhUG3xDJxdrs4Rgp24VqB/oBxihleyotIX+dLpv7nd7qbVA3juLMAy7cfgxUX7mAEmPAcx3gNiNw7SBBZaeFVrNSiXv3+Zrw5wLkLH1QDWwuBRK+3yGTkzVwD5QgLw0qkRMkFobBhk96Z7CQbf4B/8zi3bhvowoyaK+4Cv/jmEjs2TS0QFW0PQHKIjyC3ckkcLaZZ2DQcLQIDAQAB""", "Died on +.nodes[2].result.origin.signature.pubkey"
    assert result.nodes[2].result.origin.signature.version == 1, "Died on +.nodes[2].result.origin.signature.version"
    assert result.nodes[2].result.origin.signature.data == """eiPNNA3TpfgO0bl+SnhjaO1ZEKJUPZJDG1PFZrbOmUu5JXfQ012Aq0RzhMSKIb8MVTgesZ/+urfzuVD9Zf1JKwnfv7h3UZLMzE7eC6rJnLNi+AgHEYvqBLLKMJ39HNj+xEOogpQmBIn5jKv7U05pk4tsQwbxv4HtoQNMEl+PdQuVdDGLD9ipU3jgAw5sHFFZ+hLq8Uk3fzUiiR7LcW2b9aAw4KEQdSj/OhCNB4/7IcKOq8YBpP3ONWb+N6jrqSfMtnD4sa7vzSX7vI0z++zBeUd6E0hJz7atonS6oAqtyT4F48giO6hBSfkqt0KLvvC1Mcgh0LQrQG+XZnQ5KWBIuQ==""", "Died on +.nodes[2].result.origin.signature.data"
    assert result.nodes[2].result.origin.location == """Memphis, Tennessee""", "Died on +.nodes[2].result.origin.location"
    assert result.nodes[2].result.origin.contract_date == """10/1/2015""", "Died on +.nodes[2].result.origin.contract_date"
    assert result.nodes[2].result.origin.organization == """none""", "Died on +.nodes[2].result.origin.organization"
    assert result.nodes[2].result.origin.type == """appliance""", "Died on +.nodes[2].result.origin.type"
    assert result.nodes[2].node_id == 3, "Died on +.nodes[2].node_id"
    assert result.nodes[1].result.origin.contract_quantity == 0, "Died on +.nodes[1].result.origin.contract_quantity"
    assert result.nodes[1].result.origin.contract_name == """00002265""", "Died on +.nodes[1].result.origin.contract_name"
    assert result.nodes[1].result.origin.integrator == """StackVelocity""", "Died on +.nodes[1].result.origin.integrator"
    assert result.nodes[1].result.origin.contract_type == """Master""", "Died on +.nodes[1].result.origin.contract_type"
    assert result.nodes[1].result.origin.signature.pubkey == """MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxmKgEBzyZv2jFZpucao7HT9lYuR3g/18thP/7arwflrtDauIaPaIbnsuDVWgbPKHsqBkth9XCnDF16yBOFYoJLZ+vW0kNS7Z/CiCiLlmAXIa4voeEqLsQ55IbAhjMXfrGauyUHZYunMBhUG3xDJxdrs4Rgp24VqB/oBxihleyotIX+dLpv7nd7qbVA3juLMAy7cfgxUX7mAEmPAcx3gNiNw7SBBZaeFVrNSiXv3+Zrw5wLkLH1QDWwuBRK+3yGTkzVwD5QgLw0qkRMkFobBhk96Z7CQbf4B/8zi3bhvowoyaK+4Cv/jmEjs2TS0QFW0PQHKIjyC3ckkcLaZZ2DQcLQIDAQAB""", "Died on +.nodes[1].result.origin.signature.pubkey"
    assert result.nodes[1].result.origin.signature.version == 1, "Died on +.nodes[1].result.origin.signature.version"
    assert result.nodes[1].result.origin.signature.data == """eiPNNA3TpfgO0bl+SnhjaO1ZEKJUPZJDG1PFZrbOmUu5JXfQ012Aq0RzhMSKIb8MVTgesZ/+urfzuVD9Zf1JKwnfv7h3UZLMzE7eC6rJnLNi+AgHEYvqBLLKMJ39HNj+xEOogpQmBIn5jKv7U05pk4tsQwbxv4HtoQNMEl+PdQuVdDGLD9ipU3jgAw5sHFFZ+hLq8Uk3fzUiiR7LcW2b9aAw4KEQdSj/OhCNB4/7IcKOq8YBpP3ONWb+N6jrqSfMtnD4sa7vzSX7vI0z++zBeUd6E0hJz7atonS6oAqtyT4F48giO6hBSfkqt0KLvvC1Mcgh0LQrQG+XZnQ5KWBIuQ==""", "Died on +.nodes[1].result.origin.signature.data"
    assert result.nodes[1].result.origin.location == """Memphis, Tennessee""", "Died on +.nodes[1].result.origin.location"
    assert result.nodes[1].result.origin.contract_date == """10/1/2015""", "Died on +.nodes[1].result.origin.contract_date"
    assert result.nodes[1].result.origin.organization == """none""", "Died on +.nodes[1].result.origin.organization"
    assert result.nodes[1].result.origin.type == """appliance""", "Died on +.nodes[1].result.origin.type"
    assert result.nodes[1].node_id == 2, "Died on +.nodes[1].node_id"
    assert result.nodes[0].result.origin.contract_quantity == 0, "Died on +.nodes[0].result.origin.contract_quantity"
    assert result.nodes[0].result.origin.contract_name == """00002265""", "Died on +.nodes[0].result.origin.contract_name"
    assert result.nodes[0].result.origin.integrator == """StackVelocity""", "Died on +.nodes[0].result.origin.integrator"
    assert result.nodes[0].result.origin.contract_type == """Master""", "Died on +.nodes[0].result.origin.contract_type"
    assert result.nodes[0].result.origin.signature.pubkey == """MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxmKgEBzyZv2jFZpucao7HT9lYuR3g/18thP/7arwflrtDauIaPaIbnsuDVWgbPKHsqBkth9XCnDF16yBOFYoJLZ+vW0kNS7Z/CiCiLlmAXIa4voeEqLsQ55IbAhjMXfrGauyUHZYunMBhUG3xDJxdrs4Rgp24VqB/oBxihleyotIX+dLpv7nd7qbVA3juLMAy7cfgxUX7mAEmPAcx3gNiNw7SBBZaeFVrNSiXv3+Zrw5wLkLH1QDWwuBRK+3yGTkzVwD5QgLw0qkRMkFobBhk96Z7CQbf4B/8zi3bhvowoyaK+4Cv/jmEjs2TS0QFW0PQHKIjyC3ckkcLaZZ2DQcLQIDAQAB""", "Died on +.nodes[0].result.origin.signature.pubkey"
    assert result.nodes[0].result.origin.signature.version == 1, "Died on +.nodes[0].result.origin.signature.version"
    assert result.nodes[0].result.origin.signature.data == """eiPNNA3TpfgO0bl+SnhjaO1ZEKJUPZJDG1PFZrbOmUu5JXfQ012Aq0RzhMSKIb8MVTgesZ/+urfzuVD9Zf1JKwnfv7h3UZLMzE7eC6rJnLNi+AgHEYvqBLLKMJ39HNj+xEOogpQmBIn5jKv7U05pk4tsQwbxv4HtoQNMEl+PdQuVdDGLD9ipU3jgAw5sHFFZ+hLq8Uk3fzUiiR7LcW2b9aAw4KEQdSj/OhCNB4/7IcKOq8YBpP3ONWb+N6jrqSfMtnD4sa7vzSX7vI0z++zBeUd6E0hJz7atonS6oAqtyT4F48giO6hBSfkqt0KLvvC1Mcgh0LQrQG+XZnQ5KWBIuQ==""", "Died on +.nodes[0].result.origin.signature.data"
    assert result.nodes[0].result.origin.location == """Memphis, Tennessee""", "Died on +.nodes[0].result.origin.location"
    assert result.nodes[0].result.origin.contract_date == """10/1/2015""", "Died on +.nodes[0].result.origin.contract_date"
    assert result.nodes[0].result.origin.organization == """none""", "Died on +.nodes[0].result.origin.organization"
    assert result.nodes[0].result.origin.type == """appliance""", "Died on +.nodes[0].result.origin.type"
    assert result.nodes[0].node_id == 1, "Died on +.nodes[0].node_id"

def test_get_storage_container_efficiency_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetStorageContainerEfficiency_v9_0)

    
    storage_container_id = UUID("2b0653fb-3d64-4ae0-9ef8-356e685b0b2e") # storage_container_id
    result = ef.get_storage_container_efficiency(storage_container_id,)
    assert result.timestamp == """2016-10-14T22:41:24Z""", "Died on +.timestamp"
    assert result.thin_provisioning == 1, "Died on +.thin_provisioning"
    assert result.compression == 1, "Died on +.compression"
    assert result.deduplication == 1, "Died on +.deduplication"

def test_get_virtual_volume_count_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetVirtualVolumeCount_v9_0)

    
    result = ef.get_virtual_volume_count()
    assert result.count == 0, "Died on +.count"

def test_get_volume_count_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetVolumeCount_v9_0)

    
    result = ef.get_volume_count()
    assert result.count == 736, "Died on +.count"

def test_list_all_nodes_v8_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListAllNodes_v8_0)

    
    result = ef.list_all_nodes()
    assert result.nodes[0].sip == """10.117.62.22""", "Died on +.nodes[0].sip"
    assert result.nodes[0].uuid == UUID("4C4C4544-0032-3810-8036-B3C04F585631"), "Died on .nodes[0].uuid"
    assert result.nodes[0].name == """node4""", "Died on +.nodes[0].name"
    assert result.nodes[0].platform_info.node_type == """SF3010""", "Died on +.nodes[0].platform_info.node_type"
    assert result.nodes[0].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[0].platform_info.cpu_model"
    assert result.nodes[0].platform_info.node_memory_gb == 72, "Died on +.nodes[0].platform_info.node_memory_gb"
    assert result.nodes[0].platform_info.chassis_type == """R620""", "Died on +.nodes[0].platform_info.chassis_type"
    assert result.nodes[0].virtual_networks[0].virtual_network_id == 16, "Died on +.nodes[0].virtual_networks[0].virtual_network_id"
    assert result.nodes[0].virtual_networks[0].address == """10.117.41.130""", "Died on +.nodes[0].virtual_networks[0].address"
    assert result.nodes[0].node_id == 1, "Died on +.nodes[0].node_id"
    assert result.nodes[0].mipi == """Bond1G""", "Died on +.nodes[0].mipi"
    assert result.nodes[0].sipi == """Bond10G""", "Died on +.nodes[0].sipi"
    assert result.nodes[0].software_version == """8.7.0.15""", "Died on +.nodes[0].software_version"
    assert result.nodes[0].cip == """10.117.62.22""", "Died on +.nodes[0].cip"
    assert result.nodes[0].fibre_channel_target_port_group is None, "Died on .nodes[0].fibre_channel_target_port_group"
    assert result.nodes[0].mip == """10.117.60.22""", "Died on +.nodes[0].mip"
    assert result.nodes[0].associated_fservice_id == 0, "Died on +.nodes[0].associated_fservice_id"
    assert result.nodes[0].associated_master_service_id == 1, "Died on +.nodes[0].associated_master_service_id"
    assert result.nodes[0].cipi == """Bond10G""", "Died on +.nodes[0].cipi"
    assert type(result.nodes[0].attributes) is dict, "Died on .nodes[0].attributes"

def test_list_async_results_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListAsyncResults_v9_0)

    
    async_result_types = "" # async_result_types
    result = ef.list_async_results()
    assert result.async_handles[0].async_result_id == 1, "Died on +.async_handles[0].async_result_id"
    assert result.async_handles[0].success == True, "Died on +.async_handles[0].success"
    assert result.async_handles[0].completed == True, "Died on +.async_handles[0].completed"
    assert result.async_handles[0].last_update_time == """2016-10-27T16:09:49Z""", "Died on +.async_handles[0].last_update_time"
    assert result.async_handles[0].result_type == """DriveAdd""", "Died on +.async_handles[0].result_type"
    assert type(result.async_handles[0].data) is dict, "Died on .async_handles[0].data"
    assert result.async_handles[0].create_time == """2016-10-27T16:09:29Z""", "Died on +.async_handles[0].create_time"

def test_list_drive_stats_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListDriveStats_v9_0)

    
    drives = 42 # drives
    result = ef.list_drive_stats()
    assert result.drive_stats[0].reserve_capacity_percent == 100, "Died on +.drive_stats[0].reserve_capacity_percent"
    assert result.drive_stats[0].write_ops == 608802, "Died on +.drive_stats[0].write_ops"
    assert result.drive_stats[0].write_bytes == 2462169894, "Died on +.drive_stats[0].write_bytes"
    assert result.drive_stats[0].power_on_hours == 17736, "Died on +.drive_stats[0].power_on_hours"
    assert result.drive_stats[0].failed_die_count == 0, "Died on +.drive_stats[0].failed_die_count"
    assert result.drive_stats[0].read_ops == 3624, "Died on +.drive_stats[0].read_ops"
    assert result.drive_stats[0].timestamp == """2016-03-01T00:19:24.782735Z""", "Died on +.drive_stats[0].timestamp"
    assert result.drive_stats[0].lifetime_read_bytes == 30171004403712, "Died on +.drive_stats[0].lifetime_read_bytes"
    assert result.drive_stats[0].lifetime_write_bytes == 103464755527680, "Died on +.drive_stats[0].lifetime_write_bytes"
    assert result.drive_stats[0].drive_id == 22, "Died on +.drive_stats[0].drive_id"
    assert result.drive_stats[0].used_memory == 879165440, "Died on +.drive_stats[0].used_memory"
    assert result.drive_stats[0].read_bytes == 14656542, "Died on +.drive_stats[0].read_bytes"
    assert result.drive_stats[0].life_remaining_percent == 84, "Died on +.drive_stats[0].life_remaining_percent"
    assert result.drive_stats[0].reallocated_sectors == 0, "Died on +.drive_stats[0].reallocated_sectors"
    assert result.drive_stats[0].used_capacity == 1783735635, "Died on +.drive_stats[0].used_capacity"
    assert result.drive_stats[0].total_capacity == 300069052416, "Died on +.drive_stats[0].total_capacity"
    assert type(result.errors[0]) is dict, "Died on .errors[0]"

def test_list_fibre_channel_sessions_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListFibreChannelSessions_v9_0)

    
    result = ef.list_fibre_channel_sessions()
    assert result.sessions[1].target_wwpn == """5f:47:ac:c0:00:00:00:11""", "Died on +.sessions[1].target_wwpn"
    assert result.sessions[1].service_id == 22, "Died on +.sessions[1].service_id"
    assert result.sessions[1].volume_access_group_id == 7, "Died on +.sessions[1].volume_access_group_id"
    assert result.sessions[1].initiator_wwpn == """21:00:00:0e:1e:14:af:40""", "Died on +.sessions[1].initiator_wwpn"
    assert result.sessions[1].node_id == 1, "Died on +.sessions[1].node_id"
    assert result.sessions[0].target_wwpn == """5f:47:ac:c0:00:00:00:10""", "Died on +.sessions[0].target_wwpn"
    assert result.sessions[0].service_id == 21, "Died on +.sessions[0].service_id"
    assert result.sessions[0].volume_access_group_id == 7, "Died on +.sessions[0].volume_access_group_id"
    assert result.sessions[0].initiator_wwpn == """21:00:00:0e:1e:14:af:40""", "Died on +.sessions[0].initiator_wwpn"
    assert result.sessions[0].node_id == 5, "Died on +.sessions[0].node_id"

def test_list_iscsisessions_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListISCSISessions_v9_0)

    
    result = ef.list_iscsisessions()
    assert result.sessions[1].initiator_name == """iqn.2010-01.net.solidfire.eng:zdc-3""", "Died on +.sessions[1].initiator_name"
    assert result.sessions[1].volume_instance == 139922531221504, "Died on +.sessions[1].volume_instance"
    assert type(result.sessions[1].initiator.attributes) is dict, "Died on .sessions[1].initiator.attributes"
    assert result.sessions[1].initiator.initiator_name == """iqn.2010-01.net.solidfire.eng:zdc-3""", "Died on +.sessions[1].initiator.initiator_name"
    assert result.sessions[1].initiator.volume_access_groups[0] == 1, "Died on +.sessions[1].initiator.volume_access_groups[0]"
    assert result.sessions[1].initiator.initiator_id == 2, "Died on +.sessions[1].initiator.initiator_id"
    assert result.sessions[1].initiator_ip == """10.30.76.3:33995""", "Died on +.sessions[1].initiator_ip"
    assert result.sessions[1].node_id == 1, "Died on +.sessions[1].node_id"
    assert result.sessions[1].initiator_session_id == 9613869056, "Died on +.sessions[1].initiator_session_id"
    assert result.sessions[1].initiator_port_name == """iqn.2010-01.net.solidfire.eng:zdc-3,i,0x23d080000""", "Died on +.sessions[1].initiator_port_name"
    assert result.sessions[1].account_name == """myaccount""", "Died on +.sessions[1].account_name"
    assert result.sessions[1].drive_id == 1, "Died on +.sessions[1].drive_id"
    assert result.sessions[1].session_id == 17179882018, "Died on +.sessions[1].session_id"
    assert result.sessions[1].service_id == 4, "Died on +.sessions[1].service_id"
    assert result.sessions[1].target_port_name == """iqn.2010-01.com.solidfire:dvmj.trruw982e4vr2cgf.9,t,0x1""", "Died on +.sessions[1].target_port_name"
    assert result.sessions[1].target_ip == """10.30.65.134:3260""", "Died on +.sessions[1].target_ip"
    assert result.sessions[1].virtual_network_id == 0, "Died on +.sessions[1].virtual_network_id"
    assert result.sessions[1].target_name == """iqn.2010-01.com.solidfire:dvmj.trruw982e4vr2cgf.9""", "Died on +.sessions[1].target_name"
    assert result.sessions[1].create_time == """2016-08-12T16:40:04.827831Z""", "Died on +.sessions[1].create_time"
    assert result.sessions[1].volume_id == 9, "Died on +.sessions[1].volume_id"
    assert result.sessions[1].account_id == 1, "Died on +.sessions[1].account_id"
    assert result.sessions[0].initiator_name == """iqn.2010-01.net.solidfire.eng:zdc-3""", "Died on +.sessions[0].initiator_name"
    assert result.sessions[0].volume_instance == 139922648856576, "Died on +.sessions[0].volume_instance"
    assert type(result.sessions[0].initiator.attributes) is dict, "Died on .sessions[0].initiator.attributes"
    assert result.sessions[0].initiator.initiator_name == """iqn.2010-01.net.solidfire.eng:zdc-3""", "Died on +.sessions[0].initiator.initiator_name"
    assert result.sessions[0].initiator.volume_access_groups[0] == 1, "Died on +.sessions[0].initiator.volume_access_groups[0]"
    assert result.sessions[0].initiator.initiator_id == 2, "Died on +.sessions[0].initiator.initiator_id"
    assert result.sessions[0].initiator_ip == """10.30.76.3:33994""", "Died on +.sessions[0].initiator_ip"
    assert result.sessions[0].node_id == 1, "Died on +.sessions[0].node_id"
    assert result.sessions[0].initiator_session_id == 9613803520, "Died on +.sessions[0].initiator_session_id"
    assert result.sessions[0].initiator_port_name == """iqn.2010-01.net.solidfire.eng:zdc-3,i,0x23d070000""", "Died on +.sessions[0].initiator_port_name"
    assert result.sessions[0].account_name == """myaccount""", "Died on +.sessions[0].account_name"
    assert result.sessions[0].drive_id == 1, "Died on +.sessions[0].drive_id"
    assert result.sessions[0].session_id == 17179882017, "Died on +.sessions[0].session_id"
    assert result.sessions[0].service_id == 4, "Died on +.sessions[0].service_id"
    assert result.sessions[0].target_port_name == """iqn.2010-01.com.solidfire:dvmj.aawuanfmxukfnffl.3,t,0x1""", "Died on +.sessions[0].target_port_name"
    assert result.sessions[0].target_ip == """10.30.65.134:3260""", "Died on +.sessions[0].target_ip"
    assert result.sessions[0].virtual_network_id == 0, "Died on +.sessions[0].virtual_network_id"
    assert result.sessions[0].target_name == """iqn.2010-01.com.solidfire:dvmj.aawuanfmxukfnffl.3""", "Died on +.sessions[0].target_name"
    assert result.sessions[0].create_time == """2016-08-12T16:40:04.827786Z""", "Died on +.sessions[0].create_time"
    assert result.sessions[0].volume_id == 3, "Died on +.sessions[0].volume_id"
    assert result.sessions[0].account_id == 1, "Died on +.sessions[0].account_id"

def test_list_pending_active_nodes_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListPendingActiveNodes_v9_0)

    
    result = ef.list_pending_active_nodes()
    assert result.pending_active_nodes[0].active_node_key == """5rPHP3lTAO""", "Died on +.pending_active_nodes[0].active_node_key"
    assert result.pending_active_nodes[0].sip == """10.10.5.106""", "Died on +.pending_active_nodes[0].sip"
    assert result.pending_active_nodes[0].software_version == """9.0.0.1077""", "Died on +.pending_active_nodes[0].software_version"
    assert result.pending_active_nodes[0].cip == """10.10.5.106""", "Died on +.pending_active_nodes[0].cip"
    assert result.pending_active_nodes[0].async_handle == 2, "Died on +.pending_active_nodes[0].async_handle"
    assert result.pending_active_nodes[0].mip == """192.168.133.106""", "Died on +.pending_active_nodes[0].mip"
    assert result.pending_active_nodes[0].platform_info.node_type == """SF3010""", "Died on +.pending_active_nodes[0].platform_info.node_type"
    assert result.pending_active_nodes[0].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.pending_active_nodes[0].platform_info.cpu_model"
    assert result.pending_active_nodes[0].platform_info.node_memory_gb == 72, "Died on +.pending_active_nodes[0].platform_info.node_memory_gb"
    assert result.pending_active_nodes[0].platform_info.chassis_type == """R620""", "Died on +.pending_active_nodes[0].platform_info.chassis_type"
    assert result.pending_active_nodes[0].assigned_node_id == 5, "Died on +.pending_active_nodes[0].assigned_node_id"
    assert result.pending_active_nodes[0].pending_node_id == 1, "Died on +.pending_active_nodes[0].pending_node_id"

def test_list_protocol_endpoints_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListProtocolEndpoints_v9_0)

    
    protocol_endpoint_ids = UUID("2b0653fb-3d64-4ae0-9ef8-356e685b0b2e") # protocol_endpoint_ids
    result = ef.list_protocol_endpoints()
    assert result.protocol_endpoints[3].primary_provider_id == 3, "Died on +.protocol_endpoints[3].primary_provider_id"
    assert result.protocol_endpoints[3].protocol_endpoint_state == """Active""", "Died on +.protocol_endpoints[3].protocol_endpoint_state"
    assert result.protocol_endpoints[3].provider_type == """Primary""", "Died on +.protocol_endpoints[3].provider_type"
    assert result.protocol_endpoints[3].protocol_endpoint_id == UUID("f3e7911d-0e86-4776-97db-7468c272213f"), "Died on .protocol_endpoints[3].protocol_endpoint_id"
    assert result.protocol_endpoints[3].secondary_provider_id == 4, "Died on +.protocol_endpoints[3].secondary_provider_id"
    assert result.protocol_endpoints[3].scsi_naadevice_id == """6f47acc2000000036970687200000000""", "Died on +.protocol_endpoints[3].scsi_naadevice_id"
    assert result.protocol_endpoints[2].primary_provider_id == 4, "Died on +.protocol_endpoints[2].primary_provider_id"
    assert result.protocol_endpoints[2].protocol_endpoint_state == """Active""", "Died on +.protocol_endpoints[2].protocol_endpoint_state"
    assert result.protocol_endpoints[2].provider_type == """Primary""", "Died on +.protocol_endpoints[2].provider_type"
    assert result.protocol_endpoints[2].protocol_endpoint_id == UUID("c6458dfe-9803-4350-bb4e-68a3feb7e830"), "Died on .protocol_endpoints[2].protocol_endpoint_id"
    assert result.protocol_endpoints[2].secondary_provider_id == 1, "Died on +.protocol_endpoints[2].secondary_provider_id"
    assert result.protocol_endpoints[2].scsi_naadevice_id == """6f47acc2000000046970687200000000""", "Died on +.protocol_endpoints[2].scsi_naadevice_id"
    assert result.protocol_endpoints[1].primary_provider_id == 2, "Died on +.protocol_endpoints[1].primary_provider_id"
    assert result.protocol_endpoints[1].protocol_endpoint_state == """Active""", "Died on +.protocol_endpoints[1].protocol_endpoint_state"
    assert result.protocol_endpoints[1].provider_type == """Primary""", "Died on +.protocol_endpoints[1].provider_type"
    assert result.protocol_endpoints[1].protocol_endpoint_id == UUID("1f16ed86-3f31-4c76-b004-a1251187700b"), "Died on .protocol_endpoints[1].protocol_endpoint_id"
    assert result.protocol_endpoints[1].secondary_provider_id == 3, "Died on +.protocol_endpoints[1].secondary_provider_id"
    assert result.protocol_endpoints[1].scsi_naadevice_id == """6f47acc2000000026970687200000000""", "Died on +.protocol_endpoints[1].scsi_naadevice_id"
    assert result.protocol_endpoints[0].primary_provider_id == 1, "Died on +.protocol_endpoints[0].primary_provider_id"
    assert result.protocol_endpoints[0].protocol_endpoint_state == """Active""", "Died on +.protocol_endpoints[0].protocol_endpoint_state"
    assert result.protocol_endpoints[0].provider_type == """Primary""", "Died on +.protocol_endpoints[0].provider_type"
    assert result.protocol_endpoints[0].protocol_endpoint_id == UUID("1387e257-d2e3-4446-be6d-39db71583e7b"), "Died on .protocol_endpoints[0].protocol_endpoint_id"
    assert result.protocol_endpoints[0].secondary_provider_id == 2, "Died on +.protocol_endpoints[0].secondary_provider_id"
    assert result.protocol_endpoints[0].scsi_naadevice_id == """6f47acc2000000016970687200000000""", "Died on +.protocol_endpoints[0].scsi_naadevice_id"

def test_list_services_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListServices_v9_0)

    
    result = ef.list_services()
    assert result.services[33].node.sip == """10.117.62.25""", "Died on +.services[33].node.sip"
    assert result.services[33].node.uuid == UUID("4C4C4544-0053-3310-8053-B6C04F435831"), "Died on .services[33].node.uuid"
    assert result.services[33].node.name == """SF-F2A3""", "Died on +.services[33].node.name"
    assert result.services[33].node.platform_info.node_type == """SF3010""", "Died on +.services[33].node.platform_info.node_type"
    assert result.services[33].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[33].node.platform_info.cpu_model"
    assert result.services[33].node.platform_info.node_memory_gb == 72, "Died on +.services[33].node.platform_info.node_memory_gb"
    assert result.services[33].node.platform_info.chassis_type == """R620""", "Died on +.services[33].node.platform_info.chassis_type"
    assert result.services[33].node.node_id == 3, "Died on +.services[33].node.node_id"
    assert result.services[33].node.mipi == """Bond1G""", "Died on +.services[33].node.mipi"
    assert result.services[33].node.sipi == """Bond10G""", "Died on +.services[33].node.sipi"
    assert result.services[33].node.software_version == """9.0.0.1554""", "Died on +.services[33].node.software_version"
    assert result.services[33].node.cip == """10.117.62.25""", "Died on +.services[33].node.cip"
    assert result.services[33].node.fibre_channel_target_port_group is None, "Died on .services[33].node.fibre_channel_target_port_group"
    assert result.services[33].node.mip == """10.117.60.25""", "Died on +.services[33].node.mip"
    assert result.services[33].node.associated_fservice_id == 0, "Died on +.services[33].node.associated_fservice_id"
    assert result.services[33].node.associated_master_service_id == 4, "Died on +.services[33].node.associated_master_service_id"
    assert result.services[33].node.cipi == """Bond10G""", "Died on +.services[33].node.cipi"
    assert type(result.services[33].node.attributes) is dict, "Died on .services[33].node.attributes"
    assert result.services[33].drives[0].slot == 3, "Died on +.services[33].drives[0].slot"
    assert result.services[33].drives[0].capacity == 300069052416, "Died on +.services[33].drives[0].capacity"
    assert result.services[33].drives[0].drive_status == """assigned""", "Died on +.services[33].drives[0].drive_status"
    assert result.services[33].drives[0].node_id == 3, "Died on +.services[33].drives[0].node_id"
    assert result.services[33].drives[0].drive_id == 16, "Died on +.services[33].drives[0].drive_id"
    assert result.services[33].drives[0].customer_slice_file_capacity == 0, "Died on +.services[33].drives[0].customer_slice_file_capacity"
    assert result.services[33].drives[0].assigned_service == 21, "Died on +.services[33].drives[0].assigned_service"
    assert type(result.services[33].drives[0].attributes) is dict, "Died on .services[33].drives[0].attributes"
    assert result.services[33].drives[0].drive_type == """Block""", "Died on +.services[33].drives[0].drive_type"
    assert result.services[33].drives[0].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL311604K4300PGN""", "Died on +.services[33].drives[0].serial"
    assert result.services[33].drives[0].reserved_slice_file_capacity == 0, "Died on +.services[33].drives[0].reserved_slice_file_capacity"
    assert result.services[33].service.status == """healthy""", "Died on +.services[33].service.status"
    assert result.services[33].service.associated_bv == 0, "Died on +.services[33].service.associated_bv"
    assert result.services[33].service.associated_vs == 0, "Died on +.services[33].service.associated_vs"
    assert result.services[33].service.ipc_port == 4008, "Died on +.services[33].service.ipc_port"
    assert result.services[33].service.node_id == 3, "Died on +.services[33].service.node_id"
    assert result.services[33].service.service_type == """block""", "Died on +.services[33].service.service_type"
    assert result.services[33].service.drive_id == 16, "Died on +.services[33].service.drive_id"
    assert result.services[33].service.service_id == 21, "Died on +.services[33].service.service_id"
    assert result.services[33].service.iscsi_port == 0, "Died on +.services[33].service.iscsi_port"
    assert result.services[33].service.started_drive_ids[0] == 16, "Died on +.services[33].service.started_drive_ids[0]"
    assert result.services[33].service.first_time_startup == False, "Died on +.services[33].service.first_time_startup"
    assert result.services[33].service.drive_ids[0] == 16, "Died on +.services[33].service.drive_ids[0]"
    assert result.services[33].service.associated_ts == 0, "Died on +.services[33].service.associated_ts"
    assert result.services[33].drive.slot == 3, "Died on +.services[33].drive.slot"
    assert result.services[33].drive.capacity == 300069052416, "Died on +.services[33].drive.capacity"
    assert result.services[33].drive.drive_status == """assigned""", "Died on +.services[33].drive.drive_status"
    assert result.services[33].drive.node_id == 3, "Died on +.services[33].drive.node_id"
    assert result.services[33].drive.drive_id == 16, "Died on +.services[33].drive.drive_id"
    assert result.services[33].drive.customer_slice_file_capacity == 0, "Died on +.services[33].drive.customer_slice_file_capacity"
    assert result.services[33].drive.assigned_service == 21, "Died on +.services[33].drive.assigned_service"
    assert type(result.services[33].drive.attributes) is dict, "Died on .services[33].drive.attributes"
    assert result.services[33].drive.drive_type == """block""", "Died on +.services[33].drive.drive_type"
    assert result.services[33].drive.serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL311604K4300PGN""", "Died on +.services[33].drive.serial"
    assert result.services[33].drive.reserved_slice_file_capacity == 0, "Died on +.services[33].drive.reserved_slice_file_capacity"
    assert result.services[32].node.sip == """10.117.62.26""", "Died on +.services[32].node.sip"
    assert result.services[32].node.uuid == UUID("4C4C4544-0053-3210-8054-B6C04F435831"), "Died on .services[32].node.uuid"
    assert result.services[32].node.name == """SF-1713""", "Died on +.services[32].node.name"
    assert result.services[32].node.platform_info.node_type == """SF3010""", "Died on +.services[32].node.platform_info.node_type"
    assert result.services[32].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[32].node.platform_info.cpu_model"
    assert result.services[32].node.platform_info.node_memory_gb == 72, "Died on +.services[32].node.platform_info.node_memory_gb"
    assert result.services[32].node.platform_info.chassis_type == """R620""", "Died on +.services[32].node.platform_info.chassis_type"
    assert result.services[32].node.node_id == 4, "Died on +.services[32].node.node_id"
    assert result.services[32].node.mipi == """Bond1G""", "Died on +.services[32].node.mipi"
    assert result.services[32].node.sipi == """Bond10G""", "Died on +.services[32].node.sipi"
    assert result.services[32].node.software_version == """9.0.0.1554""", "Died on +.services[32].node.software_version"
    assert result.services[32].node.cip == """10.117.62.26""", "Died on +.services[32].node.cip"
    assert result.services[32].node.fibre_channel_target_port_group is None, "Died on .services[32].node.fibre_channel_target_port_group"
    assert result.services[32].node.mip == """10.117.60.26""", "Died on +.services[32].node.mip"
    assert result.services[32].node.associated_fservice_id == 0, "Died on +.services[32].node.associated_fservice_id"
    assert result.services[32].node.associated_master_service_id == 3, "Died on +.services[32].node.associated_master_service_id"
    assert result.services[32].node.cipi == """Bond10G""", "Died on +.services[32].node.cipi"
    assert type(result.services[32].node.attributes) is dict, "Died on .services[32].node.attributes"
    assert result.services[32].drives[0].slot == 2, "Died on +.services[32].drives[0].slot"
    assert result.services[32].drives[0].capacity == 300069052416, "Died on +.services[32].drives[0].capacity"
    assert result.services[32].drives[0].drive_status == """assigned""", "Died on +.services[32].drives[0].drive_status"
    assert result.services[32].drives[0].node_id == 4, "Died on +.services[32].drives[0].node_id"
    assert result.services[32].drives[0].drive_id == 4, "Died on +.services[32].drives[0].drive_id"
    assert result.services[32].drives[0].customer_slice_file_capacity == 0, "Died on +.services[32].drives[0].customer_slice_file_capacity"
    assert result.services[32].drives[0].assigned_service == 20, "Died on +.services[32].drives[0].assigned_service"
    assert type(result.services[32].drives[0].attributes) is dict, "Died on .services[32].drives[0].attributes"
    assert result.services[32].drives[0].drive_type == """Block""", "Died on +.services[32].drives[0].drive_type"
    assert result.services[32].drives[0].serial == """scsi-SATA_INTEL_SSDSA2BW3CVPR120504U8300EGN""", "Died on +.services[32].drives[0].serial"
    assert result.services[32].drives[0].reserved_slice_file_capacity == 0, "Died on +.services[32].drives[0].reserved_slice_file_capacity"
    assert result.services[32].service.status == """healthy""", "Died on +.services[32].service.status"
    assert result.services[32].service.associated_bv == 0, "Died on +.services[32].service.associated_bv"
    assert result.services[32].service.associated_vs == 0, "Died on +.services[32].service.associated_vs"
    assert result.services[32].service.ipc_port == 4007, "Died on +.services[32].service.ipc_port"
    assert result.services[32].service.node_id == 4, "Died on +.services[32].service.node_id"
    assert result.services[32].service.service_type == """block""", "Died on +.services[32].service.service_type"
    assert result.services[32].service.drive_id == 4, "Died on +.services[32].service.drive_id"
    assert result.services[32].service.service_id == 20, "Died on +.services[32].service.service_id"
    assert result.services[32].service.iscsi_port == 0, "Died on +.services[32].service.iscsi_port"
    assert result.services[32].service.started_drive_ids[0] == 4, "Died on +.services[32].service.started_drive_ids[0]"
    assert result.services[32].service.first_time_startup == False, "Died on +.services[32].service.first_time_startup"
    assert result.services[32].service.drive_ids[0] == 4, "Died on +.services[32].service.drive_ids[0]"
    assert result.services[32].service.associated_ts == 0, "Died on +.services[32].service.associated_ts"
    assert result.services[32].drive.slot == 2, "Died on +.services[32].drive.slot"
    assert result.services[32].drive.capacity == 300069052416, "Died on +.services[32].drive.capacity"
    assert result.services[32].drive.drive_status == """assigned""", "Died on +.services[32].drive.drive_status"
    assert result.services[32].drive.node_id == 4, "Died on +.services[32].drive.node_id"
    assert result.services[32].drive.drive_id == 4, "Died on +.services[32].drive.drive_id"
    assert result.services[32].drive.customer_slice_file_capacity == 0, "Died on +.services[32].drive.customer_slice_file_capacity"
    assert result.services[32].drive.assigned_service == 20, "Died on +.services[32].drive.assigned_service"
    assert type(result.services[32].drive.attributes) is dict, "Died on .services[32].drive.attributes"
    assert result.services[32].drive.drive_type == """block""", "Died on +.services[32].drive.drive_type"
    assert result.services[32].drive.serial == """scsi-SATA_INTEL_SSDSA2BW3CVPR120504U8300EGN""", "Died on +.services[32].drive.serial"
    assert result.services[32].drive.reserved_slice_file_capacity == 0, "Died on +.services[32].drive.reserved_slice_file_capacity"
    assert result.services[31].node.sip == """10.117.62.26""", "Died on +.services[31].node.sip"
    assert result.services[31].node.uuid == UUID("4C4C4544-0053-3210-8054-B6C04F435831"), "Died on .services[31].node.uuid"
    assert result.services[31].node.name == """SF-1713""", "Died on +.services[31].node.name"
    assert result.services[31].node.platform_info.node_type == """SF3010""", "Died on +.services[31].node.platform_info.node_type"
    assert result.services[31].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[31].node.platform_info.cpu_model"
    assert result.services[31].node.platform_info.node_memory_gb == 72, "Died on +.services[31].node.platform_info.node_memory_gb"
    assert result.services[31].node.platform_info.chassis_type == """R620""", "Died on +.services[31].node.platform_info.chassis_type"
    assert result.services[31].node.node_id == 4, "Died on +.services[31].node.node_id"
    assert result.services[31].node.mipi == """Bond1G""", "Died on +.services[31].node.mipi"
    assert result.services[31].node.sipi == """Bond10G""", "Died on +.services[31].node.sipi"
    assert result.services[31].node.software_version == """9.0.0.1554""", "Died on +.services[31].node.software_version"
    assert result.services[31].node.cip == """10.117.62.26""", "Died on +.services[31].node.cip"
    assert result.services[31].node.fibre_channel_target_port_group is None, "Died on .services[31].node.fibre_channel_target_port_group"
    assert result.services[31].node.mip == """10.117.60.26""", "Died on +.services[31].node.mip"
    assert result.services[31].node.associated_fservice_id == 0, "Died on +.services[31].node.associated_fservice_id"
    assert result.services[31].node.associated_master_service_id == 3, "Died on +.services[31].node.associated_master_service_id"
    assert result.services[31].node.cipi == """Bond10G""", "Died on +.services[31].node.cipi"
    assert type(result.services[31].node.attributes) is dict, "Died on .services[31].node.attributes"
    assert result.services[31].service.status == """healthy""", "Died on +.services[31].service.status"
    assert result.services[31].service.associated_bv == 0, "Died on +.services[31].service.associated_bv"
    assert result.services[31].service.associated_vs == 0, "Died on +.services[31].service.associated_vs"
    assert result.services[31].service.ipc_port == 4004, "Died on +.services[31].service.ipc_port"
    assert result.services[31].service.node_id == 4, "Died on +.services[31].service.node_id"
    assert result.services[31].service.service_type == """transport""", "Died on +.services[31].service.service_type"
    assert result.services[31].service.drive_id == 0, "Died on +.services[31].service.drive_id"
    assert result.services[31].service.service_id == 9, "Died on +.services[31].service.service_id"
    assert result.services[31].service.iscsi_port == 3260, "Died on +.services[31].service.iscsi_port"
    assert result.services[31].service.first_time_startup == True, "Died on +.services[31].service.first_time_startup"
    assert result.services[31].service.associated_ts == 0, "Died on +.services[31].service.associated_ts"
    assert result.services[30].node.sip == """10.117.62.26""", "Died on +.services[30].node.sip"
    assert result.services[30].node.uuid == UUID("4C4C4544-0053-3210-8054-B6C04F435831"), "Died on .services[30].node.uuid"
    assert result.services[30].node.name == """SF-1713""", "Died on +.services[30].node.name"
    assert result.services[30].node.platform_info.node_type == """SF3010""", "Died on +.services[30].node.platform_info.node_type"
    assert result.services[30].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[30].node.platform_info.cpu_model"
    assert result.services[30].node.platform_info.node_memory_gb == 72, "Died on +.services[30].node.platform_info.node_memory_gb"
    assert result.services[30].node.platform_info.chassis_type == """R620""", "Died on +.services[30].node.platform_info.chassis_type"
    assert result.services[30].node.node_id == 4, "Died on +.services[30].node.node_id"
    assert result.services[30].node.mipi == """Bond1G""", "Died on +.services[30].node.mipi"
    assert result.services[30].node.sipi == """Bond10G""", "Died on +.services[30].node.sipi"
    assert result.services[30].node.software_version == """9.0.0.1554""", "Died on +.services[30].node.software_version"
    assert result.services[30].node.cip == """10.117.62.26""", "Died on +.services[30].node.cip"
    assert result.services[30].node.fibre_channel_target_port_group is None, "Died on .services[30].node.fibre_channel_target_port_group"
    assert result.services[30].node.mip == """10.117.60.26""", "Died on +.services[30].node.mip"
    assert result.services[30].node.associated_fservice_id == 0, "Died on +.services[30].node.associated_fservice_id"
    assert result.services[30].node.associated_master_service_id == 3, "Died on +.services[30].node.associated_master_service_id"
    assert result.services[30].node.cipi == """Bond10G""", "Died on +.services[30].node.cipi"
    assert type(result.services[30].node.attributes) is dict, "Died on .services[30].node.attributes"
    assert result.services[30].service.status == """healthy""", "Died on +.services[30].service.status"
    assert result.services[30].service.associated_bv == 0, "Died on +.services[30].service.associated_bv"
    assert result.services[30].service.associated_vs == 0, "Died on +.services[30].service.associated_vs"
    assert result.services[30].service.ipc_port == 4003, "Died on +.services[30].service.ipc_port"
    assert result.services[30].service.node_id == 4, "Died on +.services[30].service.node_id"
    assert result.services[30].service.service_type == """volume""", "Died on +.services[30].service.service_type"
    assert result.services[30].service.drive_id == 0, "Died on +.services[30].service.drive_id"
    assert result.services[30].service.service_id == 8, "Died on +.services[30].service.service_id"
    assert result.services[30].service.iscsi_port == 0, "Died on +.services[30].service.iscsi_port"
    assert result.services[30].service.first_time_startup == True, "Died on +.services[30].service.first_time_startup"
    assert result.services[30].service.associated_ts == 0, "Died on +.services[30].service.associated_ts"
    assert result.services[29].node.sip == """10.117.62.26""", "Died on +.services[29].node.sip"
    assert result.services[29].node.uuid == UUID("4C4C4544-0053-3210-8054-B6C04F435831"), "Died on .services[29].node.uuid"
    assert result.services[29].node.name == """SF-1713""", "Died on +.services[29].node.name"
    assert result.services[29].node.platform_info.node_type == """SF3010""", "Died on +.services[29].node.platform_info.node_type"
    assert result.services[29].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[29].node.platform_info.cpu_model"
    assert result.services[29].node.platform_info.node_memory_gb == 72, "Died on +.services[29].node.platform_info.node_memory_gb"
    assert result.services[29].node.platform_info.chassis_type == """R620""", "Died on +.services[29].node.platform_info.chassis_type"
    assert result.services[29].node.node_id == 4, "Died on +.services[29].node.node_id"
    assert result.services[29].node.mipi == """Bond1G""", "Died on +.services[29].node.mipi"
    assert result.services[29].node.sipi == """Bond10G""", "Died on +.services[29].node.sipi"
    assert result.services[29].node.software_version == """9.0.0.1554""", "Died on +.services[29].node.software_version"
    assert result.services[29].node.cip == """10.117.62.26""", "Died on +.services[29].node.cip"
    assert result.services[29].node.fibre_channel_target_port_group is None, "Died on .services[29].node.fibre_channel_target_port_group"
    assert result.services[29].node.mip == """10.117.60.26""", "Died on +.services[29].node.mip"
    assert result.services[29].node.associated_fservice_id == 0, "Died on +.services[29].node.associated_fservice_id"
    assert result.services[29].node.associated_master_service_id == 3, "Died on +.services[29].node.associated_master_service_id"
    assert result.services[29].node.cipi == """Bond10G""", "Died on +.services[29].node.cipi"
    assert type(result.services[29].node.attributes) is dict, "Died on .services[29].node.attributes"
    assert result.services[29].service.status == """healthy""", "Died on +.services[29].service.status"
    assert result.services[29].service.associated_bv == 0, "Died on +.services[29].service.associated_bv"
    assert result.services[29].service.associated_vs == 0, "Died on +.services[29].service.associated_vs"
    assert result.services[29].service.ipc_port == 4001, "Died on +.services[29].service.ipc_port"
    assert result.services[29].service.node_id == 4, "Died on +.services[29].service.node_id"
    assert result.services[29].service.service_type == """bulkvolume""", "Died on +.services[29].service.service_type"
    assert result.services[29].service.drive_id == 0, "Died on +.services[29].service.drive_id"
    assert result.services[29].service.service_id == 7, "Died on +.services[29].service.service_id"
    assert result.services[29].service.iscsi_port == 0, "Died on +.services[29].service.iscsi_port"
    assert result.services[29].service.first_time_startup == True, "Died on +.services[29].service.first_time_startup"
    assert result.services[29].service.associated_ts == 0, "Died on +.services[29].service.associated_ts"
    assert result.services[28].node.sip == """10.117.62.24""", "Died on +.services[28].node.sip"
    assert result.services[28].node.uuid == UUID("4C4C4544-0034-5910-8033-B1C04F503232"), "Died on .services[28].node.uuid"
    assert result.services[28].node.name == """SF-918D""", "Died on +.services[28].node.name"
    assert result.services[28].node.platform_info.node_type == """FC0025""", "Died on +.services[28].node.platform_info.node_type"
    assert result.services[28].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[28].node.platform_info.cpu_model"
    assert result.services[28].node.platform_info.node_memory_gb == 32, "Died on +.services[28].node.platform_info.node_memory_gb"
    assert result.services[28].node.platform_info.chassis_type == """R620""", "Died on +.services[28].node.platform_info.chassis_type"
    assert result.services[28].node.node_id == 2, "Died on +.services[28].node.node_id"
    assert result.services[28].node.mipi == """Bond1G""", "Died on +.services[28].node.mipi"
    assert result.services[28].node.sipi == """Bond10G""", "Died on +.services[28].node.sipi"
    assert result.services[28].node.software_version == """9.0.0.1554""", "Died on +.services[28].node.software_version"
    assert result.services[28].node.cip == """10.117.62.24""", "Died on +.services[28].node.cip"
    assert result.services[28].node.fibre_channel_target_port_group == 1, "Died on +.services[28].node.fibre_channel_target_port_group"
    assert result.services[28].node.mip == """10.117.60.24""", "Died on +.services[28].node.mip"
    assert result.services[28].node.associated_fservice_id == 6, "Died on +.services[28].node.associated_fservice_id"
    assert result.services[28].node.associated_master_service_id == 5, "Died on +.services[28].node.associated_master_service_id"
    assert result.services[28].node.cipi == """Bond10G""", "Died on +.services[28].node.cipi"
    assert type(result.services[28].node.attributes) is dict, "Died on .services[28].node.attributes"
    assert result.services[28].service.status == """healthy""", "Died on +.services[28].service.status"
    assert result.services[28].service.associated_bv == 0, "Died on +.services[28].service.associated_bv"
    assert result.services[28].service.associated_vs == 0, "Died on +.services[28].service.associated_vs"
    assert result.services[28].service.ipc_port == 4001, "Died on +.services[28].service.ipc_port"
    assert result.services[28].service.node_id == 2, "Died on +.services[28].service.node_id"
    assert result.services[28].service.service_type == """fibre""", "Died on +.services[28].service.service_type"
    assert result.services[28].service.drive_id == 0, "Died on +.services[28].service.drive_id"
    assert result.services[28].service.service_id == 6, "Died on +.services[28].service.service_id"
    assert result.services[28].service.iscsi_port == 0, "Died on +.services[28].service.iscsi_port"
    assert result.services[28].service.first_time_startup == True, "Died on +.services[28].service.first_time_startup"
    assert result.services[28].service.associated_ts == 0, "Died on +.services[28].service.associated_ts"
    assert result.services[27].node.sip == """10.117.62.24""", "Died on +.services[27].node.sip"
    assert result.services[27].node.uuid == UUID("4C4C4544-0034-5910-8033-B1C04F503232"), "Died on .services[27].node.uuid"
    assert result.services[27].node.name == """SF-918D""", "Died on +.services[27].node.name"
    assert result.services[27].node.platform_info.node_type == """FC0025""", "Died on +.services[27].node.platform_info.node_type"
    assert result.services[27].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[27].node.platform_info.cpu_model"
    assert result.services[27].node.platform_info.node_memory_gb == 32, "Died on +.services[27].node.platform_info.node_memory_gb"
    assert result.services[27].node.platform_info.chassis_type == """R620""", "Died on +.services[27].node.platform_info.chassis_type"
    assert result.services[27].node.node_id == 2, "Died on +.services[27].node.node_id"
    assert result.services[27].node.mipi == """Bond1G""", "Died on +.services[27].node.mipi"
    assert result.services[27].node.sipi == """Bond10G""", "Died on +.services[27].node.sipi"
    assert result.services[27].node.software_version == """9.0.0.1554""", "Died on +.services[27].node.software_version"
    assert result.services[27].node.cip == """10.117.62.24""", "Died on +.services[27].node.cip"
    assert result.services[27].node.fibre_channel_target_port_group == 1, "Died on +.services[27].node.fibre_channel_target_port_group"
    assert result.services[27].node.mip == """10.117.60.24""", "Died on +.services[27].node.mip"
    assert result.services[27].node.associated_fservice_id == 6, "Died on +.services[27].node.associated_fservice_id"
    assert result.services[27].node.associated_master_service_id == 5, "Died on +.services[27].node.associated_master_service_id"
    assert result.services[27].node.cipi == """Bond10G""", "Died on +.services[27].node.cipi"
    assert type(result.services[27].node.attributes) is dict, "Died on .services[27].node.attributes"
    assert result.services[27].service.status == """healthy""", "Died on +.services[27].service.status"
    assert result.services[27].service.associated_bv == 0, "Died on +.services[27].service.associated_bv"
    assert result.services[27].service.associated_vs == 8000, "Died on +.services[27].service.associated_vs"
    assert result.services[27].service.ipc_port == 4000, "Died on +.services[27].service.ipc_port"
    assert result.services[27].service.node_id == 2, "Died on +.services[27].service.node_id"
    assert result.services[27].service.service_type == """master""", "Died on +.services[27].service.service_type"
    assert result.services[27].service.drive_id == 0, "Died on +.services[27].service.drive_id"
    assert result.services[27].service.service_id == 5, "Died on +.services[27].service.service_id"
    assert result.services[27].service.iscsi_port == 0, "Died on +.services[27].service.iscsi_port"
    assert result.services[27].service.first_time_startup == True, "Died on +.services[27].service.first_time_startup"
    assert result.services[27].service.associated_ts == 0, "Died on +.services[27].service.associated_ts"
    assert result.services[26].node.sip == """10.117.62.25""", "Died on +.services[26].node.sip"
    assert result.services[26].node.uuid == UUID("4C4C4544-0053-3310-8053-B6C04F435831"), "Died on .services[26].node.uuid"
    assert result.services[26].node.name == """SF-F2A3""", "Died on +.services[26].node.name"
    assert result.services[26].node.platform_info.node_type == """SF3010""", "Died on +.services[26].node.platform_info.node_type"
    assert result.services[26].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[26].node.platform_info.cpu_model"
    assert result.services[26].node.platform_info.node_memory_gb == 72, "Died on +.services[26].node.platform_info.node_memory_gb"
    assert result.services[26].node.platform_info.chassis_type == """R620""", "Died on +.services[26].node.platform_info.chassis_type"
    assert result.services[26].node.node_id == 3, "Died on +.services[26].node.node_id"
    assert result.services[26].node.mipi == """Bond1G""", "Died on +.services[26].node.mipi"
    assert result.services[26].node.sipi == """Bond10G""", "Died on +.services[26].node.sipi"
    assert result.services[26].node.software_version == """9.0.0.1554""", "Died on +.services[26].node.software_version"
    assert result.services[26].node.cip == """10.117.62.25""", "Died on +.services[26].node.cip"
    assert result.services[26].node.fibre_channel_target_port_group is None, "Died on .services[26].node.fibre_channel_target_port_group"
    assert result.services[26].node.mip == """10.117.60.25""", "Died on +.services[26].node.mip"
    assert result.services[26].node.associated_fservice_id == 0, "Died on +.services[26].node.associated_fservice_id"
    assert result.services[26].node.associated_master_service_id == 4, "Died on +.services[26].node.associated_master_service_id"
    assert result.services[26].node.cipi == """Bond10G""", "Died on +.services[26].node.cipi"
    assert type(result.services[26].node.attributes) is dict, "Died on .services[26].node.attributes"
    assert result.services[26].service.status == """healthy""", "Died on +.services[26].service.status"
    assert result.services[26].service.associated_bv == 0, "Died on +.services[26].service.associated_bv"
    assert result.services[26].service.associated_vs == 8000, "Died on +.services[26].service.associated_vs"
    assert result.services[26].service.ipc_port == 4000, "Died on +.services[26].service.ipc_port"
    assert result.services[26].service.node_id == 3, "Died on +.services[26].service.node_id"
    assert result.services[26].service.service_type == """master""", "Died on +.services[26].service.service_type"
    assert result.services[26].service.drive_id == 0, "Died on +.services[26].service.drive_id"
    assert result.services[26].service.service_id == 4, "Died on +.services[26].service.service_id"
    assert result.services[26].service.iscsi_port == 0, "Died on +.services[26].service.iscsi_port"
    assert result.services[26].service.first_time_startup == True, "Died on +.services[26].service.first_time_startup"
    assert result.services[26].service.associated_ts == 0, "Died on +.services[26].service.associated_ts"
    assert result.services[25].node.sip == """10.117.62.26""", "Died on +.services[25].node.sip"
    assert result.services[25].node.uuid == UUID("4C4C4544-0053-3210-8054-B6C04F435831"), "Died on .services[25].node.uuid"
    assert result.services[25].node.name == """SF-1713""", "Died on +.services[25].node.name"
    assert result.services[25].node.platform_info.node_type == """SF3010""", "Died on +.services[25].node.platform_info.node_type"
    assert result.services[25].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[25].node.platform_info.cpu_model"
    assert result.services[25].node.platform_info.node_memory_gb == 72, "Died on +.services[25].node.platform_info.node_memory_gb"
    assert result.services[25].node.platform_info.chassis_type == """R620""", "Died on +.services[25].node.platform_info.chassis_type"
    assert result.services[25].node.node_id == 4, "Died on +.services[25].node.node_id"
    assert result.services[25].node.mipi == """Bond1G""", "Died on +.services[25].node.mipi"
    assert result.services[25].node.sipi == """Bond10G""", "Died on +.services[25].node.sipi"
    assert result.services[25].node.software_version == """9.0.0.1554""", "Died on +.services[25].node.software_version"
    assert result.services[25].node.cip == """10.117.62.26""", "Died on +.services[25].node.cip"
    assert result.services[25].node.fibre_channel_target_port_group is None, "Died on .services[25].node.fibre_channel_target_port_group"
    assert result.services[25].node.mip == """10.117.60.26""", "Died on +.services[25].node.mip"
    assert result.services[25].node.associated_fservice_id == 0, "Died on +.services[25].node.associated_fservice_id"
    assert result.services[25].node.associated_master_service_id == 3, "Died on +.services[25].node.associated_master_service_id"
    assert result.services[25].node.cipi == """Bond10G""", "Died on +.services[25].node.cipi"
    assert type(result.services[25].node.attributes) is dict, "Died on .services[25].node.attributes"
    assert result.services[25].service.status == """healthy""", "Died on +.services[25].service.status"
    assert result.services[25].service.associated_bv == 0, "Died on +.services[25].service.associated_bv"
    assert result.services[25].service.associated_vs == 8000, "Died on +.services[25].service.associated_vs"
    assert result.services[25].service.ipc_port == 4000, "Died on +.services[25].service.ipc_port"
    assert result.services[25].service.node_id == 4, "Died on +.services[25].service.node_id"
    assert result.services[25].service.service_type == """master""", "Died on +.services[25].service.service_type"
    assert result.services[25].service.drive_id == 0, "Died on +.services[25].service.drive_id"
    assert result.services[25].service.service_id == 3, "Died on +.services[25].service.service_id"
    assert result.services[25].service.iscsi_port == 0, "Died on +.services[25].service.iscsi_port"
    assert result.services[25].service.first_time_startup == True, "Died on +.services[25].service.first_time_startup"
    assert result.services[25].service.associated_ts == 0, "Died on +.services[25].service.associated_ts"
    assert result.services[24].node.sip == """10.117.62.23""", "Died on +.services[24].node.sip"
    assert result.services[24].node.uuid == UUID("4C4C4544-0032-4B10-8038-C2C04F513232"), "Died on .services[24].node.uuid"
    assert result.services[24].node.name == """SF-5391""", "Died on +.services[24].node.name"
    assert result.services[24].node.platform_info.node_type == """FC0025""", "Died on +.services[24].node.platform_info.node_type"
    assert result.services[24].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[24].node.platform_info.cpu_model"
    assert result.services[24].node.platform_info.node_memory_gb == 32, "Died on +.services[24].node.platform_info.node_memory_gb"
    assert result.services[24].node.platform_info.chassis_type == """R620""", "Died on +.services[24].node.platform_info.chassis_type"
    assert result.services[24].node.node_id == 1, "Died on +.services[24].node.node_id"
    assert result.services[24].node.mipi == """Bond1G""", "Died on +.services[24].node.mipi"
    assert result.services[24].node.sipi == """Bond10G""", "Died on +.services[24].node.sipi"
    assert result.services[24].node.software_version == """9.0.0.1554""", "Died on +.services[24].node.software_version"
    assert result.services[24].node.cip == """10.117.62.23""", "Died on +.services[24].node.cip"
    assert result.services[24].node.fibre_channel_target_port_group == 0, "Died on +.services[24].node.fibre_channel_target_port_group"
    assert result.services[24].node.mip == """10.117.60.23""", "Died on +.services[24].node.mip"
    assert result.services[24].node.associated_fservice_id == 2, "Died on +.services[24].node.associated_fservice_id"
    assert result.services[24].node.associated_master_service_id == 1, "Died on +.services[24].node.associated_master_service_id"
    assert result.services[24].node.cipi == """Bond10G""", "Died on +.services[24].node.cipi"
    assert type(result.services[24].node.attributes) is dict, "Died on .services[24].node.attributes"
    assert result.services[24].service.status == """healthy""", "Died on +.services[24].service.status"
    assert result.services[24].service.associated_bv == 0, "Died on +.services[24].service.associated_bv"
    assert result.services[24].service.associated_vs == 0, "Died on +.services[24].service.associated_vs"
    assert result.services[24].service.ipc_port == 4001, "Died on +.services[24].service.ipc_port"
    assert result.services[24].service.node_id == 1, "Died on +.services[24].service.node_id"
    assert result.services[24].service.service_type == """fibre""", "Died on +.services[24].service.service_type"
    assert result.services[24].service.drive_id == 0, "Died on +.services[24].service.drive_id"
    assert result.services[24].service.service_id == 2, "Died on +.services[24].service.service_id"
    assert result.services[24].service.iscsi_port == 0, "Died on +.services[24].service.iscsi_port"
    assert result.services[24].service.first_time_startup == True, "Died on +.services[24].service.first_time_startup"
    assert result.services[24].service.associated_ts == 0, "Died on +.services[24].service.associated_ts"
    assert result.services[23].node.sip == """10.117.62.23""", "Died on +.services[23].node.sip"
    assert result.services[23].node.uuid == UUID("4C4C4544-0032-4B10-8038-C2C04F513232"), "Died on .services[23].node.uuid"
    assert result.services[23].node.name == """SF-5391""", "Died on +.services[23].node.name"
    assert result.services[23].node.platform_info.node_type == """FC0025""", "Died on +.services[23].node.platform_info.node_type"
    assert result.services[23].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[23].node.platform_info.cpu_model"
    assert result.services[23].node.platform_info.node_memory_gb == 32, "Died on +.services[23].node.platform_info.node_memory_gb"
    assert result.services[23].node.platform_info.chassis_type == """R620""", "Died on +.services[23].node.platform_info.chassis_type"
    assert result.services[23].node.node_id == 1, "Died on +.services[23].node.node_id"
    assert result.services[23].node.mipi == """Bond1G""", "Died on +.services[23].node.mipi"
    assert result.services[23].node.sipi == """Bond10G""", "Died on +.services[23].node.sipi"
    assert result.services[23].node.software_version == """9.0.0.1554""", "Died on +.services[23].node.software_version"
    assert result.services[23].node.cip == """10.117.62.23""", "Died on +.services[23].node.cip"
    assert result.services[23].node.fibre_channel_target_port_group == 0, "Died on +.services[23].node.fibre_channel_target_port_group"
    assert result.services[23].node.mip == """10.117.60.23""", "Died on +.services[23].node.mip"
    assert result.services[23].node.associated_fservice_id == 2, "Died on +.services[23].node.associated_fservice_id"
    assert result.services[23].node.associated_master_service_id == 1, "Died on +.services[23].node.associated_master_service_id"
    assert result.services[23].node.cipi == """Bond10G""", "Died on +.services[23].node.cipi"
    assert type(result.services[23].node.attributes) is dict, "Died on .services[23].node.attributes"
    assert result.services[23].service.status == """healthy""", "Died on +.services[23].service.status"
    assert result.services[23].service.associated_bv == 0, "Died on +.services[23].service.associated_bv"
    assert result.services[23].service.associated_vs == 8000, "Died on +.services[23].service.associated_vs"
    assert result.services[23].service.ipc_port == 4000, "Died on +.services[23].service.ipc_port"
    assert result.services[23].service.node_id == 1, "Died on +.services[23].service.node_id"
    assert result.services[23].service.service_type == """master""", "Died on +.services[23].service.service_type"
    assert result.services[23].service.drive_id == 0, "Died on +.services[23].service.drive_id"
    assert result.services[23].service.service_id == 1, "Died on +.services[23].service.service_id"
    assert result.services[23].service.iscsi_port == 0, "Died on +.services[23].service.iscsi_port"
    assert result.services[23].service.first_time_startup == True, "Died on +.services[23].service.first_time_startup"
    assert result.services[23].service.associated_ts == 0, "Died on +.services[23].service.associated_ts"
    assert result.services[22].node.sip == """10.117.62.25""", "Died on +.services[22].node.sip"
    assert result.services[22].node.uuid == UUID("4C4C4544-0053-3310-8053-B6C04F435831"), "Died on .services[22].node.uuid"
    assert result.services[22].node.name == """SF-F2A3""", "Died on +.services[22].node.name"
    assert result.services[22].node.platform_info.node_type == """SF3010""", "Died on +.services[22].node.platform_info.node_type"
    assert result.services[22].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[22].node.platform_info.cpu_model"
    assert result.services[22].node.platform_info.node_memory_gb == 72, "Died on +.services[22].node.platform_info.node_memory_gb"
    assert result.services[22].node.platform_info.chassis_type == """R620""", "Died on +.services[22].node.platform_info.chassis_type"
    assert result.services[22].node.node_id == 3, "Died on +.services[22].node.node_id"
    assert result.services[22].node.mipi == """Bond1G""", "Died on +.services[22].node.mipi"
    assert result.services[22].node.sipi == """Bond10G""", "Died on +.services[22].node.sipi"
    assert result.services[22].node.software_version == """9.0.0.1554""", "Died on +.services[22].node.software_version"
    assert result.services[22].node.cip == """10.117.62.25""", "Died on +.services[22].node.cip"
    assert result.services[22].node.fibre_channel_target_port_group is None, "Died on .services[22].node.fibre_channel_target_port_group"
    assert result.services[22].node.mip == """10.117.60.25""", "Died on +.services[22].node.mip"
    assert result.services[22].node.associated_fservice_id == 0, "Died on +.services[22].node.associated_fservice_id"
    assert result.services[22].node.associated_master_service_id == 4, "Died on +.services[22].node.associated_master_service_id"
    assert result.services[22].node.cipi == """Bond10G""", "Died on +.services[22].node.cipi"
    assert type(result.services[22].node.attributes) is dict, "Died on .services[22].node.attributes"
    assert result.services[22].drives[0].slot == 2, "Died on +.services[22].drives[0].slot"
    assert result.services[22].drives[0].capacity == 300069052416, "Died on +.services[22].drives[0].capacity"
    assert result.services[22].drives[0].drive_status == """assigned""", "Died on +.services[22].drives[0].drive_status"
    assert result.services[22].drives[0].node_id == 3, "Died on +.services[22].drives[0].node_id"
    assert result.services[22].drives[0].drive_id == 15, "Died on +.services[22].drives[0].drive_id"
    assert result.services[22].drives[0].customer_slice_file_capacity == 0, "Died on +.services[22].drives[0].customer_slice_file_capacity"
    assert result.services[22].drives[0].assigned_service == 19, "Died on +.services[22].drives[0].assigned_service"
    assert type(result.services[22].drives[0].attributes) is dict, "Died on .services[22].drives[0].attributes"
    assert result.services[22].drives[0].drive_type == """Block""", "Died on +.services[22].drives[0].drive_type"
    assert result.services[22].drives[0].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3113015C300PGN""", "Died on +.services[22].drives[0].serial"
    assert result.services[22].drives[0].reserved_slice_file_capacity == 0, "Died on +.services[22].drives[0].reserved_slice_file_capacity"
    assert result.services[22].service.status == """healthy""", "Died on +.services[22].service.status"
    assert result.services[22].service.associated_bv == 0, "Died on +.services[22].service.associated_bv"
    assert result.services[22].service.associated_vs == 0, "Died on +.services[22].service.associated_vs"
    assert result.services[22].service.ipc_port == 4007, "Died on +.services[22].service.ipc_port"
    assert result.services[22].service.node_id == 3, "Died on +.services[22].service.node_id"
    assert result.services[22].service.service_type == """block""", "Died on +.services[22].service.service_type"
    assert result.services[22].service.drive_id == 15, "Died on +.services[22].service.drive_id"
    assert result.services[22].service.service_id == 19, "Died on +.services[22].service.service_id"
    assert result.services[22].service.iscsi_port == 0, "Died on +.services[22].service.iscsi_port"
    assert result.services[22].service.started_drive_ids[0] == 15, "Died on +.services[22].service.started_drive_ids[0]"
    assert result.services[22].service.first_time_startup == False, "Died on +.services[22].service.first_time_startup"
    assert result.services[22].service.drive_ids[0] == 15, "Died on +.services[22].service.drive_ids[0]"
    assert result.services[22].service.associated_ts == 0, "Died on +.services[22].service.associated_ts"
    assert result.services[22].drive.slot == 2, "Died on +.services[22].drive.slot"
    assert result.services[22].drive.capacity == 300069052416, "Died on +.services[22].drive.capacity"
    assert result.services[22].drive.drive_status == """assigned""", "Died on +.services[22].drive.drive_status"
    assert result.services[22].drive.node_id == 3, "Died on +.services[22].drive.node_id"
    assert result.services[22].drive.drive_id == 15, "Died on +.services[22].drive.drive_id"
    assert result.services[22].drive.customer_slice_file_capacity == 0, "Died on +.services[22].drive.customer_slice_file_capacity"
    assert result.services[22].drive.assigned_service == 19, "Died on +.services[22].drive.assigned_service"
    assert type(result.services[22].drive.attributes) is dict, "Died on .services[22].drive.attributes"
    assert result.services[22].drive.drive_type == """block""", "Died on +.services[22].drive.drive_type"
    assert result.services[22].drive.serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3113015C300PGN""", "Died on +.services[22].drive.serial"
    assert result.services[22].drive.reserved_slice_file_capacity == 0, "Died on +.services[22].drive.reserved_slice_file_capacity"
    assert result.services[21].node.sip == """10.117.62.26""", "Died on +.services[21].node.sip"
    assert result.services[21].node.uuid == UUID("4C4C4544-0053-3210-8054-B6C04F435831"), "Died on .services[21].node.uuid"
    assert result.services[21].node.name == """SF-1713""", "Died on +.services[21].node.name"
    assert result.services[21].node.platform_info.node_type == """SF3010""", "Died on +.services[21].node.platform_info.node_type"
    assert result.services[21].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[21].node.platform_info.cpu_model"
    assert result.services[21].node.platform_info.node_memory_gb == 72, "Died on +.services[21].node.platform_info.node_memory_gb"
    assert result.services[21].node.platform_info.chassis_type == """R620""", "Died on +.services[21].node.platform_info.chassis_type"
    assert result.services[21].node.node_id == 4, "Died on +.services[21].node.node_id"
    assert result.services[21].node.mipi == """Bond1G""", "Died on +.services[21].node.mipi"
    assert result.services[21].node.sipi == """Bond10G""", "Died on +.services[21].node.sipi"
    assert result.services[21].node.software_version == """9.0.0.1554""", "Died on +.services[21].node.software_version"
    assert result.services[21].node.cip == """10.117.62.26""", "Died on +.services[21].node.cip"
    assert result.services[21].node.fibre_channel_target_port_group is None, "Died on .services[21].node.fibre_channel_target_port_group"
    assert result.services[21].node.mip == """10.117.60.26""", "Died on +.services[21].node.mip"
    assert result.services[21].node.associated_fservice_id == 0, "Died on +.services[21].node.associated_fservice_id"
    assert result.services[21].node.associated_master_service_id == 3, "Died on +.services[21].node.associated_master_service_id"
    assert result.services[21].node.cipi == """Bond10G""", "Died on +.services[21].node.cipi"
    assert type(result.services[21].node.attributes) is dict, "Died on .services[21].node.attributes"
    assert result.services[21].drives[0].slot == 1, "Died on +.services[21].drives[0].slot"
    assert result.services[21].drives[0].capacity == 300069052416, "Died on +.services[21].drives[0].capacity"
    assert result.services[21].drives[0].drive_status == """assigned""", "Died on +.services[21].drives[0].drive_status"
    assert result.services[21].drives[0].node_id == 4, "Died on +.services[21].drives[0].node_id"
    assert result.services[21].drives[0].drive_id == 3, "Died on +.services[21].drives[0].drive_id"
    assert result.services[21].drives[0].customer_slice_file_capacity == 0, "Died on +.services[21].drives[0].customer_slice_file_capacity"
    assert result.services[21].drives[0].assigned_service == 18, "Died on +.services[21].drives[0].assigned_service"
    assert type(result.services[21].drives[0].attributes) is dict, "Died on .services[21].drives[0].attributes"
    assert result.services[21].drives[0].drive_type == """Block""", "Died on +.services[21].drives[0].drive_type"
    assert result.services[21].drives[0].serial == """scsi-SATA_INTEL_SSDSA2CW3CVPR1214010M300EGN""", "Died on +.services[21].drives[0].serial"
    assert result.services[21].drives[0].reserved_slice_file_capacity == 0, "Died on +.services[21].drives[0].reserved_slice_file_capacity"
    assert result.services[21].service.status == """healthy""", "Died on +.services[21].service.status"
    assert result.services[21].service.associated_bv == 0, "Died on +.services[21].service.associated_bv"
    assert result.services[21].service.associated_vs == 0, "Died on +.services[21].service.associated_vs"
    assert result.services[21].service.ipc_port == 4006, "Died on +.services[21].service.ipc_port"
    assert result.services[21].service.node_id == 4, "Died on +.services[21].service.node_id"
    assert result.services[21].service.service_type == """block""", "Died on +.services[21].service.service_type"
    assert result.services[21].service.drive_id == 3, "Died on +.services[21].service.drive_id"
    assert result.services[21].service.service_id == 18, "Died on +.services[21].service.service_id"
    assert result.services[21].service.iscsi_port == 0, "Died on +.services[21].service.iscsi_port"
    assert result.services[21].service.started_drive_ids[0] == 3, "Died on +.services[21].service.started_drive_ids[0]"
    assert result.services[21].service.first_time_startup == False, "Died on +.services[21].service.first_time_startup"
    assert result.services[21].service.drive_ids[0] == 3, "Died on +.services[21].service.drive_ids[0]"
    assert result.services[21].service.associated_ts == 0, "Died on +.services[21].service.associated_ts"
    assert result.services[21].drive.slot == 1, "Died on +.services[21].drive.slot"
    assert result.services[21].drive.capacity == 300069052416, "Died on +.services[21].drive.capacity"
    assert result.services[21].drive.drive_status == """assigned""", "Died on +.services[21].drive.drive_status"
    assert result.services[21].drive.node_id == 4, "Died on +.services[21].drive.node_id"
    assert result.services[21].drive.drive_id == 3, "Died on +.services[21].drive.drive_id"
    assert result.services[21].drive.customer_slice_file_capacity == 0, "Died on +.services[21].drive.customer_slice_file_capacity"
    assert result.services[21].drive.assigned_service == 18, "Died on +.services[21].drive.assigned_service"
    assert type(result.services[21].drive.attributes) is dict, "Died on .services[21].drive.attributes"
    assert result.services[21].drive.drive_type == """block""", "Died on +.services[21].drive.drive_type"
    assert result.services[21].drive.serial == """scsi-SATA_INTEL_SSDSA2CW3CVPR1214010M300EGN""", "Died on +.services[21].drive.serial"
    assert result.services[21].drive.reserved_slice_file_capacity == 0, "Died on +.services[21].drive.reserved_slice_file_capacity"
    assert result.services[20].node.sip == """10.117.62.25""", "Died on +.services[20].node.sip"
    assert result.services[20].node.uuid == UUID("4C4C4544-0053-3310-8053-B6C04F435831"), "Died on .services[20].node.uuid"
    assert result.services[20].node.name == """SF-F2A3""", "Died on +.services[20].node.name"
    assert result.services[20].node.platform_info.node_type == """SF3010""", "Died on +.services[20].node.platform_info.node_type"
    assert result.services[20].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[20].node.platform_info.cpu_model"
    assert result.services[20].node.platform_info.node_memory_gb == 72, "Died on +.services[20].node.platform_info.node_memory_gb"
    assert result.services[20].node.platform_info.chassis_type == """R620""", "Died on +.services[20].node.platform_info.chassis_type"
    assert result.services[20].node.node_id == 3, "Died on +.services[20].node.node_id"
    assert result.services[20].node.mipi == """Bond1G""", "Died on +.services[20].node.mipi"
    assert result.services[20].node.sipi == """Bond10G""", "Died on +.services[20].node.sipi"
    assert result.services[20].node.software_version == """9.0.0.1554""", "Died on +.services[20].node.software_version"
    assert result.services[20].node.cip == """10.117.62.25""", "Died on +.services[20].node.cip"
    assert result.services[20].node.fibre_channel_target_port_group is None, "Died on .services[20].node.fibre_channel_target_port_group"
    assert result.services[20].node.mip == """10.117.60.25""", "Died on +.services[20].node.mip"
    assert result.services[20].node.associated_fservice_id == 0, "Died on +.services[20].node.associated_fservice_id"
    assert result.services[20].node.associated_master_service_id == 4, "Died on +.services[20].node.associated_master_service_id"
    assert result.services[20].node.cipi == """Bond10G""", "Died on +.services[20].node.cipi"
    assert type(result.services[20].node.attributes) is dict, "Died on .services[20].node.attributes"
    assert result.services[20].drives[0].slot == 1, "Died on +.services[20].drives[0].slot"
    assert result.services[20].drives[0].capacity == 300069052416, "Died on +.services[20].drives[0].capacity"
    assert result.services[20].drives[0].drive_status == """assigned""", "Died on +.services[20].drives[0].drive_status"
    assert result.services[20].drives[0].node_id == 3, "Died on +.services[20].drives[0].node_id"
    assert result.services[20].drives[0].drive_id == 14, "Died on +.services[20].drives[0].drive_id"
    assert result.services[20].drives[0].customer_slice_file_capacity == 0, "Died on +.services[20].drives[0].customer_slice_file_capacity"
    assert result.services[20].drives[0].assigned_service == 17, "Died on +.services[20].drives[0].assigned_service"
    assert type(result.services[20].drives[0].attributes) is dict, "Died on .services[20].drives[0].attributes"
    assert result.services[20].drives[0].drive_type == """Block""", "Died on +.services[20].drives[0].drive_type"
    assert result.services[20].drives[0].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL311301EL300PGN""", "Died on +.services[20].drives[0].serial"
    assert result.services[20].drives[0].reserved_slice_file_capacity == 0, "Died on +.services[20].drives[0].reserved_slice_file_capacity"
    assert result.services[20].service.status == """healthy""", "Died on +.services[20].service.status"
    assert result.services[20].service.associated_bv == 0, "Died on +.services[20].service.associated_bv"
    assert result.services[20].service.associated_vs == 0, "Died on +.services[20].service.associated_vs"
    assert result.services[20].service.ipc_port == 4006, "Died on +.services[20].service.ipc_port"
    assert result.services[20].service.node_id == 3, "Died on +.services[20].service.node_id"
    assert result.services[20].service.service_type == """block""", "Died on +.services[20].service.service_type"
    assert result.services[20].service.drive_id == 14, "Died on +.services[20].service.drive_id"
    assert result.services[20].service.service_id == 17, "Died on +.services[20].service.service_id"
    assert result.services[20].service.iscsi_port == 0, "Died on +.services[20].service.iscsi_port"
    assert result.services[20].service.started_drive_ids[0] == 14, "Died on +.services[20].service.started_drive_ids[0]"
    assert result.services[20].service.first_time_startup == False, "Died on +.services[20].service.first_time_startup"
    assert result.services[20].service.drive_ids[0] == 14, "Died on +.services[20].service.drive_ids[0]"
    assert result.services[20].service.associated_ts == 0, "Died on +.services[20].service.associated_ts"
    assert result.services[20].drive.slot == 1, "Died on +.services[20].drive.slot"
    assert result.services[20].drive.capacity == 300069052416, "Died on +.services[20].drive.capacity"
    assert result.services[20].drive.drive_status == """assigned""", "Died on +.services[20].drive.drive_status"
    assert result.services[20].drive.node_id == 3, "Died on +.services[20].drive.node_id"
    assert result.services[20].drive.drive_id == 14, "Died on +.services[20].drive.drive_id"
    assert result.services[20].drive.customer_slice_file_capacity == 0, "Died on +.services[20].drive.customer_slice_file_capacity"
    assert result.services[20].drive.assigned_service == 17, "Died on +.services[20].drive.assigned_service"
    assert type(result.services[20].drive.attributes) is dict, "Died on .services[20].drive.attributes"
    assert result.services[20].drive.drive_type == """block""", "Died on +.services[20].drive.drive_type"
    assert result.services[20].drive.serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL311301EL300PGN""", "Died on +.services[20].drive.serial"
    assert result.services[20].drive.reserved_slice_file_capacity == 0, "Died on +.services[20].drive.reserved_slice_file_capacity"
    assert result.services[19].node.sip == """10.117.62.25""", "Died on +.services[19].node.sip"
    assert result.services[19].node.uuid == UUID("4C4C4544-0053-3310-8053-B6C04F435831"), "Died on .services[19].node.uuid"
    assert result.services[19].node.name == """SF-F2A3""", "Died on +.services[19].node.name"
    assert result.services[19].node.platform_info.node_type == """SF3010""", "Died on +.services[19].node.platform_info.node_type"
    assert result.services[19].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[19].node.platform_info.cpu_model"
    assert result.services[19].node.platform_info.node_memory_gb == 72, "Died on +.services[19].node.platform_info.node_memory_gb"
    assert result.services[19].node.platform_info.chassis_type == """R620""", "Died on +.services[19].node.platform_info.chassis_type"
    assert result.services[19].node.node_id == 3, "Died on +.services[19].node.node_id"
    assert result.services[19].node.mipi == """Bond1G""", "Died on +.services[19].node.mipi"
    assert result.services[19].node.sipi == """Bond10G""", "Died on +.services[19].node.sipi"
    assert result.services[19].node.software_version == """9.0.0.1554""", "Died on +.services[19].node.software_version"
    assert result.services[19].node.cip == """10.117.62.25""", "Died on +.services[19].node.cip"
    assert result.services[19].node.fibre_channel_target_port_group is None, "Died on .services[19].node.fibre_channel_target_port_group"
    assert result.services[19].node.mip == """10.117.60.25""", "Died on +.services[19].node.mip"
    assert result.services[19].node.associated_fservice_id == 0, "Died on +.services[19].node.associated_fservice_id"
    assert result.services[19].node.associated_master_service_id == 4, "Died on +.services[19].node.associated_master_service_id"
    assert result.services[19].node.cipi == """Bond10G""", "Died on +.services[19].node.cipi"
    assert type(result.services[19].node.attributes) is dict, "Died on .services[19].node.attributes"
    assert result.services[19].drives[0].slot == 0, "Died on +.services[19].drives[0].slot"
    assert result.services[19].drives[0].capacity == 300069052416, "Died on +.services[19].drives[0].capacity"
    assert result.services[19].drives[0].drive_status == """assigned""", "Died on +.services[19].drives[0].drive_status"
    assert result.services[19].drives[0].node_id == 3, "Died on +.services[19].drives[0].node_id"
    assert result.services[19].drives[0].drive_id == 13, "Died on +.services[19].drives[0].drive_id"
    assert result.services[19].drives[0].customer_slice_file_capacity == 0, "Died on +.services[19].drives[0].customer_slice_file_capacity"
    assert result.services[19].drives[0].assigned_service == 16, "Died on +.services[19].drives[0].assigned_service"
    assert type(result.services[19].drives[0].attributes) is dict, "Died on .services[19].drives[0].attributes"
    assert result.services[19].drives[0].drive_type == """Block""", "Died on +.services[19].drives[0].drive_type"
    assert result.services[19].drives[0].serial == """scsi-SATA_INTEL_SSDSA2CW3CVPR1214002J300EGN""", "Died on +.services[19].drives[0].serial"
    assert result.services[19].drives[0].reserved_slice_file_capacity == 0, "Died on +.services[19].drives[0].reserved_slice_file_capacity"
    assert result.services[19].service.status == """healthy""", "Died on +.services[19].service.status"
    assert result.services[19].service.associated_bv == 0, "Died on +.services[19].service.associated_bv"
    assert result.services[19].service.associated_vs == 0, "Died on +.services[19].service.associated_vs"
    assert result.services[19].service.ipc_port == 4005, "Died on +.services[19].service.ipc_port"
    assert result.services[19].service.node_id == 3, "Died on +.services[19].service.node_id"
    assert result.services[19].service.service_type == """block""", "Died on +.services[19].service.service_type"
    assert result.services[19].service.drive_id == 13, "Died on +.services[19].service.drive_id"
    assert result.services[19].service.service_id == 16, "Died on +.services[19].service.service_id"
    assert result.services[19].service.iscsi_port == 0, "Died on +.services[19].service.iscsi_port"
    assert result.services[19].service.started_drive_ids[0] == 13, "Died on +.services[19].service.started_drive_ids[0]"
    assert result.services[19].service.first_time_startup == False, "Died on +.services[19].service.first_time_startup"
    assert result.services[19].service.drive_ids[0] == 13, "Died on +.services[19].service.drive_ids[0]"
    assert result.services[19].service.associated_ts == 0, "Died on +.services[19].service.associated_ts"
    assert result.services[19].drive.slot == 0, "Died on +.services[19].drive.slot"
    assert result.services[19].drive.capacity == 300069052416, "Died on +.services[19].drive.capacity"
    assert result.services[19].drive.drive_status == """assigned""", "Died on +.services[19].drive.drive_status"
    assert result.services[19].drive.node_id == 3, "Died on +.services[19].drive.node_id"
    assert result.services[19].drive.drive_id == 13, "Died on +.services[19].drive.drive_id"
    assert result.services[19].drive.customer_slice_file_capacity == 0, "Died on +.services[19].drive.customer_slice_file_capacity"
    assert result.services[19].drive.assigned_service == 16, "Died on +.services[19].drive.assigned_service"
    assert type(result.services[19].drive.attributes) is dict, "Died on .services[19].drive.attributes"
    assert result.services[19].drive.drive_type == """block""", "Died on +.services[19].drive.drive_type"
    assert result.services[19].drive.serial == """scsi-SATA_INTEL_SSDSA2CW3CVPR1214002J300EGN""", "Died on +.services[19].drive.serial"
    assert result.services[19].drive.reserved_slice_file_capacity == 0, "Died on +.services[19].drive.reserved_slice_file_capacity"
    assert result.services[18].node.sip == """10.117.62.26""", "Died on +.services[18].node.sip"
    assert result.services[18].node.uuid == UUID("4C4C4544-0053-3210-8054-B6C04F435831"), "Died on .services[18].node.uuid"
    assert result.services[18].node.name == """SF-1713""", "Died on +.services[18].node.name"
    assert result.services[18].node.platform_info.node_type == """SF3010""", "Died on +.services[18].node.platform_info.node_type"
    assert result.services[18].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[18].node.platform_info.cpu_model"
    assert result.services[18].node.platform_info.node_memory_gb == 72, "Died on +.services[18].node.platform_info.node_memory_gb"
    assert result.services[18].node.platform_info.chassis_type == """R620""", "Died on +.services[18].node.platform_info.chassis_type"
    assert result.services[18].node.node_id == 4, "Died on +.services[18].node.node_id"
    assert result.services[18].node.mipi == """Bond1G""", "Died on +.services[18].node.mipi"
    assert result.services[18].node.sipi == """Bond10G""", "Died on +.services[18].node.sipi"
    assert result.services[18].node.software_version == """9.0.0.1554""", "Died on +.services[18].node.software_version"
    assert result.services[18].node.cip == """10.117.62.26""", "Died on +.services[18].node.cip"
    assert result.services[18].node.fibre_channel_target_port_group is None, "Died on .services[18].node.fibre_channel_target_port_group"
    assert result.services[18].node.mip == """10.117.60.26""", "Died on +.services[18].node.mip"
    assert result.services[18].node.associated_fservice_id == 0, "Died on +.services[18].node.associated_fservice_id"
    assert result.services[18].node.associated_master_service_id == 3, "Died on +.services[18].node.associated_master_service_id"
    assert result.services[18].node.cipi == """Bond10G""", "Died on +.services[18].node.cipi"
    assert type(result.services[18].node.attributes) is dict, "Died on .services[18].node.attributes"
    assert result.services[18].drives[0].slot == 0, "Died on +.services[18].drives[0].slot"
    assert result.services[18].drives[0].capacity == 300069052416, "Died on +.services[18].drives[0].capacity"
    assert result.services[18].drives[0].drive_status == """assigned""", "Died on +.services[18].drives[0].drive_status"
    assert result.services[18].drives[0].node_id == 4, "Died on +.services[18].drives[0].node_id"
    assert result.services[18].drives[0].drive_id == 2, "Died on +.services[18].drives[0].drive_id"
    assert result.services[18].drives[0].customer_slice_file_capacity == 0, "Died on +.services[18].drives[0].customer_slice_file_capacity"
    assert result.services[18].drives[0].assigned_service == 15, "Died on +.services[18].drives[0].assigned_service"
    assert type(result.services[18].drives[0].attributes) is dict, "Died on .services[18].drives[0].attributes"
    assert result.services[18].drives[0].drive_type == """Block""", "Died on +.services[18].drives[0].drive_type"
    assert result.services[18].drives[0].serial == """scsi-SATA_INTEL_SSDSA2CW3CVPR121400NA300EGN""", "Died on +.services[18].drives[0].serial"
    assert result.services[18].drives[0].reserved_slice_file_capacity == 0, "Died on +.services[18].drives[0].reserved_slice_file_capacity"
    assert result.services[18].service.status == """healthy""", "Died on +.services[18].service.status"
    assert result.services[18].service.associated_bv == 0, "Died on +.services[18].service.associated_bv"
    assert result.services[18].service.associated_vs == 0, "Died on +.services[18].service.associated_vs"
    assert result.services[18].service.ipc_port == 4005, "Died on +.services[18].service.ipc_port"
    assert result.services[18].service.node_id == 4, "Died on +.services[18].service.node_id"
    assert result.services[18].service.service_type == """block""", "Died on +.services[18].service.service_type"
    assert result.services[18].service.drive_id == 2, "Died on +.services[18].service.drive_id"
    assert result.services[18].service.service_id == 15, "Died on +.services[18].service.service_id"
    assert result.services[18].service.iscsi_port == 0, "Died on +.services[18].service.iscsi_port"
    assert result.services[18].service.started_drive_ids[0] == 2, "Died on +.services[18].service.started_drive_ids[0]"
    assert result.services[18].service.first_time_startup == False, "Died on +.services[18].service.first_time_startup"
    assert result.services[18].service.drive_ids[0] == 2, "Died on +.services[18].service.drive_ids[0]"
    assert result.services[18].service.associated_ts == 0, "Died on +.services[18].service.associated_ts"
    assert result.services[18].drive.slot == 0, "Died on +.services[18].drive.slot"
    assert result.services[18].drive.capacity == 300069052416, "Died on +.services[18].drive.capacity"
    assert result.services[18].drive.drive_status == """assigned""", "Died on +.services[18].drive.drive_status"
    assert result.services[18].drive.node_id == 4, "Died on +.services[18].drive.node_id"
    assert result.services[18].drive.drive_id == 2, "Died on +.services[18].drive.drive_id"
    assert result.services[18].drive.customer_slice_file_capacity == 0, "Died on +.services[18].drive.customer_slice_file_capacity"
    assert result.services[18].drive.assigned_service == 15, "Died on +.services[18].drive.assigned_service"
    assert type(result.services[18].drive.attributes) is dict, "Died on .services[18].drive.attributes"
    assert result.services[18].drive.drive_type == """block""", "Died on +.services[18].drive.drive_type"
    assert result.services[18].drive.serial == """scsi-SATA_INTEL_SSDSA2CW3CVPR121400NA300EGN""", "Died on +.services[18].drive.serial"
    assert result.services[18].drive.reserved_slice_file_capacity == 0, "Died on +.services[18].drive.reserved_slice_file_capacity"
    assert result.services[17].node.sip == """10.117.62.25""", "Died on +.services[17].node.sip"
    assert result.services[17].node.uuid == UUID("4C4C4544-0053-3310-8053-B6C04F435831"), "Died on .services[17].node.uuid"
    assert result.services[17].node.name == """SF-F2A3""", "Died on +.services[17].node.name"
    assert result.services[17].node.platform_info.node_type == """SF3010""", "Died on +.services[17].node.platform_info.node_type"
    assert result.services[17].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[17].node.platform_info.cpu_model"
    assert result.services[17].node.platform_info.node_memory_gb == 72, "Died on +.services[17].node.platform_info.node_memory_gb"
    assert result.services[17].node.platform_info.chassis_type == """R620""", "Died on +.services[17].node.platform_info.chassis_type"
    assert result.services[17].node.node_id == 3, "Died on +.services[17].node.node_id"
    assert result.services[17].node.mipi == """Bond1G""", "Died on +.services[17].node.mipi"
    assert result.services[17].node.sipi == """Bond10G""", "Died on +.services[17].node.sipi"
    assert result.services[17].node.software_version == """9.0.0.1554""", "Died on +.services[17].node.software_version"
    assert result.services[17].node.cip == """10.117.62.25""", "Died on +.services[17].node.cip"
    assert result.services[17].node.fibre_channel_target_port_group is None, "Died on .services[17].node.fibre_channel_target_port_group"
    assert result.services[17].node.mip == """10.117.60.25""", "Died on +.services[17].node.mip"
    assert result.services[17].node.associated_fservice_id == 0, "Died on +.services[17].node.associated_fservice_id"
    assert result.services[17].node.associated_master_service_id == 4, "Died on +.services[17].node.associated_master_service_id"
    assert result.services[17].node.cipi == """Bond10G""", "Died on +.services[17].node.cipi"
    assert type(result.services[17].node.attributes) is dict, "Died on .services[17].node.attributes"
    assert result.services[17].drives[0].slot == -1, "Died on +.services[17].drives[0].slot"
    assert result.services[17].drives[0].capacity == 299988156416, "Died on +.services[17].drives[0].capacity"
    assert result.services[17].drives[0].drive_status == """assigned""", "Died on +.services[17].drives[0].drive_status"
    assert result.services[17].drives[0].node_id == 3, "Died on +.services[17].drives[0].node_id"
    assert result.services[17].drives[0].drive_id == 12, "Died on +.services[17].drives[0].drive_id"
    assert result.services[17].drives[0].customer_slice_file_capacity == 134994670387, "Died on +.services[17].drives[0].customer_slice_file_capacity"
    assert result.services[17].drives[0].assigned_service == 14, "Died on +.services[17].drives[0].assigned_service"
    assert type(result.services[17].drives[0].attributes) is dict, "Died on .services[17].drives[0].attributes"
    assert result.services[17].drives[0].drive_type == """Slice""", "Died on +.services[17].drives[0].drive_type"
    assert result.services[17].drives[0].serial == """scsi-SATA_VRFSD3400GNCVMT205121578-part4""", "Died on +.services[17].drives[0].serial"
    assert result.services[17].drives[0].reserved_slice_file_capacity == 67497335193, "Died on +.services[17].drives[0].reserved_slice_file_capacity"
    assert result.services[17].service.status == """healthy""", "Died on +.services[17].service.status"
    assert result.services[17].service.associated_bv == 11, "Died on +.services[17].service.associated_bv"
    assert result.services[17].service.associated_vs == 12, "Died on +.services[17].service.associated_vs"
    assert result.services[17].service.ipc_port == 4002, "Died on +.services[17].service.ipc_port"
    assert result.services[17].service.node_id == 3, "Died on +.services[17].service.node_id"
    assert result.services[17].service.service_type == """slice""", "Died on +.services[17].service.service_type"
    assert result.services[17].service.drive_id == 12, "Died on +.services[17].service.drive_id"
    assert result.services[17].service.service_id == 14, "Died on +.services[17].service.service_id"
    assert result.services[17].service.iscsi_port == 0, "Died on +.services[17].service.iscsi_port"
    assert result.services[17].service.started_drive_ids[0] == 12, "Died on +.services[17].service.started_drive_ids[0]"
    assert result.services[17].service.first_time_startup == False, "Died on +.services[17].service.first_time_startup"
    assert result.services[17].service.drive_ids[0] == 12, "Died on +.services[17].service.drive_ids[0]"
    assert result.services[17].service.associated_ts == 13, "Died on +.services[17].service.associated_ts"
    assert result.services[17].drive.slot == -1, "Died on +.services[17].drive.slot"
    assert result.services[17].drive.capacity == 299988156416, "Died on +.services[17].drive.capacity"
    assert result.services[17].drive.drive_status == """assigned""", "Died on +.services[17].drive.drive_status"
    assert result.services[17].drive.node_id == 3, "Died on +.services[17].drive.node_id"
    assert result.services[17].drive.drive_id == 12, "Died on +.services[17].drive.drive_id"
    assert result.services[17].drive.customer_slice_file_capacity == 134994670387, "Died on +.services[17].drive.customer_slice_file_capacity"
    assert result.services[17].drive.assigned_service == 14, "Died on +.services[17].drive.assigned_service"
    assert type(result.services[17].drive.attributes) is dict, "Died on .services[17].drive.attributes"
    assert result.services[17].drive.drive_type == """volume""", "Died on +.services[17].drive.drive_type"
    assert result.services[17].drive.serial == """scsi-SATA_VRFSD3400GNCVMT205121578-part4""", "Died on +.services[17].drive.serial"
    assert result.services[17].drive.reserved_slice_file_capacity == 67497335193, "Died on +.services[17].drive.reserved_slice_file_capacity"
    assert result.services[16].node.sip == """10.117.62.25""", "Died on +.services[16].node.sip"
    assert result.services[16].node.uuid == UUID("4C4C4544-0053-3310-8053-B6C04F435831"), "Died on .services[16].node.uuid"
    assert result.services[16].node.name == """SF-F2A3""", "Died on +.services[16].node.name"
    assert result.services[16].node.platform_info.node_type == """SF3010""", "Died on +.services[16].node.platform_info.node_type"
    assert result.services[16].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[16].node.platform_info.cpu_model"
    assert result.services[16].node.platform_info.node_memory_gb == 72, "Died on +.services[16].node.platform_info.node_memory_gb"
    assert result.services[16].node.platform_info.chassis_type == """R620""", "Died on +.services[16].node.platform_info.chassis_type"
    assert result.services[16].node.node_id == 3, "Died on +.services[16].node.node_id"
    assert result.services[16].node.mipi == """Bond1G""", "Died on +.services[16].node.mipi"
    assert result.services[16].node.sipi == """Bond10G""", "Died on +.services[16].node.sipi"
    assert result.services[16].node.software_version == """9.0.0.1554""", "Died on +.services[16].node.software_version"
    assert result.services[16].node.cip == """10.117.62.25""", "Died on +.services[16].node.cip"
    assert result.services[16].node.fibre_channel_target_port_group is None, "Died on .services[16].node.fibre_channel_target_port_group"
    assert result.services[16].node.mip == """10.117.60.25""", "Died on +.services[16].node.mip"
    assert result.services[16].node.associated_fservice_id == 0, "Died on +.services[16].node.associated_fservice_id"
    assert result.services[16].node.associated_master_service_id == 4, "Died on +.services[16].node.associated_master_service_id"
    assert result.services[16].node.cipi == """Bond10G""", "Died on +.services[16].node.cipi"
    assert type(result.services[16].node.attributes) is dict, "Died on .services[16].node.attributes"
    assert result.services[16].service.status == """healthy""", "Died on +.services[16].service.status"
    assert result.services[16].service.associated_bv == 0, "Died on +.services[16].service.associated_bv"
    assert result.services[16].service.associated_vs == 0, "Died on +.services[16].service.associated_vs"
    assert result.services[16].service.ipc_port == 4004, "Died on +.services[16].service.ipc_port"
    assert result.services[16].service.node_id == 3, "Died on +.services[16].service.node_id"
    assert result.services[16].service.service_type == """transport""", "Died on +.services[16].service.service_type"
    assert result.services[16].service.drive_id == 0, "Died on +.services[16].service.drive_id"
    assert result.services[16].service.service_id == 13, "Died on +.services[16].service.service_id"
    assert result.services[16].service.iscsi_port == 3260, "Died on +.services[16].service.iscsi_port"
    assert result.services[16].service.first_time_startup == True, "Died on +.services[16].service.first_time_startup"
    assert result.services[16].service.associated_ts == 0, "Died on +.services[16].service.associated_ts"
    assert result.services[15].node.sip == """10.117.62.25""", "Died on +.services[15].node.sip"
    assert result.services[15].node.uuid == UUID("4C4C4544-0053-3310-8053-B6C04F435831"), "Died on .services[15].node.uuid"
    assert result.services[15].node.name == """SF-F2A3""", "Died on +.services[15].node.name"
    assert result.services[15].node.platform_info.node_type == """SF3010""", "Died on +.services[15].node.platform_info.node_type"
    assert result.services[15].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[15].node.platform_info.cpu_model"
    assert result.services[15].node.platform_info.node_memory_gb == 72, "Died on +.services[15].node.platform_info.node_memory_gb"
    assert result.services[15].node.platform_info.chassis_type == """R620""", "Died on +.services[15].node.platform_info.chassis_type"
    assert result.services[15].node.node_id == 3, "Died on +.services[15].node.node_id"
    assert result.services[15].node.mipi == """Bond1G""", "Died on +.services[15].node.mipi"
    assert result.services[15].node.sipi == """Bond10G""", "Died on +.services[15].node.sipi"
    assert result.services[15].node.software_version == """9.0.0.1554""", "Died on +.services[15].node.software_version"
    assert result.services[15].node.cip == """10.117.62.25""", "Died on +.services[15].node.cip"
    assert result.services[15].node.fibre_channel_target_port_group is None, "Died on .services[15].node.fibre_channel_target_port_group"
    assert result.services[15].node.mip == """10.117.60.25""", "Died on +.services[15].node.mip"
    assert result.services[15].node.associated_fservice_id == 0, "Died on +.services[15].node.associated_fservice_id"
    assert result.services[15].node.associated_master_service_id == 4, "Died on +.services[15].node.associated_master_service_id"
    assert result.services[15].node.cipi == """Bond10G""", "Died on +.services[15].node.cipi"
    assert type(result.services[15].node.attributes) is dict, "Died on .services[15].node.attributes"
    assert result.services[15].drives[0].slot == 9, "Died on +.services[15].drives[0].slot"
    assert result.services[15].drives[0].capacity == 300069052416, "Died on +.services[15].drives[0].capacity"
    assert result.services[15].drives[0].drive_status == """assigned""", "Died on +.services[15].drives[0].drive_status"
    assert result.services[15].drives[0].node_id == 3, "Died on +.services[15].drives[0].node_id"
    assert result.services[15].drives[0].drive_id == 22, "Died on +.services[15].drives[0].drive_id"
    assert result.services[15].drives[0].customer_slice_file_capacity == 0, "Died on +.services[15].drives[0].customer_slice_file_capacity"
    assert result.services[15].drives[0].assigned_service == 34, "Died on +.services[15].drives[0].assigned_service"
    assert type(result.services[15].drives[0].attributes) is dict, "Died on .services[15].drives[0].attributes"
    assert result.services[15].drives[0].drive_type == """Block""", "Died on +.services[15].drives[0].drive_type"
    assert result.services[15].drives[0].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3071045B300PGN""", "Died on +.services[15].drives[0].serial"
    assert result.services[15].drives[0].reserved_slice_file_capacity == 0, "Died on +.services[15].drives[0].reserved_slice_file_capacity"
    assert result.services[15].service.status == """healthy""", "Died on +.services[15].service.status"
    assert result.services[15].service.associated_bv == 0, "Died on +.services[15].service.associated_bv"
    assert result.services[15].service.associated_vs == 0, "Died on +.services[15].service.associated_vs"
    assert result.services[15].service.ipc_port == 4014, "Died on +.services[15].service.ipc_port"
    assert result.services[15].service.node_id == 3, "Died on +.services[15].service.node_id"
    assert result.services[15].service.service_type == """block""", "Died on +.services[15].service.service_type"
    assert result.services[15].service.drive_id == 22, "Died on +.services[15].service.drive_id"
    assert result.services[15].service.service_id == 34, "Died on +.services[15].service.service_id"
    assert result.services[15].service.iscsi_port == 0, "Died on +.services[15].service.iscsi_port"
    assert result.services[15].service.started_drive_ids[0] == 22, "Died on +.services[15].service.started_drive_ids[0]"
    assert result.services[15].service.first_time_startup == False, "Died on +.services[15].service.first_time_startup"
    assert result.services[15].service.drive_ids[0] == 22, "Died on +.services[15].service.drive_ids[0]"
    assert result.services[15].service.associated_ts == 0, "Died on +.services[15].service.associated_ts"
    assert result.services[15].drive.slot == 9, "Died on +.services[15].drive.slot"
    assert result.services[15].drive.capacity == 300069052416, "Died on +.services[15].drive.capacity"
    assert result.services[15].drive.drive_status == """assigned""", "Died on +.services[15].drive.drive_status"
    assert result.services[15].drive.node_id == 3, "Died on +.services[15].drive.node_id"
    assert result.services[15].drive.drive_id == 22, "Died on +.services[15].drive.drive_id"
    assert result.services[15].drive.customer_slice_file_capacity == 0, "Died on +.services[15].drive.customer_slice_file_capacity"
    assert result.services[15].drive.assigned_service == 34, "Died on +.services[15].drive.assigned_service"
    assert type(result.services[15].drive.attributes) is dict, "Died on .services[15].drive.attributes"
    assert result.services[15].drive.drive_type == """block""", "Died on +.services[15].drive.drive_type"
    assert result.services[15].drive.serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3071045B300PGN""", "Died on +.services[15].drive.serial"
    assert result.services[15].drive.reserved_slice_file_capacity == 0, "Died on +.services[15].drive.reserved_slice_file_capacity"
    assert result.services[14].node.sip == """10.117.62.25""", "Died on +.services[14].node.sip"
    assert result.services[14].node.uuid == UUID("4C4C4544-0053-3310-8053-B6C04F435831"), "Died on .services[14].node.uuid"
    assert result.services[14].node.name == """SF-F2A3""", "Died on +.services[14].node.name"
    assert result.services[14].node.platform_info.node_type == """SF3010""", "Died on +.services[14].node.platform_info.node_type"
    assert result.services[14].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[14].node.platform_info.cpu_model"
    assert result.services[14].node.platform_info.node_memory_gb == 72, "Died on +.services[14].node.platform_info.node_memory_gb"
    assert result.services[14].node.platform_info.chassis_type == """R620""", "Died on +.services[14].node.platform_info.chassis_type"
    assert result.services[14].node.node_id == 3, "Died on +.services[14].node.node_id"
    assert result.services[14].node.mipi == """Bond1G""", "Died on +.services[14].node.mipi"
    assert result.services[14].node.sipi == """Bond10G""", "Died on +.services[14].node.sipi"
    assert result.services[14].node.software_version == """9.0.0.1554""", "Died on +.services[14].node.software_version"
    assert result.services[14].node.cip == """10.117.62.25""", "Died on +.services[14].node.cip"
    assert result.services[14].node.fibre_channel_target_port_group is None, "Died on .services[14].node.fibre_channel_target_port_group"
    assert result.services[14].node.mip == """10.117.60.25""", "Died on +.services[14].node.mip"
    assert result.services[14].node.associated_fservice_id == 0, "Died on +.services[14].node.associated_fservice_id"
    assert result.services[14].node.associated_master_service_id == 4, "Died on +.services[14].node.associated_master_service_id"
    assert result.services[14].node.cipi == """Bond10G""", "Died on +.services[14].node.cipi"
    assert type(result.services[14].node.attributes) is dict, "Died on .services[14].node.attributes"
    assert result.services[14].service.status == """healthy""", "Died on +.services[14].service.status"
    assert result.services[14].service.associated_bv == 0, "Died on +.services[14].service.associated_bv"
    assert result.services[14].service.associated_vs == 0, "Died on +.services[14].service.associated_vs"
    assert result.services[14].service.ipc_port == 4003, "Died on +.services[14].service.ipc_port"
    assert result.services[14].service.node_id == 3, "Died on +.services[14].service.node_id"
    assert result.services[14].service.service_type == """volume""", "Died on +.services[14].service.service_type"
    assert result.services[14].service.drive_id == 0, "Died on +.services[14].service.drive_id"
    assert result.services[14].service.service_id == 12, "Died on +.services[14].service.service_id"
    assert result.services[14].service.iscsi_port == 0, "Died on +.services[14].service.iscsi_port"
    assert result.services[14].service.first_time_startup == True, "Died on +.services[14].service.first_time_startup"
    assert result.services[14].service.associated_ts == 0, "Died on +.services[14].service.associated_ts"
    assert result.services[13].node.sip == """10.117.62.26""", "Died on +.services[13].node.sip"
    assert result.services[13].node.uuid == UUID("4C4C4544-0053-3210-8054-B6C04F435831"), "Died on .services[13].node.uuid"
    assert result.services[13].node.name == """SF-1713""", "Died on +.services[13].node.name"
    assert result.services[13].node.platform_info.node_type == """SF3010""", "Died on +.services[13].node.platform_info.node_type"
    assert result.services[13].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[13].node.platform_info.cpu_model"
    assert result.services[13].node.platform_info.node_memory_gb == 72, "Died on +.services[13].node.platform_info.node_memory_gb"
    assert result.services[13].node.platform_info.chassis_type == """R620""", "Died on +.services[13].node.platform_info.chassis_type"
    assert result.services[13].node.node_id == 4, "Died on +.services[13].node.node_id"
    assert result.services[13].node.mipi == """Bond1G""", "Died on +.services[13].node.mipi"
    assert result.services[13].node.sipi == """Bond10G""", "Died on +.services[13].node.sipi"
    assert result.services[13].node.software_version == """9.0.0.1554""", "Died on +.services[13].node.software_version"
    assert result.services[13].node.cip == """10.117.62.26""", "Died on +.services[13].node.cip"
    assert result.services[13].node.fibre_channel_target_port_group is None, "Died on .services[13].node.fibre_channel_target_port_group"
    assert result.services[13].node.mip == """10.117.60.26""", "Died on +.services[13].node.mip"
    assert result.services[13].node.associated_fservice_id == 0, "Died on +.services[13].node.associated_fservice_id"
    assert result.services[13].node.associated_master_service_id == 3, "Died on +.services[13].node.associated_master_service_id"
    assert result.services[13].node.cipi == """Bond10G""", "Died on +.services[13].node.cipi"
    assert type(result.services[13].node.attributes) is dict, "Died on .services[13].node.attributes"
    assert result.services[13].drives[0].slot == 9, "Died on +.services[13].drives[0].slot"
    assert result.services[13].drives[0].capacity == 300069052416, "Died on +.services[13].drives[0].capacity"
    assert result.services[13].drives[0].drive_status == """assigned""", "Died on +.services[13].drives[0].drive_status"
    assert result.services[13].drives[0].node_id == 4, "Died on +.services[13].drives[0].node_id"
    assert result.services[13].drives[0].drive_id == 11, "Died on +.services[13].drives[0].drive_id"
    assert result.services[13].drives[0].customer_slice_file_capacity == 0, "Died on +.services[13].drives[0].customer_slice_file_capacity"
    assert result.services[13].drives[0].assigned_service == 33, "Died on +.services[13].drives[0].assigned_service"
    assert type(result.services[13].drives[0].attributes) is dict, "Died on .services[13].drives[0].attributes"
    assert result.services[13].drives[0].drive_type == """Block""", "Died on +.services[13].drives[0].drive_type"
    assert result.services[13].drives[0].serial == """scsi-SATA_INTEL_SSDSA2CW3BTPR227500TS300EGN""", "Died on +.services[13].drives[0].serial"
    assert result.services[13].drives[0].reserved_slice_file_capacity == 0, "Died on +.services[13].drives[0].reserved_slice_file_capacity"
    assert result.services[13].service.status == """healthy""", "Died on +.services[13].service.status"
    assert result.services[13].service.associated_bv == 0, "Died on +.services[13].service.associated_bv"
    assert result.services[13].service.associated_vs == 0, "Died on +.services[13].service.associated_vs"
    assert result.services[13].service.ipc_port == 4014, "Died on +.services[13].service.ipc_port"
    assert result.services[13].service.node_id == 4, "Died on +.services[13].service.node_id"
    assert result.services[13].service.service_type == """block""", "Died on +.services[13].service.service_type"
    assert result.services[13].service.drive_id == 11, "Died on +.services[13].service.drive_id"
    assert result.services[13].service.service_id == 33, "Died on +.services[13].service.service_id"
    assert result.services[13].service.iscsi_port == 0, "Died on +.services[13].service.iscsi_port"
    assert result.services[13].service.started_drive_ids[0] == 11, "Died on +.services[13].service.started_drive_ids[0]"
    assert result.services[13].service.first_time_startup == False, "Died on +.services[13].service.first_time_startup"
    assert result.services[13].service.drive_ids[0] == 11, "Died on +.services[13].service.drive_ids[0]"
    assert result.services[13].service.associated_ts == 0, "Died on +.services[13].service.associated_ts"
    assert result.services[13].drive.slot == 9, "Died on +.services[13].drive.slot"
    assert result.services[13].drive.capacity == 300069052416, "Died on +.services[13].drive.capacity"
    assert result.services[13].drive.drive_status == """assigned""", "Died on +.services[13].drive.drive_status"
    assert result.services[13].drive.node_id == 4, "Died on +.services[13].drive.node_id"
    assert result.services[13].drive.drive_id == 11, "Died on +.services[13].drive.drive_id"
    assert result.services[13].drive.customer_slice_file_capacity == 0, "Died on +.services[13].drive.customer_slice_file_capacity"
    assert result.services[13].drive.assigned_service == 33, "Died on +.services[13].drive.assigned_service"
    assert type(result.services[13].drive.attributes) is dict, "Died on .services[13].drive.attributes"
    assert result.services[13].drive.drive_type == """block""", "Died on +.services[13].drive.drive_type"
    assert result.services[13].drive.serial == """scsi-SATA_INTEL_SSDSA2CW3BTPR227500TS300EGN""", "Died on +.services[13].drive.serial"
    assert result.services[13].drive.reserved_slice_file_capacity == 0, "Died on +.services[13].drive.reserved_slice_file_capacity"
    assert result.services[12].node.sip == """10.117.62.25""", "Died on +.services[12].node.sip"
    assert result.services[12].node.uuid == UUID("4C4C4544-0053-3310-8053-B6C04F435831"), "Died on .services[12].node.uuid"
    assert result.services[12].node.name == """SF-F2A3""", "Died on +.services[12].node.name"
    assert result.services[12].node.platform_info.node_type == """SF3010""", "Died on +.services[12].node.platform_info.node_type"
    assert result.services[12].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[12].node.platform_info.cpu_model"
    assert result.services[12].node.platform_info.node_memory_gb == 72, "Died on +.services[12].node.platform_info.node_memory_gb"
    assert result.services[12].node.platform_info.chassis_type == """R620""", "Died on +.services[12].node.platform_info.chassis_type"
    assert result.services[12].node.node_id == 3, "Died on +.services[12].node.node_id"
    assert result.services[12].node.mipi == """Bond1G""", "Died on +.services[12].node.mipi"
    assert result.services[12].node.sipi == """Bond10G""", "Died on +.services[12].node.sipi"
    assert result.services[12].node.software_version == """9.0.0.1554""", "Died on +.services[12].node.software_version"
    assert result.services[12].node.cip == """10.117.62.25""", "Died on +.services[12].node.cip"
    assert result.services[12].node.fibre_channel_target_port_group is None, "Died on .services[12].node.fibre_channel_target_port_group"
    assert result.services[12].node.mip == """10.117.60.25""", "Died on +.services[12].node.mip"
    assert result.services[12].node.associated_fservice_id == 0, "Died on +.services[12].node.associated_fservice_id"
    assert result.services[12].node.associated_master_service_id == 4, "Died on +.services[12].node.associated_master_service_id"
    assert result.services[12].node.cipi == """Bond10G""", "Died on +.services[12].node.cipi"
    assert type(result.services[12].node.attributes) is dict, "Died on .services[12].node.attributes"
    assert result.services[12].service.status == """healthy""", "Died on +.services[12].service.status"
    assert result.services[12].service.associated_bv == 0, "Died on +.services[12].service.associated_bv"
    assert result.services[12].service.associated_vs == 0, "Died on +.services[12].service.associated_vs"
    assert result.services[12].service.ipc_port == 4001, "Died on +.services[12].service.ipc_port"
    assert result.services[12].service.node_id == 3, "Died on +.services[12].service.node_id"
    assert result.services[12].service.service_type == """bulkvolume""", "Died on +.services[12].service.service_type"
    assert result.services[12].service.drive_id == 0, "Died on +.services[12].service.drive_id"
    assert result.services[12].service.service_id == 11, "Died on +.services[12].service.service_id"
    assert result.services[12].service.iscsi_port == 0, "Died on +.services[12].service.iscsi_port"
    assert result.services[12].service.first_time_startup == True, "Died on +.services[12].service.first_time_startup"
    assert result.services[12].service.associated_ts == 0, "Died on +.services[12].service.associated_ts"
    assert result.services[11].node.sip == """10.117.62.25""", "Died on +.services[11].node.sip"
    assert result.services[11].node.uuid == UUID("4C4C4544-0053-3310-8053-B6C04F435831"), "Died on .services[11].node.uuid"
    assert result.services[11].node.name == """SF-F2A3""", "Died on +.services[11].node.name"
    assert result.services[11].node.platform_info.node_type == """SF3010""", "Died on +.services[11].node.platform_info.node_type"
    assert result.services[11].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[11].node.platform_info.cpu_model"
    assert result.services[11].node.platform_info.node_memory_gb == 72, "Died on +.services[11].node.platform_info.node_memory_gb"
    assert result.services[11].node.platform_info.chassis_type == """R620""", "Died on +.services[11].node.platform_info.chassis_type"
    assert result.services[11].node.node_id == 3, "Died on +.services[11].node.node_id"
    assert result.services[11].node.mipi == """Bond1G""", "Died on +.services[11].node.mipi"
    assert result.services[11].node.sipi == """Bond10G""", "Died on +.services[11].node.sipi"
    assert result.services[11].node.software_version == """9.0.0.1554""", "Died on +.services[11].node.software_version"
    assert result.services[11].node.cip == """10.117.62.25""", "Died on +.services[11].node.cip"
    assert result.services[11].node.fibre_channel_target_port_group is None, "Died on .services[11].node.fibre_channel_target_port_group"
    assert result.services[11].node.mip == """10.117.60.25""", "Died on +.services[11].node.mip"
    assert result.services[11].node.associated_fservice_id == 0, "Died on +.services[11].node.associated_fservice_id"
    assert result.services[11].node.associated_master_service_id == 4, "Died on +.services[11].node.associated_master_service_id"
    assert result.services[11].node.cipi == """Bond10G""", "Died on +.services[11].node.cipi"
    assert type(result.services[11].node.attributes) is dict, "Died on .services[11].node.attributes"
    assert result.services[11].drives[0].slot == 8, "Died on +.services[11].drives[0].slot"
    assert result.services[11].drives[0].capacity == 300069052416, "Died on +.services[11].drives[0].capacity"
    assert result.services[11].drives[0].drive_status == """assigned""", "Died on +.services[11].drives[0].drive_status"
    assert result.services[11].drives[0].node_id == 3, "Died on +.services[11].drives[0].node_id"
    assert result.services[11].drives[0].drive_id == 21, "Died on +.services[11].drives[0].drive_id"
    assert result.services[11].drives[0].customer_slice_file_capacity == 0, "Died on +.services[11].drives[0].customer_slice_file_capacity"
    assert result.services[11].drives[0].assigned_service == 32, "Died on +.services[11].drives[0].assigned_service"
    assert type(result.services[11].drives[0].attributes) is dict, "Died on .services[11].drives[0].attributes"
    assert result.services[11].drives[0].drive_type == """Block""", "Died on +.services[11].drives[0].drive_type"
    assert result.services[11].drives[0].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3072006A300PGN""", "Died on +.services[11].drives[0].serial"
    assert result.services[11].drives[0].reserved_slice_file_capacity == 0, "Died on +.services[11].drives[0].reserved_slice_file_capacity"
    assert result.services[11].service.status == """healthy""", "Died on +.services[11].service.status"
    assert result.services[11].service.associated_bv == 0, "Died on +.services[11].service.associated_bv"
    assert result.services[11].service.associated_vs == 0, "Died on +.services[11].service.associated_vs"
    assert result.services[11].service.ipc_port == 4013, "Died on +.services[11].service.ipc_port"
    assert result.services[11].service.node_id == 3, "Died on +.services[11].service.node_id"
    assert result.services[11].service.service_type == """block""", "Died on +.services[11].service.service_type"
    assert result.services[11].service.drive_id == 21, "Died on +.services[11].service.drive_id"
    assert result.services[11].service.service_id == 32, "Died on +.services[11].service.service_id"
    assert result.services[11].service.iscsi_port == 0, "Died on +.services[11].service.iscsi_port"
    assert result.services[11].service.started_drive_ids[0] == 21, "Died on +.services[11].service.started_drive_ids[0]"
    assert result.services[11].service.first_time_startup == False, "Died on +.services[11].service.first_time_startup"
    assert result.services[11].service.drive_ids[0] == 21, "Died on +.services[11].service.drive_ids[0]"
    assert result.services[11].service.associated_ts == 0, "Died on +.services[11].service.associated_ts"
    assert result.services[11].drive.slot == 8, "Died on +.services[11].drive.slot"
    assert result.services[11].drive.capacity == 300069052416, "Died on +.services[11].drive.capacity"
    assert result.services[11].drive.drive_status == """assigned""", "Died on +.services[11].drive.drive_status"
    assert result.services[11].drive.node_id == 3, "Died on +.services[11].drive.node_id"
    assert result.services[11].drive.drive_id == 21, "Died on +.services[11].drive.drive_id"
    assert result.services[11].drive.customer_slice_file_capacity == 0, "Died on +.services[11].drive.customer_slice_file_capacity"
    assert result.services[11].drive.assigned_service == 32, "Died on +.services[11].drive.assigned_service"
    assert type(result.services[11].drive.attributes) is dict, "Died on .services[11].drive.attributes"
    assert result.services[11].drive.drive_type == """block""", "Died on +.services[11].drive.drive_type"
    assert result.services[11].drive.serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3072006A300PGN""", "Died on +.services[11].drive.serial"
    assert result.services[11].drive.reserved_slice_file_capacity == 0, "Died on +.services[11].drive.reserved_slice_file_capacity"
    assert result.services[10].node.sip == """10.117.62.26""", "Died on +.services[10].node.sip"
    assert result.services[10].node.uuid == UUID("4C4C4544-0053-3210-8054-B6C04F435831"), "Died on .services[10].node.uuid"
    assert result.services[10].node.name == """SF-1713""", "Died on +.services[10].node.name"
    assert result.services[10].node.platform_info.node_type == """SF3010""", "Died on +.services[10].node.platform_info.node_type"
    assert result.services[10].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[10].node.platform_info.cpu_model"
    assert result.services[10].node.platform_info.node_memory_gb == 72, "Died on +.services[10].node.platform_info.node_memory_gb"
    assert result.services[10].node.platform_info.chassis_type == """R620""", "Died on +.services[10].node.platform_info.chassis_type"
    assert result.services[10].node.node_id == 4, "Died on +.services[10].node.node_id"
    assert result.services[10].node.mipi == """Bond1G""", "Died on +.services[10].node.mipi"
    assert result.services[10].node.sipi == """Bond10G""", "Died on +.services[10].node.sipi"
    assert result.services[10].node.software_version == """9.0.0.1554""", "Died on +.services[10].node.software_version"
    assert result.services[10].node.cip == """10.117.62.26""", "Died on +.services[10].node.cip"
    assert result.services[10].node.fibre_channel_target_port_group is None, "Died on .services[10].node.fibre_channel_target_port_group"
    assert result.services[10].node.mip == """10.117.60.26""", "Died on +.services[10].node.mip"
    assert result.services[10].node.associated_fservice_id == 0, "Died on +.services[10].node.associated_fservice_id"
    assert result.services[10].node.associated_master_service_id == 3, "Died on +.services[10].node.associated_master_service_id"
    assert result.services[10].node.cipi == """Bond10G""", "Died on +.services[10].node.cipi"
    assert type(result.services[10].node.attributes) is dict, "Died on .services[10].node.attributes"
    assert result.services[10].drives[0].slot == -1, "Died on +.services[10].drives[0].slot"
    assert result.services[10].drives[0].capacity == 299988156416, "Died on +.services[10].drives[0].capacity"
    assert result.services[10].drives[0].drive_status == """assigned""", "Died on +.services[10].drives[0].drive_status"
    assert result.services[10].drives[0].node_id == 4, "Died on +.services[10].drives[0].node_id"
    assert result.services[10].drives[0].drive_id == 1, "Died on +.services[10].drives[0].drive_id"
    assert result.services[10].drives[0].customer_slice_file_capacity == 134994670387, "Died on +.services[10].drives[0].customer_slice_file_capacity"
    assert result.services[10].drives[0].assigned_service == 10, "Died on +.services[10].drives[0].assigned_service"
    assert type(result.services[10].drives[0].attributes) is dict, "Died on .services[10].drives[0].attributes"
    assert result.services[10].drives[0].drive_type == """Slice""", "Died on +.services[10].drives[0].drive_type"
    assert result.services[10].drives[0].serial == """scsi-SATA_VRFSD3400GNCVMT205121574-part4""", "Died on +.services[10].drives[0].serial"
    assert result.services[10].drives[0].reserved_slice_file_capacity == 67497335193, "Died on +.services[10].drives[0].reserved_slice_file_capacity"
    assert result.services[10].service.status == """healthy""", "Died on +.services[10].service.status"
    assert result.services[10].service.associated_bv == 7, "Died on +.services[10].service.associated_bv"
    assert result.services[10].service.associated_vs == 8, "Died on +.services[10].service.associated_vs"
    assert result.services[10].service.ipc_port == 4002, "Died on +.services[10].service.ipc_port"
    assert result.services[10].service.node_id == 4, "Died on +.services[10].service.node_id"
    assert result.services[10].service.service_type == """slice""", "Died on +.services[10].service.service_type"
    assert result.services[10].service.drive_id == 1, "Died on +.services[10].service.drive_id"
    assert result.services[10].service.service_id == 10, "Died on +.services[10].service.service_id"
    assert result.services[10].service.iscsi_port == 0, "Died on +.services[10].service.iscsi_port"
    assert result.services[10].service.started_drive_ids[0] == 1, "Died on +.services[10].service.started_drive_ids[0]"
    assert result.services[10].service.first_time_startup == False, "Died on +.services[10].service.first_time_startup"
    assert result.services[10].service.drive_ids[0] == 1, "Died on +.services[10].service.drive_ids[0]"
    assert result.services[10].service.associated_ts == 9, "Died on +.services[10].service.associated_ts"
    assert result.services[10].drive.slot == -1, "Died on +.services[10].drive.slot"
    assert result.services[10].drive.capacity == 299988156416, "Died on +.services[10].drive.capacity"
    assert result.services[10].drive.drive_status == """assigned""", "Died on +.services[10].drive.drive_status"
    assert result.services[10].drive.node_id == 4, "Died on +.services[10].drive.node_id"
    assert result.services[10].drive.drive_id == 1, "Died on +.services[10].drive.drive_id"
    assert result.services[10].drive.customer_slice_file_capacity == 134994670387, "Died on +.services[10].drive.customer_slice_file_capacity"
    assert result.services[10].drive.assigned_service == 10, "Died on +.services[10].drive.assigned_service"
    assert type(result.services[10].drive.attributes) is dict, "Died on .services[10].drive.attributes"
    assert result.services[10].drive.drive_type == """volume""", "Died on +.services[10].drive.drive_type"
    assert result.services[10].drive.serial == """scsi-SATA_VRFSD3400GNCVMT205121574-part4""", "Died on +.services[10].drive.serial"
    assert result.services[10].drive.reserved_slice_file_capacity == 67497335193, "Died on +.services[10].drive.reserved_slice_file_capacity"
    assert result.services[9].node.sip == """10.117.62.26""", "Died on +.services[9].node.sip"
    assert result.services[9].node.uuid == UUID("4C4C4544-0053-3210-8054-B6C04F435831"), "Died on .services[9].node.uuid"
    assert result.services[9].node.name == """SF-1713""", "Died on +.services[9].node.name"
    assert result.services[9].node.platform_info.node_type == """SF3010""", "Died on +.services[9].node.platform_info.node_type"
    assert result.services[9].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[9].node.platform_info.cpu_model"
    assert result.services[9].node.platform_info.node_memory_gb == 72, "Died on +.services[9].node.platform_info.node_memory_gb"
    assert result.services[9].node.platform_info.chassis_type == """R620""", "Died on +.services[9].node.platform_info.chassis_type"
    assert result.services[9].node.node_id == 4, "Died on +.services[9].node.node_id"
    assert result.services[9].node.mipi == """Bond1G""", "Died on +.services[9].node.mipi"
    assert result.services[9].node.sipi == """Bond10G""", "Died on +.services[9].node.sipi"
    assert result.services[9].node.software_version == """9.0.0.1554""", "Died on +.services[9].node.software_version"
    assert result.services[9].node.cip == """10.117.62.26""", "Died on +.services[9].node.cip"
    assert result.services[9].node.fibre_channel_target_port_group is None, "Died on .services[9].node.fibre_channel_target_port_group"
    assert result.services[9].node.mip == """10.117.60.26""", "Died on +.services[9].node.mip"
    assert result.services[9].node.associated_fservice_id == 0, "Died on +.services[9].node.associated_fservice_id"
    assert result.services[9].node.associated_master_service_id == 3, "Died on +.services[9].node.associated_master_service_id"
    assert result.services[9].node.cipi == """Bond10G""", "Died on +.services[9].node.cipi"
    assert type(result.services[9].node.attributes) is dict, "Died on .services[9].node.attributes"
    assert result.services[9].drives[0].slot == 8, "Died on +.services[9].drives[0].slot"
    assert result.services[9].drives[0].capacity == 300069052416, "Died on +.services[9].drives[0].capacity"
    assert result.services[9].drives[0].drive_status == """assigned""", "Died on +.services[9].drives[0].drive_status"
    assert result.services[9].drives[0].node_id == 4, "Died on +.services[9].drives[0].node_id"
    assert result.services[9].drives[0].drive_id == 10, "Died on +.services[9].drives[0].drive_id"
    assert result.services[9].drives[0].customer_slice_file_capacity == 0, "Died on +.services[9].drives[0].customer_slice_file_capacity"
    assert result.services[9].drives[0].assigned_service == 31, "Died on +.services[9].drives[0].assigned_service"
    assert type(result.services[9].drives[0].attributes) is dict, "Died on .services[9].drives[0].attributes"
    assert result.services[9].drives[0].drive_type == """Block""", "Died on +.services[9].drives[0].drive_type"
    assert result.services[9].drives[0].serial == """scsi-SATA_INTEL_SSDSA2CW3BTPR2275018Z300EGN""", "Died on +.services[9].drives[0].serial"
    assert result.services[9].drives[0].reserved_slice_file_capacity == 0, "Died on +.services[9].drives[0].reserved_slice_file_capacity"
    assert result.services[9].service.status == """healthy""", "Died on +.services[9].service.status"
    assert result.services[9].service.associated_bv == 0, "Died on +.services[9].service.associated_bv"
    assert result.services[9].service.associated_vs == 0, "Died on +.services[9].service.associated_vs"
    assert result.services[9].service.ipc_port == 4013, "Died on +.services[9].service.ipc_port"
    assert result.services[9].service.node_id == 4, "Died on +.services[9].service.node_id"
    assert result.services[9].service.service_type == """block""", "Died on +.services[9].service.service_type"
    assert result.services[9].service.drive_id == 10, "Died on +.services[9].service.drive_id"
    assert result.services[9].service.service_id == 31, "Died on +.services[9].service.service_id"
    assert result.services[9].service.iscsi_port == 0, "Died on +.services[9].service.iscsi_port"
    assert result.services[9].service.started_drive_ids[0] == 10, "Died on +.services[9].service.started_drive_ids[0]"
    assert result.services[9].service.first_time_startup == False, "Died on +.services[9].service.first_time_startup"
    assert result.services[9].service.drive_ids[0] == 10, "Died on +.services[9].service.drive_ids[0]"
    assert result.services[9].service.associated_ts == 0, "Died on +.services[9].service.associated_ts"
    assert result.services[9].drive.slot == 8, "Died on +.services[9].drive.slot"
    assert result.services[9].drive.capacity == 300069052416, "Died on +.services[9].drive.capacity"
    assert result.services[9].drive.drive_status == """assigned""", "Died on +.services[9].drive.drive_status"
    assert result.services[9].drive.node_id == 4, "Died on +.services[9].drive.node_id"
    assert result.services[9].drive.drive_id == 10, "Died on +.services[9].drive.drive_id"
    assert result.services[9].drive.customer_slice_file_capacity == 0, "Died on +.services[9].drive.customer_slice_file_capacity"
    assert result.services[9].drive.assigned_service == 31, "Died on +.services[9].drive.assigned_service"
    assert type(result.services[9].drive.attributes) is dict, "Died on .services[9].drive.attributes"
    assert result.services[9].drive.drive_type == """block""", "Died on +.services[9].drive.drive_type"
    assert result.services[9].drive.serial == """scsi-SATA_INTEL_SSDSA2CW3BTPR2275018Z300EGN""", "Died on +.services[9].drive.serial"
    assert result.services[9].drive.reserved_slice_file_capacity == 0, "Died on +.services[9].drive.reserved_slice_file_capacity"
    assert result.services[8].node.sip == """10.117.62.26""", "Died on +.services[8].node.sip"
    assert result.services[8].node.uuid == UUID("4C4C4544-0053-3210-8054-B6C04F435831"), "Died on .services[8].node.uuid"
    assert result.services[8].node.name == """SF-1713""", "Died on +.services[8].node.name"
    assert result.services[8].node.platform_info.node_type == """SF3010""", "Died on +.services[8].node.platform_info.node_type"
    assert result.services[8].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[8].node.platform_info.cpu_model"
    assert result.services[8].node.platform_info.node_memory_gb == 72, "Died on +.services[8].node.platform_info.node_memory_gb"
    assert result.services[8].node.platform_info.chassis_type == """R620""", "Died on +.services[8].node.platform_info.chassis_type"
    assert result.services[8].node.node_id == 4, "Died on +.services[8].node.node_id"
    assert result.services[8].node.mipi == """Bond1G""", "Died on +.services[8].node.mipi"
    assert result.services[8].node.sipi == """Bond10G""", "Died on +.services[8].node.sipi"
    assert result.services[8].node.software_version == """9.0.0.1554""", "Died on +.services[8].node.software_version"
    assert result.services[8].node.cip == """10.117.62.26""", "Died on +.services[8].node.cip"
    assert result.services[8].node.fibre_channel_target_port_group is None, "Died on .services[8].node.fibre_channel_target_port_group"
    assert result.services[8].node.mip == """10.117.60.26""", "Died on +.services[8].node.mip"
    assert result.services[8].node.associated_fservice_id == 0, "Died on +.services[8].node.associated_fservice_id"
    assert result.services[8].node.associated_master_service_id == 3, "Died on +.services[8].node.associated_master_service_id"
    assert result.services[8].node.cipi == """Bond10G""", "Died on +.services[8].node.cipi"
    assert type(result.services[8].node.attributes) is dict, "Died on .services[8].node.attributes"
    assert result.services[8].drives[0].slot == 7, "Died on +.services[8].drives[0].slot"
    assert result.services[8].drives[0].capacity == 300069052416, "Died on +.services[8].drives[0].capacity"
    assert result.services[8].drives[0].drive_status == """assigned""", "Died on +.services[8].drives[0].drive_status"
    assert result.services[8].drives[0].node_id == 4, "Died on +.services[8].drives[0].node_id"
    assert result.services[8].drives[0].drive_id == 9, "Died on +.services[8].drives[0].drive_id"
    assert result.services[8].drives[0].customer_slice_file_capacity == 0, "Died on +.services[8].drives[0].customer_slice_file_capacity"
    assert result.services[8].drives[0].assigned_service == 30, "Died on +.services[8].drives[0].assigned_service"
    assert type(result.services[8].drives[0].attributes) is dict, "Died on .services[8].drives[0].attributes"
    assert result.services[8].drives[0].drive_type == """Block""", "Died on +.services[8].drives[0].drive_type"
    assert result.services[8].drives[0].serial == """scsi-SATA_INTEL_SSDSA2CW3BTPR227400QG300EGN""", "Died on +.services[8].drives[0].serial"
    assert result.services[8].drives[0].reserved_slice_file_capacity == 0, "Died on +.services[8].drives[0].reserved_slice_file_capacity"
    assert result.services[8].service.status == """healthy""", "Died on +.services[8].service.status"
    assert result.services[8].service.associated_bv == 0, "Died on +.services[8].service.associated_bv"
    assert result.services[8].service.associated_vs == 0, "Died on +.services[8].service.associated_vs"
    assert result.services[8].service.ipc_port == 4012, "Died on +.services[8].service.ipc_port"
    assert result.services[8].service.node_id == 4, "Died on +.services[8].service.node_id"
    assert result.services[8].service.service_type == """block""", "Died on +.services[8].service.service_type"
    assert result.services[8].service.drive_id == 9, "Died on +.services[8].service.drive_id"
    assert result.services[8].service.service_id == 30, "Died on +.services[8].service.service_id"
    assert result.services[8].service.iscsi_port == 0, "Died on +.services[8].service.iscsi_port"
    assert result.services[8].service.started_drive_ids[0] == 9, "Died on +.services[8].service.started_drive_ids[0]"
    assert result.services[8].service.first_time_startup == False, "Died on +.services[8].service.first_time_startup"
    assert result.services[8].service.drive_ids[0] == 9, "Died on +.services[8].service.drive_ids[0]"
    assert result.services[8].service.associated_ts == 0, "Died on +.services[8].service.associated_ts"
    assert result.services[8].drive.slot == 7, "Died on +.services[8].drive.slot"
    assert result.services[8].drive.capacity == 300069052416, "Died on +.services[8].drive.capacity"
    assert result.services[8].drive.drive_status == """assigned""", "Died on +.services[8].drive.drive_status"
    assert result.services[8].drive.node_id == 4, "Died on +.services[8].drive.node_id"
    assert result.services[8].drive.drive_id == 9, "Died on +.services[8].drive.drive_id"
    assert result.services[8].drive.customer_slice_file_capacity == 0, "Died on +.services[8].drive.customer_slice_file_capacity"
    assert result.services[8].drive.assigned_service == 30, "Died on +.services[8].drive.assigned_service"
    assert type(result.services[8].drive.attributes) is dict, "Died on .services[8].drive.attributes"
    assert result.services[8].drive.drive_type == """block""", "Died on +.services[8].drive.drive_type"
    assert result.services[8].drive.serial == """scsi-SATA_INTEL_SSDSA2CW3BTPR227400QG300EGN""", "Died on +.services[8].drive.serial"
    assert result.services[8].drive.reserved_slice_file_capacity == 0, "Died on +.services[8].drive.reserved_slice_file_capacity"
    assert result.services[7].node.sip == """10.117.62.25""", "Died on +.services[7].node.sip"
    assert result.services[7].node.uuid == UUID("4C4C4544-0053-3310-8053-B6C04F435831"), "Died on .services[7].node.uuid"
    assert result.services[7].node.name == """SF-F2A3""", "Died on +.services[7].node.name"
    assert result.services[7].node.platform_info.node_type == """SF3010""", "Died on +.services[7].node.platform_info.node_type"
    assert result.services[7].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[7].node.platform_info.cpu_model"
    assert result.services[7].node.platform_info.node_memory_gb == 72, "Died on +.services[7].node.platform_info.node_memory_gb"
    assert result.services[7].node.platform_info.chassis_type == """R620""", "Died on +.services[7].node.platform_info.chassis_type"
    assert result.services[7].node.node_id == 3, "Died on +.services[7].node.node_id"
    assert result.services[7].node.mipi == """Bond1G""", "Died on +.services[7].node.mipi"
    assert result.services[7].node.sipi == """Bond10G""", "Died on +.services[7].node.sipi"
    assert result.services[7].node.software_version == """9.0.0.1554""", "Died on +.services[7].node.software_version"
    assert result.services[7].node.cip == """10.117.62.25""", "Died on +.services[7].node.cip"
    assert result.services[7].node.fibre_channel_target_port_group is None, "Died on .services[7].node.fibre_channel_target_port_group"
    assert result.services[7].node.mip == """10.117.60.25""", "Died on +.services[7].node.mip"
    assert result.services[7].node.associated_fservice_id == 0, "Died on +.services[7].node.associated_fservice_id"
    assert result.services[7].node.associated_master_service_id == 4, "Died on +.services[7].node.associated_master_service_id"
    assert result.services[7].node.cipi == """Bond10G""", "Died on +.services[7].node.cipi"
    assert type(result.services[7].node.attributes) is dict, "Died on .services[7].node.attributes"
    assert result.services[7].drives[0].slot == 7, "Died on +.services[7].drives[0].slot"
    assert result.services[7].drives[0].capacity == 300069052416, "Died on +.services[7].drives[0].capacity"
    assert result.services[7].drives[0].drive_status == """assigned""", "Died on +.services[7].drives[0].drive_status"
    assert result.services[7].drives[0].node_id == 3, "Died on +.services[7].drives[0].node_id"
    assert result.services[7].drives[0].drive_id == 20, "Died on +.services[7].drives[0].drive_id"
    assert result.services[7].drives[0].customer_slice_file_capacity == 0, "Died on +.services[7].drives[0].customer_slice_file_capacity"
    assert result.services[7].drives[0].assigned_service == 29, "Died on +.services[7].drives[0].assigned_service"
    assert type(result.services[7].drives[0].attributes) is dict, "Died on .services[7].drives[0].attributes"
    assert result.services[7].drives[0].drive_type == """Block""", "Died on +.services[7].drives[0].drive_type"
    assert result.services[7].drives[0].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL305101U0300JGN""", "Died on +.services[7].drives[0].serial"
    assert result.services[7].drives[0].reserved_slice_file_capacity == 0, "Died on +.services[7].drives[0].reserved_slice_file_capacity"
    assert result.services[7].service.status == """healthy""", "Died on +.services[7].service.status"
    assert result.services[7].service.associated_bv == 0, "Died on +.services[7].service.associated_bv"
    assert result.services[7].service.associated_vs == 0, "Died on +.services[7].service.associated_vs"
    assert result.services[7].service.ipc_port == 4012, "Died on +.services[7].service.ipc_port"
    assert result.services[7].service.node_id == 3, "Died on +.services[7].service.node_id"
    assert result.services[7].service.service_type == """block""", "Died on +.services[7].service.service_type"
    assert result.services[7].service.drive_id == 20, "Died on +.services[7].service.drive_id"
    assert result.services[7].service.service_id == 29, "Died on +.services[7].service.service_id"
    assert result.services[7].service.iscsi_port == 0, "Died on +.services[7].service.iscsi_port"
    assert result.services[7].service.started_drive_ids[0] == 20, "Died on +.services[7].service.started_drive_ids[0]"
    assert result.services[7].service.first_time_startup == False, "Died on +.services[7].service.first_time_startup"
    assert result.services[7].service.drive_ids[0] == 20, "Died on +.services[7].service.drive_ids[0]"
    assert result.services[7].service.associated_ts == 0, "Died on +.services[7].service.associated_ts"
    assert result.services[7].drive.slot == 7, "Died on +.services[7].drive.slot"
    assert result.services[7].drive.capacity == 300069052416, "Died on +.services[7].drive.capacity"
    assert result.services[7].drive.drive_status == """assigned""", "Died on +.services[7].drive.drive_status"
    assert result.services[7].drive.node_id == 3, "Died on +.services[7].drive.node_id"
    assert result.services[7].drive.drive_id == 20, "Died on +.services[7].drive.drive_id"
    assert result.services[7].drive.customer_slice_file_capacity == 0, "Died on +.services[7].drive.customer_slice_file_capacity"
    assert result.services[7].drive.assigned_service == 29, "Died on +.services[7].drive.assigned_service"
    assert type(result.services[7].drive.attributes) is dict, "Died on .services[7].drive.attributes"
    assert result.services[7].drive.drive_type == """block""", "Died on +.services[7].drive.drive_type"
    assert result.services[7].drive.serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL305101U0300JGN""", "Died on +.services[7].drive.serial"
    assert result.services[7].drive.reserved_slice_file_capacity == 0, "Died on +.services[7].drive.reserved_slice_file_capacity"
    assert result.services[6].node.sip == """10.117.62.26""", "Died on +.services[6].node.sip"
    assert result.services[6].node.uuid == UUID("4C4C4544-0053-3210-8054-B6C04F435831"), "Died on .services[6].node.uuid"
    assert result.services[6].node.name == """SF-1713""", "Died on +.services[6].node.name"
    assert result.services[6].node.platform_info.node_type == """SF3010""", "Died on +.services[6].node.platform_info.node_type"
    assert result.services[6].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[6].node.platform_info.cpu_model"
    assert result.services[6].node.platform_info.node_memory_gb == 72, "Died on +.services[6].node.platform_info.node_memory_gb"
    assert result.services[6].node.platform_info.chassis_type == """R620""", "Died on +.services[6].node.platform_info.chassis_type"
    assert result.services[6].node.node_id == 4, "Died on +.services[6].node.node_id"
    assert result.services[6].node.mipi == """Bond1G""", "Died on +.services[6].node.mipi"
    assert result.services[6].node.sipi == """Bond10G""", "Died on +.services[6].node.sipi"
    assert result.services[6].node.software_version == """9.0.0.1554""", "Died on +.services[6].node.software_version"
    assert result.services[6].node.cip == """10.117.62.26""", "Died on +.services[6].node.cip"
    assert result.services[6].node.fibre_channel_target_port_group is None, "Died on .services[6].node.fibre_channel_target_port_group"
    assert result.services[6].node.mip == """10.117.60.26""", "Died on +.services[6].node.mip"
    assert result.services[6].node.associated_fservice_id == 0, "Died on +.services[6].node.associated_fservice_id"
    assert result.services[6].node.associated_master_service_id == 3, "Died on +.services[6].node.associated_master_service_id"
    assert result.services[6].node.cipi == """Bond10G""", "Died on +.services[6].node.cipi"
    assert type(result.services[6].node.attributes) is dict, "Died on .services[6].node.attributes"
    assert result.services[6].drives[0].slot == 6, "Died on +.services[6].drives[0].slot"
    assert result.services[6].drives[0].capacity == 300069052416, "Died on +.services[6].drives[0].capacity"
    assert result.services[6].drives[0].drive_status == """assigned""", "Died on +.services[6].drives[0].drive_status"
    assert result.services[6].drives[0].node_id == 4, "Died on +.services[6].drives[0].node_id"
    assert result.services[6].drives[0].drive_id == 8, "Died on +.services[6].drives[0].drive_id"
    assert result.services[6].drives[0].customer_slice_file_capacity == 0, "Died on +.services[6].drives[0].customer_slice_file_capacity"
    assert result.services[6].drives[0].assigned_service == 28, "Died on +.services[6].drives[0].assigned_service"
    assert type(result.services[6].drives[0].attributes) is dict, "Died on .services[6].drives[0].attributes"
    assert result.services[6].drives[0].drive_type == """Block""", "Died on +.services[6].drives[0].drive_type"
    assert result.services[6].drives[0].serial == """scsi-SATA_INTEL_SSDSA2CW3BTPR227401S0300EGN""", "Died on +.services[6].drives[0].serial"
    assert result.services[6].drives[0].reserved_slice_file_capacity == 0, "Died on +.services[6].drives[0].reserved_slice_file_capacity"
    assert result.services[6].service.status == """healthy""", "Died on +.services[6].service.status"
    assert result.services[6].service.associated_bv == 0, "Died on +.services[6].service.associated_bv"
    assert result.services[6].service.associated_vs == 0, "Died on +.services[6].service.associated_vs"
    assert result.services[6].service.ipc_port == 4011, "Died on +.services[6].service.ipc_port"
    assert result.services[6].service.node_id == 4, "Died on +.services[6].service.node_id"
    assert result.services[6].service.service_type == """block""", "Died on +.services[6].service.service_type"
    assert result.services[6].service.drive_id == 8, "Died on +.services[6].service.drive_id"
    assert result.services[6].service.service_id == 28, "Died on +.services[6].service.service_id"
    assert result.services[6].service.iscsi_port == 0, "Died on +.services[6].service.iscsi_port"
    assert result.services[6].service.started_drive_ids[0] == 8, "Died on +.services[6].service.started_drive_ids[0]"
    assert result.services[6].service.first_time_startup == False, "Died on +.services[6].service.first_time_startup"
    assert result.services[6].service.drive_ids[0] == 8, "Died on +.services[6].service.drive_ids[0]"
    assert result.services[6].service.associated_ts == 0, "Died on +.services[6].service.associated_ts"
    assert result.services[6].drive.slot == 6, "Died on +.services[6].drive.slot"
    assert result.services[6].drive.capacity == 300069052416, "Died on +.services[6].drive.capacity"
    assert result.services[6].drive.drive_status == """assigned""", "Died on +.services[6].drive.drive_status"
    assert result.services[6].drive.node_id == 4, "Died on +.services[6].drive.node_id"
    assert result.services[6].drive.drive_id == 8, "Died on +.services[6].drive.drive_id"
    assert result.services[6].drive.customer_slice_file_capacity == 0, "Died on +.services[6].drive.customer_slice_file_capacity"
    assert result.services[6].drive.assigned_service == 28, "Died on +.services[6].drive.assigned_service"
    assert type(result.services[6].drive.attributes) is dict, "Died on .services[6].drive.attributes"
    assert result.services[6].drive.drive_type == """block""", "Died on +.services[6].drive.drive_type"
    assert result.services[6].drive.serial == """scsi-SATA_INTEL_SSDSA2CW3BTPR227401S0300EGN""", "Died on +.services[6].drive.serial"
    assert result.services[6].drive.reserved_slice_file_capacity == 0, "Died on +.services[6].drive.reserved_slice_file_capacity"
    assert result.services[5].node.sip == """10.117.62.25""", "Died on +.services[5].node.sip"
    assert result.services[5].node.uuid == UUID("4C4C4544-0053-3310-8053-B6C04F435831"), "Died on .services[5].node.uuid"
    assert result.services[5].node.name == """SF-F2A3""", "Died on +.services[5].node.name"
    assert result.services[5].node.platform_info.node_type == """SF3010""", "Died on +.services[5].node.platform_info.node_type"
    assert result.services[5].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[5].node.platform_info.cpu_model"
    assert result.services[5].node.platform_info.node_memory_gb == 72, "Died on +.services[5].node.platform_info.node_memory_gb"
    assert result.services[5].node.platform_info.chassis_type == """R620""", "Died on +.services[5].node.platform_info.chassis_type"
    assert result.services[5].node.node_id == 3, "Died on +.services[5].node.node_id"
    assert result.services[5].node.mipi == """Bond1G""", "Died on +.services[5].node.mipi"
    assert result.services[5].node.sipi == """Bond10G""", "Died on +.services[5].node.sipi"
    assert result.services[5].node.software_version == """9.0.0.1554""", "Died on +.services[5].node.software_version"
    assert result.services[5].node.cip == """10.117.62.25""", "Died on +.services[5].node.cip"
    assert result.services[5].node.fibre_channel_target_port_group is None, "Died on .services[5].node.fibre_channel_target_port_group"
    assert result.services[5].node.mip == """10.117.60.25""", "Died on +.services[5].node.mip"
    assert result.services[5].node.associated_fservice_id == 0, "Died on +.services[5].node.associated_fservice_id"
    assert result.services[5].node.associated_master_service_id == 4, "Died on +.services[5].node.associated_master_service_id"
    assert result.services[5].node.cipi == """Bond10G""", "Died on +.services[5].node.cipi"
    assert type(result.services[5].node.attributes) is dict, "Died on .services[5].node.attributes"
    assert result.services[5].drives[0].slot == 6, "Died on +.services[5].drives[0].slot"
    assert result.services[5].drives[0].capacity == 300069052416, "Died on +.services[5].drives[0].capacity"
    assert result.services[5].drives[0].drive_status == """assigned""", "Died on +.services[5].drives[0].drive_status"
    assert result.services[5].drives[0].node_id == 3, "Died on +.services[5].drives[0].node_id"
    assert result.services[5].drives[0].drive_id == 19, "Died on +.services[5].drives[0].drive_id"
    assert result.services[5].drives[0].customer_slice_file_capacity == 0, "Died on +.services[5].drives[0].customer_slice_file_capacity"
    assert result.services[5].drives[0].assigned_service == 27, "Died on +.services[5].drives[0].assigned_service"
    assert type(result.services[5].drives[0].attributes) is dict, "Died on .services[5].drives[0].attributes"
    assert result.services[5].drives[0].drive_type == """Block""", "Died on +.services[5].drives[0].drive_type"
    assert result.services[5].drives[0].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL307103KD300PGN""", "Died on +.services[5].drives[0].serial"
    assert result.services[5].drives[0].reserved_slice_file_capacity == 0, "Died on +.services[5].drives[0].reserved_slice_file_capacity"
    assert result.services[5].service.status == """healthy""", "Died on +.services[5].service.status"
    assert result.services[5].service.associated_bv == 0, "Died on +.services[5].service.associated_bv"
    assert result.services[5].service.associated_vs == 0, "Died on +.services[5].service.associated_vs"
    assert result.services[5].service.ipc_port == 4011, "Died on +.services[5].service.ipc_port"
    assert result.services[5].service.node_id == 3, "Died on +.services[5].service.node_id"
    assert result.services[5].service.service_type == """block""", "Died on +.services[5].service.service_type"
    assert result.services[5].service.drive_id == 19, "Died on +.services[5].service.drive_id"
    assert result.services[5].service.service_id == 27, "Died on +.services[5].service.service_id"
    assert result.services[5].service.iscsi_port == 0, "Died on +.services[5].service.iscsi_port"
    assert result.services[5].service.started_drive_ids[0] == 19, "Died on +.services[5].service.started_drive_ids[0]"
    assert result.services[5].service.first_time_startup == False, "Died on +.services[5].service.first_time_startup"
    assert result.services[5].service.drive_ids[0] == 19, "Died on +.services[5].service.drive_ids[0]"
    assert result.services[5].service.associated_ts == 0, "Died on +.services[5].service.associated_ts"
    assert result.services[5].drive.slot == 6, "Died on +.services[5].drive.slot"
    assert result.services[5].drive.capacity == 300069052416, "Died on +.services[5].drive.capacity"
    assert result.services[5].drive.drive_status == """assigned""", "Died on +.services[5].drive.drive_status"
    assert result.services[5].drive.node_id == 3, "Died on +.services[5].drive.node_id"
    assert result.services[5].drive.drive_id == 19, "Died on +.services[5].drive.drive_id"
    assert result.services[5].drive.customer_slice_file_capacity == 0, "Died on +.services[5].drive.customer_slice_file_capacity"
    assert result.services[5].drive.assigned_service == 27, "Died on +.services[5].drive.assigned_service"
    assert type(result.services[5].drive.attributes) is dict, "Died on .services[5].drive.attributes"
    assert result.services[5].drive.drive_type == """block""", "Died on +.services[5].drive.drive_type"
    assert result.services[5].drive.serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL307103KD300PGN""", "Died on +.services[5].drive.serial"
    assert result.services[5].drive.reserved_slice_file_capacity == 0, "Died on +.services[5].drive.reserved_slice_file_capacity"
    assert result.services[4].node.sip == """10.117.62.26""", "Died on +.services[4].node.sip"
    assert result.services[4].node.uuid == UUID("4C4C4544-0053-3210-8054-B6C04F435831"), "Died on .services[4].node.uuid"
    assert result.services[4].node.name == """SF-1713""", "Died on +.services[4].node.name"
    assert result.services[4].node.platform_info.node_type == """SF3010""", "Died on +.services[4].node.platform_info.node_type"
    assert result.services[4].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[4].node.platform_info.cpu_model"
    assert result.services[4].node.platform_info.node_memory_gb == 72, "Died on +.services[4].node.platform_info.node_memory_gb"
    assert result.services[4].node.platform_info.chassis_type == """R620""", "Died on +.services[4].node.platform_info.chassis_type"
    assert result.services[4].node.node_id == 4, "Died on +.services[4].node.node_id"
    assert result.services[4].node.mipi == """Bond1G""", "Died on +.services[4].node.mipi"
    assert result.services[4].node.sipi == """Bond10G""", "Died on +.services[4].node.sipi"
    assert result.services[4].node.software_version == """9.0.0.1554""", "Died on +.services[4].node.software_version"
    assert result.services[4].node.cip == """10.117.62.26""", "Died on +.services[4].node.cip"
    assert result.services[4].node.fibre_channel_target_port_group is None, "Died on .services[4].node.fibre_channel_target_port_group"
    assert result.services[4].node.mip == """10.117.60.26""", "Died on +.services[4].node.mip"
    assert result.services[4].node.associated_fservice_id == 0, "Died on +.services[4].node.associated_fservice_id"
    assert result.services[4].node.associated_master_service_id == 3, "Died on +.services[4].node.associated_master_service_id"
    assert result.services[4].node.cipi == """Bond10G""", "Died on +.services[4].node.cipi"
    assert type(result.services[4].node.attributes) is dict, "Died on .services[4].node.attributes"
    assert result.services[4].drives[0].slot == 5, "Died on +.services[4].drives[0].slot"
    assert result.services[4].drives[0].capacity == 300069052416, "Died on +.services[4].drives[0].capacity"
    assert result.services[4].drives[0].drive_status == """assigned""", "Died on +.services[4].drives[0].drive_status"
    assert result.services[4].drives[0].node_id == 4, "Died on +.services[4].drives[0].node_id"
    assert result.services[4].drives[0].drive_id == 7, "Died on +.services[4].drives[0].drive_id"
    assert result.services[4].drives[0].customer_slice_file_capacity == 0, "Died on +.services[4].drives[0].customer_slice_file_capacity"
    assert result.services[4].drives[0].assigned_service == 26, "Died on +.services[4].drives[0].assigned_service"
    assert type(result.services[4].drives[0].attributes) is dict, "Died on .services[4].drives[0].attributes"
    assert result.services[4].drives[0].drive_type == """Block""", "Died on +.services[4].drives[0].drive_type"
    assert result.services[4].drives[0].serial == """scsi-SATA_INTEL_SSDSA2BW3CVPR120504CK300EGN""", "Died on +.services[4].drives[0].serial"
    assert result.services[4].drives[0].reserved_slice_file_capacity == 0, "Died on +.services[4].drives[0].reserved_slice_file_capacity"
    assert result.services[4].service.status == """healthy""", "Died on +.services[4].service.status"
    assert result.services[4].service.associated_bv == 0, "Died on +.services[4].service.associated_bv"
    assert result.services[4].service.associated_vs == 0, "Died on +.services[4].service.associated_vs"
    assert result.services[4].service.ipc_port == 4010, "Died on +.services[4].service.ipc_port"
    assert result.services[4].service.node_id == 4, "Died on +.services[4].service.node_id"
    assert result.services[4].service.service_type == """block""", "Died on +.services[4].service.service_type"
    assert result.services[4].service.drive_id == 7, "Died on +.services[4].service.drive_id"
    assert result.services[4].service.service_id == 26, "Died on +.services[4].service.service_id"
    assert result.services[4].service.iscsi_port == 0, "Died on +.services[4].service.iscsi_port"
    assert result.services[4].service.started_drive_ids[0] == 7, "Died on +.services[4].service.started_drive_ids[0]"
    assert result.services[4].service.first_time_startup == False, "Died on +.services[4].service.first_time_startup"
    assert result.services[4].service.drive_ids[0] == 7, "Died on +.services[4].service.drive_ids[0]"
    assert result.services[4].service.associated_ts == 0, "Died on +.services[4].service.associated_ts"
    assert result.services[4].drive.slot == 5, "Died on +.services[4].drive.slot"
    assert result.services[4].drive.capacity == 300069052416, "Died on +.services[4].drive.capacity"
    assert result.services[4].drive.drive_status == """assigned""", "Died on +.services[4].drive.drive_status"
    assert result.services[4].drive.node_id == 4, "Died on +.services[4].drive.node_id"
    assert result.services[4].drive.drive_id == 7, "Died on +.services[4].drive.drive_id"
    assert result.services[4].drive.customer_slice_file_capacity == 0, "Died on +.services[4].drive.customer_slice_file_capacity"
    assert result.services[4].drive.assigned_service == 26, "Died on +.services[4].drive.assigned_service"
    assert type(result.services[4].drive.attributes) is dict, "Died on .services[4].drive.attributes"
    assert result.services[4].drive.drive_type == """block""", "Died on +.services[4].drive.drive_type"
    assert result.services[4].drive.serial == """scsi-SATA_INTEL_SSDSA2BW3CVPR120504CK300EGN""", "Died on +.services[4].drive.serial"
    assert result.services[4].drive.reserved_slice_file_capacity == 0, "Died on +.services[4].drive.reserved_slice_file_capacity"
    assert result.services[3].node.sip == """10.117.62.25""", "Died on +.services[3].node.sip"
    assert result.services[3].node.uuid == UUID("4C4C4544-0053-3310-8053-B6C04F435831"), "Died on .services[3].node.uuid"
    assert result.services[3].node.name == """SF-F2A3""", "Died on +.services[3].node.name"
    assert result.services[3].node.platform_info.node_type == """SF3010""", "Died on +.services[3].node.platform_info.node_type"
    assert result.services[3].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[3].node.platform_info.cpu_model"
    assert result.services[3].node.platform_info.node_memory_gb == 72, "Died on +.services[3].node.platform_info.node_memory_gb"
    assert result.services[3].node.platform_info.chassis_type == """R620""", "Died on +.services[3].node.platform_info.chassis_type"
    assert result.services[3].node.node_id == 3, "Died on +.services[3].node.node_id"
    assert result.services[3].node.mipi == """Bond1G""", "Died on +.services[3].node.mipi"
    assert result.services[3].node.sipi == """Bond10G""", "Died on +.services[3].node.sipi"
    assert result.services[3].node.software_version == """9.0.0.1554""", "Died on +.services[3].node.software_version"
    assert result.services[3].node.cip == """10.117.62.25""", "Died on +.services[3].node.cip"
    assert result.services[3].node.fibre_channel_target_port_group is None, "Died on .services[3].node.fibre_channel_target_port_group"
    assert result.services[3].node.mip == """10.117.60.25""", "Died on +.services[3].node.mip"
    assert result.services[3].node.associated_fservice_id == 0, "Died on +.services[3].node.associated_fservice_id"
    assert result.services[3].node.associated_master_service_id == 4, "Died on +.services[3].node.associated_master_service_id"
    assert result.services[3].node.cipi == """Bond10G""", "Died on +.services[3].node.cipi"
    assert type(result.services[3].node.attributes) is dict, "Died on .services[3].node.attributes"
    assert result.services[3].drives[0].slot == 5, "Died on +.services[3].drives[0].slot"
    assert result.services[3].drives[0].capacity == 300069052416, "Died on +.services[3].drives[0].capacity"
    assert result.services[3].drives[0].drive_status == """assigned""", "Died on +.services[3].drives[0].drive_status"
    assert result.services[3].drives[0].node_id == 3, "Died on +.services[3].drives[0].node_id"
    assert result.services[3].drives[0].drive_id == 18, "Died on +.services[3].drives[0].drive_id"
    assert result.services[3].drives[0].customer_slice_file_capacity == 0, "Died on +.services[3].drives[0].customer_slice_file_capacity"
    assert result.services[3].drives[0].assigned_service == 25, "Died on +.services[3].drives[0].assigned_service"
    assert type(result.services[3].drives[0].attributes) is dict, "Died on .services[3].drives[0].attributes"
    assert result.services[3].drives[0].drive_type == """Block""", "Died on +.services[3].drives[0].drive_type"
    assert result.services[3].drives[0].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL31130138300PGN""", "Died on +.services[3].drives[0].serial"
    assert result.services[3].drives[0].reserved_slice_file_capacity == 0, "Died on +.services[3].drives[0].reserved_slice_file_capacity"
    assert result.services[3].service.status == """healthy""", "Died on +.services[3].service.status"
    assert result.services[3].service.associated_bv == 0, "Died on +.services[3].service.associated_bv"
    assert result.services[3].service.associated_vs == 0, "Died on +.services[3].service.associated_vs"
    assert result.services[3].service.ipc_port == 4010, "Died on +.services[3].service.ipc_port"
    assert result.services[3].service.node_id == 3, "Died on +.services[3].service.node_id"
    assert result.services[3].service.service_type == """block""", "Died on +.services[3].service.service_type"
    assert result.services[3].service.drive_id == 18, "Died on +.services[3].service.drive_id"
    assert result.services[3].service.service_id == 25, "Died on +.services[3].service.service_id"
    assert result.services[3].service.iscsi_port == 0, "Died on +.services[3].service.iscsi_port"
    assert result.services[3].service.started_drive_ids[0] == 18, "Died on +.services[3].service.started_drive_ids[0]"
    assert result.services[3].service.first_time_startup == False, "Died on +.services[3].service.first_time_startup"
    assert result.services[3].service.drive_ids[0] == 18, "Died on +.services[3].service.drive_ids[0]"
    assert result.services[3].service.associated_ts == 0, "Died on +.services[3].service.associated_ts"
    assert result.services[3].drive.slot == 5, "Died on +.services[3].drive.slot"
    assert result.services[3].drive.capacity == 300069052416, "Died on +.services[3].drive.capacity"
    assert result.services[3].drive.drive_status == """assigned""", "Died on +.services[3].drive.drive_status"
    assert result.services[3].drive.node_id == 3, "Died on +.services[3].drive.node_id"
    assert result.services[3].drive.drive_id == 18, "Died on +.services[3].drive.drive_id"
    assert result.services[3].drive.customer_slice_file_capacity == 0, "Died on +.services[3].drive.customer_slice_file_capacity"
    assert result.services[3].drive.assigned_service == 25, "Died on +.services[3].drive.assigned_service"
    assert type(result.services[3].drive.attributes) is dict, "Died on .services[3].drive.attributes"
    assert result.services[3].drive.drive_type == """block""", "Died on +.services[3].drive.drive_type"
    assert result.services[3].drive.serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL31130138300PGN""", "Died on +.services[3].drive.serial"
    assert result.services[3].drive.reserved_slice_file_capacity == 0, "Died on +.services[3].drive.reserved_slice_file_capacity"
    assert result.services[2].node.sip == """10.117.62.26""", "Died on +.services[2].node.sip"
    assert result.services[2].node.uuid == UUID("4C4C4544-0053-3210-8054-B6C04F435831"), "Died on .services[2].node.uuid"
    assert result.services[2].node.name == """SF-1713""", "Died on +.services[2].node.name"
    assert result.services[2].node.platform_info.node_type == """SF3010""", "Died on +.services[2].node.platform_info.node_type"
    assert result.services[2].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[2].node.platform_info.cpu_model"
    assert result.services[2].node.platform_info.node_memory_gb == 72, "Died on +.services[2].node.platform_info.node_memory_gb"
    assert result.services[2].node.platform_info.chassis_type == """R620""", "Died on +.services[2].node.platform_info.chassis_type"
    assert result.services[2].node.node_id == 4, "Died on +.services[2].node.node_id"
    assert result.services[2].node.mipi == """Bond1G""", "Died on +.services[2].node.mipi"
    assert result.services[2].node.sipi == """Bond10G""", "Died on +.services[2].node.sipi"
    assert result.services[2].node.software_version == """9.0.0.1554""", "Died on +.services[2].node.software_version"
    assert result.services[2].node.cip == """10.117.62.26""", "Died on +.services[2].node.cip"
    assert result.services[2].node.fibre_channel_target_port_group is None, "Died on .services[2].node.fibre_channel_target_port_group"
    assert result.services[2].node.mip == """10.117.60.26""", "Died on +.services[2].node.mip"
    assert result.services[2].node.associated_fservice_id == 0, "Died on +.services[2].node.associated_fservice_id"
    assert result.services[2].node.associated_master_service_id == 3, "Died on +.services[2].node.associated_master_service_id"
    assert result.services[2].node.cipi == """Bond10G""", "Died on +.services[2].node.cipi"
    assert type(result.services[2].node.attributes) is dict, "Died on .services[2].node.attributes"
    assert result.services[2].drives[0].slot == 4, "Died on +.services[2].drives[0].slot"
    assert result.services[2].drives[0].capacity == 300069052416, "Died on +.services[2].drives[0].capacity"
    assert result.services[2].drives[0].drive_status == """assigned""", "Died on +.services[2].drives[0].drive_status"
    assert result.services[2].drives[0].node_id == 4, "Died on +.services[2].drives[0].node_id"
    assert result.services[2].drives[0].drive_id == 6, "Died on +.services[2].drives[0].drive_id"
    assert result.services[2].drives[0].customer_slice_file_capacity == 0, "Died on +.services[2].drives[0].customer_slice_file_capacity"
    assert result.services[2].drives[0].assigned_service == 24, "Died on +.services[2].drives[0].assigned_service"
    assert type(result.services[2].drives[0].attributes) is dict, "Died on .services[2].drives[0].attributes"
    assert result.services[2].drives[0].drive_type == """Block""", "Died on +.services[2].drives[0].drive_type"
    assert result.services[2].drives[0].serial == """scsi-SATA_INTEL_SSDSA2CW3BTPR227401VN300EGN""", "Died on +.services[2].drives[0].serial"
    assert result.services[2].drives[0].reserved_slice_file_capacity == 0, "Died on +.services[2].drives[0].reserved_slice_file_capacity"
    assert result.services[2].service.status == """healthy""", "Died on +.services[2].service.status"
    assert result.services[2].service.associated_bv == 0, "Died on +.services[2].service.associated_bv"
    assert result.services[2].service.associated_vs == 0, "Died on +.services[2].service.associated_vs"
    assert result.services[2].service.ipc_port == 4009, "Died on +.services[2].service.ipc_port"
    assert result.services[2].service.node_id == 4, "Died on +.services[2].service.node_id"
    assert result.services[2].service.service_type == """block""", "Died on +.services[2].service.service_type"
    assert result.services[2].service.drive_id == 6, "Died on +.services[2].service.drive_id"
    assert result.services[2].service.service_id == 24, "Died on +.services[2].service.service_id"
    assert result.services[2].service.iscsi_port == 0, "Died on +.services[2].service.iscsi_port"
    assert result.services[2].service.started_drive_ids[0] == 6, "Died on +.services[2].service.started_drive_ids[0]"
    assert result.services[2].service.first_time_startup == False, "Died on +.services[2].service.first_time_startup"
    assert result.services[2].service.drive_ids[0] == 6, "Died on +.services[2].service.drive_ids[0]"
    assert result.services[2].service.associated_ts == 0, "Died on +.services[2].service.associated_ts"
    assert result.services[2].drive.slot == 4, "Died on +.services[2].drive.slot"
    assert result.services[2].drive.capacity == 300069052416, "Died on +.services[2].drive.capacity"
    assert result.services[2].drive.drive_status == """assigned""", "Died on +.services[2].drive.drive_status"
    assert result.services[2].drive.node_id == 4, "Died on +.services[2].drive.node_id"
    assert result.services[2].drive.drive_id == 6, "Died on +.services[2].drive.drive_id"
    assert result.services[2].drive.customer_slice_file_capacity == 0, "Died on +.services[2].drive.customer_slice_file_capacity"
    assert result.services[2].drive.assigned_service == 24, "Died on +.services[2].drive.assigned_service"
    assert type(result.services[2].drive.attributes) is dict, "Died on .services[2].drive.attributes"
    assert result.services[2].drive.drive_type == """block""", "Died on +.services[2].drive.drive_type"
    assert result.services[2].drive.serial == """scsi-SATA_INTEL_SSDSA2CW3BTPR227401VN300EGN""", "Died on +.services[2].drive.serial"
    assert result.services[2].drive.reserved_slice_file_capacity == 0, "Died on +.services[2].drive.reserved_slice_file_capacity"
    assert result.services[1].node.sip == """10.117.62.25""", "Died on +.services[1].node.sip"
    assert result.services[1].node.uuid == UUID("4C4C4544-0053-3310-8053-B6C04F435831"), "Died on .services[1].node.uuid"
    assert result.services[1].node.name == """SF-F2A3""", "Died on +.services[1].node.name"
    assert result.services[1].node.platform_info.node_type == """SF3010""", "Died on +.services[1].node.platform_info.node_type"
    assert result.services[1].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[1].node.platform_info.cpu_model"
    assert result.services[1].node.platform_info.node_memory_gb == 72, "Died on +.services[1].node.platform_info.node_memory_gb"
    assert result.services[1].node.platform_info.chassis_type == """R620""", "Died on +.services[1].node.platform_info.chassis_type"
    assert result.services[1].node.node_id == 3, "Died on +.services[1].node.node_id"
    assert result.services[1].node.mipi == """Bond1G""", "Died on +.services[1].node.mipi"
    assert result.services[1].node.sipi == """Bond10G""", "Died on +.services[1].node.sipi"
    assert result.services[1].node.software_version == """9.0.0.1554""", "Died on +.services[1].node.software_version"
    assert result.services[1].node.cip == """10.117.62.25""", "Died on +.services[1].node.cip"
    assert result.services[1].node.fibre_channel_target_port_group is None, "Died on .services[1].node.fibre_channel_target_port_group"
    assert result.services[1].node.mip == """10.117.60.25""", "Died on +.services[1].node.mip"
    assert result.services[1].node.associated_fservice_id == 0, "Died on +.services[1].node.associated_fservice_id"
    assert result.services[1].node.associated_master_service_id == 4, "Died on +.services[1].node.associated_master_service_id"
    assert result.services[1].node.cipi == """Bond10G""", "Died on +.services[1].node.cipi"
    assert type(result.services[1].node.attributes) is dict, "Died on .services[1].node.attributes"
    assert result.services[1].drives[0].slot == 4, "Died on +.services[1].drives[0].slot"
    assert result.services[1].drives[0].capacity == 300069052416, "Died on +.services[1].drives[0].capacity"
    assert result.services[1].drives[0].drive_status == """assigned""", "Died on +.services[1].drives[0].drive_status"
    assert result.services[1].drives[0].node_id == 3, "Died on +.services[1].drives[0].node_id"
    assert result.services[1].drives[0].drive_id == 17, "Died on +.services[1].drives[0].drive_id"
    assert result.services[1].drives[0].customer_slice_file_capacity == 0, "Died on +.services[1].drives[0].customer_slice_file_capacity"
    assert result.services[1].drives[0].assigned_service == 23, "Died on +.services[1].drives[0].assigned_service"
    assert type(result.services[1].drives[0].attributes) is dict, "Died on .services[1].drives[0].attributes"
    assert result.services[1].drives[0].drive_type == """Block""", "Died on +.services[1].drives[0].drive_type"
    assert result.services[1].drives[0].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL311300X7300PGN""", "Died on +.services[1].drives[0].serial"
    assert result.services[1].drives[0].reserved_slice_file_capacity == 0, "Died on +.services[1].drives[0].reserved_slice_file_capacity"
    assert result.services[1].service.status == """healthy""", "Died on +.services[1].service.status"
    assert result.services[1].service.associated_bv == 0, "Died on +.services[1].service.associated_bv"
    assert result.services[1].service.associated_vs == 0, "Died on +.services[1].service.associated_vs"
    assert result.services[1].service.ipc_port == 4009, "Died on +.services[1].service.ipc_port"
    assert result.services[1].service.node_id == 3, "Died on +.services[1].service.node_id"
    assert result.services[1].service.service_type == """block""", "Died on +.services[1].service.service_type"
    assert result.services[1].service.drive_id == 17, "Died on +.services[1].service.drive_id"
    assert result.services[1].service.service_id == 23, "Died on +.services[1].service.service_id"
    assert result.services[1].service.iscsi_port == 0, "Died on +.services[1].service.iscsi_port"
    assert result.services[1].service.started_drive_ids[0] == 17, "Died on +.services[1].service.started_drive_ids[0]"
    assert result.services[1].service.first_time_startup == False, "Died on +.services[1].service.first_time_startup"
    assert result.services[1].service.drive_ids[0] == 17, "Died on +.services[1].service.drive_ids[0]"
    assert result.services[1].service.associated_ts == 0, "Died on +.services[1].service.associated_ts"
    assert result.services[1].drive.slot == 4, "Died on +.services[1].drive.slot"
    assert result.services[1].drive.capacity == 300069052416, "Died on +.services[1].drive.capacity"
    assert result.services[1].drive.drive_status == """assigned""", "Died on +.services[1].drive.drive_status"
    assert result.services[1].drive.node_id == 3, "Died on +.services[1].drive.node_id"
    assert result.services[1].drive.drive_id == 17, "Died on +.services[1].drive.drive_id"
    assert result.services[1].drive.customer_slice_file_capacity == 0, "Died on +.services[1].drive.customer_slice_file_capacity"
    assert result.services[1].drive.assigned_service == 23, "Died on +.services[1].drive.assigned_service"
    assert type(result.services[1].drive.attributes) is dict, "Died on .services[1].drive.attributes"
    assert result.services[1].drive.drive_type == """block""", "Died on +.services[1].drive.drive_type"
    assert result.services[1].drive.serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL311300X7300PGN""", "Died on +.services[1].drive.serial"
    assert result.services[1].drive.reserved_slice_file_capacity == 0, "Died on +.services[1].drive.reserved_slice_file_capacity"
    assert result.services[0].node.sip == """10.117.62.26""", "Died on +.services[0].node.sip"
    assert result.services[0].node.uuid == UUID("4C4C4544-0053-3210-8054-B6C04F435831"), "Died on .services[0].node.uuid"
    assert result.services[0].node.name == """SF-1713""", "Died on +.services[0].node.name"
    assert result.services[0].node.platform_info.node_type == """SF3010""", "Died on +.services[0].node.platform_info.node_type"
    assert result.services[0].node.platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.services[0].node.platform_info.cpu_model"
    assert result.services[0].node.platform_info.node_memory_gb == 72, "Died on +.services[0].node.platform_info.node_memory_gb"
    assert result.services[0].node.platform_info.chassis_type == """R620""", "Died on +.services[0].node.platform_info.chassis_type"
    assert result.services[0].node.node_id == 4, "Died on +.services[0].node.node_id"
    assert result.services[0].node.mipi == """Bond1G""", "Died on +.services[0].node.mipi"
    assert result.services[0].node.sipi == """Bond10G""", "Died on +.services[0].node.sipi"
    assert result.services[0].node.software_version == """9.0.0.1554""", "Died on +.services[0].node.software_version"
    assert result.services[0].node.cip == """10.117.62.26""", "Died on +.services[0].node.cip"
    assert result.services[0].node.fibre_channel_target_port_group is None, "Died on .services[0].node.fibre_channel_target_port_group"
    assert result.services[0].node.mip == """10.117.60.26""", "Died on +.services[0].node.mip"
    assert result.services[0].node.associated_fservice_id == 0, "Died on +.services[0].node.associated_fservice_id"
    assert result.services[0].node.associated_master_service_id == 3, "Died on +.services[0].node.associated_master_service_id"
    assert result.services[0].node.cipi == """Bond10G""", "Died on +.services[0].node.cipi"
    assert type(result.services[0].node.attributes) is dict, "Died on .services[0].node.attributes"
    assert result.services[0].drives[0].slot == 3, "Died on +.services[0].drives[0].slot"
    assert result.services[0].drives[0].capacity == 300069052416, "Died on +.services[0].drives[0].capacity"
    assert result.services[0].drives[0].drive_status == """assigned""", "Died on +.services[0].drives[0].drive_status"
    assert result.services[0].drives[0].node_id == 4, "Died on +.services[0].drives[0].node_id"
    assert result.services[0].drives[0].drive_id == 5, "Died on +.services[0].drives[0].drive_id"
    assert result.services[0].drives[0].customer_slice_file_capacity == 0, "Died on +.services[0].drives[0].customer_slice_file_capacity"
    assert result.services[0].drives[0].assigned_service == 22, "Died on +.services[0].drives[0].assigned_service"
    assert type(result.services[0].drives[0].attributes) is dict, "Died on .services[0].drives[0].attributes"
    assert result.services[0].drives[0].drive_type == """Block""", "Died on +.services[0].drives[0].drive_type"
    assert result.services[0].drives[0].serial == """scsi-SATA_INTEL_SSDSA2CW3CVPR132402D3300EGN""", "Died on +.services[0].drives[0].serial"
    assert result.services[0].drives[0].reserved_slice_file_capacity == 0, "Died on +.services[0].drives[0].reserved_slice_file_capacity"
    assert result.services[0].service.status == """healthy""", "Died on +.services[0].service.status"
    assert result.services[0].service.associated_bv == 0, "Died on +.services[0].service.associated_bv"
    assert result.services[0].service.associated_vs == 0, "Died on +.services[0].service.associated_vs"
    assert result.services[0].service.ipc_port == 4008, "Died on +.services[0].service.ipc_port"
    assert result.services[0].service.node_id == 4, "Died on +.services[0].service.node_id"
    assert result.services[0].service.service_type == """block""", "Died on +.services[0].service.service_type"
    assert result.services[0].service.drive_id == 5, "Died on +.services[0].service.drive_id"
    assert result.services[0].service.service_id == 22, "Died on +.services[0].service.service_id"
    assert result.services[0].service.iscsi_port == 0, "Died on +.services[0].service.iscsi_port"
    assert result.services[0].service.started_drive_ids[0] == 5, "Died on +.services[0].service.started_drive_ids[0]"
    assert result.services[0].service.first_time_startup == False, "Died on +.services[0].service.first_time_startup"
    assert result.services[0].service.drive_ids[0] == 5, "Died on +.services[0].service.drive_ids[0]"
    assert result.services[0].service.associated_ts == 0, "Died on +.services[0].service.associated_ts"
    assert result.services[0].drive.slot == 3, "Died on +.services[0].drive.slot"
    assert result.services[0].drive.capacity == 300069052416, "Died on +.services[0].drive.capacity"
    assert result.services[0].drive.drive_status == """assigned""", "Died on +.services[0].drive.drive_status"
    assert result.services[0].drive.node_id == 4, "Died on +.services[0].drive.node_id"
    assert result.services[0].drive.drive_id == 5, "Died on +.services[0].drive.drive_id"
    assert result.services[0].drive.customer_slice_file_capacity == 0, "Died on +.services[0].drive.customer_slice_file_capacity"
    assert result.services[0].drive.assigned_service == 22, "Died on +.services[0].drive.assigned_service"
    assert type(result.services[0].drive.attributes) is dict, "Died on .services[0].drive.attributes"
    assert result.services[0].drive.drive_type == """block""", "Died on +.services[0].drive.drive_type"
    assert result.services[0].drive.serial == """scsi-SATA_INTEL_SSDSA2CW3CVPR132402D3300EGN""", "Died on +.services[0].drive.serial"
    assert result.services[0].drive.reserved_slice_file_capacity == 0, "Died on +.services[0].drive.reserved_slice_file_capacity"

def test_list_snapshots_v8_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListSnapshots_v8_0)

    
    volume_id = 42 # volume_id
    result = ef.list_snapshots()
    assert result.snapshots[0].status == """done""", "Died on +.snapshots[0].status"
    assert result.snapshots[0].name == """haxepyBR2J5nx4-Rv-Q8Xe704OWucxrNMHmBKalCRrlzbjGu7Fri-F6A1om9l1qU""", "Died on +.snapshots[0].name"
    assert result.snapshots[0].total_size == 1000341504, "Died on +.snapshots[0].total_size"
    assert result.snapshots[0].snapshot_uuid == UUID("c78bf699-3b5d-4ba2-9558-72ded9a71257"), "Died on .snapshots[0].snapshot_uuid"
    assert result.snapshots[0].expiration_reason == """None""", "Died on +.snapshots[0].expiration_reason"
    assert result.snapshots[0].enable_remote_replication == False, "Died on +.snapshots[0].enable_remote_replication"
    assert result.snapshots[0].volume_id == 6452, "Died on +.snapshots[0].volume_id"
    assert result.snapshots[0].group_id == 0, "Died on +.snapshots[0].group_id"
    assert result.snapshots[0].group_snapshot_uuid == UUID("00000000-0000-0000-0000-000000000000"), "Died on .snapshots[0].group_snapshot_uuid"
    assert result.snapshots[0].snapshot_id == 8136, "Died on +.snapshots[0].snapshot_id"
    assert type(result.snapshots[0].attributes) is dict, "Died on .snapshots[0].attributes"
    assert result.snapshots[0].expiration_time == """2017-01-13T16:07:36Z""", "Died on +.snapshots[0].expiration_time"
    assert result.snapshots[0].checksum == """0x0""", "Died on +.snapshots[0].checksum"
    assert result.snapshots[0].create_time == """2017-01-13T16:06:36Z""", "Died on +.snapshots[0].create_time"
    assert result.snapshots[0].virtual_volume_id is None, "Died on .snapshots[0].virtual_volume_id"

def test_list_snapshots_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListSnapshots_v9_0)

    
    volume_id = 42 # volume_id
    result = ef.list_snapshots()
    assert result.snapshots[0].status == """done""", "Died on +.snapshots[0].status"
    assert result.snapshots[0].name == """2016-12-06T22:49:03Z""", "Died on +.snapshots[0].name"
    assert result.snapshots[0].total_size == 20000538624, "Died on +.snapshots[0].total_size"
    assert result.snapshots[0].snapshot_uuid == UUID("db5633bc-d1e8-4674-b598-d58a3f265167"), "Died on .snapshots[0].snapshot_uuid"
    assert result.snapshots[0].remote_statuses[0].volume_pair_uuid == UUID("cb44f772-bb26-40f8-ab3b-8577282eb785"), "Died on .snapshots[0].remote_statuses[0].volume_pair_uuid"
    assert result.snapshots[0].remote_statuses[0].remote_status == """Syncing""", "Died on +.snapshots[0].remote_statuses[0].remote_status"
    assert result.snapshots[0].expiration_reason == """None""", "Died on +.snapshots[0].expiration_reason"
    assert result.snapshots[0].enable_remote_replication == True, "Died on +.snapshots[0].enable_remote_replication"
    assert result.snapshots[0].volume_id == 4, "Died on +.snapshots[0].volume_id"
    assert result.snapshots[0].create_time == """2016-12-06T22:49:03Z""", "Died on +.snapshots[0].create_time"
    assert result.snapshots[0].group_snapshot_uuid == UUID("00000000-0000-0000-0000-000000000000"), "Died on .snapshots[0].group_snapshot_uuid"
    assert type(result.snapshots[0].attributes) is dict, "Died on .snapshots[0].attributes"
    assert result.snapshots[0].snapshot_id == 2235, "Died on +.snapshots[0].snapshot_id"
    assert result.snapshots[0].expiration_time == """2016-12-07T22:49:03Z""", "Died on +.snapshots[0].expiration_time"
    assert result.snapshots[0].checksum == """0xc683fe2c00e085c3""", "Died on +.snapshots[0].checksum"
    assert result.snapshots[0].group_id == 0, "Died on +.snapshots[0].group_id"
    assert result.snapshots[0].virtual_volume_id is None, "Died on .snapshots[0].virtual_volume_id"

def test_list_storage_containers_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListStorageContainers_v9_0)

    
    storage_container_ids = UUID("2b0653fb-3d64-4ae0-9ef8-356e685b0b2e") # storage_container_ids
    result = ef.list_storage_containers()
    assert result.storage_containers[0].status == """active""", "Died on +.storage_containers[0].status"
    assert result.storage_containers[0].storage_container_id == UUID("47d5222b-0f2a-4e48-87ad-f7ec7ac03a4c"), "Died on .storage_containers[0].storage_container_id"
    assert result.storage_containers[0].name == """SPCust2""", "Died on +.storage_containers[0].name"
    assert result.storage_containers[0].virtual_volumes[1] == UUID("95a0ba3f-282b-4ff5-b10e-7887b37eb1b6"), "Died on .storage_containers[0].virtual_volumes[1]"
    assert result.storage_containers[0].virtual_volumes[0] == UUID("b191d6d7-0e23-4549-bb66-549aff13e762"), "Died on .storage_containers[0].virtual_volumes[0]"
    assert result.storage_containers[0].initiator_secret == """Z?8p980$L(TV20Gx""", "Died on +.storage_containers[0].initiator_secret"
    assert result.storage_containers[0].target_secret == """7vC3Dt6GKfCH!j!V""", "Died on +.storage_containers[0].target_secret"
    assert result.storage_containers[0].protocol_endpoint_type == """SCSI""", "Died on +.storage_containers[0].protocol_endpoint_type"
    assert result.storage_containers[0].account_id == 2, "Died on +.storage_containers[0].account_id"

def test_list_virtual_volume_bindings_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListVirtualVolumeBindings_v9_0)

    
    virtual_volume_binding_ids = 42 # virtual_volume_binding_ids
    result = ef.list_virtual_volume_bindings()
    assert result.bindings[0].virtual_volume_host_id == UUID("564de1a4-9a99-da0f-8b7c-3a41dfd64bf1"), "Died on .bindings[0].virtual_volume_host_id"
    assert result.bindings[0].protocol_endpoint_id == UUID("5dd53da0-b9b7-43f9-9b7e-b41c2558e92b"), "Died on .bindings[0].protocol_endpoint_id"
    assert result.bindings[0].virtual_volume_binding_id == 177, "Died on +.bindings[0].virtual_volume_binding_id"
    assert result.bindings[0].virtual_volume_secondary_id == """0xe200000000a6""", "Died on +.bindings[0].virtual_volume_secondary_id"
    assert result.bindings[0].protocol_endpoint_in_band_id == """naa.6f47acc2000000016a67746700000000""", "Died on +.bindings[0].protocol_endpoint_in_band_id"
    assert result.bindings[0].protocol_endpoint_type == """SCSI""", "Died on +.bindings[0].protocol_endpoint_type"
    assert result.bindings[0].virtual_volume_id == UUID("269d3378-1ca6-4175-a18f-6d4839e5c746"), "Died on .bindings[0].virtual_volume_id"

def test_list_virtual_volume_hosts_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListVirtualVolumeHosts_v9_0)

    
    virtual_volume_host_ids = UUID("2b0653fb-3d64-4ae0-9ef8-356e685b0b2e") # virtual_volume_host_ids
    result = ef.list_virtual_volume_hosts()
    assert result.hosts[0].visible_protocol_endpoint_ids[0] == UUID("5dd53da0-b9b7-43f9-9b7e-b41c2558e92b"), "Died on .hosts[0].visible_protocol_endpoint_ids[0]"
    assert result.hosts[0].virtual_volume_host_id == UUID("564de1a4-9a99-da0f-8b7c-3a41dfd64bf1"), "Died on .hosts[0].virtual_volume_host_id"
    assert result.hosts[0].initiator_names[1] == """iqn.1998-01.com.vmware:zdc-dhcp-0-c-29-d6-4b-f1-5bcf9254""", "Died on +.hosts[0].initiator_names[1]"
    assert result.hosts[0].initiator_names[0] == """iqn.1998-01.com.vmware:zdc-dhcp-0-c-29-d6-4b-f1-1a0cd614""", "Died on +.hosts[0].initiator_names[0]"
    assert result.hosts[0].cluster_id == UUID("5ebdb4ad-9617-4647-adfd-c1013578483b"), "Died on .hosts[0].cluster_id"
    assert result.hosts[0].host_address == """172.30.89.117""", "Died on +.hosts[0].host_address"

def test_list_virtual_volumes_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListVirtualVolumes_v9_0)

    
    details = True # details
    limit = 42 # limit
    recursive = True # recursive
    start_virtual_volume_id = UUID("2b0653fb-3d64-4ae0-9ef8-356e685b0b2e") # start_virtual_volume_id
    virtual_volume_ids = UUID("2b0653fb-3d64-4ae0-9ef8-356e685b0b2e") # virtual_volume_ids
    result = ef.list_virtual_volumes()
    assert result.virtual_volumes[0].status == """done""", "Died on +.virtual_volumes[0].status"
    assert result.virtual_volumes[0].snapshot_info is None, "Died on .virtual_volumes[0].snapshot_info"
    assert result.virtual_volumes[0].parent_virtual_volume_id == UUID("00000000-0000-0000-0000-000000000000"), "Died on .virtual_volumes[0].parent_virtual_volume_id"
    assert result.virtual_volumes[0].volume_info is None, "Died on .virtual_volumes[0].volume_info"
    assert result.virtual_volumes[0].storage_container.status == """active""", "Died on +.virtual_volumes[0].storage_container.status"
    assert result.virtual_volumes[0].storage_container.storage_container_id == UUID("abaab415-bedc-44cd-98b8-f37495884db0"), "Died on .virtual_volumes[0].storage_container.storage_container_id"
    assert result.virtual_volumes[0].storage_container.name == """test""", "Died on +.virtual_volumes[0].storage_container.name"
    assert result.virtual_volumes[0].storage_container.initiator_secret == """B5)D1y10K)8IDN58""", "Died on +.virtual_volumes[0].storage_container.initiator_secret"
    assert result.virtual_volumes[0].storage_container.target_secret == """qgae@{o{~82U)U^""", "Died on +.virtual_volumes[0].storage_container.target_secret"
    assert result.virtual_volumes[0].storage_container.protocol_endpoint_type == """SCSI""", "Died on +.virtual_volumes[0].storage_container.protocol_endpoint_type"
    assert result.virtual_volumes[0].storage_container.account_id == 1, "Died on +.virtual_volumes[0].storage_container.account_id"
    assert result.virtual_volumes[0].volume_id == 166, "Died on +.virtual_volumes[0].volume_id"
    assert result.virtual_volumes[0].virtual_volume_type == """config""", "Died on +.virtual_volumes[0].virtual_volume_type"
    assert result.virtual_volumes[0].snapshot_id == 0, "Died on +.virtual_volumes[0].snapshot_id"
    assert result.virtual_volumes[0].bindings[0] == 177, "Died on +.virtual_volumes[0].bindings[0]"
    assert type(result.virtual_volumes[0].metadata) is dict, "Died on .virtual_volumes[0].metadata"
    assert result.virtual_volumes[0].virtual_volume_id == UUID("269d3378-1ca6-4175-a18f-6d4839e5c746"), "Died on .virtual_volumes[0].virtual_volume_id"
    assert result.next_virtual_volume_id == UUID("00000000-0000-0000-0000-000000000000"), "Died on .next_virtual_volume_id"

def test_list_virtual_volumes_v9_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListVirtualVolumes_v9_1)

    
    details = True # details
    limit = 42 # limit
    recursive = True # recursive
    start_virtual_volume_id = UUID("2b0653fb-3d64-4ae0-9ef8-356e685b0b2e") # start_virtual_volume_id
    virtual_volume_ids = UUID("2b0653fb-3d64-4ae0-9ef8-356e685b0b2e") # virtual_volume_ids
    result = ef.list_virtual_volumes()
    assert result.virtual_volumes[9].status == """done""", "Died on +.virtual_volumes[9].status"
    assert result.virtual_volumes[9].snapshot_info is None, "Died on .virtual_volumes[9].snapshot_info"
    assert result.virtual_volumes[9].parent_virtual_volume_id == UUID("00000000-0000-0000-0000-000000000000"), "Died on .virtual_volumes[9].parent_virtual_volume_id"
    assert result.virtual_volumes[9].volume_info is None, "Died on .virtual_volumes[9].volume_info"
    assert result.virtual_volumes[9].storage_container.status == """active""", "Died on +.virtual_volumes[9].storage_container.status"
    assert result.virtual_volumes[9].storage_container.storage_container_id == UUID("f8ee427e-f858-420d-bd38-762ad1cb6cc3"), "Died on .virtual_volumes[9].storage_container.storage_container_id"
    assert result.virtual_volumes[9].storage_container.name == """akcluster1""", "Died on +.virtual_volumes[9].storage_container.name"
    assert result.virtual_volumes[9].storage_container.initiator_secret == """0&%Q2f$61(3#1TX%""", "Died on +.virtual_volumes[9].storage_container.initiator_secret"
    assert result.virtual_volumes[9].storage_container.target_secret == """[]6~98n1ltWn<cl%""", "Died on +.virtual_volumes[9].storage_container.target_secret"
    assert result.virtual_volumes[9].storage_container.protocol_endpoint_type == """SCSI""", "Died on +.virtual_volumes[9].storage_container.protocol_endpoint_type"
    assert result.virtual_volumes[9].storage_container.account_id == 2, "Died on +.virtual_volumes[9].storage_container.account_id"
    assert result.virtual_volumes[9].volume_id == 5, "Died on +.virtual_volumes[9].volume_id"
    assert result.virtual_volumes[9].virtual_volume_type == """data""", "Died on +.virtual_volumes[9].virtual_volume_type"
    assert result.virtual_volumes[9].snapshot_id == 0, "Died on +.virtual_volumes[9].snapshot_id"
    assert type(result.virtual_volumes[9].metadata) is dict, "Died on .virtual_volumes[9].metadata"
    assert result.virtual_volumes[9].virtual_volume_id == UUID("c983e671-23dd-45a1-9b7e-9b4f94c13534"), "Died on .virtual_volumes[9].virtual_volume_id"
    assert result.virtual_volumes[8].status == """done""", "Died on +.virtual_volumes[8].status"
    assert result.virtual_volumes[8].snapshot_info is None, "Died on .virtual_volumes[8].snapshot_info"
    assert result.virtual_volumes[8].parent_virtual_volume_id == UUID("00000000-0000-0000-0000-000000000000"), "Died on .virtual_volumes[8].parent_virtual_volume_id"
    assert result.virtual_volumes[8].volume_info is None, "Died on .virtual_volumes[8].volume_info"
    assert result.virtual_volumes[8].storage_container.status == """active""", "Died on +.virtual_volumes[8].storage_container.status"
    assert result.virtual_volumes[8].storage_container.storage_container_id == UUID("f8ee427e-f858-420d-bd38-762ad1cb6cc3"), "Died on .virtual_volumes[8].storage_container.storage_container_id"
    assert result.virtual_volumes[8].storage_container.name == """akcluster1""", "Died on +.virtual_volumes[8].storage_container.name"
    assert result.virtual_volumes[8].storage_container.initiator_secret == """0&%Q2f$61(3#1TX%""", "Died on +.virtual_volumes[8].storage_container.initiator_secret"
    assert result.virtual_volumes[8].storage_container.target_secret == """[]6~98n1ltWn<cl%""", "Died on +.virtual_volumes[8].storage_container.target_secret"
    assert result.virtual_volumes[8].storage_container.protocol_endpoint_type == """SCSI""", "Died on +.virtual_volumes[8].storage_container.protocol_endpoint_type"
    assert result.virtual_volumes[8].storage_container.account_id == 2, "Died on +.virtual_volumes[8].storage_container.account_id"
    assert result.virtual_volumes[8].volume_id == 9, "Died on +.virtual_volumes[8].volume_id"
    assert result.virtual_volumes[8].virtual_volume_type == """data""", "Died on +.virtual_volumes[8].virtual_volume_type"
    assert result.virtual_volumes[8].snapshot_id == 0, "Died on +.virtual_volumes[8].snapshot_id"
    assert type(result.virtual_volumes[8].metadata) is dict, "Died on .virtual_volumes[8].metadata"
    assert result.virtual_volumes[8].virtual_volume_id == UUID("83345d1c-70ab-4d99-8177-d96f67570594"), "Died on .virtual_volumes[8].virtual_volume_id"
    assert result.virtual_volumes[7].status == """done""", "Died on +.virtual_volumes[7].status"
    assert result.virtual_volumes[7].snapshot_info is None, "Died on .virtual_volumes[7].snapshot_info"
    assert result.virtual_volumes[7].parent_virtual_volume_id == UUID("00000000-0000-0000-0000-000000000000"), "Died on .virtual_volumes[7].parent_virtual_volume_id"
    assert result.virtual_volumes[7].volume_info is None, "Died on .virtual_volumes[7].volume_info"
    assert result.virtual_volumes[7].storage_container.status == """active""", "Died on +.virtual_volumes[7].storage_container.status"
    assert result.virtual_volumes[7].storage_container.storage_container_id == UUID("76bbb2b4-8936-4c98-814d-d16f9249c156"), "Died on .virtual_volumes[7].storage_container.storage_container_id"
    assert result.virtual_volumes[7].storage_container.name == """ErikSC""", "Died on +.virtual_volumes[7].storage_container.name"
    assert result.virtual_volumes[7].storage_container.initiator_secret == """n]shaq.ju!z>5{0X""", "Died on +.virtual_volumes[7].storage_container.initiator_secret"
    assert result.virtual_volumes[7].storage_container.target_secret == """037<BCYs^|iB%y,b""", "Died on +.virtual_volumes[7].storage_container.target_secret"
    assert result.virtual_volumes[7].storage_container.protocol_endpoint_type == """SCSI""", "Died on +.virtual_volumes[7].storage_container.protocol_endpoint_type"
    assert result.virtual_volumes[7].storage_container.account_id == 4, "Died on +.virtual_volumes[7].storage_container.account_id"
    assert result.virtual_volumes[7].volume_id == 14, "Died on +.virtual_volumes[7].volume_id"
    assert result.virtual_volumes[7].virtual_volume_type == """swap""", "Died on +.virtual_volumes[7].virtual_volume_type"
    assert result.virtual_volumes[7].snapshot_id == 0, "Died on +.virtual_volumes[7].snapshot_id"
    assert result.virtual_volumes[7].bindings[0] == 37, "Died on +.virtual_volumes[7].bindings[0]"
    assert type(result.virtual_volumes[7].metadata) is dict, "Died on .virtual_volumes[7].metadata"
    assert result.virtual_volumes[7].virtual_volume_id == UUID("8182ae66-7cdb-4df4-be00-e1b93a5b8364"), "Died on .virtual_volumes[7].virtual_volume_id"
    assert result.virtual_volumes[6].status == """done""", "Died on +.virtual_volumes[6].status"
    assert result.virtual_volumes[6].snapshot_info is None, "Died on .virtual_volumes[6].snapshot_info"
    assert result.virtual_volumes[6].parent_virtual_volume_id == UUID("00000000-0000-0000-0000-000000000000"), "Died on .virtual_volumes[6].parent_virtual_volume_id"
    assert result.virtual_volumes[6].volume_info is None, "Died on .virtual_volumes[6].volume_info"
    assert result.virtual_volumes[6].storage_container.status == """active""", "Died on +.virtual_volumes[6].storage_container.status"
    assert result.virtual_volumes[6].storage_container.storage_container_id == UUID("f8ee427e-f858-420d-bd38-762ad1cb6cc3"), "Died on .virtual_volumes[6].storage_container.storage_container_id"
    assert result.virtual_volumes[6].storage_container.name == """akcluster1""", "Died on +.virtual_volumes[6].storage_container.name"
    assert result.virtual_volumes[6].storage_container.initiator_secret == """0&%Q2f$61(3#1TX%""", "Died on +.virtual_volumes[6].storage_container.initiator_secret"
    assert result.virtual_volumes[6].storage_container.target_secret == """[]6~98n1ltWn<cl%""", "Died on +.virtual_volumes[6].storage_container.target_secret"
    assert result.virtual_volumes[6].storage_container.protocol_endpoint_type == """SCSI""", "Died on +.virtual_volumes[6].storage_container.protocol_endpoint_type"
    assert result.virtual_volumes[6].storage_container.account_id == 2, "Died on +.virtual_volumes[6].storage_container.account_id"
    assert result.virtual_volumes[6].volume_id == 8, "Died on +.virtual_volumes[6].volume_id"
    assert result.virtual_volumes[6].virtual_volume_type == """config""", "Died on +.virtual_volumes[6].virtual_volume_type"
    assert result.virtual_volumes[6].snapshot_id == 0, "Died on +.virtual_volumes[6].snapshot_id"
    assert type(result.virtual_volumes[6].metadata) is dict, "Died on .virtual_volumes[6].metadata"
    assert result.virtual_volumes[6].virtual_volume_id == UUID("6664a13e-a525-47a2-a58b-47231a5ecfea"), "Died on .virtual_volumes[6].virtual_volume_id"
    assert result.virtual_volumes[5].status == """done""", "Died on +.virtual_volumes[5].status"
    assert result.virtual_volumes[5].snapshot_info is None, "Died on .virtual_volumes[5].snapshot_info"
    assert result.virtual_volumes[5].parent_virtual_volume_id == UUID("00000000-0000-0000-0000-000000000000"), "Died on .virtual_volumes[5].parent_virtual_volume_id"
    assert result.virtual_volumes[5].volume_info is None, "Died on .virtual_volumes[5].volume_info"
    assert result.virtual_volumes[5].storage_container.status == """active""", "Died on +.virtual_volumes[5].storage_container.status"
    assert result.virtual_volumes[5].storage_container.storage_container_id == UUID("f8ee427e-f858-420d-bd38-762ad1cb6cc3"), "Died on .virtual_volumes[5].storage_container.storage_container_id"
    assert result.virtual_volumes[5].storage_container.name == """akcluster1""", "Died on +.virtual_volumes[5].storage_container.name"
    assert result.virtual_volumes[5].storage_container.initiator_secret == """0&%Q2f$61(3#1TX%""", "Died on +.virtual_volumes[5].storage_container.initiator_secret"
    assert result.virtual_volumes[5].storage_container.target_secret == """[]6~98n1ltWn<cl%""", "Died on +.virtual_volumes[5].storage_container.target_secret"
    assert result.virtual_volumes[5].storage_container.protocol_endpoint_type == """SCSI""", "Died on +.virtual_volumes[5].storage_container.protocol_endpoint_type"
    assert result.virtual_volumes[5].storage_container.account_id == 2, "Died on +.virtual_volumes[5].storage_container.account_id"
    assert result.virtual_volumes[5].volume_id == 2, "Died on +.virtual_volumes[5].volume_id"
    assert result.virtual_volumes[5].virtual_volume_type == """config""", "Died on +.virtual_volumes[5].virtual_volume_type"
    assert result.virtual_volumes[5].snapshot_id == 0, "Died on +.virtual_volumes[5].snapshot_id"
    assert type(result.virtual_volumes[5].metadata) is dict, "Died on .virtual_volumes[5].metadata"
    assert result.virtual_volumes[5].virtual_volume_id == UUID("5630cccd-0bc5-4fcd-a4d7-6f5d66da295a"), "Died on .virtual_volumes[5].virtual_volume_id"
    assert result.virtual_volumes[4].status == """done""", "Died on +.virtual_volumes[4].status"
    assert result.virtual_volumes[4].snapshot_info is None, "Died on .virtual_volumes[4].snapshot_info"
    assert result.virtual_volumes[4].parent_virtual_volume_id == UUID("00000000-0000-0000-0000-000000000000"), "Died on .virtual_volumes[4].parent_virtual_volume_id"
    assert result.virtual_volumes[4].volume_info is None, "Died on .virtual_volumes[4].volume_info"
    assert result.virtual_volumes[4].storage_container.status == """active""", "Died on +.virtual_volumes[4].storage_container.status"
    assert result.virtual_volumes[4].storage_container.storage_container_id == UUID("f8ee427e-f858-420d-bd38-762ad1cb6cc3"), "Died on .virtual_volumes[4].storage_container.storage_container_id"
    assert result.virtual_volumes[4].storage_container.name == """akcluster1""", "Died on +.virtual_volumes[4].storage_container.name"
    assert result.virtual_volumes[4].storage_container.initiator_secret == """0&%Q2f$61(3#1TX%""", "Died on +.virtual_volumes[4].storage_container.initiator_secret"
    assert result.virtual_volumes[4].storage_container.target_secret == """[]6~98n1ltWn<cl%""", "Died on +.virtual_volumes[4].storage_container.target_secret"
    assert result.virtual_volumes[4].storage_container.protocol_endpoint_type == """SCSI""", "Died on +.virtual_volumes[4].storage_container.protocol_endpoint_type"
    assert result.virtual_volumes[4].storage_container.account_id == 2, "Died on +.virtual_volumes[4].storage_container.account_id"
    assert result.virtual_volumes[4].volume_id == 3, "Died on +.virtual_volumes[4].volume_id"
    assert result.virtual_volumes[4].virtual_volume_type == """data""", "Died on +.virtual_volumes[4].virtual_volume_type"
    assert result.virtual_volumes[4].snapshot_id == 0, "Died on +.virtual_volumes[4].snapshot_id"
    assert type(result.virtual_volumes[4].metadata) is dict, "Died on .virtual_volumes[4].metadata"
    assert result.virtual_volumes[4].virtual_volume_id == UUID("4a2fa09f-8eb7-4151-be39-27bae2f8100f"), "Died on .virtual_volumes[4].virtual_volume_id"
    assert result.virtual_volumes[3].status == """done""", "Died on +.virtual_volumes[3].status"
    assert result.virtual_volumes[3].snapshot_info is None, "Died on .virtual_volumes[3].snapshot_info"
    assert result.virtual_volumes[3].parent_virtual_volume_id == UUID("00000000-0000-0000-0000-000000000000"), "Died on .virtual_volumes[3].parent_virtual_volume_id"
    assert result.virtual_volumes[3].volume_info is None, "Died on .virtual_volumes[3].volume_info"
    assert result.virtual_volumes[3].storage_container.status == """active""", "Died on +.virtual_volumes[3].storage_container.status"
    assert result.virtual_volumes[3].storage_container.storage_container_id == UUID("f8ee427e-f858-420d-bd38-762ad1cb6cc3"), "Died on .virtual_volumes[3].storage_container.storage_container_id"
    assert result.virtual_volumes[3].storage_container.name == """akcluster1""", "Died on +.virtual_volumes[3].storage_container.name"
    assert result.virtual_volumes[3].storage_container.initiator_secret == """0&%Q2f$61(3#1TX%""", "Died on +.virtual_volumes[3].storage_container.initiator_secret"
    assert result.virtual_volumes[3].storage_container.target_secret == """[]6~98n1ltWn<cl%""", "Died on +.virtual_volumes[3].storage_container.target_secret"
    assert result.virtual_volumes[3].storage_container.protocol_endpoint_type == """SCSI""", "Died on +.virtual_volumes[3].storage_container.protocol_endpoint_type"
    assert result.virtual_volumes[3].storage_container.account_id == 2, "Died on +.virtual_volumes[3].storage_container.account_id"
    assert result.virtual_volumes[3].volume_id == 4, "Died on +.virtual_volumes[3].volume_id"
    assert result.virtual_volumes[3].virtual_volume_type == """data""", "Died on +.virtual_volumes[3].virtual_volume_type"
    assert result.virtual_volumes[3].snapshot_id == 0, "Died on +.virtual_volumes[3].snapshot_id"
    assert type(result.virtual_volumes[3].metadata) is dict, "Died on .virtual_volumes[3].metadata"
    assert result.virtual_volumes[3].virtual_volume_id == UUID("25081b2e-0656-428d-b4a3-6dddb0255d51"), "Died on .virtual_volumes[3].virtual_volume_id"
    assert result.virtual_volumes[2].status == """done""", "Died on +.virtual_volumes[2].status"
    assert result.virtual_volumes[2].snapshot_info is None, "Died on .virtual_volumes[2].snapshot_info"
    assert result.virtual_volumes[2].parent_virtual_volume_id == UUID("00000000-0000-0000-0000-000000000000"), "Died on .virtual_volumes[2].parent_virtual_volume_id"
    assert result.virtual_volumes[2].volume_info is None, "Died on .virtual_volumes[2].volume_info"
    assert result.virtual_volumes[2].storage_container.status == """active""", "Died on +.virtual_volumes[2].storage_container.status"
    assert result.virtual_volumes[2].storage_container.storage_container_id == UUID("76bbb2b4-8936-4c98-814d-d16f9249c156"), "Died on .virtual_volumes[2].storage_container.storage_container_id"
    assert result.virtual_volumes[2].storage_container.name == """ErikSC""", "Died on +.virtual_volumes[2].storage_container.name"
    assert result.virtual_volumes[2].storage_container.initiator_secret == """n]shaq.ju!z>5{0X""", "Died on +.virtual_volumes[2].storage_container.initiator_secret"
    assert result.virtual_volumes[2].storage_container.target_secret == """037<BCYs^|iB%y,b""", "Died on +.virtual_volumes[2].storage_container.target_secret"
    assert result.virtual_volumes[2].storage_container.protocol_endpoint_type == """SCSI""", "Died on +.virtual_volumes[2].storage_container.protocol_endpoint_type"
    assert result.virtual_volumes[2].storage_container.account_id == 4, "Died on +.virtual_volumes[2].storage_container.account_id"
    assert result.virtual_volumes[2].volume_id == 12, "Died on +.virtual_volumes[2].volume_id"
    assert result.virtual_volumes[2].virtual_volume_type == """config""", "Died on +.virtual_volumes[2].virtual_volume_type"
    assert result.virtual_volumes[2].snapshot_id == 0, "Died on +.virtual_volumes[2].snapshot_id"
    assert result.virtual_volumes[2].bindings[0] == 36, "Died on +.virtual_volumes[2].bindings[0]"
    assert type(result.virtual_volumes[2].metadata) is dict, "Died on .virtual_volumes[2].metadata"
    assert result.virtual_volumes[2].virtual_volume_id == UUID("1e09b208-80ee-43fa-8dad-6ffc2a013072"), "Died on .virtual_volumes[2].virtual_volume_id"
    assert result.virtual_volumes[1].status == """done""", "Died on +.virtual_volumes[1].status"
    assert result.virtual_volumes[1].snapshot_info is None, "Died on .virtual_volumes[1].snapshot_info"
    assert result.virtual_volumes[1].parent_virtual_volume_id == UUID("00000000-0000-0000-0000-000000000000"), "Died on .virtual_volumes[1].parent_virtual_volume_id"
    assert result.virtual_volumes[1].volume_info is None, "Died on .virtual_volumes[1].volume_info"
    assert result.virtual_volumes[1].storage_container.status == """active""", "Died on +.virtual_volumes[1].storage_container.status"
    assert result.virtual_volumes[1].storage_container.storage_container_id == UUID("76bbb2b4-8936-4c98-814d-d16f9249c156"), "Died on .virtual_volumes[1].storage_container.storage_container_id"
    assert result.virtual_volumes[1].storage_container.name == """ErikSC""", "Died on +.virtual_volumes[1].storage_container.name"
    assert result.virtual_volumes[1].storage_container.initiator_secret == """n]shaq.ju!z>5{0X""", "Died on +.virtual_volumes[1].storage_container.initiator_secret"
    assert result.virtual_volumes[1].storage_container.target_secret == """037<BCYs^|iB%y,b""", "Died on +.virtual_volumes[1].storage_container.target_secret"
    assert result.virtual_volumes[1].storage_container.protocol_endpoint_type == """SCSI""", "Died on +.virtual_volumes[1].storage_container.protocol_endpoint_type"
    assert result.virtual_volumes[1].storage_container.account_id == 4, "Died on +.virtual_volumes[1].storage_container.account_id"
    assert result.virtual_volumes[1].volume_id == 13, "Died on +.virtual_volumes[1].volume_id"
    assert result.virtual_volumes[1].virtual_volume_type == """data""", "Died on +.virtual_volumes[1].virtual_volume_type"
    assert result.virtual_volumes[1].snapshot_id == 0, "Died on +.virtual_volumes[1].snapshot_id"
    assert result.virtual_volumes[1].bindings[0] == 38, "Died on +.virtual_volumes[1].bindings[0]"
    assert type(result.virtual_volumes[1].metadata) is dict, "Died on .virtual_volumes[1].metadata"
    assert result.virtual_volumes[1].virtual_volume_id == UUID("1dfe1cb3-bdd6-4051-a92c-43a0184d483d"), "Died on .virtual_volumes[1].virtual_volume_id"
    assert result.virtual_volumes[0].status == """done""", "Died on +.virtual_volumes[0].status"
    assert result.virtual_volumes[0].snapshot_info is None, "Died on .virtual_volumes[0].snapshot_info"
    assert result.virtual_volumes[0].parent_virtual_volume_id == UUID("00000000-0000-0000-0000-000000000000"), "Died on .virtual_volumes[0].parent_virtual_volume_id"
    assert result.virtual_volumes[0].volume_info is None, "Died on .virtual_volumes[0].volume_info"
    assert result.virtual_volumes[0].storage_container.status == """active""", "Died on +.virtual_volumes[0].storage_container.status"
    assert result.virtual_volumes[0].storage_container.storage_container_id == UUID("f8ee427e-f858-420d-bd38-762ad1cb6cc3"), "Died on .virtual_volumes[0].storage_container.storage_container_id"
    assert result.virtual_volumes[0].storage_container.name == """akcluster1""", "Died on +.virtual_volumes[0].storage_container.name"
    assert result.virtual_volumes[0].storage_container.initiator_secret == """0&%Q2f$61(3#1TX%""", "Died on +.virtual_volumes[0].storage_container.initiator_secret"
    assert result.virtual_volumes[0].storage_container.target_secret == """[]6~98n1ltWn<cl%""", "Died on +.virtual_volumes[0].storage_container.target_secret"
    assert result.virtual_volumes[0].storage_container.protocol_endpoint_type == """SCSI""", "Died on +.virtual_volumes[0].storage_container.protocol_endpoint_type"
    assert result.virtual_volumes[0].storage_container.account_id == 2, "Died on +.virtual_volumes[0].storage_container.account_id"
    assert result.virtual_volumes[0].volume_id == 6, "Died on +.virtual_volumes[0].volume_id"
    assert result.virtual_volumes[0].virtual_volume_type == """data""", "Died on +.virtual_volumes[0].virtual_volume_type"
    assert result.virtual_volumes[0].snapshot_id == 0, "Died on +.virtual_volumes[0].snapshot_id"
    assert type(result.virtual_volumes[0].metadata) is dict, "Died on .virtual_volumes[0].metadata"
    assert result.virtual_volumes[0].virtual_volume_id == UUID("10c24f95-336d-4173-a19f-93ffbd852585"), "Died on .virtual_volumes[0].virtual_volume_id"
    assert result.next_virtual_volume_id == UUID("00000000-0000-0000-0000-000000000000"), "Died on .next_virtual_volume_id"

def test_list_virtual_volume_tasks_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListVirtualVolumeTasks_v9_0)

    
    virtual_volume_task_ids = UUID("2b0653fb-3d64-4ae0-9ef8-356e685b0b2e") # virtual_volume_task_ids
    result = ef.list_virtual_volume_tasks()
    assert result.tasks[0].status == """success""", "Died on +.tasks[0].status"
    assert result.tasks[0].virtual_volume_host_id == UUID("564de1a4-9a99-da0f-8b7c-3a41dfd64bf1"), "Died on .tasks[0].virtual_volume_host_id"
    assert result.tasks[0].virtual_volume_task_id == UUID("a1b72df7-66a6-489a-86e4-538d0dbe05bf"), "Died on .tasks[0].virtual_volume_task_id"
    assert result.tasks[0].parent_used_size == 0, "Died on +.tasks[0].parent_used_size"
    assert result.tasks[0].clone_virtual_volume_id == UUID("fafeb3a0-7dd9-4c9f-8a07-80e0bbf6f4d0"), "Died on .tasks[0].clone_virtual_volume_id"
    assert result.tasks[0].parent_total_size == 42949672960, "Died on +.tasks[0].parent_total_size"
    assert result.tasks[0].cancelled == False, "Died on +.tasks[0].cancelled"
    assert type(result.tasks[0].parent_metadata) is dict, "Died on .tasks[0].parent_metadata"
    assert result.tasks[0].operation == """clone""", "Died on +.tasks[0].operation"
    assert result.tasks[0].virtualvolume_id == UUID("fafeb3a0-7dd9-4c9f-8a07-80e0bbf6f4d0"), "Died on .tasks[0].virtualvolume_id"

def test_list_volume_access_groups_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListVolumeAccessGroups_v9_0)

    
    start_volume_access_group_id = 42 # start_volume_access_group_id
    limit = 42 # limit
    result = ef.list_volume_access_groups()
    assert result.volume_access_groups[1].name == """loyds""", "Died on +.volume_access_groups[1].name"
    assert result.volume_access_groups[1].initiator_ids[1] == 5, "Died on +.volume_access_groups[1].initiator_ids[1]"
    assert result.volume_access_groups[1].initiator_ids[0] == 4, "Died on +.volume_access_groups[1].initiator_ids[0]"
    assert result.volume_access_groups[1].volumes[0] == 5, "Died on +.volume_access_groups[1].volumes[0]"
    assert result.volume_access_groups[1].initiators[1] == """21:00:00:0e:1e:1b:2a:41""", "Died on +.volume_access_groups[1].initiators[1]"
    assert result.volume_access_groups[1].initiators[0] == """21:00:00:0e:1e:1b:2a:40""", "Died on +.volume_access_groups[1].initiators[0]"
    assert type(result.volume_access_groups[1].attributes) is dict, "Died on .volume_access_groups[1].attributes"
    assert result.volume_access_groups[1].volume_access_group_id == 2, "Died on +.volume_access_groups[1].volume_access_group_id"
    assert result.volume_access_groups[0].name == """sra-site1-esxi""", "Died on +.volume_access_groups[0].name"
    assert result.volume_access_groups[0].initiator_ids[0] == 1, "Died on +.volume_access_groups[0].initiator_ids[0]"
    assert result.volume_access_groups[0].volumes[1] == 4, "Died on +.volume_access_groups[0].volumes[1]"
    assert result.volume_access_groups[0].volumes[0] == 2, "Died on +.volume_access_groups[0].volumes[0]"
    assert result.volume_access_groups[0].initiators[0] == """iqn.1998-01.com.vmware:sra-site1-esxi""", "Died on +.volume_access_groups[0].initiators[0]"
    assert type(result.volume_access_groups[0].attributes) is dict, "Died on .volume_access_groups[0].attributes"
    assert result.volume_access_groups[0].volume_access_group_id == 1, "Died on +.volume_access_groups[0].volume_access_group_id"

def test_list_volume_stats_by_virtual_volume_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListVolumeStatsByVirtualVolume_v9_0)

    
    virtual_volume_ids = UUID("2b0653fb-3d64-4ae0-9ef8-356e685b0b2e") # virtual_volume_ids
    result = ef.list_volume_stats_by_virtual_volume()

def test_list_volume_stats_by_virtual_volume_v9_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListVolumeStatsByVirtualVolume_v9_1)

    
    virtual_volume_ids = UUID("2b0653fb-3d64-4ae0-9ef8-356e685b0b2e") # virtual_volume_ids
    result = ef.list_volume_stats_by_virtual_volume()
    assert result.volume_stats[9].metadata_hosts.primary == 5, "Died on +.volume_stats[9].metadata_hosts.primary"
    assert result.volume_stats[9].write_latency_usec == 0, "Died on +.volume_stats[9].write_latency_usec"
    assert result.volume_stats[9].write_bytes_last_sample == 0, "Died on +.volume_stats[9].write_bytes_last_sample"
    assert result.volume_stats[9].burst_iopscredit == 0, "Died on +.volume_stats[9].burst_iopscredit"
    assert result.volume_stats[9].sample_period_msec == 0, "Died on +.volume_stats[9].sample_period_msec"
    assert result.volume_stats[9].async_delay is None, "Died on .volume_stats[9].async_delay"
    assert result.volume_stats[9].zero_blocks == 1048576, "Died on +.volume_stats[9].zero_blocks"
    assert result.volume_stats[9].actual_iops == 0, "Died on +.volume_stats[9].actual_iops"
    assert result.volume_stats[9].write_bytes == 0, "Died on +.volume_stats[9].write_bytes"
    assert result.volume_stats[9].read_ops == 0, "Died on +.volume_stats[9].read_ops"
    assert result.volume_stats[9].unaligned_writes == 0, "Died on +.volume_stats[9].unaligned_writes"
    assert result.volume_stats[9].latency_usec == 0, "Died on +.volume_stats[9].latency_usec"
    assert result.volume_stats[9].volume_size == 4294967296, "Died on +.volume_stats[9].volume_size"
    assert result.volume_stats[9].read_bytes == 0, "Died on +.volume_stats[9].read_bytes"
    assert result.volume_stats[9].write_ops == 0, "Died on +.volume_stats[9].write_ops"
    assert result.volume_stats[9].read_latency_usec == 0, "Died on +.volume_stats[9].read_latency_usec"
    assert result.volume_stats[9].read_bytes_last_sample == 0, "Died on +.volume_stats[9].read_bytes_last_sample"
    assert result.volume_stats[9].read_ops_last_sample == 0, "Died on +.volume_stats[9].read_ops_last_sample"
    assert result.volume_stats[9].timestamp == """2016-11-22T18:06:08.946487Z""", "Died on +.volume_stats[9].timestamp"
    assert result.volume_stats[9].average_iopsize == 0, "Died on +.volume_stats[9].average_iopsize"
    assert result.volume_stats[9].desired_metadata_hosts is None, "Died on .volume_stats[9].desired_metadata_hosts"
    assert result.volume_stats[9].write_ops_last_sample == 0, "Died on +.volume_stats[9].write_ops_last_sample"
    assert result.volume_stats[9].non_zero_blocks == 0, "Died on +.volume_stats[9].non_zero_blocks"
    assert result.volume_stats[9].virtual_volume_id == UUID("c983e671-23dd-45a1-9b7e-9b4f94c13534"), "Died on .volume_stats[9].virtual_volume_id"
    assert result.volume_stats[9].throttle == 0, "Died on +.volume_stats[9].throttle"
    assert result.volume_stats[9].volume_id == 5, "Died on +.volume_stats[9].volume_id"
    assert result.volume_stats[9].unaligned_reads == 0, "Died on +.volume_stats[9].unaligned_reads"
    assert result.volume_stats[9].client_queue_depth == 0, "Died on +.volume_stats[9].client_queue_depth"
    assert result.volume_stats[9].volume_utilization == 0, "Died on +.volume_stats[9].volume_utilization"
    assert result.volume_stats[9].account_id == 2, "Died on +.volume_stats[9].account_id"
    assert result.volume_stats[8].metadata_hosts.primary == 5, "Died on +.volume_stats[8].metadata_hosts.primary"
    assert result.volume_stats[8].write_latency_usec == 0, "Died on +.volume_stats[8].write_latency_usec"
    assert result.volume_stats[8].write_bytes_last_sample == 0, "Died on +.volume_stats[8].write_bytes_last_sample"
    assert result.volume_stats[8].burst_iopscredit == 0, "Died on +.volume_stats[8].burst_iopscredit"
    assert result.volume_stats[8].sample_period_msec == 0, "Died on +.volume_stats[8].sample_period_msec"
    assert result.volume_stats[8].async_delay is None, "Died on .volume_stats[8].async_delay"
    assert result.volume_stats[8].zero_blocks == 2621440, "Died on +.volume_stats[8].zero_blocks"
    assert result.volume_stats[8].actual_iops == 0, "Died on +.volume_stats[8].actual_iops"
    assert result.volume_stats[8].write_bytes == 0, "Died on +.volume_stats[8].write_bytes"
    assert result.volume_stats[8].read_ops == 0, "Died on +.volume_stats[8].read_ops"
    assert result.volume_stats[8].unaligned_writes == 0, "Died on +.volume_stats[8].unaligned_writes"
    assert result.volume_stats[8].latency_usec == 0, "Died on +.volume_stats[8].latency_usec"
    assert result.volume_stats[8].volume_size == 10737418240, "Died on +.volume_stats[8].volume_size"
    assert result.volume_stats[8].read_bytes == 0, "Died on +.volume_stats[8].read_bytes"
    assert result.volume_stats[8].write_ops == 0, "Died on +.volume_stats[8].write_ops"
    assert result.volume_stats[8].read_latency_usec == 0, "Died on +.volume_stats[8].read_latency_usec"
    assert result.volume_stats[8].read_bytes_last_sample == 0, "Died on +.volume_stats[8].read_bytes_last_sample"
    assert result.volume_stats[8].read_ops_last_sample == 0, "Died on +.volume_stats[8].read_ops_last_sample"
    assert result.volume_stats[8].timestamp == """2016-11-22T18:06:08.935746Z""", "Died on +.volume_stats[8].timestamp"
    assert result.volume_stats[8].average_iopsize == 0, "Died on +.volume_stats[8].average_iopsize"
    assert result.volume_stats[8].desired_metadata_hosts is None, "Died on .volume_stats[8].desired_metadata_hosts"
    assert result.volume_stats[8].write_ops_last_sample == 0, "Died on +.volume_stats[8].write_ops_last_sample"
    assert result.volume_stats[8].non_zero_blocks == 0, "Died on +.volume_stats[8].non_zero_blocks"
    assert result.volume_stats[8].virtual_volume_id == UUID("83345d1c-70ab-4d99-8177-d96f67570594"), "Died on .volume_stats[8].virtual_volume_id"
    assert result.volume_stats[8].throttle == 0, "Died on +.volume_stats[8].throttle"
    assert result.volume_stats[8].volume_id == 9, "Died on +.volume_stats[8].volume_id"
    assert result.volume_stats[8].unaligned_reads == 0, "Died on +.volume_stats[8].unaligned_reads"
    assert result.volume_stats[8].client_queue_depth == 0, "Died on +.volume_stats[8].client_queue_depth"
    assert result.volume_stats[8].volume_utilization == 0, "Died on +.volume_stats[8].volume_utilization"
    assert result.volume_stats[8].account_id == 2, "Died on +.volume_stats[8].account_id"
    assert result.volume_stats[7].metadata_hosts.primary == 5, "Died on +.volume_stats[7].metadata_hosts.primary"
    assert result.volume_stats[7].write_latency_usec == 0, "Died on +.volume_stats[7].write_latency_usec"
    assert result.volume_stats[7].write_bytes_last_sample == 0, "Died on +.volume_stats[7].write_bytes_last_sample"
    assert result.volume_stats[7].burst_iopscredit == 0, "Died on +.volume_stats[7].burst_iopscredit"
    assert result.volume_stats[7].sample_period_msec == 0, "Died on +.volume_stats[7].sample_period_msec"
    assert result.volume_stats[7].async_delay is None, "Died on .volume_stats[7].async_delay"
    assert result.volume_stats[7].zero_blocks == 524288, "Died on +.volume_stats[7].zero_blocks"
    assert result.volume_stats[7].actual_iops == 0, "Died on +.volume_stats[7].actual_iops"
    assert result.volume_stats[7].write_bytes == 0, "Died on +.volume_stats[7].write_bytes"
    assert result.volume_stats[7].read_ops == 0, "Died on +.volume_stats[7].read_ops"
    assert result.volume_stats[7].unaligned_writes == 0, "Died on +.volume_stats[7].unaligned_writes"
    assert result.volume_stats[7].latency_usec == 0, "Died on +.volume_stats[7].latency_usec"
    assert result.volume_stats[7].volume_size == 2147483648, "Died on +.volume_stats[7].volume_size"
    assert result.volume_stats[7].read_bytes == 0, "Died on +.volume_stats[7].read_bytes"
    assert result.volume_stats[7].write_ops == 0, "Died on +.volume_stats[7].write_ops"
    assert result.volume_stats[7].read_latency_usec == 0, "Died on +.volume_stats[7].read_latency_usec"
    assert result.volume_stats[7].read_bytes_last_sample == 0, "Died on +.volume_stats[7].read_bytes_last_sample"
    assert result.volume_stats[7].read_ops_last_sample == 0, "Died on +.volume_stats[7].read_ops_last_sample"
    assert result.volume_stats[7].timestamp == """2016-11-22T18:06:08.925641Z""", "Died on +.volume_stats[7].timestamp"
    assert result.volume_stats[7].average_iopsize == 0, "Died on +.volume_stats[7].average_iopsize"
    assert result.volume_stats[7].desired_metadata_hosts is None, "Died on .volume_stats[7].desired_metadata_hosts"
    assert result.volume_stats[7].write_ops_last_sample == 0, "Died on +.volume_stats[7].write_ops_last_sample"
    assert result.volume_stats[7].non_zero_blocks == 0, "Died on +.volume_stats[7].non_zero_blocks"
    assert result.volume_stats[7].virtual_volume_id == UUID("8182ae66-7cdb-4df4-be00-e1b93a5b8364"), "Died on .volume_stats[7].virtual_volume_id"
    assert result.volume_stats[7].throttle == 0, "Died on +.volume_stats[7].throttle"
    assert result.volume_stats[7].volume_id == 14, "Died on +.volume_stats[7].volume_id"
    assert result.volume_stats[7].unaligned_reads == 0, "Died on +.volume_stats[7].unaligned_reads"
    assert result.volume_stats[7].client_queue_depth == 0, "Died on +.volume_stats[7].client_queue_depth"
    assert result.volume_stats[7].volume_utilization == 0, "Died on +.volume_stats[7].volume_utilization"
    assert result.volume_stats[7].account_id == 4, "Died on +.volume_stats[7].account_id"
    assert result.volume_stats[6].metadata_hosts.primary == 5, "Died on +.volume_stats[6].metadata_hosts.primary"
    assert result.volume_stats[6].write_latency_usec == 0, "Died on +.volume_stats[6].write_latency_usec"
    assert result.volume_stats[6].write_bytes_last_sample == 0, "Died on +.volume_stats[6].write_bytes_last_sample"
    assert result.volume_stats[6].burst_iopscredit == 0, "Died on +.volume_stats[6].burst_iopscredit"
    assert result.volume_stats[6].sample_period_msec == 0, "Died on +.volume_stats[6].sample_period_msec"
    assert result.volume_stats[6].async_delay is None, "Died on .volume_stats[6].async_delay"
    assert result.volume_stats[6].zero_blocks == 1047169, "Died on +.volume_stats[6].zero_blocks"
    assert result.volume_stats[6].actual_iops == 0, "Died on +.volume_stats[6].actual_iops"
    assert result.volume_stats[6].write_bytes == 10829824, "Died on +.volume_stats[6].write_bytes"
    assert result.volume_stats[6].read_ops == 462, "Died on +.volume_stats[6].read_ops"
    assert result.volume_stats[6].unaligned_writes == 1200, "Died on +.volume_stats[6].unaligned_writes"
    assert result.volume_stats[6].latency_usec == 0, "Died on +.volume_stats[6].latency_usec"
    assert result.volume_stats[6].volume_size == 4294967296, "Died on +.volume_stats[6].volume_size"
    assert result.volume_stats[6].read_bytes == 1610752, "Died on +.volume_stats[6].read_bytes"
    assert result.volume_stats[6].write_ops == 1351, "Died on +.volume_stats[6].write_ops"
    assert result.volume_stats[6].read_latency_usec == 0, "Died on +.volume_stats[6].read_latency_usec"
    assert result.volume_stats[6].read_bytes_last_sample == 0, "Died on +.volume_stats[6].read_bytes_last_sample"
    assert result.volume_stats[6].read_ops_last_sample == 0, "Died on +.volume_stats[6].read_ops_last_sample"
    assert result.volume_stats[6].timestamp == """2016-11-22T18:06:08.915110Z""", "Died on +.volume_stats[6].timestamp"
    assert result.volume_stats[6].average_iopsize == 0, "Died on +.volume_stats[6].average_iopsize"
    assert result.volume_stats[6].desired_metadata_hosts is None, "Died on .volume_stats[6].desired_metadata_hosts"
    assert result.volume_stats[6].write_ops_last_sample == 0, "Died on +.volume_stats[6].write_ops_last_sample"
    assert result.volume_stats[6].non_zero_blocks == 1407, "Died on +.volume_stats[6].non_zero_blocks"
    assert result.volume_stats[6].virtual_volume_id == UUID("6664a13e-a525-47a2-a58b-47231a5ecfea"), "Died on .volume_stats[6].virtual_volume_id"
    assert result.volume_stats[6].throttle == 0, "Died on +.volume_stats[6].throttle"
    assert result.volume_stats[6].volume_id == 8, "Died on +.volume_stats[6].volume_id"
    assert result.volume_stats[6].unaligned_reads == 438, "Died on +.volume_stats[6].unaligned_reads"
    assert result.volume_stats[6].client_queue_depth == 0, "Died on +.volume_stats[6].client_queue_depth"
    assert result.volume_stats[6].volume_utilization == 0, "Died on +.volume_stats[6].volume_utilization"
    assert result.volume_stats[6].account_id == 2, "Died on +.volume_stats[6].account_id"
    assert result.volume_stats[5].metadata_hosts.primary == 5, "Died on +.volume_stats[5].metadata_hosts.primary"
    assert result.volume_stats[5].write_latency_usec == 0, "Died on +.volume_stats[5].write_latency_usec"
    assert result.volume_stats[5].write_bytes_last_sample == 0, "Died on +.volume_stats[5].write_bytes_last_sample"
    assert result.volume_stats[5].burst_iopscredit == 0, "Died on +.volume_stats[5].burst_iopscredit"
    assert result.volume_stats[5].sample_period_msec == 0, "Died on +.volume_stats[5].sample_period_msec"
    assert result.volume_stats[5].async_delay is None, "Died on .volume_stats[5].async_delay"
    assert result.volume_stats[5].zero_blocks == 1047162, "Died on +.volume_stats[5].zero_blocks"
    assert result.volume_stats[5].actual_iops == 0, "Died on +.volume_stats[5].actual_iops"
    assert result.volume_stats[5].write_bytes == 12729344, "Died on +.volume_stats[5].write_bytes"
    assert result.volume_stats[5].read_ops == 3667, "Died on +.volume_stats[5].read_ops"
    assert result.volume_stats[5].unaligned_writes == 4210, "Died on +.volume_stats[5].unaligned_writes"
    assert result.volume_stats[5].latency_usec == 0, "Died on +.volume_stats[5].latency_usec"
    assert result.volume_stats[5].volume_size == 4294967296, "Died on +.volume_stats[5].volume_size"
    assert result.volume_stats[5].read_bytes == 9278464, "Died on +.volume_stats[5].read_bytes"
    assert result.volume_stats[5].write_ops == 4373, "Died on +.volume_stats[5].write_ops"
    assert result.volume_stats[5].read_latency_usec == 0, "Died on +.volume_stats[5].read_latency_usec"
    assert result.volume_stats[5].read_bytes_last_sample == 0, "Died on +.volume_stats[5].read_bytes_last_sample"
    assert result.volume_stats[5].read_ops_last_sample == 0, "Died on +.volume_stats[5].read_ops_last_sample"
    assert result.volume_stats[5].timestamp == """2016-11-22T18:06:08.904266Z""", "Died on +.volume_stats[5].timestamp"
    assert result.volume_stats[5].average_iopsize == 0, "Died on +.volume_stats[5].average_iopsize"
    assert result.volume_stats[5].desired_metadata_hosts is None, "Died on .volume_stats[5].desired_metadata_hosts"
    assert result.volume_stats[5].write_ops_last_sample == 0, "Died on +.volume_stats[5].write_ops_last_sample"
    assert result.volume_stats[5].non_zero_blocks == 1414, "Died on +.volume_stats[5].non_zero_blocks"
    assert result.volume_stats[5].virtual_volume_id == UUID("5630cccd-0bc5-4fcd-a4d7-6f5d66da295a"), "Died on .volume_stats[5].virtual_volume_id"
    assert result.volume_stats[5].throttle == 0, "Died on +.volume_stats[5].throttle"
    assert result.volume_stats[5].volume_id == 2, "Died on +.volume_stats[5].volume_id"
    assert result.volume_stats[5].unaligned_reads == 3541, "Died on +.volume_stats[5].unaligned_reads"
    assert result.volume_stats[5].client_queue_depth == 0, "Died on +.volume_stats[5].client_queue_depth"
    assert result.volume_stats[5].volume_utilization == 0, "Died on +.volume_stats[5].volume_utilization"
    assert result.volume_stats[5].account_id == 2, "Died on +.volume_stats[5].account_id"
    assert result.volume_stats[4].metadata_hosts.primary == 5, "Died on +.volume_stats[4].metadata_hosts.primary"
    assert result.volume_stats[4].write_latency_usec == 0, "Died on +.volume_stats[4].write_latency_usec"
    assert result.volume_stats[4].write_bytes_last_sample == 0, "Died on +.volume_stats[4].write_bytes_last_sample"
    assert result.volume_stats[4].burst_iopscredit == 0, "Died on +.volume_stats[4].burst_iopscredit"
    assert result.volume_stats[4].sample_period_msec == 0, "Died on +.volume_stats[4].sample_period_msec"
    assert result.volume_stats[4].async_delay is None, "Died on .volume_stats[4].async_delay"
    assert result.volume_stats[4].zero_blocks == 1310720, "Died on +.volume_stats[4].zero_blocks"
    assert result.volume_stats[4].actual_iops == 0, "Died on +.volume_stats[4].actual_iops"
    assert result.volume_stats[4].write_bytes == 0, "Died on +.volume_stats[4].write_bytes"
    assert result.volume_stats[4].read_ops == 0, "Died on +.volume_stats[4].read_ops"
    assert result.volume_stats[4].unaligned_writes == 0, "Died on +.volume_stats[4].unaligned_writes"
    assert result.volume_stats[4].latency_usec == 0, "Died on +.volume_stats[4].latency_usec"
    assert result.volume_stats[4].volume_size == 5368709120, "Died on +.volume_stats[4].volume_size"
    assert result.volume_stats[4].read_bytes == 0, "Died on +.volume_stats[4].read_bytes"
    assert result.volume_stats[4].write_ops == 0, "Died on +.volume_stats[4].write_ops"
    assert result.volume_stats[4].read_latency_usec == 0, "Died on +.volume_stats[4].read_latency_usec"
    assert result.volume_stats[4].read_bytes_last_sample == 0, "Died on +.volume_stats[4].read_bytes_last_sample"
    assert result.volume_stats[4].read_ops_last_sample == 0, "Died on +.volume_stats[4].read_ops_last_sample"
    assert result.volume_stats[4].timestamp == """2016-11-22T18:06:08.893663Z""", "Died on +.volume_stats[4].timestamp"
    assert result.volume_stats[4].average_iopsize == 0, "Died on +.volume_stats[4].average_iopsize"
    assert result.volume_stats[4].desired_metadata_hosts is None, "Died on .volume_stats[4].desired_metadata_hosts"
    assert result.volume_stats[4].write_ops_last_sample == 0, "Died on +.volume_stats[4].write_ops_last_sample"
    assert result.volume_stats[4].non_zero_blocks == 0, "Died on +.volume_stats[4].non_zero_blocks"
    assert result.volume_stats[4].virtual_volume_id == UUID("4a2fa09f-8eb7-4151-be39-27bae2f8100f"), "Died on .volume_stats[4].virtual_volume_id"
    assert result.volume_stats[4].throttle == 0, "Died on +.volume_stats[4].throttle"
    assert result.volume_stats[4].volume_id == 3, "Died on +.volume_stats[4].volume_id"
    assert result.volume_stats[4].unaligned_reads == 0, "Died on +.volume_stats[4].unaligned_reads"
    assert result.volume_stats[4].client_queue_depth == 0, "Died on +.volume_stats[4].client_queue_depth"
    assert result.volume_stats[4].volume_utilization == 0, "Died on +.volume_stats[4].volume_utilization"
    assert result.volume_stats[4].account_id == 2, "Died on +.volume_stats[4].account_id"
    assert result.volume_stats[3].metadata_hosts.primary == 5, "Died on +.volume_stats[3].metadata_hosts.primary"
    assert result.volume_stats[3].write_latency_usec == 0, "Died on +.volume_stats[3].write_latency_usec"
    assert result.volume_stats[3].write_bytes_last_sample == 0, "Died on +.volume_stats[3].write_bytes_last_sample"
    assert result.volume_stats[3].burst_iopscredit == 0, "Died on +.volume_stats[3].burst_iopscredit"
    assert result.volume_stats[3].sample_period_msec == 0, "Died on +.volume_stats[3].sample_period_msec"
    assert result.volume_stats[3].async_delay is None, "Died on .volume_stats[3].async_delay"
    assert result.volume_stats[3].zero_blocks == 1048576, "Died on +.volume_stats[3].zero_blocks"
    assert result.volume_stats[3].actual_iops == 0, "Died on +.volume_stats[3].actual_iops"
    assert result.volume_stats[3].write_bytes == 0, "Died on +.volume_stats[3].write_bytes"
    assert result.volume_stats[3].read_ops == 0, "Died on +.volume_stats[3].read_ops"
    assert result.volume_stats[3].unaligned_writes == 0, "Died on +.volume_stats[3].unaligned_writes"
    assert result.volume_stats[3].latency_usec == 0, "Died on +.volume_stats[3].latency_usec"
    assert result.volume_stats[3].volume_size == 4294967296, "Died on +.volume_stats[3].volume_size"
    assert result.volume_stats[3].read_bytes == 0, "Died on +.volume_stats[3].read_bytes"
    assert result.volume_stats[3].write_ops == 0, "Died on +.volume_stats[3].write_ops"
    assert result.volume_stats[3].read_latency_usec == 0, "Died on +.volume_stats[3].read_latency_usec"
    assert result.volume_stats[3].read_bytes_last_sample == 0, "Died on +.volume_stats[3].read_bytes_last_sample"
    assert result.volume_stats[3].read_ops_last_sample == 0, "Died on +.volume_stats[3].read_ops_last_sample"
    assert result.volume_stats[3].timestamp == """2016-11-22T18:06:08.882931Z""", "Died on +.volume_stats[3].timestamp"
    assert result.volume_stats[3].average_iopsize == 0, "Died on +.volume_stats[3].average_iopsize"
    assert result.volume_stats[3].desired_metadata_hosts is None, "Died on .volume_stats[3].desired_metadata_hosts"
    assert result.volume_stats[3].write_ops_last_sample == 0, "Died on +.volume_stats[3].write_ops_last_sample"
    assert result.volume_stats[3].non_zero_blocks == 0, "Died on +.volume_stats[3].non_zero_blocks"
    assert result.volume_stats[3].virtual_volume_id == UUID("25081b2e-0656-428d-b4a3-6dddb0255d51"), "Died on .volume_stats[3].virtual_volume_id"
    assert result.volume_stats[3].throttle == 0, "Died on +.volume_stats[3].throttle"
    assert result.volume_stats[3].volume_id == 4, "Died on +.volume_stats[3].volume_id"
    assert result.volume_stats[3].unaligned_reads == 0, "Died on +.volume_stats[3].unaligned_reads"
    assert result.volume_stats[3].client_queue_depth == 0, "Died on +.volume_stats[3].client_queue_depth"
    assert result.volume_stats[3].volume_utilization == 0, "Died on +.volume_stats[3].volume_utilization"
    assert result.volume_stats[3].account_id == 2, "Died on +.volume_stats[3].account_id"
    assert result.volume_stats[2].metadata_hosts.primary == 5, "Died on +.volume_stats[2].metadata_hosts.primary"
    assert result.volume_stats[2].write_latency_usec == 0, "Died on +.volume_stats[2].write_latency_usec"
    assert result.volume_stats[2].write_bytes_last_sample == 0, "Died on +.volume_stats[2].write_bytes_last_sample"
    assert result.volume_stats[2].burst_iopscredit == 0, "Died on +.volume_stats[2].burst_iopscredit"
    assert result.volume_stats[2].sample_period_msec == 500, "Died on +.volume_stats[2].sample_period_msec"
    assert result.volume_stats[2].async_delay is None, "Died on .volume_stats[2].async_delay"
    assert result.volume_stats[2].zero_blocks == 1047129, "Died on +.volume_stats[2].zero_blocks"
    assert result.volume_stats[2].actual_iops == 0, "Died on +.volume_stats[2].actual_iops"
    assert result.volume_stats[2].write_bytes == 15736832, "Died on +.volume_stats[2].write_bytes"
    assert result.volume_stats[2].read_ops == 587, "Died on +.volume_stats[2].read_ops"
    assert result.volume_stats[2].unaligned_writes == 5879, "Died on +.volume_stats[2].unaligned_writes"
    assert result.volume_stats[2].latency_usec == 0, "Died on +.volume_stats[2].latency_usec"
    assert result.volume_stats[2].volume_size == 4294967296, "Died on +.volume_stats[2].volume_size"
    assert result.volume_stats[2].read_bytes == 2517504, "Died on +.volume_stats[2].read_bytes"
    assert result.volume_stats[2].write_ops == 6046, "Died on +.volume_stats[2].write_ops"
    assert result.volume_stats[2].read_latency_usec == 0, "Died on +.volume_stats[2].read_latency_usec"
    assert result.volume_stats[2].read_bytes_last_sample == 0, "Died on +.volume_stats[2].read_bytes_last_sample"
    assert result.volume_stats[2].read_ops_last_sample == 0, "Died on +.volume_stats[2].read_ops_last_sample"
    assert result.volume_stats[2].timestamp == """2016-11-22T18:06:08.872020Z""", "Died on +.volume_stats[2].timestamp"
    assert result.volume_stats[2].average_iopsize == 512, "Died on +.volume_stats[2].average_iopsize"
    assert result.volume_stats[2].desired_metadata_hosts is None, "Died on .volume_stats[2].desired_metadata_hosts"
    assert result.volume_stats[2].write_ops_last_sample == 0, "Died on +.volume_stats[2].write_ops_last_sample"
    assert result.volume_stats[2].non_zero_blocks == 1447, "Died on +.volume_stats[2].non_zero_blocks"
    assert result.volume_stats[2].virtual_volume_id == UUID("1e09b208-80ee-43fa-8dad-6ffc2a013072"), "Died on .volume_stats[2].virtual_volume_id"
    assert result.volume_stats[2].throttle == 0, "Died on +.volume_stats[2].throttle"
    assert result.volume_stats[2].volume_id == 12, "Died on +.volume_stats[2].volume_id"
    assert result.volume_stats[2].unaligned_reads == 557, "Died on +.volume_stats[2].unaligned_reads"
    assert result.volume_stats[2].client_queue_depth == 0, "Died on +.volume_stats[2].client_queue_depth"
    assert result.volume_stats[2].volume_utilization == 0, "Died on +.volume_stats[2].volume_utilization"
    assert result.volume_stats[2].account_id == 4, "Died on +.volume_stats[2].account_id"
    assert result.volume_stats[1].metadata_hosts.primary == 5, "Died on +.volume_stats[1].metadata_hosts.primary"
    assert result.volume_stats[1].write_latency_usec == 0, "Died on +.volume_stats[1].write_latency_usec"
    assert result.volume_stats[1].write_bytes_last_sample == 0, "Died on +.volume_stats[1].write_bytes_last_sample"
    assert result.volume_stats[1].burst_iopscredit == 0, "Died on +.volume_stats[1].burst_iopscredit"
    assert result.volume_stats[1].sample_period_msec == 0, "Died on +.volume_stats[1].sample_period_msec"
    assert result.volume_stats[1].async_delay is None, "Died on .volume_stats[1].async_delay"
    assert result.volume_stats[1].zero_blocks == 2097152, "Died on +.volume_stats[1].zero_blocks"
    assert result.volume_stats[1].actual_iops == 0, "Died on +.volume_stats[1].actual_iops"
    assert result.volume_stats[1].write_bytes == 0, "Died on +.volume_stats[1].write_bytes"
    assert result.volume_stats[1].read_ops == 1, "Died on +.volume_stats[1].read_ops"
    assert result.volume_stats[1].unaligned_writes == 0, "Died on +.volume_stats[1].unaligned_writes"
    assert result.volume_stats[1].latency_usec == 0, "Died on +.volume_stats[1].latency_usec"
    assert result.volume_stats[1].volume_size == 8589934592, "Died on +.volume_stats[1].volume_size"
    assert result.volume_stats[1].read_bytes == 512, "Died on +.volume_stats[1].read_bytes"
    assert result.volume_stats[1].write_ops == 0, "Died on +.volume_stats[1].write_ops"
    assert result.volume_stats[1].read_latency_usec == 0, "Died on +.volume_stats[1].read_latency_usec"
    assert result.volume_stats[1].read_bytes_last_sample == 0, "Died on +.volume_stats[1].read_bytes_last_sample"
    assert result.volume_stats[1].read_ops_last_sample == 0, "Died on +.volume_stats[1].read_ops_last_sample"
    assert result.volume_stats[1].timestamp == """2016-11-22T18:06:08.862264Z""", "Died on +.volume_stats[1].timestamp"
    assert result.volume_stats[1].average_iopsize == 0, "Died on +.volume_stats[1].average_iopsize"
    assert result.volume_stats[1].desired_metadata_hosts is None, "Died on .volume_stats[1].desired_metadata_hosts"
    assert result.volume_stats[1].write_ops_last_sample == 0, "Died on +.volume_stats[1].write_ops_last_sample"
    assert result.volume_stats[1].non_zero_blocks == 0, "Died on +.volume_stats[1].non_zero_blocks"
    assert result.volume_stats[1].virtual_volume_id == UUID("1dfe1cb3-bdd6-4051-a92c-43a0184d483d"), "Died on .volume_stats[1].virtual_volume_id"
    assert result.volume_stats[1].throttle == 0, "Died on +.volume_stats[1].throttle"
    assert result.volume_stats[1].volume_id == 13, "Died on +.volume_stats[1].volume_id"
    assert result.volume_stats[1].unaligned_reads == 1, "Died on +.volume_stats[1].unaligned_reads"
    assert result.volume_stats[1].client_queue_depth == 0, "Died on +.volume_stats[1].client_queue_depth"
    assert result.volume_stats[1].volume_utilization == 0, "Died on +.volume_stats[1].volume_utilization"
    assert result.volume_stats[1].account_id == 4, "Died on +.volume_stats[1].account_id"
    assert result.volume_stats[0].metadata_hosts.primary == 5, "Died on +.volume_stats[0].metadata_hosts.primary"
    assert result.volume_stats[0].write_latency_usec == 0, "Died on +.volume_stats[0].write_latency_usec"
    assert result.volume_stats[0].write_bytes_last_sample == 0, "Died on +.volume_stats[0].write_bytes_last_sample"
    assert result.volume_stats[0].burst_iopscredit == 0, "Died on +.volume_stats[0].burst_iopscredit"
    assert result.volume_stats[0].sample_period_msec == 0, "Died on +.volume_stats[0].sample_period_msec"
    assert result.volume_stats[0].async_delay is None, "Died on .volume_stats[0].async_delay"
    assert result.volume_stats[0].zero_blocks == 1048576, "Died on +.volume_stats[0].zero_blocks"
    assert result.volume_stats[0].actual_iops == 0, "Died on +.volume_stats[0].actual_iops"
    assert result.volume_stats[0].write_bytes == 0, "Died on +.volume_stats[0].write_bytes"
    assert result.volume_stats[0].read_ops == 0, "Died on +.volume_stats[0].read_ops"
    assert result.volume_stats[0].unaligned_writes == 0, "Died on +.volume_stats[0].unaligned_writes"
    assert result.volume_stats[0].latency_usec == 0, "Died on +.volume_stats[0].latency_usec"
    assert result.volume_stats[0].volume_size == 4294967296, "Died on +.volume_stats[0].volume_size"
    assert result.volume_stats[0].read_bytes == 0, "Died on +.volume_stats[0].read_bytes"
    assert result.volume_stats[0].write_ops == 0, "Died on +.volume_stats[0].write_ops"
    assert result.volume_stats[0].read_latency_usec == 0, "Died on +.volume_stats[0].read_latency_usec"
    assert result.volume_stats[0].read_bytes_last_sample == 0, "Died on +.volume_stats[0].read_bytes_last_sample"
    assert result.volume_stats[0].read_ops_last_sample == 0, "Died on +.volume_stats[0].read_ops_last_sample"
    assert result.volume_stats[0].timestamp == """2016-11-22T18:06:08.851768Z""", "Died on +.volume_stats[0].timestamp"
    assert result.volume_stats[0].average_iopsize == 0, "Died on +.volume_stats[0].average_iopsize"
    assert result.volume_stats[0].desired_metadata_hosts is None, "Died on .volume_stats[0].desired_metadata_hosts"
    assert result.volume_stats[0].write_ops_last_sample == 0, "Died on +.volume_stats[0].write_ops_last_sample"
    assert result.volume_stats[0].non_zero_blocks == 0, "Died on +.volume_stats[0].non_zero_blocks"
    assert result.volume_stats[0].virtual_volume_id == UUID("10c24f95-336d-4173-a19f-93ffbd852585"), "Died on .volume_stats[0].virtual_volume_id"
    assert result.volume_stats[0].throttle == 0, "Died on +.volume_stats[0].throttle"
    assert result.volume_stats[0].volume_id == 6, "Died on +.volume_stats[0].volume_id"
    assert result.volume_stats[0].unaligned_reads == 0, "Died on +.volume_stats[0].unaligned_reads"
    assert result.volume_stats[0].client_queue_depth == 0, "Died on +.volume_stats[0].client_queue_depth"
    assert result.volume_stats[0].volume_utilization == 0, "Died on +.volume_stats[0].volume_utilization"
    assert result.volume_stats[0].account_id == 2, "Died on +.volume_stats[0].account_id"

def test_modify_storage_container_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ModifyStorageContainer_v9_0)

    
    storage_container_id = UUID("2b0653fb-3d64-4ae0-9ef8-356e685b0b2e") # storage_container_id
    initiator_secret = "" # initiator_secret
    target_secret = "" # target_secret
    result = ef.modify_storage_container(storage_container_id,)
    assert result.storage_container.status == """active""", "Died on +.storage_container.status"
    assert result.storage_container.storage_container_id == UUID("b4528ea8-2930-41a0-8b8e-6361e1f0a71f"), "Died on .storage_container.storage_container_id"
    assert result.storage_container.name == """ExampleName""", "Died on +.storage_container.name"
    assert result.storage_container.initiator_secret == """e;~t5f4T~r8CQK9""", "Died on +.storage_container.initiator_secret"
    assert result.storage_container.target_secret == """LIU4?KW8mOlMZO^6""", "Died on +.storage_container.target_secret"
    assert result.storage_container.protocol_endpoint_type == """SCSI""", "Died on +.storage_container.protocol_endpoint_type"
    assert result.storage_container.account_id == 114, "Died on +.storage_container.account_id"

def test_modify_volume_access_group_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ModifyVolumeAccessGroup_v9_0)

    
    volume_access_group_id = 42 # volume_access_group_id
    virtual_network_id = 42 # virtual_network_id
    virtual_network_tags = 42 # virtual_network_tags
    name = "" # name
    initiators = "" # initiators
    volumes = 42 # volumes
    attributes = dict() # attributes
    result = ef.modify_volume_access_group(volume_access_group_id,)
    assert result.volume_access_group.name == """northbanktest""", "Died on +.volume_access_group.name"
    assert result.volume_access_group.deleted_volumes[0] == 327, "Died on +.volume_access_group.deleted_volumes[0]"
    assert result.volume_access_group.initiator_ids[1] == 115, "Died on +.volume_access_group.initiator_ids[1]"
    assert result.volume_access_group.initiator_ids[0] == 114, "Died on +.volume_access_group.initiator_ids[0]"
    assert result.volume_access_group.volumes[0] == 346, "Died on +.volume_access_group.volumes[0]"
    assert result.volume_access_group.initiators[1] == """iqn.1998-01.com.vmware:donesq-esx1-421b281b""", "Died on +.volume_access_group.initiators[1]"
    assert result.volume_access_group.initiators[0] == """iqn.1998-01.com.vmware:desk1-esx1-577b283a""", "Died on +.volume_access_group.initiators[0]"
    assert type(result.volume_access_group.attributes) is dict, "Died on .volume_access_group.attributes"
    assert result.volume_access_group.volume_access_group_id == 96, "Died on +.volume_access_group.volume_access_group_id"

def test_modify_volumes_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ModifyVolumes_v9_0)

    
    volume_ids = 42 # volume_ids
    account_id = 42 # account_id
    access = "" # access
    qos = dict() # qos
    total_size = 42 # total_size
    attributes = dict() # attributes
    result = ef.modify_volumes(volume_ids,)
    assert result.volumes[1].status == """active""", "Died on +.volumes[1].status"
    assert result.volumes[1].enable512e == False, "Died on +.volumes[1].enable512e"
    assert result.volumes[1].qos.burst_iops == 150, "Died on +.volumes[1].qos.burst_iops"
    assert result.volumes[1].qos.burst_time == 60, "Died on +.volumes[1].qos.burst_time"
    assert result.volumes[1].qos.min_iops == 50, "Died on +.volumes[1].qos.min_iops"
    assert result.volumes[1].qos.max_iops == 100, "Died on +.volumes[1].qos.max_iops"
    assert result.volumes[1].name == """doctest2""", "Died on +.volumes[1].name"
    assert result.volumes[1].scsi_naadevice_id == """6f47acc1000000006a6f373300000003""", "Died on +.volumes[1].scsi_naadevice_id"
    assert result.volumes[1].total_size == 1000341504, "Died on +.volumes[1].total_size"
    assert result.volumes[1].block_size == 4096, "Died on +.volumes[1].block_size"
    assert result.volumes[1].scsi_euidevice_id == """6a6f373300000003f47acc0100000000""", "Died on +.volumes[1].scsi_euidevice_id"
    assert result.volumes[1].volume_id == 3, "Died on +.volumes[1].volume_id"
    assert result.volumes[1].access == """replicationTarget""", "Died on +.volumes[1].access"
    assert result.volumes[1].iqn == """iqn.2010-01.com.solidfire:jo73.3""", "Died on +.volumes[1].iqn"
    assert result.volumes[1].slice_count == 1, "Died on +.volumes[1].slice_count"
    assert type(result.volumes[1].attributes) is dict, "Died on .volumes[1].attributes"
    assert result.volumes[1].account_id == 1, "Died on +.volumes[1].account_id"
    assert result.volumes[1].create_time == """2016-04-06T17:26:31Z""", "Died on +.volumes[1].create_time"
    assert result.volumes[1].virtual_volume_id is None, "Died on .volumes[1].virtual_volume_id"
    assert result.volumes[0].status == """active""", "Died on +.volumes[0].status"
    assert result.volumes[0].enable512e == False, "Died on +.volumes[0].enable512e"
    assert result.volumes[0].qos.burst_iops == 150, "Died on +.volumes[0].qos.burst_iops"
    assert result.volumes[0].qos.burst_time == 60, "Died on +.volumes[0].qos.burst_time"
    assert result.volumes[0].qos.min_iops == 50, "Died on +.volumes[0].qos.min_iops"
    assert result.volumes[0].qos.max_iops == 100, "Died on +.volumes[0].qos.max_iops"
    assert result.volumes[0].name == """doctest1""", "Died on +.volumes[0].name"
    assert result.volumes[0].scsi_naadevice_id == """6f47acc1000000006a6f373300000002""", "Died on +.volumes[0].scsi_naadevice_id"
    assert result.volumes[0].total_size == 1000341504, "Died on +.volumes[0].total_size"
    assert result.volumes[0].block_size == 4096, "Died on +.volumes[0].block_size"
    assert result.volumes[0].scsi_euidevice_id == """6a6f373300000002f47acc0100000000""", "Died on +.volumes[0].scsi_euidevice_id"
    assert result.volumes[0].volume_id == 2, "Died on +.volumes[0].volume_id"
    assert result.volumes[0].access == """replicationTarget""", "Died on +.volumes[0].access"
    assert result.volumes[0].iqn == """iqn.2010-01.com.solidfire:jo73.2""", "Died on +.volumes[0].iqn"
    assert result.volumes[0].slice_count == 1, "Died on +.volumes[0].slice_count"
    assert type(result.volumes[0].attributes) is dict, "Died on .volumes[0].attributes"
    assert result.volumes[0].account_id == 1, "Died on +.volumes[0].account_id"
    assert result.volumes[0].create_time == """2016-04-06T17:25:13Z""", "Died on +.volumes[0].create_time"
    assert result.volumes[0].virtual_volume_id is None, "Died on .volumes[0].virtual_volume_id"

def test_modify_volumes_v9_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ModifyVolumes_v9_1)

    
    volume_ids = 42 # volume_ids
    account_id = 42 # account_id
    access = "" # access
    qos = dict() # qos
    total_size = 42 # total_size
    attributes = dict() # attributes
    result = ef.modify_volumes(volume_ids,)
    assert result.volumes[9].status == """active""", "Died on +.volumes[9].status"
    assert result.volumes[9].enable512e == False, "Died on +.volumes[9].enable512e"
    assert result.volumes[9].qos.burst_iops == 15000, "Died on +.volumes[9].qos.burst_iops"
    assert result.volumes[9].qos.burst_time == 60, "Died on +.volumes[9].qos.burst_time"
    assert result.volumes[9].qos.min_iops == 50, "Died on +.volumes[9].qos.min_iops"
    assert result.volumes[9].qos.max_iops == 15000, "Died on +.volumes[9].qos.max_iops"
    assert result.volumes[9].name == """haxecsTMk7ArAT6lwxPlMxAJypTmUuQwYZzm7LOKOg44wiHgez3uihp7Z-YPer21""", "Died on +.volumes[9].name"
    assert result.volumes[9].scsi_naadevice_id == """6f47acc1000000006978766c00002705""", "Died on +.volumes[9].scsi_naadevice_id"
    assert result.volumes[9].total_size == 1000341504, "Died on +.volumes[9].total_size"
    assert result.volumes[9].block_size == 4096, "Died on +.volumes[9].block_size"
    assert result.volumes[9].scsi_euidevice_id == """6978766c00002705f47acc0100000000""", "Died on +.volumes[9].scsi_euidevice_id"
    assert result.volumes[9].volume_id == 9989, "Died on +.volumes[9].volume_id"
    assert result.volumes[9].access == """readWrite""", "Died on +.volumes[9].access"
    assert result.volumes[9].iqn == """iqn.2010-01.com.solidfire:ixvl.haxecstmk7arat6lwxplmxajyptmuuqwyzzm7lokog44wihgez3uihp7z-yper21.9989""", "Died on +.volumes[9].iqn"
    assert result.volumes[9].slice_count == 1, "Died on +.volumes[9].slice_count"
    assert type(result.volumes[9].attributes) is dict, "Died on .volumes[9].attributes"
    assert result.volumes[9].account_id == 8731, "Died on +.volumes[9].account_id"
    assert result.volumes[9].create_time == """2016-11-22T15:40:20Z""", "Died on +.volumes[9].create_time"
    assert result.volumes[9].virtual_volume_id is None, "Died on .volumes[9].virtual_volume_id"
    assert result.volumes[8].status == """active""", "Died on +.volumes[8].status"
    assert result.volumes[8].enable512e == False, "Died on +.volumes[8].enable512e"
    assert result.volumes[8].qos.burst_iops == 15000, "Died on +.volumes[8].qos.burst_iops"
    assert result.volumes[8].qos.burst_time == 60, "Died on +.volumes[8].qos.burst_time"
    assert result.volumes[8].qos.min_iops == 50, "Died on +.volumes[8].qos.min_iops"
    assert result.volumes[8].qos.max_iops == 15000, "Died on +.volumes[8].qos.max_iops"
    assert result.volumes[8].name == """haxecsqrXv1xuyJ6J9SXQ1wrH-jsaSgK0Z1LMkvBgSKmx52pcjWdYrYGxaAPv9QE""", "Died on +.volumes[8].name"
    assert result.volumes[8].scsi_naadevice_id == """6f47acc1000000006978766c00002704""", "Died on +.volumes[8].scsi_naadevice_id"
    assert result.volumes[8].total_size == 1000341504, "Died on +.volumes[8].total_size"
    assert result.volumes[8].block_size == 4096, "Died on +.volumes[8].block_size"
    assert result.volumes[8].scsi_euidevice_id == """6978766c00002704f47acc0100000000""", "Died on +.volumes[8].scsi_euidevice_id"
    assert result.volumes[8].volume_id == 9988, "Died on +.volumes[8].volume_id"
    assert result.volumes[8].access == """readWrite""", "Died on +.volumes[8].access"
    assert result.volumes[8].iqn == """iqn.2010-01.com.solidfire:ixvl.haxecsqrxv1xuyj6j9sxq1wrh-jsasgk0z1lmkvbgskmx52pcjwdyrygxaapv9qe.9988""", "Died on +.volumes[8].iqn"
    assert result.volumes[8].slice_count == 1, "Died on +.volumes[8].slice_count"
    assert type(result.volumes[8].attributes) is dict, "Died on .volumes[8].attributes"
    assert result.volumes[8].account_id == 8731, "Died on +.volumes[8].account_id"
    assert result.volumes[8].create_time == """2016-11-22T15:40:19Z""", "Died on +.volumes[8].create_time"
    assert result.volumes[8].virtual_volume_id is None, "Died on .volumes[8].virtual_volume_id"
    assert result.volumes[7].status == """active""", "Died on +.volumes[7].status"
    assert result.volumes[7].enable512e == False, "Died on +.volumes[7].enable512e"
    assert result.volumes[7].qos.burst_iops == 15000, "Died on +.volumes[7].qos.burst_iops"
    assert result.volumes[7].qos.burst_time == 60, "Died on +.volumes[7].qos.burst_time"
    assert result.volumes[7].qos.min_iops == 50, "Died on +.volumes[7].qos.min_iops"
    assert result.volumes[7].qos.max_iops == 15000, "Died on +.volumes[7].qos.max_iops"
    assert result.volumes[7].name == """haxecsd2GJ0atOYD2MuwRAhxUtzHLpMAEvoMWKg7KZwpzrKktDUXZDduYZTn4Wqc""", "Died on +.volumes[7].name"
    assert result.volumes[7].scsi_naadevice_id == """6f47acc1000000006978766c00002703""", "Died on +.volumes[7].scsi_naadevice_id"
    assert result.volumes[7].total_size == 1000341504, "Died on +.volumes[7].total_size"
    assert result.volumes[7].block_size == 4096, "Died on +.volumes[7].block_size"
    assert result.volumes[7].scsi_euidevice_id == """6978766c00002703f47acc0100000000""", "Died on +.volumes[7].scsi_euidevice_id"
    assert result.volumes[7].volume_id == 9987, "Died on +.volumes[7].volume_id"
    assert result.volumes[7].access == """readWrite""", "Died on +.volumes[7].access"
    assert result.volumes[7].iqn == """iqn.2010-01.com.solidfire:ixvl.haxecsd2gj0atoyd2muwrahxutzhlpmaevomwkg7kzwpzrkktduxzdduyztn4wqc.9987""", "Died on +.volumes[7].iqn"
    assert result.volumes[7].slice_count == 1, "Died on +.volumes[7].slice_count"
    assert type(result.volumes[7].attributes) is dict, "Died on .volumes[7].attributes"
    assert result.volumes[7].account_id == 8731, "Died on +.volumes[7].account_id"
    assert result.volumes[7].create_time == """2016-11-22T15:40:19Z""", "Died on +.volumes[7].create_time"
    assert result.volumes[7].virtual_volume_id is None, "Died on .volumes[7].virtual_volume_id"
    assert result.volumes[6].status == """active""", "Died on +.volumes[6].status"
    assert result.volumes[6].enable512e == False, "Died on +.volumes[6].enable512e"
    assert result.volumes[6].qos.burst_iops == 15000, "Died on +.volumes[6].qos.burst_iops"
    assert result.volumes[6].qos.burst_time == 60, "Died on +.volumes[6].qos.burst_time"
    assert result.volumes[6].qos.min_iops == 50, "Died on +.volumes[6].qos.min_iops"
    assert result.volumes[6].qos.max_iops == 15000, "Died on +.volumes[6].qos.max_iops"
    assert result.volumes[6].name == """haxecsWVs6tXeLqUrcAl1xh4Zr9tFE2uCzBtZsHx-WL20ASb1unbHZlt2njNSnQn""", "Died on +.volumes[6].name"
    assert result.volumes[6].scsi_naadevice_id == """6f47acc1000000006978766c00002702""", "Died on +.volumes[6].scsi_naadevice_id"
    assert result.volumes[6].total_size == 1000341504, "Died on +.volumes[6].total_size"
    assert result.volumes[6].block_size == 4096, "Died on +.volumes[6].block_size"
    assert result.volumes[6].scsi_euidevice_id == """6978766c00002702f47acc0100000000""", "Died on +.volumes[6].scsi_euidevice_id"
    assert result.volumes[6].volume_id == 9986, "Died on +.volumes[6].volume_id"
    assert result.volumes[6].access == """readWrite""", "Died on +.volumes[6].access"
    assert result.volumes[6].iqn == """iqn.2010-01.com.solidfire:ixvl.haxecswvs6txelqurcal1xh4zr9tfe2uczbtzshx-wl20asb1unbhzlt2njnsnqn.9986""", "Died on +.volumes[6].iqn"
    assert result.volumes[6].slice_count == 1, "Died on +.volumes[6].slice_count"
    assert type(result.volumes[6].attributes) is dict, "Died on .volumes[6].attributes"
    assert result.volumes[6].account_id == 8731, "Died on +.volumes[6].account_id"
    assert result.volumes[6].create_time == """2016-11-22T15:40:18Z""", "Died on +.volumes[6].create_time"
    assert result.volumes[6].virtual_volume_id is None, "Died on .volumes[6].virtual_volume_id"
    assert result.volumes[5].status == """active""", "Died on +.volumes[5].status"
    assert result.volumes[5].enable512e == False, "Died on +.volumes[5].enable512e"
    assert result.volumes[5].qos.burst_iops == 15000, "Died on +.volumes[5].qos.burst_iops"
    assert result.volumes[5].qos.burst_time == 60, "Died on +.volumes[5].qos.burst_time"
    assert result.volumes[5].qos.min_iops == 50, "Died on +.volumes[5].qos.min_iops"
    assert result.volumes[5].qos.max_iops == 15000, "Died on +.volumes[5].qos.max_iops"
    assert result.volumes[5].name == """haxecs0gjUYyK7LxpbAZnIw4-4upyllA6jcFGDAQr03aa67L-dJyhUTTrWL8ALt8""", "Died on +.volumes[5].name"
    assert result.volumes[5].scsi_naadevice_id == """6f47acc1000000006978766c00002701""", "Died on +.volumes[5].scsi_naadevice_id"
    assert result.volumes[5].total_size == 1000341504, "Died on +.volumes[5].total_size"
    assert result.volumes[5].block_size == 4096, "Died on +.volumes[5].block_size"
    assert result.volumes[5].scsi_euidevice_id == """6978766c00002701f47acc0100000000""", "Died on +.volumes[5].scsi_euidevice_id"
    assert result.volumes[5].volume_id == 9985, "Died on +.volumes[5].volume_id"
    assert result.volumes[5].access == """readWrite""", "Died on +.volumes[5].access"
    assert result.volumes[5].iqn == """iqn.2010-01.com.solidfire:ixvl.haxecs0gjuyyk7lxpbazniw4-4upylla6jcfgdaqr03aa67l-djyhuttrwl8alt8.9985""", "Died on +.volumes[5].iqn"
    assert result.volumes[5].slice_count == 1, "Died on +.volumes[5].slice_count"
    assert type(result.volumes[5].attributes) is dict, "Died on .volumes[5].attributes"
    assert result.volumes[5].account_id == 8731, "Died on +.volumes[5].account_id"
    assert result.volumes[5].create_time == """2016-11-22T15:40:18Z""", "Died on +.volumes[5].create_time"
    assert result.volumes[5].virtual_volume_id is None, "Died on .volumes[5].virtual_volume_id"
    assert result.volumes[4].status == """active""", "Died on +.volumes[4].status"
    assert result.volumes[4].enable512e == False, "Died on +.volumes[4].enable512e"
    assert result.volumes[4].qos.burst_iops == 15000, "Died on +.volumes[4].qos.burst_iops"
    assert result.volumes[4].qos.burst_time == 60, "Died on +.volumes[4].qos.burst_time"
    assert result.volumes[4].qos.min_iops == 50, "Died on +.volumes[4].qos.min_iops"
    assert result.volumes[4].qos.max_iops == 15000, "Died on +.volumes[4].qos.max_iops"
    assert result.volumes[4].name == """haxecs-aYusaaABjCuGxReAFnJ49bb2zzvcEZGSa6iUHwmN5Y5uJy85Zrjjp5B-8""", "Died on +.volumes[4].name"
    assert result.volumes[4].scsi_naadevice_id == """6f47acc1000000006978766c00002700""", "Died on +.volumes[4].scsi_naadevice_id"
    assert result.volumes[4].total_size == 1000341504, "Died on +.volumes[4].total_size"
    assert result.volumes[4].block_size == 4096, "Died on +.volumes[4].block_size"
    assert result.volumes[4].scsi_euidevice_id == """6978766c00002700f47acc0100000000""", "Died on +.volumes[4].scsi_euidevice_id"
    assert result.volumes[4].volume_id == 9984, "Died on +.volumes[4].volume_id"
    assert result.volumes[4].access == """readWrite""", "Died on +.volumes[4].access"
    assert result.volumes[4].iqn == """iqn.2010-01.com.solidfire:ixvl.haxecs-ayusaaabjcugxreafnj49bb2zzvcezgsa6iuhwmn5y5ujy85zrjjp5b-8.9984""", "Died on +.volumes[4].iqn"
    assert result.volumes[4].slice_count == 1, "Died on +.volumes[4].slice_count"
    assert type(result.volumes[4].attributes) is dict, "Died on .volumes[4].attributes"
    assert result.volumes[4].account_id == 8731, "Died on +.volumes[4].account_id"
    assert result.volumes[4].create_time == """2016-11-22T15:40:18Z""", "Died on +.volumes[4].create_time"
    assert result.volumes[4].virtual_volume_id is None, "Died on .volumes[4].virtual_volume_id"
    assert result.volumes[3].status == """active""", "Died on +.volumes[3].status"
    assert result.volumes[3].enable512e == False, "Died on +.volumes[3].enable512e"
    assert result.volumes[3].qos.burst_iops == 15000, "Died on +.volumes[3].qos.burst_iops"
    assert result.volumes[3].qos.burst_time == 60, "Died on +.volumes[3].qos.burst_time"
    assert result.volumes[3].qos.min_iops == 50, "Died on +.volumes[3].qos.min_iops"
    assert result.volumes[3].qos.max_iops == 15000, "Died on +.volumes[3].qos.max_iops"
    assert result.volumes[3].name == """haxecsmsseXt8U48VAvvF4cgLBhgLepyFk-Te6BYaSRHq2TSUU5AAQMFGtNcbFhO""", "Died on +.volumes[3].name"
    assert result.volumes[3].scsi_naadevice_id == """6f47acc1000000006978766c000026ff""", "Died on +.volumes[3].scsi_naadevice_id"
    assert result.volumes[3].total_size == 1000341504, "Died on +.volumes[3].total_size"
    assert result.volumes[3].block_size == 4096, "Died on +.volumes[3].block_size"
    assert result.volumes[3].scsi_euidevice_id == """6978766c000026fff47acc0100000000""", "Died on +.volumes[3].scsi_euidevice_id"
    assert result.volumes[3].volume_id == 9983, "Died on +.volumes[3].volume_id"
    assert result.volumes[3].access == """readWrite""", "Died on +.volumes[3].access"
    assert result.volumes[3].iqn == """iqn.2010-01.com.solidfire:ixvl.haxecsmssext8u48vavvf4cglbhglepyfk-te6byasrhq2tsuu5aaqmfgtncbfho.9983""", "Died on +.volumes[3].iqn"
    assert result.volumes[3].slice_count == 1, "Died on +.volumes[3].slice_count"
    assert type(result.volumes[3].attributes) is dict, "Died on .volumes[3].attributes"
    assert result.volumes[3].account_id == 8731, "Died on +.volumes[3].account_id"
    assert result.volumes[3].create_time == """2016-11-22T15:40:17Z""", "Died on +.volumes[3].create_time"
    assert result.volumes[3].virtual_volume_id is None, "Died on .volumes[3].virtual_volume_id"
    assert result.volumes[2].status == """active""", "Died on +.volumes[2].status"
    assert result.volumes[2].enable512e == False, "Died on +.volumes[2].enable512e"
    assert result.volumes[2].qos.burst_iops == 15000, "Died on +.volumes[2].qos.burst_iops"
    assert result.volumes[2].qos.burst_time == 60, "Died on +.volumes[2].qos.burst_time"
    assert result.volumes[2].qos.min_iops == 50, "Died on +.volumes[2].qos.min_iops"
    assert result.volumes[2].qos.max_iops == 15000, "Died on +.volumes[2].qos.max_iops"
    assert result.volumes[2].name == """haxecsMcXWLMFmGVYwBJQMKylKQU0jLZEubpLb6N1egfSeXLbw-aF5-86g3yW2ny""", "Died on +.volumes[2].name"
    assert result.volumes[2].scsi_naadevice_id == """6f47acc1000000006978766c000026fe""", "Died on +.volumes[2].scsi_naadevice_id"
    assert result.volumes[2].total_size == 1000341504, "Died on +.volumes[2].total_size"
    assert result.volumes[2].block_size == 4096, "Died on +.volumes[2].block_size"
    assert result.volumes[2].scsi_euidevice_id == """6978766c000026fef47acc0100000000""", "Died on +.volumes[2].scsi_euidevice_id"
    assert result.volumes[2].volume_id == 9982, "Died on +.volumes[2].volume_id"
    assert result.volumes[2].access == """readWrite""", "Died on +.volumes[2].access"
    assert result.volumes[2].iqn == """iqn.2010-01.com.solidfire:ixvl.haxecsmcxwlmfmgvywbjqmkylkqu0jlzeubplb6n1egfsexlbw-af5-86g3yw2ny.9982""", "Died on +.volumes[2].iqn"
    assert result.volumes[2].slice_count == 1, "Died on +.volumes[2].slice_count"
    assert type(result.volumes[2].attributes) is dict, "Died on .volumes[2].attributes"
    assert result.volumes[2].account_id == 8731, "Died on +.volumes[2].account_id"
    assert result.volumes[2].create_time == """2016-11-22T15:40:17Z""", "Died on +.volumes[2].create_time"
    assert result.volumes[2].virtual_volume_id is None, "Died on .volumes[2].virtual_volume_id"
    assert result.volumes[1].status == """active""", "Died on +.volumes[1].status"
    assert result.volumes[1].enable512e == False, "Died on +.volumes[1].enable512e"
    assert result.volumes[1].qos.burst_iops == 15000, "Died on +.volumes[1].qos.burst_iops"
    assert result.volumes[1].qos.burst_time == 60, "Died on +.volumes[1].qos.burst_time"
    assert result.volumes[1].qos.min_iops == 50, "Died on +.volumes[1].qos.min_iops"
    assert result.volumes[1].qos.max_iops == 15000, "Died on +.volumes[1].qos.max_iops"
    assert result.volumes[1].name == """haxecsksGCuvTR98NqeDr-AJYSgUleRJEP4oNfWa11IrehGUOkM-hAY8r1-PbQGm""", "Died on +.volumes[1].name"
    assert result.volumes[1].scsi_naadevice_id == """6f47acc1000000006978766c000026fd""", "Died on +.volumes[1].scsi_naadevice_id"
    assert result.volumes[1].total_size == 1000341504, "Died on +.volumes[1].total_size"
    assert result.volumes[1].block_size == 4096, "Died on +.volumes[1].block_size"
    assert result.volumes[1].scsi_euidevice_id == """6978766c000026fdf47acc0100000000""", "Died on +.volumes[1].scsi_euidevice_id"
    assert result.volumes[1].volume_id == 9981, "Died on +.volumes[1].volume_id"
    assert result.volumes[1].access == """readWrite""", "Died on +.volumes[1].access"
    assert result.volumes[1].iqn == """iqn.2010-01.com.solidfire:ixvl.haxecsksgcuvtr98nqedr-ajysgulerjep4onfwa11irehguokm-hay8r1-pbqgm.9981""", "Died on +.volumes[1].iqn"
    assert result.volumes[1].slice_count == 1, "Died on +.volumes[1].slice_count"
    assert type(result.volumes[1].attributes) is dict, "Died on .volumes[1].attributes"
    assert result.volumes[1].account_id == 8731, "Died on +.volumes[1].account_id"
    assert result.volumes[1].create_time == """2016-11-22T15:40:16Z""", "Died on +.volumes[1].create_time"
    assert result.volumes[1].virtual_volume_id is None, "Died on .volumes[1].virtual_volume_id"
    assert result.volumes[0].status == """active""", "Died on +.volumes[0].status"
    assert result.volumes[0].enable512e == False, "Died on +.volumes[0].enable512e"
    assert result.volumes[0].qos.burst_iops == 15000, "Died on +.volumes[0].qos.burst_iops"
    assert result.volumes[0].qos.burst_time == 60, "Died on +.volumes[0].qos.burst_time"
    assert result.volumes[0].qos.min_iops == 50, "Died on +.volumes[0].qos.min_iops"
    assert result.volumes[0].qos.max_iops == 15000, "Died on +.volumes[0].qos.max_iops"
    assert result.volumes[0].name == """haxecsl537C7LrXL7lRHGvDuUCobdg2w2E1YLCsoAxk8KdiZNtILDuhsfP3jUKbX""", "Died on +.volumes[0].name"
    assert result.volumes[0].scsi_naadevice_id == """6f47acc1000000006978766c000026fc""", "Died on +.volumes[0].scsi_naadevice_id"
    assert result.volumes[0].total_size == 1000341504, "Died on +.volumes[0].total_size"
    assert result.volumes[0].block_size == 4096, "Died on +.volumes[0].block_size"
    assert result.volumes[0].scsi_euidevice_id == """6978766c000026fcf47acc0100000000""", "Died on +.volumes[0].scsi_euidevice_id"
    assert result.volumes[0].volume_id == 9980, "Died on +.volumes[0].volume_id"
    assert result.volumes[0].access == """readWrite""", "Died on +.volumes[0].access"
    assert result.volumes[0].iqn == """iqn.2010-01.com.solidfire:ixvl.haxecsl537c7lrxl7lrhgvduucobdg2w2e1ylcsoaxk8kdizntilduhsfp3jukbx.9980""", "Died on +.volumes[0].iqn"
    assert result.volumes[0].slice_count == 1, "Died on +.volumes[0].slice_count"
    assert type(result.volumes[0].attributes) is dict, "Died on .volumes[0].attributes"
    assert result.volumes[0].account_id == 8731, "Died on +.volumes[0].account_id"
    assert result.volumes[0].create_time == """2016-11-22T15:40:16Z""", "Died on +.volumes[0].create_time"
    assert result.volumes[0].virtual_volume_id is None, "Died on .volumes[0].virtual_volume_id"

def test_purge_deleted_volumes_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_PurgeDeletedVolumes_v9_0)

    
    volume_ids = 42 # volume_ids
    account_ids = 42 # account_ids
    volume_access_group_ids = 42 # volume_access_group_ids
    result = ef.purge_deleted_volumes()

def test_reset_node_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ResetNode_v9_0)

    
    build = "" # build
    force = True # force
    option = "" # option
    result = ef.reset_node(build,force,)
    assert result.rtfi_info.status_url_current == """http://192.168.130.20/status/current.json""", "Died on +.rtfi_info.status_url_current"
    assert type(result.rtfi_info.options) is dict, "Died on .rtfi_info.options"
    assert result.rtfi_info.status_url_all == """http://192.168.130.20/status/all.json""", "Died on +.rtfi_info.status_url_all"
    assert result.rtfi_info.build == """file:///sf/rtfi/image/filesystem.squashfs""", "Died on +.rtfi_info.build"

def test_restart_networking_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_RestartNetworking_v9_0)

    
    force = True # force
    result = ef.restart_networking(force,)

def test_restart_services_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_RestartServices_v9_0)

    
    force = True # force
    service = "" # service
    action = "" # action
    result = ef.restart_services(force,)

def test_restart_services_v9_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_RestartServices_v9_1)

    
    force = True # force
    service = "" # service
    action = "" # action
    result = ef.restart_services(force,)

def test_set_default_qos_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetDefaultQoS_v9_0)

    
    min_iops = 42 # min_iops
    max_iops = 42 # max_iops
    burst_iops = 42 # burst_iops
    result = ef.set_default_qos()
    assert result.burst_iops == 8000, "Died on +.burst_iops"
    assert result.min_iops == 200, "Died on +.min_iops"
    assert result.max_iops == 1000, "Died on +.max_iops"

def test_shutdown_v9_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_Shutdown_v9_0)

    
    nodes = 42 # nodes
    option = "" # option
    result = ef.shutdown(nodes,)
    assert result.successful[0] == 1, "Died on +.successful[0]"

def test_add_account_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_AddAccount_v8.4_0)

    
    username = "" # username
    initiator_secret = dict() # initiator_secret
    target_secret = dict() # target_secret
    attributes = dict() # attributes
    result = ef.add_account(username,)
    assert result.account_id == 1, "Died on +.account_id"

def test_add_account_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_AddAccount_v8.6_0)

    
    username = "" # username
    initiator_secret = dict() # initiator_secret
    target_secret = dict() # target_secret
    attributes = dict() # attributes
    result = ef.add_account(username,)
    assert result.account_id == 1, "Died on +.account_id"

def test_add_account_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_AddAccount_v8.7_0)

    
    username = "" # username
    initiator_secret = dict() # initiator_secret
    target_secret = dict() # target_secret
    attributes = dict() # attributes
    result = ef.add_account(username,)
    assert result.account_id == 1, "Died on +.account_id"

def test_add_account_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_AddAccount_v9.0_0)

    
    username = "" # username
    initiator_secret = dict() # initiator_secret
    target_secret = dict() # target_secret
    attributes = dict() # attributes
    result = ef.add_account(username,)
    assert result.account.status == """active""", "Died on +.account.status"
    assert result.account.username == """K0muAOpCq8zUKbL4""", "Died on +.account.username"
    assert result.account.storage_container_id == UUID("00000000-0000-0000-0000-000000000000"), "Died on .account.storage_container_id"
    assert type(result.account.attributes) is dict, "Died on .account.attributes"
    assert result.account.account_id == 1, "Died on +.account.account_id"
    assert result.account_id == 1, "Died on +.account_id"

def test_add_account_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_AddAccount_v9.1_0)

    
    username = "" # username
    initiator_secret = dict() # initiator_secret
    target_secret = dict() # target_secret
    attributes = dict() # attributes
    result = ef.add_account(username,)
    assert result.account.status == """active""", "Died on +.account.status"
    assert result.account.username == """yWcdE86kENMjAczw""", "Died on +.account.username"
    assert result.account.storage_container_id == UUID("00000000-0000-0000-0000-000000000000"), "Died on .account.storage_container_id"
    assert type(result.account.attributes) is dict, "Died on .account.attributes"
    assert result.account.account_id == 2, "Died on +.account.account_id"
    assert result.account_id == 2, "Died on +.account_id"

def test_add_cluster_admin_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_AddClusterAdmin_v8.4_0)

    
    username = "" # username
    password = "" # password
    access = "" # access
    accept_eula = True # accept_eula
    attributes = dict() # attributes
    result = ef.add_cluster_admin(username,password,access,)
    assert result.cluster_admin_id == 3, "Died on +.cluster_admin_id"

def test_add_cluster_admin_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_AddClusterAdmin_v8.6_0)

    
    username = "" # username
    password = "" # password
    access = "" # access
    accept_eula = True # accept_eula
    attributes = dict() # attributes
    result = ef.add_cluster_admin(username,password,access,)
    assert result.cluster_admin_id == 3, "Died on +.cluster_admin_id"

def test_add_cluster_admin_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_AddClusterAdmin_v8.7_0)

    
    username = "" # username
    password = "" # password
    access = "" # access
    accept_eula = True # accept_eula
    attributes = dict() # attributes
    result = ef.add_cluster_admin(username,password,access,)
    assert result.cluster_admin_id == 3, "Died on +.cluster_admin_id"

def test_add_cluster_admin_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_AddClusterAdmin_v9.0_0)

    
    username = "" # username
    password = "" # password
    access = "" # access
    accept_eula = True # accept_eula
    attributes = dict() # attributes
    result = ef.add_cluster_admin(username,password,access,)
    assert result.cluster_admin_id == 9, "Died on +.cluster_admin_id"

def test_add_cluster_admin_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_AddClusterAdmin_v9.1_0)

    
    username = "" # username
    password = "" # password
    access = "" # access
    accept_eula = True # accept_eula
    attributes = dict() # attributes
    result = ef.add_cluster_admin(username,password,access,)
    assert result.cluster_admin_id == 8, "Died on +.cluster_admin_id"

def test_add_drives_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_AddDrives_v8.4_0)

    
    drives = dict() # drives
    force_during_upgrade = True # force_during_upgrade
    result = ef.add_drives(drives,)

def test_add_drives_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_AddDrives_v8.6_0)

    
    drives = dict() # drives
    force_during_upgrade = True # force_during_upgrade
    result = ef.add_drives(drives,)
    assert result.async_handle == 1, "Died on +.async_handle"

def test_add_drives_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_AddDrives_v8.7_0)

    
    drives = dict() # drives
    force_during_upgrade = True # force_during_upgrade
    result = ef.add_drives(drives,)
    assert result.async_handle == 1, "Died on +.async_handle"

def test_add_drives_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_AddDrives_v9.0_0)

    
    drives = dict() # drives
    force_during_upgrade = True # force_during_upgrade
    result = ef.add_drives(drives,)
    assert result.async_handle == 1, "Died on +.async_handle"

def test_add_drives_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_AddDrives_v9.1_0)

    
    drives = dict() # drives
    force_during_upgrade = True # force_during_upgrade
    result = ef.add_drives(drives,)
    assert result.async_handle == 1, "Died on +.async_handle"

def test_add_initiators_to_volume_access_group_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_AddInitiatorsToVolumeAccessGroup_v9.1_1)

    
    volume_access_group_id = 42 # volume_access_group_id
    initiators = "" # initiators
    result = ef.add_initiators_to_volume_access_group(volume_access_group_id,initiators,)
    assert result.volume_access_group.name == """sync-source-vag""", "Died on +.volume_access_group.name"
    assert result.volume_access_group.initiator_ids[0] == 1, "Died on +.volume_access_group.initiator_ids[0]"
    assert result.volume_access_group.volumes[149] == 350, "Died on +.volume_access_group.volumes[149]"
    assert result.volume_access_group.volumes[148] == 349, "Died on +.volume_access_group.volumes[148]"
    assert result.volume_access_group.volumes[147] == 348, "Died on +.volume_access_group.volumes[147]"
    assert result.volume_access_group.volumes[146] == 347, "Died on +.volume_access_group.volumes[146]"
    assert result.volume_access_group.volumes[145] == 346, "Died on +.volume_access_group.volumes[145]"
    assert result.volume_access_group.volumes[144] == 345, "Died on +.volume_access_group.volumes[144]"
    assert result.volume_access_group.volumes[143] == 344, "Died on +.volume_access_group.volumes[143]"
    assert result.volume_access_group.volumes[142] == 343, "Died on +.volume_access_group.volumes[142]"
    assert result.volume_access_group.volumes[141] == 342, "Died on +.volume_access_group.volumes[141]"
    assert result.volume_access_group.volumes[140] == 341, "Died on +.volume_access_group.volumes[140]"
    assert result.volume_access_group.volumes[139] == 340, "Died on +.volume_access_group.volumes[139]"
    assert result.volume_access_group.volumes[138] == 339, "Died on +.volume_access_group.volumes[138]"
    assert result.volume_access_group.volumes[137] == 338, "Died on +.volume_access_group.volumes[137]"
    assert result.volume_access_group.volumes[136] == 337, "Died on +.volume_access_group.volumes[136]"
    assert result.volume_access_group.volumes[135] == 336, "Died on +.volume_access_group.volumes[135]"
    assert result.volume_access_group.volumes[134] == 335, "Died on +.volume_access_group.volumes[134]"
    assert result.volume_access_group.volumes[133] == 334, "Died on +.volume_access_group.volumes[133]"
    assert result.volume_access_group.volumes[132] == 333, "Died on +.volume_access_group.volumes[132]"
    assert result.volume_access_group.volumes[131] == 332, "Died on +.volume_access_group.volumes[131]"
    assert result.volume_access_group.volumes[130] == 331, "Died on +.volume_access_group.volumes[130]"
    assert result.volume_access_group.volumes[129] == 330, "Died on +.volume_access_group.volumes[129]"
    assert result.volume_access_group.volumes[128] == 329, "Died on +.volume_access_group.volumes[128]"
    assert result.volume_access_group.volumes[127] == 328, "Died on +.volume_access_group.volumes[127]"
    assert result.volume_access_group.volumes[126] == 327, "Died on +.volume_access_group.volumes[126]"
    assert result.volume_access_group.volumes[125] == 326, "Died on +.volume_access_group.volumes[125]"
    assert result.volume_access_group.volumes[124] == 325, "Died on +.volume_access_group.volumes[124]"
    assert result.volume_access_group.volumes[123] == 324, "Died on +.volume_access_group.volumes[123]"
    assert result.volume_access_group.volumes[122] == 323, "Died on +.volume_access_group.volumes[122]"
    assert result.volume_access_group.volumes[121] == 322, "Died on +.volume_access_group.volumes[121]"
    assert result.volume_access_group.volumes[120] == 321, "Died on +.volume_access_group.volumes[120]"
    assert result.volume_access_group.volumes[119] == 320, "Died on +.volume_access_group.volumes[119]"
    assert result.volume_access_group.volumes[118] == 319, "Died on +.volume_access_group.volumes[118]"
    assert result.volume_access_group.volumes[117] == 318, "Died on +.volume_access_group.volumes[117]"
    assert result.volume_access_group.volumes[116] == 317, "Died on +.volume_access_group.volumes[116]"
    assert result.volume_access_group.volumes[115] == 316, "Died on +.volume_access_group.volumes[115]"
    assert result.volume_access_group.volumes[114] == 315, "Died on +.volume_access_group.volumes[114]"
    assert result.volume_access_group.volumes[113] == 314, "Died on +.volume_access_group.volumes[113]"
    assert result.volume_access_group.volumes[112] == 313, "Died on +.volume_access_group.volumes[112]"
    assert result.volume_access_group.volumes[111] == 312, "Died on +.volume_access_group.volumes[111]"
    assert result.volume_access_group.volumes[110] == 311, "Died on +.volume_access_group.volumes[110]"
    assert result.volume_access_group.volumes[109] == 310, "Died on +.volume_access_group.volumes[109]"
    assert result.volume_access_group.volumes[108] == 309, "Died on +.volume_access_group.volumes[108]"
    assert result.volume_access_group.volumes[107] == 308, "Died on +.volume_access_group.volumes[107]"
    assert result.volume_access_group.volumes[106] == 307, "Died on +.volume_access_group.volumes[106]"
    assert result.volume_access_group.volumes[105] == 306, "Died on +.volume_access_group.volumes[105]"
    assert result.volume_access_group.volumes[104] == 305, "Died on +.volume_access_group.volumes[104]"
    assert result.volume_access_group.volumes[103] == 304, "Died on +.volume_access_group.volumes[103]"
    assert result.volume_access_group.volumes[102] == 303, "Died on +.volume_access_group.volumes[102]"
    assert result.volume_access_group.volumes[101] == 302, "Died on +.volume_access_group.volumes[101]"
    assert result.volume_access_group.volumes[100] == 301, "Died on +.volume_access_group.volumes[100]"
    assert result.volume_access_group.volumes[99] == 300, "Died on +.volume_access_group.volumes[99]"
    assert result.volume_access_group.volumes[98] == 299, "Died on +.volume_access_group.volumes[98]"
    assert result.volume_access_group.volumes[97] == 298, "Died on +.volume_access_group.volumes[97]"
    assert result.volume_access_group.volumes[96] == 297, "Died on +.volume_access_group.volumes[96]"
    assert result.volume_access_group.volumes[95] == 296, "Died on +.volume_access_group.volumes[95]"
    assert result.volume_access_group.volumes[94] == 295, "Died on +.volume_access_group.volumes[94]"
    assert result.volume_access_group.volumes[93] == 294, "Died on +.volume_access_group.volumes[93]"
    assert result.volume_access_group.volumes[92] == 293, "Died on +.volume_access_group.volumes[92]"
    assert result.volume_access_group.volumes[91] == 292, "Died on +.volume_access_group.volumes[91]"
    assert result.volume_access_group.volumes[90] == 291, "Died on +.volume_access_group.volumes[90]"
    assert result.volume_access_group.volumes[89] == 290, "Died on +.volume_access_group.volumes[89]"
    assert result.volume_access_group.volumes[88] == 289, "Died on +.volume_access_group.volumes[88]"
    assert result.volume_access_group.volumes[87] == 288, "Died on +.volume_access_group.volumes[87]"
    assert result.volume_access_group.volumes[86] == 287, "Died on +.volume_access_group.volumes[86]"
    assert result.volume_access_group.volumes[85] == 286, "Died on +.volume_access_group.volumes[85]"
    assert result.volume_access_group.volumes[84] == 285, "Died on +.volume_access_group.volumes[84]"
    assert result.volume_access_group.volumes[83] == 284, "Died on +.volume_access_group.volumes[83]"
    assert result.volume_access_group.volumes[82] == 283, "Died on +.volume_access_group.volumes[82]"
    assert result.volume_access_group.volumes[81] == 282, "Died on +.volume_access_group.volumes[81]"
    assert result.volume_access_group.volumes[80] == 281, "Died on +.volume_access_group.volumes[80]"
    assert result.volume_access_group.volumes[79] == 280, "Died on +.volume_access_group.volumes[79]"
    assert result.volume_access_group.volumes[78] == 279, "Died on +.volume_access_group.volumes[78]"
    assert result.volume_access_group.volumes[77] == 278, "Died on +.volume_access_group.volumes[77]"
    assert result.volume_access_group.volumes[76] == 277, "Died on +.volume_access_group.volumes[76]"
    assert result.volume_access_group.volumes[75] == 276, "Died on +.volume_access_group.volumes[75]"
    assert result.volume_access_group.volumes[74] == 275, "Died on +.volume_access_group.volumes[74]"
    assert result.volume_access_group.volumes[73] == 274, "Died on +.volume_access_group.volumes[73]"
    assert result.volume_access_group.volumes[72] == 273, "Died on +.volume_access_group.volumes[72]"
    assert result.volume_access_group.volumes[71] == 272, "Died on +.volume_access_group.volumes[71]"
    assert result.volume_access_group.volumes[70] == 271, "Died on +.volume_access_group.volumes[70]"
    assert result.volume_access_group.volumes[69] == 270, "Died on +.volume_access_group.volumes[69]"
    assert result.volume_access_group.volumes[68] == 269, "Died on +.volume_access_group.volumes[68]"
    assert result.volume_access_group.volumes[67] == 268, "Died on +.volume_access_group.volumes[67]"
    assert result.volume_access_group.volumes[66] == 267, "Died on +.volume_access_group.volumes[66]"
    assert result.volume_access_group.volumes[65] == 266, "Died on +.volume_access_group.volumes[65]"
    assert result.volume_access_group.volumes[64] == 265, "Died on +.volume_access_group.volumes[64]"
    assert result.volume_access_group.volumes[63] == 264, "Died on +.volume_access_group.volumes[63]"
    assert result.volume_access_group.volumes[62] == 263, "Died on +.volume_access_group.volumes[62]"
    assert result.volume_access_group.volumes[61] == 262, "Died on +.volume_access_group.volumes[61]"
    assert result.volume_access_group.volumes[60] == 261, "Died on +.volume_access_group.volumes[60]"
    assert result.volume_access_group.volumes[59] == 260, "Died on +.volume_access_group.volumes[59]"
    assert result.volume_access_group.volumes[58] == 259, "Died on +.volume_access_group.volumes[58]"
    assert result.volume_access_group.volumes[57] == 258, "Died on +.volume_access_group.volumes[57]"
    assert result.volume_access_group.volumes[56] == 257, "Died on +.volume_access_group.volumes[56]"
    assert result.volume_access_group.volumes[55] == 256, "Died on +.volume_access_group.volumes[55]"
    assert result.volume_access_group.volumes[54] == 255, "Died on +.volume_access_group.volumes[54]"
    assert result.volume_access_group.volumes[53] == 254, "Died on +.volume_access_group.volumes[53]"
    assert result.volume_access_group.volumes[52] == 253, "Died on +.volume_access_group.volumes[52]"
    assert result.volume_access_group.volumes[51] == 252, "Died on +.volume_access_group.volumes[51]"
    assert result.volume_access_group.volumes[50] == 251, "Died on +.volume_access_group.volumes[50]"
    assert result.volume_access_group.volumes[49] == 250, "Died on +.volume_access_group.volumes[49]"
    assert result.volume_access_group.volumes[48] == 249, "Died on +.volume_access_group.volumes[48]"
    assert result.volume_access_group.volumes[47] == 248, "Died on +.volume_access_group.volumes[47]"
    assert result.volume_access_group.volumes[46] == 247, "Died on +.volume_access_group.volumes[46]"
    assert result.volume_access_group.volumes[45] == 246, "Died on +.volume_access_group.volumes[45]"
    assert result.volume_access_group.volumes[44] == 245, "Died on +.volume_access_group.volumes[44]"
    assert result.volume_access_group.volumes[43] == 244, "Died on +.volume_access_group.volumes[43]"
    assert result.volume_access_group.volumes[42] == 243, "Died on +.volume_access_group.volumes[42]"
    assert result.volume_access_group.volumes[41] == 242, "Died on +.volume_access_group.volumes[41]"
    assert result.volume_access_group.volumes[40] == 241, "Died on +.volume_access_group.volumes[40]"
    assert result.volume_access_group.volumes[39] == 240, "Died on +.volume_access_group.volumes[39]"
    assert result.volume_access_group.volumes[38] == 239, "Died on +.volume_access_group.volumes[38]"
    assert result.volume_access_group.volumes[37] == 238, "Died on +.volume_access_group.volumes[37]"
    assert result.volume_access_group.volumes[36] == 237, "Died on +.volume_access_group.volumes[36]"
    assert result.volume_access_group.volumes[35] == 236, "Died on +.volume_access_group.volumes[35]"
    assert result.volume_access_group.volumes[34] == 235, "Died on +.volume_access_group.volumes[34]"
    assert result.volume_access_group.volumes[33] == 234, "Died on +.volume_access_group.volumes[33]"
    assert result.volume_access_group.volumes[32] == 233, "Died on +.volume_access_group.volumes[32]"
    assert result.volume_access_group.volumes[31] == 232, "Died on +.volume_access_group.volumes[31]"
    assert result.volume_access_group.volumes[30] == 231, "Died on +.volume_access_group.volumes[30]"
    assert result.volume_access_group.volumes[29] == 230, "Died on +.volume_access_group.volumes[29]"
    assert result.volume_access_group.volumes[28] == 229, "Died on +.volume_access_group.volumes[28]"
    assert result.volume_access_group.volumes[27] == 228, "Died on +.volume_access_group.volumes[27]"
    assert result.volume_access_group.volumes[26] == 227, "Died on +.volume_access_group.volumes[26]"
    assert result.volume_access_group.volumes[25] == 226, "Died on +.volume_access_group.volumes[25]"
    assert result.volume_access_group.volumes[24] == 225, "Died on +.volume_access_group.volumes[24]"
    assert result.volume_access_group.volumes[23] == 224, "Died on +.volume_access_group.volumes[23]"
    assert result.volume_access_group.volumes[22] == 223, "Died on +.volume_access_group.volumes[22]"
    assert result.volume_access_group.volumes[21] == 222, "Died on +.volume_access_group.volumes[21]"
    assert result.volume_access_group.volumes[20] == 221, "Died on +.volume_access_group.volumes[20]"
    assert result.volume_access_group.volumes[19] == 220, "Died on +.volume_access_group.volumes[19]"
    assert result.volume_access_group.volumes[18] == 219, "Died on +.volume_access_group.volumes[18]"
    assert result.volume_access_group.volumes[17] == 218, "Died on +.volume_access_group.volumes[17]"
    assert result.volume_access_group.volumes[16] == 217, "Died on +.volume_access_group.volumes[16]"
    assert result.volume_access_group.volumes[15] == 216, "Died on +.volume_access_group.volumes[15]"
    assert result.volume_access_group.volumes[14] == 215, "Died on +.volume_access_group.volumes[14]"
    assert result.volume_access_group.volumes[13] == 214, "Died on +.volume_access_group.volumes[13]"
    assert result.volume_access_group.volumes[12] == 213, "Died on +.volume_access_group.volumes[12]"
    assert result.volume_access_group.volumes[11] == 212, "Died on +.volume_access_group.volumes[11]"
    assert result.volume_access_group.volumes[10] == 211, "Died on +.volume_access_group.volumes[10]"
    assert result.volume_access_group.volumes[9] == 210, "Died on +.volume_access_group.volumes[9]"
    assert result.volume_access_group.volumes[8] == 209, "Died on +.volume_access_group.volumes[8]"
    assert result.volume_access_group.volumes[7] == 208, "Died on +.volume_access_group.volumes[7]"
    assert result.volume_access_group.volumes[6] == 207, "Died on +.volume_access_group.volumes[6]"
    assert result.volume_access_group.volumes[5] == 206, "Died on +.volume_access_group.volumes[5]"
    assert result.volume_access_group.volumes[4] == 205, "Died on +.volume_access_group.volumes[4]"
    assert result.volume_access_group.volumes[3] == 204, "Died on +.volume_access_group.volumes[3]"
    assert result.volume_access_group.volumes[2] == 203, "Died on +.volume_access_group.volumes[2]"
    assert result.volume_access_group.volumes[1] == 202, "Died on +.volume_access_group.volumes[1]"
    assert result.volume_access_group.volumes[0] == 201, "Died on +.volume_access_group.volumes[0]"
    assert result.volume_access_group.initiators[0] == """iqn.2010-01.net.solidfire.eng:rclt1v0007""", "Died on +.volume_access_group.initiators[0]"
    assert type(result.volume_access_group.attributes) is dict, "Died on .volume_access_group.attributes"
    assert result.volume_access_group.volume_access_group_id == 3, "Died on +.volume_access_group.volume_access_group_id"

def test_add_initiators_to_volume_access_group_v9.1_2():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_AddInitiatorsToVolumeAccessGroup_v9.1_2)

    
    volume_access_group_id = 42 # volume_access_group_id
    initiators = "" # initiators
    result = ef.add_initiators_to_volume_access_group(volume_access_group_id,initiators,)
    assert result.volume_access_group.name == """async-source-vag""", "Died on +.volume_access_group.name"
    assert result.volume_access_group.initiator_ids[0] == 3, "Died on +.volume_access_group.initiator_ids[0]"
    assert result.volume_access_group.volumes[149] == 500, "Died on +.volume_access_group.volumes[149]"
    assert result.volume_access_group.volumes[148] == 499, "Died on +.volume_access_group.volumes[148]"
    assert result.volume_access_group.volumes[147] == 498, "Died on +.volume_access_group.volumes[147]"
    assert result.volume_access_group.volumes[146] == 497, "Died on +.volume_access_group.volumes[146]"
    assert result.volume_access_group.volumes[145] == 496, "Died on +.volume_access_group.volumes[145]"
    assert result.volume_access_group.volumes[144] == 495, "Died on +.volume_access_group.volumes[144]"
    assert result.volume_access_group.volumes[143] == 494, "Died on +.volume_access_group.volumes[143]"
    assert result.volume_access_group.volumes[142] == 493, "Died on +.volume_access_group.volumes[142]"
    assert result.volume_access_group.volumes[141] == 492, "Died on +.volume_access_group.volumes[141]"
    assert result.volume_access_group.volumes[140] == 491, "Died on +.volume_access_group.volumes[140]"
    assert result.volume_access_group.volumes[139] == 490, "Died on +.volume_access_group.volumes[139]"
    assert result.volume_access_group.volumes[138] == 489, "Died on +.volume_access_group.volumes[138]"
    assert result.volume_access_group.volumes[137] == 488, "Died on +.volume_access_group.volumes[137]"
    assert result.volume_access_group.volumes[136] == 487, "Died on +.volume_access_group.volumes[136]"
    assert result.volume_access_group.volumes[135] == 486, "Died on +.volume_access_group.volumes[135]"
    assert result.volume_access_group.volumes[134] == 485, "Died on +.volume_access_group.volumes[134]"
    assert result.volume_access_group.volumes[133] == 484, "Died on +.volume_access_group.volumes[133]"
    assert result.volume_access_group.volumes[132] == 483, "Died on +.volume_access_group.volumes[132]"
    assert result.volume_access_group.volumes[131] == 482, "Died on +.volume_access_group.volumes[131]"
    assert result.volume_access_group.volumes[130] == 481, "Died on +.volume_access_group.volumes[130]"
    assert result.volume_access_group.volumes[129] == 480, "Died on +.volume_access_group.volumes[129]"
    assert result.volume_access_group.volumes[128] == 479, "Died on +.volume_access_group.volumes[128]"
    assert result.volume_access_group.volumes[127] == 478, "Died on +.volume_access_group.volumes[127]"
    assert result.volume_access_group.volumes[126] == 477, "Died on +.volume_access_group.volumes[126]"
    assert result.volume_access_group.volumes[125] == 476, "Died on +.volume_access_group.volumes[125]"
    assert result.volume_access_group.volumes[124] == 475, "Died on +.volume_access_group.volumes[124]"
    assert result.volume_access_group.volumes[123] == 474, "Died on +.volume_access_group.volumes[123]"
    assert result.volume_access_group.volumes[122] == 473, "Died on +.volume_access_group.volumes[122]"
    assert result.volume_access_group.volumes[121] == 472, "Died on +.volume_access_group.volumes[121]"
    assert result.volume_access_group.volumes[120] == 471, "Died on +.volume_access_group.volumes[120]"
    assert result.volume_access_group.volumes[119] == 470, "Died on +.volume_access_group.volumes[119]"
    assert result.volume_access_group.volumes[118] == 469, "Died on +.volume_access_group.volumes[118]"
    assert result.volume_access_group.volumes[117] == 468, "Died on +.volume_access_group.volumes[117]"
    assert result.volume_access_group.volumes[116] == 467, "Died on +.volume_access_group.volumes[116]"
    assert result.volume_access_group.volumes[115] == 466, "Died on +.volume_access_group.volumes[115]"
    assert result.volume_access_group.volumes[114] == 465, "Died on +.volume_access_group.volumes[114]"
    assert result.volume_access_group.volumes[113] == 464, "Died on +.volume_access_group.volumes[113]"
    assert result.volume_access_group.volumes[112] == 463, "Died on +.volume_access_group.volumes[112]"
    assert result.volume_access_group.volumes[111] == 462, "Died on +.volume_access_group.volumes[111]"
    assert result.volume_access_group.volumes[110] == 461, "Died on +.volume_access_group.volumes[110]"
    assert result.volume_access_group.volumes[109] == 460, "Died on +.volume_access_group.volumes[109]"
    assert result.volume_access_group.volumes[108] == 459, "Died on +.volume_access_group.volumes[108]"
    assert result.volume_access_group.volumes[107] == 458, "Died on +.volume_access_group.volumes[107]"
    assert result.volume_access_group.volumes[106] == 457, "Died on +.volume_access_group.volumes[106]"
    assert result.volume_access_group.volumes[105] == 456, "Died on +.volume_access_group.volumes[105]"
    assert result.volume_access_group.volumes[104] == 455, "Died on +.volume_access_group.volumes[104]"
    assert result.volume_access_group.volumes[103] == 454, "Died on +.volume_access_group.volumes[103]"
    assert result.volume_access_group.volumes[102] == 453, "Died on +.volume_access_group.volumes[102]"
    assert result.volume_access_group.volumes[101] == 452, "Died on +.volume_access_group.volumes[101]"
    assert result.volume_access_group.volumes[100] == 451, "Died on +.volume_access_group.volumes[100]"
    assert result.volume_access_group.volumes[99] == 450, "Died on +.volume_access_group.volumes[99]"
    assert result.volume_access_group.volumes[98] == 449, "Died on +.volume_access_group.volumes[98]"
    assert result.volume_access_group.volumes[97] == 448, "Died on +.volume_access_group.volumes[97]"
    assert result.volume_access_group.volumes[96] == 447, "Died on +.volume_access_group.volumes[96]"
    assert result.volume_access_group.volumes[95] == 446, "Died on +.volume_access_group.volumes[95]"
    assert result.volume_access_group.volumes[94] == 445, "Died on +.volume_access_group.volumes[94]"
    assert result.volume_access_group.volumes[93] == 444, "Died on +.volume_access_group.volumes[93]"
    assert result.volume_access_group.volumes[92] == 443, "Died on +.volume_access_group.volumes[92]"
    assert result.volume_access_group.volumes[91] == 442, "Died on +.volume_access_group.volumes[91]"
    assert result.volume_access_group.volumes[90] == 441, "Died on +.volume_access_group.volumes[90]"
    assert result.volume_access_group.volumes[89] == 440, "Died on +.volume_access_group.volumes[89]"
    assert result.volume_access_group.volumes[88] == 439, "Died on +.volume_access_group.volumes[88]"
    assert result.volume_access_group.volumes[87] == 438, "Died on +.volume_access_group.volumes[87]"
    assert result.volume_access_group.volumes[86] == 437, "Died on +.volume_access_group.volumes[86]"
    assert result.volume_access_group.volumes[85] == 436, "Died on +.volume_access_group.volumes[85]"
    assert result.volume_access_group.volumes[84] == 435, "Died on +.volume_access_group.volumes[84]"
    assert result.volume_access_group.volumes[83] == 434, "Died on +.volume_access_group.volumes[83]"
    assert result.volume_access_group.volumes[82] == 433, "Died on +.volume_access_group.volumes[82]"
    assert result.volume_access_group.volumes[81] == 432, "Died on +.volume_access_group.volumes[81]"
    assert result.volume_access_group.volumes[80] == 431, "Died on +.volume_access_group.volumes[80]"
    assert result.volume_access_group.volumes[79] == 430, "Died on +.volume_access_group.volumes[79]"
    assert result.volume_access_group.volumes[78] == 429, "Died on +.volume_access_group.volumes[78]"
    assert result.volume_access_group.volumes[77] == 428, "Died on +.volume_access_group.volumes[77]"
    assert result.volume_access_group.volumes[76] == 427, "Died on +.volume_access_group.volumes[76]"
    assert result.volume_access_group.volumes[75] == 426, "Died on +.volume_access_group.volumes[75]"
    assert result.volume_access_group.volumes[74] == 425, "Died on +.volume_access_group.volumes[74]"
    assert result.volume_access_group.volumes[73] == 424, "Died on +.volume_access_group.volumes[73]"
    assert result.volume_access_group.volumes[72] == 423, "Died on +.volume_access_group.volumes[72]"
    assert result.volume_access_group.volumes[71] == 422, "Died on +.volume_access_group.volumes[71]"
    assert result.volume_access_group.volumes[70] == 421, "Died on +.volume_access_group.volumes[70]"
    assert result.volume_access_group.volumes[69] == 420, "Died on +.volume_access_group.volumes[69]"
    assert result.volume_access_group.volumes[68] == 419, "Died on +.volume_access_group.volumes[68]"
    assert result.volume_access_group.volumes[67] == 418, "Died on +.volume_access_group.volumes[67]"
    assert result.volume_access_group.volumes[66] == 417, "Died on +.volume_access_group.volumes[66]"
    assert result.volume_access_group.volumes[65] == 416, "Died on +.volume_access_group.volumes[65]"
    assert result.volume_access_group.volumes[64] == 415, "Died on +.volume_access_group.volumes[64]"
    assert result.volume_access_group.volumes[63] == 414, "Died on +.volume_access_group.volumes[63]"
    assert result.volume_access_group.volumes[62] == 413, "Died on +.volume_access_group.volumes[62]"
    assert result.volume_access_group.volumes[61] == 412, "Died on +.volume_access_group.volumes[61]"
    assert result.volume_access_group.volumes[60] == 411, "Died on +.volume_access_group.volumes[60]"
    assert result.volume_access_group.volumes[59] == 410, "Died on +.volume_access_group.volumes[59]"
    assert result.volume_access_group.volumes[58] == 409, "Died on +.volume_access_group.volumes[58]"
    assert result.volume_access_group.volumes[57] == 408, "Died on +.volume_access_group.volumes[57]"
    assert result.volume_access_group.volumes[56] == 407, "Died on +.volume_access_group.volumes[56]"
    assert result.volume_access_group.volumes[55] == 406, "Died on +.volume_access_group.volumes[55]"
    assert result.volume_access_group.volumes[54] == 405, "Died on +.volume_access_group.volumes[54]"
    assert result.volume_access_group.volumes[53] == 404, "Died on +.volume_access_group.volumes[53]"
    assert result.volume_access_group.volumes[52] == 403, "Died on +.volume_access_group.volumes[52]"
    assert result.volume_access_group.volumes[51] == 402, "Died on +.volume_access_group.volumes[51]"
    assert result.volume_access_group.volumes[50] == 401, "Died on +.volume_access_group.volumes[50]"
    assert result.volume_access_group.volumes[49] == 400, "Died on +.volume_access_group.volumes[49]"
    assert result.volume_access_group.volumes[48] == 399, "Died on +.volume_access_group.volumes[48]"
    assert result.volume_access_group.volumes[47] == 398, "Died on +.volume_access_group.volumes[47]"
    assert result.volume_access_group.volumes[46] == 397, "Died on +.volume_access_group.volumes[46]"
    assert result.volume_access_group.volumes[45] == 396, "Died on +.volume_access_group.volumes[45]"
    assert result.volume_access_group.volumes[44] == 395, "Died on +.volume_access_group.volumes[44]"
    assert result.volume_access_group.volumes[43] == 394, "Died on +.volume_access_group.volumes[43]"
    assert result.volume_access_group.volumes[42] == 393, "Died on +.volume_access_group.volumes[42]"
    assert result.volume_access_group.volumes[41] == 392, "Died on +.volume_access_group.volumes[41]"
    assert result.volume_access_group.volumes[40] == 391, "Died on +.volume_access_group.volumes[40]"
    assert result.volume_access_group.volumes[39] == 390, "Died on +.volume_access_group.volumes[39]"
    assert result.volume_access_group.volumes[38] == 389, "Died on +.volume_access_group.volumes[38]"
    assert result.volume_access_group.volumes[37] == 388, "Died on +.volume_access_group.volumes[37]"
    assert result.volume_access_group.volumes[36] == 387, "Died on +.volume_access_group.volumes[36]"
    assert result.volume_access_group.volumes[35] == 386, "Died on +.volume_access_group.volumes[35]"
    assert result.volume_access_group.volumes[34] == 385, "Died on +.volume_access_group.volumes[34]"
    assert result.volume_access_group.volumes[33] == 384, "Died on +.volume_access_group.volumes[33]"
    assert result.volume_access_group.volumes[32] == 383, "Died on +.volume_access_group.volumes[32]"
    assert result.volume_access_group.volumes[31] == 382, "Died on +.volume_access_group.volumes[31]"
    assert result.volume_access_group.volumes[30] == 381, "Died on +.volume_access_group.volumes[30]"
    assert result.volume_access_group.volumes[29] == 380, "Died on +.volume_access_group.volumes[29]"
    assert result.volume_access_group.volumes[28] == 379, "Died on +.volume_access_group.volumes[28]"
    assert result.volume_access_group.volumes[27] == 378, "Died on +.volume_access_group.volumes[27]"
    assert result.volume_access_group.volumes[26] == 377, "Died on +.volume_access_group.volumes[26]"
    assert result.volume_access_group.volumes[25] == 376, "Died on +.volume_access_group.volumes[25]"
    assert result.volume_access_group.volumes[24] == 375, "Died on +.volume_access_group.volumes[24]"
    assert result.volume_access_group.volumes[23] == 374, "Died on +.volume_access_group.volumes[23]"
    assert result.volume_access_group.volumes[22] == 373, "Died on +.volume_access_group.volumes[22]"
    assert result.volume_access_group.volumes[21] == 372, "Died on +.volume_access_group.volumes[21]"
    assert result.volume_access_group.volumes[20] == 371, "Died on +.volume_access_group.volumes[20]"
    assert result.volume_access_group.volumes[19] == 370, "Died on +.volume_access_group.volumes[19]"
    assert result.volume_access_group.volumes[18] == 369, "Died on +.volume_access_group.volumes[18]"
    assert result.volume_access_group.volumes[17] == 368, "Died on +.volume_access_group.volumes[17]"
    assert result.volume_access_group.volumes[16] == 367, "Died on +.volume_access_group.volumes[16]"
    assert result.volume_access_group.volumes[15] == 366, "Died on +.volume_access_group.volumes[15]"
    assert result.volume_access_group.volumes[14] == 365, "Died on +.volume_access_group.volumes[14]"
    assert result.volume_access_group.volumes[13] == 364, "Died on +.volume_access_group.volumes[13]"
    assert result.volume_access_group.volumes[12] == 363, "Died on +.volume_access_group.volumes[12]"
    assert result.volume_access_group.volumes[11] == 362, "Died on +.volume_access_group.volumes[11]"
    assert result.volume_access_group.volumes[10] == 361, "Died on +.volume_access_group.volumes[10]"
    assert result.volume_access_group.volumes[9] == 360, "Died on +.volume_access_group.volumes[9]"
    assert result.volume_access_group.volumes[8] == 359, "Died on +.volume_access_group.volumes[8]"
    assert result.volume_access_group.volumes[7] == 358, "Died on +.volume_access_group.volumes[7]"
    assert result.volume_access_group.volumes[6] == 357, "Died on +.volume_access_group.volumes[6]"
    assert result.volume_access_group.volumes[5] == 356, "Died on +.volume_access_group.volumes[5]"
    assert result.volume_access_group.volumes[4] == 355, "Died on +.volume_access_group.volumes[4]"
    assert result.volume_access_group.volumes[3] == 354, "Died on +.volume_access_group.volumes[3]"
    assert result.volume_access_group.volumes[2] == 353, "Died on +.volume_access_group.volumes[2]"
    assert result.volume_access_group.volumes[1] == 352, "Died on +.volume_access_group.volumes[1]"
    assert result.volume_access_group.volumes[0] == 351, "Died on +.volume_access_group.volumes[0]"
    assert result.volume_access_group.initiators[0] == """iqn.2010-01.net.solidfire.eng:rclt1v0006""", "Died on +.volume_access_group.initiators[0]"
    assert type(result.volume_access_group.attributes) is dict, "Died on .volume_access_group.attributes"
    assert result.volume_access_group.volume_access_group_id == 3, "Died on +.volume_access_group.volume_access_group_id"

def test_clear_cluster_faults_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ClearClusterFaults_v9.1_0)

    
    fault_type = "" # fault_type
    result = ef.clear_cluster_faults()

def test_clone_volume_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_CloneVolume_v9.1_0)

    
    volume_id = 42 # volume_id
    name = "" # name
    new_account_id = 42 # new_account_id
    new_size = 42 # new_size
    access = "" # access
    snapshot_id = 42 # snapshot_id
    attributes = dict() # attributes
    result = ef.clone_volume(volume_id,name,)
    assert result.async_handle == 365, "Died on +.async_handle"
    assert result.volume_id == 187, "Died on +.volume_id"
    assert result.clone_id == 161, "Died on +.clone_id"

def test_complete_cluster_pairing_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_CompleteClusterPairing_v9.1_0)

    
    cluster_pairing_key = "" # cluster_pairing_key
    result = ef.complete_cluster_pairing(cluster_pairing_key,)
    assert result.cluster_pair_id == 1, "Died on +.cluster_pair_id"

def test_complete_volume_pairing_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_CompleteVolumePairing_v9.1_0)

    
    volume_pairing_key = "" # volume_pairing_key
    volume_id = 42 # volume_id
    result = ef.complete_volume_pairing(volume_pairing_key,volume_id,)

def test_create_cluster_v5.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_CreateCluster_v5.0_0)

    
    accept_eula = True # accept_eula
    mvip = "" # mvip
    svip = "" # svip
    rep_count = 42 # rep_count
    username = "" # username
    password = "" # password
    nodes = "" # nodes
    attributes = dict() # attributes
    result = ef.create_cluster(mvip,svip,rep_count,username,password,nodes,)

def test_create_snapshot_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_CreateSnapshot_v9.1_0)

    
    volume_id = 42 # volume_id
    snapshot_id = 42 # snapshot_id
    name = "" # name
    enable_remote_replication = True # enable_remote_replication
    retention = "" # retention
    attributes = dict() # attributes
    result = ef.create_snapshot(volume_id,)

def test_create_snapshot_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_CreateSnapshot_v9.1_1)

    
    volume_id = 42 # volume_id
    snapshot_id = 42 # snapshot_id
    name = "" # name
    enable_remote_replication = True # enable_remote_replication
    retention = "" # retention
    attributes = dict() # attributes
    result = ef.create_snapshot(volume_id,)

def test_create_support_bundle_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_CreateSupportBundle_v8.6_0)

    
    bundle_name = "" # bundle_name
    extra_args = "" # extra_args
    timeout_sec = 42 # timeout_sec
    result = ef.create_support_bundle()
    assert result.duration == """00:00:33.276871""", "Died on +.duration"
    assert result.result == """Passed""", "Died on +.result"
    assert result.details.files[0] == """NLABP2017_oxygen-patch6-8.6.2.3_12292016_063153_node_bundle.NLABP2017.tar""", "Died on +.details.files[0]"
    assert result.details.bundle_name == """NLABP2017_oxygen-patch6-8.6.2.3_12292016_063153_node_bundle""", "Died on +.details.bundle_name"
    assert result.details.timeout_sec == 1500, "Died on +.details.timeout_sec"
    assert result.details.url[0] == """https://10.117.56.106:442/config/supportbundles/NLABP2017_oxygen-patch6-8.6.2.3_12292016_063153_node_bundle.NLABP2017.tar""", "Died on +.details.url[0]"
    assert result.details.extra_args == """ -b -i all  """, "Died on +.details.extra_args"
    assert result.details.output == """timeout -s KILL 1500s /sf/scripts/sf_make_support_bundle --quiet /tmp/solidfire-dtemp.8FvMvl/NLABP2017_oxygen-patch6-8.6.2.3_12292016_063153_node_bundle  -b -i all  <br><br>Moved '/tmp/solidfire-dtemp.8FvMvl/NLABP2017_oxygen-patch6-8.6.2.3_12292016_063153_node_bundle.NLABP2017.tar' to /tmp/supportbundles""", "Died on +.details.output"

def test_create_support_bundle_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_CreateSupportBundle_v8.7_0)

    
    bundle_name = "" # bundle_name
    extra_args = "" # extra_args
    timeout_sec = 42 # timeout_sec
    result = ef.create_support_bundle()
    assert result.duration == """00:00:32.792666""", "Died on +.duration"
    assert result.result == """Passed""", "Died on +.result"
    assert result.details.files[0] == """NLABP0920_oxygen-patch7-8.7.0.15_01122017_235207_node_bundle.NLABP0920.tar""", "Died on +.details.files[0]"
    assert result.details.bundle_name == """NLABP0920_oxygen-patch7-8.7.0.15_01122017_235207_node_bundle""", "Died on +.details.bundle_name"
    assert result.details.timeout_sec == 1500, "Died on +.details.timeout_sec"
    assert result.details.url[0] == """https://10.117.56.48:442/config/supportbundles/NLABP0920_oxygen-patch7-8.7.0.15_01122017_235207_node_bundle.NLABP0920.tar""", "Died on +.details.url[0]"
    assert result.details.extra_args == """ -b -i all  """, "Died on +.details.extra_args"
    assert result.details.output == """timeout -s KILL 1500s /sf/scripts/sf_make_support_bundle --quiet /tmp/solidfire-dtemp.exqv7V/NLABP0920_oxygen-patch7-8.7.0.15_01122017_235207_node_bundle  -b -i all  <br><br>Moved '/tmp/solidfire-dtemp.exqv7V/NLABP0920_oxygen-patch7-8.7.0.15_01122017_235207_node_bundle.NLABP0920.tar' to /tmp/supportbundles""", "Died on +.details.output"

def test_create_support_bundle_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_CreateSupportBundle_v9.0_0)

    
    bundle_name = "" # bundle_name
    extra_args = "" # extra_args
    timeout_sec = 42 # timeout_sec
    result = ef.create_support_bundle()
    assert result.duration == """00:00:15.914640""", "Died on +.duration"
    assert result.result == """Passed""", "Died on +.result"
    assert result.details.files[0] == """NLABP1802_fluorine-9.0.0.1554_01102017_042752_node_bundle.NLABP1802.tar.gz""", "Died on +.details.files[0]"
    assert result.details.bundle_name == """NLABP1802_fluorine-9.0.0.1554_01102017_042752_node_bundle""", "Died on +.details.bundle_name"
    assert result.details.timeout_sec == 1500, "Died on +.details.timeout_sec"
    assert result.details.url[0] == """https://10.117.56.24:442/config/supportbundles/NLABP1802_fluorine-9.0.0.1554_01102017_042752_node_bundle.NLABP1802.tar.gz""", "Died on +.details.url[0]"
    assert result.details.extra_args == """--compress gz -b -i all  """, "Died on +.details.extra_args"
    assert result.details.output == """timeout -s KILL 1500s /sf/scripts/sfsupportbundle --quiet --compress gz -b -i all   /tmp/solidfire-dtemp.JVaDlp/NLABP1802_fluorine-9.0.0.1554_01102017_042752_node_bundle<br><br>Moved '/tmp/solidfire-dtemp.JVaDlp/NLABP1802_fluorine-9.0.0.1554_01102017_042752_node_bundle.NLABP1802.tar.gz' to /tmp/supportbundles""", "Died on +.details.output"

def test_create_support_bundle_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_CreateSupportBundle_v9.1_0)

    
    bundle_name = "" # bundle_name
    extra_args = "" # extra_args
    timeout_sec = 42 # timeout_sec
    result = ef.create_support_bundle()
    assert result.duration == """00:00:24.647776""", "Died on +.duration"
    assert result.result == """Passed""", "Died on +.result"
    assert result.details.files[0] == """NLABP0912_fluorine-patch1-9.1.0.28_12312016_044424_node_bundle.NLABP0912.tar.gz""", "Died on +.details.files[0]"
    assert result.details.bundle_name == """NLABP0912_fluorine-patch1-9.1.0.28_12312016_044424_node_bundle""", "Died on +.details.bundle_name"
    assert result.details.timeout_sec == 1500, "Died on +.details.timeout_sec"
    assert result.details.url[0] == """https://10.117.56.23:442/config/supportbundles/NLABP0912_fluorine-patch1-9.1.0.28_12312016_044424_node_bundle.NLABP0912.tar.gz""", "Died on +.details.url[0]"
    assert result.details.extra_args == """--compress gz -b -i all  """, "Died on +.details.extra_args"
    assert result.details.output == """timeout -s KILL 1500s /sf/scripts/sfsupportbundle --quiet --compress gz -b -i all   /tmp/solidfire-dtemp.v7LG52/NLABP0912_fluorine-patch1-9.1.0.28_12312016_044424_node_bundle<br><br>Moved '/tmp/solidfire-dtemp.v7LG52/NLABP0912_fluorine-patch1-9.1.0.28_12312016_044424_node_bundle.NLABP0912.tar.gz' to /tmp/supportbundles""", "Died on +.details.output"

def test_create_volume_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_CreateVolume_v8.4_0)

    
    name = "" # name
    account_id = 42 # account_id
    total_size = 42 # total_size
    enable512e = True # enable512e
    qos = dict() # qos
    attributes = dict() # attributes
    slice_count = 42 # slice_count
    result = ef.create_volume(name,account_id,total_size,enable512e,)
    assert result.volume_id == 551, "Died on +.volume_id"

def test_create_volume_access_group_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_CreateVolumeAccessGroup_v9.1_0)

    
    name = "" # name
    initiators = "" # initiators
    volumes = 42 # volumes
    virtual_network_id = 42 # virtual_network_id
    virtual_network_tags = 42 # virtual_network_tags
    attributes = dict() # attributes
    result = ef.create_volume_access_group(name,)
    assert result.volume_access_group.name == """temporary-clone-vag""", "Died on +.volume_access_group.name"
    assert result.volume_access_group.initiator_ids[0] == 11, "Died on +.volume_access_group.initiator_ids[0]"
    assert result.volume_access_group.volumes[7] == 24, "Died on +.volume_access_group.volumes[7]"
    assert result.volume_access_group.volumes[6] == 23, "Died on +.volume_access_group.volumes[6]"
    assert result.volume_access_group.volumes[5] == 22, "Died on +.volume_access_group.volumes[5]"
    assert result.volume_access_group.volumes[4] == 21, "Died on +.volume_access_group.volumes[4]"
    assert result.volume_access_group.volumes[3] == 20, "Died on +.volume_access_group.volumes[3]"
    assert result.volume_access_group.volumes[2] == 19, "Died on +.volume_access_group.volumes[2]"
    assert result.volume_access_group.volumes[1] == 18, "Died on +.volume_access_group.volumes[1]"
    assert result.volume_access_group.volumes[0] == 17, "Died on +.volume_access_group.volumes[0]"
    assert result.volume_access_group.initiators[0] == """iqn.2010-01.net.solidfire.eng:rclt1v0003""", "Died on +.volume_access_group.initiators[0]"
    assert type(result.volume_access_group.attributes) is dict, "Died on .volume_access_group.attributes"
    assert result.volume_access_group.volume_access_group_id == 11, "Died on +.volume_access_group.volume_access_group_id"
    assert result.volume_access_group_id == 11, "Died on +.volume_access_group_id"

def test_delete_all_support_bundles_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_DeleteAllSupportBundles_v8.6_0)

    
    result = ef.delete_all_support_bundles()
    assert result.duration == """00:00:00.000654""", "Died on +.duration"
    assert result.result == """Passed""", "Died on +.result"
    assert type(result.details) is dict, "Died on .details"

def test_delete_all_support_bundles_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_DeleteAllSupportBundles_v8.7_0)

    
    result = ef.delete_all_support_bundles()
    assert result.duration == """00:00:00.003845""", "Died on +.duration"
    assert result.result == """Passed""", "Died on +.result"
    assert type(result.details) is dict, "Died on .details"

def test_delete_all_support_bundles_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_DeleteAllSupportBundles_v9.0_0)

    
    result = ef.delete_all_support_bundles()
    assert result.duration == """00:00:00.000665""", "Died on +.duration"
    assert result.result == """Passed""", "Died on +.result"
    assert type(result.details) is dict, "Died on .details"

def test_delete_all_support_bundles_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_DeleteAllSupportBundles_v9.1_0)

    
    result = ef.delete_all_support_bundles()
    assert result.duration == """00:00:00.004695""", "Died on +.duration"
    assert result.result == """Passed""", "Died on +.result"
    assert type(result.details) is dict, "Died on .details"

def test_delete_snapshot_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_DeleteSnapshot_v9.1_0)

    
    snapshot_id = 42 # snapshot_id
    result = ef.delete_snapshot(snapshot_id,)

def test_delete_volume_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_DeleteVolume_v8.4_0)

    
    volume_id = 42 # volume_id
    result = ef.delete_volume(volume_id,)

def test_delete_volume_access_group_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_DeleteVolumeAccessGroup_v9.1_0)

    
    volume_access_group_id = 42 # volume_access_group_id
    result = ef.delete_volume_access_group(volume_access_group_id,)

def test_delete_volumes_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_DeleteVolumes_v9.1_0)

    
    account_ids = 42 # account_ids
    volume_access_group_ids = 42 # volume_access_group_ids
    volume_ids = 42 # volume_ids
    result = ef.delete_volumes()
    assert result.volumes[9].status == """deleted""", "Died on +.volumes[9].status"
    assert result.volumes[9].enable512e == False, "Died on +.volumes[9].enable512e"
    assert result.volumes[9].qos.burst_iops == 15000, "Died on +.volumes[9].qos.burst_iops"
    assert result.volumes[9].qos.burst_time == 60, "Died on +.volumes[9].qos.burst_time"
    assert result.volumes[9].qos.min_iops == 100, "Died on +.volumes[9].qos.min_iops"
    assert result.volumes[9].qos.max_iops == 1500, "Died on +.volumes[9].qos.max_iops"
    assert result.volumes[9].name == """bystander-10""", "Died on +.volumes[9].name"
    assert result.volumes[9].scsi_naadevice_id == """6f47acc1000000006d63696b0000000a""", "Died on +.volumes[9].scsi_naadevice_id"
    assert result.volumes[9].total_size == 176000335872, "Died on +.volumes[9].total_size"
    assert result.volumes[9].block_size == 4096, "Died on +.volumes[9].block_size"
    assert result.volumes[9].purge_time == """2017-01-04T17:05:31Z""", "Died on +.volumes[9].purge_time"
    assert result.volumes[9].scsi_euidevice_id == """6d63696b0000000af47acc0100000000""", "Died on +.volumes[9].scsi_euidevice_id"
    assert result.volumes[9].volume_id == 10, "Died on +.volumes[9].volume_id"
    assert result.volumes[9].access == """readWrite""", "Died on +.volumes[9].access"
    assert result.volumes[9].iqn == """iqn.2010-01.com.solidfire:mcik.bystander-10.10""", "Died on +.volumes[9].iqn"
    assert result.volumes[9].slice_count == 1, "Died on +.volumes[9].slice_count"
    assert type(result.volumes[9].attributes) is dict, "Died on .volumes[9].attributes"
    assert result.volumes[9].account_id == 1, "Died on +.volumes[9].account_id"
    assert result.volumes[9].delete_time == """2017-01-04T09:05:31Z""", "Died on +.volumes[9].delete_time"
    assert result.volumes[9].create_time == """2017-01-03T22:55:37Z""", "Died on +.volumes[9].create_time"
    assert result.volumes[9].virtual_volume_id is None, "Died on .volumes[9].virtual_volume_id"
    assert result.volumes[8].status == """deleted""", "Died on +.volumes[8].status"
    assert result.volumes[8].enable512e == False, "Died on +.volumes[8].enable512e"
    assert result.volumes[8].qos.burst_iops == 15000, "Died on +.volumes[8].qos.burst_iops"
    assert result.volumes[8].qos.burst_time == 60, "Died on +.volumes[8].qos.burst_time"
    assert result.volumes[8].qos.min_iops == 100, "Died on +.volumes[8].qos.min_iops"
    assert result.volumes[8].qos.max_iops == 1500, "Died on +.volumes[8].qos.max_iops"
    assert result.volumes[8].name == """bystander-9""", "Died on +.volumes[8].name"
    assert result.volumes[8].scsi_naadevice_id == """6f47acc1000000006d63696b00000009""", "Died on +.volumes[8].scsi_naadevice_id"
    assert result.volumes[8].total_size == 176000335872, "Died on +.volumes[8].total_size"
    assert result.volumes[8].block_size == 4096, "Died on +.volumes[8].block_size"
    assert result.volumes[8].purge_time == """2017-01-04T17:05:31Z""", "Died on +.volumes[8].purge_time"
    assert result.volumes[8].scsi_euidevice_id == """6d63696b00000009f47acc0100000000""", "Died on +.volumes[8].scsi_euidevice_id"
    assert result.volumes[8].volume_id == 9, "Died on +.volumes[8].volume_id"
    assert result.volumes[8].access == """readWrite""", "Died on +.volumes[8].access"
    assert result.volumes[8].iqn == """iqn.2010-01.com.solidfire:mcik.bystander-9.9""", "Died on +.volumes[8].iqn"
    assert result.volumes[8].slice_count == 1, "Died on +.volumes[8].slice_count"
    assert type(result.volumes[8].attributes) is dict, "Died on .volumes[8].attributes"
    assert result.volumes[8].account_id == 1, "Died on +.volumes[8].account_id"
    assert result.volumes[8].delete_time == """2017-01-04T09:05:31Z""", "Died on +.volumes[8].delete_time"
    assert result.volumes[8].create_time == """2017-01-03T22:55:37Z""", "Died on +.volumes[8].create_time"
    assert result.volumes[8].virtual_volume_id is None, "Died on .volumes[8].virtual_volume_id"
    assert result.volumes[7].status == """deleted""", "Died on +.volumes[7].status"
    assert result.volumes[7].enable512e == False, "Died on +.volumes[7].enable512e"
    assert result.volumes[7].qos.burst_iops == 15000, "Died on +.volumes[7].qos.burst_iops"
    assert result.volumes[7].qos.burst_time == 60, "Died on +.volumes[7].qos.burst_time"
    assert result.volumes[7].qos.min_iops == 100, "Died on +.volumes[7].qos.min_iops"
    assert result.volumes[7].qos.max_iops == 1500, "Died on +.volumes[7].qos.max_iops"
    assert result.volumes[7].name == """bystander-8""", "Died on +.volumes[7].name"
    assert result.volumes[7].scsi_naadevice_id == """6f47acc1000000006d63696b00000008""", "Died on +.volumes[7].scsi_naadevice_id"
    assert result.volumes[7].total_size == 176000335872, "Died on +.volumes[7].total_size"
    assert result.volumes[7].block_size == 4096, "Died on +.volumes[7].block_size"
    assert result.volumes[7].purge_time == """2017-01-04T17:05:31Z""", "Died on +.volumes[7].purge_time"
    assert result.volumes[7].scsi_euidevice_id == """6d63696b00000008f47acc0100000000""", "Died on +.volumes[7].scsi_euidevice_id"
    assert result.volumes[7].volume_id == 8, "Died on +.volumes[7].volume_id"
    assert result.volumes[7].access == """readWrite""", "Died on +.volumes[7].access"
    assert result.volumes[7].iqn == """iqn.2010-01.com.solidfire:mcik.bystander-8.8""", "Died on +.volumes[7].iqn"
    assert result.volumes[7].slice_count == 1, "Died on +.volumes[7].slice_count"
    assert type(result.volumes[7].attributes) is dict, "Died on .volumes[7].attributes"
    assert result.volumes[7].account_id == 1, "Died on +.volumes[7].account_id"
    assert result.volumes[7].delete_time == """2017-01-04T09:05:31Z""", "Died on +.volumes[7].delete_time"
    assert result.volumes[7].create_time == """2017-01-03T22:55:36Z""", "Died on +.volumes[7].create_time"
    assert result.volumes[7].virtual_volume_id is None, "Died on .volumes[7].virtual_volume_id"
    assert result.volumes[6].status == """deleted""", "Died on +.volumes[6].status"
    assert result.volumes[6].enable512e == False, "Died on +.volumes[6].enable512e"
    assert result.volumes[6].qos.burst_iops == 15000, "Died on +.volumes[6].qos.burst_iops"
    assert result.volumes[6].qos.burst_time == 60, "Died on +.volumes[6].qos.burst_time"
    assert result.volumes[6].qos.min_iops == 100, "Died on +.volumes[6].qos.min_iops"
    assert result.volumes[6].qos.max_iops == 1500, "Died on +.volumes[6].qos.max_iops"
    assert result.volumes[6].name == """bystander-7""", "Died on +.volumes[6].name"
    assert result.volumes[6].scsi_naadevice_id == """6f47acc1000000006d63696b00000007""", "Died on +.volumes[6].scsi_naadevice_id"
    assert result.volumes[6].total_size == 176000335872, "Died on +.volumes[6].total_size"
    assert result.volumes[6].block_size == 4096, "Died on +.volumes[6].block_size"
    assert result.volumes[6].purge_time == """2017-01-04T17:05:31Z""", "Died on +.volumes[6].purge_time"
    assert result.volumes[6].scsi_euidevice_id == """6d63696b00000007f47acc0100000000""", "Died on +.volumes[6].scsi_euidevice_id"
    assert result.volumes[6].volume_id == 7, "Died on +.volumes[6].volume_id"
    assert result.volumes[6].access == """readWrite""", "Died on +.volumes[6].access"
    assert result.volumes[6].iqn == """iqn.2010-01.com.solidfire:mcik.bystander-7.7""", "Died on +.volumes[6].iqn"
    assert result.volumes[6].slice_count == 1, "Died on +.volumes[6].slice_count"
    assert type(result.volumes[6].attributes) is dict, "Died on .volumes[6].attributes"
    assert result.volumes[6].account_id == 1, "Died on +.volumes[6].account_id"
    assert result.volumes[6].delete_time == """2017-01-04T09:05:31Z""", "Died on +.volumes[6].delete_time"
    assert result.volumes[6].create_time == """2017-01-03T22:55:36Z""", "Died on +.volumes[6].create_time"
    assert result.volumes[6].virtual_volume_id is None, "Died on .volumes[6].virtual_volume_id"
    assert result.volumes[5].status == """deleted""", "Died on +.volumes[5].status"
    assert result.volumes[5].enable512e == False, "Died on +.volumes[5].enable512e"
    assert result.volumes[5].qos.burst_iops == 15000, "Died on +.volumes[5].qos.burst_iops"
    assert result.volumes[5].qos.burst_time == 60, "Died on +.volumes[5].qos.burst_time"
    assert result.volumes[5].qos.min_iops == 100, "Died on +.volumes[5].qos.min_iops"
    assert result.volumes[5].qos.max_iops == 1500, "Died on +.volumes[5].qos.max_iops"
    assert result.volumes[5].name == """bystander-6""", "Died on +.volumes[5].name"
    assert result.volumes[5].scsi_naadevice_id == """6f47acc1000000006d63696b00000006""", "Died on +.volumes[5].scsi_naadevice_id"
    assert result.volumes[5].total_size == 176000335872, "Died on +.volumes[5].total_size"
    assert result.volumes[5].block_size == 4096, "Died on +.volumes[5].block_size"
    assert result.volumes[5].purge_time == """2017-01-04T17:05:31Z""", "Died on +.volumes[5].purge_time"
    assert result.volumes[5].scsi_euidevice_id == """6d63696b00000006f47acc0100000000""", "Died on +.volumes[5].scsi_euidevice_id"
    assert result.volumes[5].volume_id == 6, "Died on +.volumes[5].volume_id"
    assert result.volumes[5].access == """readWrite""", "Died on +.volumes[5].access"
    assert result.volumes[5].iqn == """iqn.2010-01.com.solidfire:mcik.bystander-6.6""", "Died on +.volumes[5].iqn"
    assert result.volumes[5].slice_count == 1, "Died on +.volumes[5].slice_count"
    assert type(result.volumes[5].attributes) is dict, "Died on .volumes[5].attributes"
    assert result.volumes[5].account_id == 1, "Died on +.volumes[5].account_id"
    assert result.volumes[5].delete_time == """2017-01-04T09:05:31Z""", "Died on +.volumes[5].delete_time"
    assert result.volumes[5].create_time == """2017-01-03T22:55:36Z""", "Died on +.volumes[5].create_time"
    assert result.volumes[5].virtual_volume_id is None, "Died on .volumes[5].virtual_volume_id"
    assert result.volumes[4].status == """deleted""", "Died on +.volumes[4].status"
    assert result.volumes[4].enable512e == False, "Died on +.volumes[4].enable512e"
    assert result.volumes[4].qos.burst_iops == 15000, "Died on +.volumes[4].qos.burst_iops"
    assert result.volumes[4].qos.burst_time == 60, "Died on +.volumes[4].qos.burst_time"
    assert result.volumes[4].qos.min_iops == 100, "Died on +.volumes[4].qos.min_iops"
    assert result.volumes[4].qos.max_iops == 1500, "Died on +.volumes[4].qos.max_iops"
    assert result.volumes[4].name == """bystander-5""", "Died on +.volumes[4].name"
    assert result.volumes[4].scsi_naadevice_id == """6f47acc1000000006d63696b00000005""", "Died on +.volumes[4].scsi_naadevice_id"
    assert result.volumes[4].total_size == 176000335872, "Died on +.volumes[4].total_size"
    assert result.volumes[4].block_size == 4096, "Died on +.volumes[4].block_size"
    assert result.volumes[4].purge_time == """2017-01-04T17:05:31Z""", "Died on +.volumes[4].purge_time"
    assert result.volumes[4].scsi_euidevice_id == """6d63696b00000005f47acc0100000000""", "Died on +.volumes[4].scsi_euidevice_id"
    assert result.volumes[4].volume_id == 5, "Died on +.volumes[4].volume_id"
    assert result.volumes[4].access == """readWrite""", "Died on +.volumes[4].access"
    assert result.volumes[4].iqn == """iqn.2010-01.com.solidfire:mcik.bystander-5.5""", "Died on +.volumes[4].iqn"
    assert result.volumes[4].slice_count == 1, "Died on +.volumes[4].slice_count"
    assert type(result.volumes[4].attributes) is dict, "Died on .volumes[4].attributes"
    assert result.volumes[4].account_id == 1, "Died on +.volumes[4].account_id"
    assert result.volumes[4].delete_time == """2017-01-04T09:05:31Z""", "Died on +.volumes[4].delete_time"
    assert result.volumes[4].create_time == """2017-01-03T22:55:36Z""", "Died on +.volumes[4].create_time"
    assert result.volumes[4].virtual_volume_id is None, "Died on .volumes[4].virtual_volume_id"
    assert result.volumes[3].status == """deleted""", "Died on +.volumes[3].status"
    assert result.volumes[3].enable512e == False, "Died on +.volumes[3].enable512e"
    assert result.volumes[3].qos.burst_iops == 15000, "Died on +.volumes[3].qos.burst_iops"
    assert result.volumes[3].qos.burst_time == 60, "Died on +.volumes[3].qos.burst_time"
    assert result.volumes[3].qos.min_iops == 100, "Died on +.volumes[3].qos.min_iops"
    assert result.volumes[3].qos.max_iops == 1500, "Died on +.volumes[3].qos.max_iops"
    assert result.volumes[3].name == """bystander-4""", "Died on +.volumes[3].name"
    assert result.volumes[3].scsi_naadevice_id == """6f47acc1000000006d63696b00000004""", "Died on +.volumes[3].scsi_naadevice_id"
    assert result.volumes[3].total_size == 176000335872, "Died on +.volumes[3].total_size"
    assert result.volumes[3].block_size == 4096, "Died on +.volumes[3].block_size"
    assert result.volumes[3].purge_time == """2017-01-04T17:05:31Z""", "Died on +.volumes[3].purge_time"
    assert result.volumes[3].scsi_euidevice_id == """6d63696b00000004f47acc0100000000""", "Died on +.volumes[3].scsi_euidevice_id"
    assert result.volumes[3].volume_id == 4, "Died on +.volumes[3].volume_id"
    assert result.volumes[3].access == """readWrite""", "Died on +.volumes[3].access"
    assert result.volumes[3].iqn == """iqn.2010-01.com.solidfire:mcik.bystander-4.4""", "Died on +.volumes[3].iqn"
    assert result.volumes[3].slice_count == 1, "Died on +.volumes[3].slice_count"
    assert type(result.volumes[3].attributes) is dict, "Died on .volumes[3].attributes"
    assert result.volumes[3].account_id == 1, "Died on +.volumes[3].account_id"
    assert result.volumes[3].delete_time == """2017-01-04T09:05:31Z""", "Died on +.volumes[3].delete_time"
    assert result.volumes[3].create_time == """2017-01-03T22:55:36Z""", "Died on +.volumes[3].create_time"
    assert result.volumes[3].virtual_volume_id is None, "Died on .volumes[3].virtual_volume_id"
    assert result.volumes[2].status == """deleted""", "Died on +.volumes[2].status"
    assert result.volumes[2].enable512e == False, "Died on +.volumes[2].enable512e"
    assert result.volumes[2].qos.burst_iops == 15000, "Died on +.volumes[2].qos.burst_iops"
    assert result.volumes[2].qos.burst_time == 60, "Died on +.volumes[2].qos.burst_time"
    assert result.volumes[2].qos.min_iops == 100, "Died on +.volumes[2].qos.min_iops"
    assert result.volumes[2].qos.max_iops == 1500, "Died on +.volumes[2].qos.max_iops"
    assert result.volumes[2].name == """bystander-3""", "Died on +.volumes[2].name"
    assert result.volumes[2].scsi_naadevice_id == """6f47acc1000000006d63696b00000003""", "Died on +.volumes[2].scsi_naadevice_id"
    assert result.volumes[2].total_size == 176000335872, "Died on +.volumes[2].total_size"
    assert result.volumes[2].block_size == 4096, "Died on +.volumes[2].block_size"
    assert result.volumes[2].purge_time == """2017-01-04T17:05:31Z""", "Died on +.volumes[2].purge_time"
    assert result.volumes[2].scsi_euidevice_id == """6d63696b00000003f47acc0100000000""", "Died on +.volumes[2].scsi_euidevice_id"
    assert result.volumes[2].volume_id == 3, "Died on +.volumes[2].volume_id"
    assert result.volumes[2].access == """readWrite""", "Died on +.volumes[2].access"
    assert result.volumes[2].iqn == """iqn.2010-01.com.solidfire:mcik.bystander-3.3""", "Died on +.volumes[2].iqn"
    assert result.volumes[2].slice_count == 1, "Died on +.volumes[2].slice_count"
    assert type(result.volumes[2].attributes) is dict, "Died on .volumes[2].attributes"
    assert result.volumes[2].account_id == 1, "Died on +.volumes[2].account_id"
    assert result.volumes[2].delete_time == """2017-01-04T09:05:31Z""", "Died on +.volumes[2].delete_time"
    assert result.volumes[2].create_time == """2017-01-03T22:55:36Z""", "Died on +.volumes[2].create_time"
    assert result.volumes[2].virtual_volume_id is None, "Died on .volumes[2].virtual_volume_id"
    assert result.volumes[1].status == """deleted""", "Died on +.volumes[1].status"
    assert result.volumes[1].enable512e == False, "Died on +.volumes[1].enable512e"
    assert result.volumes[1].qos.burst_iops == 15000, "Died on +.volumes[1].qos.burst_iops"
    assert result.volumes[1].qos.burst_time == 60, "Died on +.volumes[1].qos.burst_time"
    assert result.volumes[1].qos.min_iops == 100, "Died on +.volumes[1].qos.min_iops"
    assert result.volumes[1].qos.max_iops == 1500, "Died on +.volumes[1].qos.max_iops"
    assert result.volumes[1].name == """bystander-2""", "Died on +.volumes[1].name"
    assert result.volumes[1].scsi_naadevice_id == """6f47acc1000000006d63696b00000002""", "Died on +.volumes[1].scsi_naadevice_id"
    assert result.volumes[1].total_size == 176000335872, "Died on +.volumes[1].total_size"
    assert result.volumes[1].block_size == 4096, "Died on +.volumes[1].block_size"
    assert result.volumes[1].purge_time == """2017-01-04T17:05:31Z""", "Died on +.volumes[1].purge_time"
    assert result.volumes[1].scsi_euidevice_id == """6d63696b00000002f47acc0100000000""", "Died on +.volumes[1].scsi_euidevice_id"
    assert result.volumes[1].volume_id == 2, "Died on +.volumes[1].volume_id"
    assert result.volumes[1].access == """readWrite""", "Died on +.volumes[1].access"
    assert result.volumes[1].iqn == """iqn.2010-01.com.solidfire:mcik.bystander-2.2""", "Died on +.volumes[1].iqn"
    assert result.volumes[1].slice_count == 1, "Died on +.volumes[1].slice_count"
    assert type(result.volumes[1].attributes) is dict, "Died on .volumes[1].attributes"
    assert result.volumes[1].account_id == 1, "Died on +.volumes[1].account_id"
    assert result.volumes[1].delete_time == """2017-01-04T09:05:31Z""", "Died on +.volumes[1].delete_time"
    assert result.volumes[1].create_time == """2017-01-03T22:55:36Z""", "Died on +.volumes[1].create_time"
    assert result.volumes[1].virtual_volume_id is None, "Died on .volumes[1].virtual_volume_id"
    assert result.volumes[0].status == """deleted""", "Died on +.volumes[0].status"
    assert result.volumes[0].enable512e == False, "Died on +.volumes[0].enable512e"
    assert result.volumes[0].qos.burst_iops == 15000, "Died on +.volumes[0].qos.burst_iops"
    assert result.volumes[0].qos.burst_time == 60, "Died on +.volumes[0].qos.burst_time"
    assert result.volumes[0].qos.min_iops == 100, "Died on +.volumes[0].qos.min_iops"
    assert result.volumes[0].qos.max_iops == 1500, "Died on +.volumes[0].qos.max_iops"
    assert result.volumes[0].name == """bystander-1""", "Died on +.volumes[0].name"
    assert result.volumes[0].scsi_naadevice_id == """6f47acc1000000006d63696b00000001""", "Died on +.volumes[0].scsi_naadevice_id"
    assert result.volumes[0].total_size == 176000335872, "Died on +.volumes[0].total_size"
    assert result.volumes[0].block_size == 4096, "Died on +.volumes[0].block_size"
    assert result.volumes[0].purge_time == """2017-01-04T17:05:31Z""", "Died on +.volumes[0].purge_time"
    assert result.volumes[0].scsi_euidevice_id == """6d63696b00000001f47acc0100000000""", "Died on +.volumes[0].scsi_euidevice_id"
    assert result.volumes[0].volume_id == 1, "Died on +.volumes[0].volume_id"
    assert result.volumes[0].access == """readWrite""", "Died on +.volumes[0].access"
    assert result.volumes[0].iqn == """iqn.2010-01.com.solidfire:mcik.bystander-1.1""", "Died on +.volumes[0].iqn"
    assert result.volumes[0].slice_count == 1, "Died on +.volumes[0].slice_count"
    assert type(result.volumes[0].attributes) is dict, "Died on .volumes[0].attributes"
    assert result.volumes[0].account_id == 1, "Died on +.volumes[0].account_id"
    assert result.volumes[0].delete_time == """2017-01-04T09:05:31Z""", "Died on +.volumes[0].delete_time"
    assert result.volumes[0].create_time == """2017-01-03T22:55:36Z""", "Died on +.volumes[0].create_time"
    assert result.volumes[0].virtual_volume_id is None, "Died on .volumes[0].virtual_volume_id"

def test_delete_volumes_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_DeleteVolumes_v9.1_1)

    
    account_ids = 42 # account_ids
    volume_access_group_ids = 42 # volume_access_group_ids
    volume_ids = 42 # volume_ids
    result = ef.delete_volumes()
    assert result.volumes[5].status == """deleted""", "Died on +.volumes[5].status"
    assert result.volumes[5].enable512e == True, "Died on +.volumes[5].enable512e"
    assert result.volumes[5].qos.burst_iops == 15000, "Died on +.volumes[5].qos.burst_iops"
    assert result.volumes[5].qos.burst_time == 60, "Died on +.volumes[5].qos.burst_time"
    assert result.volumes[5].qos.min_iops == 100, "Died on +.volumes[5].qos.min_iops"
    assert result.volumes[5].qos.max_iops == 15000, "Died on +.volumes[5].qos.max_iops"
    assert result.volumes[5].name == """CmDVSR2hfcOoRjaJ""", "Died on +.volumes[5].name"
    assert result.volumes[5].scsi_naadevice_id == """6f47acc1000000007966707600000012""", "Died on +.volumes[5].scsi_naadevice_id"
    assert result.volumes[5].total_size == 100000595968, "Died on +.volumes[5].total_size"
    assert result.volumes[5].block_size == 4096, "Died on +.volumes[5].block_size"
    assert result.volumes[5].purge_time == """2017-01-04T13:17:05Z""", "Died on +.volumes[5].purge_time"
    assert result.volumes[5].scsi_euidevice_id == """7966707600000012f47acc0100000000""", "Died on +.volumes[5].scsi_euidevice_id"
    assert result.volumes[5].volume_id == 18, "Died on +.volumes[5].volume_id"
    assert result.volumes[5].access == """readWrite""", "Died on +.volumes[5].access"
    assert result.volumes[5].iqn == """iqn.2010-01.com.solidfire:yfpv.cmdvsr2hfcoorjaj.18""", "Died on +.volumes[5].iqn"
    assert result.volumes[5].slice_count == 1, "Died on +.volumes[5].slice_count"
    assert type(result.volumes[5].attributes) is dict, "Died on .volumes[5].attributes"
    assert result.volumes[5].account_id == 15, "Died on +.volumes[5].account_id"
    assert result.volumes[5].delete_time == """2017-01-04T05:17:05Z""", "Died on +.volumes[5].delete_time"
    assert result.volumes[5].create_time == """2017-01-04T04:06:17Z""", "Died on +.volumes[5].create_time"
    assert result.volumes[5].virtual_volume_id is None, "Died on .volumes[5].virtual_volume_id"
    assert result.volumes[4].status == """deleted""", "Died on +.volumes[4].status"
    assert result.volumes[4].enable512e == True, "Died on +.volumes[4].enable512e"
    assert result.volumes[4].qos.burst_iops == 15000, "Died on +.volumes[4].qos.burst_iops"
    assert result.volumes[4].qos.burst_time == 60, "Died on +.volumes[4].qos.burst_time"
    assert result.volumes[4].qos.min_iops == 100, "Died on +.volumes[4].qos.min_iops"
    assert result.volumes[4].qos.max_iops == 15000, "Died on +.volumes[4].qos.max_iops"
    assert result.volumes[4].name == """1sHIRRbU9rlimpwN""", "Died on +.volumes[4].name"
    assert result.volumes[4].scsi_naadevice_id == """6f47acc1000000007966707600000011""", "Died on +.volumes[4].scsi_naadevice_id"
    assert result.volumes[4].total_size == 100000595968, "Died on +.volumes[4].total_size"
    assert result.volumes[4].block_size == 4096, "Died on +.volumes[4].block_size"
    assert result.volumes[4].purge_time == """2017-01-04T13:17:05Z""", "Died on +.volumes[4].purge_time"
    assert result.volumes[4].scsi_euidevice_id == """7966707600000011f47acc0100000000""", "Died on +.volumes[4].scsi_euidevice_id"
    assert result.volumes[4].volume_id == 17, "Died on +.volumes[4].volume_id"
    assert result.volumes[4].access == """readWrite""", "Died on +.volumes[4].access"
    assert result.volumes[4].iqn == """iqn.2010-01.com.solidfire:yfpv.1shirrbu9rlimpwn.17""", "Died on +.volumes[4].iqn"
    assert result.volumes[4].slice_count == 1, "Died on +.volumes[4].slice_count"
    assert type(result.volumes[4].attributes) is dict, "Died on .volumes[4].attributes"
    assert result.volumes[4].account_id == 14, "Died on +.volumes[4].account_id"
    assert result.volumes[4].delete_time == """2017-01-04T05:17:05Z""", "Died on +.volumes[4].delete_time"
    assert result.volumes[4].create_time == """2017-01-04T04:06:17Z""", "Died on +.volumes[4].create_time"
    assert result.volumes[4].virtual_volume_id is None, "Died on .volumes[4].virtual_volume_id"
    assert result.volumes[3].status == """deleted""", "Died on +.volumes[3].status"
    assert result.volumes[3].enable512e == False, "Died on +.volumes[3].enable512e"
    assert result.volumes[3].qos.burst_iops == 15000, "Died on +.volumes[3].qos.burst_iops"
    assert result.volumes[3].qos.burst_time == 60, "Died on +.volumes[3].qos.burst_time"
    assert result.volumes[3].qos.min_iops == 100, "Died on +.volumes[3].qos.min_iops"
    assert result.volumes[3].qos.max_iops == 15000, "Died on +.volumes[3].qos.max_iops"
    assert result.volumes[3].name == """jNHgBE6LpCcIq4kC""", "Died on +.volumes[3].name"
    assert result.volumes[3].scsi_naadevice_id == """6f47acc1000000007966707600000010""", "Died on +.volumes[3].scsi_naadevice_id"
    assert result.volumes[3].total_size == 100000595968, "Died on +.volumes[3].total_size"
    assert result.volumes[3].block_size == 4096, "Died on +.volumes[3].block_size"
    assert result.volumes[3].purge_time == """2017-01-04T13:17:05Z""", "Died on +.volumes[3].purge_time"
    assert result.volumes[3].scsi_euidevice_id == """7966707600000010f47acc0100000000""", "Died on +.volumes[3].scsi_euidevice_id"
    assert result.volumes[3].volume_id == 16, "Died on +.volumes[3].volume_id"
    assert result.volumes[3].access == """readWrite""", "Died on +.volumes[3].access"
    assert result.volumes[3].iqn == """iqn.2010-01.com.solidfire:yfpv.jnhgbe6lpcciq4kc.16""", "Died on +.volumes[3].iqn"
    assert result.volumes[3].slice_count == 1, "Died on +.volumes[3].slice_count"
    assert type(result.volumes[3].attributes) is dict, "Died on .volumes[3].attributes"
    assert result.volumes[3].account_id == 13, "Died on +.volumes[3].account_id"
    assert result.volumes[3].delete_time == """2017-01-04T05:17:05Z""", "Died on +.volumes[3].delete_time"
    assert result.volumes[3].create_time == """2017-01-04T04:06:16Z""", "Died on +.volumes[3].create_time"
    assert result.volumes[3].virtual_volume_id is None, "Died on .volumes[3].virtual_volume_id"
    assert result.volumes[2].status == """deleted""", "Died on +.volumes[2].status"
    assert result.volumes[2].enable512e == False, "Died on +.volumes[2].enable512e"
    assert result.volumes[2].qos.burst_iops == 15000, "Died on +.volumes[2].qos.burst_iops"
    assert result.volumes[2].qos.burst_time == 60, "Died on +.volumes[2].qos.burst_time"
    assert result.volumes[2].qos.min_iops == 100, "Died on +.volumes[2].qos.min_iops"
    assert result.volumes[2].qos.max_iops == 15000, "Died on +.volumes[2].qos.max_iops"
    assert result.volumes[2].name == """Yvxk5fvls75jgWeN""", "Died on +.volumes[2].name"
    assert result.volumes[2].scsi_naadevice_id == """6f47acc100000000796670760000000f""", "Died on +.volumes[2].scsi_naadevice_id"
    assert result.volumes[2].total_size == 100000595968, "Died on +.volumes[2].total_size"
    assert result.volumes[2].block_size == 4096, "Died on +.volumes[2].block_size"
    assert result.volumes[2].purge_time == """2017-01-04T13:17:05Z""", "Died on +.volumes[2].purge_time"
    assert result.volumes[2].scsi_euidevice_id == """796670760000000ff47acc0100000000""", "Died on +.volumes[2].scsi_euidevice_id"
    assert result.volumes[2].volume_id == 15, "Died on +.volumes[2].volume_id"
    assert result.volumes[2].access == """readWrite""", "Died on +.volumes[2].access"
    assert result.volumes[2].iqn == """iqn.2010-01.com.solidfire:yfpv.yvxk5fvls75jgwen.15""", "Died on +.volumes[2].iqn"
    assert result.volumes[2].slice_count == 1, "Died on +.volumes[2].slice_count"
    assert type(result.volumes[2].attributes) is dict, "Died on .volumes[2].attributes"
    assert result.volumes[2].account_id == 12, "Died on +.volumes[2].account_id"
    assert result.volumes[2].delete_time == """2017-01-04T05:17:05Z""", "Died on +.volumes[2].delete_time"
    assert result.volumes[2].create_time == """2017-01-04T04:06:16Z""", "Died on +.volumes[2].create_time"
    assert result.volumes[2].virtual_volume_id is None, "Died on .volumes[2].virtual_volume_id"
    assert result.volumes[1].status == """deleted""", "Died on +.volumes[1].status"
    assert result.volumes[1].enable512e == False, "Died on +.volumes[1].enable512e"
    assert result.volumes[1].qos.burst_iops == 15000, "Died on +.volumes[1].qos.burst_iops"
    assert result.volumes[1].qos.burst_time == 60, "Died on +.volumes[1].qos.burst_time"
    assert result.volumes[1].qos.min_iops == 100, "Died on +.volumes[1].qos.min_iops"
    assert result.volumes[1].qos.max_iops == 15000, "Died on +.volumes[1].qos.max_iops"
    assert result.volumes[1].name == """rvJ7IlZdMxzMQkmb""", "Died on +.volumes[1].name"
    assert result.volumes[1].scsi_naadevice_id == """6f47acc100000000796670760000000e""", "Died on +.volumes[1].scsi_naadevice_id"
    assert result.volumes[1].total_size == 100000595968, "Died on +.volumes[1].total_size"
    assert result.volumes[1].block_size == 4096, "Died on +.volumes[1].block_size"
    assert result.volumes[1].purge_time == """2017-01-04T13:17:05Z""", "Died on +.volumes[1].purge_time"
    assert result.volumes[1].scsi_euidevice_id == """796670760000000ef47acc0100000000""", "Died on +.volumes[1].scsi_euidevice_id"
    assert result.volumes[1].volume_id == 14, "Died on +.volumes[1].volume_id"
    assert result.volumes[1].access == """readWrite""", "Died on +.volumes[1].access"
    assert result.volumes[1].iqn == """iqn.2010-01.com.solidfire:yfpv.rvj7ilzdmxzmqkmb.14""", "Died on +.volumes[1].iqn"
    assert result.volumes[1].slice_count == 1, "Died on +.volumes[1].slice_count"
    assert type(result.volumes[1].attributes) is dict, "Died on .volumes[1].attributes"
    assert result.volumes[1].account_id == 11, "Died on +.volumes[1].account_id"
    assert result.volumes[1].delete_time == """2017-01-04T05:17:05Z""", "Died on +.volumes[1].delete_time"
    assert result.volumes[1].create_time == """2017-01-04T04:06:16Z""", "Died on +.volumes[1].create_time"
    assert result.volumes[1].virtual_volume_id is None, "Died on .volumes[1].virtual_volume_id"
    assert result.volumes[0].status == """deleted""", "Died on +.volumes[0].status"
    assert result.volumes[0].enable512e == False, "Died on +.volumes[0].enable512e"
    assert result.volumes[0].qos.burst_iops == 15000, "Died on +.volumes[0].qos.burst_iops"
    assert result.volumes[0].qos.burst_time == 60, "Died on +.volumes[0].qos.burst_time"
    assert result.volumes[0].qos.min_iops == 100, "Died on +.volumes[0].qos.min_iops"
    assert result.volumes[0].qos.max_iops == 15000, "Died on +.volumes[0].qos.max_iops"
    assert result.volumes[0].name == """725RGtm59q6uDBav""", "Died on +.volumes[0].name"
    assert result.volumes[0].scsi_naadevice_id == """6f47acc100000000796670760000000d""", "Died on +.volumes[0].scsi_naadevice_id"
    assert result.volumes[0].total_size == 100000595968, "Died on +.volumes[0].total_size"
    assert result.volumes[0].block_size == 4096, "Died on +.volumes[0].block_size"
    assert result.volumes[0].purge_time == """2017-01-04T13:17:05Z""", "Died on +.volumes[0].purge_time"
    assert result.volumes[0].scsi_euidevice_id == """796670760000000df47acc0100000000""", "Died on +.volumes[0].scsi_euidevice_id"
    assert result.volumes[0].volume_id == 13, "Died on +.volumes[0].volume_id"
    assert result.volumes[0].access == """readWrite""", "Died on +.volumes[0].access"
    assert result.volumes[0].iqn == """iqn.2010-01.com.solidfire:yfpv.725rgtm59q6udbav.13""", "Died on +.volumes[0].iqn"
    assert result.volumes[0].slice_count == 1, "Died on +.volumes[0].slice_count"
    assert type(result.volumes[0].attributes) is dict, "Died on .volumes[0].attributes"
    assert result.volumes[0].account_id == 11, "Died on +.volumes[0].account_id"
    assert result.volumes[0].delete_time == """2017-01-04T05:17:05Z""", "Died on +.volumes[0].delete_time"
    assert result.volumes[0].create_time == """2017-01-04T04:06:16Z""", "Died on +.volumes[0].create_time"
    assert result.volumes[0].virtual_volume_id is None, "Died on .volumes[0].virtual_volume_id"

def test_delete_volumes_v9.1_2():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_DeleteVolumes_v9.1_2)

    
    account_ids = 42 # account_ids
    volume_access_group_ids = 42 # volume_access_group_ids
    volume_ids = 42 # volume_ids
    result = ef.delete_volumes()
    assert result.volumes[7].status == """deleted""", "Died on +.volumes[7].status"
    assert result.volumes[7].enable512e == False, "Died on +.volumes[7].enable512e"
    assert result.volumes[7].qos.burst_iops == 15000, "Died on +.volumes[7].qos.burst_iops"
    assert result.volumes[7].qos.burst_time == 60, "Died on +.volumes[7].qos.burst_time"
    assert result.volumes[7].qos.min_iops == 100, "Died on +.volumes[7].qos.min_iops"
    assert result.volumes[7].qos.max_iops == 15000, "Died on +.volumes[7].qos.max_iops"
    assert result.volumes[7].name == """R8IfFunf2Jqp4TXZ""", "Died on +.volumes[7].name"
    assert result.volumes[7].volume_access_groups[0] == 13, "Died on +.volumes[7].volume_access_groups[0]"
    assert result.volumes[7].scsi_naadevice_id == """6f47acc1000000006439766d0000006c""", "Died on +.volumes[7].scsi_naadevice_id"
    assert result.volumes[7].total_size == 100000595968, "Died on +.volumes[7].total_size"
    assert result.volumes[7].block_size == 4096, "Died on +.volumes[7].block_size"
    assert result.volumes[7].purge_time == """2016-12-31T08:13:42Z""", "Died on +.volumes[7].purge_time"
    assert result.volumes[7].scsi_euidevice_id == """6439766d0000006cf47acc0100000000""", "Died on +.volumes[7].scsi_euidevice_id"
    assert result.volumes[7].volume_id == 108, "Died on +.volumes[7].volume_id"
    assert result.volumes[7].access == """readWrite""", "Died on +.volumes[7].access"
    assert result.volumes[7].iqn == """iqn.2010-01.com.solidfire:d9vm.r8iffunf2jqp4txz.108""", "Died on +.volumes[7].iqn"
    assert result.volumes[7].slice_count == 1, "Died on +.volumes[7].slice_count"
    assert type(result.volumes[7].attributes) is dict, "Died on .volumes[7].attributes"
    assert result.volumes[7].account_id == 2, "Died on +.volumes[7].account_id"
    assert result.volumes[7].delete_time == """2016-12-31T00:13:42Z""", "Died on +.volumes[7].delete_time"
    assert result.volumes[7].create_time == """2016-12-31T00:04:41Z""", "Died on +.volumes[7].create_time"
    assert result.volumes[7].virtual_volume_id is None, "Died on .volumes[7].virtual_volume_id"
    assert result.volumes[6].status == """deleted""", "Died on +.volumes[6].status"
    assert result.volumes[6].enable512e == False, "Died on +.volumes[6].enable512e"
    assert result.volumes[6].qos.burst_iops == 15000, "Died on +.volumes[6].qos.burst_iops"
    assert result.volumes[6].qos.burst_time == 60, "Died on +.volumes[6].qos.burst_time"
    assert result.volumes[6].qos.min_iops == 100, "Died on +.volumes[6].qos.min_iops"
    assert result.volumes[6].qos.max_iops == 15000, "Died on +.volumes[6].qos.max_iops"
    assert result.volumes[6].name == """M0gBFgyoMwoa1bCO""", "Died on +.volumes[6].name"
    assert result.volumes[6].volume_access_groups[0] == 13, "Died on +.volumes[6].volume_access_groups[0]"
    assert result.volumes[6].scsi_naadevice_id == """6f47acc1000000006439766d0000006b""", "Died on +.volumes[6].scsi_naadevice_id"
    assert result.volumes[6].total_size == 100000595968, "Died on +.volumes[6].total_size"
    assert result.volumes[6].block_size == 4096, "Died on +.volumes[6].block_size"
    assert result.volumes[6].purge_time == """2016-12-31T08:13:42Z""", "Died on +.volumes[6].purge_time"
    assert result.volumes[6].scsi_euidevice_id == """6439766d0000006bf47acc0100000000""", "Died on +.volumes[6].scsi_euidevice_id"
    assert result.volumes[6].volume_id == 107, "Died on +.volumes[6].volume_id"
    assert result.volumes[6].access == """readWrite""", "Died on +.volumes[6].access"
    assert result.volumes[6].iqn == """iqn.2010-01.com.solidfire:d9vm.m0gbfgyomwoa1bco.107""", "Died on +.volumes[6].iqn"
    assert result.volumes[6].slice_count == 1, "Died on +.volumes[6].slice_count"
    assert type(result.volumes[6].attributes) is dict, "Died on .volumes[6].attributes"
    assert result.volumes[6].account_id == 2, "Died on +.volumes[6].account_id"
    assert result.volumes[6].delete_time == """2016-12-31T00:13:42Z""", "Died on +.volumes[6].delete_time"
    assert result.volumes[6].create_time == """2016-12-31T00:04:41Z""", "Died on +.volumes[6].create_time"
    assert result.volumes[6].virtual_volume_id is None, "Died on .volumes[6].virtual_volume_id"
    assert result.volumes[5].status == """deleted""", "Died on +.volumes[5].status"
    assert result.volumes[5].enable512e == False, "Died on +.volumes[5].enable512e"
    assert result.volumes[5].qos.burst_iops == 15000, "Died on +.volumes[5].qos.burst_iops"
    assert result.volumes[5].qos.burst_time == 60, "Died on +.volumes[5].qos.burst_time"
    assert result.volumes[5].qos.min_iops == 100, "Died on +.volumes[5].qos.min_iops"
    assert result.volumes[5].qos.max_iops == 15000, "Died on +.volumes[5].qos.max_iops"
    assert result.volumes[5].name == """wCFsUNPZecgQWIuA""", "Died on +.volumes[5].name"
    assert result.volumes[5].volume_access_groups[0] == 13, "Died on +.volumes[5].volume_access_groups[0]"
    assert result.volumes[5].scsi_naadevice_id == """6f47acc1000000006439766d0000006a""", "Died on +.volumes[5].scsi_naadevice_id"
    assert result.volumes[5].total_size == 100000595968, "Died on +.volumes[5].total_size"
    assert result.volumes[5].block_size == 4096, "Died on +.volumes[5].block_size"
    assert result.volumes[5].purge_time == """2016-12-31T08:13:42Z""", "Died on +.volumes[5].purge_time"
    assert result.volumes[5].scsi_euidevice_id == """6439766d0000006af47acc0100000000""", "Died on +.volumes[5].scsi_euidevice_id"
    assert result.volumes[5].volume_id == 106, "Died on +.volumes[5].volume_id"
    assert result.volumes[5].access == """readWrite""", "Died on +.volumes[5].access"
    assert result.volumes[5].iqn == """iqn.2010-01.com.solidfire:d9vm.wcfsunpzecgqwiua.106""", "Died on +.volumes[5].iqn"
    assert result.volumes[5].slice_count == 1, "Died on +.volumes[5].slice_count"
    assert type(result.volumes[5].attributes) is dict, "Died on .volumes[5].attributes"
    assert result.volumes[5].account_id == 2, "Died on +.volumes[5].account_id"
    assert result.volumes[5].delete_time == """2016-12-31T00:13:42Z""", "Died on +.volumes[5].delete_time"
    assert result.volumes[5].create_time == """2016-12-31T00:04:41Z""", "Died on +.volumes[5].create_time"
    assert result.volumes[5].virtual_volume_id is None, "Died on .volumes[5].virtual_volume_id"
    assert result.volumes[4].status == """deleted""", "Died on +.volumes[4].status"
    assert result.volumes[4].enable512e == False, "Died on +.volumes[4].enable512e"
    assert result.volumes[4].qos.burst_iops == 15000, "Died on +.volumes[4].qos.burst_iops"
    assert result.volumes[4].qos.burst_time == 60, "Died on +.volumes[4].qos.burst_time"
    assert result.volumes[4].qos.min_iops == 100, "Died on +.volumes[4].qos.min_iops"
    assert result.volumes[4].qos.max_iops == 15000, "Died on +.volumes[4].qos.max_iops"
    assert result.volumes[4].name == """NsA9DEfJOJYao2Ts""", "Died on +.volumes[4].name"
    assert result.volumes[4].volume_access_groups[0] == 13, "Died on +.volumes[4].volume_access_groups[0]"
    assert result.volumes[4].scsi_naadevice_id == """6f47acc1000000006439766d00000069""", "Died on +.volumes[4].scsi_naadevice_id"
    assert result.volumes[4].total_size == 100000595968, "Died on +.volumes[4].total_size"
    assert result.volumes[4].block_size == 4096, "Died on +.volumes[4].block_size"
    assert result.volumes[4].purge_time == """2016-12-31T08:13:42Z""", "Died on +.volumes[4].purge_time"
    assert result.volumes[4].scsi_euidevice_id == """6439766d00000069f47acc0100000000""", "Died on +.volumes[4].scsi_euidevice_id"
    assert result.volumes[4].volume_id == 105, "Died on +.volumes[4].volume_id"
    assert result.volumes[4].access == """readWrite""", "Died on +.volumes[4].access"
    assert result.volumes[4].iqn == """iqn.2010-01.com.solidfire:d9vm.nsa9defjojyao2ts.105""", "Died on +.volumes[4].iqn"
    assert result.volumes[4].slice_count == 1, "Died on +.volumes[4].slice_count"
    assert type(result.volumes[4].attributes) is dict, "Died on .volumes[4].attributes"
    assert result.volumes[4].account_id == 2, "Died on +.volumes[4].account_id"
    assert result.volumes[4].delete_time == """2016-12-31T00:13:42Z""", "Died on +.volumes[4].delete_time"
    assert result.volumes[4].create_time == """2016-12-31T00:04:41Z""", "Died on +.volumes[4].create_time"
    assert result.volumes[4].virtual_volume_id is None, "Died on .volumes[4].virtual_volume_id"
    assert result.volumes[3].status == """deleted""", "Died on +.volumes[3].status"
    assert result.volumes[3].enable512e == False, "Died on +.volumes[3].enable512e"
    assert result.volumes[3].qos.burst_iops == 15000, "Died on +.volumes[3].qos.burst_iops"
    assert result.volumes[3].qos.burst_time == 60, "Died on +.volumes[3].qos.burst_time"
    assert result.volumes[3].qos.min_iops == 100, "Died on +.volumes[3].qos.min_iops"
    assert result.volumes[3].qos.max_iops == 15000, "Died on +.volumes[3].qos.max_iops"
    assert result.volumes[3].name == """BoaTolwSAh1MFFhc""", "Died on +.volumes[3].name"
    assert result.volumes[3].volume_access_groups[0] == 13, "Died on +.volumes[3].volume_access_groups[0]"
    assert result.volumes[3].scsi_naadevice_id == """6f47acc1000000006439766d00000068""", "Died on +.volumes[3].scsi_naadevice_id"
    assert result.volumes[3].total_size == 100000595968, "Died on +.volumes[3].total_size"
    assert result.volumes[3].block_size == 4096, "Died on +.volumes[3].block_size"
    assert result.volumes[3].purge_time == """2016-12-31T08:13:42Z""", "Died on +.volumes[3].purge_time"
    assert result.volumes[3].scsi_euidevice_id == """6439766d00000068f47acc0100000000""", "Died on +.volumes[3].scsi_euidevice_id"
    assert result.volumes[3].volume_id == 104, "Died on +.volumes[3].volume_id"
    assert result.volumes[3].access == """readWrite""", "Died on +.volumes[3].access"
    assert result.volumes[3].iqn == """iqn.2010-01.com.solidfire:d9vm.boatolwsah1mffhc.104""", "Died on +.volumes[3].iqn"
    assert result.volumes[3].slice_count == 1, "Died on +.volumes[3].slice_count"
    assert type(result.volumes[3].attributes) is dict, "Died on .volumes[3].attributes"
    assert result.volumes[3].account_id == 2, "Died on +.volumes[3].account_id"
    assert result.volumes[3].delete_time == """2016-12-31T00:13:42Z""", "Died on +.volumes[3].delete_time"
    assert result.volumes[3].create_time == """2016-12-31T00:04:41Z""", "Died on +.volumes[3].create_time"
    assert result.volumes[3].virtual_volume_id is None, "Died on .volumes[3].virtual_volume_id"
    assert result.volumes[2].status == """deleted""", "Died on +.volumes[2].status"
    assert result.volumes[2].enable512e == False, "Died on +.volumes[2].enable512e"
    assert result.volumes[2].qos.burst_iops == 15000, "Died on +.volumes[2].qos.burst_iops"
    assert result.volumes[2].qos.burst_time == 60, "Died on +.volumes[2].qos.burst_time"
    assert result.volumes[2].qos.min_iops == 100, "Died on +.volumes[2].qos.min_iops"
    assert result.volumes[2].qos.max_iops == 15000, "Died on +.volumes[2].qos.max_iops"
    assert result.volumes[2].name == """mIpwfWpWkVtnxNNh""", "Died on +.volumes[2].name"
    assert result.volumes[2].volume_access_groups[0] == 13, "Died on +.volumes[2].volume_access_groups[0]"
    assert result.volumes[2].scsi_naadevice_id == """6f47acc1000000006439766d00000067""", "Died on +.volumes[2].scsi_naadevice_id"
    assert result.volumes[2].total_size == 100000595968, "Died on +.volumes[2].total_size"
    assert result.volumes[2].block_size == 4096, "Died on +.volumes[2].block_size"
    assert result.volumes[2].purge_time == """2016-12-31T08:13:42Z""", "Died on +.volumes[2].purge_time"
    assert result.volumes[2].scsi_euidevice_id == """6439766d00000067f47acc0100000000""", "Died on +.volumes[2].scsi_euidevice_id"
    assert result.volumes[2].volume_id == 103, "Died on +.volumes[2].volume_id"
    assert result.volumes[2].access == """readWrite""", "Died on +.volumes[2].access"
    assert result.volumes[2].iqn == """iqn.2010-01.com.solidfire:d9vm.mipwfwpwkvtnxnnh.103""", "Died on +.volumes[2].iqn"
    assert result.volumes[2].slice_count == 1, "Died on +.volumes[2].slice_count"
    assert type(result.volumes[2].attributes) is dict, "Died on .volumes[2].attributes"
    assert result.volumes[2].account_id == 2, "Died on +.volumes[2].account_id"
    assert result.volumes[2].delete_time == """2016-12-31T00:13:42Z""", "Died on +.volumes[2].delete_time"
    assert result.volumes[2].create_time == """2016-12-31T00:04:41Z""", "Died on +.volumes[2].create_time"
    assert result.volumes[2].virtual_volume_id is None, "Died on .volumes[2].virtual_volume_id"
    assert result.volumes[1].status == """deleted""", "Died on +.volumes[1].status"
    assert result.volumes[1].enable512e == False, "Died on +.volumes[1].enable512e"
    assert result.volumes[1].qos.burst_iops == 15000, "Died on +.volumes[1].qos.burst_iops"
    assert result.volumes[1].qos.burst_time == 60, "Died on +.volumes[1].qos.burst_time"
    assert result.volumes[1].qos.min_iops == 100, "Died on +.volumes[1].qos.min_iops"
    assert result.volumes[1].qos.max_iops == 15000, "Died on +.volumes[1].qos.max_iops"
    assert result.volumes[1].name == """47Ydqud0VKTQVlVx""", "Died on +.volumes[1].name"
    assert result.volumes[1].volume_access_groups[0] == 13, "Died on +.volumes[1].volume_access_groups[0]"
    assert result.volumes[1].scsi_naadevice_id == """6f47acc1000000006439766d00000066""", "Died on +.volumes[1].scsi_naadevice_id"
    assert result.volumes[1].total_size == 100000595968, "Died on +.volumes[1].total_size"
    assert result.volumes[1].block_size == 4096, "Died on +.volumes[1].block_size"
    assert result.volumes[1].purge_time == """2016-12-31T08:13:42Z""", "Died on +.volumes[1].purge_time"
    assert result.volumes[1].scsi_euidevice_id == """6439766d00000066f47acc0100000000""", "Died on +.volumes[1].scsi_euidevice_id"
    assert result.volumes[1].volume_id == 102, "Died on +.volumes[1].volume_id"
    assert result.volumes[1].access == """readWrite""", "Died on +.volumes[1].access"
    assert result.volumes[1].iqn == """iqn.2010-01.com.solidfire:d9vm.47ydqud0vktqvlvx.102""", "Died on +.volumes[1].iqn"
    assert result.volumes[1].slice_count == 1, "Died on +.volumes[1].slice_count"
    assert type(result.volumes[1].attributes) is dict, "Died on .volumes[1].attributes"
    assert result.volumes[1].account_id == 2, "Died on +.volumes[1].account_id"
    assert result.volumes[1].delete_time == """2016-12-31T00:13:42Z""", "Died on +.volumes[1].delete_time"
    assert result.volumes[1].create_time == """2016-12-31T00:04:41Z""", "Died on +.volumes[1].create_time"
    assert result.volumes[1].virtual_volume_id is None, "Died on .volumes[1].virtual_volume_id"
    assert result.volumes[0].status == """deleted""", "Died on +.volumes[0].status"
    assert result.volumes[0].enable512e == False, "Died on +.volumes[0].enable512e"
    assert result.volumes[0].qos.burst_iops == 15000, "Died on +.volumes[0].qos.burst_iops"
    assert result.volumes[0].qos.burst_time == 60, "Died on +.volumes[0].qos.burst_time"
    assert result.volumes[0].qos.min_iops == 100, "Died on +.volumes[0].qos.min_iops"
    assert result.volumes[0].qos.max_iops == 15000, "Died on +.volumes[0].qos.max_iops"
    assert result.volumes[0].name == """1bfwIRGSPLevOgWp""", "Died on +.volumes[0].name"
    assert result.volumes[0].volume_access_groups[0] == 13, "Died on +.volumes[0].volume_access_groups[0]"
    assert result.volumes[0].scsi_naadevice_id == """6f47acc1000000006439766d00000065""", "Died on +.volumes[0].scsi_naadevice_id"
    assert result.volumes[0].total_size == 100000595968, "Died on +.volumes[0].total_size"
    assert result.volumes[0].block_size == 4096, "Died on +.volumes[0].block_size"
    assert result.volumes[0].purge_time == """2016-12-31T08:13:42Z""", "Died on +.volumes[0].purge_time"
    assert result.volumes[0].scsi_euidevice_id == """6439766d00000065f47acc0100000000""", "Died on +.volumes[0].scsi_euidevice_id"
    assert result.volumes[0].volume_id == 101, "Died on +.volumes[0].volume_id"
    assert result.volumes[0].access == """readWrite""", "Died on +.volumes[0].access"
    assert result.volumes[0].iqn == """iqn.2010-01.com.solidfire:d9vm.1bfwirgsplevogwp.101""", "Died on +.volumes[0].iqn"
    assert result.volumes[0].slice_count == 1, "Died on +.volumes[0].slice_count"
    assert type(result.volumes[0].attributes) is dict, "Died on .volumes[0].attributes"
    assert result.volumes[0].account_id == 2, "Died on +.volumes[0].account_id"
    assert result.volumes[0].delete_time == """2016-12-31T00:13:42Z""", "Died on +.volumes[0].delete_time"
    assert result.volumes[0].create_time == """2016-12-31T00:04:41Z""", "Died on +.volumes[0].create_time"
    assert result.volumes[0].virtual_volume_id is None, "Died on .volumes[0].virtual_volume_id"

def test_disable_encryption_at_rest_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_DisableEncryptionAtRest_v8.7_0)

    
    result = ef.disable_encryption_at_rest()

def test_disable_encryption_at_rest_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_DisableEncryptionAtRest_v9.1_1)

    
    result = ef.disable_encryption_at_rest()

def test_disable_encryption_at_rest_v9.1_2():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_DisableEncryptionAtRest_v9.1_2)

    
    result = ef.disable_encryption_at_rest()

def test_enable_encryption_at_rest_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_EnableEncryptionAtRest_v8.4_0)

    
    result = ef.enable_encryption_at_rest()

def test_enable_encryption_at_rest_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_EnableEncryptionAtRest_v8.6_0)

    
    result = ef.enable_encryption_at_rest()

def test_enable_encryption_at_rest_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_EnableEncryptionAtRest_v9.0_0)

    
    result = ef.enable_encryption_at_rest()

def test_get_api_v1.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetAPI_v1.0_0)

    
    result = ef.get_api()

def test_get_api_v5.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetAPI_v5.0_0)

    
    result = ef.get_api()

def test_get_api_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetAPI_v8.4_0)

    
    result = ef.get_api()

def test_get_api_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetAPI_v8.6_0)

    
    result = ef.get_api()

def test_get_api_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetAPI_v8.7_0)

    
    result = ef.get_api()

def test_get_api_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetAPI_v9.0_0)

    
    result = ef.get_api()

def test_get_api_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetAPI_v9.1_0)

    
    result = ef.get_api()

def test_get_async_result_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetAsyncResult_v9.1_0)

    
    async_handle = 42 # async_handle
    result = ef.get_async_result(async_handle,)

def test_get_async_result_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetAsyncResult_v9.1_1)

    
    async_handle = 42 # async_handle
    result = ef.get_async_result(async_handle,)

def test_get_async_result_v9.1_10():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetAsyncResult_v9.1_10)

    
    async_handle = 42 # async_handle
    result = ef.get_async_result(async_handle,)

def test_get_async_result_v9.1_11():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetAsyncResult_v9.1_11)

    
    async_handle = 42 # async_handle
    result = ef.get_async_result(async_handle,)

def test_get_async_result_v9.1_12():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetAsyncResult_v9.1_12)

    
    async_handle = 42 # async_handle
    result = ef.get_async_result(async_handle,)

def test_get_async_result_v9.1_2():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetAsyncResult_v9.1_2)

    
    async_handle = 42 # async_handle
    result = ef.get_async_result(async_handle,)

def test_get_async_result_v9.1_3():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetAsyncResult_v9.1_3)

    
    async_handle = 42 # async_handle
    result = ef.get_async_result(async_handle,)

def test_get_async_result_v9.1_4():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetAsyncResult_v9.1_4)

    
    async_handle = 42 # async_handle
    result = ef.get_async_result(async_handle,)

def test_get_async_result_v9.1_5():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetAsyncResult_v9.1_5)

    
    async_handle = 42 # async_handle
    result = ef.get_async_result(async_handle,)

def test_get_async_result_v9.1_6():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetAsyncResult_v9.1_6)

    
    async_handle = 42 # async_handle
    result = ef.get_async_result(async_handle,)

def test_get_async_result_v9.1_7():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetAsyncResult_v9.1_7)

    
    async_handle = 42 # async_handle
    result = ef.get_async_result(async_handle,)

def test_get_async_result_v9.1_8():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetAsyncResult_v9.1_8)

    
    async_handle = 42 # async_handle
    result = ef.get_async_result(async_handle,)

def test_get_async_result_v9.1_9():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetAsyncResult_v9.1_9)

    
    async_handle = 42 # async_handle
    result = ef.get_async_result(async_handle,)

def test_get_bootstrap_config_v5.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetBootstrapConfig_v5.0_0)

    
    result = ef.get_bootstrap_config()
    assert result.cluster_name == """AutoTest2-TrQi""", "Died on +.cluster_name"
    assert result.nodes[3].compatible == True, "Died on +.nodes[3].compatible"
    assert result.nodes[3].version == """9.1.0.28""", "Died on +.nodes[3].version"
    assert result.nodes[3].name == """10.117.58.76""", "Died on +.nodes[3].name"
    assert result.nodes[2].compatible == True, "Died on +.nodes[2].compatible"
    assert result.nodes[2].version == """9.1.0.28""", "Died on +.nodes[2].version"
    assert result.nodes[2].name == """10.117.58.75""", "Died on +.nodes[2].name"
    assert result.nodes[1].compatible == True, "Died on +.nodes[1].compatible"
    assert result.nodes[1].version == """9.1.0.28""", "Died on +.nodes[1].version"
    assert result.nodes[1].name == """10.117.58.74""", "Died on +.nodes[1].name"
    assert result.nodes[0].compatible == True, "Died on +.nodes[0].compatible"
    assert result.nodes[0].version == """9.1.0.28""", "Died on +.nodes[0].version"
    assert result.nodes[0].name == """10.117.58.69""", "Died on +.nodes[0].name"
    assert result.version == """9.1.0.28""", "Died on +.version"
    assert result.node_name == """NLABP2117""", "Died on +.node_name"

def test_get_cluster_capacity_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterCapacity_v8.4_0)

    
    result = ef.get_cluster_capacity()
    assert result.cluster_capacity.used_metadata_space_in_snapshots == 0, "Died on +.cluster_capacity.used_metadata_space_in_snapshots"
    assert result.cluster_capacity.max_used_metadata_space == 0, "Died on +.cluster_capacity.max_used_metadata_space"
    assert result.cluster_capacity.active_block_space == 0, "Died on +.cluster_capacity.active_block_space"
    assert result.cluster_capacity.unique_blocks_used_space == 0, "Died on +.cluster_capacity.unique_blocks_used_space"
    assert result.cluster_capacity.total_ops == 0, "Died on +.cluster_capacity.total_ops"
    assert result.cluster_capacity.peak_active_sessions == 0, "Died on +.cluster_capacity.peak_active_sessions"
    assert result.cluster_capacity.unique_blocks == 0, "Died on +.cluster_capacity.unique_blocks"
    assert result.cluster_capacity.max_over_provisionable_space == 0, "Died on +.cluster_capacity.max_over_provisionable_space"
    assert result.cluster_capacity.zero_blocks == 0, "Died on +.cluster_capacity.zero_blocks"
    assert result.cluster_capacity.provisioned_space == 0, "Died on +.cluster_capacity.provisioned_space"
    assert result.cluster_capacity.max_used_space == 0, "Died on +.cluster_capacity.max_used_space"
    assert result.cluster_capacity.peak_iops == 0, "Died on +.cluster_capacity.peak_iops"
    assert result.cluster_capacity.timestamp == """2017-01-12T21:48:33Z""", "Died on +.cluster_capacity.timestamp"
    assert result.cluster_capacity.current_iops == 0, "Died on +.cluster_capacity.current_iops"
    assert result.cluster_capacity.used_space == 0, "Died on +.cluster_capacity.used_space"
    assert result.cluster_capacity.active_sessions == 0, "Died on +.cluster_capacity.active_sessions"
    assert result.cluster_capacity.non_zero_blocks == 0, "Died on +.cluster_capacity.non_zero_blocks"
    assert result.cluster_capacity.max_provisioned_space == 0, "Died on +.cluster_capacity.max_provisioned_space"
    assert result.cluster_capacity.used_metadata_space == 0, "Died on +.cluster_capacity.used_metadata_space"
    assert result.cluster_capacity.average_iops == 0, "Died on +.cluster_capacity.average_iops"
    assert result.cluster_capacity.snapshot_non_zero_blocks == 0, "Died on +.cluster_capacity.snapshot_non_zero_blocks"
    assert result.cluster_capacity.max_iops == 0, "Died on +.cluster_capacity.max_iops"
    assert result.cluster_capacity.cluster_recent_iosize == 0, "Died on +.cluster_capacity.cluster_recent_iosize"

def test_get_cluster_capacity_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterCapacity_v8.6_0)

    
    result = ef.get_cluster_capacity()
    assert result.cluster_capacity.used_metadata_space_in_snapshots == 0, "Died on +.cluster_capacity.used_metadata_space_in_snapshots"
    assert result.cluster_capacity.max_used_metadata_space == 0, "Died on +.cluster_capacity.max_used_metadata_space"
    assert result.cluster_capacity.active_block_space == 0, "Died on +.cluster_capacity.active_block_space"
    assert result.cluster_capacity.unique_blocks_used_space == 0, "Died on +.cluster_capacity.unique_blocks_used_space"
    assert result.cluster_capacity.total_ops == 0, "Died on +.cluster_capacity.total_ops"
    assert result.cluster_capacity.peak_active_sessions == 0, "Died on +.cluster_capacity.peak_active_sessions"
    assert result.cluster_capacity.unique_blocks == 0, "Died on +.cluster_capacity.unique_blocks"
    assert result.cluster_capacity.max_over_provisionable_space == 0, "Died on +.cluster_capacity.max_over_provisionable_space"
    assert result.cluster_capacity.zero_blocks == 0, "Died on +.cluster_capacity.zero_blocks"
    assert result.cluster_capacity.provisioned_space == 0, "Died on +.cluster_capacity.provisioned_space"
    assert result.cluster_capacity.max_used_space == 0, "Died on +.cluster_capacity.max_used_space"
    assert result.cluster_capacity.peak_iops == 0, "Died on +.cluster_capacity.peak_iops"
    assert result.cluster_capacity.timestamp == """2016-12-29T03:17:30Z""", "Died on +.cluster_capacity.timestamp"
    assert result.cluster_capacity.current_iops == 0, "Died on +.cluster_capacity.current_iops"
    assert result.cluster_capacity.used_space == 0, "Died on +.cluster_capacity.used_space"
    assert result.cluster_capacity.active_sessions == 0, "Died on +.cluster_capacity.active_sessions"
    assert result.cluster_capacity.non_zero_blocks == 0, "Died on +.cluster_capacity.non_zero_blocks"
    assert result.cluster_capacity.max_provisioned_space == 0, "Died on +.cluster_capacity.max_provisioned_space"
    assert result.cluster_capacity.used_metadata_space == 0, "Died on +.cluster_capacity.used_metadata_space"
    assert result.cluster_capacity.average_iops == 0, "Died on +.cluster_capacity.average_iops"
    assert result.cluster_capacity.snapshot_non_zero_blocks == 0, "Died on +.cluster_capacity.snapshot_non_zero_blocks"
    assert result.cluster_capacity.max_iops == 0, "Died on +.cluster_capacity.max_iops"
    assert result.cluster_capacity.cluster_recent_iosize == 0, "Died on +.cluster_capacity.cluster_recent_iosize"

def test_get_cluster_capacity_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterCapacity_v8.7_0)

    
    result = ef.get_cluster_capacity()
    assert result.cluster_capacity.used_metadata_space_in_snapshots == 0, "Died on +.cluster_capacity.used_metadata_space_in_snapshots"
    assert result.cluster_capacity.max_used_metadata_space == 0, "Died on +.cluster_capacity.max_used_metadata_space"
    assert result.cluster_capacity.active_block_space == 0, "Died on +.cluster_capacity.active_block_space"
    assert result.cluster_capacity.unique_blocks_used_space == 0, "Died on +.cluster_capacity.unique_blocks_used_space"
    assert result.cluster_capacity.total_ops == 0, "Died on +.cluster_capacity.total_ops"
    assert result.cluster_capacity.peak_active_sessions == 0, "Died on +.cluster_capacity.peak_active_sessions"
    assert result.cluster_capacity.unique_blocks == 0, "Died on +.cluster_capacity.unique_blocks"
    assert result.cluster_capacity.max_over_provisionable_space == 0, "Died on +.cluster_capacity.max_over_provisionable_space"
    assert result.cluster_capacity.zero_blocks == 0, "Died on +.cluster_capacity.zero_blocks"
    assert result.cluster_capacity.provisioned_space == 0, "Died on +.cluster_capacity.provisioned_space"
    assert result.cluster_capacity.max_used_space == 0, "Died on +.cluster_capacity.max_used_space"
    assert result.cluster_capacity.peak_iops == 0, "Died on +.cluster_capacity.peak_iops"
    assert result.cluster_capacity.timestamp == """2017-01-12T22:13:09Z""", "Died on +.cluster_capacity.timestamp"
    assert result.cluster_capacity.current_iops == 0, "Died on +.cluster_capacity.current_iops"
    assert result.cluster_capacity.used_space == 0, "Died on +.cluster_capacity.used_space"
    assert result.cluster_capacity.active_sessions == 0, "Died on +.cluster_capacity.active_sessions"
    assert result.cluster_capacity.non_zero_blocks == 0, "Died on +.cluster_capacity.non_zero_blocks"
    assert result.cluster_capacity.max_provisioned_space == 0, "Died on +.cluster_capacity.max_provisioned_space"
    assert result.cluster_capacity.used_metadata_space == 0, "Died on +.cluster_capacity.used_metadata_space"
    assert result.cluster_capacity.average_iops == 0, "Died on +.cluster_capacity.average_iops"
    assert result.cluster_capacity.snapshot_non_zero_blocks == 0, "Died on +.cluster_capacity.snapshot_non_zero_blocks"
    assert result.cluster_capacity.max_iops == 0, "Died on +.cluster_capacity.max_iops"
    assert result.cluster_capacity.cluster_recent_iosize == 0, "Died on +.cluster_capacity.cluster_recent_iosize"

def test_get_cluster_capacity_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterCapacity_v9.0_0)

    
    result = ef.get_cluster_capacity()
    assert result.cluster_capacity.used_metadata_space_in_snapshots == 0, "Died on +.cluster_capacity.used_metadata_space_in_snapshots"
    assert result.cluster_capacity.max_used_metadata_space == 0, "Died on +.cluster_capacity.max_used_metadata_space"
    assert result.cluster_capacity.active_block_space == 0, "Died on +.cluster_capacity.active_block_space"
    assert result.cluster_capacity.unique_blocks_used_space == 0, "Died on +.cluster_capacity.unique_blocks_used_space"
    assert result.cluster_capacity.total_ops == 0, "Died on +.cluster_capacity.total_ops"
    assert result.cluster_capacity.peak_active_sessions == 0, "Died on +.cluster_capacity.peak_active_sessions"
    assert result.cluster_capacity.unique_blocks == 0, "Died on +.cluster_capacity.unique_blocks"
    assert result.cluster_capacity.max_over_provisionable_space == 431982945218560, "Died on +.cluster_capacity.max_over_provisionable_space"
    assert result.cluster_capacity.zero_blocks == 0, "Died on +.cluster_capacity.zero_blocks"
    assert result.cluster_capacity.provisioned_space == 0, "Died on +.cluster_capacity.provisioned_space"
    assert result.cluster_capacity.max_used_space == 15003452620800, "Died on +.cluster_capacity.max_used_space"
    assert result.cluster_capacity.peak_iops == 0, "Died on +.cluster_capacity.peak_iops"
    assert result.cluster_capacity.timestamp == """2017-01-10T04:17:01Z""", "Died on +.cluster_capacity.timestamp"
    assert result.cluster_capacity.current_iops == 0, "Died on +.cluster_capacity.current_iops"
    assert result.cluster_capacity.used_space == 0, "Died on +.cluster_capacity.used_space"
    assert result.cluster_capacity.active_sessions == 0, "Died on +.cluster_capacity.active_sessions"
    assert result.cluster_capacity.non_zero_blocks == 0, "Died on +.cluster_capacity.non_zero_blocks"
    assert result.cluster_capacity.max_provisioned_space == 86396589043712, "Died on +.cluster_capacity.max_provisioned_space"
    assert result.cluster_capacity.used_metadata_space == 0, "Died on +.cluster_capacity.used_metadata_space"
    assert result.cluster_capacity.average_iops == 0, "Died on +.cluster_capacity.average_iops"
    assert result.cluster_capacity.snapshot_non_zero_blocks == 0, "Died on +.cluster_capacity.snapshot_non_zero_blocks"
    assert result.cluster_capacity.max_iops == 250000, "Died on +.cluster_capacity.max_iops"
    assert result.cluster_capacity.cluster_recent_iosize == 0, "Died on +.cluster_capacity.cluster_recent_iosize"

def test_get_cluster_capacity_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterCapacity_v9.1_0)

    
    result = ef.get_cluster_capacity()
    assert result.cluster_capacity.used_metadata_space_in_snapshots == 0, "Died on +.cluster_capacity.used_metadata_space_in_snapshots"
    assert result.cluster_capacity.max_used_metadata_space == 0, "Died on +.cluster_capacity.max_used_metadata_space"
    assert result.cluster_capacity.active_block_space == 0, "Died on +.cluster_capacity.active_block_space"
    assert result.cluster_capacity.unique_blocks_used_space == 0, "Died on +.cluster_capacity.unique_blocks_used_space"
    assert result.cluster_capacity.total_ops == 0, "Died on +.cluster_capacity.total_ops"
    assert result.cluster_capacity.peak_active_sessions == 0, "Died on +.cluster_capacity.peak_active_sessions"
    assert result.cluster_capacity.unique_blocks == 0, "Died on +.cluster_capacity.unique_blocks"
    assert result.cluster_capacity.max_over_provisionable_space == 0, "Died on +.cluster_capacity.max_over_provisionable_space"
    assert result.cluster_capacity.zero_blocks == 0, "Died on +.cluster_capacity.zero_blocks"
    assert result.cluster_capacity.provisioned_space == 0, "Died on +.cluster_capacity.provisioned_space"
    assert result.cluster_capacity.max_used_space == 0, "Died on +.cluster_capacity.max_used_space"
    assert result.cluster_capacity.peak_iops == 0, "Died on +.cluster_capacity.peak_iops"
    assert result.cluster_capacity.timestamp == """2016-12-28T08:46:39Z""", "Died on +.cluster_capacity.timestamp"
    assert result.cluster_capacity.current_iops == 0, "Died on +.cluster_capacity.current_iops"
    assert result.cluster_capacity.used_space == 0, "Died on +.cluster_capacity.used_space"
    assert result.cluster_capacity.active_sessions == 0, "Died on +.cluster_capacity.active_sessions"
    assert result.cluster_capacity.non_zero_blocks == 0, "Died on +.cluster_capacity.non_zero_blocks"
    assert result.cluster_capacity.max_provisioned_space == 0, "Died on +.cluster_capacity.max_provisioned_space"
    assert result.cluster_capacity.used_metadata_space == 0, "Died on +.cluster_capacity.used_metadata_space"
    assert result.cluster_capacity.average_iops == 0, "Died on +.cluster_capacity.average_iops"
    assert result.cluster_capacity.snapshot_non_zero_blocks == 0, "Died on +.cluster_capacity.snapshot_non_zero_blocks"
    assert result.cluster_capacity.max_iops == 0, "Died on +.cluster_capacity.max_iops"
    assert result.cluster_capacity.cluster_recent_iosize == 0, "Died on +.cluster_capacity.cluster_recent_iosize"

def test_get_cluster_full_threshold_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterFullThreshold_v8.4_0)

    
    result = ef.get_cluster_full_threshold()
    assert result.sum_used_cluster_bytes == 0, "Died on +.sum_used_cluster_bytes"
    assert result.stage5_block_threshold_bytes == 51850644701184, "Died on +.stage5_block_threshold_bytes"
    assert result.stage2_aware_threshold == 3, "Died on +.stage2_aware_threshold"
    assert result.stage3_low_threshold == 2, "Died on +.stage3_low_threshold"
    assert result.fullness == """stage1Happy""", "Died on +.fullness"
    assert result.sum_total_cluster_bytes == 51850644701184, "Died on +.sum_total_cluster_bytes"
    assert result.slice_reserve_used_threshold_pct == 5, "Died on +.slice_reserve_used_threshold_pct"
    assert result.metadata_fullness == """stage1Happy""", "Died on +.metadata_fullness"
    assert result.stage3_block_threshold_bytes == 40097831902250, "Died on +.stage3_block_threshold_bytes"
    assert result.stage2_block_threshold_bytes == 24369803009557, "Died on +.stage2_block_threshold_bytes"
    assert result.stage3_block_threshold_percent == 3, "Died on +.stage3_block_threshold_percent"
    assert result.sum_total_metadata_cluster_bytes == 2592532235058, "Died on +.sum_total_metadata_cluster_bytes"
    assert result.stage4_block_threshold_bytes == 41653351243285, "Died on +.stage4_block_threshold_bytes"
    assert result.sum_used_metadata_cluster_bytes == 0, "Died on +.sum_used_metadata_cluster_bytes"
    assert result.max_metadata_over_provision_factor == 5, "Died on +.max_metadata_over_provision_factor"
    assert result.block_fullness == """stage1Happy""", "Died on +.block_fullness"
    assert result.stage4_critical_threshold == 1, "Died on +.stage4_critical_threshold"

def test_get_cluster_full_threshold_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterFullThreshold_v8.7_0)

    
    result = ef.get_cluster_full_threshold()
    assert result.sum_used_cluster_bytes == 0, "Died on +.sum_used_cluster_bytes"
    assert result.stage5_block_threshold_bytes == 12963100114944, "Died on +.stage5_block_threshold_bytes"
    assert result.stage2_aware_threshold == 3, "Died on +.stage2_aware_threshold"
    assert result.stage3_low_threshold == 2, "Died on +.stage3_low_threshold"
    assert result.fullness == """stage1Happy""", "Died on +.fullness"
    assert result.sum_total_cluster_bytes == 12963100114944, "Died on +.sum_total_cluster_bytes"
    assert result.slice_reserve_used_threshold_pct == 5, "Died on +.slice_reserve_used_threshold_pct"
    assert result.metadata_fullness == """stage1Happy""", "Died on +.metadata_fullness"
    assert result.stage3_block_threshold_bytes == 10024797422224, "Died on +.stage3_block_threshold_bytes"
    assert result.stage2_block_threshold_bytes == 6092657054024, "Died on +.stage2_block_threshold_bytes"
    assert result.stage3_block_threshold_percent == 3, "Died on +.stage3_block_threshold_percent"
    assert result.sum_total_metadata_cluster_bytes == 648155005746, "Died on +.sum_total_metadata_cluster_bytes"
    assert result.stage4_block_threshold_bytes == 10413690425672, "Died on +.stage4_block_threshold_bytes"
    assert result.sum_used_metadata_cluster_bytes == 0, "Died on +.sum_used_metadata_cluster_bytes"
    assert result.max_metadata_over_provision_factor == 5, "Died on +.max_metadata_over_provision_factor"
    assert result.block_fullness == """stage1Happy""", "Died on +.block_fullness"
    assert result.stage4_critical_threshold == 1, "Died on +.stage4_critical_threshold"

def test_get_cluster_full_threshold_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterFullThreshold_v9.1_0)

    
    result = ef.get_cluster_full_threshold()
    assert result.sum_used_cluster_bytes == 4571284616459, "Died on +.sum_used_cluster_bytes"
    assert result.stage5_block_threshold_bytes == 9002071572480, "Died on +.stage5_block_threshold_bytes"
    assert result.stage2_aware_threshold == 3, "Died on +.stage2_aware_threshold"
    assert result.stage3_low_threshold == 2, "Died on +.stage3_low_threshold"
    assert result.fullness == """stage3Low""", "Died on +.fullness"
    assert result.sum_total_cluster_bytes == 9002071572480, "Died on +.sum_total_cluster_bytes"
    assert result.slice_reserve_used_threshold_pct == 5, "Died on +.slice_reserve_used_threshold_pct"
    assert result.metadata_fullness == """stage3Low""", "Died on +.metadata_fullness"
    assert result.stage3_block_threshold_bytes == 5461256753972, "Died on +.stage3_block_threshold_bytes"
    assert result.stage2_block_threshold_bytes == 0, "Died on +.stage2_block_threshold_bytes"
    assert result.stage3_block_threshold_percent == 3, "Died on +.stage3_block_threshold_percent"
    assert result.sum_total_metadata_cluster_bytes == 404984011161, "Died on +.sum_total_metadata_cluster_bytes"
    assert result.stage4_block_threshold_bytes == 5731318901146, "Died on +.stage4_block_threshold_bytes"
    assert result.sum_used_metadata_cluster_bytes == 16454516736, "Died on +.sum_used_metadata_cluster_bytes"
    assert result.max_metadata_over_provision_factor == 5, "Died on +.max_metadata_over_provision_factor"
    assert result.block_fullness == """stage2Aware""", "Died on +.block_fullness"
    assert result.stage4_critical_threshold == 1, "Died on +.stage4_critical_threshold"

def test_get_cluster_hardware_info_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_0)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_1)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_10():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_10)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_11():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_11)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_12():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_12)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_13():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_13)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_14():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_14)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_15():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_15)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_16():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_16)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_17():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_17)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_18():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_18)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_19():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_19)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_2():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_2)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_20():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_20)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_21():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_21)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_22():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_22)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_23():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_23)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_24():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_24)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_25():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_25)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_26():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_26)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_27():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_27)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_28():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_28)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_29():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_29)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_3():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_3)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_30():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_30)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_31():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_31)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_32():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_32)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_33():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_33)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_34():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_34)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_35():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_35)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_36():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_36)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_37():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_37)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_38():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_38)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_39():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_39)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_4():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_4)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_40():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_40)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_41():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_41)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_42():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_42)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_43():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_43)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_44():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_44)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_45():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_45)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_46():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_46)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_5():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_5)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_6():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_6)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_7():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_7)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_8():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_8)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_hardware_info_v9.1_9():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterHardwareInfo_v9.1_9)

    
    type = "" # type
    result = ef.get_cluster_hardware_info()

def test_get_cluster_info_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterInfo_v8.4_0)

    
    result = ef.get_cluster_info()
    assert result.cluster_info.unique_id == """4cp5""", "Died on +.cluster_info.unique_id"
    assert result.cluster_info.svip_node_id == 2, "Died on +.cluster_info.svip_node_id"
    assert result.cluster_info.uuid == UUID("9c19e0c1-f872-4c7c-8886-714969319cf0"), "Died on .cluster_info.uuid"
    assert result.cluster_info.encryption_at_rest_state == """enabled""", "Died on +.cluster_info.encryption_at_rest_state"
    assert result.cluster_info.mvip_node_id == 2, "Died on +.cluster_info.mvip_node_id"
    assert result.cluster_info.rep_count == 2, "Died on +.cluster_info.rep_count"
    assert result.cluster_info.svip == """10.117.59.247""", "Died on +.cluster_info.svip"
    assert type(result.cluster_info.attributes) is dict, "Died on .cluster_info.attributes"
    assert result.cluster_info.mvip == """10.117.57.246""", "Died on +.cluster_info.mvip"
    assert result.cluster_info.ensemble[2] == """10.117.58.18""", "Died on +.cluster_info.ensemble[2]"
    assert result.cluster_info.ensemble[1] == """10.117.58.17""", "Died on +.cluster_info.ensemble[1]"
    assert result.cluster_info.ensemble[0] == """10.117.58.16""", "Died on +.cluster_info.ensemble[0]"
    assert result.cluster_info.name == """SanityUpgradeSunnyDay-buut""", "Died on +.cluster_info.name"

def test_get_cluster_info_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterInfo_v8.6_0)

    
    result = ef.get_cluster_info()
    assert result.cluster_info.unique_id == """nbwp""", "Died on +.cluster_info.unique_id"
    assert result.cluster_info.svip_node_id == 4, "Died on +.cluster_info.svip_node_id"
    assert result.cluster_info.uuid == UUID("72c74cf2-8f23-43de-8be3-3af7b6fc0bb4"), "Died on .cluster_info.uuid"
    assert result.cluster_info.encryption_at_rest_state == """disabled""", "Died on +.cluster_info.encryption_at_rest_state"
    assert result.cluster_info.mvip_node_id == 4, "Died on +.cluster_info.mvip_node_id"
    assert result.cluster_info.rep_count == 2, "Died on +.cluster_info.rep_count"
    assert result.cluster_info.svip == """10.117.59.238""", "Died on +.cluster_info.svip"
    assert type(result.cluster_info.attributes) is dict, "Died on .cluster_info.attributes"
    assert result.cluster_info.mvip == """10.117.57.237""", "Died on +.cluster_info.mvip"
    assert result.cluster_info.ensemble[4] == """10.117.58.106""", "Died on +.cluster_info.ensemble[4]"
    assert result.cluster_info.ensemble[3] == """10.117.58.96""", "Died on +.cluster_info.ensemble[3]"
    assert result.cluster_info.ensemble[2] == """10.117.58.40""", "Died on +.cluster_info.ensemble[2]"
    assert result.cluster_info.ensemble[1] == """10.117.58.27""", "Died on +.cluster_info.ensemble[1]"
    assert result.cluster_info.ensemble[0] == """10.117.58.25""", "Died on +.cluster_info.ensemble[0]"
    assert result.cluster_info.name == """cbUAye8tUu-Ritu""", "Died on +.cluster_info.name"

def test_get_cluster_info_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterInfo_v8.7_0)

    
    result = ef.get_cluster_info()
    assert result.cluster_info.unique_id == """o263""", "Died on +.cluster_info.unique_id"
    assert result.cluster_info.svip_node_id == 2, "Died on +.cluster_info.svip_node_id"
    assert result.cluster_info.uuid == UUID("d391d1cf-bb3a-4b63-88e0-d06fb0cd4ec0"), "Died on .cluster_info.uuid"
    assert result.cluster_info.encryption_at_rest_state == """disabled""", "Died on +.cluster_info.encryption_at_rest_state"
    assert result.cluster_info.mvip_node_id == 2, "Died on +.cluster_info.mvip_node_id"
    assert result.cluster_info.rep_count == 2, "Died on +.cluster_info.rep_count"
    assert result.cluster_info.svip == """10.117.59.245""", "Died on +.cluster_info.svip"
    assert type(result.cluster_info.attributes) is dict, "Died on .cluster_info.attributes"
    assert result.cluster_info.mvip == """10.117.57.244""", "Died on +.cluster_info.mvip"
    assert result.cluster_info.ensemble[4] == """10.117.58.49""", "Died on +.cluster_info.ensemble[4]"
    assert result.cluster_info.ensemble[3] == """10.117.58.48""", "Died on +.cluster_info.ensemble[3]"
    assert result.cluster_info.ensemble[2] == """10.117.58.47""", "Died on +.cluster_info.ensemble[2]"
    assert result.cluster_info.ensemble[1] == """10.117.58.46""", "Died on +.cluster_info.ensemble[1]"
    assert result.cluster_info.ensemble[0] == """10.117.58.45""", "Died on +.cluster_info.ensemble[0]"
    assert result.cluster_info.name == """AutoTest2-3XE1""", "Died on +.cluster_info.name"

def test_get_cluster_info_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterInfo_v9.0_0)

    
    result = ef.get_cluster_info()
    assert result.cluster_info.svip_node_id == 2, "Died on +.cluster_info.svip_node_id"
    assert result.cluster_info.mvip_vlan_tag == """0""", "Died on +.cluster_info.mvip_vlan_tag"
    assert result.cluster_info.mvip == """10.117.57.243""", "Died on +.cluster_info.mvip"
    assert result.cluster_info.name == """UpgradesFR_TID4502223RainyDay-cHj7""", "Died on +.cluster_info.name"
    assert result.cluster_info.svip_interface == """Bond10G""", "Died on +.cluster_info.svip_interface"
    assert result.cluster_info.encryption_at_rest_state == """disabled""", "Died on +.cluster_info.encryption_at_rest_state"
    assert result.cluster_info.mvip_node_id == 2, "Died on +.cluster_info.mvip_node_id"
    assert result.cluster_info.mvip_interface == """Bond1G""", "Died on +.cluster_info.mvip_interface"
    assert result.cluster_info.svip == """10.117.59.244""", "Died on +.cluster_info.svip"
    assert type(result.cluster_info.attributes) is dict, "Died on .cluster_info.attributes"
    assert result.cluster_info.unique_id == """2ixx""", "Died on +.cluster_info.unique_id"
    assert result.cluster_info.rep_count == 2, "Died on +.cluster_info.rep_count"
    assert result.cluster_info.ensemble[4] == """10.117.58.103""", "Died on +.cluster_info.ensemble[4]"
    assert result.cluster_info.ensemble[3] == """10.117.58.102""", "Died on +.cluster_info.ensemble[3]"
    assert result.cluster_info.ensemble[2] == """10.117.58.100""", "Died on +.cluster_info.ensemble[2]"
    assert result.cluster_info.ensemble[1] == """10.117.58.24""", "Died on +.cluster_info.ensemble[1]"
    assert result.cluster_info.ensemble[0] == """10.117.58.6""", "Died on +.cluster_info.ensemble[0]"
    assert result.cluster_info.svip_vlan_tag == """0""", "Died on +.cluster_info.svip_vlan_tag"
    assert result.cluster_info.uuid == UUID("ebbb6370-4a27-461e-8f93-bd6c55569999"), "Died on .cluster_info.uuid"

def test_get_cluster_info_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterInfo_v9.1_0)

    
    result = ef.get_cluster_info()
    assert result.cluster_info.svip_node_id == 3, "Died on +.cluster_info.svip_node_id"
    assert result.cluster_info.mvip_vlan_tag == """0""", "Died on +.cluster_info.mvip_vlan_tag"
    assert result.cluster_info.mvip == """10.117.57.248""", "Died on +.cluster_info.mvip"
    assert result.cluster_info.name == """AutoTest2-6kyp""", "Died on +.cluster_info.name"
    assert result.cluster_info.svip_interface == """Bond10G""", "Died on +.cluster_info.svip_interface"
    assert result.cluster_info.encryption_at_rest_state == """disabled""", "Died on +.cluster_info.encryption_at_rest_state"
    assert result.cluster_info.mvip_node_id == 3, "Died on +.cluster_info.mvip_node_id"
    assert result.cluster_info.mvip_interface == """Bond1G""", "Died on +.cluster_info.mvip_interface"
    assert result.cluster_info.svip == """10.117.59.250""", "Died on +.cluster_info.svip"
    assert type(result.cluster_info.attributes) is dict, "Died on .cluster_info.attributes"
    assert result.cluster_info.unique_id == """7xpa""", "Died on +.cluster_info.unique_id"
    assert result.cluster_info.rep_count == 2, "Died on +.cluster_info.rep_count"
    assert result.cluster_info.ensemble[2] == """10.117.58.39""", "Died on +.cluster_info.ensemble[2]"
    assert result.cluster_info.ensemble[1] == """10.117.58.24""", "Died on +.cluster_info.ensemble[1]"
    assert result.cluster_info.ensemble[0] == """10.117.58.9""", "Died on +.cluster_info.ensemble[0]"
    assert result.cluster_info.svip_vlan_tag == """0""", "Died on +.cluster_info.svip_vlan_tag"
    assert result.cluster_info.uuid == UUID("2287fa84-b951-40d9-aba6-1db26e1b3c41"), "Died on .cluster_info.uuid"

def test_get_cluster_master_node_id_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterMasterNodeID_v9.1_0)

    
    result = ef.get_cluster_master_node_id()
    assert result.node_id == 4, "Died on +.node_id"

def test_get_cluster_state_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterState_v8.4_0)

    
    force = True # force
    result = ef.get_cluster_state(force,)
    assert result.state == """Available""", "Died on +.state"

def test_get_cluster_state_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterState_v8.6_0)

    
    force = True # force
    result = ef.get_cluster_state(force,)
    assert result.state == """Available""", "Died on +.state"

def test_get_cluster_state_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterState_v8.7_0)

    
    force = True # force
    result = ef.get_cluster_state(force,)
    assert result.state == """Available""", "Died on +.state"

def test_get_cluster_state_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterState_v9.0_0)

    
    force = True # force
    result = ef.get_cluster_state(force,)
    assert result.state == """Available""", "Died on +.state"

def test_get_cluster_state_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterState_v9.1_0)

    
    force = True # force
    result = ef.get_cluster_state(force,)
    assert result.state == """Available""", "Died on +.state"

def test_get_cluster_version_info_v1.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetClusterVersionInfo_v1.0_0)

    
    result = ef.get_cluster_version_info()
    assert result.cluster_version_info[3].node_version == """9.1.0.28""", "Died on +.cluster_version_info[3].node_version"
    assert result.cluster_version_info[3].node_internal_revision == """BuildType=Release Element=fluorine Release=fluorine-patch1 ReleaseShort=fluorine-patch1 Version=9.1.0.28 sfdev=9.48 Repository=fluorine-patch1 VCS=hg Revision=461c2eabc2ba Options=timing,timing BuildDate=2016-12-20T22:44:10UTC md5=eb4fabbd39c33c8cdc34a2ee699c51c6""", "Died on +.cluster_version_info[3].node_internal_revision"
    assert result.cluster_version_info[3].node_id == 4, "Died on +.cluster_version_info[3].node_id"
    assert result.cluster_version_info[2].node_version == """9.1.0.28""", "Died on +.cluster_version_info[2].node_version"
    assert result.cluster_version_info[2].node_internal_revision == """BuildType=Release Element=fluorine Release=fluorine-patch1 ReleaseShort=fluorine-patch1 Version=9.1.0.28 sfdev=9.48 Repository=fluorine-patch1 VCS=hg Revision=461c2eabc2ba Options=timing,timing BuildDate=2016-12-20T22:44:10UTC md5=eb4fabbd39c33c8cdc34a2ee699c51c6""", "Died on +.cluster_version_info[2].node_internal_revision"
    assert result.cluster_version_info[2].node_id == 3, "Died on +.cluster_version_info[2].node_id"
    assert result.cluster_version_info[1].node_version == """9.1.0.28""", "Died on +.cluster_version_info[1].node_version"
    assert result.cluster_version_info[1].node_internal_revision == """BuildType=Release Element=fluorine Release=fluorine-patch1 ReleaseShort=fluorine-patch1 Version=9.1.0.28 sfdev=9.48 Repository=fluorine-patch1 VCS=hg Revision=461c2eabc2ba Options=timing,timing BuildDate=2016-12-20T22:44:10UTC md5=eb4fabbd39c33c8cdc34a2ee699c51c6""", "Died on +.cluster_version_info[1].node_internal_revision"
    assert result.cluster_version_info[1].node_id == 2, "Died on +.cluster_version_info[1].node_id"
    assert result.cluster_version_info[0].node_version == """9.1.0.28""", "Died on +.cluster_version_info[0].node_version"
    assert result.cluster_version_info[0].node_internal_revision == """BuildType=Release Element=fluorine Release=fluorine-patch1 ReleaseShort=fluorine-patch1 Version=9.1.0.28 sfdev=9.48 Repository=fluorine-patch1 VCS=hg Revision=461c2eabc2ba Options=timing,timing BuildDate=2016-12-20T22:44:10UTC md5=eb4fabbd39c33c8cdc34a2ee699c51c6""", "Died on +.cluster_version_info[0].node_internal_revision"
    assert result.cluster_version_info[0].node_id == 1, "Died on +.cluster_version_info[0].node_id"
    assert result.software_version_info.pending_version == """9.1.0.28""", "Died on +.software_version_info.pending_version"
    assert result.software_version_info.current_version == """9.1.0.28""", "Died on +.software_version_info.current_version"
    assert result.software_version_info.node_id == 0, "Died on +.software_version_info.node_id"
    assert result.cluster_version == """9.1.0.28""", "Died on +.cluster_version"
    assert result.cluster_apiversion == """9.1""", "Died on +.cluster_apiversion"

def test_get_config_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetConfig_v9.1_0)

    
    result = ef.get_config()
    assert result.config.cluster.encryption_capable == True, "Died on +.config.cluster.encryption_capable"
    assert result.config.cluster.mipi == """eth0""", "Died on +.config.cluster.mipi"
    assert result.config.cluster.name == """rmndv0003-rtfi-0050569a5eda""", "Died on +.config.cluster.name"
    assert result.config.cluster.has_local_admin == False, "Died on +.config.cluster.has_local_admin"
    assert result.config.cluster.node_id == 0, "Died on +.config.cluster.node_id"
    assert result.config.cluster.sipi == """eth0""", "Died on +.config.cluster.sipi"
    assert result.config.cluster.state == """Available""", "Died on +.config.cluster.state"
    assert result.config.cluster.version == """9.1.0.30""", "Died on +.config.cluster.version"
    assert result.config.cluster.role == """Management""", "Died on +.config.cluster.role"
    assert result.config.cluster.cipi == """eth0""", "Died on +.config.cluster.cipi"
    assert result.config.cluster.pending_node_id == 0, "Died on +.config.cluster.pending_node_id"
    assert result.config.network.lo.status == """UpAndRunning""", "Died on +.config.network.lo.status"
    assert result.config.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.config.network.lo.mac_address_permanent"
    assert result.config.network.lo.up_and_running == True, "Died on +.config.network.lo.up_and_running"
    assert result.config.network.lo.family == """inet""", "Died on +.config.network.lo.family"
    assert result.config.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.config.network.lo.mac_address"
    assert result.config.network.lo.auto == True, "Died on +.config.network.lo.auto"
    assert result.config.network.lo.method == """loopback""", "Died on +.config.network.lo.method"
    assert result.config.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.config.network.lo.physical.mac_address_permanent"
    assert result.config.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.config.network.lo.physical.mac_address"
    assert result.config.network.lo.physical.up_and_running == True, "Died on +.config.network.lo.physical.up_and_running"
    assert result.config.network.lo.physical.network == """N/A""", "Died on +.config.network.lo.physical.network"
    assert result.config.network.lo.physical.netmask == """N/A""", "Died on +.config.network.lo.physical.netmask"
    assert result.config.network.lo.physical.address == """0.0.0.0""", "Died on +.config.network.lo.physical.address"
    assert result.config.network.eth0.status == """UpAndRunning""", "Died on +.config.network.eth0.status"
    assert result.config.network.eth0.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.config.network.eth0.mac_address_permanent"
    assert result.config.network.eth0.up_and_running == True, "Died on +.config.network.eth0.up_and_running"
    assert result.config.network.eth0.symmetric_route_rules[0] == """ip route add default via 10.117.57.254""", "Died on +.config.network.eth0.symmetric_route_rules[0]"
    assert result.config.network.eth0.family == """inet""", "Died on +.config.network.eth0.family"
    assert result.config.network.eth0.mac_address == """00:50:56:9a:5e:da""", "Died on +.config.network.eth0.mac_address"
    assert result.config.network.eth0.dns_search == """den.solidfire.net., one.den.solidfire.net., solidfire.net., ten.den.solidfire.net.""", "Died on +.config.network.eth0.dns_search"
    assert result.config.network.eth0.auto == True, "Died on +.config.network.eth0.auto"
    assert result.config.network.eth0.dns_nameservers == """10.116.133.40, 10.117.30.40""", "Died on +.config.network.eth0.dns_nameservers"
    assert result.config.network.eth0.mtu == """1500""", "Died on +.config.network.eth0.mtu"
    assert result.config.network.eth0.netmask == """255.255.254.0""", "Died on +.config.network.eth0.netmask"
    assert result.config.network.eth0.gateway == """10.117.57.254""", "Died on +.config.network.eth0.gateway"
    assert result.config.network.eth0._default == True, "Died on +.config.network.eth0._default"
    assert result.config.network.eth0.address == """10.117.57.188""", "Died on +.config.network.eth0.address"
    assert result.config.network.eth0.method == """dhcp""", "Died on +.config.network.eth0.method"
    assert result.config.network.eth0.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.config.network.eth0.physical.mac_address_permanent"
    assert result.config.network.eth0.physical.mac_address == """00:50:56:9a:5e:da""", "Died on +.config.network.eth0.physical.mac_address"
    assert result.config.network.eth0.physical.up_and_running == True, "Died on +.config.network.eth0.physical.up_and_running"
    assert result.config.network.eth0.physical.network == """N/A""", "Died on +.config.network.eth0.physical.network"
    assert result.config.network.eth0.physical.mtu == """1500""", "Died on +.config.network.eth0.physical.mtu"
    assert result.config.network.eth0.physical.netmask == """255.255.254.0""", "Died on +.config.network.eth0.physical.netmask"
    assert result.config.network.eth0.physical.address == """10.117.57.188""", "Died on +.config.network.eth0.physical.address"

def test_get_drive_config_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetDriveConfig_v8.4_0)

    
    result = ef.get_drive_config()
    assert result.drive_config.num_slice_actual == 1, "Died on +.drive_config.num_slice_actual"
    assert result.drive_config.num_total_expected == 10, "Died on +.drive_config.num_total_expected"
    assert result.drive_config.num_slice_expected == 1, "Died on +.drive_config.num_slice_expected"
    assert result.drive_config.drives[9].security_locked == False, "Died on +.drive_config.drives[9].security_locked"
    assert result.drive_config.drives[9].serial == """0003A75C""", "Died on +.drive_config.drives[9].serial"
    assert result.drive_config.drives[9].size == 960197124096, "Died on +.drive_config.drives[9].size"
    assert result.drive_config.drives[9].slot == 9, "Died on +.drive_config.drives[9].slot"
    assert result.drive_config.drives[9].uuid == UUID("d87e82f8-f3aa-2e00-2572-6e6242d52acd"), "Died on .drive_config.drives[9].uuid"
    assert result.drive_config.drives[9].dev_path == """/dev/slot9""", "Died on +.drive_config.drives[9].dev_path"
    assert result.drive_config.drives[9].version == """ZZ37RC93""", "Died on +.drive_config.drives[9].version"
    assert result.drive_config.drives[9].security_supported == True, "Died on +.drive_config.drives[9].security_supported"
    assert result.drive_config.drives[9].drive_type == """Block""", "Died on +.drive_config.drives[9].drive_type"
    assert result.drive_config.drives[9].product == """SDLFNCAR-960G-1HA2""", "Died on +.drive_config.drives[9].product"
    assert result.drive_config.drives[9].vendor == """SanDisk""", "Died on +.drive_config.drives[9].vendor"
    assert result.drive_config.drives[9].canonical_name == """sdd""", "Died on +.drive_config.drives[9].canonical_name"
    assert result.drive_config.drives[9].security_frozen == False, "Died on +.drive_config.drives[9].security_frozen"
    assert result.drive_config.drives[9].connected == True, "Died on +.drive_config.drives[9].connected"
    assert result.drive_config.drives[9].security_enabled == False, "Died on +.drive_config.drives[9].security_enabled"
    assert result.drive_config.drives[9].path == """/dev/sdd""", "Died on +.drive_config.drives[9].path"
    assert result.drive_config.drives[9].scsi_state == """Running""", "Died on +.drive_config.drives[9].scsi_state"
    assert result.drive_config.drives[9].scsi_compat_id == """scsi-SATA_SDLFNCAR-960G-1_0003A75C""", "Died on +.drive_config.drives[9].scsi_compat_id"
    assert result.drive_config.drives[9].name == """scsi-SATA_SDLFNCAR-960G-1_0003A75C""", "Died on +.drive_config.drives[9].name"
    assert result.drive_config.drives[9].dev == 2096, "Died on +.drive_config.drives[9].dev"
    assert result.drive_config.drives[9].security_at_maximum == False, "Died on +.drive_config.drives[9].security_at_maximum"
    assert result.drive_config.drives[9].path_link == """/dev/slot9""", "Died on +.drive_config.drives[9].path_link"
    assert result.drive_config.drives[9].smart_ssd_write_capable == False, "Died on +.drive_config.drives[9].smart_ssd_write_capable"
    assert result.drive_config.drives[8].security_locked == False, "Died on +.drive_config.drives[8].security_locked"
    assert result.drive_config.drives[8].serial == """000394C4""", "Died on +.drive_config.drives[8].serial"
    assert result.drive_config.drives[8].size == 960197124096, "Died on +.drive_config.drives[8].size"
    assert result.drive_config.drives[8].slot == 8, "Died on +.drive_config.drives[8].slot"
    assert result.drive_config.drives[8].uuid == UUID("8dbc36da-e1ae-8f89-f0b1-dfee3bd36aa1"), "Died on .drive_config.drives[8].uuid"
    assert result.drive_config.drives[8].dev_path == """/dev/slot8""", "Died on +.drive_config.drives[8].dev_path"
    assert result.drive_config.drives[8].version == """ZZ37RC93""", "Died on +.drive_config.drives[8].version"
    assert result.drive_config.drives[8].security_supported == True, "Died on +.drive_config.drives[8].security_supported"
    assert result.drive_config.drives[8].drive_type == """Block""", "Died on +.drive_config.drives[8].drive_type"
    assert result.drive_config.drives[8].product == """SDLFNCAR-960G-1HA2""", "Died on +.drive_config.drives[8].product"
    assert result.drive_config.drives[8].vendor == """SanDisk""", "Died on +.drive_config.drives[8].vendor"
    assert result.drive_config.drives[8].canonical_name == """sdf""", "Died on +.drive_config.drives[8].canonical_name"
    assert result.drive_config.drives[8].security_frozen == False, "Died on +.drive_config.drives[8].security_frozen"
    assert result.drive_config.drives[8].connected == True, "Died on +.drive_config.drives[8].connected"
    assert result.drive_config.drives[8].security_enabled == False, "Died on +.drive_config.drives[8].security_enabled"
    assert result.drive_config.drives[8].path == """/dev/sdf""", "Died on +.drive_config.drives[8].path"
    assert result.drive_config.drives[8].scsi_state == """Running""", "Died on +.drive_config.drives[8].scsi_state"
    assert result.drive_config.drives[8].scsi_compat_id == """scsi-SATA_SDLFNCAR-960G-1_000394C4""", "Died on +.drive_config.drives[8].scsi_compat_id"
    assert result.drive_config.drives[8].name == """scsi-SATA_SDLFNCAR-960G-1_000394C4""", "Died on +.drive_config.drives[8].name"
    assert result.drive_config.drives[8].dev == 2128, "Died on +.drive_config.drives[8].dev"
    assert result.drive_config.drives[8].security_at_maximum == False, "Died on +.drive_config.drives[8].security_at_maximum"
    assert result.drive_config.drives[8].path_link == """/dev/slot8""", "Died on +.drive_config.drives[8].path_link"
    assert result.drive_config.drives[8].smart_ssd_write_capable == False, "Died on +.drive_config.drives[8].smart_ssd_write_capable"
    assert result.drive_config.drives[7].security_locked == False, "Died on +.drive_config.drives[7].security_locked"
    assert result.drive_config.drives[7].serial == """00039472""", "Died on +.drive_config.drives[7].serial"
    assert result.drive_config.drives[7].size == 960197124096, "Died on +.drive_config.drives[7].size"
    assert result.drive_config.drives[7].slot == 7, "Died on +.drive_config.drives[7].slot"
    assert result.drive_config.drives[7].uuid == UUID("ea7a0b1d-df84-3dcf-89bd-5f6ffaa30fd2"), "Died on .drive_config.drives[7].uuid"
    assert result.drive_config.drives[7].dev_path == """/dev/slot7""", "Died on +.drive_config.drives[7].dev_path"
    assert result.drive_config.drives[7].version == """ZZ37RC93""", "Died on +.drive_config.drives[7].version"
    assert result.drive_config.drives[7].security_supported == True, "Died on +.drive_config.drives[7].security_supported"
    assert result.drive_config.drives[7].drive_type == """Block""", "Died on +.drive_config.drives[7].drive_type"
    assert result.drive_config.drives[7].product == """SDLFNCAR-960G-1HA2""", "Died on +.drive_config.drives[7].product"
    assert result.drive_config.drives[7].vendor == """SanDisk""", "Died on +.drive_config.drives[7].vendor"
    assert result.drive_config.drives[7].canonical_name == """sde""", "Died on +.drive_config.drives[7].canonical_name"
    assert result.drive_config.drives[7].security_frozen == False, "Died on +.drive_config.drives[7].security_frozen"
    assert result.drive_config.drives[7].connected == True, "Died on +.drive_config.drives[7].connected"
    assert result.drive_config.drives[7].security_enabled == False, "Died on +.drive_config.drives[7].security_enabled"
    assert result.drive_config.drives[7].path == """/dev/sde""", "Died on +.drive_config.drives[7].path"
    assert result.drive_config.drives[7].scsi_state == """Running""", "Died on +.drive_config.drives[7].scsi_state"
    assert result.drive_config.drives[7].scsi_compat_id == """scsi-SATA_SDLFNCAR-960G-1_00039472""", "Died on +.drive_config.drives[7].scsi_compat_id"
    assert result.drive_config.drives[7].name == """scsi-SATA_SDLFNCAR-960G-1_00039472""", "Died on +.drive_config.drives[7].name"
    assert result.drive_config.drives[7].dev == 2112, "Died on +.drive_config.drives[7].dev"
    assert result.drive_config.drives[7].security_at_maximum == False, "Died on +.drive_config.drives[7].security_at_maximum"
    assert result.drive_config.drives[7].path_link == """/dev/slot7""", "Died on +.drive_config.drives[7].path_link"
    assert result.drive_config.drives[7].smart_ssd_write_capable == False, "Died on +.drive_config.drives[7].smart_ssd_write_capable"
    assert result.drive_config.drives[6].security_locked == False, "Died on +.drive_config.drives[6].security_locked"
    assert result.drive_config.drives[6].serial == """000398A3""", "Died on +.drive_config.drives[6].serial"
    assert result.drive_config.drives[6].size == 960197124096, "Died on +.drive_config.drives[6].size"
    assert result.drive_config.drives[6].slot == 6, "Died on +.drive_config.drives[6].slot"
    assert result.drive_config.drives[6].uuid == UUID("1d9140c9-0933-1785-e9e1-2d213f0af226"), "Died on .drive_config.drives[6].uuid"
    assert result.drive_config.drives[6].dev_path == """/dev/slot6""", "Died on +.drive_config.drives[6].dev_path"
    assert result.drive_config.drives[6].version == """ZZ37RC93""", "Died on +.drive_config.drives[6].version"
    assert result.drive_config.drives[6].security_supported == True, "Died on +.drive_config.drives[6].security_supported"
    assert result.drive_config.drives[6].drive_type == """Block""", "Died on +.drive_config.drives[6].drive_type"
    assert result.drive_config.drives[6].product == """SDLFNCAR-960G-1HA2""", "Died on +.drive_config.drives[6].product"
    assert result.drive_config.drives[6].vendor == """SanDisk""", "Died on +.drive_config.drives[6].vendor"
    assert result.drive_config.drives[6].canonical_name == """sdc""", "Died on +.drive_config.drives[6].canonical_name"
    assert result.drive_config.drives[6].security_frozen == False, "Died on +.drive_config.drives[6].security_frozen"
    assert result.drive_config.drives[6].connected == True, "Died on +.drive_config.drives[6].connected"
    assert result.drive_config.drives[6].security_enabled == False, "Died on +.drive_config.drives[6].security_enabled"
    assert result.drive_config.drives[6].path == """/dev/sdc""", "Died on +.drive_config.drives[6].path"
    assert result.drive_config.drives[6].scsi_state == """Running""", "Died on +.drive_config.drives[6].scsi_state"
    assert result.drive_config.drives[6].scsi_compat_id == """scsi-SATA_SDLFNCAR-960G-1_000398A3""", "Died on +.drive_config.drives[6].scsi_compat_id"
    assert result.drive_config.drives[6].name == """scsi-SATA_SDLFNCAR-960G-1_000398A3""", "Died on +.drive_config.drives[6].name"
    assert result.drive_config.drives[6].dev == 2080, "Died on +.drive_config.drives[6].dev"
    assert result.drive_config.drives[6].security_at_maximum == False, "Died on +.drive_config.drives[6].security_at_maximum"
    assert result.drive_config.drives[6].path_link == """/dev/slot6""", "Died on +.drive_config.drives[6].path_link"
    assert result.drive_config.drives[6].smart_ssd_write_capable == False, "Died on +.drive_config.drives[6].smart_ssd_write_capable"
    assert result.drive_config.drives[5].security_locked == False, "Died on +.drive_config.drives[5].security_locked"
    assert result.drive_config.drives[5].serial == """000344A9""", "Died on +.drive_config.drives[5].serial"
    assert result.drive_config.drives[5].size == 960197124096, "Died on +.drive_config.drives[5].size"
    assert result.drive_config.drives[5].slot == 5, "Died on +.drive_config.drives[5].slot"
    assert result.drive_config.drives[5].uuid == UUID("7630172b-ab84-3b7d-b351-9530a3126148"), "Died on .drive_config.drives[5].uuid"
    assert result.drive_config.drives[5].dev_path == """/dev/slot5""", "Died on +.drive_config.drives[5].dev_path"
    assert result.drive_config.drives[5].version == """ZZ37RC93""", "Died on +.drive_config.drives[5].version"
    assert result.drive_config.drives[5].security_supported == True, "Died on +.drive_config.drives[5].security_supported"
    assert result.drive_config.drives[5].drive_type == """Block""", "Died on +.drive_config.drives[5].drive_type"
    assert result.drive_config.drives[5].product == """SDLFNCAR-960G-1HA2""", "Died on +.drive_config.drives[5].product"
    assert result.drive_config.drives[5].vendor == """SanDisk""", "Died on +.drive_config.drives[5].vendor"
    assert result.drive_config.drives[5].canonical_name == """sdb""", "Died on +.drive_config.drives[5].canonical_name"
    assert result.drive_config.drives[5].security_frozen == False, "Died on +.drive_config.drives[5].security_frozen"
    assert result.drive_config.drives[5].connected == True, "Died on +.drive_config.drives[5].connected"
    assert result.drive_config.drives[5].security_enabled == False, "Died on +.drive_config.drives[5].security_enabled"
    assert result.drive_config.drives[5].path == """/dev/sdb""", "Died on +.drive_config.drives[5].path"
    assert result.drive_config.drives[5].scsi_state == """Running""", "Died on +.drive_config.drives[5].scsi_state"
    assert result.drive_config.drives[5].scsi_compat_id == """scsi-SATA_SDLFNCAR-960G-1_000344A9""", "Died on +.drive_config.drives[5].scsi_compat_id"
    assert result.drive_config.drives[5].name == """scsi-SATA_SDLFNCAR-960G-1_000344A9""", "Died on +.drive_config.drives[5].name"
    assert result.drive_config.drives[5].dev == 2064, "Died on +.drive_config.drives[5].dev"
    assert result.drive_config.drives[5].security_at_maximum == False, "Died on +.drive_config.drives[5].security_at_maximum"
    assert result.drive_config.drives[5].path_link == """/dev/slot5""", "Died on +.drive_config.drives[5].path_link"
    assert result.drive_config.drives[5].smart_ssd_write_capable == False, "Died on +.drive_config.drives[5].smart_ssd_write_capable"
    assert result.drive_config.drives[4].security_locked == False, "Died on +.drive_config.drives[4].security_locked"
    assert result.drive_config.drives[4].serial == """00035926""", "Died on +.drive_config.drives[4].serial"
    assert result.drive_config.drives[4].size == 960197124096, "Died on +.drive_config.drives[4].size"
    assert result.drive_config.drives[4].slot == 4, "Died on +.drive_config.drives[4].slot"
    assert result.drive_config.drives[4].uuid == UUID("9374a784-3213-3940-1fc5-901017f850d1"), "Died on .drive_config.drives[4].uuid"
    assert result.drive_config.drives[4].dev_path == """/dev/slot4""", "Died on +.drive_config.drives[4].dev_path"
    assert result.drive_config.drives[4].version == """ZZ37RC93""", "Died on +.drive_config.drives[4].version"
    assert result.drive_config.drives[4].security_supported == True, "Died on +.drive_config.drives[4].security_supported"
    assert result.drive_config.drives[4].drive_type == """Block""", "Died on +.drive_config.drives[4].drive_type"
    assert result.drive_config.drives[4].product == """SDLFNCAR-960G-1HA2""", "Died on +.drive_config.drives[4].product"
    assert result.drive_config.drives[4].vendor == """SanDisk""", "Died on +.drive_config.drives[4].vendor"
    assert result.drive_config.drives[4].canonical_name == """sdj""", "Died on +.drive_config.drives[4].canonical_name"
    assert result.drive_config.drives[4].security_frozen == False, "Died on +.drive_config.drives[4].security_frozen"
    assert result.drive_config.drives[4].connected == True, "Died on +.drive_config.drives[4].connected"
    assert result.drive_config.drives[4].security_enabled == False, "Died on +.drive_config.drives[4].security_enabled"
    assert result.drive_config.drives[4].path == """/dev/sdj""", "Died on +.drive_config.drives[4].path"
    assert result.drive_config.drives[4].scsi_state == """Running""", "Died on +.drive_config.drives[4].scsi_state"
    assert result.drive_config.drives[4].scsi_compat_id == """scsi-SATA_SDLFNCAR-960G-1_00035926""", "Died on +.drive_config.drives[4].scsi_compat_id"
    assert result.drive_config.drives[4].name == """scsi-SATA_SDLFNCAR-960G-1_00035926""", "Died on +.drive_config.drives[4].name"
    assert result.drive_config.drives[4].dev == 2192, "Died on +.drive_config.drives[4].dev"
    assert result.drive_config.drives[4].security_at_maximum == False, "Died on +.drive_config.drives[4].security_at_maximum"
    assert result.drive_config.drives[4].path_link == """/dev/slot4""", "Died on +.drive_config.drives[4].path_link"
    assert result.drive_config.drives[4].smart_ssd_write_capable == False, "Died on +.drive_config.drives[4].smart_ssd_write_capable"
    assert result.drive_config.drives[3].security_locked == False, "Died on +.drive_config.drives[3].security_locked"
    assert result.drive_config.drives[3].serial == """000349B4""", "Died on +.drive_config.drives[3].serial"
    assert result.drive_config.drives[3].size == 960197124096, "Died on +.drive_config.drives[3].size"
    assert result.drive_config.drives[3].slot == 3, "Died on +.drive_config.drives[3].slot"
    assert result.drive_config.drives[3].uuid == UUID("f2156277-eeb7-db1d-f4f0-8582851133a4"), "Died on .drive_config.drives[3].uuid"
    assert result.drive_config.drives[3].dev_path == """/dev/slot3""", "Died on +.drive_config.drives[3].dev_path"
    assert result.drive_config.drives[3].version == """ZZ37RC93""", "Died on +.drive_config.drives[3].version"
    assert result.drive_config.drives[3].security_supported == True, "Died on +.drive_config.drives[3].security_supported"
    assert result.drive_config.drives[3].drive_type == """Block""", "Died on +.drive_config.drives[3].drive_type"
    assert result.drive_config.drives[3].product == """SDLFNCAR-960G-1HA2""", "Died on +.drive_config.drives[3].product"
    assert result.drive_config.drives[3].vendor == """SanDisk""", "Died on +.drive_config.drives[3].vendor"
    assert result.drive_config.drives[3].canonical_name == """sdh""", "Died on +.drive_config.drives[3].canonical_name"
    assert result.drive_config.drives[3].security_frozen == False, "Died on +.drive_config.drives[3].security_frozen"
    assert result.drive_config.drives[3].connected == True, "Died on +.drive_config.drives[3].connected"
    assert result.drive_config.drives[3].security_enabled == False, "Died on +.drive_config.drives[3].security_enabled"
    assert result.drive_config.drives[3].path == """/dev/sdh""", "Died on +.drive_config.drives[3].path"
    assert result.drive_config.drives[3].scsi_state == """Running""", "Died on +.drive_config.drives[3].scsi_state"
    assert result.drive_config.drives[3].scsi_compat_id == """scsi-SATA_SDLFNCAR-960G-1_000349B4""", "Died on +.drive_config.drives[3].scsi_compat_id"
    assert result.drive_config.drives[3].name == """scsi-SATA_SDLFNCAR-960G-1_000349B4""", "Died on +.drive_config.drives[3].name"
    assert result.drive_config.drives[3].dev == 2160, "Died on +.drive_config.drives[3].dev"
    assert result.drive_config.drives[3].security_at_maximum == False, "Died on +.drive_config.drives[3].security_at_maximum"
    assert result.drive_config.drives[3].path_link == """/dev/slot3""", "Died on +.drive_config.drives[3].path_link"
    assert result.drive_config.drives[3].smart_ssd_write_capable == False, "Died on +.drive_config.drives[3].smart_ssd_write_capable"
    assert result.drive_config.drives[2].security_locked == False, "Died on +.drive_config.drives[2].security_locked"
    assert result.drive_config.drives[2].serial == """0003988B""", "Died on +.drive_config.drives[2].serial"
    assert result.drive_config.drives[2].size == 960197124096, "Died on +.drive_config.drives[2].size"
    assert result.drive_config.drives[2].slot == 2, "Died on +.drive_config.drives[2].slot"
    assert result.drive_config.drives[2].uuid == UUID("f78bb23c-04d3-c056-c02b-45b8d85c8102"), "Died on .drive_config.drives[2].uuid"
    assert result.drive_config.drives[2].dev_path == """/dev/slot2""", "Died on +.drive_config.drives[2].dev_path"
    assert result.drive_config.drives[2].version == """ZZ37RC93""", "Died on +.drive_config.drives[2].version"
    assert result.drive_config.drives[2].security_supported == True, "Died on +.drive_config.drives[2].security_supported"
    assert result.drive_config.drives[2].drive_type == """Block""", "Died on +.drive_config.drives[2].drive_type"
    assert result.drive_config.drives[2].product == """SDLFNCAR-960G-1HA2""", "Died on +.drive_config.drives[2].product"
    assert result.drive_config.drives[2].vendor == """SanDisk""", "Died on +.drive_config.drives[2].vendor"
    assert result.drive_config.drives[2].canonical_name == """sdk""", "Died on +.drive_config.drives[2].canonical_name"
    assert result.drive_config.drives[2].security_frozen == False, "Died on +.drive_config.drives[2].security_frozen"
    assert result.drive_config.drives[2].connected == True, "Died on +.drive_config.drives[2].connected"
    assert result.drive_config.drives[2].security_enabled == False, "Died on +.drive_config.drives[2].security_enabled"
    assert result.drive_config.drives[2].path == """/dev/sdk""", "Died on +.drive_config.drives[2].path"
    assert result.drive_config.drives[2].scsi_state == """Running""", "Died on +.drive_config.drives[2].scsi_state"
    assert result.drive_config.drives[2].scsi_compat_id == """scsi-SATA_SDLFNCAR-960G-1_0003988B""", "Died on +.drive_config.drives[2].scsi_compat_id"
    assert result.drive_config.drives[2].name == """scsi-SATA_SDLFNCAR-960G-1_0003988B""", "Died on +.drive_config.drives[2].name"
    assert result.drive_config.drives[2].dev == 2208, "Died on +.drive_config.drives[2].dev"
    assert result.drive_config.drives[2].security_at_maximum == False, "Died on +.drive_config.drives[2].security_at_maximum"
    assert result.drive_config.drives[2].path_link == """/dev/slot2""", "Died on +.drive_config.drives[2].path_link"
    assert result.drive_config.drives[2].smart_ssd_write_capable == False, "Died on +.drive_config.drives[2].smart_ssd_write_capable"
    assert result.drive_config.drives[1].security_locked == False, "Died on +.drive_config.drives[1].security_locked"
    assert result.drive_config.drives[1].serial == """000360A7""", "Died on +.drive_config.drives[1].serial"
    assert result.drive_config.drives[1].size == 960197124096, "Died on +.drive_config.drives[1].size"
    assert result.drive_config.drives[1].slot == 1, "Died on +.drive_config.drives[1].slot"
    assert result.drive_config.drives[1].uuid == UUID("de23bb89-de2c-48c3-cd99-f8049bcfa386"), "Died on .drive_config.drives[1].uuid"
    assert result.drive_config.drives[1].dev_path == """/dev/slot1""", "Died on +.drive_config.drives[1].dev_path"
    assert result.drive_config.drives[1].version == """ZZ37RC93""", "Died on +.drive_config.drives[1].version"
    assert result.drive_config.drives[1].security_supported == True, "Died on +.drive_config.drives[1].security_supported"
    assert result.drive_config.drives[1].drive_type == """Block""", "Died on +.drive_config.drives[1].drive_type"
    assert result.drive_config.drives[1].product == """SDLFNCAR-960G-1HA2""", "Died on +.drive_config.drives[1].product"
    assert result.drive_config.drives[1].vendor == """SanDisk""", "Died on +.drive_config.drives[1].vendor"
    assert result.drive_config.drives[1].canonical_name == """sdi""", "Died on +.drive_config.drives[1].canonical_name"
    assert result.drive_config.drives[1].security_frozen == False, "Died on +.drive_config.drives[1].security_frozen"
    assert result.drive_config.drives[1].connected == True, "Died on +.drive_config.drives[1].connected"
    assert result.drive_config.drives[1].security_enabled == False, "Died on +.drive_config.drives[1].security_enabled"
    assert result.drive_config.drives[1].path == """/dev/sdi""", "Died on +.drive_config.drives[1].path"
    assert result.drive_config.drives[1].scsi_state == """Running""", "Died on +.drive_config.drives[1].scsi_state"
    assert result.drive_config.drives[1].scsi_compat_id == """scsi-SATA_SDLFNCAR-960G-1_000360A7""", "Died on +.drive_config.drives[1].scsi_compat_id"
    assert result.drive_config.drives[1].name == """scsi-SATA_SDLFNCAR-960G-1_000360A7""", "Died on +.drive_config.drives[1].name"
    assert result.drive_config.drives[1].dev == 2176, "Died on +.drive_config.drives[1].dev"
    assert result.drive_config.drives[1].security_at_maximum == False, "Died on +.drive_config.drives[1].security_at_maximum"
    assert result.drive_config.drives[1].path_link == """/dev/slot1""", "Died on +.drive_config.drives[1].path_link"
    assert result.drive_config.drives[1].smart_ssd_write_capable == False, "Died on +.drive_config.drives[1].smart_ssd_write_capable"
    assert result.drive_config.drives[0].security_locked == False, "Died on +.drive_config.drives[0].security_locked"
    assert result.drive_config.drives[0].serial == """202BCB1A""", "Died on +.drive_config.drives[0].serial"
    assert result.drive_config.drives[0].size == 960197124096, "Died on +.drive_config.drives[0].size"
    assert result.drive_config.drives[0].slot == 0, "Died on +.drive_config.drives[0].slot"
    assert result.drive_config.drives[0].uuid == UUID("566d8326-e86c-7567-5a02-fb111605bfd3"), "Died on .drive_config.drives[0].uuid"
    assert result.drive_config.drives[0].dev_path == """/dev/slot0""", "Died on +.drive_config.drives[0].dev_path"
    assert result.drive_config.drives[0].version == """ZZ37RC93""", "Died on +.drive_config.drives[0].version"
    assert result.drive_config.drives[0].security_supported == True, "Died on +.drive_config.drives[0].security_supported"
    assert result.drive_config.drives[0].drive_type == """Slice""", "Died on +.drive_config.drives[0].drive_type"
    assert result.drive_config.drives[0].product == """SDLFNCAR-960G-1HA2""", "Died on +.drive_config.drives[0].product"
    assert result.drive_config.drives[0].vendor == """SanDisk""", "Died on +.drive_config.drives[0].vendor"
    assert result.drive_config.drives[0].canonical_name == """sdg""", "Died on +.drive_config.drives[0].canonical_name"
    assert result.drive_config.drives[0].security_frozen == False, "Died on +.drive_config.drives[0].security_frozen"
    assert result.drive_config.drives[0].connected == True, "Died on +.drive_config.drives[0].connected"
    assert result.drive_config.drives[0].security_enabled == False, "Died on +.drive_config.drives[0].security_enabled"
    assert result.drive_config.drives[0].path == """/dev/sdg""", "Died on +.drive_config.drives[0].path"
    assert result.drive_config.drives[0].scsi_state == """Running""", "Died on +.drive_config.drives[0].scsi_state"
    assert result.drive_config.drives[0].scsi_compat_id == """scsi-SATA_SDLFNCAR-960G-1_202BCB1A""", "Died on +.drive_config.drives[0].scsi_compat_id"
    assert result.drive_config.drives[0].name == """scsi-SATA_SDLFNCAR-960G-1_202BCB1A""", "Died on +.drive_config.drives[0].name"
    assert result.drive_config.drives[0].dev == 2144, "Died on +.drive_config.drives[0].dev"
    assert result.drive_config.drives[0].security_at_maximum == False, "Died on +.drive_config.drives[0].security_at_maximum"
    assert result.drive_config.drives[0].path_link == """/dev/slot0""", "Died on +.drive_config.drives[0].path_link"
    assert result.drive_config.drives[0].smart_ssd_write_capable == False, "Died on +.drive_config.drives[0].smart_ssd_write_capable"
    assert result.drive_config.num_block_actual == 9, "Died on +.drive_config.num_block_actual"
    assert result.drive_config.num_total_actual == 10, "Died on +.drive_config.num_total_actual"
    assert result.drive_config.num_block_expected == 9, "Died on +.drive_config.num_block_expected"

def test_get_drive_config_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetDriveConfig_v8.6_0)

    
    result = ef.get_drive_config()
    assert result.drive_config.num_slice_actual == 1, "Died on +.drive_config.num_slice_actual"
    assert result.drive_config.num_total_expected == 10, "Died on +.drive_config.num_total_expected"
    assert result.drive_config.num_slice_expected == 1, "Died on +.drive_config.num_slice_expected"
    assert result.drive_config.drives[9].security_locked == False, "Died on +.drive_config.drives[9].security_locked"
    assert result.drive_config.drives[9].serial == """S1M9NYAFB00363""", "Died on +.drive_config.drives[9].serial"
    assert result.drive_config.drives[9].size == 240057409536, "Died on +.drive_config.drives[9].size"
    assert result.drive_config.drives[9].slot == 9, "Died on +.drive_config.drives[9].slot"
    assert result.drive_config.drives[9].uuid == UUID("0c811f75-c36b-f18c-32b5-42f7044c5187"), "Died on .drive_config.drives[9].uuid"
    assert result.drive_config.drives[9].dev_path == """/dev/slot9""", "Died on +.drive_config.drives[9].dev_path"
    assert result.drive_config.drives[9].version == """EXT1303Q""", "Died on +.drive_config.drives[9].version"
    assert result.drive_config.drives[9].security_supported == True, "Died on +.drive_config.drives[9].security_supported"
    assert result.drive_config.drives[9].drive_type == """Block""", "Died on +.drive_config.drives[9].drive_type"
    assert result.drive_config.drives[9].product == """SAMSUNG MZ7GE240HMGR-00003""", "Died on +.drive_config.drives[9].product"
    assert result.drive_config.drives[9].vendor == """Samsung""", "Died on +.drive_config.drives[9].vendor"
    assert result.drive_config.drives[9].canonical_name == """sdd""", "Died on +.drive_config.drives[9].canonical_name"
    assert result.drive_config.drives[9].security_frozen == False, "Died on +.drive_config.drives[9].security_frozen"
    assert result.drive_config.drives[9].connected == True, "Died on +.drive_config.drives[9].connected"
    assert result.drive_config.drives[9].security_enabled == False, "Died on +.drive_config.drives[9].security_enabled"
    assert result.drive_config.drives[9].path == """/dev/sdd""", "Died on +.drive_config.drives[9].path"
    assert result.drive_config.drives[9].scsi_state == """Running""", "Died on +.drive_config.drives[9].scsi_state"
    assert result.drive_config.drives[9].scsi_compat_id == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAFB00363""", "Died on +.drive_config.drives[9].scsi_compat_id"
    assert result.drive_config.drives[9].name == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAFB00363""", "Died on +.drive_config.drives[9].name"
    assert result.drive_config.drives[9].dev == 2096, "Died on +.drive_config.drives[9].dev"
    assert result.drive_config.drives[9].security_at_maximum == False, "Died on +.drive_config.drives[9].security_at_maximum"
    assert result.drive_config.drives[9].path_link == """/dev/slot9""", "Died on +.drive_config.drives[9].path_link"
    assert result.drive_config.drives[9].smart_ssd_write_capable == False, "Died on +.drive_config.drives[9].smart_ssd_write_capable"
    assert result.drive_config.drives[8].security_locked == False, "Died on +.drive_config.drives[8].security_locked"
    assert result.drive_config.drives[8].serial == """S1M9NYAFB00335""", "Died on +.drive_config.drives[8].serial"
    assert result.drive_config.drives[8].size == 240057409536, "Died on +.drive_config.drives[8].size"
    assert result.drive_config.drives[8].slot == 8, "Died on +.drive_config.drives[8].slot"
    assert result.drive_config.drives[8].uuid == UUID("b7a8b5cf-d41d-3209-0bb4-f1c6a7a8353b"), "Died on .drive_config.drives[8].uuid"
    assert result.drive_config.drives[8].dev_path == """/dev/slot8""", "Died on +.drive_config.drives[8].dev_path"
    assert result.drive_config.drives[8].version == """EXT1303Q""", "Died on +.drive_config.drives[8].version"
    assert result.drive_config.drives[8].security_supported == True, "Died on +.drive_config.drives[8].security_supported"
    assert result.drive_config.drives[8].drive_type == """Block""", "Died on +.drive_config.drives[8].drive_type"
    assert result.drive_config.drives[8].product == """SAMSUNG MZ7GE240HMGR-00003""", "Died on +.drive_config.drives[8].product"
    assert result.drive_config.drives[8].vendor == """Samsung""", "Died on +.drive_config.drives[8].vendor"
    assert result.drive_config.drives[8].canonical_name == """sdf""", "Died on +.drive_config.drives[8].canonical_name"
    assert result.drive_config.drives[8].security_frozen == False, "Died on +.drive_config.drives[8].security_frozen"
    assert result.drive_config.drives[8].connected == True, "Died on +.drive_config.drives[8].connected"
    assert result.drive_config.drives[8].security_enabled == False, "Died on +.drive_config.drives[8].security_enabled"
    assert result.drive_config.drives[8].path == """/dev/sdf""", "Died on +.drive_config.drives[8].path"
    assert result.drive_config.drives[8].scsi_state == """Running""", "Died on +.drive_config.drives[8].scsi_state"
    assert result.drive_config.drives[8].scsi_compat_id == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAFB00335""", "Died on +.drive_config.drives[8].scsi_compat_id"
    assert result.drive_config.drives[8].name == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAFB00335""", "Died on +.drive_config.drives[8].name"
    assert result.drive_config.drives[8].dev == 2128, "Died on +.drive_config.drives[8].dev"
    assert result.drive_config.drives[8].security_at_maximum == False, "Died on +.drive_config.drives[8].security_at_maximum"
    assert result.drive_config.drives[8].path_link == """/dev/slot8""", "Died on +.drive_config.drives[8].path_link"
    assert result.drive_config.drives[8].smart_ssd_write_capable == False, "Died on +.drive_config.drives[8].smart_ssd_write_capable"
    assert result.drive_config.drives[7].security_locked == False, "Died on +.drive_config.drives[7].security_locked"
    assert result.drive_config.drives[7].serial == """S1M9NYAFB00359""", "Died on +.drive_config.drives[7].serial"
    assert result.drive_config.drives[7].size == 240057409536, "Died on +.drive_config.drives[7].size"
    assert result.drive_config.drives[7].slot == 7, "Died on +.drive_config.drives[7].slot"
    assert result.drive_config.drives[7].uuid == UUID("a24f816c-c8a9-e9d6-270c-f4f4d088a302"), "Died on .drive_config.drives[7].uuid"
    assert result.drive_config.drives[7].dev_path == """/dev/slot7""", "Died on +.drive_config.drives[7].dev_path"
    assert result.drive_config.drives[7].version == """EXT1303Q""", "Died on +.drive_config.drives[7].version"
    assert result.drive_config.drives[7].security_supported == True, "Died on +.drive_config.drives[7].security_supported"
    assert result.drive_config.drives[7].drive_type == """Block""", "Died on +.drive_config.drives[7].drive_type"
    assert result.drive_config.drives[7].product == """SAMSUNG MZ7GE240HMGR-00003""", "Died on +.drive_config.drives[7].product"
    assert result.drive_config.drives[7].vendor == """Samsung""", "Died on +.drive_config.drives[7].vendor"
    assert result.drive_config.drives[7].canonical_name == """sde""", "Died on +.drive_config.drives[7].canonical_name"
    assert result.drive_config.drives[7].security_frozen == False, "Died on +.drive_config.drives[7].security_frozen"
    assert result.drive_config.drives[7].connected == True, "Died on +.drive_config.drives[7].connected"
    assert result.drive_config.drives[7].security_enabled == False, "Died on +.drive_config.drives[7].security_enabled"
    assert result.drive_config.drives[7].path == """/dev/sde""", "Died on +.drive_config.drives[7].path"
    assert result.drive_config.drives[7].scsi_state == """Running""", "Died on +.drive_config.drives[7].scsi_state"
    assert result.drive_config.drives[7].scsi_compat_id == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAFB00359""", "Died on +.drive_config.drives[7].scsi_compat_id"
    assert result.drive_config.drives[7].name == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAFB00359""", "Died on +.drive_config.drives[7].name"
    assert result.drive_config.drives[7].dev == 2112, "Died on +.drive_config.drives[7].dev"
    assert result.drive_config.drives[7].security_at_maximum == False, "Died on +.drive_config.drives[7].security_at_maximum"
    assert result.drive_config.drives[7].path_link == """/dev/slot7""", "Died on +.drive_config.drives[7].path_link"
    assert result.drive_config.drives[7].smart_ssd_write_capable == False, "Died on +.drive_config.drives[7].smart_ssd_write_capable"
    assert result.drive_config.drives[6].security_locked == False, "Died on +.drive_config.drives[6].security_locked"
    assert result.drive_config.drives[6].serial == """S1M9NYAFB00360""", "Died on +.drive_config.drives[6].serial"
    assert result.drive_config.drives[6].size == 240057409536, "Died on +.drive_config.drives[6].size"
    assert result.drive_config.drives[6].slot == 6, "Died on +.drive_config.drives[6].slot"
    assert result.drive_config.drives[6].uuid == UUID("a1b94b73-5b36-608a-8967-c2ade2054e4a"), "Died on .drive_config.drives[6].uuid"
    assert result.drive_config.drives[6].dev_path == """/dev/slot6""", "Died on +.drive_config.drives[6].dev_path"
    assert result.drive_config.drives[6].version == """EXT1303Q""", "Died on +.drive_config.drives[6].version"
    assert result.drive_config.drives[6].security_supported == True, "Died on +.drive_config.drives[6].security_supported"
    assert result.drive_config.drives[6].drive_type == """Block""", "Died on +.drive_config.drives[6].drive_type"
    assert result.drive_config.drives[6].product == """SAMSUNG MZ7GE240HMGR-00003""", "Died on +.drive_config.drives[6].product"
    assert result.drive_config.drives[6].vendor == """Samsung""", "Died on +.drive_config.drives[6].vendor"
    assert result.drive_config.drives[6].canonical_name == """sdc""", "Died on +.drive_config.drives[6].canonical_name"
    assert result.drive_config.drives[6].security_frozen == False, "Died on +.drive_config.drives[6].security_frozen"
    assert result.drive_config.drives[6].connected == True, "Died on +.drive_config.drives[6].connected"
    assert result.drive_config.drives[6].security_enabled == False, "Died on +.drive_config.drives[6].security_enabled"
    assert result.drive_config.drives[6].path == """/dev/sdc""", "Died on +.drive_config.drives[6].path"
    assert result.drive_config.drives[6].scsi_state == """Running""", "Died on +.drive_config.drives[6].scsi_state"
    assert result.drive_config.drives[6].scsi_compat_id == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAFB00360""", "Died on +.drive_config.drives[6].scsi_compat_id"
    assert result.drive_config.drives[6].name == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAFB00360""", "Died on +.drive_config.drives[6].name"
    assert result.drive_config.drives[6].dev == 2080, "Died on +.drive_config.drives[6].dev"
    assert result.drive_config.drives[6].security_at_maximum == False, "Died on +.drive_config.drives[6].security_at_maximum"
    assert result.drive_config.drives[6].path_link == """/dev/slot6""", "Died on +.drive_config.drives[6].path_link"
    assert result.drive_config.drives[6].smart_ssd_write_capable == False, "Died on +.drive_config.drives[6].smart_ssd_write_capable"
    assert result.drive_config.drives[5].security_locked == False, "Died on +.drive_config.drives[5].security_locked"
    assert result.drive_config.drives[5].serial == """S1M9NYAFB00345""", "Died on +.drive_config.drives[5].serial"
    assert result.drive_config.drives[5].size == 240057409536, "Died on +.drive_config.drives[5].size"
    assert result.drive_config.drives[5].slot == 5, "Died on +.drive_config.drives[5].slot"
    assert result.drive_config.drives[5].uuid == UUID("1798bcaf-fd75-8ea3-d5b1-9a9aa13dfdfb"), "Died on .drive_config.drives[5].uuid"
    assert result.drive_config.drives[5].dev_path == """/dev/slot5""", "Died on +.drive_config.drives[5].dev_path"
    assert result.drive_config.drives[5].version == """EXT1303Q""", "Died on +.drive_config.drives[5].version"
    assert result.drive_config.drives[5].security_supported == True, "Died on +.drive_config.drives[5].security_supported"
    assert result.drive_config.drives[5].drive_type == """Block""", "Died on +.drive_config.drives[5].drive_type"
    assert result.drive_config.drives[5].product == """SAMSUNG MZ7GE240HMGR-00003""", "Died on +.drive_config.drives[5].product"
    assert result.drive_config.drives[5].vendor == """Samsung""", "Died on +.drive_config.drives[5].vendor"
    assert result.drive_config.drives[5].canonical_name == """sdk""", "Died on +.drive_config.drives[5].canonical_name"
    assert result.drive_config.drives[5].security_frozen == False, "Died on +.drive_config.drives[5].security_frozen"
    assert result.drive_config.drives[5].connected == True, "Died on +.drive_config.drives[5].connected"
    assert result.drive_config.drives[5].security_enabled == False, "Died on +.drive_config.drives[5].security_enabled"
    assert result.drive_config.drives[5].path == """/dev/sdk""", "Died on +.drive_config.drives[5].path"
    assert result.drive_config.drives[5].scsi_state == """Running""", "Died on +.drive_config.drives[5].scsi_state"
    assert result.drive_config.drives[5].scsi_compat_id == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAFB00345""", "Died on +.drive_config.drives[5].scsi_compat_id"
    assert result.drive_config.drives[5].name == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAFB00345""", "Died on +.drive_config.drives[5].name"
    assert result.drive_config.drives[5].dev == 2208, "Died on +.drive_config.drives[5].dev"
    assert result.drive_config.drives[5].security_at_maximum == False, "Died on +.drive_config.drives[5].security_at_maximum"
    assert result.drive_config.drives[5].path_link == """/dev/slot5""", "Died on +.drive_config.drives[5].path_link"
    assert result.drive_config.drives[5].smart_ssd_write_capable == False, "Died on +.drive_config.drives[5].smart_ssd_write_capable"
    assert result.drive_config.drives[4].security_locked == False, "Died on +.drive_config.drives[4].security_locked"
    assert result.drive_config.drives[4].serial == """S1M9NYAFB00356""", "Died on +.drive_config.drives[4].serial"
    assert result.drive_config.drives[4].size == 240057409536, "Died on +.drive_config.drives[4].size"
    assert result.drive_config.drives[4].slot == 4, "Died on +.drive_config.drives[4].slot"
    assert result.drive_config.drives[4].uuid == UUID("bc8b52fd-6475-514a-9413-5ca16613d782"), "Died on .drive_config.drives[4].uuid"
    assert result.drive_config.drives[4].dev_path == """/dev/slot4""", "Died on +.drive_config.drives[4].dev_path"
    assert result.drive_config.drives[4].version == """EXT1303Q""", "Died on +.drive_config.drives[4].version"
    assert result.drive_config.drives[4].security_supported == True, "Died on +.drive_config.drives[4].security_supported"
    assert result.drive_config.drives[4].drive_type == """Block""", "Died on +.drive_config.drives[4].drive_type"
    assert result.drive_config.drives[4].product == """SAMSUNG MZ7GE240HMGR-00003""", "Died on +.drive_config.drives[4].product"
    assert result.drive_config.drives[4].vendor == """Samsung""", "Died on +.drive_config.drives[4].vendor"
    assert result.drive_config.drives[4].canonical_name == """sdi""", "Died on +.drive_config.drives[4].canonical_name"
    assert result.drive_config.drives[4].security_frozen == False, "Died on +.drive_config.drives[4].security_frozen"
    assert result.drive_config.drives[4].connected == True, "Died on +.drive_config.drives[4].connected"
    assert result.drive_config.drives[4].security_enabled == False, "Died on +.drive_config.drives[4].security_enabled"
    assert result.drive_config.drives[4].path == """/dev/sdi""", "Died on +.drive_config.drives[4].path"
    assert result.drive_config.drives[4].scsi_state == """Running""", "Died on +.drive_config.drives[4].scsi_state"
    assert result.drive_config.drives[4].scsi_compat_id == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAFB00356""", "Died on +.drive_config.drives[4].scsi_compat_id"
    assert result.drive_config.drives[4].name == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAFB00356""", "Died on +.drive_config.drives[4].name"
    assert result.drive_config.drives[4].dev == 2176, "Died on +.drive_config.drives[4].dev"
    assert result.drive_config.drives[4].security_at_maximum == False, "Died on +.drive_config.drives[4].security_at_maximum"
    assert result.drive_config.drives[4].path_link == """/dev/slot4""", "Died on +.drive_config.drives[4].path_link"
    assert result.drive_config.drives[4].smart_ssd_write_capable == False, "Died on +.drive_config.drives[4].smart_ssd_write_capable"
    assert result.drive_config.drives[3].security_locked == False, "Died on +.drive_config.drives[3].security_locked"
    assert result.drive_config.drives[3].serial == """S1M9NYAFB00344""", "Died on +.drive_config.drives[3].serial"
    assert result.drive_config.drives[3].size == 240057409536, "Died on +.drive_config.drives[3].size"
    assert result.drive_config.drives[3].slot == 3, "Died on +.drive_config.drives[3].slot"
    assert result.drive_config.drives[3].uuid == UUID("88bd6a3c-c1d3-fe03-aa6a-d77ea5b4b39f"), "Died on .drive_config.drives[3].uuid"
    assert result.drive_config.drives[3].dev_path == """/dev/slot3""", "Died on +.drive_config.drives[3].dev_path"
    assert result.drive_config.drives[3].version == """EXT1303Q""", "Died on +.drive_config.drives[3].version"
    assert result.drive_config.drives[3].security_supported == True, "Died on +.drive_config.drives[3].security_supported"
    assert result.drive_config.drives[3].drive_type == """Block""", "Died on +.drive_config.drives[3].drive_type"
    assert result.drive_config.drives[3].product == """SAMSUNG MZ7GE240HMGR-00003""", "Died on +.drive_config.drives[3].product"
    assert result.drive_config.drives[3].vendor == """Samsung""", "Died on +.drive_config.drives[3].vendor"
    assert result.drive_config.drives[3].canonical_name == """sdg""", "Died on +.drive_config.drives[3].canonical_name"
    assert result.drive_config.drives[3].security_frozen == False, "Died on +.drive_config.drives[3].security_frozen"
    assert result.drive_config.drives[3].connected == True, "Died on +.drive_config.drives[3].connected"
    assert result.drive_config.drives[3].security_enabled == False, "Died on +.drive_config.drives[3].security_enabled"
    assert result.drive_config.drives[3].path == """/dev/sdg""", "Died on +.drive_config.drives[3].path"
    assert result.drive_config.drives[3].scsi_state == """Running""", "Died on +.drive_config.drives[3].scsi_state"
    assert result.drive_config.drives[3].scsi_compat_id == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAFB00344""", "Died on +.drive_config.drives[3].scsi_compat_id"
    assert result.drive_config.drives[3].name == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAFB00344""", "Died on +.drive_config.drives[3].name"
    assert result.drive_config.drives[3].dev == 2144, "Died on +.drive_config.drives[3].dev"
    assert result.drive_config.drives[3].security_at_maximum == False, "Died on +.drive_config.drives[3].security_at_maximum"
    assert result.drive_config.drives[3].path_link == """/dev/slot3""", "Died on +.drive_config.drives[3].path_link"
    assert result.drive_config.drives[3].smart_ssd_write_capable == False, "Died on +.drive_config.drives[3].smart_ssd_write_capable"
    assert result.drive_config.drives[2].security_locked == False, "Died on +.drive_config.drives[2].security_locked"
    assert result.drive_config.drives[2].serial == """S1M9NYAFB00358""", "Died on +.drive_config.drives[2].serial"
    assert result.drive_config.drives[2].size == 240057409536, "Died on +.drive_config.drives[2].size"
    assert result.drive_config.drives[2].slot == 2, "Died on +.drive_config.drives[2].slot"
    assert result.drive_config.drives[2].uuid == UUID("86c756f2-45ab-4a4d-9f03-96cfe3eb0b21"), "Died on .drive_config.drives[2].uuid"
    assert result.drive_config.drives[2].dev_path == """/dev/slot2""", "Died on +.drive_config.drives[2].dev_path"
    assert result.drive_config.drives[2].version == """EXT1303Q""", "Died on +.drive_config.drives[2].version"
    assert result.drive_config.drives[2].security_supported == True, "Died on +.drive_config.drives[2].security_supported"
    assert result.drive_config.drives[2].drive_type == """Block""", "Died on +.drive_config.drives[2].drive_type"
    assert result.drive_config.drives[2].product == """SAMSUNG MZ7GE240HMGR-00003""", "Died on +.drive_config.drives[2].product"
    assert result.drive_config.drives[2].vendor == """Samsung""", "Died on +.drive_config.drives[2].vendor"
    assert result.drive_config.drives[2].canonical_name == """sdj""", "Died on +.drive_config.drives[2].canonical_name"
    assert result.drive_config.drives[2].security_frozen == False, "Died on +.drive_config.drives[2].security_frozen"
    assert result.drive_config.drives[2].connected == True, "Died on +.drive_config.drives[2].connected"
    assert result.drive_config.drives[2].security_enabled == False, "Died on +.drive_config.drives[2].security_enabled"
    assert result.drive_config.drives[2].path == """/dev/sdj""", "Died on +.drive_config.drives[2].path"
    assert result.drive_config.drives[2].scsi_state == """Running""", "Died on +.drive_config.drives[2].scsi_state"
    assert result.drive_config.drives[2].scsi_compat_id == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAFB00358""", "Died on +.drive_config.drives[2].scsi_compat_id"
    assert result.drive_config.drives[2].name == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAFB00358""", "Died on +.drive_config.drives[2].name"
    assert result.drive_config.drives[2].dev == 2192, "Died on +.drive_config.drives[2].dev"
    assert result.drive_config.drives[2].security_at_maximum == False, "Died on +.drive_config.drives[2].security_at_maximum"
    assert result.drive_config.drives[2].path_link == """/dev/slot2""", "Died on +.drive_config.drives[2].path_link"
    assert result.drive_config.drives[2].smart_ssd_write_capable == False, "Died on +.drive_config.drives[2].smart_ssd_write_capable"
    assert result.drive_config.drives[1].security_locked == False, "Died on +.drive_config.drives[1].security_locked"
    assert result.drive_config.drives[1].serial == """S1M9NYAFB00342""", "Died on +.drive_config.drives[1].serial"
    assert result.drive_config.drives[1].size == 240057409536, "Died on +.drive_config.drives[1].size"
    assert result.drive_config.drives[1].slot == 1, "Died on +.drive_config.drives[1].slot"
    assert result.drive_config.drives[1].uuid == UUID("1725f948-b21c-8769-f98d-9c6adf301d4f"), "Died on .drive_config.drives[1].uuid"
    assert result.drive_config.drives[1].dev_path == """/dev/slot1""", "Died on +.drive_config.drives[1].dev_path"
    assert result.drive_config.drives[1].version == """EXT1303Q""", "Died on +.drive_config.drives[1].version"
    assert result.drive_config.drives[1].security_supported == True, "Died on +.drive_config.drives[1].security_supported"
    assert result.drive_config.drives[1].drive_type == """Block""", "Died on +.drive_config.drives[1].drive_type"
    assert result.drive_config.drives[1].product == """SAMSUNG MZ7GE240HMGR-00003""", "Died on +.drive_config.drives[1].product"
    assert result.drive_config.drives[1].vendor == """Samsung""", "Died on +.drive_config.drives[1].vendor"
    assert result.drive_config.drives[1].canonical_name == """sdh""", "Died on +.drive_config.drives[1].canonical_name"
    assert result.drive_config.drives[1].security_frozen == False, "Died on +.drive_config.drives[1].security_frozen"
    assert result.drive_config.drives[1].connected == True, "Died on +.drive_config.drives[1].connected"
    assert result.drive_config.drives[1].security_enabled == False, "Died on +.drive_config.drives[1].security_enabled"
    assert result.drive_config.drives[1].path == """/dev/sdh""", "Died on +.drive_config.drives[1].path"
    assert result.drive_config.drives[1].scsi_state == """Running""", "Died on +.drive_config.drives[1].scsi_state"
    assert result.drive_config.drives[1].scsi_compat_id == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAFB00342""", "Died on +.drive_config.drives[1].scsi_compat_id"
    assert result.drive_config.drives[1].name == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAFB00342""", "Died on +.drive_config.drives[1].name"
    assert result.drive_config.drives[1].dev == 2160, "Died on +.drive_config.drives[1].dev"
    assert result.drive_config.drives[1].security_at_maximum == False, "Died on +.drive_config.drives[1].security_at_maximum"
    assert result.drive_config.drives[1].path_link == """/dev/slot1""", "Died on +.drive_config.drives[1].path_link"
    assert result.drive_config.drives[1].smart_ssd_write_capable == False, "Died on +.drive_config.drives[1].smart_ssd_write_capable"
    assert result.drive_config.drives[0].security_locked == False, "Died on +.drive_config.drives[0].security_locked"
    assert result.drive_config.drives[0].serial == """S1M9NYAFB00340""", "Died on +.drive_config.drives[0].serial"
    assert result.drive_config.drives[0].size == 240057409536, "Died on +.drive_config.drives[0].size"
    assert result.drive_config.drives[0].slot == 0, "Died on +.drive_config.drives[0].slot"
    assert result.drive_config.drives[0].uuid == UUID("f31297f2-c418-806b-42e9-62df94298b46"), "Died on .drive_config.drives[0].uuid"
    assert result.drive_config.drives[0].dev_path == """/dev/slot0""", "Died on +.drive_config.drives[0].dev_path"
    assert result.drive_config.drives[0].version == """EXT1303Q""", "Died on +.drive_config.drives[0].version"
    assert result.drive_config.drives[0].security_supported == True, "Died on +.drive_config.drives[0].security_supported"
    assert result.drive_config.drives[0].drive_type == """Slice""", "Died on +.drive_config.drives[0].drive_type"
    assert result.drive_config.drives[0].product == """SAMSUNG MZ7GE240HMGR-00003""", "Died on +.drive_config.drives[0].product"
    assert result.drive_config.drives[0].vendor == """Samsung""", "Died on +.drive_config.drives[0].vendor"
    assert result.drive_config.drives[0].canonical_name == """sdb""", "Died on +.drive_config.drives[0].canonical_name"
    assert result.drive_config.drives[0].security_frozen == False, "Died on +.drive_config.drives[0].security_frozen"
    assert result.drive_config.drives[0].connected == True, "Died on +.drive_config.drives[0].connected"
    assert result.drive_config.drives[0].security_enabled == False, "Died on +.drive_config.drives[0].security_enabled"
    assert result.drive_config.drives[0].path == """/dev/sdb""", "Died on +.drive_config.drives[0].path"
    assert result.drive_config.drives[0].scsi_state == """Running""", "Died on +.drive_config.drives[0].scsi_state"
    assert result.drive_config.drives[0].scsi_compat_id == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAFB00340""", "Died on +.drive_config.drives[0].scsi_compat_id"
    assert result.drive_config.drives[0].name == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAFB00340""", "Died on +.drive_config.drives[0].name"
    assert result.drive_config.drives[0].dev == 2064, "Died on +.drive_config.drives[0].dev"
    assert result.drive_config.drives[0].security_at_maximum == False, "Died on +.drive_config.drives[0].security_at_maximum"
    assert result.drive_config.drives[0].path_link == """/dev/slot0""", "Died on +.drive_config.drives[0].path_link"
    assert result.drive_config.drives[0].smart_ssd_write_capable == False, "Died on +.drive_config.drives[0].smart_ssd_write_capable"
    assert result.drive_config.num_block_actual == 9, "Died on +.drive_config.num_block_actual"
    assert result.drive_config.num_total_actual == 10, "Died on +.drive_config.num_total_actual"
    assert result.drive_config.num_block_expected == 9, "Died on +.drive_config.num_block_expected"

def test_get_drive_config_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetDriveConfig_v8.7_0)

    
    result = ef.get_drive_config()
    assert result.drive_config.num_slice_actual == 1, "Died on +.drive_config.num_slice_actual"
    assert result.drive_config.num_total_expected == 10, "Died on +.drive_config.num_total_expected"
    assert result.drive_config.num_slice_expected == 1, "Died on +.drive_config.num_slice_expected"
    assert result.drive_config.drives[9].security_locked == False, "Died on +.drive_config.drives[9].security_locked"
    assert result.drive_config.drives[9].serial == """00009AE1""", "Died on +.drive_config.drives[9].serial"
    assert result.drive_config.drives[9].size == 960197124096, "Died on +.drive_config.drives[9].size"
    assert result.drive_config.drives[9].slot == 9, "Died on +.drive_config.drives[9].slot"
    assert result.drive_config.drives[9].uuid == UUID("53b013bd-b3f8-ad94-136c-481bc4d4b013"), "Died on .drive_config.drives[9].uuid"
    assert result.drive_config.drives[9].dev_path == """/dev/slot9""", "Died on +.drive_config.drives[9].dev_path"
    assert result.drive_config.drives[9].version == """ZZ37RC93""", "Died on +.drive_config.drives[9].version"
    assert result.drive_config.drives[9].security_supported == True, "Died on +.drive_config.drives[9].security_supported"
    assert result.drive_config.drives[9].drive_type == """Block""", "Died on +.drive_config.drives[9].drive_type"
    assert result.drive_config.drives[9].product == """SDLFNCAR-960G-1HA1""", "Died on +.drive_config.drives[9].product"
    assert result.drive_config.drives[9].vendor == """SanDisk""", "Died on +.drive_config.drives[9].vendor"
    assert result.drive_config.drives[9].canonical_name == """sdd""", "Died on +.drive_config.drives[9].canonical_name"
    assert result.drive_config.drives[9].security_frozen == False, "Died on +.drive_config.drives[9].security_frozen"
    assert result.drive_config.drives[9].connected == True, "Died on +.drive_config.drives[9].connected"
    assert result.drive_config.drives[9].security_enabled == False, "Died on +.drive_config.drives[9].security_enabled"
    assert result.drive_config.drives[9].path == """/dev/sdd""", "Died on +.drive_config.drives[9].path"
    assert result.drive_config.drives[9].scsi_state == """Running""", "Died on +.drive_config.drives[9].scsi_state"
    assert result.drive_config.drives[9].scsi_compat_id == """scsi-SATA_SDLFNCAR-960G-1_00009AE1""", "Died on +.drive_config.drives[9].scsi_compat_id"
    assert result.drive_config.drives[9].name == """scsi-SATA_SDLFNCAR-960G-1_00009AE1""", "Died on +.drive_config.drives[9].name"
    assert result.drive_config.drives[9].dev == 2096, "Died on +.drive_config.drives[9].dev"
    assert result.drive_config.drives[9].security_at_maximum == False, "Died on +.drive_config.drives[9].security_at_maximum"
    assert result.drive_config.drives[9].path_link == """/dev/slot9""", "Died on +.drive_config.drives[9].path_link"
    assert result.drive_config.drives[9].smart_ssd_write_capable == False, "Died on +.drive_config.drives[9].smart_ssd_write_capable"
    assert result.drive_config.drives[8].security_locked == False, "Died on +.drive_config.drives[8].security_locked"
    assert result.drive_config.drives[8].serial == """00009A3F""", "Died on +.drive_config.drives[8].serial"
    assert result.drive_config.drives[8].size == 960197124096, "Died on +.drive_config.drives[8].size"
    assert result.drive_config.drives[8].slot == 8, "Died on +.drive_config.drives[8].slot"
    assert result.drive_config.drives[8].uuid == UUID("302c2a31-ccac-eee8-8614-7cfba7abe823"), "Died on .drive_config.drives[8].uuid"
    assert result.drive_config.drives[8].dev_path == """/dev/slot8""", "Died on +.drive_config.drives[8].dev_path"
    assert result.drive_config.drives[8].version == """ZZ37RC93""", "Died on +.drive_config.drives[8].version"
    assert result.drive_config.drives[8].security_supported == True, "Died on +.drive_config.drives[8].security_supported"
    assert result.drive_config.drives[8].drive_type == """Block""", "Died on +.drive_config.drives[8].drive_type"
    assert result.drive_config.drives[8].product == """SDLFNCAR-960G-1HA1""", "Died on +.drive_config.drives[8].product"
    assert result.drive_config.drives[8].vendor == """SanDisk""", "Died on +.drive_config.drives[8].vendor"
    assert result.drive_config.drives[8].canonical_name == """sdf""", "Died on +.drive_config.drives[8].canonical_name"
    assert result.drive_config.drives[8].security_frozen == False, "Died on +.drive_config.drives[8].security_frozen"
    assert result.drive_config.drives[8].connected == True, "Died on +.drive_config.drives[8].connected"
    assert result.drive_config.drives[8].security_enabled == False, "Died on +.drive_config.drives[8].security_enabled"
    assert result.drive_config.drives[8].path == """/dev/sdf""", "Died on +.drive_config.drives[8].path"
    assert result.drive_config.drives[8].scsi_state == """Running""", "Died on +.drive_config.drives[8].scsi_state"
    assert result.drive_config.drives[8].scsi_compat_id == """scsi-SATA_SDLFNCAR-960G-1_00009A3F""", "Died on +.drive_config.drives[8].scsi_compat_id"
    assert result.drive_config.drives[8].name == """scsi-SATA_SDLFNCAR-960G-1_00009A3F""", "Died on +.drive_config.drives[8].name"
    assert result.drive_config.drives[8].dev == 2128, "Died on +.drive_config.drives[8].dev"
    assert result.drive_config.drives[8].security_at_maximum == False, "Died on +.drive_config.drives[8].security_at_maximum"
    assert result.drive_config.drives[8].path_link == """/dev/slot8""", "Died on +.drive_config.drives[8].path_link"
    assert result.drive_config.drives[8].smart_ssd_write_capable == False, "Died on +.drive_config.drives[8].smart_ssd_write_capable"
    assert result.drive_config.drives[7].security_locked == False, "Died on +.drive_config.drives[7].security_locked"
    assert result.drive_config.drives[7].serial == """0000D4BD""", "Died on +.drive_config.drives[7].serial"
    assert result.drive_config.drives[7].size == 960197124096, "Died on +.drive_config.drives[7].size"
    assert result.drive_config.drives[7].slot == 7, "Died on +.drive_config.drives[7].slot"
    assert result.drive_config.drives[7].uuid == UUID("1e4ce5ad-fedc-8228-f9f1-bb48869f5012"), "Died on .drive_config.drives[7].uuid"
    assert result.drive_config.drives[7].dev_path == """/dev/slot7""", "Died on +.drive_config.drives[7].dev_path"
    assert result.drive_config.drives[7].version == """ZZ37RC93""", "Died on +.drive_config.drives[7].version"
    assert result.drive_config.drives[7].security_supported == True, "Died on +.drive_config.drives[7].security_supported"
    assert result.drive_config.drives[7].drive_type == """Block""", "Died on +.drive_config.drives[7].drive_type"
    assert result.drive_config.drives[7].product == """SDLFNCAR-960G-1HA1""", "Died on +.drive_config.drives[7].product"
    assert result.drive_config.drives[7].vendor == """SanDisk""", "Died on +.drive_config.drives[7].vendor"
    assert result.drive_config.drives[7].canonical_name == """sde""", "Died on +.drive_config.drives[7].canonical_name"
    assert result.drive_config.drives[7].security_frozen == False, "Died on +.drive_config.drives[7].security_frozen"
    assert result.drive_config.drives[7].connected == True, "Died on +.drive_config.drives[7].connected"
    assert result.drive_config.drives[7].security_enabled == False, "Died on +.drive_config.drives[7].security_enabled"
    assert result.drive_config.drives[7].path == """/dev/sde""", "Died on +.drive_config.drives[7].path"
    assert result.drive_config.drives[7].scsi_state == """Running""", "Died on +.drive_config.drives[7].scsi_state"
    assert result.drive_config.drives[7].scsi_compat_id == """scsi-SATA_SDLFNCAR-960G-1_0000D4BD""", "Died on +.drive_config.drives[7].scsi_compat_id"
    assert result.drive_config.drives[7].name == """scsi-SATA_SDLFNCAR-960G-1_0000D4BD""", "Died on +.drive_config.drives[7].name"
    assert result.drive_config.drives[7].dev == 2112, "Died on +.drive_config.drives[7].dev"
    assert result.drive_config.drives[7].security_at_maximum == False, "Died on +.drive_config.drives[7].security_at_maximum"
    assert result.drive_config.drives[7].path_link == """/dev/slot7""", "Died on +.drive_config.drives[7].path_link"
    assert result.drive_config.drives[7].smart_ssd_write_capable == False, "Died on +.drive_config.drives[7].smart_ssd_write_capable"
    assert result.drive_config.drives[6].security_locked == False, "Died on +.drive_config.drives[6].security_locked"
    assert result.drive_config.drives[6].serial == """0000D688""", "Died on +.drive_config.drives[6].serial"
    assert result.drive_config.drives[6].size == 960197124096, "Died on +.drive_config.drives[6].size"
    assert result.drive_config.drives[6].slot == 6, "Died on +.drive_config.drives[6].slot"
    assert result.drive_config.drives[6].uuid == UUID("73e10e53-fc28-6b19-c515-12c27cd26b26"), "Died on .drive_config.drives[6].uuid"
    assert result.drive_config.drives[6].dev_path == """/dev/slot6""", "Died on +.drive_config.drives[6].dev_path"
    assert result.drive_config.drives[6].version == """ZZ37RC93""", "Died on +.drive_config.drives[6].version"
    assert result.drive_config.drives[6].security_supported == True, "Died on +.drive_config.drives[6].security_supported"
    assert result.drive_config.drives[6].drive_type == """Block""", "Died on +.drive_config.drives[6].drive_type"
    assert result.drive_config.drives[6].product == """SDLFNCAR-960G-1HA1""", "Died on +.drive_config.drives[6].product"
    assert result.drive_config.drives[6].vendor == """SanDisk""", "Died on +.drive_config.drives[6].vendor"
    assert result.drive_config.drives[6].canonical_name == """sdc""", "Died on +.drive_config.drives[6].canonical_name"
    assert result.drive_config.drives[6].security_frozen == False, "Died on +.drive_config.drives[6].security_frozen"
    assert result.drive_config.drives[6].connected == True, "Died on +.drive_config.drives[6].connected"
    assert result.drive_config.drives[6].security_enabled == False, "Died on +.drive_config.drives[6].security_enabled"
    assert result.drive_config.drives[6].path == """/dev/sdc""", "Died on +.drive_config.drives[6].path"
    assert result.drive_config.drives[6].scsi_state == """Running""", "Died on +.drive_config.drives[6].scsi_state"
    assert result.drive_config.drives[6].scsi_compat_id == """scsi-SATA_SDLFNCAR-960G-1_0000D688""", "Died on +.drive_config.drives[6].scsi_compat_id"
    assert result.drive_config.drives[6].name == """scsi-SATA_SDLFNCAR-960G-1_0000D688""", "Died on +.drive_config.drives[6].name"
    assert result.drive_config.drives[6].dev == 2080, "Died on +.drive_config.drives[6].dev"
    assert result.drive_config.drives[6].security_at_maximum == False, "Died on +.drive_config.drives[6].security_at_maximum"
    assert result.drive_config.drives[6].path_link == """/dev/slot6""", "Died on +.drive_config.drives[6].path_link"
    assert result.drive_config.drives[6].smart_ssd_write_capable == False, "Died on +.drive_config.drives[6].smart_ssd_write_capable"
    assert result.drive_config.drives[5].security_locked == False, "Died on +.drive_config.drives[5].security_locked"
    assert result.drive_config.drives[5].serial == """00009BE5""", "Died on +.drive_config.drives[5].serial"
    assert result.drive_config.drives[5].size == 960197124096, "Died on +.drive_config.drives[5].size"
    assert result.drive_config.drives[5].slot == 5, "Died on +.drive_config.drives[5].slot"
    assert result.drive_config.drives[5].uuid == UUID("3b1b917e-af78-7456-2bdf-50c3f99a5a1b"), "Died on .drive_config.drives[5].uuid"
    assert result.drive_config.drives[5].dev_path == """/dev/slot5""", "Died on +.drive_config.drives[5].dev_path"
    assert result.drive_config.drives[5].version == """ZZ37RC93""", "Died on +.drive_config.drives[5].version"
    assert result.drive_config.drives[5].security_supported == True, "Died on +.drive_config.drives[5].security_supported"
    assert result.drive_config.drives[5].drive_type == """Block""", "Died on +.drive_config.drives[5].drive_type"
    assert result.drive_config.drives[5].product == """SDLFNCAR-960G-1HA1""", "Died on +.drive_config.drives[5].product"
    assert result.drive_config.drives[5].vendor == """SanDisk""", "Died on +.drive_config.drives[5].vendor"
    assert result.drive_config.drives[5].canonical_name == """sdk""", "Died on +.drive_config.drives[5].canonical_name"
    assert result.drive_config.drives[5].security_frozen == False, "Died on +.drive_config.drives[5].security_frozen"
    assert result.drive_config.drives[5].connected == True, "Died on +.drive_config.drives[5].connected"
    assert result.drive_config.drives[5].security_enabled == False, "Died on +.drive_config.drives[5].security_enabled"
    assert result.drive_config.drives[5].path == """/dev/sdk""", "Died on +.drive_config.drives[5].path"
    assert result.drive_config.drives[5].scsi_state == """Running""", "Died on +.drive_config.drives[5].scsi_state"
    assert result.drive_config.drives[5].scsi_compat_id == """scsi-SATA_SDLFNCAR-960G-1_00009BE5""", "Died on +.drive_config.drives[5].scsi_compat_id"
    assert result.drive_config.drives[5].name == """scsi-SATA_SDLFNCAR-960G-1_00009BE5""", "Died on +.drive_config.drives[5].name"
    assert result.drive_config.drives[5].dev == 2208, "Died on +.drive_config.drives[5].dev"
    assert result.drive_config.drives[5].security_at_maximum == False, "Died on +.drive_config.drives[5].security_at_maximum"
    assert result.drive_config.drives[5].path_link == """/dev/slot5""", "Died on +.drive_config.drives[5].path_link"
    assert result.drive_config.drives[5].smart_ssd_write_capable == False, "Died on +.drive_config.drives[5].smart_ssd_write_capable"
    assert result.drive_config.drives[4].security_locked == False, "Died on +.drive_config.drives[4].security_locked"
    assert result.drive_config.drives[4].serial == """00009B57""", "Died on +.drive_config.drives[4].serial"
    assert result.drive_config.drives[4].size == 960197124096, "Died on +.drive_config.drives[4].size"
    assert result.drive_config.drives[4].slot == 4, "Died on +.drive_config.drives[4].slot"
    assert result.drive_config.drives[4].uuid == UUID("6749409d-563f-1e1d-7c7b-b5ea03df3d43"), "Died on .drive_config.drives[4].uuid"
    assert result.drive_config.drives[4].dev_path == """/dev/slot4""", "Died on +.drive_config.drives[4].dev_path"
    assert result.drive_config.drives[4].version == """ZZ37RC93""", "Died on +.drive_config.drives[4].version"
    assert result.drive_config.drives[4].security_supported == True, "Died on +.drive_config.drives[4].security_supported"
    assert result.drive_config.drives[4].drive_type == """Block""", "Died on +.drive_config.drives[4].drive_type"
    assert result.drive_config.drives[4].product == """SDLFNCAR-960G-1HA1""", "Died on +.drive_config.drives[4].product"
    assert result.drive_config.drives[4].vendor == """SanDisk""", "Died on +.drive_config.drives[4].vendor"
    assert result.drive_config.drives[4].canonical_name == """sdi""", "Died on +.drive_config.drives[4].canonical_name"
    assert result.drive_config.drives[4].security_frozen == False, "Died on +.drive_config.drives[4].security_frozen"
    assert result.drive_config.drives[4].connected == True, "Died on +.drive_config.drives[4].connected"
    assert result.drive_config.drives[4].security_enabled == False, "Died on +.drive_config.drives[4].security_enabled"
    assert result.drive_config.drives[4].path == """/dev/sdi""", "Died on +.drive_config.drives[4].path"
    assert result.drive_config.drives[4].scsi_state == """Running""", "Died on +.drive_config.drives[4].scsi_state"
    assert result.drive_config.drives[4].scsi_compat_id == """scsi-SATA_SDLFNCAR-960G-1_00009B57""", "Died on +.drive_config.drives[4].scsi_compat_id"
    assert result.drive_config.drives[4].name == """scsi-SATA_SDLFNCAR-960G-1_00009B57""", "Died on +.drive_config.drives[4].name"
    assert result.drive_config.drives[4].dev == 2176, "Died on +.drive_config.drives[4].dev"
    assert result.drive_config.drives[4].security_at_maximum == False, "Died on +.drive_config.drives[4].security_at_maximum"
    assert result.drive_config.drives[4].path_link == """/dev/slot4""", "Died on +.drive_config.drives[4].path_link"
    assert result.drive_config.drives[4].smart_ssd_write_capable == False, "Died on +.drive_config.drives[4].smart_ssd_write_capable"
    assert result.drive_config.drives[3].security_locked == False, "Died on +.drive_config.drives[3].security_locked"
    assert result.drive_config.drives[3].serial == """0000D5B0""", "Died on +.drive_config.drives[3].serial"
    assert result.drive_config.drives[3].size == 960197124096, "Died on +.drive_config.drives[3].size"
    assert result.drive_config.drives[3].slot == 3, "Died on +.drive_config.drives[3].slot"
    assert result.drive_config.drives[3].uuid == UUID("fbedbff7-da3b-9b9c-a23d-ae1a7a535db3"), "Died on .drive_config.drives[3].uuid"
    assert result.drive_config.drives[3].dev_path == """/dev/slot3""", "Died on +.drive_config.drives[3].dev_path"
    assert result.drive_config.drives[3].version == """ZZ37RC93""", "Died on +.drive_config.drives[3].version"
    assert result.drive_config.drives[3].security_supported == True, "Died on +.drive_config.drives[3].security_supported"
    assert result.drive_config.drives[3].drive_type == """Block""", "Died on +.drive_config.drives[3].drive_type"
    assert result.drive_config.drives[3].product == """SDLFNCAR-960G-1HA1""", "Died on +.drive_config.drives[3].product"
    assert result.drive_config.drives[3].vendor == """SanDisk""", "Died on +.drive_config.drives[3].vendor"
    assert result.drive_config.drives[3].canonical_name == """sdh""", "Died on +.drive_config.drives[3].canonical_name"
    assert result.drive_config.drives[3].security_frozen == False, "Died on +.drive_config.drives[3].security_frozen"
    assert result.drive_config.drives[3].connected == True, "Died on +.drive_config.drives[3].connected"
    assert result.drive_config.drives[3].security_enabled == False, "Died on +.drive_config.drives[3].security_enabled"
    assert result.drive_config.drives[3].path == """/dev/sdh""", "Died on +.drive_config.drives[3].path"
    assert result.drive_config.drives[3].scsi_state == """Running""", "Died on +.drive_config.drives[3].scsi_state"
    assert result.drive_config.drives[3].scsi_compat_id == """scsi-SATA_SDLFNCAR-960G-1_0000D5B0""", "Died on +.drive_config.drives[3].scsi_compat_id"
    assert result.drive_config.drives[3].name == """scsi-SATA_SDLFNCAR-960G-1_0000D5B0""", "Died on +.drive_config.drives[3].name"
    assert result.drive_config.drives[3].dev == 2160, "Died on +.drive_config.drives[3].dev"
    assert result.drive_config.drives[3].security_at_maximum == False, "Died on +.drive_config.drives[3].security_at_maximum"
    assert result.drive_config.drives[3].path_link == """/dev/slot3""", "Died on +.drive_config.drives[3].path_link"
    assert result.drive_config.drives[3].smart_ssd_write_capable == False, "Died on +.drive_config.drives[3].smart_ssd_write_capable"
    assert result.drive_config.drives[2].security_locked == False, "Died on +.drive_config.drives[2].security_locked"
    assert result.drive_config.drives[2].serial == """00056D8E""", "Died on +.drive_config.drives[2].serial"
    assert result.drive_config.drives[2].size == 960197124096, "Died on +.drive_config.drives[2].size"
    assert result.drive_config.drives[2].slot == 2, "Died on +.drive_config.drives[2].slot"
    assert result.drive_config.drives[2].uuid == UUID("1a019ec5-c9b3-329a-c84f-efc92408dc67"), "Died on .drive_config.drives[2].uuid"
    assert result.drive_config.drives[2].dev_path == """/dev/slot2""", "Died on +.drive_config.drives[2].dev_path"
    assert result.drive_config.drives[2].version == """ZZ39RC93""", "Died on +.drive_config.drives[2].version"
    assert result.drive_config.drives[2].security_supported == True, "Died on +.drive_config.drives[2].security_supported"
    assert result.drive_config.drives[2].drive_type == """Block""", "Died on +.drive_config.drives[2].drive_type"
    assert result.drive_config.drives[2].product == """SDLFNCAR-960G-1HA2""", "Died on +.drive_config.drives[2].product"
    assert result.drive_config.drives[2].vendor == """SanDisk""", "Died on +.drive_config.drives[2].vendor"
    assert result.drive_config.drives[2].canonical_name == """sdj""", "Died on +.drive_config.drives[2].canonical_name"
    assert result.drive_config.drives[2].security_frozen == False, "Died on +.drive_config.drives[2].security_frozen"
    assert result.drive_config.drives[2].connected == True, "Died on +.drive_config.drives[2].connected"
    assert result.drive_config.drives[2].security_enabled == False, "Died on +.drive_config.drives[2].security_enabled"
    assert result.drive_config.drives[2].path == """/dev/sdj""", "Died on +.drive_config.drives[2].path"
    assert result.drive_config.drives[2].scsi_state == """Running""", "Died on +.drive_config.drives[2].scsi_state"
    assert result.drive_config.drives[2].scsi_compat_id == """scsi-SATA_SDLFNCAR-960G-1_00056D8E""", "Died on +.drive_config.drives[2].scsi_compat_id"
    assert result.drive_config.drives[2].name == """scsi-SATA_SDLFNCAR-960G-1_00056D8E""", "Died on +.drive_config.drives[2].name"
    assert result.drive_config.drives[2].dev == 2192, "Died on +.drive_config.drives[2].dev"
    assert result.drive_config.drives[2].security_at_maximum == False, "Died on +.drive_config.drives[2].security_at_maximum"
    assert result.drive_config.drives[2].path_link == """/dev/slot2""", "Died on +.drive_config.drives[2].path_link"
    assert result.drive_config.drives[2].smart_ssd_write_capable == False, "Died on +.drive_config.drives[2].smart_ssd_write_capable"
    assert result.drive_config.drives[1].security_locked == False, "Died on +.drive_config.drives[1].security_locked"
    assert result.drive_config.drives[1].serial == """00015731""", "Died on +.drive_config.drives[1].serial"
    assert result.drive_config.drives[1].size == 960197124096, "Died on +.drive_config.drives[1].size"
    assert result.drive_config.drives[1].slot == 1, "Died on +.drive_config.drives[1].slot"
    assert result.drive_config.drives[1].uuid == UUID("c6f6e765-bdb9-f5e9-cc89-c6bd28391d77"), "Died on .drive_config.drives[1].uuid"
    assert result.drive_config.drives[1].dev_path == """/dev/slot1""", "Died on +.drive_config.drives[1].dev_path"
    assert result.drive_config.drives[1].version == """ZZ37RC93""", "Died on +.drive_config.drives[1].version"
    assert result.drive_config.drives[1].security_supported == True, "Died on +.drive_config.drives[1].security_supported"
    assert result.drive_config.drives[1].drive_type == """Block""", "Died on +.drive_config.drives[1].drive_type"
    assert result.drive_config.drives[1].product == """SDLFNCAR-960G-1HA1""", "Died on +.drive_config.drives[1].product"
    assert result.drive_config.drives[1].vendor == """SanDisk""", "Died on +.drive_config.drives[1].vendor"
    assert result.drive_config.drives[1].canonical_name == """sdb""", "Died on +.drive_config.drives[1].canonical_name"
    assert result.drive_config.drives[1].security_frozen == False, "Died on +.drive_config.drives[1].security_frozen"
    assert result.drive_config.drives[1].connected == True, "Died on +.drive_config.drives[1].connected"
    assert result.drive_config.drives[1].security_enabled == False, "Died on +.drive_config.drives[1].security_enabled"
    assert result.drive_config.drives[1].path == """/dev/sdb""", "Died on +.drive_config.drives[1].path"
    assert result.drive_config.drives[1].scsi_state == """Running""", "Died on +.drive_config.drives[1].scsi_state"
    assert result.drive_config.drives[1].scsi_compat_id == """scsi-SATA_SDLFNCAR-960G-1_00015731""", "Died on +.drive_config.drives[1].scsi_compat_id"
    assert result.drive_config.drives[1].name == """scsi-SATA_SDLFNCAR-960G-1_00015731""", "Died on +.drive_config.drives[1].name"
    assert result.drive_config.drives[1].dev == 2064, "Died on +.drive_config.drives[1].dev"
    assert result.drive_config.drives[1].security_at_maximum == False, "Died on +.drive_config.drives[1].security_at_maximum"
    assert result.drive_config.drives[1].path_link == """/dev/slot1""", "Died on +.drive_config.drives[1].path_link"
    assert result.drive_config.drives[1].smart_ssd_write_capable == False, "Died on +.drive_config.drives[1].smart_ssd_write_capable"
    assert result.drive_config.drives[0].security_locked == False, "Died on +.drive_config.drives[0].security_locked"
    assert result.drive_config.drives[0].serial == """00056DA9""", "Died on +.drive_config.drives[0].serial"
    assert result.drive_config.drives[0].size == 960197124096, "Died on +.drive_config.drives[0].size"
    assert result.drive_config.drives[0].slot == 0, "Died on +.drive_config.drives[0].slot"
    assert result.drive_config.drives[0].uuid == UUID("3ecd66af-6a60-35df-9bc3-b039a5fc4074"), "Died on .drive_config.drives[0].uuid"
    assert result.drive_config.drives[0].dev_path == """/dev/slot0""", "Died on +.drive_config.drives[0].dev_path"
    assert result.drive_config.drives[0].version == """ZZ39RC93""", "Died on +.drive_config.drives[0].version"
    assert result.drive_config.drives[0].security_supported == True, "Died on +.drive_config.drives[0].security_supported"
    assert result.drive_config.drives[0].drive_type == """Slice""", "Died on +.drive_config.drives[0].drive_type"
    assert result.drive_config.drives[0].product == """SDLFNCAR-960G-1HA2""", "Died on +.drive_config.drives[0].product"
    assert result.drive_config.drives[0].vendor == """SanDisk""", "Died on +.drive_config.drives[0].vendor"
    assert result.drive_config.drives[0].canonical_name == """sdg""", "Died on +.drive_config.drives[0].canonical_name"
    assert result.drive_config.drives[0].security_frozen == False, "Died on +.drive_config.drives[0].security_frozen"
    assert result.drive_config.drives[0].connected == True, "Died on +.drive_config.drives[0].connected"
    assert result.drive_config.drives[0].security_enabled == False, "Died on +.drive_config.drives[0].security_enabled"
    assert result.drive_config.drives[0].path == """/dev/sdg""", "Died on +.drive_config.drives[0].path"
    assert result.drive_config.drives[0].scsi_state == """Running""", "Died on +.drive_config.drives[0].scsi_state"
    assert result.drive_config.drives[0].scsi_compat_id == """scsi-SATA_SDLFNCAR-960G-1_00056DA9""", "Died on +.drive_config.drives[0].scsi_compat_id"
    assert result.drive_config.drives[0].name == """scsi-SATA_SDLFNCAR-960G-1_00056DA9""", "Died on +.drive_config.drives[0].name"
    assert result.drive_config.drives[0].dev == 2144, "Died on +.drive_config.drives[0].dev"
    assert result.drive_config.drives[0].security_at_maximum == False, "Died on +.drive_config.drives[0].security_at_maximum"
    assert result.drive_config.drives[0].path_link == """/dev/slot0""", "Died on +.drive_config.drives[0].path_link"
    assert result.drive_config.drives[0].smart_ssd_write_capable == False, "Died on +.drive_config.drives[0].smart_ssd_write_capable"
    assert result.drive_config.num_block_actual == 9, "Died on +.drive_config.num_block_actual"
    assert result.drive_config.num_total_actual == 10, "Died on +.drive_config.num_total_actual"
    assert result.drive_config.num_block_expected == 9, "Died on +.drive_config.num_block_expected"

def test_get_drive_config_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetDriveConfig_v9.0_0)

    
    result = ef.get_drive_config()
    assert result.drive_config.num_slice_actual == 1, "Died on +.drive_config.num_slice_actual"
    assert result.drive_config.num_total_expected == 11, "Died on +.drive_config.num_total_expected"
    assert result.drive_config.num_slice_expected == 1, "Died on +.drive_config.num_slice_expected"
    assert result.drive_config.drives[13].security_locked == False, "Died on +.drive_config.drives[13].security_locked"
    assert result.drive_config.drives[13].serial == """BTWL321500VA300PGN""", "Died on +.drive_config.drives[13].serial"
    assert result.drive_config.drives[13].size == 300069052416, "Died on +.drive_config.drives[13].size"
    assert result.drive_config.drives[13].slot == 9, "Died on +.drive_config.drives[13].slot"
    assert result.drive_config.drives[13].uuid == UUID("625f055a-8b3e-b481-1dad-e88b9e7a6e6f"), "Died on .drive_config.drives[13].uuid"
    assert result.drive_config.drives[13].dev_path == """/dev/slot9""", "Died on +.drive_config.drives[13].dev_path"
    assert result.drive_config.drives[13].version == """D2010370""", "Died on +.drive_config.drives[13].version"
    assert result.drive_config.drives[13].security_supported == True, "Died on +.drive_config.drives[13].security_supported"
    assert result.drive_config.drives[13].drive_type == """Block""", "Died on +.drive_config.drives[13].drive_type"
    assert result.drive_config.drives[13].product == """INTEL SSDSC2BB300G4""", "Died on +.drive_config.drives[13].product"
    assert result.drive_config.drives[13].vendor == """Intel""", "Died on +.drive_config.drives[13].vendor"
    assert result.drive_config.drives[13].canonical_name == """sdd""", "Died on +.drive_config.drives[13].canonical_name"
    assert result.drive_config.drives[13].security_frozen == False, "Died on +.drive_config.drives[13].security_frozen"
    assert result.drive_config.drives[13].connected == True, "Died on +.drive_config.drives[13].connected"
    assert result.drive_config.drives[13].security_enabled == False, "Died on +.drive_config.drives[13].security_enabled"
    assert result.drive_config.drives[13].path == """/dev/sdd""", "Died on +.drive_config.drives[13].path"
    assert result.drive_config.drives[13].scsi_state == """Running""", "Died on +.drive_config.drives[13].scsi_state"
    assert result.drive_config.drives[13].scsi_compat_id == """scsi-SATA_INTEL_SSDSC2BB3BTWL321500VA300PGN""", "Died on +.drive_config.drives[13].scsi_compat_id"
    assert result.drive_config.drives[13].name == """scsi-SATA_INTEL_SSDSC2BB3BTWL321500VA300PGN""", "Died on +.drive_config.drives[13].name"
    assert result.drive_config.drives[13].dev == 2096, "Died on +.drive_config.drives[13].dev"
    assert result.drive_config.drives[13].security_at_maximum == False, "Died on +.drive_config.drives[13].security_at_maximum"
    assert result.drive_config.drives[13].path_link == """/dev/slot9""", "Died on +.drive_config.drives[13].path_link"
    assert result.drive_config.drives[12].security_locked == False, "Died on +.drive_config.drives[12].security_locked"
    assert result.drive_config.drives[12].serial == """BTWL3215014K300PGN""", "Died on +.drive_config.drives[12].serial"
    assert result.drive_config.drives[12].size == 300069052416, "Died on +.drive_config.drives[12].size"
    assert result.drive_config.drives[12].slot == 8, "Died on +.drive_config.drives[12].slot"
    assert result.drive_config.drives[12].uuid == UUID("4fe3f6c8-67c0-9e9f-32a7-b1a972e1509b"), "Died on .drive_config.drives[12].uuid"
    assert result.drive_config.drives[12].dev_path == """/dev/slot8""", "Died on +.drive_config.drives[12].dev_path"
    assert result.drive_config.drives[12].version == """D2010370""", "Died on +.drive_config.drives[12].version"
    assert result.drive_config.drives[12].security_supported == True, "Died on +.drive_config.drives[12].security_supported"
    assert result.drive_config.drives[12].drive_type == """Block""", "Died on +.drive_config.drives[12].drive_type"
    assert result.drive_config.drives[12].product == """INTEL SSDSC2BB300G4""", "Died on +.drive_config.drives[12].product"
    assert result.drive_config.drives[12].vendor == """Intel""", "Died on +.drive_config.drives[12].vendor"
    assert result.drive_config.drives[12].canonical_name == """sdf""", "Died on +.drive_config.drives[12].canonical_name"
    assert result.drive_config.drives[12].security_frozen == False, "Died on +.drive_config.drives[12].security_frozen"
    assert result.drive_config.drives[12].connected == True, "Died on +.drive_config.drives[12].connected"
    assert result.drive_config.drives[12].security_enabled == False, "Died on +.drive_config.drives[12].security_enabled"
    assert result.drive_config.drives[12].path == """/dev/sdf""", "Died on +.drive_config.drives[12].path"
    assert result.drive_config.drives[12].scsi_state == """Running""", "Died on +.drive_config.drives[12].scsi_state"
    assert result.drive_config.drives[12].scsi_compat_id == """scsi-SATA_INTEL_SSDSC2BB3BTWL3215014K300PGN""", "Died on +.drive_config.drives[12].scsi_compat_id"
    assert result.drive_config.drives[12].name == """scsi-SATA_INTEL_SSDSC2BB3BTWL3215014K300PGN""", "Died on +.drive_config.drives[12].name"
    assert result.drive_config.drives[12].dev == 2128, "Died on +.drive_config.drives[12].dev"
    assert result.drive_config.drives[12].security_at_maximum == False, "Died on +.drive_config.drives[12].security_at_maximum"
    assert result.drive_config.drives[12].path_link == """/dev/slot8""", "Died on +.drive_config.drives[12].path_link"
    assert result.drive_config.drives[11].security_locked == False, "Died on +.drive_config.drives[11].security_locked"
    assert result.drive_config.drives[11].serial == """BTWL32150104300PGN""", "Died on +.drive_config.drives[11].serial"
    assert result.drive_config.drives[11].size == 300069052416, "Died on +.drive_config.drives[11].size"
    assert result.drive_config.drives[11].slot == 7, "Died on +.drive_config.drives[11].slot"
    assert result.drive_config.drives[11].uuid == UUID("54282ecf-2589-6518-6836-d193b2b7b6e8"), "Died on .drive_config.drives[11].uuid"
    assert result.drive_config.drives[11].dev_path == """/dev/slot7""", "Died on +.drive_config.drives[11].dev_path"
    assert result.drive_config.drives[11].version == """D2010370""", "Died on +.drive_config.drives[11].version"
    assert result.drive_config.drives[11].security_supported == True, "Died on +.drive_config.drives[11].security_supported"
    assert result.drive_config.drives[11].drive_type == """Block""", "Died on +.drive_config.drives[11].drive_type"
    assert result.drive_config.drives[11].product == """INTEL SSDSC2BB300G4""", "Died on +.drive_config.drives[11].product"
    assert result.drive_config.drives[11].vendor == """Intel""", "Died on +.drive_config.drives[11].vendor"
    assert result.drive_config.drives[11].canonical_name == """sde""", "Died on +.drive_config.drives[11].canonical_name"
    assert result.drive_config.drives[11].security_frozen == False, "Died on +.drive_config.drives[11].security_frozen"
    assert result.drive_config.drives[11].connected == True, "Died on +.drive_config.drives[11].connected"
    assert result.drive_config.drives[11].security_enabled == False, "Died on +.drive_config.drives[11].security_enabled"
    assert result.drive_config.drives[11].path == """/dev/sde""", "Died on +.drive_config.drives[11].path"
    assert result.drive_config.drives[11].scsi_state == """Running""", "Died on +.drive_config.drives[11].scsi_state"
    assert result.drive_config.drives[11].scsi_compat_id == """scsi-SATA_INTEL_SSDSC2BB3BTWL32150104300PGN""", "Died on +.drive_config.drives[11].scsi_compat_id"
    assert result.drive_config.drives[11].name == """scsi-SATA_INTEL_SSDSC2BB3BTWL32150104300PGN""", "Died on +.drive_config.drives[11].name"
    assert result.drive_config.drives[11].dev == 2112, "Died on +.drive_config.drives[11].dev"
    assert result.drive_config.drives[11].security_at_maximum == False, "Died on +.drive_config.drives[11].security_at_maximum"
    assert result.drive_config.drives[11].path_link == """/dev/slot7""", "Died on +.drive_config.drives[11].path_link"
    assert result.drive_config.drives[10].security_locked == False, "Died on +.drive_config.drives[10].security_locked"
    assert result.drive_config.drives[10].serial == """BTWL321502U1300PGN""", "Died on +.drive_config.drives[10].serial"
    assert result.drive_config.drives[10].size == 300069052416, "Died on +.drive_config.drives[10].size"
    assert result.drive_config.drives[10].slot == 6, "Died on +.drive_config.drives[10].slot"
    assert result.drive_config.drives[10].uuid == UUID("b8d936d4-bc07-9c63-f306-a28a379590a6"), "Died on .drive_config.drives[10].uuid"
    assert result.drive_config.drives[10].dev_path == """/dev/slot6""", "Died on +.drive_config.drives[10].dev_path"
    assert result.drive_config.drives[10].version == """D2010370""", "Died on +.drive_config.drives[10].version"
    assert result.drive_config.drives[10].security_supported == True, "Died on +.drive_config.drives[10].security_supported"
    assert result.drive_config.drives[10].drive_type == """Block""", "Died on +.drive_config.drives[10].drive_type"
    assert result.drive_config.drives[10].product == """INTEL SSDSC2BB300G4""", "Died on +.drive_config.drives[10].product"
    assert result.drive_config.drives[10].vendor == """Intel""", "Died on +.drive_config.drives[10].vendor"
    assert result.drive_config.drives[10].canonical_name == """sdc""", "Died on +.drive_config.drives[10].canonical_name"
    assert result.drive_config.drives[10].security_frozen == False, "Died on +.drive_config.drives[10].security_frozen"
    assert result.drive_config.drives[10].connected == True, "Died on +.drive_config.drives[10].connected"
    assert result.drive_config.drives[10].security_enabled == False, "Died on +.drive_config.drives[10].security_enabled"
    assert result.drive_config.drives[10].path == """/dev/sdc""", "Died on +.drive_config.drives[10].path"
    assert result.drive_config.drives[10].scsi_state == """Running""", "Died on +.drive_config.drives[10].scsi_state"
    assert result.drive_config.drives[10].scsi_compat_id == """scsi-SATA_INTEL_SSDSC2BB3BTWL321502U1300PGN""", "Died on +.drive_config.drives[10].scsi_compat_id"
    assert result.drive_config.drives[10].name == """scsi-SATA_INTEL_SSDSC2BB3BTWL321502U1300PGN""", "Died on +.drive_config.drives[10].name"
    assert result.drive_config.drives[10].dev == 2080, "Died on +.drive_config.drives[10].dev"
    assert result.drive_config.drives[10].security_at_maximum == False, "Died on +.drive_config.drives[10].security_at_maximum"
    assert result.drive_config.drives[10].path_link == """/dev/slot6""", "Died on +.drive_config.drives[10].path_link"
    assert result.drive_config.drives[9].security_locked == False, "Died on +.drive_config.drives[9].security_locked"
    assert result.drive_config.drives[9].serial == """BTWL321500Q0300PGN""", "Died on +.drive_config.drives[9].serial"
    assert result.drive_config.drives[9].size == 300069052416, "Died on +.drive_config.drives[9].size"
    assert result.drive_config.drives[9].slot == 5, "Died on +.drive_config.drives[9].slot"
    assert result.drive_config.drives[9].uuid == UUID("18f8008a-af66-50ba-04b7-124a67754563"), "Died on .drive_config.drives[9].uuid"
    assert result.drive_config.drives[9].dev_path == """/dev/slot5""", "Died on +.drive_config.drives[9].dev_path"
    assert result.drive_config.drives[9].version == """D2010370""", "Died on +.drive_config.drives[9].version"
    assert result.drive_config.drives[9].security_supported == True, "Died on +.drive_config.drives[9].security_supported"
    assert result.drive_config.drives[9].drive_type == """Block""", "Died on +.drive_config.drives[9].drive_type"
    assert result.drive_config.drives[9].product == """INTEL SSDSC2BB300G4""", "Died on +.drive_config.drives[9].product"
    assert result.drive_config.drives[9].vendor == """Intel""", "Died on +.drive_config.drives[9].vendor"
    assert result.drive_config.drives[9].canonical_name == """sdk""", "Died on +.drive_config.drives[9].canonical_name"
    assert result.drive_config.drives[9].security_frozen == False, "Died on +.drive_config.drives[9].security_frozen"
    assert result.drive_config.drives[9].connected == True, "Died on +.drive_config.drives[9].connected"
    assert result.drive_config.drives[9].security_enabled == False, "Died on +.drive_config.drives[9].security_enabled"
    assert result.drive_config.drives[9].path == """/dev/sdk""", "Died on +.drive_config.drives[9].path"
    assert result.drive_config.drives[9].scsi_state == """Running""", "Died on +.drive_config.drives[9].scsi_state"
    assert result.drive_config.drives[9].scsi_compat_id == """scsi-SATA_INTEL_SSDSC2BB3BTWL321500Q0300PGN""", "Died on +.drive_config.drives[9].scsi_compat_id"
    assert result.drive_config.drives[9].name == """scsi-SATA_INTEL_SSDSC2BB3BTWL321500Q0300PGN""", "Died on +.drive_config.drives[9].name"
    assert result.drive_config.drives[9].dev == 2208, "Died on +.drive_config.drives[9].dev"
    assert result.drive_config.drives[9].security_at_maximum == False, "Died on +.drive_config.drives[9].security_at_maximum"
    assert result.drive_config.drives[9].path_link == """/dev/slot5""", "Died on +.drive_config.drives[9].path_link"
    assert result.drive_config.drives[8].security_locked == False, "Died on +.drive_config.drives[8].security_locked"
    assert result.drive_config.drives[8].serial == """BTWL321503AR300PGN""", "Died on +.drive_config.drives[8].serial"
    assert result.drive_config.drives[8].size == 300069052416, "Died on +.drive_config.drives[8].size"
    assert result.drive_config.drives[8].slot == 4, "Died on +.drive_config.drives[8].slot"
    assert result.drive_config.drives[8].uuid == UUID("17c19376-8e21-e2c6-9f6c-56c1874b445a"), "Died on .drive_config.drives[8].uuid"
    assert result.drive_config.drives[8].dev_path == """/dev/slot4""", "Died on +.drive_config.drives[8].dev_path"
    assert result.drive_config.drives[8].version == """D2010370""", "Died on +.drive_config.drives[8].version"
    assert result.drive_config.drives[8].security_supported == True, "Died on +.drive_config.drives[8].security_supported"
    assert result.drive_config.drives[8].drive_type == """Block""", "Died on +.drive_config.drives[8].drive_type"
    assert result.drive_config.drives[8].product == """INTEL SSDSC2BB300G4""", "Died on +.drive_config.drives[8].product"
    assert result.drive_config.drives[8].vendor == """Intel""", "Died on +.drive_config.drives[8].vendor"
    assert result.drive_config.drives[8].canonical_name == """sdi""", "Died on +.drive_config.drives[8].canonical_name"
    assert result.drive_config.drives[8].security_frozen == False, "Died on +.drive_config.drives[8].security_frozen"
    assert result.drive_config.drives[8].connected == True, "Died on +.drive_config.drives[8].connected"
    assert result.drive_config.drives[8].security_enabled == False, "Died on +.drive_config.drives[8].security_enabled"
    assert result.drive_config.drives[8].path == """/dev/sdi""", "Died on +.drive_config.drives[8].path"
    assert result.drive_config.drives[8].scsi_state == """Running""", "Died on +.drive_config.drives[8].scsi_state"
    assert result.drive_config.drives[8].scsi_compat_id == """scsi-SATA_INTEL_SSDSC2BB3BTWL321503AR300PGN""", "Died on +.drive_config.drives[8].scsi_compat_id"
    assert result.drive_config.drives[8].name == """scsi-SATA_INTEL_SSDSC2BB3BTWL321503AR300PGN""", "Died on +.drive_config.drives[8].name"
    assert result.drive_config.drives[8].dev == 2176, "Died on +.drive_config.drives[8].dev"
    assert result.drive_config.drives[8].security_at_maximum == False, "Died on +.drive_config.drives[8].security_at_maximum"
    assert result.drive_config.drives[8].path_link == """/dev/slot4""", "Died on +.drive_config.drives[8].path_link"
    assert result.drive_config.drives[7].security_locked == False, "Died on +.drive_config.drives[7].security_locked"
    assert result.drive_config.drives[7].serial == """BTWL321500X7300PGN""", "Died on +.drive_config.drives[7].serial"
    assert result.drive_config.drives[7].size == 300069052416, "Died on +.drive_config.drives[7].size"
    assert result.drive_config.drives[7].slot == 3, "Died on +.drive_config.drives[7].slot"
    assert result.drive_config.drives[7].uuid == UUID("baa986ce-59c6-36b1-38d3-1499cff34a26"), "Died on .drive_config.drives[7].uuid"
    assert result.drive_config.drives[7].dev_path == """/dev/slot3""", "Died on +.drive_config.drives[7].dev_path"
    assert result.drive_config.drives[7].version == """D2010370""", "Died on +.drive_config.drives[7].version"
    assert result.drive_config.drives[7].security_supported == True, "Died on +.drive_config.drives[7].security_supported"
    assert result.drive_config.drives[7].drive_type == """Block""", "Died on +.drive_config.drives[7].drive_type"
    assert result.drive_config.drives[7].product == """INTEL SSDSC2BB300G4""", "Died on +.drive_config.drives[7].product"
    assert result.drive_config.drives[7].vendor == """Intel""", "Died on +.drive_config.drives[7].vendor"
    assert result.drive_config.drives[7].canonical_name == """sdg""", "Died on +.drive_config.drives[7].canonical_name"
    assert result.drive_config.drives[7].security_frozen == False, "Died on +.drive_config.drives[7].security_frozen"
    assert result.drive_config.drives[7].connected == True, "Died on +.drive_config.drives[7].connected"
    assert result.drive_config.drives[7].security_enabled == False, "Died on +.drive_config.drives[7].security_enabled"
    assert result.drive_config.drives[7].path == """/dev/sdg""", "Died on +.drive_config.drives[7].path"
    assert result.drive_config.drives[7].scsi_state == """Running""", "Died on +.drive_config.drives[7].scsi_state"
    assert result.drive_config.drives[7].scsi_compat_id == """scsi-SATA_INTEL_SSDSC2BB3BTWL321500X7300PGN""", "Died on +.drive_config.drives[7].scsi_compat_id"
    assert result.drive_config.drives[7].name == """scsi-SATA_INTEL_SSDSC2BB3BTWL321500X7300PGN""", "Died on +.drive_config.drives[7].name"
    assert result.drive_config.drives[7].dev == 2144, "Died on +.drive_config.drives[7].dev"
    assert result.drive_config.drives[7].security_at_maximum == False, "Died on +.drive_config.drives[7].security_at_maximum"
    assert result.drive_config.drives[7].path_link == """/dev/slot3""", "Died on +.drive_config.drives[7].path_link"
    assert result.drive_config.drives[6].security_locked == False, "Died on +.drive_config.drives[6].security_locked"
    assert result.drive_config.drives[6].serial == """BTWL311301S0300PGN""", "Died on +.drive_config.drives[6].serial"
    assert result.drive_config.drives[6].size == 300069052416, "Died on +.drive_config.drives[6].size"
    assert result.drive_config.drives[6].slot == 2, "Died on +.drive_config.drives[6].slot"
    assert result.drive_config.drives[6].uuid == UUID("4c1595b1-e318-e7ec-680a-f1054d09e8bd"), "Died on .drive_config.drives[6].uuid"
    assert result.drive_config.drives[6].dev_path == """/dev/slot2""", "Died on +.drive_config.drives[6].dev_path"
    assert result.drive_config.drives[6].version == """D2010370""", "Died on +.drive_config.drives[6].version"
    assert result.drive_config.drives[6].security_supported == True, "Died on +.drive_config.drives[6].security_supported"
    assert result.drive_config.drives[6].drive_type == """Block""", "Died on +.drive_config.drives[6].drive_type"
    assert result.drive_config.drives[6].product == """INTEL SSDSC2BB300G4""", "Died on +.drive_config.drives[6].product"
    assert result.drive_config.drives[6].vendor == """Intel""", "Died on +.drive_config.drives[6].vendor"
    assert result.drive_config.drives[6].canonical_name == """sdj""", "Died on +.drive_config.drives[6].canonical_name"
    assert result.drive_config.drives[6].security_frozen == False, "Died on +.drive_config.drives[6].security_frozen"
    assert result.drive_config.drives[6].connected == True, "Died on +.drive_config.drives[6].connected"
    assert result.drive_config.drives[6].security_enabled == False, "Died on +.drive_config.drives[6].security_enabled"
    assert result.drive_config.drives[6].path == """/dev/sdj""", "Died on +.drive_config.drives[6].path"
    assert result.drive_config.drives[6].scsi_state == """Running""", "Died on +.drive_config.drives[6].scsi_state"
    assert result.drive_config.drives[6].scsi_compat_id == """scsi-SATA_INTEL_SSDSC2BB3BTWL311301S0300PGN""", "Died on +.drive_config.drives[6].scsi_compat_id"
    assert result.drive_config.drives[6].name == """scsi-SATA_INTEL_SSDSC2BB3BTWL311301S0300PGN""", "Died on +.drive_config.drives[6].name"
    assert result.drive_config.drives[6].dev == 2192, "Died on +.drive_config.drives[6].dev"
    assert result.drive_config.drives[6].security_at_maximum == False, "Died on +.drive_config.drives[6].security_at_maximum"
    assert result.drive_config.drives[6].path_link == """/dev/slot2""", "Died on +.drive_config.drives[6].path_link"
    assert result.drive_config.drives[5].security_locked == False, "Died on +.drive_config.drives[5].security_locked"
    assert result.drive_config.drives[5].serial == """BTWL321500JU300PGN""", "Died on +.drive_config.drives[5].serial"
    assert result.drive_config.drives[5].size == 300069052416, "Died on +.drive_config.drives[5].size"
    assert result.drive_config.drives[5].slot == 1, "Died on +.drive_config.drives[5].slot"
    assert result.drive_config.drives[5].uuid == UUID("7a5cd212-e76c-23f7-9044-25bfb7928c25"), "Died on .drive_config.drives[5].uuid"
    assert result.drive_config.drives[5].dev_path == """/dev/slot1""", "Died on +.drive_config.drives[5].dev_path"
    assert result.drive_config.drives[5].version == """D2010370""", "Died on +.drive_config.drives[5].version"
    assert result.drive_config.drives[5].security_supported == True, "Died on +.drive_config.drives[5].security_supported"
    assert result.drive_config.drives[5].drive_type == """Block""", "Died on +.drive_config.drives[5].drive_type"
    assert result.drive_config.drives[5].product == """INTEL SSDSC2BB300G4""", "Died on +.drive_config.drives[5].product"
    assert result.drive_config.drives[5].vendor == """Intel""", "Died on +.drive_config.drives[5].vendor"
    assert result.drive_config.drives[5].canonical_name == """sdh""", "Died on +.drive_config.drives[5].canonical_name"
    assert result.drive_config.drives[5].security_frozen == False, "Died on +.drive_config.drives[5].security_frozen"
    assert result.drive_config.drives[5].connected == True, "Died on +.drive_config.drives[5].connected"
    assert result.drive_config.drives[5].security_enabled == False, "Died on +.drive_config.drives[5].security_enabled"
    assert result.drive_config.drives[5].path == """/dev/sdh""", "Died on +.drive_config.drives[5].path"
    assert result.drive_config.drives[5].scsi_state == """Running""", "Died on +.drive_config.drives[5].scsi_state"
    assert result.drive_config.drives[5].scsi_compat_id == """scsi-SATA_INTEL_SSDSC2BB3BTWL321500JU300PGN""", "Died on +.drive_config.drives[5].scsi_compat_id"
    assert result.drive_config.drives[5].name == """scsi-SATA_INTEL_SSDSC2BB3BTWL321500JU300PGN""", "Died on +.drive_config.drives[5].name"
    assert result.drive_config.drives[5].dev == 2160, "Died on +.drive_config.drives[5].dev"
    assert result.drive_config.drives[5].security_at_maximum == False, "Died on +.drive_config.drives[5].security_at_maximum"
    assert result.drive_config.drives[5].path_link == """/dev/slot1""", "Died on +.drive_config.drives[5].path_link"
    assert result.drive_config.drives[4].security_locked == False, "Died on +.drive_config.drives[4].security_locked"
    assert result.drive_config.drives[4].serial == """BTWL321500L1300PGN""", "Died on +.drive_config.drives[4].serial"
    assert result.drive_config.drives[4].size == 300069052416, "Died on +.drive_config.drives[4].size"
    assert result.drive_config.drives[4].slot == 0, "Died on +.drive_config.drives[4].slot"
    assert result.drive_config.drives[4].uuid == UUID("fa0e012b-b117-53d2-cab0-32f716c531eb"), "Died on .drive_config.drives[4].uuid"
    assert result.drive_config.drives[4].dev_path == """/dev/slot0""", "Died on +.drive_config.drives[4].dev_path"
    assert result.drive_config.drives[4].version == """D2010370""", "Died on +.drive_config.drives[4].version"
    assert result.drive_config.drives[4].security_supported == True, "Died on +.drive_config.drives[4].security_supported"
    assert result.drive_config.drives[4].drive_type == """Block""", "Died on +.drive_config.drives[4].drive_type"
    assert result.drive_config.drives[4].product == """INTEL SSDSC2BB300G4""", "Died on +.drive_config.drives[4].product"
    assert result.drive_config.drives[4].vendor == """Intel""", "Died on +.drive_config.drives[4].vendor"
    assert result.drive_config.drives[4].canonical_name == """sdb""", "Died on +.drive_config.drives[4].canonical_name"
    assert result.drive_config.drives[4].security_frozen == False, "Died on +.drive_config.drives[4].security_frozen"
    assert result.drive_config.drives[4].connected == True, "Died on +.drive_config.drives[4].connected"
    assert result.drive_config.drives[4].security_enabled == False, "Died on +.drive_config.drives[4].security_enabled"
    assert result.drive_config.drives[4].path == """/dev/sdb""", "Died on +.drive_config.drives[4].path"
    assert result.drive_config.drives[4].scsi_state == """Running""", "Died on +.drive_config.drives[4].scsi_state"
    assert result.drive_config.drives[4].scsi_compat_id == """scsi-SATA_INTEL_SSDSC2BB3BTWL321500L1300PGN""", "Died on +.drive_config.drives[4].scsi_compat_id"
    assert result.drive_config.drives[4].name == """scsi-SATA_INTEL_SSDSC2BB3BTWL321500L1300PGN""", "Died on +.drive_config.drives[4].name"
    assert result.drive_config.drives[4].dev == 2064, "Died on +.drive_config.drives[4].dev"
    assert result.drive_config.drives[4].security_at_maximum == False, "Died on +.drive_config.drives[4].security_at_maximum"
    assert result.drive_config.drives[4].path_link == """/dev/slot0""", "Died on +.drive_config.drives[4].path_link"
    assert result.drive_config.drives[3].security_locked == False, "Died on +.drive_config.drives[3].security_locked"
    assert result.drive_config.drives[3].serial == """205044035""", "Died on +.drive_config.drives[3].serial"
    assert result.drive_config.drives[3].size == 299988156416, "Died on +.drive_config.drives[3].size"
    assert result.drive_config.drives[3].slot == -1, "Died on +.drive_config.drives[3].slot"
    assert result.drive_config.drives[3].uuid == UUID("86fb574d-acd8-903e-4eb2-a83d107e0a4c"), "Died on .drive_config.drives[3].uuid"
    assert result.drive_config.drives[3].dev_path == """/dev/sdimm0p4""", "Died on +.drive_config.drives[3].dev_path"
    assert result.drive_config.drives[3].version == """515ABBF0""", "Died on +.drive_config.drives[3].version"
    assert result.drive_config.drives[3].security_supported == True, "Died on +.drive_config.drives[3].security_supported"
    assert result.drive_config.drives[3].drive_type == """Slice""", "Died on +.drive_config.drives[3].drive_type"
    assert result.drive_config.drives[3].product == """VRFSD3400GNCVMTJS1""", "Died on +.drive_config.drives[3].product"
    assert result.drive_config.drives[3].vendor == """Viking""", "Died on +.drive_config.drives[3].vendor"
    assert result.drive_config.drives[3].canonical_name == """sda""", "Died on +.drive_config.drives[3].canonical_name"
    assert result.drive_config.drives[3].security_frozen == True, "Died on +.drive_config.drives[3].security_frozen"
    assert result.drive_config.drives[3].connected == True, "Died on +.drive_config.drives[3].connected"
    assert result.drive_config.drives[3].security_enabled == False, "Died on +.drive_config.drives[3].security_enabled"
    assert result.drive_config.drives[3].path == """/dev/sda4""", "Died on +.drive_config.drives[3].path"
    assert result.drive_config.drives[3].scsi_state == """Running""", "Died on +.drive_config.drives[3].scsi_state"
    assert result.drive_config.drives[3].scsi_compat_id == """scsi-SATA_VRFSD3400GNCVMT205044035-part4""", "Died on +.drive_config.drives[3].scsi_compat_id"
    assert result.drive_config.drives[3].name == """scsi-SATA_VRFSD3400GNCVMT205044035-part4""", "Died on +.drive_config.drives[3].name"
    assert result.drive_config.drives[3].dev == 2052, "Died on +.drive_config.drives[3].dev"
    assert result.drive_config.drives[3].security_at_maximum == False, "Died on +.drive_config.drives[3].security_at_maximum"
    assert result.drive_config.drives[3].path_link == """/dev/sdimm0p4""", "Died on +.drive_config.drives[3].path_link"
    assert result.drive_config.drives[2].security_locked == False, "Died on +.drive_config.drives[2].security_locked"
    assert result.drive_config.drives[2].serial == """log""", "Died on +.drive_config.drives[2].serial"
    assert result.drive_config.drives[2].size == 9223372036854775807, "Died on +.drive_config.drives[2].size"
    assert result.drive_config.drives[2].slot == -2, "Died on +.drive_config.drives[2].slot"
    assert result.drive_config.drives[2].uuid == UUID("dc1d71bb-b5c4-d2a5-e936-db79ef10c19f"), "Died on .drive_config.drives[2].uuid"
    assert result.drive_config.drives[2].dev_path == """/var/log""", "Died on +.drive_config.drives[2].dev_path"
    assert result.drive_config.drives[2].version == """Unknown""", "Died on +.drive_config.drives[2].version"
    assert result.drive_config.drives[2].security_supported == False, "Died on +.drive_config.drives[2].security_supported"
    assert result.drive_config.drives[2].drive_type == """System""", "Died on +.drive_config.drives[2].drive_type"
    assert result.drive_config.drives[2].product == """Unknown""", "Died on +.drive_config.drives[2].product"
    assert result.drive_config.drives[2].vendor == """Unknown""", "Died on +.drive_config.drives[2].vendor"
    assert result.drive_config.drives[2].canonical_name == """log""", "Died on +.drive_config.drives[2].canonical_name"
    assert result.drive_config.drives[2].security_frozen == False, "Died on +.drive_config.drives[2].security_frozen"
    assert result.drive_config.drives[2].connected == False, "Died on +.drive_config.drives[2].connected"
    assert result.drive_config.drives[2].security_enabled == False, "Died on +.drive_config.drives[2].security_enabled"
    assert result.drive_config.drives[2].path == """/var/log""", "Died on +.drive_config.drives[2].path"
    assert result.drive_config.drives[2].scsi_state == """Unknown""", "Died on +.drive_config.drives[2].scsi_state"
    assert result.drive_config.drives[2].scsi_compat_id == """log""", "Died on +.drive_config.drives[2].scsi_compat_id"
    assert result.drive_config.drives[2].name == """log""", "Died on +.drive_config.drives[2].name"
    assert result.drive_config.drives[2].dev == 0, "Died on +.drive_config.drives[2].dev"
    assert result.drive_config.drives[2].security_at_maximum == False, "Died on +.drive_config.drives[2].security_at_maximum"
    assert result.drive_config.drives[2].path_link == """/var/log""", "Died on +.drive_config.drives[2].path_link"
    assert result.drive_config.drives[1].security_locked == False, "Died on +.drive_config.drives[1].security_locked"
    assert result.drive_config.drives[1].serial == """/""", "Died on +.drive_config.drives[1].serial"
    assert result.drive_config.drives[1].size == 9223372036854775807, "Died on +.drive_config.drives[1].size"
    assert result.drive_config.drives[1].slot == -2, "Died on +.drive_config.drives[1].slot"
    assert result.drive_config.drives[1].uuid == UUID("6666cd76-f969-5646-9e7b-e39d750cc7d9"), "Died on .drive_config.drives[1].uuid"
    assert result.drive_config.drives[1].dev_path == """/""", "Died on +.drive_config.drives[1].dev_path"
    assert result.drive_config.drives[1].version == """Unknown""", "Died on +.drive_config.drives[1].version"
    assert result.drive_config.drives[1].security_supported == False, "Died on +.drive_config.drives[1].security_supported"
    assert result.drive_config.drives[1].drive_type == """System""", "Died on +.drive_config.drives[1].drive_type"
    assert result.drive_config.drives[1].product == """Unknown""", "Died on +.drive_config.drives[1].product"
    assert result.drive_config.drives[1].vendor == """Unknown""", "Died on +.drive_config.drives[1].vendor"
    assert result.drive_config.drives[1].canonical_name == """/""", "Died on +.drive_config.drives[1].canonical_name"
    assert result.drive_config.drives[1].security_frozen == False, "Died on +.drive_config.drives[1].security_frozen"
    assert result.drive_config.drives[1].connected == False, "Died on +.drive_config.drives[1].connected"
    assert result.drive_config.drives[1].security_enabled == False, "Died on +.drive_config.drives[1].security_enabled"
    assert result.drive_config.drives[1].path == """/""", "Died on +.drive_config.drives[1].path"
    assert result.drive_config.drives[1].scsi_state == """Unknown""", "Died on +.drive_config.drives[1].scsi_state"
    assert result.drive_config.drives[1].scsi_compat_id == """/""", "Died on +.drive_config.drives[1].scsi_compat_id"
    assert result.drive_config.drives[1].name == """/""", "Died on +.drive_config.drives[1].name"
    assert result.drive_config.drives[1].dev == 0, "Died on +.drive_config.drives[1].dev"
    assert result.drive_config.drives[1].security_at_maximum == False, "Died on +.drive_config.drives[1].security_at_maximum"
    assert result.drive_config.drives[1].path_link == """/""", "Died on +.drive_config.drives[1].path_link"
    assert result.drive_config.drives[0].security_locked == False, "Died on +.drive_config.drives[0].security_locked"
    assert result.drive_config.drives[0].serial == """boot""", "Died on +.drive_config.drives[0].serial"
    assert result.drive_config.drives[0].size == 1024, "Died on +.drive_config.drives[0].size"
    assert result.drive_config.drives[0].slot == -2, "Died on +.drive_config.drives[0].slot"
    assert result.drive_config.drives[0].uuid == UUID("881cc415-7ed6-41a3-65a8-6452f27ed745"), "Died on .drive_config.drives[0].uuid"
    assert result.drive_config.drives[0].dev_path == """/boot""", "Died on +.drive_config.drives[0].dev_path"
    assert result.drive_config.drives[0].version == """Unknown""", "Died on +.drive_config.drives[0].version"
    assert result.drive_config.drives[0].security_supported == False, "Died on +.drive_config.drives[0].security_supported"
    assert result.drive_config.drives[0].drive_type == """System""", "Died on +.drive_config.drives[0].drive_type"
    assert result.drive_config.drives[0].product == """Unknown""", "Died on +.drive_config.drives[0].product"
    assert result.drive_config.drives[0].vendor == """Unknown""", "Died on +.drive_config.drives[0].vendor"
    assert result.drive_config.drives[0].canonical_name == """boot""", "Died on +.drive_config.drives[0].canonical_name"
    assert result.drive_config.drives[0].security_frozen == False, "Died on +.drive_config.drives[0].security_frozen"
    assert result.drive_config.drives[0].connected == False, "Died on +.drive_config.drives[0].connected"
    assert result.drive_config.drives[0].security_enabled == False, "Died on +.drive_config.drives[0].security_enabled"
    assert result.drive_config.drives[0].path == """/boot""", "Died on +.drive_config.drives[0].path"
    assert result.drive_config.drives[0].scsi_state == """Unknown""", "Died on +.drive_config.drives[0].scsi_state"
    assert result.drive_config.drives[0].scsi_compat_id == """boot""", "Died on +.drive_config.drives[0].scsi_compat_id"
    assert result.drive_config.drives[0].name == """boot""", "Died on +.drive_config.drives[0].name"
    assert result.drive_config.drives[0].dev == 0, "Died on +.drive_config.drives[0].dev"
    assert result.drive_config.drives[0].security_at_maximum == False, "Died on +.drive_config.drives[0].security_at_maximum"
    assert result.drive_config.drives[0].path_link == """/boot""", "Died on +.drive_config.drives[0].path_link"
    assert result.drive_config.num_block_actual == 10, "Died on +.drive_config.num_block_actual"
    assert result.drive_config.num_total_actual == 11, "Died on +.drive_config.num_total_actual"
    assert result.drive_config.num_block_expected == 10, "Died on +.drive_config.num_block_expected"

def test_get_drive_config_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetDriveConfig_v9.1_0)

    
    result = ef.get_drive_config()
    assert result.drive_config.num_slice_actual == 1, "Died on +.drive_config.num_slice_actual"
    assert result.drive_config.num_total_expected == 11, "Died on +.drive_config.num_total_expected"
    assert result.drive_config.num_slice_expected == 1, "Died on +.drive_config.num_slice_expected"
    assert result.drive_config.drives[13].security_locked == False, "Died on +.drive_config.drives[13].security_locked"
    assert result.drive_config.drives[13].serial == """BTWL321503D8300PGN""", "Died on +.drive_config.drives[13].serial"
    assert result.drive_config.drives[13].size == 300069052416, "Died on +.drive_config.drives[13].size"
    assert result.drive_config.drives[13].slot == 9, "Died on +.drive_config.drives[13].slot"
    assert result.drive_config.drives[13].uuid == UUID("bf465f73-b874-7c5d-bf2e-5c53558d5a12"), "Died on .drive_config.drives[13].uuid"
    assert result.drive_config.drives[13].dev_path == """/dev/slot9""", "Died on +.drive_config.drives[13].dev_path"
    assert result.drive_config.drives[13].version == """D2010370""", "Died on +.drive_config.drives[13].version"
    assert result.drive_config.drives[13].security_supported == True, "Died on +.drive_config.drives[13].security_supported"
    assert result.drive_config.drives[13].drive_type == """Block""", "Died on +.drive_config.drives[13].drive_type"
    assert result.drive_config.drives[13].product == """INTEL SSDSC2BB300G4""", "Died on +.drive_config.drives[13].product"
    assert result.drive_config.drives[13].vendor == """Intel""", "Died on +.drive_config.drives[13].vendor"
    assert result.drive_config.drives[13].canonical_name == """sdd""", "Died on +.drive_config.drives[13].canonical_name"
    assert result.drive_config.drives[13].security_frozen == False, "Died on +.drive_config.drives[13].security_frozen"
    assert result.drive_config.drives[13].connected == True, "Died on +.drive_config.drives[13].connected"
    assert result.drive_config.drives[13].security_enabled == False, "Died on +.drive_config.drives[13].security_enabled"
    assert result.drive_config.drives[13].path == """/dev/sdd""", "Died on +.drive_config.drives[13].path"
    assert result.drive_config.drives[13].scsi_state == """Running""", "Died on +.drive_config.drives[13].scsi_state"
    assert result.drive_config.drives[13].scsi_compat_id == """scsi-SATA_INTEL_SSDSC2BB3BTWL321503D8300PGN""", "Died on +.drive_config.drives[13].scsi_compat_id"
    assert result.drive_config.drives[13].name == """scsi-SATA_INTEL_SSDSC2BB3BTWL321503D8300PGN""", "Died on +.drive_config.drives[13].name"
    assert result.drive_config.drives[13].dev == 2096, "Died on +.drive_config.drives[13].dev"
    assert result.drive_config.drives[13].security_at_maximum == False, "Died on +.drive_config.drives[13].security_at_maximum"
    assert result.drive_config.drives[13].path_link == """/dev/slot9""", "Died on +.drive_config.drives[13].path_link"
    assert result.drive_config.drives[12].security_locked == False, "Died on +.drive_config.drives[12].security_locked"
    assert result.drive_config.drives[12].serial == """BTWL321503HY300PGN""", "Died on +.drive_config.drives[12].serial"
    assert result.drive_config.drives[12].size == 300069052416, "Died on +.drive_config.drives[12].size"
    assert result.drive_config.drives[12].slot == 8, "Died on +.drive_config.drives[12].slot"
    assert result.drive_config.drives[12].uuid == UUID("1e736562-4fd3-9277-c6d9-db2c7e96001f"), "Died on .drive_config.drives[12].uuid"
    assert result.drive_config.drives[12].dev_path == """/dev/slot8""", "Died on +.drive_config.drives[12].dev_path"
    assert result.drive_config.drives[12].version == """D2010370""", "Died on +.drive_config.drives[12].version"
    assert result.drive_config.drives[12].security_supported == True, "Died on +.drive_config.drives[12].security_supported"
    assert result.drive_config.drives[12].drive_type == """Block""", "Died on +.drive_config.drives[12].drive_type"
    assert result.drive_config.drives[12].product == """INTEL SSDSC2BB300G4""", "Died on +.drive_config.drives[12].product"
    assert result.drive_config.drives[12].vendor == """Intel""", "Died on +.drive_config.drives[12].vendor"
    assert result.drive_config.drives[12].canonical_name == """sdf""", "Died on +.drive_config.drives[12].canonical_name"
    assert result.drive_config.drives[12].security_frozen == False, "Died on +.drive_config.drives[12].security_frozen"
    assert result.drive_config.drives[12].connected == True, "Died on +.drive_config.drives[12].connected"
    assert result.drive_config.drives[12].security_enabled == False, "Died on +.drive_config.drives[12].security_enabled"
    assert result.drive_config.drives[12].path == """/dev/sdf""", "Died on +.drive_config.drives[12].path"
    assert result.drive_config.drives[12].scsi_state == """Running""", "Died on +.drive_config.drives[12].scsi_state"
    assert result.drive_config.drives[12].scsi_compat_id == """scsi-SATA_INTEL_SSDSC2BB3BTWL321503HY300PGN""", "Died on +.drive_config.drives[12].scsi_compat_id"
    assert result.drive_config.drives[12].name == """scsi-SATA_INTEL_SSDSC2BB3BTWL321503HY300PGN""", "Died on +.drive_config.drives[12].name"
    assert result.drive_config.drives[12].dev == 2128, "Died on +.drive_config.drives[12].dev"
    assert result.drive_config.drives[12].security_at_maximum == False, "Died on +.drive_config.drives[12].security_at_maximum"
    assert result.drive_config.drives[12].path_link == """/dev/slot8""", "Died on +.drive_config.drives[12].path_link"
    assert result.drive_config.drives[11].security_locked == False, "Died on +.drive_config.drives[11].security_locked"
    assert result.drive_config.drives[11].serial == """BTWL3215032Y300PGN""", "Died on +.drive_config.drives[11].serial"
    assert result.drive_config.drives[11].size == 300069052416, "Died on +.drive_config.drives[11].size"
    assert result.drive_config.drives[11].slot == 7, "Died on +.drive_config.drives[11].slot"
    assert result.drive_config.drives[11].uuid == UUID("fe27e2f9-a9c7-d9c1-6b93-e7d6671ef1b6"), "Died on .drive_config.drives[11].uuid"
    assert result.drive_config.drives[11].dev_path == """/dev/slot7""", "Died on +.drive_config.drives[11].dev_path"
    assert result.drive_config.drives[11].version == """D2010370""", "Died on +.drive_config.drives[11].version"
    assert result.drive_config.drives[11].security_supported == True, "Died on +.drive_config.drives[11].security_supported"
    assert result.drive_config.drives[11].drive_type == """Block""", "Died on +.drive_config.drives[11].drive_type"
    assert result.drive_config.drives[11].product == """INTEL SSDSC2BB300G4""", "Died on +.drive_config.drives[11].product"
    assert result.drive_config.drives[11].vendor == """Intel""", "Died on +.drive_config.drives[11].vendor"
    assert result.drive_config.drives[11].canonical_name == """sde""", "Died on +.drive_config.drives[11].canonical_name"
    assert result.drive_config.drives[11].security_frozen == False, "Died on +.drive_config.drives[11].security_frozen"
    assert result.drive_config.drives[11].connected == True, "Died on +.drive_config.drives[11].connected"
    assert result.drive_config.drives[11].security_enabled == False, "Died on +.drive_config.drives[11].security_enabled"
    assert result.drive_config.drives[11].path == """/dev/sde""", "Died on +.drive_config.drives[11].path"
    assert result.drive_config.drives[11].scsi_state == """Running""", "Died on +.drive_config.drives[11].scsi_state"
    assert result.drive_config.drives[11].scsi_compat_id == """scsi-SATA_INTEL_SSDSC2BB3BTWL3215032Y300PGN""", "Died on +.drive_config.drives[11].scsi_compat_id"
    assert result.drive_config.drives[11].name == """scsi-SATA_INTEL_SSDSC2BB3BTWL3215032Y300PGN""", "Died on +.drive_config.drives[11].name"
    assert result.drive_config.drives[11].dev == 2112, "Died on +.drive_config.drives[11].dev"
    assert result.drive_config.drives[11].security_at_maximum == False, "Died on +.drive_config.drives[11].security_at_maximum"
    assert result.drive_config.drives[11].path_link == """/dev/slot7""", "Died on +.drive_config.drives[11].path_link"
    assert result.drive_config.drives[10].security_locked == False, "Died on +.drive_config.drives[10].security_locked"
    assert result.drive_config.drives[10].serial == """BTWL321502V9300PGN""", "Died on +.drive_config.drives[10].serial"
    assert result.drive_config.drives[10].size == 300069052416, "Died on +.drive_config.drives[10].size"
    assert result.drive_config.drives[10].slot == 6, "Died on +.drive_config.drives[10].slot"
    assert result.drive_config.drives[10].uuid == UUID("f950fe23-9292-487b-cebb-5f4d16c17c11"), "Died on .drive_config.drives[10].uuid"
    assert result.drive_config.drives[10].dev_path == """/dev/slot6""", "Died on +.drive_config.drives[10].dev_path"
    assert result.drive_config.drives[10].version == """D2010370""", "Died on +.drive_config.drives[10].version"
    assert result.drive_config.drives[10].security_supported == True, "Died on +.drive_config.drives[10].security_supported"
    assert result.drive_config.drives[10].drive_type == """Block""", "Died on +.drive_config.drives[10].drive_type"
    assert result.drive_config.drives[10].product == """INTEL SSDSC2BB300G4""", "Died on +.drive_config.drives[10].product"
    assert result.drive_config.drives[10].vendor == """Intel""", "Died on +.drive_config.drives[10].vendor"
    assert result.drive_config.drives[10].canonical_name == """sdc""", "Died on +.drive_config.drives[10].canonical_name"
    assert result.drive_config.drives[10].security_frozen == False, "Died on +.drive_config.drives[10].security_frozen"
    assert result.drive_config.drives[10].connected == True, "Died on +.drive_config.drives[10].connected"
    assert result.drive_config.drives[10].security_enabled == False, "Died on +.drive_config.drives[10].security_enabled"
    assert result.drive_config.drives[10].path == """/dev/sdc""", "Died on +.drive_config.drives[10].path"
    assert result.drive_config.drives[10].scsi_state == """Running""", "Died on +.drive_config.drives[10].scsi_state"
    assert result.drive_config.drives[10].scsi_compat_id == """scsi-SATA_INTEL_SSDSC2BB3BTWL321502V9300PGN""", "Died on +.drive_config.drives[10].scsi_compat_id"
    assert result.drive_config.drives[10].name == """scsi-SATA_INTEL_SSDSC2BB3BTWL321502V9300PGN""", "Died on +.drive_config.drives[10].name"
    assert result.drive_config.drives[10].dev == 2080, "Died on +.drive_config.drives[10].dev"
    assert result.drive_config.drives[10].security_at_maximum == False, "Died on +.drive_config.drives[10].security_at_maximum"
    assert result.drive_config.drives[10].path_link == """/dev/slot6""", "Died on +.drive_config.drives[10].path_link"
    assert result.drive_config.drives[9].security_locked == False, "Died on +.drive_config.drives[9].security_locked"
    assert result.drive_config.drives[9].serial == """BTWL321502V3300PGN""", "Died on +.drive_config.drives[9].serial"
    assert result.drive_config.drives[9].size == 300069052416, "Died on +.drive_config.drives[9].size"
    assert result.drive_config.drives[9].slot == 5, "Died on +.drive_config.drives[9].slot"
    assert result.drive_config.drives[9].uuid == UUID("8502fb9d-6634-92a1-ee3d-e3523e53d2f0"), "Died on .drive_config.drives[9].uuid"
    assert result.drive_config.drives[9].dev_path == """/dev/slot5""", "Died on +.drive_config.drives[9].dev_path"
    assert result.drive_config.drives[9].version == """D2010370""", "Died on +.drive_config.drives[9].version"
    assert result.drive_config.drives[9].security_supported == True, "Died on +.drive_config.drives[9].security_supported"
    assert result.drive_config.drives[9].drive_type == """Block""", "Died on +.drive_config.drives[9].drive_type"
    assert result.drive_config.drives[9].product == """INTEL SSDSC2BB300G4""", "Died on +.drive_config.drives[9].product"
    assert result.drive_config.drives[9].vendor == """Intel""", "Died on +.drive_config.drives[9].vendor"
    assert result.drive_config.drives[9].canonical_name == """sdk""", "Died on +.drive_config.drives[9].canonical_name"
    assert result.drive_config.drives[9].security_frozen == False, "Died on +.drive_config.drives[9].security_frozen"
    assert result.drive_config.drives[9].connected == True, "Died on +.drive_config.drives[9].connected"
    assert result.drive_config.drives[9].security_enabled == False, "Died on +.drive_config.drives[9].security_enabled"
    assert result.drive_config.drives[9].path == """/dev/sdk""", "Died on +.drive_config.drives[9].path"
    assert result.drive_config.drives[9].scsi_state == """Running""", "Died on +.drive_config.drives[9].scsi_state"
    assert result.drive_config.drives[9].scsi_compat_id == """scsi-SATA_INTEL_SSDSC2BB3BTWL321502V3300PGN""", "Died on +.drive_config.drives[9].scsi_compat_id"
    assert result.drive_config.drives[9].name == """scsi-SATA_INTEL_SSDSC2BB3BTWL321502V3300PGN""", "Died on +.drive_config.drives[9].name"
    assert result.drive_config.drives[9].dev == 2208, "Died on +.drive_config.drives[9].dev"
    assert result.drive_config.drives[9].security_at_maximum == False, "Died on +.drive_config.drives[9].security_at_maximum"
    assert result.drive_config.drives[9].path_link == """/dev/slot5""", "Died on +.drive_config.drives[9].path_link"
    assert result.drive_config.drives[8].security_locked == False, "Died on +.drive_config.drives[8].security_locked"
    assert result.drive_config.drives[8].serial == """BTWL32150137300PGN""", "Died on +.drive_config.drives[8].serial"
    assert result.drive_config.drives[8].size == 300069052416, "Died on +.drive_config.drives[8].size"
    assert result.drive_config.drives[8].slot == 4, "Died on +.drive_config.drives[8].slot"
    assert result.drive_config.drives[8].uuid == UUID("bd58fe69-2754-766c-a936-a362c4b50704"), "Died on .drive_config.drives[8].uuid"
    assert result.drive_config.drives[8].dev_path == """/dev/slot4""", "Died on +.drive_config.drives[8].dev_path"
    assert result.drive_config.drives[8].version == """D2010370""", "Died on +.drive_config.drives[8].version"
    assert result.drive_config.drives[8].security_supported == True, "Died on +.drive_config.drives[8].security_supported"
    assert result.drive_config.drives[8].drive_type == """Block""", "Died on +.drive_config.drives[8].drive_type"
    assert result.drive_config.drives[8].product == """INTEL SSDSC2BB300G4""", "Died on +.drive_config.drives[8].product"
    assert result.drive_config.drives[8].vendor == """Intel""", "Died on +.drive_config.drives[8].vendor"
    assert result.drive_config.drives[8].canonical_name == """sdi""", "Died on +.drive_config.drives[8].canonical_name"
    assert result.drive_config.drives[8].security_frozen == False, "Died on +.drive_config.drives[8].security_frozen"
    assert result.drive_config.drives[8].connected == True, "Died on +.drive_config.drives[8].connected"
    assert result.drive_config.drives[8].security_enabled == False, "Died on +.drive_config.drives[8].security_enabled"
    assert result.drive_config.drives[8].path == """/dev/sdi""", "Died on +.drive_config.drives[8].path"
    assert result.drive_config.drives[8].scsi_state == """Running""", "Died on +.drive_config.drives[8].scsi_state"
    assert result.drive_config.drives[8].scsi_compat_id == """scsi-SATA_INTEL_SSDSC2BB3BTWL32150137300PGN""", "Died on +.drive_config.drives[8].scsi_compat_id"
    assert result.drive_config.drives[8].name == """scsi-SATA_INTEL_SSDSC2BB3BTWL32150137300PGN""", "Died on +.drive_config.drives[8].name"
    assert result.drive_config.drives[8].dev == 2176, "Died on +.drive_config.drives[8].dev"
    assert result.drive_config.drives[8].security_at_maximum == False, "Died on +.drive_config.drives[8].security_at_maximum"
    assert result.drive_config.drives[8].path_link == """/dev/slot4""", "Died on +.drive_config.drives[8].path_link"
    assert result.drive_config.drives[7].security_locked == False, "Died on +.drive_config.drives[7].security_locked"
    assert result.drive_config.drives[7].serial == """BTWL321503AL300PGN""", "Died on +.drive_config.drives[7].serial"
    assert result.drive_config.drives[7].size == 300069052416, "Died on +.drive_config.drives[7].size"
    assert result.drive_config.drives[7].slot == 3, "Died on +.drive_config.drives[7].slot"
    assert result.drive_config.drives[7].uuid == UUID("8bd5735d-3995-88d2-04b8-1e8bf34592ac"), "Died on .drive_config.drives[7].uuid"
    assert result.drive_config.drives[7].dev_path == """/dev/slot3""", "Died on +.drive_config.drives[7].dev_path"
    assert result.drive_config.drives[7].version == """D2010370""", "Died on +.drive_config.drives[7].version"
    assert result.drive_config.drives[7].security_supported == True, "Died on +.drive_config.drives[7].security_supported"
    assert result.drive_config.drives[7].drive_type == """Block""", "Died on +.drive_config.drives[7].drive_type"
    assert result.drive_config.drives[7].product == """INTEL SSDSC2BB300G4""", "Died on +.drive_config.drives[7].product"
    assert result.drive_config.drives[7].vendor == """Intel""", "Died on +.drive_config.drives[7].vendor"
    assert result.drive_config.drives[7].canonical_name == """sdg""", "Died on +.drive_config.drives[7].canonical_name"
    assert result.drive_config.drives[7].security_frozen == False, "Died on +.drive_config.drives[7].security_frozen"
    assert result.drive_config.drives[7].connected == True, "Died on +.drive_config.drives[7].connected"
    assert result.drive_config.drives[7].security_enabled == False, "Died on +.drive_config.drives[7].security_enabled"
    assert result.drive_config.drives[7].path == """/dev/sdg""", "Died on +.drive_config.drives[7].path"
    assert result.drive_config.drives[7].scsi_state == """Running""", "Died on +.drive_config.drives[7].scsi_state"
    assert result.drive_config.drives[7].scsi_compat_id == """scsi-SATA_INTEL_SSDSC2BB3BTWL321503AL300PGN""", "Died on +.drive_config.drives[7].scsi_compat_id"
    assert result.drive_config.drives[7].name == """scsi-SATA_INTEL_SSDSC2BB3BTWL321503AL300PGN""", "Died on +.drive_config.drives[7].name"
    assert result.drive_config.drives[7].dev == 2144, "Died on +.drive_config.drives[7].dev"
    assert result.drive_config.drives[7].security_at_maximum == False, "Died on +.drive_config.drives[7].security_at_maximum"
    assert result.drive_config.drives[7].path_link == """/dev/slot3""", "Died on +.drive_config.drives[7].path_link"
    assert result.drive_config.drives[6].security_locked == False, "Died on +.drive_config.drives[6].security_locked"
    assert result.drive_config.drives[6].serial == """BTWL321502TN300PGN""", "Died on +.drive_config.drives[6].serial"
    assert result.drive_config.drives[6].size == 300069052416, "Died on +.drive_config.drives[6].size"
    assert result.drive_config.drives[6].slot == 2, "Died on +.drive_config.drives[6].slot"
    assert result.drive_config.drives[6].uuid == UUID("a474c937-e0a1-f7c5-f7b6-f382a1523775"), "Died on .drive_config.drives[6].uuid"
    assert result.drive_config.drives[6].dev_path == """/dev/slot2""", "Died on +.drive_config.drives[6].dev_path"
    assert result.drive_config.drives[6].version == """D2010370""", "Died on +.drive_config.drives[6].version"
    assert result.drive_config.drives[6].security_supported == True, "Died on +.drive_config.drives[6].security_supported"
    assert result.drive_config.drives[6].drive_type == """Block""", "Died on +.drive_config.drives[6].drive_type"
    assert result.drive_config.drives[6].product == """INTEL SSDSC2BB300G4""", "Died on +.drive_config.drives[6].product"
    assert result.drive_config.drives[6].vendor == """Intel""", "Died on +.drive_config.drives[6].vendor"
    assert result.drive_config.drives[6].canonical_name == """sdj""", "Died on +.drive_config.drives[6].canonical_name"
    assert result.drive_config.drives[6].security_frozen == False, "Died on +.drive_config.drives[6].security_frozen"
    assert result.drive_config.drives[6].connected == True, "Died on +.drive_config.drives[6].connected"
    assert result.drive_config.drives[6].security_enabled == False, "Died on +.drive_config.drives[6].security_enabled"
    assert result.drive_config.drives[6].path == """/dev/sdj""", "Died on +.drive_config.drives[6].path"
    assert result.drive_config.drives[6].scsi_state == """Running""", "Died on +.drive_config.drives[6].scsi_state"
    assert result.drive_config.drives[6].scsi_compat_id == """scsi-SATA_INTEL_SSDSC2BB3BTWL321502TN300PGN""", "Died on +.drive_config.drives[6].scsi_compat_id"
    assert result.drive_config.drives[6].name == """scsi-SATA_INTEL_SSDSC2BB3BTWL321502TN300PGN""", "Died on +.drive_config.drives[6].name"
    assert result.drive_config.drives[6].dev == 2192, "Died on +.drive_config.drives[6].dev"
    assert result.drive_config.drives[6].security_at_maximum == False, "Died on +.drive_config.drives[6].security_at_maximum"
    assert result.drive_config.drives[6].path_link == """/dev/slot2""", "Died on +.drive_config.drives[6].path_link"
    assert result.drive_config.drives[5].security_locked == False, "Died on +.drive_config.drives[5].security_locked"
    assert result.drive_config.drives[5].serial == """BTWL321503CP300PGN""", "Died on +.drive_config.drives[5].serial"
    assert result.drive_config.drives[5].size == 300069052416, "Died on +.drive_config.drives[5].size"
    assert result.drive_config.drives[5].slot == 1, "Died on +.drive_config.drives[5].slot"
    assert result.drive_config.drives[5].uuid == UUID("755f83bd-dd7e-94f3-35b9-e3a752cdfa0a"), "Died on .drive_config.drives[5].uuid"
    assert result.drive_config.drives[5].dev_path == """/dev/slot1""", "Died on +.drive_config.drives[5].dev_path"
    assert result.drive_config.drives[5].version == """D2010370""", "Died on +.drive_config.drives[5].version"
    assert result.drive_config.drives[5].security_supported == True, "Died on +.drive_config.drives[5].security_supported"
    assert result.drive_config.drives[5].drive_type == """Block""", "Died on +.drive_config.drives[5].drive_type"
    assert result.drive_config.drives[5].product == """INTEL SSDSC2BB300G4""", "Died on +.drive_config.drives[5].product"
    assert result.drive_config.drives[5].vendor == """Intel""", "Died on +.drive_config.drives[5].vendor"
    assert result.drive_config.drives[5].canonical_name == """sdh""", "Died on +.drive_config.drives[5].canonical_name"
    assert result.drive_config.drives[5].security_frozen == False, "Died on +.drive_config.drives[5].security_frozen"
    assert result.drive_config.drives[5].connected == True, "Died on +.drive_config.drives[5].connected"
    assert result.drive_config.drives[5].security_enabled == False, "Died on +.drive_config.drives[5].security_enabled"
    assert result.drive_config.drives[5].path == """/dev/sdh""", "Died on +.drive_config.drives[5].path"
    assert result.drive_config.drives[5].scsi_state == """Running""", "Died on +.drive_config.drives[5].scsi_state"
    assert result.drive_config.drives[5].scsi_compat_id == """scsi-SATA_INTEL_SSDSC2BB3BTWL321503CP300PGN""", "Died on +.drive_config.drives[5].scsi_compat_id"
    assert result.drive_config.drives[5].name == """scsi-SATA_INTEL_SSDSC2BB3BTWL321503CP300PGN""", "Died on +.drive_config.drives[5].name"
    assert result.drive_config.drives[5].dev == 2160, "Died on +.drive_config.drives[5].dev"
    assert result.drive_config.drives[5].security_at_maximum == False, "Died on +.drive_config.drives[5].security_at_maximum"
    assert result.drive_config.drives[5].path_link == """/dev/slot1""", "Died on +.drive_config.drives[5].path_link"
    assert result.drive_config.drives[4].security_locked == False, "Died on +.drive_config.drives[4].security_locked"
    assert result.drive_config.drives[4].serial == """BTWL321600AV300PGN""", "Died on +.drive_config.drives[4].serial"
    assert result.drive_config.drives[4].size == 300069052416, "Died on +.drive_config.drives[4].size"
    assert result.drive_config.drives[4].slot == 0, "Died on +.drive_config.drives[4].slot"
    assert result.drive_config.drives[4].uuid == UUID("becec4d2-4e96-6bb8-11b2-afea685ab4fd"), "Died on .drive_config.drives[4].uuid"
    assert result.drive_config.drives[4].dev_path == """/dev/slot0""", "Died on +.drive_config.drives[4].dev_path"
    assert result.drive_config.drives[4].version == """D2010370""", "Died on +.drive_config.drives[4].version"
    assert result.drive_config.drives[4].security_supported == True, "Died on +.drive_config.drives[4].security_supported"
    assert result.drive_config.drives[4].drive_type == """Block""", "Died on +.drive_config.drives[4].drive_type"
    assert result.drive_config.drives[4].product == """INTEL SSDSC2BB300G4""", "Died on +.drive_config.drives[4].product"
    assert result.drive_config.drives[4].vendor == """Intel""", "Died on +.drive_config.drives[4].vendor"
    assert result.drive_config.drives[4].canonical_name == """sdb""", "Died on +.drive_config.drives[4].canonical_name"
    assert result.drive_config.drives[4].security_frozen == False, "Died on +.drive_config.drives[4].security_frozen"
    assert result.drive_config.drives[4].connected == True, "Died on +.drive_config.drives[4].connected"
    assert result.drive_config.drives[4].security_enabled == False, "Died on +.drive_config.drives[4].security_enabled"
    assert result.drive_config.drives[4].path == """/dev/sdb""", "Died on +.drive_config.drives[4].path"
    assert result.drive_config.drives[4].scsi_state == """Running""", "Died on +.drive_config.drives[4].scsi_state"
    assert result.drive_config.drives[4].scsi_compat_id == """scsi-SATA_INTEL_SSDSC2BB3BTWL321600AV300PGN""", "Died on +.drive_config.drives[4].scsi_compat_id"
    assert result.drive_config.drives[4].name == """scsi-SATA_INTEL_SSDSC2BB3BTWL321600AV300PGN""", "Died on +.drive_config.drives[4].name"
    assert result.drive_config.drives[4].dev == 2064, "Died on +.drive_config.drives[4].dev"
    assert result.drive_config.drives[4].security_at_maximum == False, "Died on +.drive_config.drives[4].security_at_maximum"
    assert result.drive_config.drives[4].path_link == """/dev/slot0""", "Died on +.drive_config.drives[4].path_link"
    assert result.drive_config.drives[3].security_locked == False, "Died on +.drive_config.drives[3].security_locked"
    assert result.drive_config.drives[3].serial == """205044033""", "Died on +.drive_config.drives[3].serial"
    assert result.drive_config.drives[3].size == 299988156416, "Died on +.drive_config.drives[3].size"
    assert result.drive_config.drives[3].slot == -1, "Died on +.drive_config.drives[3].slot"
    assert result.drive_config.drives[3].uuid == UUID("d293a1c8-8388-8fa0-7627-7c74b0f65bd9"), "Died on .drive_config.drives[3].uuid"
    assert result.drive_config.drives[3].dev_path == """/dev/sdimm0p4""", "Died on +.drive_config.drives[3].dev_path"
    assert result.drive_config.drives[3].version == """515ABBF0""", "Died on +.drive_config.drives[3].version"
    assert result.drive_config.drives[3].security_supported == True, "Died on +.drive_config.drives[3].security_supported"
    assert result.drive_config.drives[3].drive_type == """Slice""", "Died on +.drive_config.drives[3].drive_type"
    assert result.drive_config.drives[3].product == """VRFSD3400GNCVMTJS1""", "Died on +.drive_config.drives[3].product"
    assert result.drive_config.drives[3].vendor == """Viking""", "Died on +.drive_config.drives[3].vendor"
    assert result.drive_config.drives[3].canonical_name == """sda""", "Died on +.drive_config.drives[3].canonical_name"
    assert result.drive_config.drives[3].security_frozen == True, "Died on +.drive_config.drives[3].security_frozen"
    assert result.drive_config.drives[3].connected == True, "Died on +.drive_config.drives[3].connected"
    assert result.drive_config.drives[3].security_enabled == False, "Died on +.drive_config.drives[3].security_enabled"
    assert result.drive_config.drives[3].path == """/dev/sda4""", "Died on +.drive_config.drives[3].path"
    assert result.drive_config.drives[3].scsi_state == """Running""", "Died on +.drive_config.drives[3].scsi_state"
    assert result.drive_config.drives[3].scsi_compat_id == """scsi-SATA_VRFSD3400GNCVMT205044033-part4""", "Died on +.drive_config.drives[3].scsi_compat_id"
    assert result.drive_config.drives[3].name == """scsi-SATA_VRFSD3400GNCVMT205044033-part4""", "Died on +.drive_config.drives[3].name"
    assert result.drive_config.drives[3].dev == 2052, "Died on +.drive_config.drives[3].dev"
    assert result.drive_config.drives[3].security_at_maximum == False, "Died on +.drive_config.drives[3].security_at_maximum"
    assert result.drive_config.drives[3].path_link == """/dev/sdimm0p4""", "Died on +.drive_config.drives[3].path_link"
    assert result.drive_config.drives[2].security_locked == False, "Died on +.drive_config.drives[2].security_locked"
    assert result.drive_config.drives[2].serial == """log""", "Died on +.drive_config.drives[2].serial"
    assert result.drive_config.drives[2].size == 9223372036854775807, "Died on +.drive_config.drives[2].size"
    assert result.drive_config.drives[2].slot == -2, "Died on +.drive_config.drives[2].slot"
    assert result.drive_config.drives[2].uuid == UUID("dc1d71bb-b5c4-d2a5-e936-db79ef10c19f"), "Died on .drive_config.drives[2].uuid"
    assert result.drive_config.drives[2].dev_path == """/var/log""", "Died on +.drive_config.drives[2].dev_path"
    assert result.drive_config.drives[2].version == """Unknown""", "Died on +.drive_config.drives[2].version"
    assert result.drive_config.drives[2].security_supported == False, "Died on +.drive_config.drives[2].security_supported"
    assert result.drive_config.drives[2].drive_type == """System""", "Died on +.drive_config.drives[2].drive_type"
    assert result.drive_config.drives[2].product == """Unknown""", "Died on +.drive_config.drives[2].product"
    assert result.drive_config.drives[2].vendor == """Unknown""", "Died on +.drive_config.drives[2].vendor"
    assert result.drive_config.drives[2].canonical_name == """log""", "Died on +.drive_config.drives[2].canonical_name"
    assert result.drive_config.drives[2].security_frozen == False, "Died on +.drive_config.drives[2].security_frozen"
    assert result.drive_config.drives[2].connected == False, "Died on +.drive_config.drives[2].connected"
    assert result.drive_config.drives[2].security_enabled == False, "Died on +.drive_config.drives[2].security_enabled"
    assert result.drive_config.drives[2].path == """/var/log""", "Died on +.drive_config.drives[2].path"
    assert result.drive_config.drives[2].scsi_state == """Unknown""", "Died on +.drive_config.drives[2].scsi_state"
    assert result.drive_config.drives[2].scsi_compat_id == """log""", "Died on +.drive_config.drives[2].scsi_compat_id"
    assert result.drive_config.drives[2].name == """log""", "Died on +.drive_config.drives[2].name"
    assert result.drive_config.drives[2].dev == 0, "Died on +.drive_config.drives[2].dev"
    assert result.drive_config.drives[2].security_at_maximum == False, "Died on +.drive_config.drives[2].security_at_maximum"
    assert result.drive_config.drives[2].path_link == """/var/log""", "Died on +.drive_config.drives[2].path_link"
    assert result.drive_config.drives[1].security_locked == False, "Died on +.drive_config.drives[1].security_locked"
    assert result.drive_config.drives[1].serial == """/""", "Died on +.drive_config.drives[1].serial"
    assert result.drive_config.drives[1].size == 9223372036854775807, "Died on +.drive_config.drives[1].size"
    assert result.drive_config.drives[1].slot == -2, "Died on +.drive_config.drives[1].slot"
    assert result.drive_config.drives[1].uuid == UUID("6666cd76-f969-5646-9e7b-e39d750cc7d9"), "Died on .drive_config.drives[1].uuid"
    assert result.drive_config.drives[1].dev_path == """/""", "Died on +.drive_config.drives[1].dev_path"
    assert result.drive_config.drives[1].version == """Unknown""", "Died on +.drive_config.drives[1].version"
    assert result.drive_config.drives[1].security_supported == False, "Died on +.drive_config.drives[1].security_supported"
    assert result.drive_config.drives[1].drive_type == """System""", "Died on +.drive_config.drives[1].drive_type"
    assert result.drive_config.drives[1].product == """Unknown""", "Died on +.drive_config.drives[1].product"
    assert result.drive_config.drives[1].vendor == """Unknown""", "Died on +.drive_config.drives[1].vendor"
    assert result.drive_config.drives[1].canonical_name == """/""", "Died on +.drive_config.drives[1].canonical_name"
    assert result.drive_config.drives[1].security_frozen == False, "Died on +.drive_config.drives[1].security_frozen"
    assert result.drive_config.drives[1].connected == False, "Died on +.drive_config.drives[1].connected"
    assert result.drive_config.drives[1].security_enabled == False, "Died on +.drive_config.drives[1].security_enabled"
    assert result.drive_config.drives[1].path == """/""", "Died on +.drive_config.drives[1].path"
    assert result.drive_config.drives[1].scsi_state == """Unknown""", "Died on +.drive_config.drives[1].scsi_state"
    assert result.drive_config.drives[1].scsi_compat_id == """/""", "Died on +.drive_config.drives[1].scsi_compat_id"
    assert result.drive_config.drives[1].name == """/""", "Died on +.drive_config.drives[1].name"
    assert result.drive_config.drives[1].dev == 0, "Died on +.drive_config.drives[1].dev"
    assert result.drive_config.drives[1].security_at_maximum == False, "Died on +.drive_config.drives[1].security_at_maximum"
    assert result.drive_config.drives[1].path_link == """/""", "Died on +.drive_config.drives[1].path_link"
    assert result.drive_config.drives[0].security_locked == False, "Died on +.drive_config.drives[0].security_locked"
    assert result.drive_config.drives[0].serial == """boot""", "Died on +.drive_config.drives[0].serial"
    assert result.drive_config.drives[0].size == 1024, "Died on +.drive_config.drives[0].size"
    assert result.drive_config.drives[0].slot == -2, "Died on +.drive_config.drives[0].slot"
    assert result.drive_config.drives[0].uuid == UUID("881cc415-7ed6-41a3-65a8-6452f27ed745"), "Died on .drive_config.drives[0].uuid"
    assert result.drive_config.drives[0].dev_path == """/boot""", "Died on +.drive_config.drives[0].dev_path"
    assert result.drive_config.drives[0].version == """Unknown""", "Died on +.drive_config.drives[0].version"
    assert result.drive_config.drives[0].security_supported == False, "Died on +.drive_config.drives[0].security_supported"
    assert result.drive_config.drives[0].drive_type == """System""", "Died on +.drive_config.drives[0].drive_type"
    assert result.drive_config.drives[0].product == """Unknown""", "Died on +.drive_config.drives[0].product"
    assert result.drive_config.drives[0].vendor == """Unknown""", "Died on +.drive_config.drives[0].vendor"
    assert result.drive_config.drives[0].canonical_name == """boot""", "Died on +.drive_config.drives[0].canonical_name"
    assert result.drive_config.drives[0].security_frozen == False, "Died on +.drive_config.drives[0].security_frozen"
    assert result.drive_config.drives[0].connected == False, "Died on +.drive_config.drives[0].connected"
    assert result.drive_config.drives[0].security_enabled == False, "Died on +.drive_config.drives[0].security_enabled"
    assert result.drive_config.drives[0].path == """/boot""", "Died on +.drive_config.drives[0].path"
    assert result.drive_config.drives[0].scsi_state == """Unknown""", "Died on +.drive_config.drives[0].scsi_state"
    assert result.drive_config.drives[0].scsi_compat_id == """boot""", "Died on +.drive_config.drives[0].scsi_compat_id"
    assert result.drive_config.drives[0].name == """boot""", "Died on +.drive_config.drives[0].name"
    assert result.drive_config.drives[0].dev == 0, "Died on +.drive_config.drives[0].dev"
    assert result.drive_config.drives[0].security_at_maximum == False, "Died on +.drive_config.drives[0].security_at_maximum"
    assert result.drive_config.drives[0].path_link == """/boot""", "Died on +.drive_config.drives[0].path_link"
    assert result.drive_config.num_block_actual == 10, "Died on +.drive_config.num_block_actual"
    assert result.drive_config.num_total_actual == 11, "Died on +.drive_config.num_total_actual"
    assert result.drive_config.num_block_expected == 10, "Died on +.drive_config.num_block_expected"

def test_get_hardware_config_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetHardwareConfig_v8.4_0)

    
    result = ef.get_hardware_config()
    assert type(result.hardware_config) is dict, "Died on .hardware_config"

def test_get_hardware_config_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetHardwareConfig_v8.6_0)

    
    result = ef.get_hardware_config()
    assert type(result.hardware_config) is dict, "Died on .hardware_config"

def test_get_hardware_config_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetHardwareConfig_v8.7_0)

    
    result = ef.get_hardware_config()
    assert type(result.hardware_config) is dict, "Died on .hardware_config"

def test_get_hardware_config_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetHardwareConfig_v9.0_0)

    
    result = ef.get_hardware_config()
    assert type(result.hardware_config) is dict, "Died on .hardware_config"

def test_get_hardware_config_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetHardwareConfig_v9.1_0)

    
    result = ef.get_hardware_config()
    assert type(result.hardware_config) is dict, "Died on .hardware_config"

def test_get_hardware_config_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetHardwareConfig_v9.1_1)

    
    result = ef.get_hardware_config()
    assert type(result.hardware_config) is dict, "Died on .hardware_config"

def test_get_limits_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetLimits_v9.1_0)

    
    result = ef.get_limits()
    assert result.initiator_count_max == 10000, "Died on +.initiator_count_max"
    assert result.iscsi_sessions_from_fibre_channel_nodes_max == 4096, "Died on +.iscsi_sessions_from_fibre_channel_nodes_max"
    assert result.cluster_pairs_count_max == 4, "Died on +.cluster_pairs_count_max"
    assert result.volume_max_iopsmin == 100, "Died on +.volume_max_iopsmin"
    assert result.volume_size_max == 8000000491520, "Died on +.volume_size_max"
    assert result.fibre_channel_volume_access_max == 16384, "Died on +.fibre_channel_volume_access_max"
    assert result.virtual_volume_count_max == 8000, "Died on +.virtual_volume_count_max"
    assert result.volume_burst_iopsmax == 200000, "Died on +.volume_burst_iopsmax"
    assert result.cluster_admin_account_max == 5000, "Died on +.cluster_admin_account_max"
    assert result.virtual_volumes_per_account_count_max == 10000, "Died on +.virtual_volumes_per_account_count_max"
    assert result.volumes_per_volume_access_group_count_max == 2000, "Died on +.volumes_per_volume_access_group_count_max"
    assert result.initiator_name_length_max == 224, "Died on +.initiator_name_length_max"
    assert result.volume_name_length_min == 1, "Died on +.volume_name_length_min"
    assert result.volume_min_iopsmin == 50, "Died on +.volume_min_iopsmin"
    assert result.snapshots_per_volume_max == 32, "Died on +.snapshots_per_volume_max"
    assert result.clone_jobs_per_volume_max == 2, "Died on +.clone_jobs_per_volume_max"
    assert result.volumes_per_group_snapshot_max == 32, "Died on +.volumes_per_group_snapshot_max"
    assert result.volume_max_iopsmax == 200000, "Died on +.volume_max_iopsmax"
    assert result.volume_access_groups_per_initiator_count_max == 1, "Died on +.volume_access_groups_per_initiator_count_max"
    assert result.bulk_volume_jobs_per_node_max == 8, "Died on +.bulk_volume_jobs_per_node_max"
    assert result.initiators_per_volume_access_group_count_max == 64, "Died on +.initiators_per_volume_access_group_count_max"
    assert result.volume_access_groups_per_volume_count_max == 4, "Died on +.volume_access_groups_per_volume_count_max"
    assert result.volume_access_group_name_length_max == 64, "Died on +.volume_access_group_name_length_max"
    assert result.account_name_length_min == 1, "Died on +.account_name_length_min"
    assert result.volume_name_length_max == 64, "Died on +.volume_name_length_max"
    assert result.secret_length_max == 16, "Died on +.secret_length_max"
    assert result.account_count_max == 5000, "Died on +.account_count_max"
    assert result.volume_access_group_count_max == 1000, "Died on +.volume_access_group_count_max"
    assert result.secret_length_min == 12, "Died on +.secret_length_min"
    assert result.volume_access_group_lun_max == 16383, "Died on +.volume_access_group_lun_max"
    assert result.volume_access_group_name_length_min == 1, "Died on +.volume_access_group_name_length_min"
    assert result.volumes_per_account_count_max == 2000, "Died on +.volumes_per_account_count_max"
    assert result.snapshot_name_length_max == 64, "Died on +.snapshot_name_length_max"
    assert result.bulk_volume_jobs_per_volume_max == 2, "Died on +.bulk_volume_jobs_per_volume_max"
    assert result.volume_count_max == 4000, "Died on +.volume_count_max"
    assert result.volume_size_min == 1000000000, "Died on +.volume_size_min"
    assert result.initiator_alias_length_max == 224, "Died on +.initiator_alias_length_max"
    assert result.volume_burst_iopsmin == 100, "Died on +.volume_burst_iopsmin"
    assert result.volume_min_iopsmax == 15000, "Died on +.volume_min_iopsmax"
    assert result.account_name_length_max == 64, "Died on +.account_name_length_max"

def test_get_network_config_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetNetworkConfig_v8.4_0)

    
    result = ef.get_network_config()
    assert result.network.bond1_g.mac_address == """b8:ca:3a:f5:26:54""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.symmetric_route_rules[3] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[3]"
    assert result.network.bond1_g.symmetric_route_rules[2] == """ip rule add from 10.117.56.18 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[2]"
    assert result.network.bond1_g.symmetric_route_rules[1] == """ip route add default via 10.117.57.254 dev Bond1G src 10.117.56.18 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[1]"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add 10.117.56.0/23 dev Bond1G src 10.117.56.18 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """b8:ca:3a:f5:26:54""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """10.117.56.0""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.56.18""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.network == """10.117.56.0""", "Died on +.network.bond1_g.network"
    assert result.network.bond1_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.method == """static""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_fail_over_mac == """Active""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """ActivePassive""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.117.56.18""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_downdelay == """200""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """b8:ca:3a:f5:26:50""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.symmetric_route_rules[2] == """ip rule add from 10.117.58.18 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[2]"
    assert result.network.bond10_g.symmetric_route_rules[1] == """ip route add default via 10.117.59.254 dev Bond10G src 10.117.58.18 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[1]"
    assert result.network.bond10_g.symmetric_route_rules[0] == """ip route add 10.117.58.0/23 dev Bond10G src 10.117.58.18 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[0]"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.gateway == """10.117.59.254""", "Died on +.network.bond10_g.gateway"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """b8:ca:3a:f5:26:50""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """10.117.58.0""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.58.18""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.network == """10.117.58.0""", "Died on +.network.bond10_g.network"
    assert result.network.bond10_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.method == """static""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_fail_over_mac == """Active""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """ActivePassive""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """10.117.58.18""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_downdelay == """200""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """b8:ca:3a:f5:26:56""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """b8:ca:3a:f5:26:56""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """b8:ca:3a:f5:26:56""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """b8:ca:3a:f5:26:56""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """Up""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """b8:ca:3a:f5:26:54""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """b8:ca:3a:f5:26:54""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """b8:ca:3a:f5:26:54""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """b8:ca:3a:f5:26:54""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """b8:ca:3a:f5:26:52""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """b8:ca:3a:f5:26:52""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """b8:ca:3a:f5:26:52""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """b8:ca:3a:f5:26:52""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """Up""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """b8:ca:3a:f5:26:50""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """b8:ca:3a:f5:26:50""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """b8:ca:3a:f5:26:50""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """b8:ca:3a:f5:26:50""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_get_network_config_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetNetworkConfig_v8.6_0)

    
    result = ef.get_network_config()
    assert result.network.bond1_g.mac_address == """b8:ca:3a:f5:10:8f""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.symmetric_route_rules[3] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[3]"
    assert result.network.bond1_g.symmetric_route_rules[2] == """ip rule add from 10.117.56.9 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[2]"
    assert result.network.bond1_g.symmetric_route_rules[1] == """ip route add default via 10.117.57.254 dev Bond1G src 10.117.56.9 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[1]"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add 10.117.56.0/23 dev Bond1G src 10.117.56.9 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """b8:ca:3a:f5:10:8f""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """10.117.56.0""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.56.9""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.network == """10.117.56.0""", "Died on +.network.bond1_g.network"
    assert result.network.bond1_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.method == """static""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_fail_over_mac == """Active""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """ActivePassive""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.117.56.9""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_downdelay == """200""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """b8:ca:3a:f5:10:8b""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.symmetric_route_rules[2] == """ip rule add from 10.117.58.9 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[2]"
    assert result.network.bond10_g.symmetric_route_rules[1] == """ip route add default via 10.117.59.254 dev Bond10G src 10.117.58.9 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[1]"
    assert result.network.bond10_g.symmetric_route_rules[0] == """ip route add 10.117.58.0/23 dev Bond10G src 10.117.58.9 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[0]"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.gateway == """10.117.59.254""", "Died on +.network.bond10_g.gateway"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """b8:ca:3a:f5:10:8b""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """10.117.58.0""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.58.9""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.network == """10.117.58.0""", "Died on +.network.bond10_g.network"
    assert result.network.bond10_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.method == """static""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_fail_over_mac == """Active""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """ActivePassive""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """10.117.58.9""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_downdelay == """200""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """b8:ca:3a:f5:10:91""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """b8:ca:3a:f5:10:91""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """b8:ca:3a:f5:10:91""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """b8:ca:3a:f5:10:91""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """b8:ca:3a:f5:10:8f""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """b8:ca:3a:f5:10:8f""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """b8:ca:3a:f5:10:8f""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """b8:ca:3a:f5:10:8f""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """b8:ca:3a:f5:10:8d""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """b8:ca:3a:f5:10:8d""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """b8:ca:3a:f5:10:8d""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """b8:ca:3a:f5:10:8d""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """b8:ca:3a:f5:10:8b""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """b8:ca:3a:f5:10:8b""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """b8:ca:3a:f5:10:8b""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """b8:ca:3a:f5:10:8b""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_get_network_config_v8.6_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetNetworkConfig_v8.6_1)

    
    result = ef.get_network_config()
    assert result.network.bond1_g.mac_address == """c8:1f:66:d9:f6:99""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """c8:1f:66:d9:f6:99""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """N/A""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.57.148""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.dns_search == """den.solidfire.net., one.den.solidfire.net., solidfire.net., ten.den.solidfire.net.""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.method == """dhcp""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_fail_over_mac == """Active""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.116.133.40, 10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """ActivePassive""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.117.57.148""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_downdelay == """200""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """c8:1f:66:d9:f6:95""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """c8:1f:66:d9:f6:95""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """N/A""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.59.115""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.dns_search == """den.solidfire.net., one.den.solidfire.net., solidfire.net., ten.den.solidfire.net.""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.method == """dhcp""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_fail_over_mac == """Active""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.116.133.40, 10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """ActivePassive""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """10.117.59.115""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_downdelay == """200""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """c8:1f:66:d9:f6:9b""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """c8:1f:66:d9:f6:9b""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """c8:1f:66:d9:f6:9b""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """c8:1f:66:d9:f6:9b""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """c8:1f:66:d9:f6:99""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """c8:1f:66:d9:f6:99""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """c8:1f:66:d9:f6:99""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """c8:1f:66:d9:f6:99""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """c8:1f:66:d9:f6:97""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """c8:1f:66:d9:f6:97""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """c8:1f:66:d9:f6:97""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """c8:1f:66:d9:f6:97""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """c8:1f:66:d9:f6:95""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """c8:1f:66:d9:f6:95""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """c8:1f:66:d9:f6:95""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """c8:1f:66:d9:f6:95""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_get_network_config_v8.6_2():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetNetworkConfig_v8.6_2)

    
    result = ef.get_network_config()
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.mac_address == """44:a8:42:02:92:3c""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g.dns_search == """den.solidfire.net., one.den.solidfire.net., solidfire.net., ten.den.solidfire.net.""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.116.133.40, 10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """ActivePassive""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.address == """10.117.57.37""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.method == """dhcp""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """44:a8:42:02:92:3c""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """N/A""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.57.37""", "Died on +.network.bond1_g.physical.address"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.mac_address == """44:a8:42:02:92:38""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g.dns_search == """den.solidfire.net., one.den.solidfire.net., solidfire.net., ten.den.solidfire.net.""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.116.133.40, 10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """ActivePassive""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.address == """10.117.59.24""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.method == """dhcp""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """44:a8:42:02:92:38""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """N/A""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.59.24""", "Died on +.network.bond10_g.physical.address"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """44:a8:42:02:92:3e""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """44:a8:42:02:92:3e""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """44:a8:42:02:92:3e""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """44:a8:42:02:92:3e""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """44:a8:42:02:92:3c""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """44:a8:42:02:92:3c""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """44:a8:42:02:92:3c""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """44:a8:42:02:92:3c""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """44:a8:42:02:92:3a""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """44:a8:42:02:92:3a""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """44:a8:42:02:92:3a""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """44:a8:42:02:92:3a""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """44:a8:42:02:92:38""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """44:a8:42:02:92:38""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """44:a8:42:02:92:38""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """44:a8:42:02:92:38""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_get_network_config_v8.6_3():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetNetworkConfig_v8.6_3)

    
    result = ef.get_network_config()
    assert result.network.bond1_g.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.bond_fail_over_mac == """None""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g.symmetric_route_rules[3] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[3]"
    assert result.network.bond1_g.symmetric_route_rules[2] == """ip rule add from 10.117.56.22 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[2]"
    assert result.network.bond1_g.symmetric_route_rules[1] == """ip route add default via 10.117.57.254 dev Bond1G src 10.117.56.22 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[1]"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add 10.117.56.0/23 dev Bond1G src 10.117.56.22 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """10.117.56.0""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.56.22""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.network == """10.117.56.0""", "Died on +.network.bond1_g.network"
    assert result.network.bond1_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.method == """static""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_lacp_rate == """Fast""", "Died on +.network.bond1_g.bond_lacp_rate"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """LACP""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.117.56.22""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_xmit_hash_policy == """Layer3_4""", "Died on +.network.bond1_g.bond_xmit_hash_policy"
    assert result.network.bond1_g.bond_downdelay == """200""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.bond_fail_over_mac == """None""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g.symmetric_route_rules[2] == """ip rule add from 10.117.58.22 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[2]"
    assert result.network.bond10_g.symmetric_route_rules[1] == """ip route add default via 10.117.59.254 dev Bond10G src 10.117.58.22 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[1]"
    assert result.network.bond10_g.symmetric_route_rules[0] == """ip route add 10.117.58.0/23 dev Bond10G src 10.117.58.22 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[0]"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.gateway == """10.117.59.254""", "Died on +.network.bond10_g.gateway"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """10.117.58.0""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.58.22""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.network == """10.117.58.0""", "Died on +.network.bond10_g.network"
    assert result.network.bond10_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.method == """static""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_lacp_rate == """Slow""", "Died on +.network.bond10_g.bond_lacp_rate"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """LACP""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """10.117.58.22""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_xmit_hash_policy == """Layer3_4""", "Died on +.network.bond10_g.bond_xmit_hash_policy"
    assert result.network.bond10_g.bond_downdelay == """200""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """44:a8:42:02:cb:77""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """44:a8:42:02:cb:77""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """44:a8:42:02:cb:75""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """44:a8:42:02:cb:75""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """44:a8:42:02:cb:73""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """44:a8:42:02:cb:73""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """44:a8:42:02:cb:71""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """44:a8:42:02:cb:71""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_get_network_config_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetNetworkConfig_v8.7_0)

    
    result = ef.get_network_config()
    assert result.network.bond1_g.mac_address == """c8:1f:66:df:0c:79""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.symmetric_route_rules[3] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[3]"
    assert result.network.bond1_g.symmetric_route_rules[2] == """ip rule add from 10.117.56.49 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[2]"
    assert result.network.bond1_g.symmetric_route_rules[1] == """ip route add default via 10.117.57.254 dev Bond1G src 10.117.56.49 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[1]"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add 10.117.56.0/23 dev Bond1G src 10.117.56.49 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """c8:1f:66:df:0c:79""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """10.117.56.0""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.56.49""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.network == """10.117.56.0""", "Died on +.network.bond1_g.network"
    assert result.network.bond1_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.method == """static""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_fail_over_mac == """Active""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """ActivePassive""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.117.56.49""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_downdelay == """200""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """c8:1f:66:df:0c:75""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.symmetric_route_rules[2] == """ip rule add from 10.117.58.49 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[2]"
    assert result.network.bond10_g.symmetric_route_rules[1] == """ip route add default via 10.117.59.254 dev Bond10G src 10.117.58.49 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[1]"
    assert result.network.bond10_g.symmetric_route_rules[0] == """ip route add 10.117.58.0/23 dev Bond10G src 10.117.58.49 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[0]"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.gateway == """10.117.59.254""", "Died on +.network.bond10_g.gateway"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """c8:1f:66:df:0c:75""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """10.117.58.0""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.58.49""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.network == """10.117.58.0""", "Died on +.network.bond10_g.network"
    assert result.network.bond10_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.method == """static""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_fail_over_mac == """Active""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """ActivePassive""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """10.117.58.49""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_downdelay == """200""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """c8:1f:66:df:0c:7b""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """c8:1f:66:df:0c:7b""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """c8:1f:66:df:0c:7b""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """c8:1f:66:df:0c:7b""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """c8:1f:66:df:0c:79""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """c8:1f:66:df:0c:79""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """c8:1f:66:df:0c:79""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """c8:1f:66:df:0c:79""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """c8:1f:66:df:0c:77""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """c8:1f:66:df:0c:77""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """c8:1f:66:df:0c:77""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """c8:1f:66:df:0c:77""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """c8:1f:66:df:0c:75""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """c8:1f:66:df:0c:75""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """c8:1f:66:df:0c:75""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """c8:1f:66:df:0c:75""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_get_network_config_v8.7_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetNetworkConfig_v8.7_1)

    
    result = ef.get_network_config()
    assert result.network.bond1_g.mac_address == """b0:83:fe:eb:9a:b3""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """b0:83:fe:eb:9a:b3""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """N/A""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.57.104""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.dns_search == """den.solidfire.net., one.den.solidfire.net., solidfire.net., ten.den.solidfire.net.""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.method == """dhcp""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_fail_over_mac == """Active""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.116.133.40, 10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """ActivePassive""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.117.57.104""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_downdelay == """200""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """b0:83:fe:eb:9a:af""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """b0:83:fe:eb:9a:af""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """N/A""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.59.91""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.dns_search == """den.solidfire.net., one.den.solidfire.net., solidfire.net., ten.den.solidfire.net.""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.method == """dhcp""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_fail_over_mac == """Active""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.116.133.40, 10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """ActivePassive""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """10.117.59.91""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_downdelay == """200""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """b0:83:fe:eb:9a:b5""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """b0:83:fe:eb:9a:b5""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """b0:83:fe:eb:9a:b5""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """b0:83:fe:eb:9a:b5""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """b0:83:fe:eb:9a:b3""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """b0:83:fe:eb:9a:b3""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """b0:83:fe:eb:9a:b3""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """b0:83:fe:eb:9a:b3""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """b0:83:fe:eb:9a:b1""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """b0:83:fe:eb:9a:b1""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """b0:83:fe:eb:9a:b1""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """b0:83:fe:eb:9a:b1""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """b0:83:fe:eb:9a:af""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """b0:83:fe:eb:9a:af""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """b0:83:fe:eb:9a:af""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """b0:83:fe:eb:9a:af""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_get_network_config_v8.7_2():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetNetworkConfig_v8.7_2)

    
    result = ef.get_network_config()
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.mac_address == """44:a8:42:02:ad:8b""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g.dns_search == """den.solidfire.net., one.den.solidfire.net., solidfire.net., ten.den.solidfire.net.""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.116.133.40, 10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """ActivePassive""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.address == """10.117.57.25""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.method == """dhcp""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """44:a8:42:02:ad:8b""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """N/A""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.57.25""", "Died on +.network.bond1_g.physical.address"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.mac_address == """44:a8:42:02:ad:87""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g.dns_search == """den.solidfire.net., one.den.solidfire.net., solidfire.net., ten.den.solidfire.net.""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.116.133.40, 10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """ActivePassive""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.address == """10.117.59.14""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.method == """dhcp""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """44:a8:42:02:ad:87""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """N/A""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.59.14""", "Died on +.network.bond10_g.physical.address"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """44:a8:42:02:ad:8d""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """44:a8:42:02:ad:8d""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """44:a8:42:02:ad:8d""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """44:a8:42:02:ad:8d""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """44:a8:42:02:ad:8b""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """44:a8:42:02:ad:8b""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """44:a8:42:02:ad:8b""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """44:a8:42:02:ad:8b""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """44:a8:42:02:ad:89""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """44:a8:42:02:ad:89""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """44:a8:42:02:ad:89""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """44:a8:42:02:ad:89""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """44:a8:42:02:ad:87""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """44:a8:42:02:ad:87""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """44:a8:42:02:ad:87""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """44:a8:42:02:ad:87""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_get_network_config_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetNetworkConfig_v9.0_0)

    
    result = ef.get_network_config()
    assert result.network.bond1_g.mac_address == """b8:ca:3a:f5:1b:cd""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.virtual_network_tag == """0""", "Died on +.network.bond1_g.virtual_network_tag"
    assert result.network.bond1_g.symmetric_route_rules[3] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[3]"
    assert result.network.bond1_g.symmetric_route_rules[2] == """ip rule add from 10.117.56.100 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[2]"
    assert result.network.bond1_g.symmetric_route_rules[1] == """ip route add default via 10.117.57.254 dev Bond1G src 10.117.56.100 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[1]"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add 10.117.56.0/23 dev Bond1G src 10.117.56.100 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """b8:ca:3a:f5:1b:cd""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """10.117.56.0""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.56.100""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.network == """10.117.56.0""", "Died on +.network.bond1_g.network"
    assert result.network.bond1_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.method == """static""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_fail_over_mac == """None""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """ActivePassive""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.117.56.100""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_downdelay == """200""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """b8:ca:3a:f5:1b:c9""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.virtual_network_tag == """0""", "Died on +.network.bond10_g.virtual_network_tag"
    assert result.network.bond10_g.symmetric_route_rules[2] == """ip rule add from 10.117.58.100 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[2]"
    assert result.network.bond10_g.symmetric_route_rules[1] == """ip route add default via 10.117.59.254 dev Bond10G src 10.117.58.100 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[1]"
    assert result.network.bond10_g.symmetric_route_rules[0] == """ip route add 10.117.58.0/23 dev Bond10G src 10.117.58.100 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[0]"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.gateway == """10.117.59.254""", "Died on +.network.bond10_g.gateway"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """b8:ca:3a:f5:1b:c9""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """10.117.58.0""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.58.100""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.network == """10.117.58.0""", "Died on +.network.bond10_g.network"
    assert result.network.bond10_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.method == """static""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_fail_over_mac == """None""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """ActivePassive""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """10.117.58.100""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_downdelay == """200""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """b8:ca:3a:f5:1b:cf""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """b8:ca:3a:f5:1b:cd""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """b8:ca:3a:f5:1b:cf""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """b8:ca:3a:f5:1b:cd""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """b8:ca:3a:f5:1b:cd""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """b8:ca:3a:f5:1b:cd""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """b8:ca:3a:f5:1b:cd""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """b8:ca:3a:f5:1b:cd""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """b8:ca:3a:f5:1b:cb""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """b8:ca:3a:f5:1b:c9""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """b8:ca:3a:f5:1b:cb""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """b8:ca:3a:f5:1b:c9""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """b8:ca:3a:f5:1b:c9""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """b8:ca:3a:f5:1b:c9""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """b8:ca:3a:f5:1b:c9""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """b8:ca:3a:f5:1b:c9""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_get_network_config_v9.0_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetNetworkConfig_v9.0_1)

    
    result = ef.get_network_config()
    assert result.network.bond1_g.mac_address == """c8:1f:66:ec:ee:39""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.virtual_network_tag == """0""", "Died on +.network.bond1_g.virtual_network_tag"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """c8:1f:66:ec:ee:39""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """N/A""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.57.152""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.dns_search == """den.solidfire.net., one.den.solidfire.net., solidfire.net., ten.den.solidfire.net.""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.method == """dhcp""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_fail_over_mac == """None""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.116.133.40, 10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """ActivePassive""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.117.57.152""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_downdelay == """0""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """c8:1f:66:ec:ee:35""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.virtual_network_tag == """0""", "Died on +.network.bond10_g.virtual_network_tag"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """c8:1f:66:ec:ee:35""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """N/A""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.59.177""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.dns_search == """den.solidfire.net., one.den.solidfire.net., solidfire.net., ten.den.solidfire.net.""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.method == """dhcp""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_fail_over_mac == """None""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.116.133.40, 10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """ActivePassive""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """10.117.59.177""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_downdelay == """0""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """c8:1f:66:ec:ee:3b""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """c8:1f:66:ec:ee:39""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """c8:1f:66:ec:ee:3b""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """c8:1f:66:ec:ee:39""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """c8:1f:66:ec:ee:39""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """c8:1f:66:ec:ee:39""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """c8:1f:66:ec:ee:39""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """c8:1f:66:ec:ee:39""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """c8:1f:66:ec:ee:37""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """c8:1f:66:ec:ee:35""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """c8:1f:66:ec:ee:37""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """c8:1f:66:ec:ee:35""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """c8:1f:66:ec:ee:35""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """c8:1f:66:ec:ee:35""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """c8:1f:66:ec:ee:35""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """c8:1f:66:ec:ee:35""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_get_network_config_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetNetworkConfig_v9.1_0)

    
    result = ef.get_network_config()
    assert result.network.bond1_g.mac_address == """44:a8:42:02:af:3b""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.virtual_network_tag == """0""", "Died on +.network.bond1_g.virtual_network_tag"
    assert result.network.bond1_g.symmetric_route_rules[3] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[3]"
    assert result.network.bond1_g.symmetric_route_rules[2] == """ip rule add from 10.117.56.74 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[2]"
    assert result.network.bond1_g.symmetric_route_rules[1] == """ip route add default via 10.117.57.254 dev Bond1G src 10.117.56.74 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[1]"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add 10.117.56.0/23 dev Bond1G src 10.117.56.74 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """44:a8:42:02:af:3b""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """10.117.56.0""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.56.74""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.network == """10.117.56.0""", "Died on +.network.bond1_g.network"
    assert result.network.bond1_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.method == """static""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_fail_over_mac == """None""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """ActivePassive""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.117.56.74""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_downdelay == """200""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """44:a8:42:02:af:37""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.virtual_network_tag == """0""", "Died on +.network.bond10_g.virtual_network_tag"
    assert result.network.bond10_g.symmetric_route_rules[2] == """ip rule add from 10.117.58.74 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[2]"
    assert result.network.bond10_g.symmetric_route_rules[1] == """ip route add default via 10.117.59.254 dev Bond10G src 10.117.58.74 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[1]"
    assert result.network.bond10_g.symmetric_route_rules[0] == """ip route add 10.117.58.0/23 dev Bond10G src 10.117.58.74 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[0]"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.gateway == """10.117.59.254""", "Died on +.network.bond10_g.gateway"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """44:a8:42:02:af:37""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """10.117.58.0""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.58.74""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.network == """10.117.58.0""", "Died on +.network.bond10_g.network"
    assert result.network.bond10_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.method == """static""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_fail_over_mac == """None""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """ActivePassive""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """10.117.58.74""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_downdelay == """200""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """44:a8:42:02:af:3d""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """44:a8:42:02:af:3b""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """44:a8:42:02:af:3d""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """44:a8:42:02:af:3b""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """44:a8:42:02:af:3b""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """44:a8:42:02:af:3b""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """44:a8:42:02:af:3b""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """44:a8:42:02:af:3b""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """44:a8:42:02:af:39""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """44:a8:42:02:af:37""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """44:a8:42:02:af:39""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """44:a8:42:02:af:37""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """44:a8:42:02:af:37""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """44:a8:42:02:af:37""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """44:a8:42:02:af:37""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """44:a8:42:02:af:37""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_get_network_config_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetNetworkConfig_v9.1_1)

    
    result = ef.get_network_config()
    assert result.network.bond1_g.mac_address == """44:a8:42:02:a1:34""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.virtual_network_tag == """0""", "Died on +.network.bond1_g.virtual_network_tag"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """44:a8:42:02:a1:34""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """N/A""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.57.50""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.dns_search == """den.solidfire.net., one.den.solidfire.net., solidfire.net., ten.den.solidfire.net.""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.method == """dhcp""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_fail_over_mac == """None""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.116.133.40, 10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """ActivePassive""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.117.57.50""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_downdelay == """0""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """44:a8:42:02:a1:30""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.virtual_network_tag == """0""", "Died on +.network.bond10_g.virtual_network_tag"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """44:a8:42:02:a1:30""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """N/A""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.59.33""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.dns_search == """den.solidfire.net., one.den.solidfire.net., solidfire.net., ten.den.solidfire.net.""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.method == """dhcp""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_fail_over_mac == """None""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.116.133.40, 10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """ActivePassive""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """10.117.59.33""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_downdelay == """0""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """44:a8:42:02:a1:36""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """44:a8:42:02:a1:34""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """44:a8:42:02:a1:36""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """44:a8:42:02:a1:34""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """44:a8:42:02:a1:34""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """44:a8:42:02:a1:34""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """44:a8:42:02:a1:34""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """44:a8:42:02:a1:34""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """44:a8:42:02:a1:32""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """44:a8:42:02:a1:30""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """44:a8:42:02:a1:32""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """44:a8:42:02:a1:30""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """44:a8:42:02:a1:30""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """44:a8:42:02:a1:30""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """44:a8:42:02:a1:30""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """44:a8:42:02:a1:30""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_get_network_config_v9.1_2():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetNetworkConfig_v9.1_2)

    
    result = ef.get_network_config()
    assert result.network.bond1_g.mac_address == """44:a8:42:02:96:1b""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.virtual_network_tag == """0""", "Died on +.network.bond1_g.virtual_network_tag"
    assert result.network.bond1_g.symmetric_route_rules[3] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[3]"
    assert result.network.bond1_g.symmetric_route_rules[2] == """ip rule add from 10.117.56.23 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[2]"
    assert result.network.bond1_g.symmetric_route_rules[1] == """ip route add default via 10.117.57.254 dev Bond1G src 10.117.56.23 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[1]"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add 10.117.56.0/23 dev Bond1G src 10.117.56.23 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """44:a8:42:02:96:1b""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """10.117.56.0""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.56.23""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.network == """10.117.56.0""", "Died on +.network.bond1_g.network"
    assert result.network.bond1_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.method == """static""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_fail_over_mac == """None""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """ActivePassive""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.117.56.23""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_downdelay == """0""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """44:a8:42:02:96:17""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g.symmetric_route_rules[2] == """ip rule add from 10.117.58.23 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[2]"
    assert result.network.bond10_g.symmetric_route_rules[1] == """ip route add default via 10.117.59.254 dev Bond10G src 10.117.58.23 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[1]"
    assert result.network.bond10_g.symmetric_route_rules[0] == """ip route add 10.117.58.0/23 dev Bond10G src 10.117.58.23 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[0]"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.virtual_network_tag == """0""", "Died on +.network.bond10_g.virtual_network_tag"
    assert result.network.bond10_g.bond_fail_over_mac == """None""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.gateway == """10.117.59.254""", "Died on +.network.bond10_g.gateway"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """44:a8:42:02:96:17""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """10.117.58.0""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.58.23""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.network == """10.117.58.0""", "Died on +.network.bond10_g.network"
    assert result.network.bond10_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.method == """static""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_lacp_rate == """Slow""", "Died on +.network.bond10_g.bond_lacp_rate"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """LACP""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """10.117.58.23""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_xmit_hash_policy == """Layer3_4""", "Died on +.network.bond10_g.bond_xmit_hash_policy"
    assert result.network.bond10_g.bond_downdelay == """0""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_ad_num_ports == """1""", "Died on +.network.bond10_g.bond_ad_num_ports"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """44:a8:42:02:96:1d""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """44:a8:42:02:96:1b""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """44:a8:42:02:96:1d""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """44:a8:42:02:96:1b""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """44:a8:42:02:96:1b""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """44:a8:42:02:96:1b""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """44:a8:42:02:96:1b""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """44:a8:42:02:96:1b""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """44:a8:42:02:96:19""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """44:a8:42:02:96:17""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """44:a8:42:02:96:19""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """44:a8:42:02:96:17""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """44:a8:42:02:96:17""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """44:a8:42:02:96:17""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """44:a8:42:02:96:17""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """44:a8:42:02:96:17""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_get_network_config_v9.1_3():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetNetworkConfig_v9.1_3)

    
    result = ef.get_network_config()
    assert result.network.bond1_g.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g.symmetric_route_rules[3] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[3]"
    assert result.network.bond1_g.symmetric_route_rules[2] == """ip rule add from 10.117.56.22 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[2]"
    assert result.network.bond1_g.symmetric_route_rules[1] == """ip route add default via 10.117.57.254 dev Bond1G src 10.117.56.22 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[1]"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add 10.117.56.0/23 dev Bond1G src 10.117.56.22 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.virtual_network_tag == """0""", "Died on +.network.bond1_g.virtual_network_tag"
    assert result.network.bond1_g.bond_fail_over_mac == """None""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """10.117.56.0""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.56.22""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.network == """10.117.56.0""", "Died on +.network.bond1_g.network"
    assert result.network.bond1_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.method == """static""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_lacp_rate == """Fast""", "Died on +.network.bond1_g.bond_lacp_rate"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """LACP""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.117.56.22""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_xmit_hash_policy == """Layer3_4""", "Died on +.network.bond1_g.bond_xmit_hash_policy"
    assert result.network.bond1_g.bond_downdelay == """0""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_ad_num_ports == """1""", "Died on +.network.bond1_g.bond_ad_num_ports"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g.symmetric_route_rules[2] == """ip rule add from 10.117.58.22 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[2]"
    assert result.network.bond10_g.symmetric_route_rules[1] == """ip route add default via 10.117.59.254 dev Bond10G src 10.117.58.22 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[1]"
    assert result.network.bond10_g.symmetric_route_rules[0] == """ip route add 10.117.58.0/23 dev Bond10G src 10.117.58.22 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[0]"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.virtual_network_tag == """0""", "Died on +.network.bond10_g.virtual_network_tag"
    assert result.network.bond10_g.bond_fail_over_mac == """None""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.gateway == """10.117.59.254""", "Died on +.network.bond10_g.gateway"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """10.117.58.0""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.58.22""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.network == """10.117.58.0""", "Died on +.network.bond10_g.network"
    assert result.network.bond10_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.method == """static""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_lacp_rate == """Slow""", "Died on +.network.bond10_g.bond_lacp_rate"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """LACP""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """10.117.58.22""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_xmit_hash_policy == """Layer3_4""", "Died on +.network.bond10_g.bond_xmit_hash_policy"
    assert result.network.bond10_g.bond_downdelay == """0""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_ad_num_ports == """1""", "Died on +.network.bond10_g.bond_ad_num_ports"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """44:a8:42:02:cb:77""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """44:a8:42:02:cb:77""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """44:a8:42:02:cb:75""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """44:a8:42:02:cb:75""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """44:a8:42:02:cb:73""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """44:a8:42:02:cb:73""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """44:a8:42:02:cb:71""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """44:a8:42:02:cb:71""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_get_network_config_v9.1_4():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetNetworkConfig_v9.1_4)

    
    result = ef.get_network_config()
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.symmetric_route_rules[0] == """ip route add default via 10.117.57.254""", "Died on +.network.eth0.symmetric_route_rules[0]"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """00:50:56:9a:5e:da""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.dns_search == """den.solidfire.net., one.den.solidfire.net., solidfire.net., ten.den.solidfire.net.""", "Died on +.network.eth0.dns_search"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.dns_nameservers == """10.116.133.40, 10.117.30.40""", "Died on +.network.eth0.dns_nameservers"
    assert result.network.eth0.mtu == """1500""", "Died on +.network.eth0.mtu"
    assert result.network.eth0.netmask == """255.255.254.0""", "Died on +.network.eth0.netmask"
    assert result.network.eth0.gateway == """10.117.57.254""", "Died on +.network.eth0.gateway"
    assert result.network.eth0._default == True, "Died on +.network.eth0._default"
    assert result.network.eth0.address == """10.117.57.188""", "Died on +.network.eth0.address"
    assert result.network.eth0.method == """dhcp""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """00:50:56:9a:5e:da""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.mtu == """1500""", "Died on +.network.eth0.physical.mtu"
    assert result.network.eth0.physical.netmask == """255.255.254.0""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """10.117.57.188""", "Died on +.network.eth0.physical.address"

def test_get_network_config_v9.1_5():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetNetworkConfig_v9.1_5)

    
    result = ef.get_network_config()
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.symmetric_route_rules[0] == """ip route add default via 10.117.57.254""", "Died on +.network.eth0.symmetric_route_rules[0]"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """00:50:56:9a:dc:50""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.dns_search == """den.solidfire.net., one.den.solidfire.net., solidfire.net., ten.den.solidfire.net.""", "Died on +.network.eth0.dns_search"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.dns_nameservers == """10.116.133.40, 10.117.30.40""", "Died on +.network.eth0.dns_nameservers"
    assert result.network.eth0.mtu == """1500""", "Died on +.network.eth0.mtu"
    assert result.network.eth0.netmask == """255.255.254.0""", "Died on +.network.eth0.netmask"
    assert result.network.eth0.gateway == """10.117.57.254""", "Died on +.network.eth0.gateway"
    assert result.network.eth0._default == True, "Died on +.network.eth0._default"
    assert result.network.eth0.address == """10.117.57.116""", "Died on +.network.eth0.address"
    assert result.network.eth0.method == """dhcp""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """00:50:56:9a:dc:50""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.mtu == """1500""", "Died on +.network.eth0.physical.mtu"
    assert result.network.eth0.physical.netmask == """255.255.254.0""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """10.117.57.116""", "Died on +.network.eth0.physical.address"

def test_get_network_config_v9.1_6():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetNetworkConfig_v9.1_6)

    
    result = ef.get_network_config()
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.symmetric_route_rules[0] == """ip route add default via 10.117.57.254""", "Died on +.network.eth0.symmetric_route_rules[0]"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """00:50:56:9a:47:07""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.dns_search == """den.solidfire.net., one.den.solidfire.net., solidfire.net., ten.den.solidfire.net.""", "Died on +.network.eth0.dns_search"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.dns_nameservers == """10.116.133.40, 10.117.30.40""", "Died on +.network.eth0.dns_nameservers"
    assert result.network.eth0.mtu == """1500""", "Died on +.network.eth0.mtu"
    assert result.network.eth0.netmask == """255.255.254.0""", "Died on +.network.eth0.netmask"
    assert result.network.eth0.gateway == """10.117.57.254""", "Died on +.network.eth0.gateway"
    assert result.network.eth0._default == True, "Died on +.network.eth0._default"
    assert result.network.eth0.address == """10.117.57.158""", "Died on +.network.eth0.address"
    assert result.network.eth0.method == """dhcp""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """00:50:56:9a:47:07""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.mtu == """1500""", "Died on +.network.eth0.physical.mtu"
    assert result.network.eth0.physical.netmask == """255.255.254.0""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """10.117.57.158""", "Died on +.network.eth0.physical.address"

def test_get_pending_operation_v8.2_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetPendingOperation_v8.2_0)

    
    result = ef.get_pending_operation()
    assert result.pending_operation.pending == False, "Died on +.pending_operation.pending"

def test_get_pending_operation_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetPendingOperation_v8.4_0)

    
    result = ef.get_pending_operation()
    assert result.pending_operation.pending == False, "Died on +.pending_operation.pending"

def test_get_pending_operation_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetPendingOperation_v8.7_0)

    
    result = ef.get_pending_operation()
    assert result.pending_operation.pending == False, "Died on +.pending_operation.pending"

def test_get_pending_operation_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetPendingOperation_v9.0_0)

    
    result = ef.get_pending_operation()
    assert result.pending_operation.pending == False, "Died on +.pending_operation.pending"

def test_get_pending_operation_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetPendingOperation_v9.1_0)

    
    result = ef.get_pending_operation()
    assert result.pending_operation.pending == False, "Died on +.pending_operation.pending"

def test_get_raw_stats_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetRawStats_v9.1_0)

    
    result = ef.get_raw_stats()

def test_get_raw_stats_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_GetRawStats_v9.1_1)

    
    result = ef.get_raw_stats()

def test_list_accounts_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListAccounts_v8.4_0)

    
    start_account_id = 42 # start_account_id
    limit = 42 # limit
    result = ef.list_accounts()
    assert result.accounts[0].username == """ulR5Li38CUxrPC5U""", "Died on +.accounts[0].username"
    assert result.accounts[0].status == """active""", "Died on +.accounts[0].status"
    assert type(result.accounts[0].attributes) is dict, "Died on .accounts[0].attributes"
    assert result.accounts[0].account_id == 1, "Died on +.accounts[0].account_id"

def test_list_accounts_v8.4_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListAccounts_v8.4_1)

    
    start_account_id = 42 # start_account_id
    limit = 42 # limit
    result = ef.list_accounts()
    assert result.accounts[0].username == """ulR5Li38CUxrPC5U""", "Died on +.accounts[0].username"
    assert result.accounts[0].status == """active""", "Died on +.accounts[0].status"
    assert result.accounts[0].volumes[23] == 24, "Died on +.accounts[0].volumes[23]"
    assert result.accounts[0].volumes[22] == 23, "Died on +.accounts[0].volumes[22]"
    assert result.accounts[0].volumes[21] == 22, "Died on +.accounts[0].volumes[21]"
    assert result.accounts[0].volumes[20] == 21, "Died on +.accounts[0].volumes[20]"
    assert result.accounts[0].volumes[19] == 20, "Died on +.accounts[0].volumes[19]"
    assert result.accounts[0].volumes[18] == 19, "Died on +.accounts[0].volumes[18]"
    assert result.accounts[0].volumes[17] == 18, "Died on +.accounts[0].volumes[17]"
    assert result.accounts[0].volumes[16] == 17, "Died on +.accounts[0].volumes[16]"
    assert result.accounts[0].volumes[15] == 16, "Died on +.accounts[0].volumes[15]"
    assert result.accounts[0].volumes[14] == 15, "Died on +.accounts[0].volumes[14]"
    assert result.accounts[0].volumes[13] == 14, "Died on +.accounts[0].volumes[13]"
    assert result.accounts[0].volumes[12] == 13, "Died on +.accounts[0].volumes[12]"
    assert result.accounts[0].volumes[11] == 12, "Died on +.accounts[0].volumes[11]"
    assert result.accounts[0].volumes[10] == 11, "Died on +.accounts[0].volumes[10]"
    assert result.accounts[0].volumes[9] == 10, "Died on +.accounts[0].volumes[9]"
    assert result.accounts[0].volumes[8] == 9, "Died on +.accounts[0].volumes[8]"
    assert result.accounts[0].volumes[7] == 8, "Died on +.accounts[0].volumes[7]"
    assert result.accounts[0].volumes[6] == 7, "Died on +.accounts[0].volumes[6]"
    assert result.accounts[0].volumes[5] == 6, "Died on +.accounts[0].volumes[5]"
    assert result.accounts[0].volumes[4] == 5, "Died on +.accounts[0].volumes[4]"
    assert result.accounts[0].volumes[3] == 4, "Died on +.accounts[0].volumes[3]"
    assert result.accounts[0].volumes[2] == 3, "Died on +.accounts[0].volumes[2]"
    assert result.accounts[0].volumes[1] == 2, "Died on +.accounts[0].volumes[1]"
    assert result.accounts[0].volumes[0] == 1, "Died on +.accounts[0].volumes[0]"
    assert type(result.accounts[0].attributes) is dict, "Died on .accounts[0].attributes"
    assert result.accounts[0].account_id == 1, "Died on +.accounts[0].account_id"

def test_list_accounts_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListAccounts_v8.6_0)

    
    start_account_id = 42 # start_account_id
    limit = 42 # limit
    result = ef.list_accounts()
    assert result.accounts[0].username == """ReplicationSource""", "Died on +.accounts[0].username"
    assert result.accounts[0].status == """active""", "Died on +.accounts[0].status"
    assert result.accounts[0].volumes[4] == 5, "Died on +.accounts[0].volumes[4]"
    assert result.accounts[0].volumes[3] == 4, "Died on +.accounts[0].volumes[3]"
    assert result.accounts[0].volumes[2] == 3, "Died on +.accounts[0].volumes[2]"
    assert result.accounts[0].volumes[1] == 2, "Died on +.accounts[0].volumes[1]"
    assert result.accounts[0].volumes[0] == 1, "Died on +.accounts[0].volumes[0]"
    assert type(result.accounts[0].attributes) is dict, "Died on .accounts[0].attributes"
    assert result.accounts[0].account_id == 1, "Died on +.accounts[0].account_id"

def test_list_accounts_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListAccounts_v8.7_0)

    
    start_account_id = 42 # start_account_id
    limit = 42 # limit
    result = ef.list_accounts()

def test_list_accounts_v8.7_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListAccounts_v8.7_1)

    
    start_account_id = 42 # start_account_id
    limit = 42 # limit
    result = ef.list_accounts()
    assert result.accounts[0].username == """suite-stage-2-QED-0""", "Died on +.accounts[0].username"
    assert result.accounts[0].status == """active""", "Died on +.accounts[0].status"
    assert type(result.accounts[0].attributes) is dict, "Died on .accounts[0].attributes"
    assert result.accounts[0].account_id == 1, "Died on +.accounts[0].account_id"

def test_list_accounts_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListAccounts_v9.0_0)

    
    start_account_id = 42 # start_account_id
    limit = 42 # limit
    result = ef.list_accounts()
    assert result.accounts[0].status == """active""", "Died on +.accounts[0].status"
    assert result.accounts[0].username == """ReplicationSource""", "Died on +.accounts[0].username"
    assert result.accounts[0].storage_container_id == UUID("00000000-0000-0000-0000-000000000000"), "Died on .accounts[0].storage_container_id"
    assert result.accounts[0].volumes[4] == 5, "Died on +.accounts[0].volumes[4]"
    assert result.accounts[0].volumes[3] == 4, "Died on +.accounts[0].volumes[3]"
    assert result.accounts[0].volumes[2] == 3, "Died on +.accounts[0].volumes[2]"
    assert result.accounts[0].volumes[1] == 2, "Died on +.accounts[0].volumes[1]"
    assert result.accounts[0].volumes[0] == 1, "Died on +.accounts[0].volumes[0]"
    assert type(result.accounts[0].attributes) is dict, "Died on .accounts[0].attributes"
    assert result.accounts[0].account_id == 1, "Died on +.accounts[0].account_id"

def test_list_accounts_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListAccounts_v9.1_0)

    
    start_account_id = 42 # start_account_id
    limit = 42 # limit
    result = ef.list_accounts()
    assert result.accounts[2].status == """active""", "Died on +.accounts[2].status"
    assert result.accounts[2].username == """ydUdmjnRp9b20Fc4""", "Died on +.accounts[2].username"
    assert result.accounts[2].storage_container_id == UUID("00000000-0000-0000-0000-000000000000"), "Died on .accounts[2].storage_container_id"
    assert result.accounts[2].volumes[0] == 3, "Died on +.accounts[2].volumes[0]"
    assert type(result.accounts[2].attributes) is dict, "Died on .accounts[2].attributes"
    assert result.accounts[2].account_id == 3, "Died on +.accounts[2].account_id"
    assert result.accounts[1].status == """active""", "Died on +.accounts[1].status"
    assert result.accounts[1].username == """yWcdE86kENMjAczw""", "Died on +.accounts[1].username"
    assert result.accounts[1].storage_container_id == UUID("00000000-0000-0000-0000-000000000000"), "Died on .accounts[1].storage_container_id"
    assert result.accounts[1].volumes[0] == 2, "Died on +.accounts[1].volumes[0]"
    assert type(result.accounts[1].attributes) is dict, "Died on .accounts[1].attributes"
    assert result.accounts[1].account_id == 2, "Died on +.accounts[1].account_id"
    assert result.accounts[0].status == """active""", "Died on +.accounts[0].status"
    assert result.accounts[0].username == """fCAuWsvtbmVb5Bpp""", "Died on +.accounts[0].username"
    assert result.accounts[0].storage_container_id == UUID("00000000-0000-0000-0000-000000000000"), "Died on .accounts[0].storage_container_id"
    assert result.accounts[0].volumes[0] == 1, "Died on +.accounts[0].volumes[0]"
    assert type(result.accounts[0].attributes) is dict, "Died on .accounts[0].attributes"
    assert result.accounts[0].account_id == 1, "Died on +.accounts[0].account_id"

def test_list_active_nodes_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListActiveNodes_v8.4_0)

    
    result = ef.list_active_nodes()
    assert result.nodes[3].sip == """10.117.58.19""", "Died on +.nodes[3].sip"
    assert result.nodes[3].node_id == 4, "Died on +.nodes[3].node_id"
    assert result.nodes[3].uuid == UUID("4C4C4544-0048-4710-8057-C7C04F395931"), "Died on .nodes[3].uuid"
    assert result.nodes[3].name == """NLABP0908""", "Died on +.nodes[3].name"
    assert result.nodes[3].platform_info.node_type == """SF9605""", "Died on +.nodes[3].platform_info.node_type"
    assert result.nodes[3].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz""", "Died on +.nodes[3].platform_info.cpu_model"
    assert result.nodes[3].platform_info.node_memory_gb == 256, "Died on +.nodes[3].platform_info.node_memory_gb"
    assert result.nodes[3].platform_info.chassis_type == """R620""", "Died on +.nodes[3].platform_info.chassis_type"
    assert result.nodes[3].sipi == """Bond10G""", "Died on +.nodes[3].sipi"
    assert result.nodes[3].mipi == """Bond1G""", "Died on +.nodes[3].mipi"
    assert result.nodes[3].software_version == """8.4.0.68""", "Died on +.nodes[3].software_version"
    assert result.nodes[3].cip == """10.117.58.19""", "Died on +.nodes[3].cip"
    assert result.nodes[3].fibre_channel_target_port_group is None, "Died on .nodes[3].fibre_channel_target_port_group"
    assert result.nodes[3].mip == """10.117.56.19""", "Died on +.nodes[3].mip"
    assert result.nodes[3].associated_fservice_id == 0, "Died on +.nodes[3].associated_fservice_id"
    assert result.nodes[3].associated_master_service_id == 4, "Died on +.nodes[3].associated_master_service_id"
    assert result.nodes[3].cipi == """Bond10G""", "Died on +.nodes[3].cipi"
    assert type(result.nodes[3].attributes) is dict, "Died on .nodes[3].attributes"
    assert result.nodes[2].sip == """10.117.58.18""", "Died on +.nodes[2].sip"
    assert result.nodes[2].node_id == 3, "Died on +.nodes[2].node_id"
    assert result.nodes[2].uuid == UUID("4C4C4544-0048-4E10-8057-C7C04F395931"), "Died on .nodes[2].uuid"
    assert result.nodes[2].name == """NLABP0907""", "Died on +.nodes[2].name"
    assert result.nodes[2].platform_info.node_type == """SF9605""", "Died on +.nodes[2].platform_info.node_type"
    assert result.nodes[2].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz""", "Died on +.nodes[2].platform_info.cpu_model"
    assert result.nodes[2].platform_info.node_memory_gb == 256, "Died on +.nodes[2].platform_info.node_memory_gb"
    assert result.nodes[2].platform_info.chassis_type == """R620""", "Died on +.nodes[2].platform_info.chassis_type"
    assert result.nodes[2].sipi == """Bond10G""", "Died on +.nodes[2].sipi"
    assert result.nodes[2].mipi == """Bond1G""", "Died on +.nodes[2].mipi"
    assert result.nodes[2].software_version == """8.4.0.68""", "Died on +.nodes[2].software_version"
    assert result.nodes[2].cip == """10.117.58.18""", "Died on +.nodes[2].cip"
    assert result.nodes[2].fibre_channel_target_port_group is None, "Died on .nodes[2].fibre_channel_target_port_group"
    assert result.nodes[2].mip == """10.117.56.18""", "Died on +.nodes[2].mip"
    assert result.nodes[2].associated_fservice_id == 0, "Died on +.nodes[2].associated_fservice_id"
    assert result.nodes[2].associated_master_service_id == 3, "Died on +.nodes[2].associated_master_service_id"
    assert result.nodes[2].cipi == """Bond10G""", "Died on +.nodes[2].cipi"
    assert type(result.nodes[2].attributes) is dict, "Died on .nodes[2].attributes"
    assert result.nodes[1].sip == """10.117.58.17""", "Died on +.nodes[1].sip"
    assert result.nodes[1].node_id == 2, "Died on +.nodes[1].node_id"
    assert result.nodes[1].uuid == UUID("4C4C4544-0048-4810-8058-C7C04F395931"), "Died on .nodes[1].uuid"
    assert result.nodes[1].name == """NLABP0906""", "Died on +.nodes[1].name"
    assert result.nodes[1].platform_info.node_type == """SF9605""", "Died on +.nodes[1].platform_info.node_type"
    assert result.nodes[1].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz""", "Died on +.nodes[1].platform_info.cpu_model"
    assert result.nodes[1].platform_info.node_memory_gb == 256, "Died on +.nodes[1].platform_info.node_memory_gb"
    assert result.nodes[1].platform_info.chassis_type == """R620""", "Died on +.nodes[1].platform_info.chassis_type"
    assert result.nodes[1].sipi == """Bond10G""", "Died on +.nodes[1].sipi"
    assert result.nodes[1].mipi == """Bond1G""", "Died on +.nodes[1].mipi"
    assert result.nodes[1].software_version == """8.4.0.68""", "Died on +.nodes[1].software_version"
    assert result.nodes[1].cip == """10.117.58.17""", "Died on +.nodes[1].cip"
    assert result.nodes[1].fibre_channel_target_port_group is None, "Died on .nodes[1].fibre_channel_target_port_group"
    assert result.nodes[1].mip == """10.117.56.17""", "Died on +.nodes[1].mip"
    assert result.nodes[1].associated_fservice_id == 0, "Died on +.nodes[1].associated_fservice_id"
    assert result.nodes[1].associated_master_service_id == 2, "Died on +.nodes[1].associated_master_service_id"
    assert result.nodes[1].cipi == """Bond10G""", "Died on +.nodes[1].cipi"
    assert type(result.nodes[1].attributes) is dict, "Died on .nodes[1].attributes"
    assert result.nodes[0].sip == """10.117.58.16""", "Died on +.nodes[0].sip"
    assert result.nodes[0].node_id == 1, "Died on +.nodes[0].node_id"
    assert result.nodes[0].uuid == UUID("4C4C4544-0048-3810-8058-C7C04F395931"), "Died on .nodes[0].uuid"
    assert result.nodes[0].name == """NLABP0905""", "Died on +.nodes[0].name"
    assert result.nodes[0].platform_info.node_type == """SF9605""", "Died on +.nodes[0].platform_info.node_type"
    assert result.nodes[0].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz""", "Died on +.nodes[0].platform_info.cpu_model"
    assert result.nodes[0].platform_info.node_memory_gb == 256, "Died on +.nodes[0].platform_info.node_memory_gb"
    assert result.nodes[0].platform_info.chassis_type == """R620""", "Died on +.nodes[0].platform_info.chassis_type"
    assert result.nodes[0].sipi == """Bond10G""", "Died on +.nodes[0].sipi"
    assert result.nodes[0].mipi == """Bond1G""", "Died on +.nodes[0].mipi"
    assert result.nodes[0].software_version == """8.4.0.68""", "Died on +.nodes[0].software_version"
    assert result.nodes[0].cip == """10.117.58.16""", "Died on +.nodes[0].cip"
    assert result.nodes[0].fibre_channel_target_port_group is None, "Died on .nodes[0].fibre_channel_target_port_group"
    assert result.nodes[0].mip == """10.117.56.16""", "Died on +.nodes[0].mip"
    assert result.nodes[0].associated_fservice_id == 0, "Died on +.nodes[0].associated_fservice_id"
    assert result.nodes[0].associated_master_service_id == 1, "Died on +.nodes[0].associated_master_service_id"
    assert result.nodes[0].cipi == """Bond10G""", "Died on +.nodes[0].cipi"
    assert type(result.nodes[0].attributes) is dict, "Died on .nodes[0].attributes"

def test_list_active_nodes_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListActiveNodes_v8.6_0)

    
    result = ef.list_active_nodes()
    assert result.nodes[4].sip == """10.117.58.106""", "Died on +.nodes[4].sip"
    assert result.nodes[4].node_id == 5, "Died on +.nodes[4].node_id"
    assert result.nodes[4].uuid == UUID("4C4C4544-0059-5210-8037-B7C04F563532"), "Died on .nodes[4].uuid"
    assert result.nodes[4].name == """NLABP2017""", "Died on +.nodes[4].name"
    assert result.nodes[4].platform_info.node_type == """SF2405""", "Died on +.nodes[4].platform_info.node_type"
    assert result.nodes[4].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHz""", "Died on +.nodes[4].platform_info.cpu_model"
    assert result.nodes[4].platform_info.node_memory_gb == 64, "Died on +.nodes[4].platform_info.node_memory_gb"
    assert result.nodes[4].platform_info.chassis_type == """R630""", "Died on +.nodes[4].platform_info.chassis_type"
    assert result.nodes[4].sipi == """Bond10G""", "Died on +.nodes[4].sipi"
    assert result.nodes[4].mipi == """Bond1G""", "Died on +.nodes[4].mipi"
    assert result.nodes[4].software_version == """8.6.2.3""", "Died on +.nodes[4].software_version"
    assert result.nodes[4].cip == """10.117.58.106""", "Died on +.nodes[4].cip"
    assert result.nodes[4].fibre_channel_target_port_group is None, "Died on .nodes[4].fibre_channel_target_port_group"
    assert result.nodes[4].mip == """10.117.56.106""", "Died on +.nodes[4].mip"
    assert result.nodes[4].associated_fservice_id == 0, "Died on +.nodes[4].associated_fservice_id"
    assert result.nodes[4].associated_master_service_id == 5, "Died on +.nodes[4].associated_master_service_id"
    assert result.nodes[4].cipi == """Bond10G""", "Died on +.nodes[4].cipi"
    assert type(result.nodes[4].attributes) is dict, "Died on .nodes[4].attributes"
    assert result.nodes[3].sip == """10.117.58.96""", "Died on +.nodes[3].sip"
    assert result.nodes[3].node_id == 4, "Died on +.nodes[3].node_id"
    assert result.nodes[3].uuid == UUID("4C4C4544-0052-3410-8050-B5C04F383432"), "Died on .nodes[3].uuid"
    assert result.nodes[3].name == """NLABP1029""", "Died on +.nodes[3].name"
    assert result.nodes[3].platform_info.node_type == """SF2405""", "Died on +.nodes[3].platform_info.node_type"
    assert result.nodes[3].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHz""", "Died on +.nodes[3].platform_info.cpu_model"
    assert result.nodes[3].platform_info.node_memory_gb == 64, "Died on +.nodes[3].platform_info.node_memory_gb"
    assert result.nodes[3].platform_info.chassis_type == """R630""", "Died on +.nodes[3].platform_info.chassis_type"
    assert result.nodes[3].sipi == """Bond10G""", "Died on +.nodes[3].sipi"
    assert result.nodes[3].mipi == """Bond1G""", "Died on +.nodes[3].mipi"
    assert result.nodes[3].software_version == """8.6.2.3""", "Died on +.nodes[3].software_version"
    assert result.nodes[3].cip == """10.117.58.96""", "Died on +.nodes[3].cip"
    assert result.nodes[3].fibre_channel_target_port_group is None, "Died on .nodes[3].fibre_channel_target_port_group"
    assert result.nodes[3].mip == """10.117.56.96""", "Died on +.nodes[3].mip"
    assert result.nodes[3].associated_fservice_id == 0, "Died on +.nodes[3].associated_fservice_id"
    assert result.nodes[3].associated_master_service_id == 2, "Died on +.nodes[3].associated_master_service_id"
    assert result.nodes[3].cipi == """Bond10G""", "Died on +.nodes[3].cipi"
    assert type(result.nodes[3].attributes) is dict, "Died on .nodes[3].attributes"
    assert result.nodes[2].sip == """10.117.58.40""", "Died on +.nodes[2].sip"
    assert result.nodes[2].node_id == 3, "Died on +.nodes[2].node_id"
    assert result.nodes[2].uuid == UUID("4C4C4544-0046-4710-8036-C6C04F435A31"), "Died on .nodes[2].uuid"
    assert result.nodes[2].name == """NLABP1317""", "Died on +.nodes[2].name"
    assert result.nodes[2].platform_info.node_type == """SF2405""", "Died on +.nodes[2].platform_info.node_type"
    assert result.nodes[2].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz""", "Died on +.nodes[2].platform_info.cpu_model"
    assert result.nodes[2].platform_info.node_memory_gb == 64, "Died on +.nodes[2].platform_info.node_memory_gb"
    assert result.nodes[2].platform_info.chassis_type == """R620""", "Died on +.nodes[2].platform_info.chassis_type"
    assert result.nodes[2].sipi == """Bond10G""", "Died on +.nodes[2].sipi"
    assert result.nodes[2].mipi == """Bond1G""", "Died on +.nodes[2].mipi"
    assert result.nodes[2].software_version == """8.6.2.3""", "Died on +.nodes[2].software_version"
    assert result.nodes[2].cip == """10.117.58.40""", "Died on +.nodes[2].cip"
    assert result.nodes[2].fibre_channel_target_port_group is None, "Died on .nodes[2].fibre_channel_target_port_group"
    assert result.nodes[2].mip == """10.117.56.40""", "Died on +.nodes[2].mip"
    assert result.nodes[2].associated_fservice_id == 0, "Died on +.nodes[2].associated_fservice_id"
    assert result.nodes[2].associated_master_service_id == 3, "Died on +.nodes[2].associated_master_service_id"
    assert result.nodes[2].cipi == """Bond10G""", "Died on +.nodes[2].cipi"
    assert type(result.nodes[2].attributes) is dict, "Died on .nodes[2].attributes"
    assert result.nodes[1].sip == """10.117.58.27""", "Died on +.nodes[1].sip"
    assert result.nodes[1].node_id == 2, "Died on +.nodes[1].node_id"
    assert result.nodes[1].uuid == UUID("4C4C4544-0046-4310-8036-C6C04F435A31"), "Died on .nodes[1].uuid"
    assert result.nodes[1].name == """NLABP1305""", "Died on +.nodes[1].name"
    assert result.nodes[1].platform_info.node_type == """SF2405""", "Died on +.nodes[1].platform_info.node_type"
    assert result.nodes[1].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz""", "Died on +.nodes[1].platform_info.cpu_model"
    assert result.nodes[1].platform_info.node_memory_gb == 64, "Died on +.nodes[1].platform_info.node_memory_gb"
    assert result.nodes[1].platform_info.chassis_type == """R620""", "Died on +.nodes[1].platform_info.chassis_type"
    assert result.nodes[1].sipi == """Bond10G""", "Died on +.nodes[1].sipi"
    assert result.nodes[1].mipi == """Bond1G""", "Died on +.nodes[1].mipi"
    assert result.nodes[1].software_version == """8.6.2.3""", "Died on +.nodes[1].software_version"
    assert result.nodes[1].cip == """10.117.58.27""", "Died on +.nodes[1].cip"
    assert result.nodes[1].fibre_channel_target_port_group is None, "Died on .nodes[1].fibre_channel_target_port_group"
    assert result.nodes[1].mip == """10.117.56.27""", "Died on +.nodes[1].mip"
    assert result.nodes[1].associated_fservice_id == 0, "Died on +.nodes[1].associated_fservice_id"
    assert result.nodes[1].associated_master_service_id == 4, "Died on +.nodes[1].associated_master_service_id"
    assert result.nodes[1].cipi == """Bond10G""", "Died on +.nodes[1].cipi"
    assert type(result.nodes[1].attributes) is dict, "Died on .nodes[1].attributes"
    assert result.nodes[0].sip == """10.117.58.25""", "Died on +.nodes[0].sip"
    assert result.nodes[0].node_id == 1, "Died on +.nodes[0].node_id"
    assert result.nodes[0].uuid == UUID("4C4C4544-0046-4E10-8035-C6C04F435A31"), "Died on .nodes[0].uuid"
    assert result.nodes[0].name == """NLABP1303""", "Died on +.nodes[0].name"
    assert result.nodes[0].platform_info.node_type == """SF2405""", "Died on +.nodes[0].platform_info.node_type"
    assert result.nodes[0].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz""", "Died on +.nodes[0].platform_info.cpu_model"
    assert result.nodes[0].platform_info.node_memory_gb == 64, "Died on +.nodes[0].platform_info.node_memory_gb"
    assert result.nodes[0].platform_info.chassis_type == """R620""", "Died on +.nodes[0].platform_info.chassis_type"
    assert result.nodes[0].sipi == """Bond10G""", "Died on +.nodes[0].sipi"
    assert result.nodes[0].mipi == """Bond1G""", "Died on +.nodes[0].mipi"
    assert result.nodes[0].software_version == """8.6.2.3""", "Died on +.nodes[0].software_version"
    assert result.nodes[0].cip == """10.117.58.25""", "Died on +.nodes[0].cip"
    assert result.nodes[0].fibre_channel_target_port_group is None, "Died on .nodes[0].fibre_channel_target_port_group"
    assert result.nodes[0].mip == """10.117.56.25""", "Died on +.nodes[0].mip"
    assert result.nodes[0].associated_fservice_id == 0, "Died on +.nodes[0].associated_fservice_id"
    assert result.nodes[0].associated_master_service_id == 1, "Died on +.nodes[0].associated_master_service_id"
    assert result.nodes[0].cipi == """Bond10G""", "Died on +.nodes[0].cipi"
    assert type(result.nodes[0].attributes) is dict, "Died on .nodes[0].attributes"

def test_list_active_nodes_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListActiveNodes_v8.7_0)

    
    result = ef.list_active_nodes()
    assert result.nodes[4].sip == """10.117.58.49""", "Died on +.nodes[4].sip"
    assert result.nodes[4].node_id == 5, "Died on +.nodes[4].node_id"
    assert result.nodes[4].uuid == UUID("4C4C4544-0043-4C10-8032-C7C04F445A31"), "Died on .nodes[4].uuid"
    assert result.nodes[4].name == """nlabp0921""", "Died on +.nodes[4].name"
    assert result.nodes[4].platform_info.node_type == """SF9605""", "Died on +.nodes[4].platform_info.node_type"
    assert result.nodes[4].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz""", "Died on +.nodes[4].platform_info.cpu_model"
    assert result.nodes[4].platform_info.node_memory_gb == 256, "Died on +.nodes[4].platform_info.node_memory_gb"
    assert result.nodes[4].platform_info.chassis_type == """R620""", "Died on +.nodes[4].platform_info.chassis_type"
    assert result.nodes[4].sipi == """Bond10G""", "Died on +.nodes[4].sipi"
    assert result.nodes[4].mipi == """Bond1G""", "Died on +.nodes[4].mipi"
    assert result.nodes[4].software_version == """8.7.0.15""", "Died on +.nodes[4].software_version"
    assert result.nodes[4].cip == """10.117.58.49""", "Died on +.nodes[4].cip"
    assert result.nodes[4].fibre_channel_target_port_group is None, "Died on .nodes[4].fibre_channel_target_port_group"
    assert result.nodes[4].mip == """10.117.56.49""", "Died on +.nodes[4].mip"
    assert result.nodes[4].associated_fservice_id == 0, "Died on +.nodes[4].associated_fservice_id"
    assert result.nodes[4].associated_master_service_id == 5, "Died on +.nodes[4].associated_master_service_id"
    assert result.nodes[4].cipi == """Bond10G""", "Died on +.nodes[4].cipi"
    assert type(result.nodes[4].attributes) is dict, "Died on .nodes[4].attributes"
    assert result.nodes[3].sip == """10.117.58.48""", "Died on +.nodes[3].sip"
    assert result.nodes[3].node_id == 4, "Died on +.nodes[3].node_id"
    assert result.nodes[3].uuid == UUID("4C4C4544-0043-4E10-8053-B5C04F383432"), "Died on .nodes[3].uuid"
    assert result.nodes[3].name == """NLABP0920""", "Died on +.nodes[3].name"
    assert result.nodes[3].platform_info.node_type == """SF9605""", "Died on +.nodes[3].platform_info.node_type"
    assert result.nodes[3].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHz""", "Died on +.nodes[3].platform_info.cpu_model"
    assert result.nodes[3].platform_info.node_memory_gb == 256, "Died on +.nodes[3].platform_info.node_memory_gb"
    assert result.nodes[3].platform_info.chassis_type == """R630""", "Died on +.nodes[3].platform_info.chassis_type"
    assert result.nodes[3].sipi == """Bond10G""", "Died on +.nodes[3].sipi"
    assert result.nodes[3].mipi == """Bond1G""", "Died on +.nodes[3].mipi"
    assert result.nodes[3].software_version == """8.7.0.15""", "Died on +.nodes[3].software_version"
    assert result.nodes[3].cip == """10.117.58.48""", "Died on +.nodes[3].cip"
    assert result.nodes[3].fibre_channel_target_port_group is None, "Died on .nodes[3].fibre_channel_target_port_group"
    assert result.nodes[3].mip == """10.117.56.48""", "Died on +.nodes[3].mip"
    assert result.nodes[3].associated_fservice_id == 0, "Died on +.nodes[3].associated_fservice_id"
    assert result.nodes[3].associated_master_service_id == 4, "Died on +.nodes[3].associated_master_service_id"
    assert result.nodes[3].cipi == """Bond10G""", "Died on +.nodes[3].cipi"
    assert type(result.nodes[3].attributes) is dict, "Died on .nodes[3].attributes"
    assert result.nodes[2].sip == """10.117.58.47""", "Died on +.nodes[2].sip"
    assert result.nodes[2].node_id == 3, "Died on +.nodes[2].node_id"
    assert result.nodes[2].uuid == UUID("4C4C4544-0038-4A10-804E-B6C04F383432"), "Died on .nodes[2].uuid"
    assert result.nodes[2].name == """NLABP0919""", "Died on +.nodes[2].name"
    assert result.nodes[2].platform_info.node_type == """SF9605""", "Died on +.nodes[2].platform_info.node_type"
    assert result.nodes[2].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHz""", "Died on +.nodes[2].platform_info.cpu_model"
    assert result.nodes[2].platform_info.node_memory_gb == 256, "Died on +.nodes[2].platform_info.node_memory_gb"
    assert result.nodes[2].platform_info.chassis_type == """R630""", "Died on +.nodes[2].platform_info.chassis_type"
    assert result.nodes[2].sipi == """Bond10G""", "Died on +.nodes[2].sipi"
    assert result.nodes[2].mipi == """Bond1G""", "Died on +.nodes[2].mipi"
    assert result.nodes[2].software_version == """8.7.0.15""", "Died on +.nodes[2].software_version"
    assert result.nodes[2].cip == """10.117.58.47""", "Died on +.nodes[2].cip"
    assert result.nodes[2].fibre_channel_target_port_group is None, "Died on .nodes[2].fibre_channel_target_port_group"
    assert result.nodes[2].mip == """10.117.56.47""", "Died on +.nodes[2].mip"
    assert result.nodes[2].associated_fservice_id == 0, "Died on +.nodes[2].associated_fservice_id"
    assert result.nodes[2].associated_master_service_id == 2, "Died on +.nodes[2].associated_master_service_id"
    assert result.nodes[2].cipi == """Bond10G""", "Died on +.nodes[2].cipi"
    assert type(result.nodes[2].attributes) is dict, "Died on .nodes[2].attributes"
    assert result.nodes[1].sip == """10.117.58.46""", "Died on +.nodes[1].sip"
    assert result.nodes[1].node_id == 2, "Died on +.nodes[1].node_id"
    assert result.nodes[1].uuid == UUID("4C4C4544-0043-5010-804D-B5C04F383432"), "Died on .nodes[1].uuid"
    assert result.nodes[1].name == """NLABP0917""", "Died on +.nodes[1].name"
    assert result.nodes[1].platform_info.node_type == """SF9605""", "Died on +.nodes[1].platform_info.node_type"
    assert result.nodes[1].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHz""", "Died on +.nodes[1].platform_info.cpu_model"
    assert result.nodes[1].platform_info.node_memory_gb == 256, "Died on +.nodes[1].platform_info.node_memory_gb"
    assert result.nodes[1].platform_info.chassis_type == """R630""", "Died on +.nodes[1].platform_info.chassis_type"
    assert result.nodes[1].sipi == """Bond10G""", "Died on +.nodes[1].sipi"
    assert result.nodes[1].mipi == """Bond1G""", "Died on +.nodes[1].mipi"
    assert result.nodes[1].software_version == """8.7.0.15""", "Died on +.nodes[1].software_version"
    assert result.nodes[1].cip == """10.117.58.46""", "Died on +.nodes[1].cip"
    assert result.nodes[1].fibre_channel_target_port_group is None, "Died on .nodes[1].fibre_channel_target_port_group"
    assert result.nodes[1].mip == """10.117.56.46""", "Died on +.nodes[1].mip"
    assert result.nodes[1].associated_fservice_id == 0, "Died on +.nodes[1].associated_fservice_id"
    assert result.nodes[1].associated_master_service_id == 3, "Died on +.nodes[1].associated_master_service_id"
    assert result.nodes[1].cipi == """Bond10G""", "Died on +.nodes[1].cipi"
    assert type(result.nodes[1].attributes) is dict, "Died on .nodes[1].attributes"
    assert result.nodes[0].sip == """10.117.58.45""", "Died on +.nodes[0].sip"
    assert result.nodes[0].node_id == 1, "Died on +.nodes[0].node_id"
    assert result.nodes[0].uuid == UUID("4C4C4544-0052-3910-804E-B5C04F383432"), "Died on .nodes[0].uuid"
    assert result.nodes[0].name == """NLABP0916""", "Died on +.nodes[0].name"
    assert result.nodes[0].platform_info.node_type == """SF9605""", "Died on +.nodes[0].platform_info.node_type"
    assert result.nodes[0].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHz""", "Died on +.nodes[0].platform_info.cpu_model"
    assert result.nodes[0].platform_info.node_memory_gb == 256, "Died on +.nodes[0].platform_info.node_memory_gb"
    assert result.nodes[0].platform_info.chassis_type == """R630""", "Died on +.nodes[0].platform_info.chassis_type"
    assert result.nodes[0].sipi == """Bond10G""", "Died on +.nodes[0].sipi"
    assert result.nodes[0].mipi == """Bond1G""", "Died on +.nodes[0].mipi"
    assert result.nodes[0].software_version == """8.7.0.15""", "Died on +.nodes[0].software_version"
    assert result.nodes[0].cip == """10.117.58.45""", "Died on +.nodes[0].cip"
    assert result.nodes[0].fibre_channel_target_port_group is None, "Died on .nodes[0].fibre_channel_target_port_group"
    assert result.nodes[0].mip == """10.117.56.45""", "Died on +.nodes[0].mip"
    assert result.nodes[0].associated_fservice_id == 0, "Died on +.nodes[0].associated_fservice_id"
    assert result.nodes[0].associated_master_service_id == 1, "Died on +.nodes[0].associated_master_service_id"
    assert result.nodes[0].cipi == """Bond10G""", "Died on +.nodes[0].cipi"
    assert type(result.nodes[0].attributes) is dict, "Died on .nodes[0].attributes"

def test_list_active_nodes_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListActiveNodes_v9.0_0)

    
    result = ef.list_active_nodes()
    assert result.nodes[4].sip == """10.117.58.103""", "Died on +.nodes[4].sip"
    assert result.nodes[4].node_id == 5, "Died on +.nodes[4].node_id"
    assert result.nodes[4].uuid == UUID("4C4C4544-0048-4210-8057-C7C04F395931"), "Died on .nodes[4].uuid"
    assert result.nodes[4].name == """NLABP2010""", "Died on +.nodes[4].name"
    assert result.nodes[4].platform_info.node_type == """SF3010""", "Died on +.nodes[4].platform_info.node_type"
    assert result.nodes[4].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[4].platform_info.cpu_model"
    assert result.nodes[4].platform_info.node_memory_gb == 72, "Died on +.nodes[4].platform_info.node_memory_gb"
    assert result.nodes[4].platform_info.chassis_type == """R620""", "Died on +.nodes[4].platform_info.chassis_type"
    assert result.nodes[4].sipi == """Bond10G""", "Died on +.nodes[4].sipi"
    assert result.nodes[4].mipi == """Bond1G""", "Died on +.nodes[4].mipi"
    assert result.nodes[4].software_version == """9.0.0.1554""", "Died on +.nodes[4].software_version"
    assert result.nodes[4].cip == """10.117.58.103""", "Died on +.nodes[4].cip"
    assert result.nodes[4].fibre_channel_target_port_group is None, "Died on .nodes[4].fibre_channel_target_port_group"
    assert result.nodes[4].mip == """10.117.56.103""", "Died on +.nodes[4].mip"
    assert result.nodes[4].associated_fservice_id == 0, "Died on +.nodes[4].associated_fservice_id"
    assert result.nodes[4].associated_master_service_id == 3, "Died on +.nodes[4].associated_master_service_id"
    assert result.nodes[4].cipi == """Bond10G""", "Died on +.nodes[4].cipi"
    assert type(result.nodes[4].attributes) is dict, "Died on .nodes[4].attributes"
    assert result.nodes[3].sip == """10.117.58.102""", "Died on +.nodes[3].sip"
    assert result.nodes[3].node_id == 4, "Died on +.nodes[3].node_id"
    assert result.nodes[3].uuid == UUID("4C4C4544-0048-5A10-8057-C7C04F395931"), "Died on .nodes[3].uuid"
    assert result.nodes[3].name == """NLABP2006""", "Died on +.nodes[3].name"
    assert result.nodes[3].platform_info.node_type == """SF3010""", "Died on +.nodes[3].platform_info.node_type"
    assert result.nodes[3].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[3].platform_info.cpu_model"
    assert result.nodes[3].platform_info.node_memory_gb == 72, "Died on +.nodes[3].platform_info.node_memory_gb"
    assert result.nodes[3].platform_info.chassis_type == """R620""", "Died on +.nodes[3].platform_info.chassis_type"
    assert result.nodes[3].sipi == """Bond10G""", "Died on +.nodes[3].sipi"
    assert result.nodes[3].mipi == """Bond1G""", "Died on +.nodes[3].mipi"
    assert result.nodes[3].software_version == """9.0.0.1554""", "Died on +.nodes[3].software_version"
    assert result.nodes[3].cip == """10.117.58.102""", "Died on +.nodes[3].cip"
    assert result.nodes[3].fibre_channel_target_port_group is None, "Died on .nodes[3].fibre_channel_target_port_group"
    assert result.nodes[3].mip == """10.117.56.102""", "Died on +.nodes[3].mip"
    assert result.nodes[3].associated_fservice_id == 0, "Died on +.nodes[3].associated_fservice_id"
    assert result.nodes[3].associated_master_service_id == 4, "Died on +.nodes[3].associated_master_service_id"
    assert result.nodes[3].cipi == """Bond10G""", "Died on +.nodes[3].cipi"
    assert type(result.nodes[3].attributes) is dict, "Died on .nodes[3].attributes"
    assert result.nodes[2].sip == """10.117.58.100""", "Died on +.nodes[2].sip"
    assert result.nodes[2].node_id == 3, "Died on +.nodes[2].node_id"
    assert result.nodes[2].uuid == UUID("4C4C4544-0048-5810-8056-C7C04F395931"), "Died on .nodes[2].uuid"
    assert result.nodes[2].name == """NLABP2004""", "Died on +.nodes[2].name"
    assert result.nodes[2].platform_info.node_type == """SF3010""", "Died on +.nodes[2].platform_info.node_type"
    assert result.nodes[2].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[2].platform_info.cpu_model"
    assert result.nodes[2].platform_info.node_memory_gb == 72, "Died on +.nodes[2].platform_info.node_memory_gb"
    assert result.nodes[2].platform_info.chassis_type == """R620""", "Died on +.nodes[2].platform_info.chassis_type"
    assert result.nodes[2].sipi == """Bond10G""", "Died on +.nodes[2].sipi"
    assert result.nodes[2].mipi == """Bond1G""", "Died on +.nodes[2].mipi"
    assert result.nodes[2].software_version == """9.0.0.1554""", "Died on +.nodes[2].software_version"
    assert result.nodes[2].cip == """10.117.58.100""", "Died on +.nodes[2].cip"
    assert result.nodes[2].fibre_channel_target_port_group is None, "Died on .nodes[2].fibre_channel_target_port_group"
    assert result.nodes[2].mip == """10.117.56.100""", "Died on +.nodes[2].mip"
    assert result.nodes[2].associated_fservice_id == 0, "Died on +.nodes[2].associated_fservice_id"
    assert result.nodes[2].associated_master_service_id == 5, "Died on +.nodes[2].associated_master_service_id"
    assert result.nodes[2].cipi == """Bond10G""", "Died on +.nodes[2].cipi"
    assert type(result.nodes[2].attributes) is dict, "Died on .nodes[2].attributes"
    assert result.nodes[1].sip == """10.117.58.24""", "Died on +.nodes[1].sip"
    assert result.nodes[1].node_id == 2, "Died on +.nodes[1].node_id"
    assert result.nodes[1].uuid == UUID("4C4C4544-0039-5910-8034-C4C04F4A3032"), "Died on .nodes[1].uuid"
    assert result.nodes[1].name == """NLABP1802""", "Died on +.nodes[1].name"
    assert result.nodes[1].platform_info.node_type == """SF3010""", "Died on +.nodes[1].platform_info.node_type"
    assert result.nodes[1].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[1].platform_info.cpu_model"
    assert result.nodes[1].platform_info.node_memory_gb == 72, "Died on +.nodes[1].platform_info.node_memory_gb"
    assert result.nodes[1].platform_info.chassis_type == """R620""", "Died on +.nodes[1].platform_info.chassis_type"
    assert result.nodes[1].sipi == """Bond10G""", "Died on +.nodes[1].sipi"
    assert result.nodes[1].mipi == """Bond1G""", "Died on +.nodes[1].mipi"
    assert result.nodes[1].software_version == """9.0.0.1554""", "Died on +.nodes[1].software_version"
    assert result.nodes[1].cip == """10.117.58.24""", "Died on +.nodes[1].cip"
    assert result.nodes[1].fibre_channel_target_port_group is None, "Died on .nodes[1].fibre_channel_target_port_group"
    assert result.nodes[1].mip == """10.117.56.24""", "Died on +.nodes[1].mip"
    assert result.nodes[1].associated_fservice_id == 0, "Died on +.nodes[1].associated_fservice_id"
    assert result.nodes[1].associated_master_service_id == 2, "Died on +.nodes[1].associated_master_service_id"
    assert result.nodes[1].cipi == """Bond10G""", "Died on +.nodes[1].cipi"
    assert type(result.nodes[1].attributes) is dict, "Died on .nodes[1].attributes"
    assert result.nodes[0].sip == """10.117.58.6""", "Died on +.nodes[0].sip"
    assert result.nodes[0].node_id == 1, "Died on +.nodes[0].node_id"
    assert result.nodes[0].uuid == UUID("4C4C4544-0048-4410-8057-C7C04F395931"), "Died on .nodes[0].uuid"
    assert result.nodes[0].name == """NLABP2022""", "Died on +.nodes[0].name"
    assert result.nodes[0].platform_info.node_type == """SF3010""", "Died on +.nodes[0].platform_info.node_type"
    assert result.nodes[0].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[0].platform_info.cpu_model"
    assert result.nodes[0].platform_info.node_memory_gb == 72, "Died on +.nodes[0].platform_info.node_memory_gb"
    assert result.nodes[0].platform_info.chassis_type == """R620""", "Died on +.nodes[0].platform_info.chassis_type"
    assert result.nodes[0].sipi == """Bond10G""", "Died on +.nodes[0].sipi"
    assert result.nodes[0].mipi == """Bond1G""", "Died on +.nodes[0].mipi"
    assert result.nodes[0].software_version == """9.0.0.1554""", "Died on +.nodes[0].software_version"
    assert result.nodes[0].cip == """10.117.58.6""", "Died on +.nodes[0].cip"
    assert result.nodes[0].fibre_channel_target_port_group is None, "Died on .nodes[0].fibre_channel_target_port_group"
    assert result.nodes[0].mip == """10.117.56.6""", "Died on +.nodes[0].mip"
    assert result.nodes[0].associated_fservice_id == 0, "Died on +.nodes[0].associated_fservice_id"
    assert result.nodes[0].associated_master_service_id == 1, "Died on +.nodes[0].associated_master_service_id"
    assert result.nodes[0].cipi == """Bond10G""", "Died on +.nodes[0].cipi"
    assert type(result.nodes[0].attributes) is dict, "Died on .nodes[0].attributes"

def test_list_active_nodes_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListActiveNodes_v9.1_0)

    
    result = ef.list_active_nodes()
    assert result.nodes[3].sip == """10.117.58.76""", "Died on +.nodes[3].sip"
    assert result.nodes[3].node_id == 4, "Died on +.nodes[3].node_id"
    assert result.nodes[3].uuid == UUID("4C4C4544-0039-4E10-8033-C4C04F4A3032"), "Died on .nodes[3].uuid"
    assert result.nodes[3].name == """NLABP1001""", "Died on +.nodes[3].name"
    assert result.nodes[3].platform_info.node_type == """SF3010""", "Died on +.nodes[3].platform_info.node_type"
    assert result.nodes[3].platform_info.platform_config_version == """9.1.0.28""", "Died on +.nodes[3].platform_info.platform_config_version"
    assert result.nodes[3].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[3].platform_info.cpu_model"
    assert result.nodes[3].platform_info.node_memory_gb == 72, "Died on +.nodes[3].platform_info.node_memory_gb"
    assert result.nodes[3].platform_info.chassis_type == """R620""", "Died on +.nodes[3].platform_info.chassis_type"
    assert result.nodes[3].sipi == """Bond10G""", "Died on +.nodes[3].sipi"
    assert result.nodes[3].mipi == """Bond1G""", "Died on +.nodes[3].mipi"
    assert result.nodes[3].software_version == """9.1.0.28""", "Died on +.nodes[3].software_version"
    assert result.nodes[3].cip == """10.117.58.76""", "Died on +.nodes[3].cip"
    assert result.nodes[3].fibre_channel_target_port_group is None, "Died on .nodes[3].fibre_channel_target_port_group"
    assert result.nodes[3].mip == """10.117.56.76""", "Died on +.nodes[3].mip"
    assert result.nodes[3].associated_fservice_id == 0, "Died on +.nodes[3].associated_fservice_id"
    assert result.nodes[3].associated_master_service_id == 2, "Died on +.nodes[3].associated_master_service_id"
    assert result.nodes[3].cipi == """Bond10G""", "Died on +.nodes[3].cipi"
    assert type(result.nodes[3].attributes) is dict, "Died on .nodes[3].attributes"
    assert result.nodes[2].sip == """10.117.58.75""", "Died on +.nodes[2].sip"
    assert result.nodes[2].node_id == 3, "Died on +.nodes[2].node_id"
    assert result.nodes[2].uuid == UUID("4C4C4544-0039-5810-8036-C4C04F4A3032"), "Died on .nodes[2].uuid"
    assert result.nodes[2].name == """NLABP2124""", "Died on +.nodes[2].name"
    assert result.nodes[2].platform_info.node_type == """SF3010""", "Died on +.nodes[2].platform_info.node_type"
    assert result.nodes[2].platform_info.platform_config_version == """9.1.0.28""", "Died on +.nodes[2].platform_info.platform_config_version"
    assert result.nodes[2].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[2].platform_info.cpu_model"
    assert result.nodes[2].platform_info.node_memory_gb == 72, "Died on +.nodes[2].platform_info.node_memory_gb"
    assert result.nodes[2].platform_info.chassis_type == """R620""", "Died on +.nodes[2].platform_info.chassis_type"
    assert result.nodes[2].sipi == """Bond10G""", "Died on +.nodes[2].sipi"
    assert result.nodes[2].mipi == """Bond1G""", "Died on +.nodes[2].mipi"
    assert result.nodes[2].software_version == """9.1.0.28""", "Died on +.nodes[2].software_version"
    assert result.nodes[2].cip == """10.117.58.75""", "Died on +.nodes[2].cip"
    assert result.nodes[2].fibre_channel_target_port_group is None, "Died on .nodes[2].fibre_channel_target_port_group"
    assert result.nodes[2].mip == """10.117.56.75""", "Died on +.nodes[2].mip"
    assert result.nodes[2].associated_fservice_id == 0, "Died on +.nodes[2].associated_fservice_id"
    assert result.nodes[2].associated_master_service_id == 4, "Died on +.nodes[2].associated_master_service_id"
    assert result.nodes[2].cipi == """Bond10G""", "Died on +.nodes[2].cipi"
    assert type(result.nodes[2].attributes) is dict, "Died on .nodes[2].attributes"
    assert result.nodes[1].sip == """10.117.58.74""", "Died on +.nodes[1].sip"
    assert result.nodes[1].node_id == 2, "Died on +.nodes[1].node_id"
    assert result.nodes[1].uuid == UUID("4C4C4544-0039-5910-8037-C4C04F4A3032"), "Died on .nodes[1].uuid"
    assert result.nodes[1].name == """NLABP2123""", "Died on +.nodes[1].name"
    assert result.nodes[1].platform_info.node_type == """SF3010""", "Died on +.nodes[1].platform_info.node_type"
    assert result.nodes[1].platform_info.platform_config_version == """9.1.0.28""", "Died on +.nodes[1].platform_info.platform_config_version"
    assert result.nodes[1].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[1].platform_info.cpu_model"
    assert result.nodes[1].platform_info.node_memory_gb == 72, "Died on +.nodes[1].platform_info.node_memory_gb"
    assert result.nodes[1].platform_info.chassis_type == """R620""", "Died on +.nodes[1].platform_info.chassis_type"
    assert result.nodes[1].sipi == """Bond10G""", "Died on +.nodes[1].sipi"
    assert result.nodes[1].mipi == """Bond1G""", "Died on +.nodes[1].mipi"
    assert result.nodes[1].software_version == """9.1.0.28""", "Died on +.nodes[1].software_version"
    assert result.nodes[1].cip == """10.117.58.74""", "Died on +.nodes[1].cip"
    assert result.nodes[1].fibre_channel_target_port_group is None, "Died on .nodes[1].fibre_channel_target_port_group"
    assert result.nodes[1].mip == """10.117.56.74""", "Died on +.nodes[1].mip"
    assert result.nodes[1].associated_fservice_id == 0, "Died on +.nodes[1].associated_fservice_id"
    assert result.nodes[1].associated_master_service_id == 3, "Died on +.nodes[1].associated_master_service_id"
    assert result.nodes[1].cipi == """Bond10G""", "Died on +.nodes[1].cipi"
    assert type(result.nodes[1].attributes) is dict, "Died on .nodes[1].attributes"
    assert result.nodes[0].sip == """10.117.58.69""", "Died on +.nodes[0].sip"
    assert result.nodes[0].node_id == 1, "Died on +.nodes[0].node_id"
    assert result.nodes[0].uuid == UUID("4C4C4544-0039-4710-8037-C4C04F4A3032"), "Died on .nodes[0].uuid"
    assert result.nodes[0].name == """NLABP2117""", "Died on +.nodes[0].name"
    assert result.nodes[0].platform_info.node_type == """SF3010""", "Died on +.nodes[0].platform_info.node_type"
    assert result.nodes[0].platform_info.platform_config_version == """9.1.0.28""", "Died on +.nodes[0].platform_info.platform_config_version"
    assert result.nodes[0].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[0].platform_info.cpu_model"
    assert result.nodes[0].platform_info.node_memory_gb == 72, "Died on +.nodes[0].platform_info.node_memory_gb"
    assert result.nodes[0].platform_info.chassis_type == """R620""", "Died on +.nodes[0].platform_info.chassis_type"
    assert result.nodes[0].sipi == """Bond10G""", "Died on +.nodes[0].sipi"
    assert result.nodes[0].mipi == """Bond1G""", "Died on +.nodes[0].mipi"
    assert result.nodes[0].software_version == """9.1.0.28""", "Died on +.nodes[0].software_version"
    assert result.nodes[0].cip == """10.117.58.69""", "Died on +.nodes[0].cip"
    assert result.nodes[0].fibre_channel_target_port_group is None, "Died on .nodes[0].fibre_channel_target_port_group"
    assert result.nodes[0].mip == """10.117.56.69""", "Died on +.nodes[0].mip"
    assert result.nodes[0].associated_fservice_id == 0, "Died on +.nodes[0].associated_fservice_id"
    assert result.nodes[0].associated_master_service_id == 1, "Died on +.nodes[0].associated_master_service_id"
    assert result.nodes[0].cipi == """Bond10G""", "Died on +.nodes[0].cipi"
    assert type(result.nodes[0].attributes) is dict, "Died on .nodes[0].attributes"

def test_list_active_paired_volumes_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListActivePairedVolumes_v9.1_0)

    
    result = ef.list_active_paired_volumes()

def test_list_active_paired_volumes_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListActivePairedVolumes_v9.1_1)

    
    result = ef.list_active_paired_volumes()
    assert result.volumes[199].status == """active""", "Died on +.volumes[199].status"
    assert result.volumes[199].enable512e == False, "Died on +.volumes[199].enable512e"
    assert result.volumes[199].qos.burst_iops == 15000, "Died on +.volumes[199].qos.burst_iops"
    assert result.volumes[199].qos.burst_time == 60, "Died on +.volumes[199].qos.burst_time"
    assert result.volumes[199].qos.min_iops == 100, "Died on +.volumes[199].qos.min_iops"
    assert result.volumes[199].qos.max_iops == 15000, "Died on +.volumes[199].qos.max_iops"
    assert result.volumes[199].name == """snapshots-source-200""", "Died on +.volumes[199].name"
    assert result.volumes[199].volume_access_groups[0] == 4, "Died on +.volumes[199].volume_access_groups[0]"
    assert result.volumes[199].scsi_naadevice_id == """6f47acc1000000006d696434000002bc""", "Died on +.volumes[199].scsi_naadevice_id"
    assert result.volumes[199].total_size == 5000658944, "Died on +.volumes[199].total_size"
    assert result.volumes[199].block_size == 4096, "Died on +.volumes[199].block_size"
    assert result.volumes[199].scsi_euidevice_id == """6d696434000002bcf47acc0100000000""", "Died on +.volumes[199].scsi_euidevice_id"
    assert result.volumes[199].volume_id == 700, "Died on +.volumes[199].volume_id"
    assert result.volumes[199].access == """readWrite""", "Died on +.volumes[199].access"
    assert result.volumes[199].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-200.700""", "Died on +.volumes[199].iqn"
    assert result.volumes[199].slice_count == 1, "Died on +.volumes[199].slice_count"
    assert type(result.volumes[199].attributes) is dict, "Died on .volumes[199].attributes"
    assert result.volumes[199].volume_pairs[0].volume_pair_uuid == UUID("d7fe9f6e-4094-43ae-a5c0-23acdaa526ab"), "Died on .volumes[199].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[199].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[199].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[199].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[199].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[199].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[199].volume_pairs[0].remote_replication.state"
    assert result.volumes[199].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[199].volume_pairs[0].remote_replication.mode"
    assert result.volumes[199].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[199].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[199].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[199].volume_pairs[0].cluster_pair_id"
    assert result.volumes[199].volume_pairs[0].remote_volume_id == 1200, "Died on +.volumes[199].volume_pairs[0].remote_volume_id"
    assert result.volumes[199].volume_pairs[0].remote_volume_name == """snap-target-200""", "Died on +.volumes[199].volume_pairs[0].remote_volume_name"
    assert result.volumes[199].volume_pairs[0].remote_slice_id == 1200, "Died on +.volumes[199].volume_pairs[0].remote_slice_id"
    assert result.volumes[199].account_id == 4, "Died on +.volumes[199].account_id"
    assert result.volumes[199].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[199].create_time"
    assert result.volumes[199].virtual_volume_id is None, "Died on .volumes[199].virtual_volume_id"
    assert result.volumes[198].status == """active""", "Died on +.volumes[198].status"
    assert result.volumes[198].enable512e == False, "Died on +.volumes[198].enable512e"
    assert result.volumes[198].qos.burst_iops == 15000, "Died on +.volumes[198].qos.burst_iops"
    assert result.volumes[198].qos.burst_time == 60, "Died on +.volumes[198].qos.burst_time"
    assert result.volumes[198].qos.min_iops == 100, "Died on +.volumes[198].qos.min_iops"
    assert result.volumes[198].qos.max_iops == 15000, "Died on +.volumes[198].qos.max_iops"
    assert result.volumes[198].name == """snapshots-source-199""", "Died on +.volumes[198].name"
    assert result.volumes[198].volume_access_groups[0] == 4, "Died on +.volumes[198].volume_access_groups[0]"
    assert result.volumes[198].scsi_naadevice_id == """6f47acc1000000006d696434000002bb""", "Died on +.volumes[198].scsi_naadevice_id"
    assert result.volumes[198].total_size == 5000658944, "Died on +.volumes[198].total_size"
    assert result.volumes[198].block_size == 4096, "Died on +.volumes[198].block_size"
    assert result.volumes[198].scsi_euidevice_id == """6d696434000002bbf47acc0100000000""", "Died on +.volumes[198].scsi_euidevice_id"
    assert result.volumes[198].volume_id == 699, "Died on +.volumes[198].volume_id"
    assert result.volumes[198].access == """readWrite""", "Died on +.volumes[198].access"
    assert result.volumes[198].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-199.699""", "Died on +.volumes[198].iqn"
    assert result.volumes[198].slice_count == 1, "Died on +.volumes[198].slice_count"
    assert type(result.volumes[198].attributes) is dict, "Died on .volumes[198].attributes"
    assert result.volumes[198].volume_pairs[0].volume_pair_uuid == UUID("58daf555-6ebd-4169-9c4b-b20b5e5a054c"), "Died on .volumes[198].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[198].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[198].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[198].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[198].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[198].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[198].volume_pairs[0].remote_replication.state"
    assert result.volumes[198].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[198].volume_pairs[0].remote_replication.mode"
    assert result.volumes[198].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[198].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[198].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[198].volume_pairs[0].cluster_pair_id"
    assert result.volumes[198].volume_pairs[0].remote_volume_id == 1199, "Died on +.volumes[198].volume_pairs[0].remote_volume_id"
    assert result.volumes[198].volume_pairs[0].remote_volume_name == """snap-target-199""", "Died on +.volumes[198].volume_pairs[0].remote_volume_name"
    assert result.volumes[198].volume_pairs[0].remote_slice_id == 1199, "Died on +.volumes[198].volume_pairs[0].remote_slice_id"
    assert result.volumes[198].account_id == 4, "Died on +.volumes[198].account_id"
    assert result.volumes[198].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[198].create_time"
    assert result.volumes[198].virtual_volume_id is None, "Died on .volumes[198].virtual_volume_id"
    assert result.volumes[197].status == """active""", "Died on +.volumes[197].status"
    assert result.volumes[197].enable512e == False, "Died on +.volumes[197].enable512e"
    assert result.volumes[197].qos.burst_iops == 15000, "Died on +.volumes[197].qos.burst_iops"
    assert result.volumes[197].qos.burst_time == 60, "Died on +.volumes[197].qos.burst_time"
    assert result.volumes[197].qos.min_iops == 100, "Died on +.volumes[197].qos.min_iops"
    assert result.volumes[197].qos.max_iops == 15000, "Died on +.volumes[197].qos.max_iops"
    assert result.volumes[197].name == """snapshots-source-198""", "Died on +.volumes[197].name"
    assert result.volumes[197].volume_access_groups[0] == 4, "Died on +.volumes[197].volume_access_groups[0]"
    assert result.volumes[197].scsi_naadevice_id == """6f47acc1000000006d696434000002ba""", "Died on +.volumes[197].scsi_naadevice_id"
    assert result.volumes[197].total_size == 5000658944, "Died on +.volumes[197].total_size"
    assert result.volumes[197].block_size == 4096, "Died on +.volumes[197].block_size"
    assert result.volumes[197].scsi_euidevice_id == """6d696434000002baf47acc0100000000""", "Died on +.volumes[197].scsi_euidevice_id"
    assert result.volumes[197].volume_id == 698, "Died on +.volumes[197].volume_id"
    assert result.volumes[197].access == """readWrite""", "Died on +.volumes[197].access"
    assert result.volumes[197].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-198.698""", "Died on +.volumes[197].iqn"
    assert result.volumes[197].slice_count == 1, "Died on +.volumes[197].slice_count"
    assert type(result.volumes[197].attributes) is dict, "Died on .volumes[197].attributes"
    assert result.volumes[197].volume_pairs[0].volume_pair_uuid == UUID("2e6444a3-ea7d-4113-b362-39878ec2b95c"), "Died on .volumes[197].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[197].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[197].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[197].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[197].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[197].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[197].volume_pairs[0].remote_replication.state"
    assert result.volumes[197].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[197].volume_pairs[0].remote_replication.mode"
    assert result.volumes[197].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[197].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[197].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[197].volume_pairs[0].cluster_pair_id"
    assert result.volumes[197].volume_pairs[0].remote_volume_id == 1198, "Died on +.volumes[197].volume_pairs[0].remote_volume_id"
    assert result.volumes[197].volume_pairs[0].remote_volume_name == """snap-target-198""", "Died on +.volumes[197].volume_pairs[0].remote_volume_name"
    assert result.volumes[197].volume_pairs[0].remote_slice_id == 1198, "Died on +.volumes[197].volume_pairs[0].remote_slice_id"
    assert result.volumes[197].account_id == 4, "Died on +.volumes[197].account_id"
    assert result.volumes[197].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[197].create_time"
    assert result.volumes[197].virtual_volume_id is None, "Died on .volumes[197].virtual_volume_id"
    assert result.volumes[196].status == """active""", "Died on +.volumes[196].status"
    assert result.volumes[196].enable512e == False, "Died on +.volumes[196].enable512e"
    assert result.volumes[196].qos.burst_iops == 15000, "Died on +.volumes[196].qos.burst_iops"
    assert result.volumes[196].qos.burst_time == 60, "Died on +.volumes[196].qos.burst_time"
    assert result.volumes[196].qos.min_iops == 100, "Died on +.volumes[196].qos.min_iops"
    assert result.volumes[196].qos.max_iops == 15000, "Died on +.volumes[196].qos.max_iops"
    assert result.volumes[196].name == """snapshots-source-197""", "Died on +.volumes[196].name"
    assert result.volumes[196].volume_access_groups[0] == 4, "Died on +.volumes[196].volume_access_groups[0]"
    assert result.volumes[196].scsi_naadevice_id == """6f47acc1000000006d696434000002b9""", "Died on +.volumes[196].scsi_naadevice_id"
    assert result.volumes[196].total_size == 5000658944, "Died on +.volumes[196].total_size"
    assert result.volumes[196].block_size == 4096, "Died on +.volumes[196].block_size"
    assert result.volumes[196].scsi_euidevice_id == """6d696434000002b9f47acc0100000000""", "Died on +.volumes[196].scsi_euidevice_id"
    assert result.volumes[196].volume_id == 697, "Died on +.volumes[196].volume_id"
    assert result.volumes[196].access == """readWrite""", "Died on +.volumes[196].access"
    assert result.volumes[196].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-197.697""", "Died on +.volumes[196].iqn"
    assert result.volumes[196].slice_count == 1, "Died on +.volumes[196].slice_count"
    assert type(result.volumes[196].attributes) is dict, "Died on .volumes[196].attributes"
    assert result.volumes[196].volume_pairs[0].volume_pair_uuid == UUID("a60efafb-af05-4f9e-93cf-2aaf83e25e82"), "Died on .volumes[196].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[196].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[196].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[196].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[196].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[196].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[196].volume_pairs[0].remote_replication.state"
    assert result.volumes[196].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[196].volume_pairs[0].remote_replication.mode"
    assert result.volumes[196].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[196].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[196].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[196].volume_pairs[0].cluster_pair_id"
    assert result.volumes[196].volume_pairs[0].remote_volume_id == 1197, "Died on +.volumes[196].volume_pairs[0].remote_volume_id"
    assert result.volumes[196].volume_pairs[0].remote_volume_name == """snap-target-197""", "Died on +.volumes[196].volume_pairs[0].remote_volume_name"
    assert result.volumes[196].volume_pairs[0].remote_slice_id == 1197, "Died on +.volumes[196].volume_pairs[0].remote_slice_id"
    assert result.volumes[196].account_id == 4, "Died on +.volumes[196].account_id"
    assert result.volumes[196].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[196].create_time"
    assert result.volumes[196].virtual_volume_id is None, "Died on .volumes[196].virtual_volume_id"
    assert result.volumes[195].status == """active""", "Died on +.volumes[195].status"
    assert result.volumes[195].enable512e == False, "Died on +.volumes[195].enable512e"
    assert result.volumes[195].qos.burst_iops == 15000, "Died on +.volumes[195].qos.burst_iops"
    assert result.volumes[195].qos.burst_time == 60, "Died on +.volumes[195].qos.burst_time"
    assert result.volumes[195].qos.min_iops == 100, "Died on +.volumes[195].qos.min_iops"
    assert result.volumes[195].qos.max_iops == 15000, "Died on +.volumes[195].qos.max_iops"
    assert result.volumes[195].name == """snapshots-source-196""", "Died on +.volumes[195].name"
    assert result.volumes[195].volume_access_groups[0] == 4, "Died on +.volumes[195].volume_access_groups[0]"
    assert result.volumes[195].scsi_naadevice_id == """6f47acc1000000006d696434000002b8""", "Died on +.volumes[195].scsi_naadevice_id"
    assert result.volumes[195].total_size == 5000658944, "Died on +.volumes[195].total_size"
    assert result.volumes[195].block_size == 4096, "Died on +.volumes[195].block_size"
    assert result.volumes[195].scsi_euidevice_id == """6d696434000002b8f47acc0100000000""", "Died on +.volumes[195].scsi_euidevice_id"
    assert result.volumes[195].volume_id == 696, "Died on +.volumes[195].volume_id"
    assert result.volumes[195].access == """readWrite""", "Died on +.volumes[195].access"
    assert result.volumes[195].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-196.696""", "Died on +.volumes[195].iqn"
    assert result.volumes[195].slice_count == 1, "Died on +.volumes[195].slice_count"
    assert type(result.volumes[195].attributes) is dict, "Died on .volumes[195].attributes"
    assert result.volumes[195].volume_pairs[0].volume_pair_uuid == UUID("66ba8f40-be24-488f-a473-0972976060b0"), "Died on .volumes[195].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[195].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[195].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[195].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[195].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[195].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[195].volume_pairs[0].remote_replication.state"
    assert result.volumes[195].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[195].volume_pairs[0].remote_replication.mode"
    assert result.volumes[195].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[195].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[195].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[195].volume_pairs[0].cluster_pair_id"
    assert result.volumes[195].volume_pairs[0].remote_volume_id == 1196, "Died on +.volumes[195].volume_pairs[0].remote_volume_id"
    assert result.volumes[195].volume_pairs[0].remote_volume_name == """snap-target-196""", "Died on +.volumes[195].volume_pairs[0].remote_volume_name"
    assert result.volumes[195].volume_pairs[0].remote_slice_id == 1196, "Died on +.volumes[195].volume_pairs[0].remote_slice_id"
    assert result.volumes[195].account_id == 4, "Died on +.volumes[195].account_id"
    assert result.volumes[195].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[195].create_time"
    assert result.volumes[195].virtual_volume_id is None, "Died on .volumes[195].virtual_volume_id"
    assert result.volumes[194].status == """active""", "Died on +.volumes[194].status"
    assert result.volumes[194].enable512e == False, "Died on +.volumes[194].enable512e"
    assert result.volumes[194].qos.burst_iops == 15000, "Died on +.volumes[194].qos.burst_iops"
    assert result.volumes[194].qos.burst_time == 60, "Died on +.volumes[194].qos.burst_time"
    assert result.volumes[194].qos.min_iops == 100, "Died on +.volumes[194].qos.min_iops"
    assert result.volumes[194].qos.max_iops == 15000, "Died on +.volumes[194].qos.max_iops"
    assert result.volumes[194].name == """snapshots-source-195""", "Died on +.volumes[194].name"
    assert result.volumes[194].volume_access_groups[0] == 4, "Died on +.volumes[194].volume_access_groups[0]"
    assert result.volumes[194].scsi_naadevice_id == """6f47acc1000000006d696434000002b7""", "Died on +.volumes[194].scsi_naadevice_id"
    assert result.volumes[194].total_size == 5000658944, "Died on +.volumes[194].total_size"
    assert result.volumes[194].block_size == 4096, "Died on +.volumes[194].block_size"
    assert result.volumes[194].scsi_euidevice_id == """6d696434000002b7f47acc0100000000""", "Died on +.volumes[194].scsi_euidevice_id"
    assert result.volumes[194].volume_id == 695, "Died on +.volumes[194].volume_id"
    assert result.volumes[194].access == """readWrite""", "Died on +.volumes[194].access"
    assert result.volumes[194].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-195.695""", "Died on +.volumes[194].iqn"
    assert result.volumes[194].slice_count == 1, "Died on +.volumes[194].slice_count"
    assert type(result.volumes[194].attributes) is dict, "Died on .volumes[194].attributes"
    assert result.volumes[194].volume_pairs[0].volume_pair_uuid == UUID("33385add-6e57-4015-99fa-4cc40ed95ed0"), "Died on .volumes[194].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[194].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[194].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[194].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[194].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[194].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[194].volume_pairs[0].remote_replication.state"
    assert result.volumes[194].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[194].volume_pairs[0].remote_replication.mode"
    assert result.volumes[194].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[194].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[194].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[194].volume_pairs[0].cluster_pair_id"
    assert result.volumes[194].volume_pairs[0].remote_volume_id == 1195, "Died on +.volumes[194].volume_pairs[0].remote_volume_id"
    assert result.volumes[194].volume_pairs[0].remote_volume_name == """snap-target-195""", "Died on +.volumes[194].volume_pairs[0].remote_volume_name"
    assert result.volumes[194].volume_pairs[0].remote_slice_id == 1195, "Died on +.volumes[194].volume_pairs[0].remote_slice_id"
    assert result.volumes[194].account_id == 4, "Died on +.volumes[194].account_id"
    assert result.volumes[194].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[194].create_time"
    assert result.volumes[194].virtual_volume_id is None, "Died on .volumes[194].virtual_volume_id"
    assert result.volumes[193].status == """active""", "Died on +.volumes[193].status"
    assert result.volumes[193].enable512e == False, "Died on +.volumes[193].enable512e"
    assert result.volumes[193].qos.burst_iops == 15000, "Died on +.volumes[193].qos.burst_iops"
    assert result.volumes[193].qos.burst_time == 60, "Died on +.volumes[193].qos.burst_time"
    assert result.volumes[193].qos.min_iops == 100, "Died on +.volumes[193].qos.min_iops"
    assert result.volumes[193].qos.max_iops == 15000, "Died on +.volumes[193].qos.max_iops"
    assert result.volumes[193].name == """snapshots-source-194""", "Died on +.volumes[193].name"
    assert result.volumes[193].volume_access_groups[0] == 4, "Died on +.volumes[193].volume_access_groups[0]"
    assert result.volumes[193].scsi_naadevice_id == """6f47acc1000000006d696434000002b6""", "Died on +.volumes[193].scsi_naadevice_id"
    assert result.volumes[193].total_size == 5000658944, "Died on +.volumes[193].total_size"
    assert result.volumes[193].block_size == 4096, "Died on +.volumes[193].block_size"
    assert result.volumes[193].scsi_euidevice_id == """6d696434000002b6f47acc0100000000""", "Died on +.volumes[193].scsi_euidevice_id"
    assert result.volumes[193].volume_id == 694, "Died on +.volumes[193].volume_id"
    assert result.volumes[193].access == """readWrite""", "Died on +.volumes[193].access"
    assert result.volumes[193].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-194.694""", "Died on +.volumes[193].iqn"
    assert result.volumes[193].slice_count == 1, "Died on +.volumes[193].slice_count"
    assert type(result.volumes[193].attributes) is dict, "Died on .volumes[193].attributes"
    assert result.volumes[193].volume_pairs[0].volume_pair_uuid == UUID("8d87620c-15f1-4b99-ac61-075db6e4b8b4"), "Died on .volumes[193].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[193].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[193].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[193].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[193].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[193].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[193].volume_pairs[0].remote_replication.state"
    assert result.volumes[193].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[193].volume_pairs[0].remote_replication.mode"
    assert result.volumes[193].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[193].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[193].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[193].volume_pairs[0].cluster_pair_id"
    assert result.volumes[193].volume_pairs[0].remote_volume_id == 1194, "Died on +.volumes[193].volume_pairs[0].remote_volume_id"
    assert result.volumes[193].volume_pairs[0].remote_volume_name == """snap-target-194""", "Died on +.volumes[193].volume_pairs[0].remote_volume_name"
    assert result.volumes[193].volume_pairs[0].remote_slice_id == 1194, "Died on +.volumes[193].volume_pairs[0].remote_slice_id"
    assert result.volumes[193].account_id == 4, "Died on +.volumes[193].account_id"
    assert result.volumes[193].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[193].create_time"
    assert result.volumes[193].virtual_volume_id is None, "Died on .volumes[193].virtual_volume_id"
    assert result.volumes[192].status == """active""", "Died on +.volumes[192].status"
    assert result.volumes[192].enable512e == False, "Died on +.volumes[192].enable512e"
    assert result.volumes[192].qos.burst_iops == 15000, "Died on +.volumes[192].qos.burst_iops"
    assert result.volumes[192].qos.burst_time == 60, "Died on +.volumes[192].qos.burst_time"
    assert result.volumes[192].qos.min_iops == 100, "Died on +.volumes[192].qos.min_iops"
    assert result.volumes[192].qos.max_iops == 15000, "Died on +.volumes[192].qos.max_iops"
    assert result.volumes[192].name == """snapshots-source-193""", "Died on +.volumes[192].name"
    assert result.volumes[192].volume_access_groups[0] == 4, "Died on +.volumes[192].volume_access_groups[0]"
    assert result.volumes[192].scsi_naadevice_id == """6f47acc1000000006d696434000002b5""", "Died on +.volumes[192].scsi_naadevice_id"
    assert result.volumes[192].total_size == 5000658944, "Died on +.volumes[192].total_size"
    assert result.volumes[192].block_size == 4096, "Died on +.volumes[192].block_size"
    assert result.volumes[192].scsi_euidevice_id == """6d696434000002b5f47acc0100000000""", "Died on +.volumes[192].scsi_euidevice_id"
    assert result.volumes[192].volume_id == 693, "Died on +.volumes[192].volume_id"
    assert result.volumes[192].access == """readWrite""", "Died on +.volumes[192].access"
    assert result.volumes[192].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-193.693""", "Died on +.volumes[192].iqn"
    assert result.volumes[192].slice_count == 1, "Died on +.volumes[192].slice_count"
    assert type(result.volumes[192].attributes) is dict, "Died on .volumes[192].attributes"
    assert result.volumes[192].volume_pairs[0].volume_pair_uuid == UUID("82f7f975-bebd-4e94-9f5c-05b3bdb84cfc"), "Died on .volumes[192].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[192].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[192].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[192].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[192].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[192].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[192].volume_pairs[0].remote_replication.state"
    assert result.volumes[192].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[192].volume_pairs[0].remote_replication.mode"
    assert result.volumes[192].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[192].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[192].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[192].volume_pairs[0].cluster_pair_id"
    assert result.volumes[192].volume_pairs[0].remote_volume_id == 1193, "Died on +.volumes[192].volume_pairs[0].remote_volume_id"
    assert result.volumes[192].volume_pairs[0].remote_volume_name == """snap-target-193""", "Died on +.volumes[192].volume_pairs[0].remote_volume_name"
    assert result.volumes[192].volume_pairs[0].remote_slice_id == 1193, "Died on +.volumes[192].volume_pairs[0].remote_slice_id"
    assert result.volumes[192].account_id == 4, "Died on +.volumes[192].account_id"
    assert result.volumes[192].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[192].create_time"
    assert result.volumes[192].virtual_volume_id is None, "Died on .volumes[192].virtual_volume_id"
    assert result.volumes[191].status == """active""", "Died on +.volumes[191].status"
    assert result.volumes[191].enable512e == False, "Died on +.volumes[191].enable512e"
    assert result.volumes[191].qos.burst_iops == 15000, "Died on +.volumes[191].qos.burst_iops"
    assert result.volumes[191].qos.burst_time == 60, "Died on +.volumes[191].qos.burst_time"
    assert result.volumes[191].qos.min_iops == 100, "Died on +.volumes[191].qos.min_iops"
    assert result.volumes[191].qos.max_iops == 15000, "Died on +.volumes[191].qos.max_iops"
    assert result.volumes[191].name == """snapshots-source-192""", "Died on +.volumes[191].name"
    assert result.volumes[191].volume_access_groups[0] == 4, "Died on +.volumes[191].volume_access_groups[0]"
    assert result.volumes[191].scsi_naadevice_id == """6f47acc1000000006d696434000002b4""", "Died on +.volumes[191].scsi_naadevice_id"
    assert result.volumes[191].total_size == 5000658944, "Died on +.volumes[191].total_size"
    assert result.volumes[191].block_size == 4096, "Died on +.volumes[191].block_size"
    assert result.volumes[191].scsi_euidevice_id == """6d696434000002b4f47acc0100000000""", "Died on +.volumes[191].scsi_euidevice_id"
    assert result.volumes[191].volume_id == 692, "Died on +.volumes[191].volume_id"
    assert result.volumes[191].access == """readWrite""", "Died on +.volumes[191].access"
    assert result.volumes[191].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-192.692""", "Died on +.volumes[191].iqn"
    assert result.volumes[191].slice_count == 1, "Died on +.volumes[191].slice_count"
    assert type(result.volumes[191].attributes) is dict, "Died on .volumes[191].attributes"
    assert result.volumes[191].volume_pairs[0].volume_pair_uuid == UUID("32f0b8cd-c07d-4838-a178-e00bc28638d9"), "Died on .volumes[191].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[191].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[191].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[191].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[191].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[191].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[191].volume_pairs[0].remote_replication.state"
    assert result.volumes[191].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[191].volume_pairs[0].remote_replication.mode"
    assert result.volumes[191].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[191].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[191].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[191].volume_pairs[0].cluster_pair_id"
    assert result.volumes[191].volume_pairs[0].remote_volume_id == 1192, "Died on +.volumes[191].volume_pairs[0].remote_volume_id"
    assert result.volumes[191].volume_pairs[0].remote_volume_name == """snap-target-192""", "Died on +.volumes[191].volume_pairs[0].remote_volume_name"
    assert result.volumes[191].volume_pairs[0].remote_slice_id == 1192, "Died on +.volumes[191].volume_pairs[0].remote_slice_id"
    assert result.volumes[191].account_id == 4, "Died on +.volumes[191].account_id"
    assert result.volumes[191].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[191].create_time"
    assert result.volumes[191].virtual_volume_id is None, "Died on .volumes[191].virtual_volume_id"
    assert result.volumes[190].status == """active""", "Died on +.volumes[190].status"
    assert result.volumes[190].enable512e == False, "Died on +.volumes[190].enable512e"
    assert result.volumes[190].qos.burst_iops == 15000, "Died on +.volumes[190].qos.burst_iops"
    assert result.volumes[190].qos.burst_time == 60, "Died on +.volumes[190].qos.burst_time"
    assert result.volumes[190].qos.min_iops == 100, "Died on +.volumes[190].qos.min_iops"
    assert result.volumes[190].qos.max_iops == 15000, "Died on +.volumes[190].qos.max_iops"
    assert result.volumes[190].name == """snapshots-source-191""", "Died on +.volumes[190].name"
    assert result.volumes[190].volume_access_groups[0] == 4, "Died on +.volumes[190].volume_access_groups[0]"
    assert result.volumes[190].scsi_naadevice_id == """6f47acc1000000006d696434000002b3""", "Died on +.volumes[190].scsi_naadevice_id"
    assert result.volumes[190].total_size == 5000658944, "Died on +.volumes[190].total_size"
    assert result.volumes[190].block_size == 4096, "Died on +.volumes[190].block_size"
    assert result.volumes[190].scsi_euidevice_id == """6d696434000002b3f47acc0100000000""", "Died on +.volumes[190].scsi_euidevice_id"
    assert result.volumes[190].volume_id == 691, "Died on +.volumes[190].volume_id"
    assert result.volumes[190].access == """readWrite""", "Died on +.volumes[190].access"
    assert result.volumes[190].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-191.691""", "Died on +.volumes[190].iqn"
    assert result.volumes[190].slice_count == 1, "Died on +.volumes[190].slice_count"
    assert type(result.volumes[190].attributes) is dict, "Died on .volumes[190].attributes"
    assert result.volumes[190].volume_pairs[0].volume_pair_uuid == UUID("387d76ac-64a1-459d-ae89-c3d669033054"), "Died on .volumes[190].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[190].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[190].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[190].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[190].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[190].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[190].volume_pairs[0].remote_replication.state"
    assert result.volumes[190].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[190].volume_pairs[0].remote_replication.mode"
    assert result.volumes[190].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[190].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[190].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[190].volume_pairs[0].cluster_pair_id"
    assert result.volumes[190].volume_pairs[0].remote_volume_id == 1191, "Died on +.volumes[190].volume_pairs[0].remote_volume_id"
    assert result.volumes[190].volume_pairs[0].remote_volume_name == """snap-target-191""", "Died on +.volumes[190].volume_pairs[0].remote_volume_name"
    assert result.volumes[190].volume_pairs[0].remote_slice_id == 1191, "Died on +.volumes[190].volume_pairs[0].remote_slice_id"
    assert result.volumes[190].account_id == 4, "Died on +.volumes[190].account_id"
    assert result.volumes[190].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[190].create_time"
    assert result.volumes[190].virtual_volume_id is None, "Died on .volumes[190].virtual_volume_id"
    assert result.volumes[189].status == """active""", "Died on +.volumes[189].status"
    assert result.volumes[189].enable512e == False, "Died on +.volumes[189].enable512e"
    assert result.volumes[189].qos.burst_iops == 15000, "Died on +.volumes[189].qos.burst_iops"
    assert result.volumes[189].qos.burst_time == 60, "Died on +.volumes[189].qos.burst_time"
    assert result.volumes[189].qos.min_iops == 100, "Died on +.volumes[189].qos.min_iops"
    assert result.volumes[189].qos.max_iops == 15000, "Died on +.volumes[189].qos.max_iops"
    assert result.volumes[189].name == """snapshots-source-190""", "Died on +.volumes[189].name"
    assert result.volumes[189].volume_access_groups[0] == 4, "Died on +.volumes[189].volume_access_groups[0]"
    assert result.volumes[189].scsi_naadevice_id == """6f47acc1000000006d696434000002b2""", "Died on +.volumes[189].scsi_naadevice_id"
    assert result.volumes[189].total_size == 5000658944, "Died on +.volumes[189].total_size"
    assert result.volumes[189].block_size == 4096, "Died on +.volumes[189].block_size"
    assert result.volumes[189].scsi_euidevice_id == """6d696434000002b2f47acc0100000000""", "Died on +.volumes[189].scsi_euidevice_id"
    assert result.volumes[189].volume_id == 690, "Died on +.volumes[189].volume_id"
    assert result.volumes[189].access == """readWrite""", "Died on +.volumes[189].access"
    assert result.volumes[189].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-190.690""", "Died on +.volumes[189].iqn"
    assert result.volumes[189].slice_count == 1, "Died on +.volumes[189].slice_count"
    assert type(result.volumes[189].attributes) is dict, "Died on .volumes[189].attributes"
    assert result.volumes[189].volume_pairs[0].volume_pair_uuid == UUID("55ca3681-bf4b-4f01-8d66-4ae543cbc726"), "Died on .volumes[189].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[189].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[189].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[189].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[189].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[189].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[189].volume_pairs[0].remote_replication.state"
    assert result.volumes[189].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[189].volume_pairs[0].remote_replication.mode"
    assert result.volumes[189].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[189].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[189].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[189].volume_pairs[0].cluster_pair_id"
    assert result.volumes[189].volume_pairs[0].remote_volume_id == 1190, "Died on +.volumes[189].volume_pairs[0].remote_volume_id"
    assert result.volumes[189].volume_pairs[0].remote_volume_name == """snap-target-190""", "Died on +.volumes[189].volume_pairs[0].remote_volume_name"
    assert result.volumes[189].volume_pairs[0].remote_slice_id == 1190, "Died on +.volumes[189].volume_pairs[0].remote_slice_id"
    assert result.volumes[189].account_id == 4, "Died on +.volumes[189].account_id"
    assert result.volumes[189].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[189].create_time"
    assert result.volumes[189].virtual_volume_id is None, "Died on .volumes[189].virtual_volume_id"
    assert result.volumes[188].status == """active""", "Died on +.volumes[188].status"
    assert result.volumes[188].enable512e == False, "Died on +.volumes[188].enable512e"
    assert result.volumes[188].qos.burst_iops == 15000, "Died on +.volumes[188].qos.burst_iops"
    assert result.volumes[188].qos.burst_time == 60, "Died on +.volumes[188].qos.burst_time"
    assert result.volumes[188].qos.min_iops == 100, "Died on +.volumes[188].qos.min_iops"
    assert result.volumes[188].qos.max_iops == 15000, "Died on +.volumes[188].qos.max_iops"
    assert result.volumes[188].name == """snapshots-source-189""", "Died on +.volumes[188].name"
    assert result.volumes[188].volume_access_groups[0] == 4, "Died on +.volumes[188].volume_access_groups[0]"
    assert result.volumes[188].scsi_naadevice_id == """6f47acc1000000006d696434000002b1""", "Died on +.volumes[188].scsi_naadevice_id"
    assert result.volumes[188].total_size == 5000658944, "Died on +.volumes[188].total_size"
    assert result.volumes[188].block_size == 4096, "Died on +.volumes[188].block_size"
    assert result.volumes[188].scsi_euidevice_id == """6d696434000002b1f47acc0100000000""", "Died on +.volumes[188].scsi_euidevice_id"
    assert result.volumes[188].volume_id == 689, "Died on +.volumes[188].volume_id"
    assert result.volumes[188].access == """readWrite""", "Died on +.volumes[188].access"
    assert result.volumes[188].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-189.689""", "Died on +.volumes[188].iqn"
    assert result.volumes[188].slice_count == 1, "Died on +.volumes[188].slice_count"
    assert type(result.volumes[188].attributes) is dict, "Died on .volumes[188].attributes"
    assert result.volumes[188].volume_pairs[0].volume_pair_uuid == UUID("8386df93-160b-40e5-927e-423856f95ba9"), "Died on .volumes[188].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[188].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[188].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[188].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[188].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[188].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[188].volume_pairs[0].remote_replication.state"
    assert result.volumes[188].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[188].volume_pairs[0].remote_replication.mode"
    assert result.volumes[188].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[188].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[188].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[188].volume_pairs[0].cluster_pair_id"
    assert result.volumes[188].volume_pairs[0].remote_volume_id == 1189, "Died on +.volumes[188].volume_pairs[0].remote_volume_id"
    assert result.volumes[188].volume_pairs[0].remote_volume_name == """snap-target-189""", "Died on +.volumes[188].volume_pairs[0].remote_volume_name"
    assert result.volumes[188].volume_pairs[0].remote_slice_id == 1189, "Died on +.volumes[188].volume_pairs[0].remote_slice_id"
    assert result.volumes[188].account_id == 4, "Died on +.volumes[188].account_id"
    assert result.volumes[188].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[188].create_time"
    assert result.volumes[188].virtual_volume_id is None, "Died on .volumes[188].virtual_volume_id"
    assert result.volumes[187].status == """active""", "Died on +.volumes[187].status"
    assert result.volumes[187].enable512e == False, "Died on +.volumes[187].enable512e"
    assert result.volumes[187].qos.burst_iops == 15000, "Died on +.volumes[187].qos.burst_iops"
    assert result.volumes[187].qos.burst_time == 60, "Died on +.volumes[187].qos.burst_time"
    assert result.volumes[187].qos.min_iops == 100, "Died on +.volumes[187].qos.min_iops"
    assert result.volumes[187].qos.max_iops == 15000, "Died on +.volumes[187].qos.max_iops"
    assert result.volumes[187].name == """snapshots-source-188""", "Died on +.volumes[187].name"
    assert result.volumes[187].volume_access_groups[0] == 4, "Died on +.volumes[187].volume_access_groups[0]"
    assert result.volumes[187].scsi_naadevice_id == """6f47acc1000000006d696434000002b0""", "Died on +.volumes[187].scsi_naadevice_id"
    assert result.volumes[187].total_size == 5000658944, "Died on +.volumes[187].total_size"
    assert result.volumes[187].block_size == 4096, "Died on +.volumes[187].block_size"
    assert result.volumes[187].scsi_euidevice_id == """6d696434000002b0f47acc0100000000""", "Died on +.volumes[187].scsi_euidevice_id"
    assert result.volumes[187].volume_id == 688, "Died on +.volumes[187].volume_id"
    assert result.volumes[187].access == """readWrite""", "Died on +.volumes[187].access"
    assert result.volumes[187].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-188.688""", "Died on +.volumes[187].iqn"
    assert result.volumes[187].slice_count == 1, "Died on +.volumes[187].slice_count"
    assert type(result.volumes[187].attributes) is dict, "Died on .volumes[187].attributes"
    assert result.volumes[187].volume_pairs[0].volume_pair_uuid == UUID("f022ecc3-8b0d-43d8-b2fb-8ccf04ead49a"), "Died on .volumes[187].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[187].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[187].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[187].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[187].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[187].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[187].volume_pairs[0].remote_replication.state"
    assert result.volumes[187].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[187].volume_pairs[0].remote_replication.mode"
    assert result.volumes[187].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[187].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[187].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[187].volume_pairs[0].cluster_pair_id"
    assert result.volumes[187].volume_pairs[0].remote_volume_id == 1188, "Died on +.volumes[187].volume_pairs[0].remote_volume_id"
    assert result.volumes[187].volume_pairs[0].remote_volume_name == """snap-target-188""", "Died on +.volumes[187].volume_pairs[0].remote_volume_name"
    assert result.volumes[187].volume_pairs[0].remote_slice_id == 1188, "Died on +.volumes[187].volume_pairs[0].remote_slice_id"
    assert result.volumes[187].account_id == 4, "Died on +.volumes[187].account_id"
    assert result.volumes[187].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[187].create_time"
    assert result.volumes[187].virtual_volume_id is None, "Died on .volumes[187].virtual_volume_id"
    assert result.volumes[186].status == """active""", "Died on +.volumes[186].status"
    assert result.volumes[186].enable512e == False, "Died on +.volumes[186].enable512e"
    assert result.volumes[186].qos.burst_iops == 15000, "Died on +.volumes[186].qos.burst_iops"
    assert result.volumes[186].qos.burst_time == 60, "Died on +.volumes[186].qos.burst_time"
    assert result.volumes[186].qos.min_iops == 100, "Died on +.volumes[186].qos.min_iops"
    assert result.volumes[186].qos.max_iops == 15000, "Died on +.volumes[186].qos.max_iops"
    assert result.volumes[186].name == """snapshots-source-187""", "Died on +.volumes[186].name"
    assert result.volumes[186].volume_access_groups[0] == 4, "Died on +.volumes[186].volume_access_groups[0]"
    assert result.volumes[186].scsi_naadevice_id == """6f47acc1000000006d696434000002af""", "Died on +.volumes[186].scsi_naadevice_id"
    assert result.volumes[186].total_size == 5000658944, "Died on +.volumes[186].total_size"
    assert result.volumes[186].block_size == 4096, "Died on +.volumes[186].block_size"
    assert result.volumes[186].scsi_euidevice_id == """6d696434000002aff47acc0100000000""", "Died on +.volumes[186].scsi_euidevice_id"
    assert result.volumes[186].volume_id == 687, "Died on +.volumes[186].volume_id"
    assert result.volumes[186].access == """readWrite""", "Died on +.volumes[186].access"
    assert result.volumes[186].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-187.687""", "Died on +.volumes[186].iqn"
    assert result.volumes[186].slice_count == 1, "Died on +.volumes[186].slice_count"
    assert type(result.volumes[186].attributes) is dict, "Died on .volumes[186].attributes"
    assert result.volumes[186].volume_pairs[0].volume_pair_uuid == UUID("bc851708-f542-493e-9a6f-ef0eddd19573"), "Died on .volumes[186].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[186].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[186].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[186].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[186].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[186].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[186].volume_pairs[0].remote_replication.state"
    assert result.volumes[186].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[186].volume_pairs[0].remote_replication.mode"
    assert result.volumes[186].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[186].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[186].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[186].volume_pairs[0].cluster_pair_id"
    assert result.volumes[186].volume_pairs[0].remote_volume_id == 1187, "Died on +.volumes[186].volume_pairs[0].remote_volume_id"
    assert result.volumes[186].volume_pairs[0].remote_volume_name == """snap-target-187""", "Died on +.volumes[186].volume_pairs[0].remote_volume_name"
    assert result.volumes[186].volume_pairs[0].remote_slice_id == 1187, "Died on +.volumes[186].volume_pairs[0].remote_slice_id"
    assert result.volumes[186].account_id == 4, "Died on +.volumes[186].account_id"
    assert result.volumes[186].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[186].create_time"
    assert result.volumes[186].virtual_volume_id is None, "Died on .volumes[186].virtual_volume_id"
    assert result.volumes[185].status == """active""", "Died on +.volumes[185].status"
    assert result.volumes[185].enable512e == False, "Died on +.volumes[185].enable512e"
    assert result.volumes[185].qos.burst_iops == 15000, "Died on +.volumes[185].qos.burst_iops"
    assert result.volumes[185].qos.burst_time == 60, "Died on +.volumes[185].qos.burst_time"
    assert result.volumes[185].qos.min_iops == 100, "Died on +.volumes[185].qos.min_iops"
    assert result.volumes[185].qos.max_iops == 15000, "Died on +.volumes[185].qos.max_iops"
    assert result.volumes[185].name == """snapshots-source-186""", "Died on +.volumes[185].name"
    assert result.volumes[185].volume_access_groups[0] == 4, "Died on +.volumes[185].volume_access_groups[0]"
    assert result.volumes[185].scsi_naadevice_id == """6f47acc1000000006d696434000002ae""", "Died on +.volumes[185].scsi_naadevice_id"
    assert result.volumes[185].total_size == 5000658944, "Died on +.volumes[185].total_size"
    assert result.volumes[185].block_size == 4096, "Died on +.volumes[185].block_size"
    assert result.volumes[185].scsi_euidevice_id == """6d696434000002aef47acc0100000000""", "Died on +.volumes[185].scsi_euidevice_id"
    assert result.volumes[185].volume_id == 686, "Died on +.volumes[185].volume_id"
    assert result.volumes[185].access == """readWrite""", "Died on +.volumes[185].access"
    assert result.volumes[185].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-186.686""", "Died on +.volumes[185].iqn"
    assert result.volumes[185].slice_count == 1, "Died on +.volumes[185].slice_count"
    assert type(result.volumes[185].attributes) is dict, "Died on .volumes[185].attributes"
    assert result.volumes[185].volume_pairs[0].volume_pair_uuid == UUID("6fc6f4a2-f556-4d66-b213-be9213dddfe6"), "Died on .volumes[185].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[185].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[185].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[185].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[185].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[185].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[185].volume_pairs[0].remote_replication.state"
    assert result.volumes[185].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[185].volume_pairs[0].remote_replication.mode"
    assert result.volumes[185].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[185].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[185].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[185].volume_pairs[0].cluster_pair_id"
    assert result.volumes[185].volume_pairs[0].remote_volume_id == 1186, "Died on +.volumes[185].volume_pairs[0].remote_volume_id"
    assert result.volumes[185].volume_pairs[0].remote_volume_name == """snap-target-186""", "Died on +.volumes[185].volume_pairs[0].remote_volume_name"
    assert result.volumes[185].volume_pairs[0].remote_slice_id == 1186, "Died on +.volumes[185].volume_pairs[0].remote_slice_id"
    assert result.volumes[185].account_id == 4, "Died on +.volumes[185].account_id"
    assert result.volumes[185].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[185].create_time"
    assert result.volumes[185].virtual_volume_id is None, "Died on .volumes[185].virtual_volume_id"
    assert result.volumes[184].status == """active""", "Died on +.volumes[184].status"
    assert result.volumes[184].enable512e == False, "Died on +.volumes[184].enable512e"
    assert result.volumes[184].qos.burst_iops == 15000, "Died on +.volumes[184].qos.burst_iops"
    assert result.volumes[184].qos.burst_time == 60, "Died on +.volumes[184].qos.burst_time"
    assert result.volumes[184].qos.min_iops == 100, "Died on +.volumes[184].qos.min_iops"
    assert result.volumes[184].qos.max_iops == 15000, "Died on +.volumes[184].qos.max_iops"
    assert result.volumes[184].name == """snapshots-source-185""", "Died on +.volumes[184].name"
    assert result.volumes[184].volume_access_groups[0] == 4, "Died on +.volumes[184].volume_access_groups[0]"
    assert result.volumes[184].scsi_naadevice_id == """6f47acc1000000006d696434000002ad""", "Died on +.volumes[184].scsi_naadevice_id"
    assert result.volumes[184].total_size == 5000658944, "Died on +.volumes[184].total_size"
    assert result.volumes[184].block_size == 4096, "Died on +.volumes[184].block_size"
    assert result.volumes[184].scsi_euidevice_id == """6d696434000002adf47acc0100000000""", "Died on +.volumes[184].scsi_euidevice_id"
    assert result.volumes[184].volume_id == 685, "Died on +.volumes[184].volume_id"
    assert result.volumes[184].access == """readWrite""", "Died on +.volumes[184].access"
    assert result.volumes[184].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-185.685""", "Died on +.volumes[184].iqn"
    assert result.volumes[184].slice_count == 1, "Died on +.volumes[184].slice_count"
    assert type(result.volumes[184].attributes) is dict, "Died on .volumes[184].attributes"
    assert result.volumes[184].volume_pairs[0].volume_pair_uuid == UUID("df0afa37-f2ce-4382-bdbb-aa09d47055da"), "Died on .volumes[184].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[184].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[184].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[184].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[184].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[184].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[184].volume_pairs[0].remote_replication.state"
    assert result.volumes[184].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[184].volume_pairs[0].remote_replication.mode"
    assert result.volumes[184].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[184].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[184].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[184].volume_pairs[0].cluster_pair_id"
    assert result.volumes[184].volume_pairs[0].remote_volume_id == 1185, "Died on +.volumes[184].volume_pairs[0].remote_volume_id"
    assert result.volumes[184].volume_pairs[0].remote_volume_name == """snap-target-185""", "Died on +.volumes[184].volume_pairs[0].remote_volume_name"
    assert result.volumes[184].volume_pairs[0].remote_slice_id == 1185, "Died on +.volumes[184].volume_pairs[0].remote_slice_id"
    assert result.volumes[184].account_id == 4, "Died on +.volumes[184].account_id"
    assert result.volumes[184].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[184].create_time"
    assert result.volumes[184].virtual_volume_id is None, "Died on .volumes[184].virtual_volume_id"
    assert result.volumes[183].status == """active""", "Died on +.volumes[183].status"
    assert result.volumes[183].enable512e == False, "Died on +.volumes[183].enable512e"
    assert result.volumes[183].qos.burst_iops == 15000, "Died on +.volumes[183].qos.burst_iops"
    assert result.volumes[183].qos.burst_time == 60, "Died on +.volumes[183].qos.burst_time"
    assert result.volumes[183].qos.min_iops == 100, "Died on +.volumes[183].qos.min_iops"
    assert result.volumes[183].qos.max_iops == 15000, "Died on +.volumes[183].qos.max_iops"
    assert result.volumes[183].name == """snapshots-source-184""", "Died on +.volumes[183].name"
    assert result.volumes[183].volume_access_groups[0] == 4, "Died on +.volumes[183].volume_access_groups[0]"
    assert result.volumes[183].scsi_naadevice_id == """6f47acc1000000006d696434000002ac""", "Died on +.volumes[183].scsi_naadevice_id"
    assert result.volumes[183].total_size == 5000658944, "Died on +.volumes[183].total_size"
    assert result.volumes[183].block_size == 4096, "Died on +.volumes[183].block_size"
    assert result.volumes[183].scsi_euidevice_id == """6d696434000002acf47acc0100000000""", "Died on +.volumes[183].scsi_euidevice_id"
    assert result.volumes[183].volume_id == 684, "Died on +.volumes[183].volume_id"
    assert result.volumes[183].access == """readWrite""", "Died on +.volumes[183].access"
    assert result.volumes[183].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-184.684""", "Died on +.volumes[183].iqn"
    assert result.volumes[183].slice_count == 1, "Died on +.volumes[183].slice_count"
    assert type(result.volumes[183].attributes) is dict, "Died on .volumes[183].attributes"
    assert result.volumes[183].volume_pairs[0].volume_pair_uuid == UUID("55683b6f-f95a-442b-841c-48bb8f0b9e3b"), "Died on .volumes[183].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[183].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[183].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[183].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[183].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[183].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[183].volume_pairs[0].remote_replication.state"
    assert result.volumes[183].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[183].volume_pairs[0].remote_replication.mode"
    assert result.volumes[183].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[183].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[183].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[183].volume_pairs[0].cluster_pair_id"
    assert result.volumes[183].volume_pairs[0].remote_volume_id == 1184, "Died on +.volumes[183].volume_pairs[0].remote_volume_id"
    assert result.volumes[183].volume_pairs[0].remote_volume_name == """snap-target-184""", "Died on +.volumes[183].volume_pairs[0].remote_volume_name"
    assert result.volumes[183].volume_pairs[0].remote_slice_id == 1184, "Died on +.volumes[183].volume_pairs[0].remote_slice_id"
    assert result.volumes[183].account_id == 4, "Died on +.volumes[183].account_id"
    assert result.volumes[183].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[183].create_time"
    assert result.volumes[183].virtual_volume_id is None, "Died on .volumes[183].virtual_volume_id"
    assert result.volumes[182].status == """active""", "Died on +.volumes[182].status"
    assert result.volumes[182].enable512e == False, "Died on +.volumes[182].enable512e"
    assert result.volumes[182].qos.burst_iops == 15000, "Died on +.volumes[182].qos.burst_iops"
    assert result.volumes[182].qos.burst_time == 60, "Died on +.volumes[182].qos.burst_time"
    assert result.volumes[182].qos.min_iops == 100, "Died on +.volumes[182].qos.min_iops"
    assert result.volumes[182].qos.max_iops == 15000, "Died on +.volumes[182].qos.max_iops"
    assert result.volumes[182].name == """snapshots-source-183""", "Died on +.volumes[182].name"
    assert result.volumes[182].volume_access_groups[0] == 4, "Died on +.volumes[182].volume_access_groups[0]"
    assert result.volumes[182].scsi_naadevice_id == """6f47acc1000000006d696434000002ab""", "Died on +.volumes[182].scsi_naadevice_id"
    assert result.volumes[182].total_size == 5000658944, "Died on +.volumes[182].total_size"
    assert result.volumes[182].block_size == 4096, "Died on +.volumes[182].block_size"
    assert result.volumes[182].scsi_euidevice_id == """6d696434000002abf47acc0100000000""", "Died on +.volumes[182].scsi_euidevice_id"
    assert result.volumes[182].volume_id == 683, "Died on +.volumes[182].volume_id"
    assert result.volumes[182].access == """readWrite""", "Died on +.volumes[182].access"
    assert result.volumes[182].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-183.683""", "Died on +.volumes[182].iqn"
    assert result.volumes[182].slice_count == 1, "Died on +.volumes[182].slice_count"
    assert type(result.volumes[182].attributes) is dict, "Died on .volumes[182].attributes"
    assert result.volumes[182].volume_pairs[0].volume_pair_uuid == UUID("9090a8b3-cd3f-4b56-a985-070fbd04fb10"), "Died on .volumes[182].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[182].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[182].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[182].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[182].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[182].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[182].volume_pairs[0].remote_replication.state"
    assert result.volumes[182].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[182].volume_pairs[0].remote_replication.mode"
    assert result.volumes[182].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[182].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[182].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[182].volume_pairs[0].cluster_pair_id"
    assert result.volumes[182].volume_pairs[0].remote_volume_id == 1183, "Died on +.volumes[182].volume_pairs[0].remote_volume_id"
    assert result.volumes[182].volume_pairs[0].remote_volume_name == """snap-target-183""", "Died on +.volumes[182].volume_pairs[0].remote_volume_name"
    assert result.volumes[182].volume_pairs[0].remote_slice_id == 1183, "Died on +.volumes[182].volume_pairs[0].remote_slice_id"
    assert result.volumes[182].account_id == 4, "Died on +.volumes[182].account_id"
    assert result.volumes[182].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[182].create_time"
    assert result.volumes[182].virtual_volume_id is None, "Died on .volumes[182].virtual_volume_id"
    assert result.volumes[181].status == """active""", "Died on +.volumes[181].status"
    assert result.volumes[181].enable512e == False, "Died on +.volumes[181].enable512e"
    assert result.volumes[181].qos.burst_iops == 15000, "Died on +.volumes[181].qos.burst_iops"
    assert result.volumes[181].qos.burst_time == 60, "Died on +.volumes[181].qos.burst_time"
    assert result.volumes[181].qos.min_iops == 100, "Died on +.volumes[181].qos.min_iops"
    assert result.volumes[181].qos.max_iops == 15000, "Died on +.volumes[181].qos.max_iops"
    assert result.volumes[181].name == """snapshots-source-182""", "Died on +.volumes[181].name"
    assert result.volumes[181].volume_access_groups[0] == 4, "Died on +.volumes[181].volume_access_groups[0]"
    assert result.volumes[181].scsi_naadevice_id == """6f47acc1000000006d696434000002aa""", "Died on +.volumes[181].scsi_naadevice_id"
    assert result.volumes[181].total_size == 5000658944, "Died on +.volumes[181].total_size"
    assert result.volumes[181].block_size == 4096, "Died on +.volumes[181].block_size"
    assert result.volumes[181].scsi_euidevice_id == """6d696434000002aaf47acc0100000000""", "Died on +.volumes[181].scsi_euidevice_id"
    assert result.volumes[181].volume_id == 682, "Died on +.volumes[181].volume_id"
    assert result.volumes[181].access == """readWrite""", "Died on +.volumes[181].access"
    assert result.volumes[181].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-182.682""", "Died on +.volumes[181].iqn"
    assert result.volumes[181].slice_count == 1, "Died on +.volumes[181].slice_count"
    assert type(result.volumes[181].attributes) is dict, "Died on .volumes[181].attributes"
    assert result.volumes[181].volume_pairs[0].volume_pair_uuid == UUID("bb57a34b-73f9-4fe8-a745-7e4e7b177a01"), "Died on .volumes[181].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[181].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[181].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[181].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[181].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[181].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[181].volume_pairs[0].remote_replication.state"
    assert result.volumes[181].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[181].volume_pairs[0].remote_replication.mode"
    assert result.volumes[181].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[181].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[181].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[181].volume_pairs[0].cluster_pair_id"
    assert result.volumes[181].volume_pairs[0].remote_volume_id == 1182, "Died on +.volumes[181].volume_pairs[0].remote_volume_id"
    assert result.volumes[181].volume_pairs[0].remote_volume_name == """snap-target-182""", "Died on +.volumes[181].volume_pairs[0].remote_volume_name"
    assert result.volumes[181].volume_pairs[0].remote_slice_id == 1182, "Died on +.volumes[181].volume_pairs[0].remote_slice_id"
    assert result.volumes[181].account_id == 4, "Died on +.volumes[181].account_id"
    assert result.volumes[181].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[181].create_time"
    assert result.volumes[181].virtual_volume_id is None, "Died on .volumes[181].virtual_volume_id"
    assert result.volumes[180].status == """active""", "Died on +.volumes[180].status"
    assert result.volumes[180].enable512e == False, "Died on +.volumes[180].enable512e"
    assert result.volumes[180].qos.burst_iops == 15000, "Died on +.volumes[180].qos.burst_iops"
    assert result.volumes[180].qos.burst_time == 60, "Died on +.volumes[180].qos.burst_time"
    assert result.volumes[180].qos.min_iops == 100, "Died on +.volumes[180].qos.min_iops"
    assert result.volumes[180].qos.max_iops == 15000, "Died on +.volumes[180].qos.max_iops"
    assert result.volumes[180].name == """snapshots-source-181""", "Died on +.volumes[180].name"
    assert result.volumes[180].volume_access_groups[0] == 4, "Died on +.volumes[180].volume_access_groups[0]"
    assert result.volumes[180].scsi_naadevice_id == """6f47acc1000000006d696434000002a9""", "Died on +.volumes[180].scsi_naadevice_id"
    assert result.volumes[180].total_size == 5000658944, "Died on +.volumes[180].total_size"
    assert result.volumes[180].block_size == 4096, "Died on +.volumes[180].block_size"
    assert result.volumes[180].scsi_euidevice_id == """6d696434000002a9f47acc0100000000""", "Died on +.volumes[180].scsi_euidevice_id"
    assert result.volumes[180].volume_id == 681, "Died on +.volumes[180].volume_id"
    assert result.volumes[180].access == """readWrite""", "Died on +.volumes[180].access"
    assert result.volumes[180].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-181.681""", "Died on +.volumes[180].iqn"
    assert result.volumes[180].slice_count == 1, "Died on +.volumes[180].slice_count"
    assert type(result.volumes[180].attributes) is dict, "Died on .volumes[180].attributes"
    assert result.volumes[180].volume_pairs[0].volume_pair_uuid == UUID("8fd1e765-f613-4979-a709-3923d1682d7e"), "Died on .volumes[180].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[180].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[180].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[180].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[180].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[180].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[180].volume_pairs[0].remote_replication.state"
    assert result.volumes[180].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[180].volume_pairs[0].remote_replication.mode"
    assert result.volumes[180].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[180].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[180].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[180].volume_pairs[0].cluster_pair_id"
    assert result.volumes[180].volume_pairs[0].remote_volume_id == 1181, "Died on +.volumes[180].volume_pairs[0].remote_volume_id"
    assert result.volumes[180].volume_pairs[0].remote_volume_name == """snap-target-181""", "Died on +.volumes[180].volume_pairs[0].remote_volume_name"
    assert result.volumes[180].volume_pairs[0].remote_slice_id == 1181, "Died on +.volumes[180].volume_pairs[0].remote_slice_id"
    assert result.volumes[180].account_id == 4, "Died on +.volumes[180].account_id"
    assert result.volumes[180].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[180].create_time"
    assert result.volumes[180].virtual_volume_id is None, "Died on .volumes[180].virtual_volume_id"
    assert result.volumes[179].status == """active""", "Died on +.volumes[179].status"
    assert result.volumes[179].enable512e == False, "Died on +.volumes[179].enable512e"
    assert result.volumes[179].qos.burst_iops == 15000, "Died on +.volumes[179].qos.burst_iops"
    assert result.volumes[179].qos.burst_time == 60, "Died on +.volumes[179].qos.burst_time"
    assert result.volumes[179].qos.min_iops == 100, "Died on +.volumes[179].qos.min_iops"
    assert result.volumes[179].qos.max_iops == 15000, "Died on +.volumes[179].qos.max_iops"
    assert result.volumes[179].name == """snapshots-source-180""", "Died on +.volumes[179].name"
    assert result.volumes[179].volume_access_groups[0] == 4, "Died on +.volumes[179].volume_access_groups[0]"
    assert result.volumes[179].scsi_naadevice_id == """6f47acc1000000006d696434000002a8""", "Died on +.volumes[179].scsi_naadevice_id"
    assert result.volumes[179].total_size == 5000658944, "Died on +.volumes[179].total_size"
    assert result.volumes[179].block_size == 4096, "Died on +.volumes[179].block_size"
    assert result.volumes[179].scsi_euidevice_id == """6d696434000002a8f47acc0100000000""", "Died on +.volumes[179].scsi_euidevice_id"
    assert result.volumes[179].volume_id == 680, "Died on +.volumes[179].volume_id"
    assert result.volumes[179].access == """readWrite""", "Died on +.volumes[179].access"
    assert result.volumes[179].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-180.680""", "Died on +.volumes[179].iqn"
    assert result.volumes[179].slice_count == 1, "Died on +.volumes[179].slice_count"
    assert type(result.volumes[179].attributes) is dict, "Died on .volumes[179].attributes"
    assert result.volumes[179].volume_pairs[0].volume_pair_uuid == UUID("f731c66e-29b6-482c-8c71-5541143e7650"), "Died on .volumes[179].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[179].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[179].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[179].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[179].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[179].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[179].volume_pairs[0].remote_replication.state"
    assert result.volumes[179].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[179].volume_pairs[0].remote_replication.mode"
    assert result.volumes[179].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[179].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[179].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[179].volume_pairs[0].cluster_pair_id"
    assert result.volumes[179].volume_pairs[0].remote_volume_id == 1180, "Died on +.volumes[179].volume_pairs[0].remote_volume_id"
    assert result.volumes[179].volume_pairs[0].remote_volume_name == """snap-target-180""", "Died on +.volumes[179].volume_pairs[0].remote_volume_name"
    assert result.volumes[179].volume_pairs[0].remote_slice_id == 1180, "Died on +.volumes[179].volume_pairs[0].remote_slice_id"
    assert result.volumes[179].account_id == 4, "Died on +.volumes[179].account_id"
    assert result.volumes[179].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[179].create_time"
    assert result.volumes[179].virtual_volume_id is None, "Died on .volumes[179].virtual_volume_id"
    assert result.volumes[178].status == """active""", "Died on +.volumes[178].status"
    assert result.volumes[178].enable512e == False, "Died on +.volumes[178].enable512e"
    assert result.volumes[178].qos.burst_iops == 15000, "Died on +.volumes[178].qos.burst_iops"
    assert result.volumes[178].qos.burst_time == 60, "Died on +.volumes[178].qos.burst_time"
    assert result.volumes[178].qos.min_iops == 100, "Died on +.volumes[178].qos.min_iops"
    assert result.volumes[178].qos.max_iops == 15000, "Died on +.volumes[178].qos.max_iops"
    assert result.volumes[178].name == """snapshots-source-179""", "Died on +.volumes[178].name"
    assert result.volumes[178].volume_access_groups[0] == 4, "Died on +.volumes[178].volume_access_groups[0]"
    assert result.volumes[178].scsi_naadevice_id == """6f47acc1000000006d696434000002a7""", "Died on +.volumes[178].scsi_naadevice_id"
    assert result.volumes[178].total_size == 5000658944, "Died on +.volumes[178].total_size"
    assert result.volumes[178].block_size == 4096, "Died on +.volumes[178].block_size"
    assert result.volumes[178].scsi_euidevice_id == """6d696434000002a7f47acc0100000000""", "Died on +.volumes[178].scsi_euidevice_id"
    assert result.volumes[178].volume_id == 679, "Died on +.volumes[178].volume_id"
    assert result.volumes[178].access == """readWrite""", "Died on +.volumes[178].access"
    assert result.volumes[178].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-179.679""", "Died on +.volumes[178].iqn"
    assert result.volumes[178].slice_count == 1, "Died on +.volumes[178].slice_count"
    assert type(result.volumes[178].attributes) is dict, "Died on .volumes[178].attributes"
    assert result.volumes[178].volume_pairs[0].volume_pair_uuid == UUID("45fe3754-7310-465d-b5c1-04271983b407"), "Died on .volumes[178].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[178].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[178].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[178].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[178].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[178].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[178].volume_pairs[0].remote_replication.state"
    assert result.volumes[178].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[178].volume_pairs[0].remote_replication.mode"
    assert result.volumes[178].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[178].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[178].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[178].volume_pairs[0].cluster_pair_id"
    assert result.volumes[178].volume_pairs[0].remote_volume_id == 1179, "Died on +.volumes[178].volume_pairs[0].remote_volume_id"
    assert result.volumes[178].volume_pairs[0].remote_volume_name == """snap-target-179""", "Died on +.volumes[178].volume_pairs[0].remote_volume_name"
    assert result.volumes[178].volume_pairs[0].remote_slice_id == 1179, "Died on +.volumes[178].volume_pairs[0].remote_slice_id"
    assert result.volumes[178].account_id == 4, "Died on +.volumes[178].account_id"
    assert result.volumes[178].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[178].create_time"
    assert result.volumes[178].virtual_volume_id is None, "Died on .volumes[178].virtual_volume_id"
    assert result.volumes[177].status == """active""", "Died on +.volumes[177].status"
    assert result.volumes[177].enable512e == False, "Died on +.volumes[177].enable512e"
    assert result.volumes[177].qos.burst_iops == 15000, "Died on +.volumes[177].qos.burst_iops"
    assert result.volumes[177].qos.burst_time == 60, "Died on +.volumes[177].qos.burst_time"
    assert result.volumes[177].qos.min_iops == 100, "Died on +.volumes[177].qos.min_iops"
    assert result.volumes[177].qos.max_iops == 15000, "Died on +.volumes[177].qos.max_iops"
    assert result.volumes[177].name == """snapshots-source-178""", "Died on +.volumes[177].name"
    assert result.volumes[177].volume_access_groups[0] == 4, "Died on +.volumes[177].volume_access_groups[0]"
    assert result.volumes[177].scsi_naadevice_id == """6f47acc1000000006d696434000002a6""", "Died on +.volumes[177].scsi_naadevice_id"
    assert result.volumes[177].total_size == 5000658944, "Died on +.volumes[177].total_size"
    assert result.volumes[177].block_size == 4096, "Died on +.volumes[177].block_size"
    assert result.volumes[177].scsi_euidevice_id == """6d696434000002a6f47acc0100000000""", "Died on +.volumes[177].scsi_euidevice_id"
    assert result.volumes[177].volume_id == 678, "Died on +.volumes[177].volume_id"
    assert result.volumes[177].access == """readWrite""", "Died on +.volumes[177].access"
    assert result.volumes[177].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-178.678""", "Died on +.volumes[177].iqn"
    assert result.volumes[177].slice_count == 1, "Died on +.volumes[177].slice_count"
    assert type(result.volumes[177].attributes) is dict, "Died on .volumes[177].attributes"
    assert result.volumes[177].volume_pairs[0].volume_pair_uuid == UUID("e3ecd55e-64df-421f-950a-db8505333ead"), "Died on .volumes[177].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[177].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[177].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[177].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[177].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[177].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[177].volume_pairs[0].remote_replication.state"
    assert result.volumes[177].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[177].volume_pairs[0].remote_replication.mode"
    assert result.volumes[177].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[177].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[177].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[177].volume_pairs[0].cluster_pair_id"
    assert result.volumes[177].volume_pairs[0].remote_volume_id == 1178, "Died on +.volumes[177].volume_pairs[0].remote_volume_id"
    assert result.volumes[177].volume_pairs[0].remote_volume_name == """snap-target-178""", "Died on +.volumes[177].volume_pairs[0].remote_volume_name"
    assert result.volumes[177].volume_pairs[0].remote_slice_id == 1178, "Died on +.volumes[177].volume_pairs[0].remote_slice_id"
    assert result.volumes[177].account_id == 4, "Died on +.volumes[177].account_id"
    assert result.volumes[177].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[177].create_time"
    assert result.volumes[177].virtual_volume_id is None, "Died on .volumes[177].virtual_volume_id"
    assert result.volumes[176].status == """active""", "Died on +.volumes[176].status"
    assert result.volumes[176].enable512e == False, "Died on +.volumes[176].enable512e"
    assert result.volumes[176].qos.burst_iops == 15000, "Died on +.volumes[176].qos.burst_iops"
    assert result.volumes[176].qos.burst_time == 60, "Died on +.volumes[176].qos.burst_time"
    assert result.volumes[176].qos.min_iops == 100, "Died on +.volumes[176].qos.min_iops"
    assert result.volumes[176].qos.max_iops == 15000, "Died on +.volumes[176].qos.max_iops"
    assert result.volumes[176].name == """snapshots-source-177""", "Died on +.volumes[176].name"
    assert result.volumes[176].volume_access_groups[0] == 4, "Died on +.volumes[176].volume_access_groups[0]"
    assert result.volumes[176].scsi_naadevice_id == """6f47acc1000000006d696434000002a5""", "Died on +.volumes[176].scsi_naadevice_id"
    assert result.volumes[176].total_size == 5000658944, "Died on +.volumes[176].total_size"
    assert result.volumes[176].block_size == 4096, "Died on +.volumes[176].block_size"
    assert result.volumes[176].scsi_euidevice_id == """6d696434000002a5f47acc0100000000""", "Died on +.volumes[176].scsi_euidevice_id"
    assert result.volumes[176].volume_id == 677, "Died on +.volumes[176].volume_id"
    assert result.volumes[176].access == """readWrite""", "Died on +.volumes[176].access"
    assert result.volumes[176].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-177.677""", "Died on +.volumes[176].iqn"
    assert result.volumes[176].slice_count == 1, "Died on +.volumes[176].slice_count"
    assert type(result.volumes[176].attributes) is dict, "Died on .volumes[176].attributes"
    assert result.volumes[176].volume_pairs[0].volume_pair_uuid == UUID("78123fd5-4673-4ef3-a511-417f7a822fe1"), "Died on .volumes[176].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[176].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[176].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[176].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[176].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[176].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[176].volume_pairs[0].remote_replication.state"
    assert result.volumes[176].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[176].volume_pairs[0].remote_replication.mode"
    assert result.volumes[176].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[176].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[176].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[176].volume_pairs[0].cluster_pair_id"
    assert result.volumes[176].volume_pairs[0].remote_volume_id == 1177, "Died on +.volumes[176].volume_pairs[0].remote_volume_id"
    assert result.volumes[176].volume_pairs[0].remote_volume_name == """snap-target-177""", "Died on +.volumes[176].volume_pairs[0].remote_volume_name"
    assert result.volumes[176].volume_pairs[0].remote_slice_id == 1177, "Died on +.volumes[176].volume_pairs[0].remote_slice_id"
    assert result.volumes[176].account_id == 4, "Died on +.volumes[176].account_id"
    assert result.volumes[176].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[176].create_time"
    assert result.volumes[176].virtual_volume_id is None, "Died on .volumes[176].virtual_volume_id"
    assert result.volumes[175].status == """active""", "Died on +.volumes[175].status"
    assert result.volumes[175].enable512e == False, "Died on +.volumes[175].enable512e"
    assert result.volumes[175].qos.burst_iops == 15000, "Died on +.volumes[175].qos.burst_iops"
    assert result.volumes[175].qos.burst_time == 60, "Died on +.volumes[175].qos.burst_time"
    assert result.volumes[175].qos.min_iops == 100, "Died on +.volumes[175].qos.min_iops"
    assert result.volumes[175].qos.max_iops == 15000, "Died on +.volumes[175].qos.max_iops"
    assert result.volumes[175].name == """snapshots-source-176""", "Died on +.volumes[175].name"
    assert result.volumes[175].volume_access_groups[0] == 4, "Died on +.volumes[175].volume_access_groups[0]"
    assert result.volumes[175].scsi_naadevice_id == """6f47acc1000000006d696434000002a4""", "Died on +.volumes[175].scsi_naadevice_id"
    assert result.volumes[175].total_size == 5000658944, "Died on +.volumes[175].total_size"
    assert result.volumes[175].block_size == 4096, "Died on +.volumes[175].block_size"
    assert result.volumes[175].scsi_euidevice_id == """6d696434000002a4f47acc0100000000""", "Died on +.volumes[175].scsi_euidevice_id"
    assert result.volumes[175].volume_id == 676, "Died on +.volumes[175].volume_id"
    assert result.volumes[175].access == """readWrite""", "Died on +.volumes[175].access"
    assert result.volumes[175].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-176.676""", "Died on +.volumes[175].iqn"
    assert result.volumes[175].slice_count == 1, "Died on +.volumes[175].slice_count"
    assert type(result.volumes[175].attributes) is dict, "Died on .volumes[175].attributes"
    assert result.volumes[175].volume_pairs[0].volume_pair_uuid == UUID("ac0215ba-278f-44b7-a640-756107e35d6a"), "Died on .volumes[175].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[175].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[175].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[175].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[175].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[175].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[175].volume_pairs[0].remote_replication.state"
    assert result.volumes[175].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[175].volume_pairs[0].remote_replication.mode"
    assert result.volumes[175].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[175].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[175].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[175].volume_pairs[0].cluster_pair_id"
    assert result.volumes[175].volume_pairs[0].remote_volume_id == 1176, "Died on +.volumes[175].volume_pairs[0].remote_volume_id"
    assert result.volumes[175].volume_pairs[0].remote_volume_name == """snap-target-176""", "Died on +.volumes[175].volume_pairs[0].remote_volume_name"
    assert result.volumes[175].volume_pairs[0].remote_slice_id == 1176, "Died on +.volumes[175].volume_pairs[0].remote_slice_id"
    assert result.volumes[175].account_id == 4, "Died on +.volumes[175].account_id"
    assert result.volumes[175].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[175].create_time"
    assert result.volumes[175].virtual_volume_id is None, "Died on .volumes[175].virtual_volume_id"
    assert result.volumes[174].status == """active""", "Died on +.volumes[174].status"
    assert result.volumes[174].enable512e == False, "Died on +.volumes[174].enable512e"
    assert result.volumes[174].qos.burst_iops == 15000, "Died on +.volumes[174].qos.burst_iops"
    assert result.volumes[174].qos.burst_time == 60, "Died on +.volumes[174].qos.burst_time"
    assert result.volumes[174].qos.min_iops == 100, "Died on +.volumes[174].qos.min_iops"
    assert result.volumes[174].qos.max_iops == 15000, "Died on +.volumes[174].qos.max_iops"
    assert result.volumes[174].name == """snapshots-source-175""", "Died on +.volumes[174].name"
    assert result.volumes[174].volume_access_groups[0] == 4, "Died on +.volumes[174].volume_access_groups[0]"
    assert result.volumes[174].scsi_naadevice_id == """6f47acc1000000006d696434000002a3""", "Died on +.volumes[174].scsi_naadevice_id"
    assert result.volumes[174].total_size == 5000658944, "Died on +.volumes[174].total_size"
    assert result.volumes[174].block_size == 4096, "Died on +.volumes[174].block_size"
    assert result.volumes[174].scsi_euidevice_id == """6d696434000002a3f47acc0100000000""", "Died on +.volumes[174].scsi_euidevice_id"
    assert result.volumes[174].volume_id == 675, "Died on +.volumes[174].volume_id"
    assert result.volumes[174].access == """readWrite""", "Died on +.volumes[174].access"
    assert result.volumes[174].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-175.675""", "Died on +.volumes[174].iqn"
    assert result.volumes[174].slice_count == 1, "Died on +.volumes[174].slice_count"
    assert type(result.volumes[174].attributes) is dict, "Died on .volumes[174].attributes"
    assert result.volumes[174].volume_pairs[0].volume_pair_uuid == UUID("7f127db5-77ca-4f31-9930-f1e0fbd4298b"), "Died on .volumes[174].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[174].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[174].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[174].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[174].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[174].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[174].volume_pairs[0].remote_replication.state"
    assert result.volumes[174].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[174].volume_pairs[0].remote_replication.mode"
    assert result.volumes[174].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[174].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[174].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[174].volume_pairs[0].cluster_pair_id"
    assert result.volumes[174].volume_pairs[0].remote_volume_id == 1175, "Died on +.volumes[174].volume_pairs[0].remote_volume_id"
    assert result.volumes[174].volume_pairs[0].remote_volume_name == """snap-target-175""", "Died on +.volumes[174].volume_pairs[0].remote_volume_name"
    assert result.volumes[174].volume_pairs[0].remote_slice_id == 1175, "Died on +.volumes[174].volume_pairs[0].remote_slice_id"
    assert result.volumes[174].account_id == 4, "Died on +.volumes[174].account_id"
    assert result.volumes[174].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[174].create_time"
    assert result.volumes[174].virtual_volume_id is None, "Died on .volumes[174].virtual_volume_id"
    assert result.volumes[173].status == """active""", "Died on +.volumes[173].status"
    assert result.volumes[173].enable512e == False, "Died on +.volumes[173].enable512e"
    assert result.volumes[173].qos.burst_iops == 15000, "Died on +.volumes[173].qos.burst_iops"
    assert result.volumes[173].qos.burst_time == 60, "Died on +.volumes[173].qos.burst_time"
    assert result.volumes[173].qos.min_iops == 100, "Died on +.volumes[173].qos.min_iops"
    assert result.volumes[173].qos.max_iops == 15000, "Died on +.volumes[173].qos.max_iops"
    assert result.volumes[173].name == """snapshots-source-174""", "Died on +.volumes[173].name"
    assert result.volumes[173].volume_access_groups[0] == 4, "Died on +.volumes[173].volume_access_groups[0]"
    assert result.volumes[173].scsi_naadevice_id == """6f47acc1000000006d696434000002a2""", "Died on +.volumes[173].scsi_naadevice_id"
    assert result.volumes[173].total_size == 5000658944, "Died on +.volumes[173].total_size"
    assert result.volumes[173].block_size == 4096, "Died on +.volumes[173].block_size"
    assert result.volumes[173].scsi_euidevice_id == """6d696434000002a2f47acc0100000000""", "Died on +.volumes[173].scsi_euidevice_id"
    assert result.volumes[173].volume_id == 674, "Died on +.volumes[173].volume_id"
    assert result.volumes[173].access == """readWrite""", "Died on +.volumes[173].access"
    assert result.volumes[173].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-174.674""", "Died on +.volumes[173].iqn"
    assert result.volumes[173].slice_count == 1, "Died on +.volumes[173].slice_count"
    assert type(result.volumes[173].attributes) is dict, "Died on .volumes[173].attributes"
    assert result.volumes[173].volume_pairs[0].volume_pair_uuid == UUID("4bc5c519-b27c-4bf1-8356-06460076ce0d"), "Died on .volumes[173].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[173].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[173].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[173].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[173].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[173].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[173].volume_pairs[0].remote_replication.state"
    assert result.volumes[173].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[173].volume_pairs[0].remote_replication.mode"
    assert result.volumes[173].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[173].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[173].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[173].volume_pairs[0].cluster_pair_id"
    assert result.volumes[173].volume_pairs[0].remote_volume_id == 1174, "Died on +.volumes[173].volume_pairs[0].remote_volume_id"
    assert result.volumes[173].volume_pairs[0].remote_volume_name == """snap-target-174""", "Died on +.volumes[173].volume_pairs[0].remote_volume_name"
    assert result.volumes[173].volume_pairs[0].remote_slice_id == 1174, "Died on +.volumes[173].volume_pairs[0].remote_slice_id"
    assert result.volumes[173].account_id == 4, "Died on +.volumes[173].account_id"
    assert result.volumes[173].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[173].create_time"
    assert result.volumes[173].virtual_volume_id is None, "Died on .volumes[173].virtual_volume_id"
    assert result.volumes[172].status == """active""", "Died on +.volumes[172].status"
    assert result.volumes[172].enable512e == False, "Died on +.volumes[172].enable512e"
    assert result.volumes[172].qos.burst_iops == 15000, "Died on +.volumes[172].qos.burst_iops"
    assert result.volumes[172].qos.burst_time == 60, "Died on +.volumes[172].qos.burst_time"
    assert result.volumes[172].qos.min_iops == 100, "Died on +.volumes[172].qos.min_iops"
    assert result.volumes[172].qos.max_iops == 15000, "Died on +.volumes[172].qos.max_iops"
    assert result.volumes[172].name == """snapshots-source-173""", "Died on +.volumes[172].name"
    assert result.volumes[172].volume_access_groups[0] == 4, "Died on +.volumes[172].volume_access_groups[0]"
    assert result.volumes[172].scsi_naadevice_id == """6f47acc1000000006d696434000002a1""", "Died on +.volumes[172].scsi_naadevice_id"
    assert result.volumes[172].total_size == 5000658944, "Died on +.volumes[172].total_size"
    assert result.volumes[172].block_size == 4096, "Died on +.volumes[172].block_size"
    assert result.volumes[172].scsi_euidevice_id == """6d696434000002a1f47acc0100000000""", "Died on +.volumes[172].scsi_euidevice_id"
    assert result.volumes[172].volume_id == 673, "Died on +.volumes[172].volume_id"
    assert result.volumes[172].access == """readWrite""", "Died on +.volumes[172].access"
    assert result.volumes[172].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-173.673""", "Died on +.volumes[172].iqn"
    assert result.volumes[172].slice_count == 1, "Died on +.volumes[172].slice_count"
    assert type(result.volumes[172].attributes) is dict, "Died on .volumes[172].attributes"
    assert result.volumes[172].volume_pairs[0].volume_pair_uuid == UUID("df5597c8-0c75-4d97-b478-bb657d17d59b"), "Died on .volumes[172].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[172].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[172].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[172].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[172].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[172].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[172].volume_pairs[0].remote_replication.state"
    assert result.volumes[172].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[172].volume_pairs[0].remote_replication.mode"
    assert result.volumes[172].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[172].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[172].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[172].volume_pairs[0].cluster_pair_id"
    assert result.volumes[172].volume_pairs[0].remote_volume_id == 1173, "Died on +.volumes[172].volume_pairs[0].remote_volume_id"
    assert result.volumes[172].volume_pairs[0].remote_volume_name == """snap-target-173""", "Died on +.volumes[172].volume_pairs[0].remote_volume_name"
    assert result.volumes[172].volume_pairs[0].remote_slice_id == 1173, "Died on +.volumes[172].volume_pairs[0].remote_slice_id"
    assert result.volumes[172].account_id == 4, "Died on +.volumes[172].account_id"
    assert result.volumes[172].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[172].create_time"
    assert result.volumes[172].virtual_volume_id is None, "Died on .volumes[172].virtual_volume_id"
    assert result.volumes[171].status == """active""", "Died on +.volumes[171].status"
    assert result.volumes[171].enable512e == False, "Died on +.volumes[171].enable512e"
    assert result.volumes[171].qos.burst_iops == 15000, "Died on +.volumes[171].qos.burst_iops"
    assert result.volumes[171].qos.burst_time == 60, "Died on +.volumes[171].qos.burst_time"
    assert result.volumes[171].qos.min_iops == 100, "Died on +.volumes[171].qos.min_iops"
    assert result.volumes[171].qos.max_iops == 15000, "Died on +.volumes[171].qos.max_iops"
    assert result.volumes[171].name == """snapshots-source-172""", "Died on +.volumes[171].name"
    assert result.volumes[171].volume_access_groups[0] == 4, "Died on +.volumes[171].volume_access_groups[0]"
    assert result.volumes[171].scsi_naadevice_id == """6f47acc1000000006d696434000002a0""", "Died on +.volumes[171].scsi_naadevice_id"
    assert result.volumes[171].total_size == 5000658944, "Died on +.volumes[171].total_size"
    assert result.volumes[171].block_size == 4096, "Died on +.volumes[171].block_size"
    assert result.volumes[171].scsi_euidevice_id == """6d696434000002a0f47acc0100000000""", "Died on +.volumes[171].scsi_euidevice_id"
    assert result.volumes[171].volume_id == 672, "Died on +.volumes[171].volume_id"
    assert result.volumes[171].access == """readWrite""", "Died on +.volumes[171].access"
    assert result.volumes[171].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-172.672""", "Died on +.volumes[171].iqn"
    assert result.volumes[171].slice_count == 1, "Died on +.volumes[171].slice_count"
    assert type(result.volumes[171].attributes) is dict, "Died on .volumes[171].attributes"
    assert result.volumes[171].volume_pairs[0].volume_pair_uuid == UUID("648bbbcc-a28d-4490-befb-53aac4b3002a"), "Died on .volumes[171].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[171].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[171].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[171].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[171].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[171].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[171].volume_pairs[0].remote_replication.state"
    assert result.volumes[171].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[171].volume_pairs[0].remote_replication.mode"
    assert result.volumes[171].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[171].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[171].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[171].volume_pairs[0].cluster_pair_id"
    assert result.volumes[171].volume_pairs[0].remote_volume_id == 1172, "Died on +.volumes[171].volume_pairs[0].remote_volume_id"
    assert result.volumes[171].volume_pairs[0].remote_volume_name == """snap-target-172""", "Died on +.volumes[171].volume_pairs[0].remote_volume_name"
    assert result.volumes[171].volume_pairs[0].remote_slice_id == 1172, "Died on +.volumes[171].volume_pairs[0].remote_slice_id"
    assert result.volumes[171].account_id == 4, "Died on +.volumes[171].account_id"
    assert result.volumes[171].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[171].create_time"
    assert result.volumes[171].virtual_volume_id is None, "Died on .volumes[171].virtual_volume_id"
    assert result.volumes[170].status == """active""", "Died on +.volumes[170].status"
    assert result.volumes[170].enable512e == False, "Died on +.volumes[170].enable512e"
    assert result.volumes[170].qos.burst_iops == 15000, "Died on +.volumes[170].qos.burst_iops"
    assert result.volumes[170].qos.burst_time == 60, "Died on +.volumes[170].qos.burst_time"
    assert result.volumes[170].qos.min_iops == 100, "Died on +.volumes[170].qos.min_iops"
    assert result.volumes[170].qos.max_iops == 15000, "Died on +.volumes[170].qos.max_iops"
    assert result.volumes[170].name == """snapshots-source-171""", "Died on +.volumes[170].name"
    assert result.volumes[170].volume_access_groups[0] == 4, "Died on +.volumes[170].volume_access_groups[0]"
    assert result.volumes[170].scsi_naadevice_id == """6f47acc1000000006d6964340000029f""", "Died on +.volumes[170].scsi_naadevice_id"
    assert result.volumes[170].total_size == 5000658944, "Died on +.volumes[170].total_size"
    assert result.volumes[170].block_size == 4096, "Died on +.volumes[170].block_size"
    assert result.volumes[170].scsi_euidevice_id == """6d6964340000029ff47acc0100000000""", "Died on +.volumes[170].scsi_euidevice_id"
    assert result.volumes[170].volume_id == 671, "Died on +.volumes[170].volume_id"
    assert result.volumes[170].access == """readWrite""", "Died on +.volumes[170].access"
    assert result.volumes[170].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-171.671""", "Died on +.volumes[170].iqn"
    assert result.volumes[170].slice_count == 1, "Died on +.volumes[170].slice_count"
    assert type(result.volumes[170].attributes) is dict, "Died on .volumes[170].attributes"
    assert result.volumes[170].volume_pairs[0].volume_pair_uuid == UUID("d78d9f84-143c-49a4-bb22-2539c239f74e"), "Died on .volumes[170].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[170].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[170].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[170].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[170].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[170].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[170].volume_pairs[0].remote_replication.state"
    assert result.volumes[170].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[170].volume_pairs[0].remote_replication.mode"
    assert result.volumes[170].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[170].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[170].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[170].volume_pairs[0].cluster_pair_id"
    assert result.volumes[170].volume_pairs[0].remote_volume_id == 1171, "Died on +.volumes[170].volume_pairs[0].remote_volume_id"
    assert result.volumes[170].volume_pairs[0].remote_volume_name == """snap-target-171""", "Died on +.volumes[170].volume_pairs[0].remote_volume_name"
    assert result.volumes[170].volume_pairs[0].remote_slice_id == 1171, "Died on +.volumes[170].volume_pairs[0].remote_slice_id"
    assert result.volumes[170].account_id == 4, "Died on +.volumes[170].account_id"
    assert result.volumes[170].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[170].create_time"
    assert result.volumes[170].virtual_volume_id is None, "Died on .volumes[170].virtual_volume_id"
    assert result.volumes[169].status == """active""", "Died on +.volumes[169].status"
    assert result.volumes[169].enable512e == False, "Died on +.volumes[169].enable512e"
    assert result.volumes[169].qos.burst_iops == 15000, "Died on +.volumes[169].qos.burst_iops"
    assert result.volumes[169].qos.burst_time == 60, "Died on +.volumes[169].qos.burst_time"
    assert result.volumes[169].qos.min_iops == 100, "Died on +.volumes[169].qos.min_iops"
    assert result.volumes[169].qos.max_iops == 15000, "Died on +.volumes[169].qos.max_iops"
    assert result.volumes[169].name == """snapshots-source-170""", "Died on +.volumes[169].name"
    assert result.volumes[169].volume_access_groups[0] == 4, "Died on +.volumes[169].volume_access_groups[0]"
    assert result.volumes[169].scsi_naadevice_id == """6f47acc1000000006d6964340000029e""", "Died on +.volumes[169].scsi_naadevice_id"
    assert result.volumes[169].total_size == 5000658944, "Died on +.volumes[169].total_size"
    assert result.volumes[169].block_size == 4096, "Died on +.volumes[169].block_size"
    assert result.volumes[169].scsi_euidevice_id == """6d6964340000029ef47acc0100000000""", "Died on +.volumes[169].scsi_euidevice_id"
    assert result.volumes[169].volume_id == 670, "Died on +.volumes[169].volume_id"
    assert result.volumes[169].access == """readWrite""", "Died on +.volumes[169].access"
    assert result.volumes[169].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-170.670""", "Died on +.volumes[169].iqn"
    assert result.volumes[169].slice_count == 1, "Died on +.volumes[169].slice_count"
    assert type(result.volumes[169].attributes) is dict, "Died on .volumes[169].attributes"
    assert result.volumes[169].volume_pairs[0].volume_pair_uuid == UUID("d8f04462-6b68-47ff-b2d4-a6e3e3f80ba8"), "Died on .volumes[169].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[169].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[169].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[169].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[169].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[169].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[169].volume_pairs[0].remote_replication.state"
    assert result.volumes[169].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[169].volume_pairs[0].remote_replication.mode"
    assert result.volumes[169].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[169].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[169].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[169].volume_pairs[0].cluster_pair_id"
    assert result.volumes[169].volume_pairs[0].remote_volume_id == 1170, "Died on +.volumes[169].volume_pairs[0].remote_volume_id"
    assert result.volumes[169].volume_pairs[0].remote_volume_name == """snap-target-170""", "Died on +.volumes[169].volume_pairs[0].remote_volume_name"
    assert result.volumes[169].volume_pairs[0].remote_slice_id == 1170, "Died on +.volumes[169].volume_pairs[0].remote_slice_id"
    assert result.volumes[169].account_id == 4, "Died on +.volumes[169].account_id"
    assert result.volumes[169].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[169].create_time"
    assert result.volumes[169].virtual_volume_id is None, "Died on .volumes[169].virtual_volume_id"
    assert result.volumes[168].status == """active""", "Died on +.volumes[168].status"
    assert result.volumes[168].enable512e == False, "Died on +.volumes[168].enable512e"
    assert result.volumes[168].qos.burst_iops == 15000, "Died on +.volumes[168].qos.burst_iops"
    assert result.volumes[168].qos.burst_time == 60, "Died on +.volumes[168].qos.burst_time"
    assert result.volumes[168].qos.min_iops == 100, "Died on +.volumes[168].qos.min_iops"
    assert result.volumes[168].qos.max_iops == 15000, "Died on +.volumes[168].qos.max_iops"
    assert result.volumes[168].name == """snapshots-source-169""", "Died on +.volumes[168].name"
    assert result.volumes[168].volume_access_groups[0] == 4, "Died on +.volumes[168].volume_access_groups[0]"
    assert result.volumes[168].scsi_naadevice_id == """6f47acc1000000006d6964340000029d""", "Died on +.volumes[168].scsi_naadevice_id"
    assert result.volumes[168].total_size == 5000658944, "Died on +.volumes[168].total_size"
    assert result.volumes[168].block_size == 4096, "Died on +.volumes[168].block_size"
    assert result.volumes[168].scsi_euidevice_id == """6d6964340000029df47acc0100000000""", "Died on +.volumes[168].scsi_euidevice_id"
    assert result.volumes[168].volume_id == 669, "Died on +.volumes[168].volume_id"
    assert result.volumes[168].access == """readWrite""", "Died on +.volumes[168].access"
    assert result.volumes[168].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-169.669""", "Died on +.volumes[168].iqn"
    assert result.volumes[168].slice_count == 1, "Died on +.volumes[168].slice_count"
    assert type(result.volumes[168].attributes) is dict, "Died on .volumes[168].attributes"
    assert result.volumes[168].volume_pairs[0].volume_pair_uuid == UUID("fe57dbca-984e-4947-9567-82a43412c939"), "Died on .volumes[168].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[168].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[168].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[168].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[168].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[168].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[168].volume_pairs[0].remote_replication.state"
    assert result.volumes[168].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[168].volume_pairs[0].remote_replication.mode"
    assert result.volumes[168].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[168].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[168].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[168].volume_pairs[0].cluster_pair_id"
    assert result.volumes[168].volume_pairs[0].remote_volume_id == 1169, "Died on +.volumes[168].volume_pairs[0].remote_volume_id"
    assert result.volumes[168].volume_pairs[0].remote_volume_name == """snap-target-169""", "Died on +.volumes[168].volume_pairs[0].remote_volume_name"
    assert result.volumes[168].volume_pairs[0].remote_slice_id == 1169, "Died on +.volumes[168].volume_pairs[0].remote_slice_id"
    assert result.volumes[168].account_id == 4, "Died on +.volumes[168].account_id"
    assert result.volumes[168].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[168].create_time"
    assert result.volumes[168].virtual_volume_id is None, "Died on .volumes[168].virtual_volume_id"
    assert result.volumes[167].status == """active""", "Died on +.volumes[167].status"
    assert result.volumes[167].enable512e == False, "Died on +.volumes[167].enable512e"
    assert result.volumes[167].qos.burst_iops == 15000, "Died on +.volumes[167].qos.burst_iops"
    assert result.volumes[167].qos.burst_time == 60, "Died on +.volumes[167].qos.burst_time"
    assert result.volumes[167].qos.min_iops == 100, "Died on +.volumes[167].qos.min_iops"
    assert result.volumes[167].qos.max_iops == 15000, "Died on +.volumes[167].qos.max_iops"
    assert result.volumes[167].name == """snapshots-source-168""", "Died on +.volumes[167].name"
    assert result.volumes[167].volume_access_groups[0] == 4, "Died on +.volumes[167].volume_access_groups[0]"
    assert result.volumes[167].scsi_naadevice_id == """6f47acc1000000006d6964340000029c""", "Died on +.volumes[167].scsi_naadevice_id"
    assert result.volumes[167].total_size == 5000658944, "Died on +.volumes[167].total_size"
    assert result.volumes[167].block_size == 4096, "Died on +.volumes[167].block_size"
    assert result.volumes[167].scsi_euidevice_id == """6d6964340000029cf47acc0100000000""", "Died on +.volumes[167].scsi_euidevice_id"
    assert result.volumes[167].volume_id == 668, "Died on +.volumes[167].volume_id"
    assert result.volumes[167].access == """readWrite""", "Died on +.volumes[167].access"
    assert result.volumes[167].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-168.668""", "Died on +.volumes[167].iqn"
    assert result.volumes[167].slice_count == 1, "Died on +.volumes[167].slice_count"
    assert type(result.volumes[167].attributes) is dict, "Died on .volumes[167].attributes"
    assert result.volumes[167].volume_pairs[0].volume_pair_uuid == UUID("0943acef-1c9c-429a-a25e-3f2be8f8ec4d"), "Died on .volumes[167].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[167].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[167].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[167].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[167].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[167].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[167].volume_pairs[0].remote_replication.state"
    assert result.volumes[167].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[167].volume_pairs[0].remote_replication.mode"
    assert result.volumes[167].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[167].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[167].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[167].volume_pairs[0].cluster_pair_id"
    assert result.volumes[167].volume_pairs[0].remote_volume_id == 1168, "Died on +.volumes[167].volume_pairs[0].remote_volume_id"
    assert result.volumes[167].volume_pairs[0].remote_volume_name == """snap-target-168""", "Died on +.volumes[167].volume_pairs[0].remote_volume_name"
    assert result.volumes[167].volume_pairs[0].remote_slice_id == 1168, "Died on +.volumes[167].volume_pairs[0].remote_slice_id"
    assert result.volumes[167].account_id == 4, "Died on +.volumes[167].account_id"
    assert result.volumes[167].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[167].create_time"
    assert result.volumes[167].virtual_volume_id is None, "Died on .volumes[167].virtual_volume_id"
    assert result.volumes[166].status == """active""", "Died on +.volumes[166].status"
    assert result.volumes[166].enable512e == False, "Died on +.volumes[166].enable512e"
    assert result.volumes[166].qos.burst_iops == 15000, "Died on +.volumes[166].qos.burst_iops"
    assert result.volumes[166].qos.burst_time == 60, "Died on +.volumes[166].qos.burst_time"
    assert result.volumes[166].qos.min_iops == 100, "Died on +.volumes[166].qos.min_iops"
    assert result.volumes[166].qos.max_iops == 15000, "Died on +.volumes[166].qos.max_iops"
    assert result.volumes[166].name == """snapshots-source-167""", "Died on +.volumes[166].name"
    assert result.volumes[166].volume_access_groups[0] == 4, "Died on +.volumes[166].volume_access_groups[0]"
    assert result.volumes[166].scsi_naadevice_id == """6f47acc1000000006d6964340000029b""", "Died on +.volumes[166].scsi_naadevice_id"
    assert result.volumes[166].total_size == 5000658944, "Died on +.volumes[166].total_size"
    assert result.volumes[166].block_size == 4096, "Died on +.volumes[166].block_size"
    assert result.volumes[166].scsi_euidevice_id == """6d6964340000029bf47acc0100000000""", "Died on +.volumes[166].scsi_euidevice_id"
    assert result.volumes[166].volume_id == 667, "Died on +.volumes[166].volume_id"
    assert result.volumes[166].access == """readWrite""", "Died on +.volumes[166].access"
    assert result.volumes[166].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-167.667""", "Died on +.volumes[166].iqn"
    assert result.volumes[166].slice_count == 1, "Died on +.volumes[166].slice_count"
    assert type(result.volumes[166].attributes) is dict, "Died on .volumes[166].attributes"
    assert result.volumes[166].volume_pairs[0].volume_pair_uuid == UUID("7bfeb91b-4235-46b9-8b8a-b14cca710084"), "Died on .volumes[166].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[166].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[166].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[166].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[166].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[166].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[166].volume_pairs[0].remote_replication.state"
    assert result.volumes[166].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[166].volume_pairs[0].remote_replication.mode"
    assert result.volumes[166].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[166].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[166].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[166].volume_pairs[0].cluster_pair_id"
    assert result.volumes[166].volume_pairs[0].remote_volume_id == 1167, "Died on +.volumes[166].volume_pairs[0].remote_volume_id"
    assert result.volumes[166].volume_pairs[0].remote_volume_name == """snap-target-167""", "Died on +.volumes[166].volume_pairs[0].remote_volume_name"
    assert result.volumes[166].volume_pairs[0].remote_slice_id == 1167, "Died on +.volumes[166].volume_pairs[0].remote_slice_id"
    assert result.volumes[166].account_id == 4, "Died on +.volumes[166].account_id"
    assert result.volumes[166].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[166].create_time"
    assert result.volumes[166].virtual_volume_id is None, "Died on .volumes[166].virtual_volume_id"
    assert result.volumes[165].status == """active""", "Died on +.volumes[165].status"
    assert result.volumes[165].enable512e == False, "Died on +.volumes[165].enable512e"
    assert result.volumes[165].qos.burst_iops == 15000, "Died on +.volumes[165].qos.burst_iops"
    assert result.volumes[165].qos.burst_time == 60, "Died on +.volumes[165].qos.burst_time"
    assert result.volumes[165].qos.min_iops == 100, "Died on +.volumes[165].qos.min_iops"
    assert result.volumes[165].qos.max_iops == 15000, "Died on +.volumes[165].qos.max_iops"
    assert result.volumes[165].name == """snapshots-source-166""", "Died on +.volumes[165].name"
    assert result.volumes[165].volume_access_groups[0] == 4, "Died on +.volumes[165].volume_access_groups[0]"
    assert result.volumes[165].scsi_naadevice_id == """6f47acc1000000006d6964340000029a""", "Died on +.volumes[165].scsi_naadevice_id"
    assert result.volumes[165].total_size == 5000658944, "Died on +.volumes[165].total_size"
    assert result.volumes[165].block_size == 4096, "Died on +.volumes[165].block_size"
    assert result.volumes[165].scsi_euidevice_id == """6d6964340000029af47acc0100000000""", "Died on +.volumes[165].scsi_euidevice_id"
    assert result.volumes[165].volume_id == 666, "Died on +.volumes[165].volume_id"
    assert result.volumes[165].access == """readWrite""", "Died on +.volumes[165].access"
    assert result.volumes[165].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-166.666""", "Died on +.volumes[165].iqn"
    assert result.volumes[165].slice_count == 1, "Died on +.volumes[165].slice_count"
    assert type(result.volumes[165].attributes) is dict, "Died on .volumes[165].attributes"
    assert result.volumes[165].volume_pairs[0].volume_pair_uuid == UUID("07e37e8c-191b-4f16-9bb9-44f38da9bc96"), "Died on .volumes[165].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[165].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[165].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[165].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[165].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[165].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[165].volume_pairs[0].remote_replication.state"
    assert result.volumes[165].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[165].volume_pairs[0].remote_replication.mode"
    assert result.volumes[165].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[165].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[165].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[165].volume_pairs[0].cluster_pair_id"
    assert result.volumes[165].volume_pairs[0].remote_volume_id == 1166, "Died on +.volumes[165].volume_pairs[0].remote_volume_id"
    assert result.volumes[165].volume_pairs[0].remote_volume_name == """snap-target-166""", "Died on +.volumes[165].volume_pairs[0].remote_volume_name"
    assert result.volumes[165].volume_pairs[0].remote_slice_id == 1166, "Died on +.volumes[165].volume_pairs[0].remote_slice_id"
    assert result.volumes[165].account_id == 4, "Died on +.volumes[165].account_id"
    assert result.volumes[165].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[165].create_time"
    assert result.volumes[165].virtual_volume_id is None, "Died on .volumes[165].virtual_volume_id"
    assert result.volumes[164].status == """active""", "Died on +.volumes[164].status"
    assert result.volumes[164].enable512e == False, "Died on +.volumes[164].enable512e"
    assert result.volumes[164].qos.burst_iops == 15000, "Died on +.volumes[164].qos.burst_iops"
    assert result.volumes[164].qos.burst_time == 60, "Died on +.volumes[164].qos.burst_time"
    assert result.volumes[164].qos.min_iops == 100, "Died on +.volumes[164].qos.min_iops"
    assert result.volumes[164].qos.max_iops == 15000, "Died on +.volumes[164].qos.max_iops"
    assert result.volumes[164].name == """snapshots-source-165""", "Died on +.volumes[164].name"
    assert result.volumes[164].volume_access_groups[0] == 4, "Died on +.volumes[164].volume_access_groups[0]"
    assert result.volumes[164].scsi_naadevice_id == """6f47acc1000000006d69643400000299""", "Died on +.volumes[164].scsi_naadevice_id"
    assert result.volumes[164].total_size == 5000658944, "Died on +.volumes[164].total_size"
    assert result.volumes[164].block_size == 4096, "Died on +.volumes[164].block_size"
    assert result.volumes[164].scsi_euidevice_id == """6d69643400000299f47acc0100000000""", "Died on +.volumes[164].scsi_euidevice_id"
    assert result.volumes[164].volume_id == 665, "Died on +.volumes[164].volume_id"
    assert result.volumes[164].access == """readWrite""", "Died on +.volumes[164].access"
    assert result.volumes[164].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-165.665""", "Died on +.volumes[164].iqn"
    assert result.volumes[164].slice_count == 1, "Died on +.volumes[164].slice_count"
    assert type(result.volumes[164].attributes) is dict, "Died on .volumes[164].attributes"
    assert result.volumes[164].volume_pairs[0].volume_pair_uuid == UUID("ab22af96-dd06-4864-a777-19a87b6a8518"), "Died on .volumes[164].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[164].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[164].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[164].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[164].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[164].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[164].volume_pairs[0].remote_replication.state"
    assert result.volumes[164].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[164].volume_pairs[0].remote_replication.mode"
    assert result.volumes[164].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[164].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[164].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[164].volume_pairs[0].cluster_pair_id"
    assert result.volumes[164].volume_pairs[0].remote_volume_id == 1165, "Died on +.volumes[164].volume_pairs[0].remote_volume_id"
    assert result.volumes[164].volume_pairs[0].remote_volume_name == """snap-target-165""", "Died on +.volumes[164].volume_pairs[0].remote_volume_name"
    assert result.volumes[164].volume_pairs[0].remote_slice_id == 1165, "Died on +.volumes[164].volume_pairs[0].remote_slice_id"
    assert result.volumes[164].account_id == 4, "Died on +.volumes[164].account_id"
    assert result.volumes[164].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[164].create_time"
    assert result.volumes[164].virtual_volume_id is None, "Died on .volumes[164].virtual_volume_id"
    assert result.volumes[163].status == """active""", "Died on +.volumes[163].status"
    assert result.volumes[163].enable512e == False, "Died on +.volumes[163].enable512e"
    assert result.volumes[163].qos.burst_iops == 15000, "Died on +.volumes[163].qos.burst_iops"
    assert result.volumes[163].qos.burst_time == 60, "Died on +.volumes[163].qos.burst_time"
    assert result.volumes[163].qos.min_iops == 100, "Died on +.volumes[163].qos.min_iops"
    assert result.volumes[163].qos.max_iops == 15000, "Died on +.volumes[163].qos.max_iops"
    assert result.volumes[163].name == """snapshots-source-164""", "Died on +.volumes[163].name"
    assert result.volumes[163].volume_access_groups[0] == 4, "Died on +.volumes[163].volume_access_groups[0]"
    assert result.volumes[163].scsi_naadevice_id == """6f47acc1000000006d69643400000298""", "Died on +.volumes[163].scsi_naadevice_id"
    assert result.volumes[163].total_size == 5000658944, "Died on +.volumes[163].total_size"
    assert result.volumes[163].block_size == 4096, "Died on +.volumes[163].block_size"
    assert result.volumes[163].scsi_euidevice_id == """6d69643400000298f47acc0100000000""", "Died on +.volumes[163].scsi_euidevice_id"
    assert result.volumes[163].volume_id == 664, "Died on +.volumes[163].volume_id"
    assert result.volumes[163].access == """readWrite""", "Died on +.volumes[163].access"
    assert result.volumes[163].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-164.664""", "Died on +.volumes[163].iqn"
    assert result.volumes[163].slice_count == 1, "Died on +.volumes[163].slice_count"
    assert type(result.volumes[163].attributes) is dict, "Died on .volumes[163].attributes"
    assert result.volumes[163].volume_pairs[0].volume_pair_uuid == UUID("1d6285ed-cefd-4aae-9302-a38b05bb55cc"), "Died on .volumes[163].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[163].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[163].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[163].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[163].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[163].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[163].volume_pairs[0].remote_replication.state"
    assert result.volumes[163].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[163].volume_pairs[0].remote_replication.mode"
    assert result.volumes[163].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[163].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[163].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[163].volume_pairs[0].cluster_pair_id"
    assert result.volumes[163].volume_pairs[0].remote_volume_id == 1164, "Died on +.volumes[163].volume_pairs[0].remote_volume_id"
    assert result.volumes[163].volume_pairs[0].remote_volume_name == """snap-target-164""", "Died on +.volumes[163].volume_pairs[0].remote_volume_name"
    assert result.volumes[163].volume_pairs[0].remote_slice_id == 1164, "Died on +.volumes[163].volume_pairs[0].remote_slice_id"
    assert result.volumes[163].account_id == 4, "Died on +.volumes[163].account_id"
    assert result.volumes[163].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[163].create_time"
    assert result.volumes[163].virtual_volume_id is None, "Died on .volumes[163].virtual_volume_id"
    assert result.volumes[162].status == """active""", "Died on +.volumes[162].status"
    assert result.volumes[162].enable512e == False, "Died on +.volumes[162].enable512e"
    assert result.volumes[162].qos.burst_iops == 15000, "Died on +.volumes[162].qos.burst_iops"
    assert result.volumes[162].qos.burst_time == 60, "Died on +.volumes[162].qos.burst_time"
    assert result.volumes[162].qos.min_iops == 100, "Died on +.volumes[162].qos.min_iops"
    assert result.volumes[162].qos.max_iops == 15000, "Died on +.volumes[162].qos.max_iops"
    assert result.volumes[162].name == """snapshots-source-163""", "Died on +.volumes[162].name"
    assert result.volumes[162].volume_access_groups[0] == 4, "Died on +.volumes[162].volume_access_groups[0]"
    assert result.volumes[162].scsi_naadevice_id == """6f47acc1000000006d69643400000297""", "Died on +.volumes[162].scsi_naadevice_id"
    assert result.volumes[162].total_size == 5000658944, "Died on +.volumes[162].total_size"
    assert result.volumes[162].block_size == 4096, "Died on +.volumes[162].block_size"
    assert result.volumes[162].scsi_euidevice_id == """6d69643400000297f47acc0100000000""", "Died on +.volumes[162].scsi_euidevice_id"
    assert result.volumes[162].volume_id == 663, "Died on +.volumes[162].volume_id"
    assert result.volumes[162].access == """readWrite""", "Died on +.volumes[162].access"
    assert result.volumes[162].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-163.663""", "Died on +.volumes[162].iqn"
    assert result.volumes[162].slice_count == 1, "Died on +.volumes[162].slice_count"
    assert type(result.volumes[162].attributes) is dict, "Died on .volumes[162].attributes"
    assert result.volumes[162].volume_pairs[0].volume_pair_uuid == UUID("bc2aa8a0-4c38-45e4-8dc8-1d7bebc4b7e5"), "Died on .volumes[162].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[162].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[162].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[162].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[162].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[162].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[162].volume_pairs[0].remote_replication.state"
    assert result.volumes[162].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[162].volume_pairs[0].remote_replication.mode"
    assert result.volumes[162].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[162].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[162].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[162].volume_pairs[0].cluster_pair_id"
    assert result.volumes[162].volume_pairs[0].remote_volume_id == 1163, "Died on +.volumes[162].volume_pairs[0].remote_volume_id"
    assert result.volumes[162].volume_pairs[0].remote_volume_name == """snap-target-163""", "Died on +.volumes[162].volume_pairs[0].remote_volume_name"
    assert result.volumes[162].volume_pairs[0].remote_slice_id == 1163, "Died on +.volumes[162].volume_pairs[0].remote_slice_id"
    assert result.volumes[162].account_id == 4, "Died on +.volumes[162].account_id"
    assert result.volumes[162].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[162].create_time"
    assert result.volumes[162].virtual_volume_id is None, "Died on .volumes[162].virtual_volume_id"
    assert result.volumes[161].status == """active""", "Died on +.volumes[161].status"
    assert result.volumes[161].enable512e == False, "Died on +.volumes[161].enable512e"
    assert result.volumes[161].qos.burst_iops == 15000, "Died on +.volumes[161].qos.burst_iops"
    assert result.volumes[161].qos.burst_time == 60, "Died on +.volumes[161].qos.burst_time"
    assert result.volumes[161].qos.min_iops == 100, "Died on +.volumes[161].qos.min_iops"
    assert result.volumes[161].qos.max_iops == 15000, "Died on +.volumes[161].qos.max_iops"
    assert result.volumes[161].name == """snapshots-source-162""", "Died on +.volumes[161].name"
    assert result.volumes[161].volume_access_groups[0] == 4, "Died on +.volumes[161].volume_access_groups[0]"
    assert result.volumes[161].scsi_naadevice_id == """6f47acc1000000006d69643400000296""", "Died on +.volumes[161].scsi_naadevice_id"
    assert result.volumes[161].total_size == 5000658944, "Died on +.volumes[161].total_size"
    assert result.volumes[161].block_size == 4096, "Died on +.volumes[161].block_size"
    assert result.volumes[161].scsi_euidevice_id == """6d69643400000296f47acc0100000000""", "Died on +.volumes[161].scsi_euidevice_id"
    assert result.volumes[161].volume_id == 662, "Died on +.volumes[161].volume_id"
    assert result.volumes[161].access == """readWrite""", "Died on +.volumes[161].access"
    assert result.volumes[161].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-162.662""", "Died on +.volumes[161].iqn"
    assert result.volumes[161].slice_count == 1, "Died on +.volumes[161].slice_count"
    assert type(result.volumes[161].attributes) is dict, "Died on .volumes[161].attributes"
    assert result.volumes[161].volume_pairs[0].volume_pair_uuid == UUID("7cecd9b9-9a98-4fc6-919e-10a48c0de27b"), "Died on .volumes[161].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[161].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[161].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[161].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[161].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[161].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[161].volume_pairs[0].remote_replication.state"
    assert result.volumes[161].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[161].volume_pairs[0].remote_replication.mode"
    assert result.volumes[161].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[161].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[161].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[161].volume_pairs[0].cluster_pair_id"
    assert result.volumes[161].volume_pairs[0].remote_volume_id == 1162, "Died on +.volumes[161].volume_pairs[0].remote_volume_id"
    assert result.volumes[161].volume_pairs[0].remote_volume_name == """snap-target-162""", "Died on +.volumes[161].volume_pairs[0].remote_volume_name"
    assert result.volumes[161].volume_pairs[0].remote_slice_id == 1162, "Died on +.volumes[161].volume_pairs[0].remote_slice_id"
    assert result.volumes[161].account_id == 4, "Died on +.volumes[161].account_id"
    assert result.volumes[161].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[161].create_time"
    assert result.volumes[161].virtual_volume_id is None, "Died on .volumes[161].virtual_volume_id"
    assert result.volumes[160].status == """active""", "Died on +.volumes[160].status"
    assert result.volumes[160].enable512e == False, "Died on +.volumes[160].enable512e"
    assert result.volumes[160].qos.burst_iops == 15000, "Died on +.volumes[160].qos.burst_iops"
    assert result.volumes[160].qos.burst_time == 60, "Died on +.volumes[160].qos.burst_time"
    assert result.volumes[160].qos.min_iops == 100, "Died on +.volumes[160].qos.min_iops"
    assert result.volumes[160].qos.max_iops == 15000, "Died on +.volumes[160].qos.max_iops"
    assert result.volumes[160].name == """snapshots-source-161""", "Died on +.volumes[160].name"
    assert result.volumes[160].volume_access_groups[0] == 4, "Died on +.volumes[160].volume_access_groups[0]"
    assert result.volumes[160].scsi_naadevice_id == """6f47acc1000000006d69643400000295""", "Died on +.volumes[160].scsi_naadevice_id"
    assert result.volumes[160].total_size == 5000658944, "Died on +.volumes[160].total_size"
    assert result.volumes[160].block_size == 4096, "Died on +.volumes[160].block_size"
    assert result.volumes[160].scsi_euidevice_id == """6d69643400000295f47acc0100000000""", "Died on +.volumes[160].scsi_euidevice_id"
    assert result.volumes[160].volume_id == 661, "Died on +.volumes[160].volume_id"
    assert result.volumes[160].access == """readWrite""", "Died on +.volumes[160].access"
    assert result.volumes[160].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-161.661""", "Died on +.volumes[160].iqn"
    assert result.volumes[160].slice_count == 1, "Died on +.volumes[160].slice_count"
    assert type(result.volumes[160].attributes) is dict, "Died on .volumes[160].attributes"
    assert result.volumes[160].volume_pairs[0].volume_pair_uuid == UUID("3708275e-e262-4724-b573-bf14286324b5"), "Died on .volumes[160].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[160].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[160].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[160].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[160].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[160].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[160].volume_pairs[0].remote_replication.state"
    assert result.volumes[160].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[160].volume_pairs[0].remote_replication.mode"
    assert result.volumes[160].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[160].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[160].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[160].volume_pairs[0].cluster_pair_id"
    assert result.volumes[160].volume_pairs[0].remote_volume_id == 1161, "Died on +.volumes[160].volume_pairs[0].remote_volume_id"
    assert result.volumes[160].volume_pairs[0].remote_volume_name == """snap-target-161""", "Died on +.volumes[160].volume_pairs[0].remote_volume_name"
    assert result.volumes[160].volume_pairs[0].remote_slice_id == 1161, "Died on +.volumes[160].volume_pairs[0].remote_slice_id"
    assert result.volumes[160].account_id == 4, "Died on +.volumes[160].account_id"
    assert result.volumes[160].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[160].create_time"
    assert result.volumes[160].virtual_volume_id is None, "Died on .volumes[160].virtual_volume_id"
    assert result.volumes[159].status == """active""", "Died on +.volumes[159].status"
    assert result.volumes[159].enable512e == False, "Died on +.volumes[159].enable512e"
    assert result.volumes[159].qos.burst_iops == 15000, "Died on +.volumes[159].qos.burst_iops"
    assert result.volumes[159].qos.burst_time == 60, "Died on +.volumes[159].qos.burst_time"
    assert result.volumes[159].qos.min_iops == 100, "Died on +.volumes[159].qos.min_iops"
    assert result.volumes[159].qos.max_iops == 15000, "Died on +.volumes[159].qos.max_iops"
    assert result.volumes[159].name == """snapshots-source-160""", "Died on +.volumes[159].name"
    assert result.volumes[159].volume_access_groups[0] == 4, "Died on +.volumes[159].volume_access_groups[0]"
    assert result.volumes[159].scsi_naadevice_id == """6f47acc1000000006d69643400000294""", "Died on +.volumes[159].scsi_naadevice_id"
    assert result.volumes[159].total_size == 5000658944, "Died on +.volumes[159].total_size"
    assert result.volumes[159].block_size == 4096, "Died on +.volumes[159].block_size"
    assert result.volumes[159].scsi_euidevice_id == """6d69643400000294f47acc0100000000""", "Died on +.volumes[159].scsi_euidevice_id"
    assert result.volumes[159].volume_id == 660, "Died on +.volumes[159].volume_id"
    assert result.volumes[159].access == """readWrite""", "Died on +.volumes[159].access"
    assert result.volumes[159].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-160.660""", "Died on +.volumes[159].iqn"
    assert result.volumes[159].slice_count == 1, "Died on +.volumes[159].slice_count"
    assert type(result.volumes[159].attributes) is dict, "Died on .volumes[159].attributes"
    assert result.volumes[159].volume_pairs[0].volume_pair_uuid == UUID("e92544c1-cb3a-4dd6-a0fb-d4ffad9a6f19"), "Died on .volumes[159].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[159].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[159].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[159].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[159].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[159].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[159].volume_pairs[0].remote_replication.state"
    assert result.volumes[159].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[159].volume_pairs[0].remote_replication.mode"
    assert result.volumes[159].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[159].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[159].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[159].volume_pairs[0].cluster_pair_id"
    assert result.volumes[159].volume_pairs[0].remote_volume_id == 1160, "Died on +.volumes[159].volume_pairs[0].remote_volume_id"
    assert result.volumes[159].volume_pairs[0].remote_volume_name == """snap-target-160""", "Died on +.volumes[159].volume_pairs[0].remote_volume_name"
    assert result.volumes[159].volume_pairs[0].remote_slice_id == 1160, "Died on +.volumes[159].volume_pairs[0].remote_slice_id"
    assert result.volumes[159].account_id == 4, "Died on +.volumes[159].account_id"
    assert result.volumes[159].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[159].create_time"
    assert result.volumes[159].virtual_volume_id is None, "Died on .volumes[159].virtual_volume_id"
    assert result.volumes[158].status == """active""", "Died on +.volumes[158].status"
    assert result.volumes[158].enable512e == False, "Died on +.volumes[158].enable512e"
    assert result.volumes[158].qos.burst_iops == 15000, "Died on +.volumes[158].qos.burst_iops"
    assert result.volumes[158].qos.burst_time == 60, "Died on +.volumes[158].qos.burst_time"
    assert result.volumes[158].qos.min_iops == 100, "Died on +.volumes[158].qos.min_iops"
    assert result.volumes[158].qos.max_iops == 15000, "Died on +.volumes[158].qos.max_iops"
    assert result.volumes[158].name == """snapshots-source-159""", "Died on +.volumes[158].name"
    assert result.volumes[158].volume_access_groups[0] == 4, "Died on +.volumes[158].volume_access_groups[0]"
    assert result.volumes[158].scsi_naadevice_id == """6f47acc1000000006d69643400000293""", "Died on +.volumes[158].scsi_naadevice_id"
    assert result.volumes[158].total_size == 5000658944, "Died on +.volumes[158].total_size"
    assert result.volumes[158].block_size == 4096, "Died on +.volumes[158].block_size"
    assert result.volumes[158].scsi_euidevice_id == """6d69643400000293f47acc0100000000""", "Died on +.volumes[158].scsi_euidevice_id"
    assert result.volumes[158].volume_id == 659, "Died on +.volumes[158].volume_id"
    assert result.volumes[158].access == """readWrite""", "Died on +.volumes[158].access"
    assert result.volumes[158].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-159.659""", "Died on +.volumes[158].iqn"
    assert result.volumes[158].slice_count == 1, "Died on +.volumes[158].slice_count"
    assert type(result.volumes[158].attributes) is dict, "Died on .volumes[158].attributes"
    assert result.volumes[158].volume_pairs[0].volume_pair_uuid == UUID("7a4c467d-3b5e-4ece-98d1-4dca486e88ae"), "Died on .volumes[158].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[158].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[158].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[158].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[158].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[158].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[158].volume_pairs[0].remote_replication.state"
    assert result.volumes[158].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[158].volume_pairs[0].remote_replication.mode"
    assert result.volumes[158].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[158].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[158].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[158].volume_pairs[0].cluster_pair_id"
    assert result.volumes[158].volume_pairs[0].remote_volume_id == 1159, "Died on +.volumes[158].volume_pairs[0].remote_volume_id"
    assert result.volumes[158].volume_pairs[0].remote_volume_name == """snap-target-159""", "Died on +.volumes[158].volume_pairs[0].remote_volume_name"
    assert result.volumes[158].volume_pairs[0].remote_slice_id == 1159, "Died on +.volumes[158].volume_pairs[0].remote_slice_id"
    assert result.volumes[158].account_id == 4, "Died on +.volumes[158].account_id"
    assert result.volumes[158].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[158].create_time"
    assert result.volumes[158].virtual_volume_id is None, "Died on .volumes[158].virtual_volume_id"
    assert result.volumes[157].status == """active""", "Died on +.volumes[157].status"
    assert result.volumes[157].enable512e == False, "Died on +.volumes[157].enable512e"
    assert result.volumes[157].qos.burst_iops == 15000, "Died on +.volumes[157].qos.burst_iops"
    assert result.volumes[157].qos.burst_time == 60, "Died on +.volumes[157].qos.burst_time"
    assert result.volumes[157].qos.min_iops == 100, "Died on +.volumes[157].qos.min_iops"
    assert result.volumes[157].qos.max_iops == 15000, "Died on +.volumes[157].qos.max_iops"
    assert result.volumes[157].name == """snapshots-source-158""", "Died on +.volumes[157].name"
    assert result.volumes[157].volume_access_groups[0] == 4, "Died on +.volumes[157].volume_access_groups[0]"
    assert result.volumes[157].scsi_naadevice_id == """6f47acc1000000006d69643400000292""", "Died on +.volumes[157].scsi_naadevice_id"
    assert result.volumes[157].total_size == 5000658944, "Died on +.volumes[157].total_size"
    assert result.volumes[157].block_size == 4096, "Died on +.volumes[157].block_size"
    assert result.volumes[157].scsi_euidevice_id == """6d69643400000292f47acc0100000000""", "Died on +.volumes[157].scsi_euidevice_id"
    assert result.volumes[157].volume_id == 658, "Died on +.volumes[157].volume_id"
    assert result.volumes[157].access == """readWrite""", "Died on +.volumes[157].access"
    assert result.volumes[157].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-158.658""", "Died on +.volumes[157].iqn"
    assert result.volumes[157].slice_count == 1, "Died on +.volumes[157].slice_count"
    assert type(result.volumes[157].attributes) is dict, "Died on .volumes[157].attributes"
    assert result.volumes[157].volume_pairs[0].volume_pair_uuid == UUID("394c5b4f-88f8-4167-9bb6-a5f1678fc617"), "Died on .volumes[157].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[157].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[157].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[157].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[157].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[157].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[157].volume_pairs[0].remote_replication.state"
    assert result.volumes[157].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[157].volume_pairs[0].remote_replication.mode"
    assert result.volumes[157].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[157].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[157].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[157].volume_pairs[0].cluster_pair_id"
    assert result.volumes[157].volume_pairs[0].remote_volume_id == 1158, "Died on +.volumes[157].volume_pairs[0].remote_volume_id"
    assert result.volumes[157].volume_pairs[0].remote_volume_name == """snap-target-158""", "Died on +.volumes[157].volume_pairs[0].remote_volume_name"
    assert result.volumes[157].volume_pairs[0].remote_slice_id == 1158, "Died on +.volumes[157].volume_pairs[0].remote_slice_id"
    assert result.volumes[157].account_id == 4, "Died on +.volumes[157].account_id"
    assert result.volumes[157].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[157].create_time"
    assert result.volumes[157].virtual_volume_id is None, "Died on .volumes[157].virtual_volume_id"
    assert result.volumes[156].status == """active""", "Died on +.volumes[156].status"
    assert result.volumes[156].enable512e == False, "Died on +.volumes[156].enable512e"
    assert result.volumes[156].qos.burst_iops == 15000, "Died on +.volumes[156].qos.burst_iops"
    assert result.volumes[156].qos.burst_time == 60, "Died on +.volumes[156].qos.burst_time"
    assert result.volumes[156].qos.min_iops == 100, "Died on +.volumes[156].qos.min_iops"
    assert result.volumes[156].qos.max_iops == 15000, "Died on +.volumes[156].qos.max_iops"
    assert result.volumes[156].name == """snapshots-source-157""", "Died on +.volumes[156].name"
    assert result.volumes[156].volume_access_groups[0] == 4, "Died on +.volumes[156].volume_access_groups[0]"
    assert result.volumes[156].scsi_naadevice_id == """6f47acc1000000006d69643400000291""", "Died on +.volumes[156].scsi_naadevice_id"
    assert result.volumes[156].total_size == 5000658944, "Died on +.volumes[156].total_size"
    assert result.volumes[156].block_size == 4096, "Died on +.volumes[156].block_size"
    assert result.volumes[156].scsi_euidevice_id == """6d69643400000291f47acc0100000000""", "Died on +.volumes[156].scsi_euidevice_id"
    assert result.volumes[156].volume_id == 657, "Died on +.volumes[156].volume_id"
    assert result.volumes[156].access == """readWrite""", "Died on +.volumes[156].access"
    assert result.volumes[156].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-157.657""", "Died on +.volumes[156].iqn"
    assert result.volumes[156].slice_count == 1, "Died on +.volumes[156].slice_count"
    assert type(result.volumes[156].attributes) is dict, "Died on .volumes[156].attributes"
    assert result.volumes[156].volume_pairs[0].volume_pair_uuid == UUID("c116fde4-1b04-4c93-a051-76353861a4b8"), "Died on .volumes[156].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[156].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[156].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[156].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[156].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[156].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[156].volume_pairs[0].remote_replication.state"
    assert result.volumes[156].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[156].volume_pairs[0].remote_replication.mode"
    assert result.volumes[156].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[156].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[156].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[156].volume_pairs[0].cluster_pair_id"
    assert result.volumes[156].volume_pairs[0].remote_volume_id == 1157, "Died on +.volumes[156].volume_pairs[0].remote_volume_id"
    assert result.volumes[156].volume_pairs[0].remote_volume_name == """snap-target-157""", "Died on +.volumes[156].volume_pairs[0].remote_volume_name"
    assert result.volumes[156].volume_pairs[0].remote_slice_id == 1157, "Died on +.volumes[156].volume_pairs[0].remote_slice_id"
    assert result.volumes[156].account_id == 4, "Died on +.volumes[156].account_id"
    assert result.volumes[156].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[156].create_time"
    assert result.volumes[156].virtual_volume_id is None, "Died on .volumes[156].virtual_volume_id"
    assert result.volumes[155].status == """active""", "Died on +.volumes[155].status"
    assert result.volumes[155].enable512e == False, "Died on +.volumes[155].enable512e"
    assert result.volumes[155].qos.burst_iops == 15000, "Died on +.volumes[155].qos.burst_iops"
    assert result.volumes[155].qos.burst_time == 60, "Died on +.volumes[155].qos.burst_time"
    assert result.volumes[155].qos.min_iops == 100, "Died on +.volumes[155].qos.min_iops"
    assert result.volumes[155].qos.max_iops == 15000, "Died on +.volumes[155].qos.max_iops"
    assert result.volumes[155].name == """snapshots-source-156""", "Died on +.volumes[155].name"
    assert result.volumes[155].volume_access_groups[0] == 4, "Died on +.volumes[155].volume_access_groups[0]"
    assert result.volumes[155].scsi_naadevice_id == """6f47acc1000000006d69643400000290""", "Died on +.volumes[155].scsi_naadevice_id"
    assert result.volumes[155].total_size == 5000658944, "Died on +.volumes[155].total_size"
    assert result.volumes[155].block_size == 4096, "Died on +.volumes[155].block_size"
    assert result.volumes[155].scsi_euidevice_id == """6d69643400000290f47acc0100000000""", "Died on +.volumes[155].scsi_euidevice_id"
    assert result.volumes[155].volume_id == 656, "Died on +.volumes[155].volume_id"
    assert result.volumes[155].access == """readWrite""", "Died on +.volumes[155].access"
    assert result.volumes[155].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-156.656""", "Died on +.volumes[155].iqn"
    assert result.volumes[155].slice_count == 1, "Died on +.volumes[155].slice_count"
    assert type(result.volumes[155].attributes) is dict, "Died on .volumes[155].attributes"
    assert result.volumes[155].volume_pairs[0].volume_pair_uuid == UUID("cc1da78d-f204-4cde-876d-0d86e5295a69"), "Died on .volumes[155].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[155].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[155].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[155].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[155].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[155].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[155].volume_pairs[0].remote_replication.state"
    assert result.volumes[155].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[155].volume_pairs[0].remote_replication.mode"
    assert result.volumes[155].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[155].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[155].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[155].volume_pairs[0].cluster_pair_id"
    assert result.volumes[155].volume_pairs[0].remote_volume_id == 1156, "Died on +.volumes[155].volume_pairs[0].remote_volume_id"
    assert result.volumes[155].volume_pairs[0].remote_volume_name == """snap-target-156""", "Died on +.volumes[155].volume_pairs[0].remote_volume_name"
    assert result.volumes[155].volume_pairs[0].remote_slice_id == 1156, "Died on +.volumes[155].volume_pairs[0].remote_slice_id"
    assert result.volumes[155].account_id == 4, "Died on +.volumes[155].account_id"
    assert result.volumes[155].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[155].create_time"
    assert result.volumes[155].virtual_volume_id is None, "Died on .volumes[155].virtual_volume_id"
    assert result.volumes[154].status == """active""", "Died on +.volumes[154].status"
    assert result.volumes[154].enable512e == False, "Died on +.volumes[154].enable512e"
    assert result.volumes[154].qos.burst_iops == 15000, "Died on +.volumes[154].qos.burst_iops"
    assert result.volumes[154].qos.burst_time == 60, "Died on +.volumes[154].qos.burst_time"
    assert result.volumes[154].qos.min_iops == 100, "Died on +.volumes[154].qos.min_iops"
    assert result.volumes[154].qos.max_iops == 15000, "Died on +.volumes[154].qos.max_iops"
    assert result.volumes[154].name == """snapshots-source-155""", "Died on +.volumes[154].name"
    assert result.volumes[154].volume_access_groups[0] == 4, "Died on +.volumes[154].volume_access_groups[0]"
    assert result.volumes[154].scsi_naadevice_id == """6f47acc1000000006d6964340000028f""", "Died on +.volumes[154].scsi_naadevice_id"
    assert result.volumes[154].total_size == 5000658944, "Died on +.volumes[154].total_size"
    assert result.volumes[154].block_size == 4096, "Died on +.volumes[154].block_size"
    assert result.volumes[154].scsi_euidevice_id == """6d6964340000028ff47acc0100000000""", "Died on +.volumes[154].scsi_euidevice_id"
    assert result.volumes[154].volume_id == 655, "Died on +.volumes[154].volume_id"
    assert result.volumes[154].access == """readWrite""", "Died on +.volumes[154].access"
    assert result.volumes[154].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-155.655""", "Died on +.volumes[154].iqn"
    assert result.volumes[154].slice_count == 1, "Died on +.volumes[154].slice_count"
    assert type(result.volumes[154].attributes) is dict, "Died on .volumes[154].attributes"
    assert result.volumes[154].volume_pairs[0].volume_pair_uuid == UUID("7d7c0eff-03c4-4d06-af5f-794b668d7fca"), "Died on .volumes[154].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[154].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[154].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[154].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[154].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[154].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[154].volume_pairs[0].remote_replication.state"
    assert result.volumes[154].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[154].volume_pairs[0].remote_replication.mode"
    assert result.volumes[154].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[154].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[154].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[154].volume_pairs[0].cluster_pair_id"
    assert result.volumes[154].volume_pairs[0].remote_volume_id == 1155, "Died on +.volumes[154].volume_pairs[0].remote_volume_id"
    assert result.volumes[154].volume_pairs[0].remote_volume_name == """snap-target-155""", "Died on +.volumes[154].volume_pairs[0].remote_volume_name"
    assert result.volumes[154].volume_pairs[0].remote_slice_id == 1155, "Died on +.volumes[154].volume_pairs[0].remote_slice_id"
    assert result.volumes[154].account_id == 4, "Died on +.volumes[154].account_id"
    assert result.volumes[154].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[154].create_time"
    assert result.volumes[154].virtual_volume_id is None, "Died on .volumes[154].virtual_volume_id"
    assert result.volumes[153].status == """active""", "Died on +.volumes[153].status"
    assert result.volumes[153].enable512e == False, "Died on +.volumes[153].enable512e"
    assert result.volumes[153].qos.burst_iops == 15000, "Died on +.volumes[153].qos.burst_iops"
    assert result.volumes[153].qos.burst_time == 60, "Died on +.volumes[153].qos.burst_time"
    assert result.volumes[153].qos.min_iops == 100, "Died on +.volumes[153].qos.min_iops"
    assert result.volumes[153].qos.max_iops == 15000, "Died on +.volumes[153].qos.max_iops"
    assert result.volumes[153].name == """snapshots-source-154""", "Died on +.volumes[153].name"
    assert result.volumes[153].volume_access_groups[0] == 4, "Died on +.volumes[153].volume_access_groups[0]"
    assert result.volumes[153].scsi_naadevice_id == """6f47acc1000000006d6964340000028e""", "Died on +.volumes[153].scsi_naadevice_id"
    assert result.volumes[153].total_size == 5000658944, "Died on +.volumes[153].total_size"
    assert result.volumes[153].block_size == 4096, "Died on +.volumes[153].block_size"
    assert result.volumes[153].scsi_euidevice_id == """6d6964340000028ef47acc0100000000""", "Died on +.volumes[153].scsi_euidevice_id"
    assert result.volumes[153].volume_id == 654, "Died on +.volumes[153].volume_id"
    assert result.volumes[153].access == """readWrite""", "Died on +.volumes[153].access"
    assert result.volumes[153].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-154.654""", "Died on +.volumes[153].iqn"
    assert result.volumes[153].slice_count == 1, "Died on +.volumes[153].slice_count"
    assert type(result.volumes[153].attributes) is dict, "Died on .volumes[153].attributes"
    assert result.volumes[153].volume_pairs[0].volume_pair_uuid == UUID("9716c8c8-1b90-4283-85ed-fdeba7e6712b"), "Died on .volumes[153].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[153].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[153].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[153].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[153].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[153].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[153].volume_pairs[0].remote_replication.state"
    assert result.volumes[153].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[153].volume_pairs[0].remote_replication.mode"
    assert result.volumes[153].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[153].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[153].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[153].volume_pairs[0].cluster_pair_id"
    assert result.volumes[153].volume_pairs[0].remote_volume_id == 1154, "Died on +.volumes[153].volume_pairs[0].remote_volume_id"
    assert result.volumes[153].volume_pairs[0].remote_volume_name == """snap-target-154""", "Died on +.volumes[153].volume_pairs[0].remote_volume_name"
    assert result.volumes[153].volume_pairs[0].remote_slice_id == 1154, "Died on +.volumes[153].volume_pairs[0].remote_slice_id"
    assert result.volumes[153].account_id == 4, "Died on +.volumes[153].account_id"
    assert result.volumes[153].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[153].create_time"
    assert result.volumes[153].virtual_volume_id is None, "Died on .volumes[153].virtual_volume_id"
    assert result.volumes[152].status == """active""", "Died on +.volumes[152].status"
    assert result.volumes[152].enable512e == False, "Died on +.volumes[152].enable512e"
    assert result.volumes[152].qos.burst_iops == 15000, "Died on +.volumes[152].qos.burst_iops"
    assert result.volumes[152].qos.burst_time == 60, "Died on +.volumes[152].qos.burst_time"
    assert result.volumes[152].qos.min_iops == 100, "Died on +.volumes[152].qos.min_iops"
    assert result.volumes[152].qos.max_iops == 15000, "Died on +.volumes[152].qos.max_iops"
    assert result.volumes[152].name == """snapshots-source-153""", "Died on +.volumes[152].name"
    assert result.volumes[152].volume_access_groups[0] == 4, "Died on +.volumes[152].volume_access_groups[0]"
    assert result.volumes[152].scsi_naadevice_id == """6f47acc1000000006d6964340000028d""", "Died on +.volumes[152].scsi_naadevice_id"
    assert result.volumes[152].total_size == 5000658944, "Died on +.volumes[152].total_size"
    assert result.volumes[152].block_size == 4096, "Died on +.volumes[152].block_size"
    assert result.volumes[152].scsi_euidevice_id == """6d6964340000028df47acc0100000000""", "Died on +.volumes[152].scsi_euidevice_id"
    assert result.volumes[152].volume_id == 653, "Died on +.volumes[152].volume_id"
    assert result.volumes[152].access == """readWrite""", "Died on +.volumes[152].access"
    assert result.volumes[152].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-153.653""", "Died on +.volumes[152].iqn"
    assert result.volumes[152].slice_count == 1, "Died on +.volumes[152].slice_count"
    assert type(result.volumes[152].attributes) is dict, "Died on .volumes[152].attributes"
    assert result.volumes[152].volume_pairs[0].volume_pair_uuid == UUID("bfc7c560-81e2-41ca-ac3d-0eb714060a5a"), "Died on .volumes[152].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[152].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[152].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[152].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[152].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[152].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[152].volume_pairs[0].remote_replication.state"
    assert result.volumes[152].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[152].volume_pairs[0].remote_replication.mode"
    assert result.volumes[152].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[152].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[152].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[152].volume_pairs[0].cluster_pair_id"
    assert result.volumes[152].volume_pairs[0].remote_volume_id == 1153, "Died on +.volumes[152].volume_pairs[0].remote_volume_id"
    assert result.volumes[152].volume_pairs[0].remote_volume_name == """snap-target-153""", "Died on +.volumes[152].volume_pairs[0].remote_volume_name"
    assert result.volumes[152].volume_pairs[0].remote_slice_id == 1153, "Died on +.volumes[152].volume_pairs[0].remote_slice_id"
    assert result.volumes[152].account_id == 4, "Died on +.volumes[152].account_id"
    assert result.volumes[152].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[152].create_time"
    assert result.volumes[152].virtual_volume_id is None, "Died on .volumes[152].virtual_volume_id"
    assert result.volumes[151].status == """active""", "Died on +.volumes[151].status"
    assert result.volumes[151].enable512e == False, "Died on +.volumes[151].enable512e"
    assert result.volumes[151].qos.burst_iops == 15000, "Died on +.volumes[151].qos.burst_iops"
    assert result.volumes[151].qos.burst_time == 60, "Died on +.volumes[151].qos.burst_time"
    assert result.volumes[151].qos.min_iops == 100, "Died on +.volumes[151].qos.min_iops"
    assert result.volumes[151].qos.max_iops == 15000, "Died on +.volumes[151].qos.max_iops"
    assert result.volumes[151].name == """snapshots-source-152""", "Died on +.volumes[151].name"
    assert result.volumes[151].volume_access_groups[0] == 4, "Died on +.volumes[151].volume_access_groups[0]"
    assert result.volumes[151].scsi_naadevice_id == """6f47acc1000000006d6964340000028c""", "Died on +.volumes[151].scsi_naadevice_id"
    assert result.volumes[151].total_size == 5000658944, "Died on +.volumes[151].total_size"
    assert result.volumes[151].block_size == 4096, "Died on +.volumes[151].block_size"
    assert result.volumes[151].scsi_euidevice_id == """6d6964340000028cf47acc0100000000""", "Died on +.volumes[151].scsi_euidevice_id"
    assert result.volumes[151].volume_id == 652, "Died on +.volumes[151].volume_id"
    assert result.volumes[151].access == """readWrite""", "Died on +.volumes[151].access"
    assert result.volumes[151].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-152.652""", "Died on +.volumes[151].iqn"
    assert result.volumes[151].slice_count == 1, "Died on +.volumes[151].slice_count"
    assert type(result.volumes[151].attributes) is dict, "Died on .volumes[151].attributes"
    assert result.volumes[151].volume_pairs[0].volume_pair_uuid == UUID("8c80ed04-ea27-4d3e-ac5d-5d8ca5645eaf"), "Died on .volumes[151].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[151].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[151].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[151].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[151].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[151].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[151].volume_pairs[0].remote_replication.state"
    assert result.volumes[151].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[151].volume_pairs[0].remote_replication.mode"
    assert result.volumes[151].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[151].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[151].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[151].volume_pairs[0].cluster_pair_id"
    assert result.volumes[151].volume_pairs[0].remote_volume_id == 1152, "Died on +.volumes[151].volume_pairs[0].remote_volume_id"
    assert result.volumes[151].volume_pairs[0].remote_volume_name == """snap-target-152""", "Died on +.volumes[151].volume_pairs[0].remote_volume_name"
    assert result.volumes[151].volume_pairs[0].remote_slice_id == 1152, "Died on +.volumes[151].volume_pairs[0].remote_slice_id"
    assert result.volumes[151].account_id == 4, "Died on +.volumes[151].account_id"
    assert result.volumes[151].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[151].create_time"
    assert result.volumes[151].virtual_volume_id is None, "Died on .volumes[151].virtual_volume_id"
    assert result.volumes[150].status == """active""", "Died on +.volumes[150].status"
    assert result.volumes[150].enable512e == False, "Died on +.volumes[150].enable512e"
    assert result.volumes[150].qos.burst_iops == 15000, "Died on +.volumes[150].qos.burst_iops"
    assert result.volumes[150].qos.burst_time == 60, "Died on +.volumes[150].qos.burst_time"
    assert result.volumes[150].qos.min_iops == 100, "Died on +.volumes[150].qos.min_iops"
    assert result.volumes[150].qos.max_iops == 15000, "Died on +.volumes[150].qos.max_iops"
    assert result.volumes[150].name == """snapshots-source-151""", "Died on +.volumes[150].name"
    assert result.volumes[150].volume_access_groups[0] == 4, "Died on +.volumes[150].volume_access_groups[0]"
    assert result.volumes[150].scsi_naadevice_id == """6f47acc1000000006d6964340000028b""", "Died on +.volumes[150].scsi_naadevice_id"
    assert result.volumes[150].total_size == 5000658944, "Died on +.volumes[150].total_size"
    assert result.volumes[150].block_size == 4096, "Died on +.volumes[150].block_size"
    assert result.volumes[150].scsi_euidevice_id == """6d6964340000028bf47acc0100000000""", "Died on +.volumes[150].scsi_euidevice_id"
    assert result.volumes[150].volume_id == 651, "Died on +.volumes[150].volume_id"
    assert result.volumes[150].access == """readWrite""", "Died on +.volumes[150].access"
    assert result.volumes[150].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-151.651""", "Died on +.volumes[150].iqn"
    assert result.volumes[150].slice_count == 1, "Died on +.volumes[150].slice_count"
    assert type(result.volumes[150].attributes) is dict, "Died on .volumes[150].attributes"
    assert result.volumes[150].volume_pairs[0].volume_pair_uuid == UUID("e41223b2-ae40-4e1c-b48f-4dccadfe83cb"), "Died on .volumes[150].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[150].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[150].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[150].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[150].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[150].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[150].volume_pairs[0].remote_replication.state"
    assert result.volumes[150].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[150].volume_pairs[0].remote_replication.mode"
    assert result.volumes[150].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[150].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[150].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[150].volume_pairs[0].cluster_pair_id"
    assert result.volumes[150].volume_pairs[0].remote_volume_id == 1151, "Died on +.volumes[150].volume_pairs[0].remote_volume_id"
    assert result.volumes[150].volume_pairs[0].remote_volume_name == """snap-target-151""", "Died on +.volumes[150].volume_pairs[0].remote_volume_name"
    assert result.volumes[150].volume_pairs[0].remote_slice_id == 1151, "Died on +.volumes[150].volume_pairs[0].remote_slice_id"
    assert result.volumes[150].account_id == 4, "Died on +.volumes[150].account_id"
    assert result.volumes[150].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[150].create_time"
    assert result.volumes[150].virtual_volume_id is None, "Died on .volumes[150].virtual_volume_id"
    assert result.volumes[149].status == """active""", "Died on +.volumes[149].status"
    assert result.volumes[149].enable512e == False, "Died on +.volumes[149].enable512e"
    assert result.volumes[149].qos.burst_iops == 15000, "Died on +.volumes[149].qos.burst_iops"
    assert result.volumes[149].qos.burst_time == 60, "Died on +.volumes[149].qos.burst_time"
    assert result.volumes[149].qos.min_iops == 100, "Died on +.volumes[149].qos.min_iops"
    assert result.volumes[149].qos.max_iops == 15000, "Died on +.volumes[149].qos.max_iops"
    assert result.volumes[149].name == """snapshots-source-150""", "Died on +.volumes[149].name"
    assert result.volumes[149].volume_access_groups[0] == 4, "Died on +.volumes[149].volume_access_groups[0]"
    assert result.volumes[149].scsi_naadevice_id == """6f47acc1000000006d6964340000028a""", "Died on +.volumes[149].scsi_naadevice_id"
    assert result.volumes[149].total_size == 5000658944, "Died on +.volumes[149].total_size"
    assert result.volumes[149].block_size == 4096, "Died on +.volumes[149].block_size"
    assert result.volumes[149].scsi_euidevice_id == """6d6964340000028af47acc0100000000""", "Died on +.volumes[149].scsi_euidevice_id"
    assert result.volumes[149].volume_id == 650, "Died on +.volumes[149].volume_id"
    assert result.volumes[149].access == """readWrite""", "Died on +.volumes[149].access"
    assert result.volumes[149].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-150.650""", "Died on +.volumes[149].iqn"
    assert result.volumes[149].slice_count == 1, "Died on +.volumes[149].slice_count"
    assert type(result.volumes[149].attributes) is dict, "Died on .volumes[149].attributes"
    assert result.volumes[149].volume_pairs[0].volume_pair_uuid == UUID("dc417b3f-4ae3-4ecf-96d2-2e36d7d037e7"), "Died on .volumes[149].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[149].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[149].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[149].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[149].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[149].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[149].volume_pairs[0].remote_replication.state"
    assert result.volumes[149].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[149].volume_pairs[0].remote_replication.mode"
    assert result.volumes[149].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[149].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[149].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[149].volume_pairs[0].cluster_pair_id"
    assert result.volumes[149].volume_pairs[0].remote_volume_id == 1150, "Died on +.volumes[149].volume_pairs[0].remote_volume_id"
    assert result.volumes[149].volume_pairs[0].remote_volume_name == """snap-target-150""", "Died on +.volumes[149].volume_pairs[0].remote_volume_name"
    assert result.volumes[149].volume_pairs[0].remote_slice_id == 1150, "Died on +.volumes[149].volume_pairs[0].remote_slice_id"
    assert result.volumes[149].account_id == 4, "Died on +.volumes[149].account_id"
    assert result.volumes[149].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[149].create_time"
    assert result.volumes[149].virtual_volume_id is None, "Died on .volumes[149].virtual_volume_id"
    assert result.volumes[148].status == """active""", "Died on +.volumes[148].status"
    assert result.volumes[148].enable512e == False, "Died on +.volumes[148].enable512e"
    assert result.volumes[148].qos.burst_iops == 15000, "Died on +.volumes[148].qos.burst_iops"
    assert result.volumes[148].qos.burst_time == 60, "Died on +.volumes[148].qos.burst_time"
    assert result.volumes[148].qos.min_iops == 100, "Died on +.volumes[148].qos.min_iops"
    assert result.volumes[148].qos.max_iops == 15000, "Died on +.volumes[148].qos.max_iops"
    assert result.volumes[148].name == """snapshots-source-149""", "Died on +.volumes[148].name"
    assert result.volumes[148].volume_access_groups[0] == 4, "Died on +.volumes[148].volume_access_groups[0]"
    assert result.volumes[148].scsi_naadevice_id == """6f47acc1000000006d69643400000289""", "Died on +.volumes[148].scsi_naadevice_id"
    assert result.volumes[148].total_size == 5000658944, "Died on +.volumes[148].total_size"
    assert result.volumes[148].block_size == 4096, "Died on +.volumes[148].block_size"
    assert result.volumes[148].scsi_euidevice_id == """6d69643400000289f47acc0100000000""", "Died on +.volumes[148].scsi_euidevice_id"
    assert result.volumes[148].volume_id == 649, "Died on +.volumes[148].volume_id"
    assert result.volumes[148].access == """readWrite""", "Died on +.volumes[148].access"
    assert result.volumes[148].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-149.649""", "Died on +.volumes[148].iqn"
    assert result.volumes[148].slice_count == 1, "Died on +.volumes[148].slice_count"
    assert type(result.volumes[148].attributes) is dict, "Died on .volumes[148].attributes"
    assert result.volumes[148].volume_pairs[0].volume_pair_uuid == UUID("87789ada-10b8-4858-aae2-ebd1726fa178"), "Died on .volumes[148].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[148].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[148].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[148].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[148].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[148].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[148].volume_pairs[0].remote_replication.state"
    assert result.volumes[148].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[148].volume_pairs[0].remote_replication.mode"
    assert result.volumes[148].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[148].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[148].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[148].volume_pairs[0].cluster_pair_id"
    assert result.volumes[148].volume_pairs[0].remote_volume_id == 1149, "Died on +.volumes[148].volume_pairs[0].remote_volume_id"
    assert result.volumes[148].volume_pairs[0].remote_volume_name == """snap-target-149""", "Died on +.volumes[148].volume_pairs[0].remote_volume_name"
    assert result.volumes[148].volume_pairs[0].remote_slice_id == 1149, "Died on +.volumes[148].volume_pairs[0].remote_slice_id"
    assert result.volumes[148].account_id == 4, "Died on +.volumes[148].account_id"
    assert result.volumes[148].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[148].create_time"
    assert result.volumes[148].virtual_volume_id is None, "Died on .volumes[148].virtual_volume_id"
    assert result.volumes[147].status == """active""", "Died on +.volumes[147].status"
    assert result.volumes[147].enable512e == False, "Died on +.volumes[147].enable512e"
    assert result.volumes[147].qos.burst_iops == 15000, "Died on +.volumes[147].qos.burst_iops"
    assert result.volumes[147].qos.burst_time == 60, "Died on +.volumes[147].qos.burst_time"
    assert result.volumes[147].qos.min_iops == 100, "Died on +.volumes[147].qos.min_iops"
    assert result.volumes[147].qos.max_iops == 15000, "Died on +.volumes[147].qos.max_iops"
    assert result.volumes[147].name == """snapshots-source-148""", "Died on +.volumes[147].name"
    assert result.volumes[147].volume_access_groups[0] == 4, "Died on +.volumes[147].volume_access_groups[0]"
    assert result.volumes[147].scsi_naadevice_id == """6f47acc1000000006d69643400000288""", "Died on +.volumes[147].scsi_naadevice_id"
    assert result.volumes[147].total_size == 5000658944, "Died on +.volumes[147].total_size"
    assert result.volumes[147].block_size == 4096, "Died on +.volumes[147].block_size"
    assert result.volumes[147].scsi_euidevice_id == """6d69643400000288f47acc0100000000""", "Died on +.volumes[147].scsi_euidevice_id"
    assert result.volumes[147].volume_id == 648, "Died on +.volumes[147].volume_id"
    assert result.volumes[147].access == """readWrite""", "Died on +.volumes[147].access"
    assert result.volumes[147].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-148.648""", "Died on +.volumes[147].iqn"
    assert result.volumes[147].slice_count == 1, "Died on +.volumes[147].slice_count"
    assert type(result.volumes[147].attributes) is dict, "Died on .volumes[147].attributes"
    assert result.volumes[147].volume_pairs[0].volume_pair_uuid == UUID("cffa9957-4c7c-4bd4-9d33-0b928fd2b486"), "Died on .volumes[147].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[147].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[147].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[147].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[147].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[147].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[147].volume_pairs[0].remote_replication.state"
    assert result.volumes[147].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[147].volume_pairs[0].remote_replication.mode"
    assert result.volumes[147].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[147].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[147].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[147].volume_pairs[0].cluster_pair_id"
    assert result.volumes[147].volume_pairs[0].remote_volume_id == 1148, "Died on +.volumes[147].volume_pairs[0].remote_volume_id"
    assert result.volumes[147].volume_pairs[0].remote_volume_name == """snap-target-148""", "Died on +.volumes[147].volume_pairs[0].remote_volume_name"
    assert result.volumes[147].volume_pairs[0].remote_slice_id == 1148, "Died on +.volumes[147].volume_pairs[0].remote_slice_id"
    assert result.volumes[147].account_id == 4, "Died on +.volumes[147].account_id"
    assert result.volumes[147].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[147].create_time"
    assert result.volumes[147].virtual_volume_id is None, "Died on .volumes[147].virtual_volume_id"
    assert result.volumes[146].status == """active""", "Died on +.volumes[146].status"
    assert result.volumes[146].enable512e == False, "Died on +.volumes[146].enable512e"
    assert result.volumes[146].qos.burst_iops == 15000, "Died on +.volumes[146].qos.burst_iops"
    assert result.volumes[146].qos.burst_time == 60, "Died on +.volumes[146].qos.burst_time"
    assert result.volumes[146].qos.min_iops == 100, "Died on +.volumes[146].qos.min_iops"
    assert result.volumes[146].qos.max_iops == 15000, "Died on +.volumes[146].qos.max_iops"
    assert result.volumes[146].name == """snapshots-source-147""", "Died on +.volumes[146].name"
    assert result.volumes[146].volume_access_groups[0] == 4, "Died on +.volumes[146].volume_access_groups[0]"
    assert result.volumes[146].scsi_naadevice_id == """6f47acc1000000006d69643400000287""", "Died on +.volumes[146].scsi_naadevice_id"
    assert result.volumes[146].total_size == 5000658944, "Died on +.volumes[146].total_size"
    assert result.volumes[146].block_size == 4096, "Died on +.volumes[146].block_size"
    assert result.volumes[146].scsi_euidevice_id == """6d69643400000287f47acc0100000000""", "Died on +.volumes[146].scsi_euidevice_id"
    assert result.volumes[146].volume_id == 647, "Died on +.volumes[146].volume_id"
    assert result.volumes[146].access == """readWrite""", "Died on +.volumes[146].access"
    assert result.volumes[146].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-147.647""", "Died on +.volumes[146].iqn"
    assert result.volumes[146].slice_count == 1, "Died on +.volumes[146].slice_count"
    assert type(result.volumes[146].attributes) is dict, "Died on .volumes[146].attributes"
    assert result.volumes[146].volume_pairs[0].volume_pair_uuid == UUID("3b8bfb04-e935-438d-ab9d-c23bd983a52c"), "Died on .volumes[146].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[146].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[146].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[146].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[146].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[146].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[146].volume_pairs[0].remote_replication.state"
    assert result.volumes[146].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[146].volume_pairs[0].remote_replication.mode"
    assert result.volumes[146].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[146].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[146].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[146].volume_pairs[0].cluster_pair_id"
    assert result.volumes[146].volume_pairs[0].remote_volume_id == 1147, "Died on +.volumes[146].volume_pairs[0].remote_volume_id"
    assert result.volumes[146].volume_pairs[0].remote_volume_name == """snap-target-147""", "Died on +.volumes[146].volume_pairs[0].remote_volume_name"
    assert result.volumes[146].volume_pairs[0].remote_slice_id == 1147, "Died on +.volumes[146].volume_pairs[0].remote_slice_id"
    assert result.volumes[146].account_id == 4, "Died on +.volumes[146].account_id"
    assert result.volumes[146].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[146].create_time"
    assert result.volumes[146].virtual_volume_id is None, "Died on .volumes[146].virtual_volume_id"
    assert result.volumes[145].status == """active""", "Died on +.volumes[145].status"
    assert result.volumes[145].enable512e == False, "Died on +.volumes[145].enable512e"
    assert result.volumes[145].qos.burst_iops == 15000, "Died on +.volumes[145].qos.burst_iops"
    assert result.volumes[145].qos.burst_time == 60, "Died on +.volumes[145].qos.burst_time"
    assert result.volumes[145].qos.min_iops == 100, "Died on +.volumes[145].qos.min_iops"
    assert result.volumes[145].qos.max_iops == 15000, "Died on +.volumes[145].qos.max_iops"
    assert result.volumes[145].name == """snapshots-source-146""", "Died on +.volumes[145].name"
    assert result.volumes[145].volume_access_groups[0] == 4, "Died on +.volumes[145].volume_access_groups[0]"
    assert result.volumes[145].scsi_naadevice_id == """6f47acc1000000006d69643400000286""", "Died on +.volumes[145].scsi_naadevice_id"
    assert result.volumes[145].total_size == 5000658944, "Died on +.volumes[145].total_size"
    assert result.volumes[145].block_size == 4096, "Died on +.volumes[145].block_size"
    assert result.volumes[145].scsi_euidevice_id == """6d69643400000286f47acc0100000000""", "Died on +.volumes[145].scsi_euidevice_id"
    assert result.volumes[145].volume_id == 646, "Died on +.volumes[145].volume_id"
    assert result.volumes[145].access == """readWrite""", "Died on +.volumes[145].access"
    assert result.volumes[145].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-146.646""", "Died on +.volumes[145].iqn"
    assert result.volumes[145].slice_count == 1, "Died on +.volumes[145].slice_count"
    assert type(result.volumes[145].attributes) is dict, "Died on .volumes[145].attributes"
    assert result.volumes[145].volume_pairs[0].volume_pair_uuid == UUID("4c8e4420-02df-4e95-b343-4d82689bac92"), "Died on .volumes[145].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[145].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[145].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[145].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[145].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[145].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[145].volume_pairs[0].remote_replication.state"
    assert result.volumes[145].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[145].volume_pairs[0].remote_replication.mode"
    assert result.volumes[145].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[145].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[145].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[145].volume_pairs[0].cluster_pair_id"
    assert result.volumes[145].volume_pairs[0].remote_volume_id == 1146, "Died on +.volumes[145].volume_pairs[0].remote_volume_id"
    assert result.volumes[145].volume_pairs[0].remote_volume_name == """snap-target-146""", "Died on +.volumes[145].volume_pairs[0].remote_volume_name"
    assert result.volumes[145].volume_pairs[0].remote_slice_id == 1146, "Died on +.volumes[145].volume_pairs[0].remote_slice_id"
    assert result.volumes[145].account_id == 4, "Died on +.volumes[145].account_id"
    assert result.volumes[145].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[145].create_time"
    assert result.volumes[145].virtual_volume_id is None, "Died on .volumes[145].virtual_volume_id"
    assert result.volumes[144].status == """active""", "Died on +.volumes[144].status"
    assert result.volumes[144].enable512e == False, "Died on +.volumes[144].enable512e"
    assert result.volumes[144].qos.burst_iops == 15000, "Died on +.volumes[144].qos.burst_iops"
    assert result.volumes[144].qos.burst_time == 60, "Died on +.volumes[144].qos.burst_time"
    assert result.volumes[144].qos.min_iops == 100, "Died on +.volumes[144].qos.min_iops"
    assert result.volumes[144].qos.max_iops == 15000, "Died on +.volumes[144].qos.max_iops"
    assert result.volumes[144].name == """snapshots-source-145""", "Died on +.volumes[144].name"
    assert result.volumes[144].volume_access_groups[0] == 4, "Died on +.volumes[144].volume_access_groups[0]"
    assert result.volumes[144].scsi_naadevice_id == """6f47acc1000000006d69643400000285""", "Died on +.volumes[144].scsi_naadevice_id"
    assert result.volumes[144].total_size == 5000658944, "Died on +.volumes[144].total_size"
    assert result.volumes[144].block_size == 4096, "Died on +.volumes[144].block_size"
    assert result.volumes[144].scsi_euidevice_id == """6d69643400000285f47acc0100000000""", "Died on +.volumes[144].scsi_euidevice_id"
    assert result.volumes[144].volume_id == 645, "Died on +.volumes[144].volume_id"
    assert result.volumes[144].access == """readWrite""", "Died on +.volumes[144].access"
    assert result.volumes[144].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-145.645""", "Died on +.volumes[144].iqn"
    assert result.volumes[144].slice_count == 1, "Died on +.volumes[144].slice_count"
    assert type(result.volumes[144].attributes) is dict, "Died on .volumes[144].attributes"
    assert result.volumes[144].volume_pairs[0].volume_pair_uuid == UUID("012da69f-b47d-4c38-a96b-be3d53b57883"), "Died on .volumes[144].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[144].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[144].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[144].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[144].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[144].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[144].volume_pairs[0].remote_replication.state"
    assert result.volumes[144].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[144].volume_pairs[0].remote_replication.mode"
    assert result.volumes[144].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[144].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[144].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[144].volume_pairs[0].cluster_pair_id"
    assert result.volumes[144].volume_pairs[0].remote_volume_id == 1145, "Died on +.volumes[144].volume_pairs[0].remote_volume_id"
    assert result.volumes[144].volume_pairs[0].remote_volume_name == """snap-target-145""", "Died on +.volumes[144].volume_pairs[0].remote_volume_name"
    assert result.volumes[144].volume_pairs[0].remote_slice_id == 1145, "Died on +.volumes[144].volume_pairs[0].remote_slice_id"
    assert result.volumes[144].account_id == 4, "Died on +.volumes[144].account_id"
    assert result.volumes[144].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[144].create_time"
    assert result.volumes[144].virtual_volume_id is None, "Died on .volumes[144].virtual_volume_id"
    assert result.volumes[143].status == """active""", "Died on +.volumes[143].status"
    assert result.volumes[143].enable512e == False, "Died on +.volumes[143].enable512e"
    assert result.volumes[143].qos.burst_iops == 15000, "Died on +.volumes[143].qos.burst_iops"
    assert result.volumes[143].qos.burst_time == 60, "Died on +.volumes[143].qos.burst_time"
    assert result.volumes[143].qos.min_iops == 100, "Died on +.volumes[143].qos.min_iops"
    assert result.volumes[143].qos.max_iops == 15000, "Died on +.volumes[143].qos.max_iops"
    assert result.volumes[143].name == """snapshots-source-144""", "Died on +.volumes[143].name"
    assert result.volumes[143].volume_access_groups[0] == 4, "Died on +.volumes[143].volume_access_groups[0]"
    assert result.volumes[143].scsi_naadevice_id == """6f47acc1000000006d69643400000284""", "Died on +.volumes[143].scsi_naadevice_id"
    assert result.volumes[143].total_size == 5000658944, "Died on +.volumes[143].total_size"
    assert result.volumes[143].block_size == 4096, "Died on +.volumes[143].block_size"
    assert result.volumes[143].scsi_euidevice_id == """6d69643400000284f47acc0100000000""", "Died on +.volumes[143].scsi_euidevice_id"
    assert result.volumes[143].volume_id == 644, "Died on +.volumes[143].volume_id"
    assert result.volumes[143].access == """readWrite""", "Died on +.volumes[143].access"
    assert result.volumes[143].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-144.644""", "Died on +.volumes[143].iqn"
    assert result.volumes[143].slice_count == 1, "Died on +.volumes[143].slice_count"
    assert type(result.volumes[143].attributes) is dict, "Died on .volumes[143].attributes"
    assert result.volumes[143].volume_pairs[0].volume_pair_uuid == UUID("dd450cb2-e848-4321-8d9d-b5d3f9593dad"), "Died on .volumes[143].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[143].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[143].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[143].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[143].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[143].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[143].volume_pairs[0].remote_replication.state"
    assert result.volumes[143].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[143].volume_pairs[0].remote_replication.mode"
    assert result.volumes[143].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[143].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[143].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[143].volume_pairs[0].cluster_pair_id"
    assert result.volumes[143].volume_pairs[0].remote_volume_id == 1144, "Died on +.volumes[143].volume_pairs[0].remote_volume_id"
    assert result.volumes[143].volume_pairs[0].remote_volume_name == """snap-target-144""", "Died on +.volumes[143].volume_pairs[0].remote_volume_name"
    assert result.volumes[143].volume_pairs[0].remote_slice_id == 1144, "Died on +.volumes[143].volume_pairs[0].remote_slice_id"
    assert result.volumes[143].account_id == 4, "Died on +.volumes[143].account_id"
    assert result.volumes[143].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[143].create_time"
    assert result.volumes[143].virtual_volume_id is None, "Died on .volumes[143].virtual_volume_id"
    assert result.volumes[142].status == """active""", "Died on +.volumes[142].status"
    assert result.volumes[142].enable512e == False, "Died on +.volumes[142].enable512e"
    assert result.volumes[142].qos.burst_iops == 15000, "Died on +.volumes[142].qos.burst_iops"
    assert result.volumes[142].qos.burst_time == 60, "Died on +.volumes[142].qos.burst_time"
    assert result.volumes[142].qos.min_iops == 100, "Died on +.volumes[142].qos.min_iops"
    assert result.volumes[142].qos.max_iops == 15000, "Died on +.volumes[142].qos.max_iops"
    assert result.volumes[142].name == """snapshots-source-143""", "Died on +.volumes[142].name"
    assert result.volumes[142].volume_access_groups[0] == 4, "Died on +.volumes[142].volume_access_groups[0]"
    assert result.volumes[142].scsi_naadevice_id == """6f47acc1000000006d69643400000283""", "Died on +.volumes[142].scsi_naadevice_id"
    assert result.volumes[142].total_size == 5000658944, "Died on +.volumes[142].total_size"
    assert result.volumes[142].block_size == 4096, "Died on +.volumes[142].block_size"
    assert result.volumes[142].scsi_euidevice_id == """6d69643400000283f47acc0100000000""", "Died on +.volumes[142].scsi_euidevice_id"
    assert result.volumes[142].volume_id == 643, "Died on +.volumes[142].volume_id"
    assert result.volumes[142].access == """readWrite""", "Died on +.volumes[142].access"
    assert result.volumes[142].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-143.643""", "Died on +.volumes[142].iqn"
    assert result.volumes[142].slice_count == 1, "Died on +.volumes[142].slice_count"
    assert type(result.volumes[142].attributes) is dict, "Died on .volumes[142].attributes"
    assert result.volumes[142].volume_pairs[0].volume_pair_uuid == UUID("a7c249f7-8678-4a18-9ccc-e2acfe452b66"), "Died on .volumes[142].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[142].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[142].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[142].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[142].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[142].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[142].volume_pairs[0].remote_replication.state"
    assert result.volumes[142].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[142].volume_pairs[0].remote_replication.mode"
    assert result.volumes[142].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[142].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[142].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[142].volume_pairs[0].cluster_pair_id"
    assert result.volumes[142].volume_pairs[0].remote_volume_id == 1143, "Died on +.volumes[142].volume_pairs[0].remote_volume_id"
    assert result.volumes[142].volume_pairs[0].remote_volume_name == """snap-target-143""", "Died on +.volumes[142].volume_pairs[0].remote_volume_name"
    assert result.volumes[142].volume_pairs[0].remote_slice_id == 1143, "Died on +.volumes[142].volume_pairs[0].remote_slice_id"
    assert result.volumes[142].account_id == 4, "Died on +.volumes[142].account_id"
    assert result.volumes[142].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[142].create_time"
    assert result.volumes[142].virtual_volume_id is None, "Died on .volumes[142].virtual_volume_id"
    assert result.volumes[141].status == """active""", "Died on +.volumes[141].status"
    assert result.volumes[141].enable512e == False, "Died on +.volumes[141].enable512e"
    assert result.volumes[141].qos.burst_iops == 15000, "Died on +.volumes[141].qos.burst_iops"
    assert result.volumes[141].qos.burst_time == 60, "Died on +.volumes[141].qos.burst_time"
    assert result.volumes[141].qos.min_iops == 100, "Died on +.volumes[141].qos.min_iops"
    assert result.volumes[141].qos.max_iops == 15000, "Died on +.volumes[141].qos.max_iops"
    assert result.volumes[141].name == """snapshots-source-142""", "Died on +.volumes[141].name"
    assert result.volumes[141].volume_access_groups[0] == 4, "Died on +.volumes[141].volume_access_groups[0]"
    assert result.volumes[141].scsi_naadevice_id == """6f47acc1000000006d69643400000282""", "Died on +.volumes[141].scsi_naadevice_id"
    assert result.volumes[141].total_size == 5000658944, "Died on +.volumes[141].total_size"
    assert result.volumes[141].block_size == 4096, "Died on +.volumes[141].block_size"
    assert result.volumes[141].scsi_euidevice_id == """6d69643400000282f47acc0100000000""", "Died on +.volumes[141].scsi_euidevice_id"
    assert result.volumes[141].volume_id == 642, "Died on +.volumes[141].volume_id"
    assert result.volumes[141].access == """readWrite""", "Died on +.volumes[141].access"
    assert result.volumes[141].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-142.642""", "Died on +.volumes[141].iqn"
    assert result.volumes[141].slice_count == 1, "Died on +.volumes[141].slice_count"
    assert type(result.volumes[141].attributes) is dict, "Died on .volumes[141].attributes"
    assert result.volumes[141].volume_pairs[0].volume_pair_uuid == UUID("f2e4384b-9cc1-4cf1-97fa-33b4a7bfb63a"), "Died on .volumes[141].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[141].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[141].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[141].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[141].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[141].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[141].volume_pairs[0].remote_replication.state"
    assert result.volumes[141].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[141].volume_pairs[0].remote_replication.mode"
    assert result.volumes[141].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[141].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[141].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[141].volume_pairs[0].cluster_pair_id"
    assert result.volumes[141].volume_pairs[0].remote_volume_id == 1142, "Died on +.volumes[141].volume_pairs[0].remote_volume_id"
    assert result.volumes[141].volume_pairs[0].remote_volume_name == """snap-target-142""", "Died on +.volumes[141].volume_pairs[0].remote_volume_name"
    assert result.volumes[141].volume_pairs[0].remote_slice_id == 1142, "Died on +.volumes[141].volume_pairs[0].remote_slice_id"
    assert result.volumes[141].account_id == 4, "Died on +.volumes[141].account_id"
    assert result.volumes[141].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[141].create_time"
    assert result.volumes[141].virtual_volume_id is None, "Died on .volumes[141].virtual_volume_id"
    assert result.volumes[140].status == """active""", "Died on +.volumes[140].status"
    assert result.volumes[140].enable512e == False, "Died on +.volumes[140].enable512e"
    assert result.volumes[140].qos.burst_iops == 15000, "Died on +.volumes[140].qos.burst_iops"
    assert result.volumes[140].qos.burst_time == 60, "Died on +.volumes[140].qos.burst_time"
    assert result.volumes[140].qos.min_iops == 100, "Died on +.volumes[140].qos.min_iops"
    assert result.volumes[140].qos.max_iops == 15000, "Died on +.volumes[140].qos.max_iops"
    assert result.volumes[140].name == """snapshots-source-141""", "Died on +.volumes[140].name"
    assert result.volumes[140].volume_access_groups[0] == 4, "Died on +.volumes[140].volume_access_groups[0]"
    assert result.volumes[140].scsi_naadevice_id == """6f47acc1000000006d69643400000281""", "Died on +.volumes[140].scsi_naadevice_id"
    assert result.volumes[140].total_size == 5000658944, "Died on +.volumes[140].total_size"
    assert result.volumes[140].block_size == 4096, "Died on +.volumes[140].block_size"
    assert result.volumes[140].scsi_euidevice_id == """6d69643400000281f47acc0100000000""", "Died on +.volumes[140].scsi_euidevice_id"
    assert result.volumes[140].volume_id == 641, "Died on +.volumes[140].volume_id"
    assert result.volumes[140].access == """readWrite""", "Died on +.volumes[140].access"
    assert result.volumes[140].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-141.641""", "Died on +.volumes[140].iqn"
    assert result.volumes[140].slice_count == 1, "Died on +.volumes[140].slice_count"
    assert type(result.volumes[140].attributes) is dict, "Died on .volumes[140].attributes"
    assert result.volumes[140].volume_pairs[0].volume_pair_uuid == UUID("f1f18964-eaa6-45a0-942b-d89d26e13aa0"), "Died on .volumes[140].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[140].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[140].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[140].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[140].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[140].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[140].volume_pairs[0].remote_replication.state"
    assert result.volumes[140].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[140].volume_pairs[0].remote_replication.mode"
    assert result.volumes[140].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[140].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[140].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[140].volume_pairs[0].cluster_pair_id"
    assert result.volumes[140].volume_pairs[0].remote_volume_id == 1141, "Died on +.volumes[140].volume_pairs[0].remote_volume_id"
    assert result.volumes[140].volume_pairs[0].remote_volume_name == """snap-target-141""", "Died on +.volumes[140].volume_pairs[0].remote_volume_name"
    assert result.volumes[140].volume_pairs[0].remote_slice_id == 1141, "Died on +.volumes[140].volume_pairs[0].remote_slice_id"
    assert result.volumes[140].account_id == 4, "Died on +.volumes[140].account_id"
    assert result.volumes[140].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[140].create_time"
    assert result.volumes[140].virtual_volume_id is None, "Died on .volumes[140].virtual_volume_id"
    assert result.volumes[139].status == """active""", "Died on +.volumes[139].status"
    assert result.volumes[139].enable512e == False, "Died on +.volumes[139].enable512e"
    assert result.volumes[139].qos.burst_iops == 15000, "Died on +.volumes[139].qos.burst_iops"
    assert result.volumes[139].qos.burst_time == 60, "Died on +.volumes[139].qos.burst_time"
    assert result.volumes[139].qos.min_iops == 100, "Died on +.volumes[139].qos.min_iops"
    assert result.volumes[139].qos.max_iops == 15000, "Died on +.volumes[139].qos.max_iops"
    assert result.volumes[139].name == """snapshots-source-140""", "Died on +.volumes[139].name"
    assert result.volumes[139].volume_access_groups[0] == 4, "Died on +.volumes[139].volume_access_groups[0]"
    assert result.volumes[139].scsi_naadevice_id == """6f47acc1000000006d69643400000280""", "Died on +.volumes[139].scsi_naadevice_id"
    assert result.volumes[139].total_size == 5000658944, "Died on +.volumes[139].total_size"
    assert result.volumes[139].block_size == 4096, "Died on +.volumes[139].block_size"
    assert result.volumes[139].scsi_euidevice_id == """6d69643400000280f47acc0100000000""", "Died on +.volumes[139].scsi_euidevice_id"
    assert result.volumes[139].volume_id == 640, "Died on +.volumes[139].volume_id"
    assert result.volumes[139].access == """readWrite""", "Died on +.volumes[139].access"
    assert result.volumes[139].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-140.640""", "Died on +.volumes[139].iqn"
    assert result.volumes[139].slice_count == 1, "Died on +.volumes[139].slice_count"
    assert type(result.volumes[139].attributes) is dict, "Died on .volumes[139].attributes"
    assert result.volumes[139].volume_pairs[0].volume_pair_uuid == UUID("bb79029d-bab5-401c-96de-12ed3e6dbcf5"), "Died on .volumes[139].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[139].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[139].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[139].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[139].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[139].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[139].volume_pairs[0].remote_replication.state"
    assert result.volumes[139].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[139].volume_pairs[0].remote_replication.mode"
    assert result.volumes[139].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[139].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[139].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[139].volume_pairs[0].cluster_pair_id"
    assert result.volumes[139].volume_pairs[0].remote_volume_id == 1140, "Died on +.volumes[139].volume_pairs[0].remote_volume_id"
    assert result.volumes[139].volume_pairs[0].remote_volume_name == """snap-target-140""", "Died on +.volumes[139].volume_pairs[0].remote_volume_name"
    assert result.volumes[139].volume_pairs[0].remote_slice_id == 1140, "Died on +.volumes[139].volume_pairs[0].remote_slice_id"
    assert result.volumes[139].account_id == 4, "Died on +.volumes[139].account_id"
    assert result.volumes[139].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[139].create_time"
    assert result.volumes[139].virtual_volume_id is None, "Died on .volumes[139].virtual_volume_id"
    assert result.volumes[138].status == """active""", "Died on +.volumes[138].status"
    assert result.volumes[138].enable512e == False, "Died on +.volumes[138].enable512e"
    assert result.volumes[138].qos.burst_iops == 15000, "Died on +.volumes[138].qos.burst_iops"
    assert result.volumes[138].qos.burst_time == 60, "Died on +.volumes[138].qos.burst_time"
    assert result.volumes[138].qos.min_iops == 100, "Died on +.volumes[138].qos.min_iops"
    assert result.volumes[138].qos.max_iops == 15000, "Died on +.volumes[138].qos.max_iops"
    assert result.volumes[138].name == """snapshots-source-139""", "Died on +.volumes[138].name"
    assert result.volumes[138].volume_access_groups[0] == 4, "Died on +.volumes[138].volume_access_groups[0]"
    assert result.volumes[138].scsi_naadevice_id == """6f47acc1000000006d6964340000027f""", "Died on +.volumes[138].scsi_naadevice_id"
    assert result.volumes[138].total_size == 5000658944, "Died on +.volumes[138].total_size"
    assert result.volumes[138].block_size == 4096, "Died on +.volumes[138].block_size"
    assert result.volumes[138].scsi_euidevice_id == """6d6964340000027ff47acc0100000000""", "Died on +.volumes[138].scsi_euidevice_id"
    assert result.volumes[138].volume_id == 639, "Died on +.volumes[138].volume_id"
    assert result.volumes[138].access == """readWrite""", "Died on +.volumes[138].access"
    assert result.volumes[138].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-139.639""", "Died on +.volumes[138].iqn"
    assert result.volumes[138].slice_count == 1, "Died on +.volumes[138].slice_count"
    assert type(result.volumes[138].attributes) is dict, "Died on .volumes[138].attributes"
    assert result.volumes[138].volume_pairs[0].volume_pair_uuid == UUID("750a00de-355a-4e57-83ab-742b59bb1751"), "Died on .volumes[138].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[138].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[138].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[138].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[138].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[138].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[138].volume_pairs[0].remote_replication.state"
    assert result.volumes[138].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[138].volume_pairs[0].remote_replication.mode"
    assert result.volumes[138].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[138].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[138].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[138].volume_pairs[0].cluster_pair_id"
    assert result.volumes[138].volume_pairs[0].remote_volume_id == 1139, "Died on +.volumes[138].volume_pairs[0].remote_volume_id"
    assert result.volumes[138].volume_pairs[0].remote_volume_name == """snap-target-139""", "Died on +.volumes[138].volume_pairs[0].remote_volume_name"
    assert result.volumes[138].volume_pairs[0].remote_slice_id == 1139, "Died on +.volumes[138].volume_pairs[0].remote_slice_id"
    assert result.volumes[138].account_id == 4, "Died on +.volumes[138].account_id"
    assert result.volumes[138].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[138].create_time"
    assert result.volumes[138].virtual_volume_id is None, "Died on .volumes[138].virtual_volume_id"
    assert result.volumes[137].status == """active""", "Died on +.volumes[137].status"
    assert result.volumes[137].enable512e == False, "Died on +.volumes[137].enable512e"
    assert result.volumes[137].qos.burst_iops == 15000, "Died on +.volumes[137].qos.burst_iops"
    assert result.volumes[137].qos.burst_time == 60, "Died on +.volumes[137].qos.burst_time"
    assert result.volumes[137].qos.min_iops == 100, "Died on +.volumes[137].qos.min_iops"
    assert result.volumes[137].qos.max_iops == 15000, "Died on +.volumes[137].qos.max_iops"
    assert result.volumes[137].name == """snapshots-source-138""", "Died on +.volumes[137].name"
    assert result.volumes[137].volume_access_groups[0] == 4, "Died on +.volumes[137].volume_access_groups[0]"
    assert result.volumes[137].scsi_naadevice_id == """6f47acc1000000006d6964340000027e""", "Died on +.volumes[137].scsi_naadevice_id"
    assert result.volumes[137].total_size == 5000658944, "Died on +.volumes[137].total_size"
    assert result.volumes[137].block_size == 4096, "Died on +.volumes[137].block_size"
    assert result.volumes[137].scsi_euidevice_id == """6d6964340000027ef47acc0100000000""", "Died on +.volumes[137].scsi_euidevice_id"
    assert result.volumes[137].volume_id == 638, "Died on +.volumes[137].volume_id"
    assert result.volumes[137].access == """readWrite""", "Died on +.volumes[137].access"
    assert result.volumes[137].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-138.638""", "Died on +.volumes[137].iqn"
    assert result.volumes[137].slice_count == 1, "Died on +.volumes[137].slice_count"
    assert type(result.volumes[137].attributes) is dict, "Died on .volumes[137].attributes"
    assert result.volumes[137].volume_pairs[0].volume_pair_uuid == UUID("fe4ee5a6-cafb-42c0-9010-851e5a900bb0"), "Died on .volumes[137].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[137].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[137].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[137].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[137].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[137].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[137].volume_pairs[0].remote_replication.state"
    assert result.volumes[137].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[137].volume_pairs[0].remote_replication.mode"
    assert result.volumes[137].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[137].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[137].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[137].volume_pairs[0].cluster_pair_id"
    assert result.volumes[137].volume_pairs[0].remote_volume_id == 1138, "Died on +.volumes[137].volume_pairs[0].remote_volume_id"
    assert result.volumes[137].volume_pairs[0].remote_volume_name == """snap-target-138""", "Died on +.volumes[137].volume_pairs[0].remote_volume_name"
    assert result.volumes[137].volume_pairs[0].remote_slice_id == 1138, "Died on +.volumes[137].volume_pairs[0].remote_slice_id"
    assert result.volumes[137].account_id == 4, "Died on +.volumes[137].account_id"
    assert result.volumes[137].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[137].create_time"
    assert result.volumes[137].virtual_volume_id is None, "Died on .volumes[137].virtual_volume_id"
    assert result.volumes[136].status == """active""", "Died on +.volumes[136].status"
    assert result.volumes[136].enable512e == False, "Died on +.volumes[136].enable512e"
    assert result.volumes[136].qos.burst_iops == 15000, "Died on +.volumes[136].qos.burst_iops"
    assert result.volumes[136].qos.burst_time == 60, "Died on +.volumes[136].qos.burst_time"
    assert result.volumes[136].qos.min_iops == 100, "Died on +.volumes[136].qos.min_iops"
    assert result.volumes[136].qos.max_iops == 15000, "Died on +.volumes[136].qos.max_iops"
    assert result.volumes[136].name == """snapshots-source-137""", "Died on +.volumes[136].name"
    assert result.volumes[136].volume_access_groups[0] == 4, "Died on +.volumes[136].volume_access_groups[0]"
    assert result.volumes[136].scsi_naadevice_id == """6f47acc1000000006d6964340000027d""", "Died on +.volumes[136].scsi_naadevice_id"
    assert result.volumes[136].total_size == 5000658944, "Died on +.volumes[136].total_size"
    assert result.volumes[136].block_size == 4096, "Died on +.volumes[136].block_size"
    assert result.volumes[136].scsi_euidevice_id == """6d6964340000027df47acc0100000000""", "Died on +.volumes[136].scsi_euidevice_id"
    assert result.volumes[136].volume_id == 637, "Died on +.volumes[136].volume_id"
    assert result.volumes[136].access == """readWrite""", "Died on +.volumes[136].access"
    assert result.volumes[136].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-137.637""", "Died on +.volumes[136].iqn"
    assert result.volumes[136].slice_count == 1, "Died on +.volumes[136].slice_count"
    assert type(result.volumes[136].attributes) is dict, "Died on .volumes[136].attributes"
    assert result.volumes[136].volume_pairs[0].volume_pair_uuid == UUID("c90e7e1b-7601-4ad2-82fa-5a04c11704e6"), "Died on .volumes[136].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[136].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[136].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[136].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[136].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[136].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[136].volume_pairs[0].remote_replication.state"
    assert result.volumes[136].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[136].volume_pairs[0].remote_replication.mode"
    assert result.volumes[136].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[136].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[136].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[136].volume_pairs[0].cluster_pair_id"
    assert result.volumes[136].volume_pairs[0].remote_volume_id == 1137, "Died on +.volumes[136].volume_pairs[0].remote_volume_id"
    assert result.volumes[136].volume_pairs[0].remote_volume_name == """snap-target-137""", "Died on +.volumes[136].volume_pairs[0].remote_volume_name"
    assert result.volumes[136].volume_pairs[0].remote_slice_id == 1137, "Died on +.volumes[136].volume_pairs[0].remote_slice_id"
    assert result.volumes[136].account_id == 4, "Died on +.volumes[136].account_id"
    assert result.volumes[136].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[136].create_time"
    assert result.volumes[136].virtual_volume_id is None, "Died on .volumes[136].virtual_volume_id"
    assert result.volumes[135].status == """active""", "Died on +.volumes[135].status"
    assert result.volumes[135].enable512e == False, "Died on +.volumes[135].enable512e"
    assert result.volumes[135].qos.burst_iops == 15000, "Died on +.volumes[135].qos.burst_iops"
    assert result.volumes[135].qos.burst_time == 60, "Died on +.volumes[135].qos.burst_time"
    assert result.volumes[135].qos.min_iops == 100, "Died on +.volumes[135].qos.min_iops"
    assert result.volumes[135].qos.max_iops == 15000, "Died on +.volumes[135].qos.max_iops"
    assert result.volumes[135].name == """snapshots-source-136""", "Died on +.volumes[135].name"
    assert result.volumes[135].volume_access_groups[0] == 4, "Died on +.volumes[135].volume_access_groups[0]"
    assert result.volumes[135].scsi_naadevice_id == """6f47acc1000000006d6964340000027c""", "Died on +.volumes[135].scsi_naadevice_id"
    assert result.volumes[135].total_size == 5000658944, "Died on +.volumes[135].total_size"
    assert result.volumes[135].block_size == 4096, "Died on +.volumes[135].block_size"
    assert result.volumes[135].scsi_euidevice_id == """6d6964340000027cf47acc0100000000""", "Died on +.volumes[135].scsi_euidevice_id"
    assert result.volumes[135].volume_id == 636, "Died on +.volumes[135].volume_id"
    assert result.volumes[135].access == """readWrite""", "Died on +.volumes[135].access"
    assert result.volumes[135].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-136.636""", "Died on +.volumes[135].iqn"
    assert result.volumes[135].slice_count == 1, "Died on +.volumes[135].slice_count"
    assert type(result.volumes[135].attributes) is dict, "Died on .volumes[135].attributes"
    assert result.volumes[135].volume_pairs[0].volume_pair_uuid == UUID("4e9d7625-bee4-4862-8952-f7a617725db5"), "Died on .volumes[135].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[135].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[135].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[135].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[135].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[135].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[135].volume_pairs[0].remote_replication.state"
    assert result.volumes[135].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[135].volume_pairs[0].remote_replication.mode"
    assert result.volumes[135].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[135].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[135].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[135].volume_pairs[0].cluster_pair_id"
    assert result.volumes[135].volume_pairs[0].remote_volume_id == 1136, "Died on +.volumes[135].volume_pairs[0].remote_volume_id"
    assert result.volumes[135].volume_pairs[0].remote_volume_name == """snap-target-136""", "Died on +.volumes[135].volume_pairs[0].remote_volume_name"
    assert result.volumes[135].volume_pairs[0].remote_slice_id == 1136, "Died on +.volumes[135].volume_pairs[0].remote_slice_id"
    assert result.volumes[135].account_id == 4, "Died on +.volumes[135].account_id"
    assert result.volumes[135].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[135].create_time"
    assert result.volumes[135].virtual_volume_id is None, "Died on .volumes[135].virtual_volume_id"
    assert result.volumes[134].status == """active""", "Died on +.volumes[134].status"
    assert result.volumes[134].enable512e == False, "Died on +.volumes[134].enable512e"
    assert result.volumes[134].qos.burst_iops == 15000, "Died on +.volumes[134].qos.burst_iops"
    assert result.volumes[134].qos.burst_time == 60, "Died on +.volumes[134].qos.burst_time"
    assert result.volumes[134].qos.min_iops == 100, "Died on +.volumes[134].qos.min_iops"
    assert result.volumes[134].qos.max_iops == 15000, "Died on +.volumes[134].qos.max_iops"
    assert result.volumes[134].name == """snapshots-source-135""", "Died on +.volumes[134].name"
    assert result.volumes[134].volume_access_groups[0] == 4, "Died on +.volumes[134].volume_access_groups[0]"
    assert result.volumes[134].scsi_naadevice_id == """6f47acc1000000006d6964340000027b""", "Died on +.volumes[134].scsi_naadevice_id"
    assert result.volumes[134].total_size == 5000658944, "Died on +.volumes[134].total_size"
    assert result.volumes[134].block_size == 4096, "Died on +.volumes[134].block_size"
    assert result.volumes[134].scsi_euidevice_id == """6d6964340000027bf47acc0100000000""", "Died on +.volumes[134].scsi_euidevice_id"
    assert result.volumes[134].volume_id == 635, "Died on +.volumes[134].volume_id"
    assert result.volumes[134].access == """readWrite""", "Died on +.volumes[134].access"
    assert result.volumes[134].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-135.635""", "Died on +.volumes[134].iqn"
    assert result.volumes[134].slice_count == 1, "Died on +.volumes[134].slice_count"
    assert type(result.volumes[134].attributes) is dict, "Died on .volumes[134].attributes"
    assert result.volumes[134].volume_pairs[0].volume_pair_uuid == UUID("ea777fc5-0342-4281-9b4e-d420d09a9a77"), "Died on .volumes[134].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[134].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[134].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[134].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[134].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[134].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[134].volume_pairs[0].remote_replication.state"
    assert result.volumes[134].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[134].volume_pairs[0].remote_replication.mode"
    assert result.volumes[134].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[134].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[134].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[134].volume_pairs[0].cluster_pair_id"
    assert result.volumes[134].volume_pairs[0].remote_volume_id == 1135, "Died on +.volumes[134].volume_pairs[0].remote_volume_id"
    assert result.volumes[134].volume_pairs[0].remote_volume_name == """snap-target-135""", "Died on +.volumes[134].volume_pairs[0].remote_volume_name"
    assert result.volumes[134].volume_pairs[0].remote_slice_id == 1135, "Died on +.volumes[134].volume_pairs[0].remote_slice_id"
    assert result.volumes[134].account_id == 4, "Died on +.volumes[134].account_id"
    assert result.volumes[134].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[134].create_time"
    assert result.volumes[134].virtual_volume_id is None, "Died on .volumes[134].virtual_volume_id"
    assert result.volumes[133].status == """active""", "Died on +.volumes[133].status"
    assert result.volumes[133].enable512e == False, "Died on +.volumes[133].enable512e"
    assert result.volumes[133].qos.burst_iops == 15000, "Died on +.volumes[133].qos.burst_iops"
    assert result.volumes[133].qos.burst_time == 60, "Died on +.volumes[133].qos.burst_time"
    assert result.volumes[133].qos.min_iops == 100, "Died on +.volumes[133].qos.min_iops"
    assert result.volumes[133].qos.max_iops == 15000, "Died on +.volumes[133].qos.max_iops"
    assert result.volumes[133].name == """snapshots-source-134""", "Died on +.volumes[133].name"
    assert result.volumes[133].volume_access_groups[0] == 4, "Died on +.volumes[133].volume_access_groups[0]"
    assert result.volumes[133].scsi_naadevice_id == """6f47acc1000000006d6964340000027a""", "Died on +.volumes[133].scsi_naadevice_id"
    assert result.volumes[133].total_size == 5000658944, "Died on +.volumes[133].total_size"
    assert result.volumes[133].block_size == 4096, "Died on +.volumes[133].block_size"
    assert result.volumes[133].scsi_euidevice_id == """6d6964340000027af47acc0100000000""", "Died on +.volumes[133].scsi_euidevice_id"
    assert result.volumes[133].volume_id == 634, "Died on +.volumes[133].volume_id"
    assert result.volumes[133].access == """readWrite""", "Died on +.volumes[133].access"
    assert result.volumes[133].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-134.634""", "Died on +.volumes[133].iqn"
    assert result.volumes[133].slice_count == 1, "Died on +.volumes[133].slice_count"
    assert type(result.volumes[133].attributes) is dict, "Died on .volumes[133].attributes"
    assert result.volumes[133].volume_pairs[0].volume_pair_uuid == UUID("8ec41bbd-b850-4df0-992f-cababc300607"), "Died on .volumes[133].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[133].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[133].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[133].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[133].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[133].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[133].volume_pairs[0].remote_replication.state"
    assert result.volumes[133].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[133].volume_pairs[0].remote_replication.mode"
    assert result.volumes[133].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[133].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[133].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[133].volume_pairs[0].cluster_pair_id"
    assert result.volumes[133].volume_pairs[0].remote_volume_id == 1134, "Died on +.volumes[133].volume_pairs[0].remote_volume_id"
    assert result.volumes[133].volume_pairs[0].remote_volume_name == """snap-target-134""", "Died on +.volumes[133].volume_pairs[0].remote_volume_name"
    assert result.volumes[133].volume_pairs[0].remote_slice_id == 1134, "Died on +.volumes[133].volume_pairs[0].remote_slice_id"
    assert result.volumes[133].account_id == 4, "Died on +.volumes[133].account_id"
    assert result.volumes[133].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[133].create_time"
    assert result.volumes[133].virtual_volume_id is None, "Died on .volumes[133].virtual_volume_id"
    assert result.volumes[132].status == """active""", "Died on +.volumes[132].status"
    assert result.volumes[132].enable512e == False, "Died on +.volumes[132].enable512e"
    assert result.volumes[132].qos.burst_iops == 15000, "Died on +.volumes[132].qos.burst_iops"
    assert result.volumes[132].qos.burst_time == 60, "Died on +.volumes[132].qos.burst_time"
    assert result.volumes[132].qos.min_iops == 100, "Died on +.volumes[132].qos.min_iops"
    assert result.volumes[132].qos.max_iops == 15000, "Died on +.volumes[132].qos.max_iops"
    assert result.volumes[132].name == """snapshots-source-133""", "Died on +.volumes[132].name"
    assert result.volumes[132].volume_access_groups[0] == 4, "Died on +.volumes[132].volume_access_groups[0]"
    assert result.volumes[132].scsi_naadevice_id == """6f47acc1000000006d69643400000279""", "Died on +.volumes[132].scsi_naadevice_id"
    assert result.volumes[132].total_size == 5000658944, "Died on +.volumes[132].total_size"
    assert result.volumes[132].block_size == 4096, "Died on +.volumes[132].block_size"
    assert result.volumes[132].scsi_euidevice_id == """6d69643400000279f47acc0100000000""", "Died on +.volumes[132].scsi_euidevice_id"
    assert result.volumes[132].volume_id == 633, "Died on +.volumes[132].volume_id"
    assert result.volumes[132].access == """readWrite""", "Died on +.volumes[132].access"
    assert result.volumes[132].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-133.633""", "Died on +.volumes[132].iqn"
    assert result.volumes[132].slice_count == 1, "Died on +.volumes[132].slice_count"
    assert type(result.volumes[132].attributes) is dict, "Died on .volumes[132].attributes"
    assert result.volumes[132].volume_pairs[0].volume_pair_uuid == UUID("e3e594ac-2ee1-45d7-8709-851a0f81816e"), "Died on .volumes[132].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[132].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[132].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[132].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[132].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[132].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[132].volume_pairs[0].remote_replication.state"
    assert result.volumes[132].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[132].volume_pairs[0].remote_replication.mode"
    assert result.volumes[132].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[132].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[132].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[132].volume_pairs[0].cluster_pair_id"
    assert result.volumes[132].volume_pairs[0].remote_volume_id == 1133, "Died on +.volumes[132].volume_pairs[0].remote_volume_id"
    assert result.volumes[132].volume_pairs[0].remote_volume_name == """snap-target-133""", "Died on +.volumes[132].volume_pairs[0].remote_volume_name"
    assert result.volumes[132].volume_pairs[0].remote_slice_id == 1133, "Died on +.volumes[132].volume_pairs[0].remote_slice_id"
    assert result.volumes[132].account_id == 4, "Died on +.volumes[132].account_id"
    assert result.volumes[132].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[132].create_time"
    assert result.volumes[132].virtual_volume_id is None, "Died on .volumes[132].virtual_volume_id"
    assert result.volumes[131].status == """active""", "Died on +.volumes[131].status"
    assert result.volumes[131].enable512e == False, "Died on +.volumes[131].enable512e"
    assert result.volumes[131].qos.burst_iops == 15000, "Died on +.volumes[131].qos.burst_iops"
    assert result.volumes[131].qos.burst_time == 60, "Died on +.volumes[131].qos.burst_time"
    assert result.volumes[131].qos.min_iops == 100, "Died on +.volumes[131].qos.min_iops"
    assert result.volumes[131].qos.max_iops == 15000, "Died on +.volumes[131].qos.max_iops"
    assert result.volumes[131].name == """snapshots-source-132""", "Died on +.volumes[131].name"
    assert result.volumes[131].volume_access_groups[0] == 4, "Died on +.volumes[131].volume_access_groups[0]"
    assert result.volumes[131].scsi_naadevice_id == """6f47acc1000000006d69643400000278""", "Died on +.volumes[131].scsi_naadevice_id"
    assert result.volumes[131].total_size == 5000658944, "Died on +.volumes[131].total_size"
    assert result.volumes[131].block_size == 4096, "Died on +.volumes[131].block_size"
    assert result.volumes[131].scsi_euidevice_id == """6d69643400000278f47acc0100000000""", "Died on +.volumes[131].scsi_euidevice_id"
    assert result.volumes[131].volume_id == 632, "Died on +.volumes[131].volume_id"
    assert result.volumes[131].access == """readWrite""", "Died on +.volumes[131].access"
    assert result.volumes[131].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-132.632""", "Died on +.volumes[131].iqn"
    assert result.volumes[131].slice_count == 1, "Died on +.volumes[131].slice_count"
    assert type(result.volumes[131].attributes) is dict, "Died on .volumes[131].attributes"
    assert result.volumes[131].volume_pairs[0].volume_pair_uuid == UUID("391132f6-8a2c-4dce-a088-cfe9edbfd474"), "Died on .volumes[131].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[131].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[131].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[131].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[131].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[131].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[131].volume_pairs[0].remote_replication.state"
    assert result.volumes[131].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[131].volume_pairs[0].remote_replication.mode"
    assert result.volumes[131].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[131].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[131].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[131].volume_pairs[0].cluster_pair_id"
    assert result.volumes[131].volume_pairs[0].remote_volume_id == 1132, "Died on +.volumes[131].volume_pairs[0].remote_volume_id"
    assert result.volumes[131].volume_pairs[0].remote_volume_name == """snap-target-132""", "Died on +.volumes[131].volume_pairs[0].remote_volume_name"
    assert result.volumes[131].volume_pairs[0].remote_slice_id == 1132, "Died on +.volumes[131].volume_pairs[0].remote_slice_id"
    assert result.volumes[131].account_id == 4, "Died on +.volumes[131].account_id"
    assert result.volumes[131].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[131].create_time"
    assert result.volumes[131].virtual_volume_id is None, "Died on .volumes[131].virtual_volume_id"
    assert result.volumes[130].status == """active""", "Died on +.volumes[130].status"
    assert result.volumes[130].enable512e == False, "Died on +.volumes[130].enable512e"
    assert result.volumes[130].qos.burst_iops == 15000, "Died on +.volumes[130].qos.burst_iops"
    assert result.volumes[130].qos.burst_time == 60, "Died on +.volumes[130].qos.burst_time"
    assert result.volumes[130].qos.min_iops == 100, "Died on +.volumes[130].qos.min_iops"
    assert result.volumes[130].qos.max_iops == 15000, "Died on +.volumes[130].qos.max_iops"
    assert result.volumes[130].name == """snapshots-source-131""", "Died on +.volumes[130].name"
    assert result.volumes[130].volume_access_groups[0] == 4, "Died on +.volumes[130].volume_access_groups[0]"
    assert result.volumes[130].scsi_naadevice_id == """6f47acc1000000006d69643400000277""", "Died on +.volumes[130].scsi_naadevice_id"
    assert result.volumes[130].total_size == 5000658944, "Died on +.volumes[130].total_size"
    assert result.volumes[130].block_size == 4096, "Died on +.volumes[130].block_size"
    assert result.volumes[130].scsi_euidevice_id == """6d69643400000277f47acc0100000000""", "Died on +.volumes[130].scsi_euidevice_id"
    assert result.volumes[130].volume_id == 631, "Died on +.volumes[130].volume_id"
    assert result.volumes[130].access == """readWrite""", "Died on +.volumes[130].access"
    assert result.volumes[130].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-131.631""", "Died on +.volumes[130].iqn"
    assert result.volumes[130].slice_count == 1, "Died on +.volumes[130].slice_count"
    assert type(result.volumes[130].attributes) is dict, "Died on .volumes[130].attributes"
    assert result.volumes[130].volume_pairs[0].volume_pair_uuid == UUID("ed7ae2f6-bf39-4ed1-bc2e-8c16d07dc0ed"), "Died on .volumes[130].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[130].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[130].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[130].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[130].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[130].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[130].volume_pairs[0].remote_replication.state"
    assert result.volumes[130].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[130].volume_pairs[0].remote_replication.mode"
    assert result.volumes[130].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[130].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[130].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[130].volume_pairs[0].cluster_pair_id"
    assert result.volumes[130].volume_pairs[0].remote_volume_id == 1131, "Died on +.volumes[130].volume_pairs[0].remote_volume_id"
    assert result.volumes[130].volume_pairs[0].remote_volume_name == """snap-target-131""", "Died on +.volumes[130].volume_pairs[0].remote_volume_name"
    assert result.volumes[130].volume_pairs[0].remote_slice_id == 1131, "Died on +.volumes[130].volume_pairs[0].remote_slice_id"
    assert result.volumes[130].account_id == 4, "Died on +.volumes[130].account_id"
    assert result.volumes[130].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[130].create_time"
    assert result.volumes[130].virtual_volume_id is None, "Died on .volumes[130].virtual_volume_id"
    assert result.volumes[129].status == """active""", "Died on +.volumes[129].status"
    assert result.volumes[129].enable512e == False, "Died on +.volumes[129].enable512e"
    assert result.volumes[129].qos.burst_iops == 15000, "Died on +.volumes[129].qos.burst_iops"
    assert result.volumes[129].qos.burst_time == 60, "Died on +.volumes[129].qos.burst_time"
    assert result.volumes[129].qos.min_iops == 100, "Died on +.volumes[129].qos.min_iops"
    assert result.volumes[129].qos.max_iops == 15000, "Died on +.volumes[129].qos.max_iops"
    assert result.volumes[129].name == """snapshots-source-130""", "Died on +.volumes[129].name"
    assert result.volumes[129].volume_access_groups[0] == 4, "Died on +.volumes[129].volume_access_groups[0]"
    assert result.volumes[129].scsi_naadevice_id == """6f47acc1000000006d69643400000276""", "Died on +.volumes[129].scsi_naadevice_id"
    assert result.volumes[129].total_size == 5000658944, "Died on +.volumes[129].total_size"
    assert result.volumes[129].block_size == 4096, "Died on +.volumes[129].block_size"
    assert result.volumes[129].scsi_euidevice_id == """6d69643400000276f47acc0100000000""", "Died on +.volumes[129].scsi_euidevice_id"
    assert result.volumes[129].volume_id == 630, "Died on +.volumes[129].volume_id"
    assert result.volumes[129].access == """readWrite""", "Died on +.volumes[129].access"
    assert result.volumes[129].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-130.630""", "Died on +.volumes[129].iqn"
    assert result.volumes[129].slice_count == 1, "Died on +.volumes[129].slice_count"
    assert type(result.volumes[129].attributes) is dict, "Died on .volumes[129].attributes"
    assert result.volumes[129].volume_pairs[0].volume_pair_uuid == UUID("1b710890-faaa-4511-9936-4d0c5005f37d"), "Died on .volumes[129].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[129].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[129].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[129].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[129].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[129].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[129].volume_pairs[0].remote_replication.state"
    assert result.volumes[129].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[129].volume_pairs[0].remote_replication.mode"
    assert result.volumes[129].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[129].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[129].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[129].volume_pairs[0].cluster_pair_id"
    assert result.volumes[129].volume_pairs[0].remote_volume_id == 1130, "Died on +.volumes[129].volume_pairs[0].remote_volume_id"
    assert result.volumes[129].volume_pairs[0].remote_volume_name == """snap-target-130""", "Died on +.volumes[129].volume_pairs[0].remote_volume_name"
    assert result.volumes[129].volume_pairs[0].remote_slice_id == 1130, "Died on +.volumes[129].volume_pairs[0].remote_slice_id"
    assert result.volumes[129].account_id == 4, "Died on +.volumes[129].account_id"
    assert result.volumes[129].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[129].create_time"
    assert result.volumes[129].virtual_volume_id is None, "Died on .volumes[129].virtual_volume_id"
    assert result.volumes[128].status == """active""", "Died on +.volumes[128].status"
    assert result.volumes[128].enable512e == False, "Died on +.volumes[128].enable512e"
    assert result.volumes[128].qos.burst_iops == 15000, "Died on +.volumes[128].qos.burst_iops"
    assert result.volumes[128].qos.burst_time == 60, "Died on +.volumes[128].qos.burst_time"
    assert result.volumes[128].qos.min_iops == 100, "Died on +.volumes[128].qos.min_iops"
    assert result.volumes[128].qos.max_iops == 15000, "Died on +.volumes[128].qos.max_iops"
    assert result.volumes[128].name == """snapshots-source-129""", "Died on +.volumes[128].name"
    assert result.volumes[128].volume_access_groups[0] == 4, "Died on +.volumes[128].volume_access_groups[0]"
    assert result.volumes[128].scsi_naadevice_id == """6f47acc1000000006d69643400000275""", "Died on +.volumes[128].scsi_naadevice_id"
    assert result.volumes[128].total_size == 5000658944, "Died on +.volumes[128].total_size"
    assert result.volumes[128].block_size == 4096, "Died on +.volumes[128].block_size"
    assert result.volumes[128].scsi_euidevice_id == """6d69643400000275f47acc0100000000""", "Died on +.volumes[128].scsi_euidevice_id"
    assert result.volumes[128].volume_id == 629, "Died on +.volumes[128].volume_id"
    assert result.volumes[128].access == """readWrite""", "Died on +.volumes[128].access"
    assert result.volumes[128].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-129.629""", "Died on +.volumes[128].iqn"
    assert result.volumes[128].slice_count == 1, "Died on +.volumes[128].slice_count"
    assert type(result.volumes[128].attributes) is dict, "Died on .volumes[128].attributes"
    assert result.volumes[128].volume_pairs[0].volume_pair_uuid == UUID("9fa6f552-4fd1-4d61-ae60-d8b93155f1c6"), "Died on .volumes[128].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[128].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[128].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[128].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[128].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[128].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[128].volume_pairs[0].remote_replication.state"
    assert result.volumes[128].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[128].volume_pairs[0].remote_replication.mode"
    assert result.volumes[128].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[128].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[128].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[128].volume_pairs[0].cluster_pair_id"
    assert result.volumes[128].volume_pairs[0].remote_volume_id == 1129, "Died on +.volumes[128].volume_pairs[0].remote_volume_id"
    assert result.volumes[128].volume_pairs[0].remote_volume_name == """snap-target-129""", "Died on +.volumes[128].volume_pairs[0].remote_volume_name"
    assert result.volumes[128].volume_pairs[0].remote_slice_id == 1129, "Died on +.volumes[128].volume_pairs[0].remote_slice_id"
    assert result.volumes[128].account_id == 4, "Died on +.volumes[128].account_id"
    assert result.volumes[128].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[128].create_time"
    assert result.volumes[128].virtual_volume_id is None, "Died on .volumes[128].virtual_volume_id"
    assert result.volumes[127].status == """active""", "Died on +.volumes[127].status"
    assert result.volumes[127].enable512e == False, "Died on +.volumes[127].enable512e"
    assert result.volumes[127].qos.burst_iops == 15000, "Died on +.volumes[127].qos.burst_iops"
    assert result.volumes[127].qos.burst_time == 60, "Died on +.volumes[127].qos.burst_time"
    assert result.volumes[127].qos.min_iops == 100, "Died on +.volumes[127].qos.min_iops"
    assert result.volumes[127].qos.max_iops == 15000, "Died on +.volumes[127].qos.max_iops"
    assert result.volumes[127].name == """snapshots-source-128""", "Died on +.volumes[127].name"
    assert result.volumes[127].volume_access_groups[0] == 4, "Died on +.volumes[127].volume_access_groups[0]"
    assert result.volumes[127].scsi_naadevice_id == """6f47acc1000000006d69643400000274""", "Died on +.volumes[127].scsi_naadevice_id"
    assert result.volumes[127].total_size == 5000658944, "Died on +.volumes[127].total_size"
    assert result.volumes[127].block_size == 4096, "Died on +.volumes[127].block_size"
    assert result.volumes[127].scsi_euidevice_id == """6d69643400000274f47acc0100000000""", "Died on +.volumes[127].scsi_euidevice_id"
    assert result.volumes[127].volume_id == 628, "Died on +.volumes[127].volume_id"
    assert result.volumes[127].access == """readWrite""", "Died on +.volumes[127].access"
    assert result.volumes[127].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-128.628""", "Died on +.volumes[127].iqn"
    assert result.volumes[127].slice_count == 1, "Died on +.volumes[127].slice_count"
    assert type(result.volumes[127].attributes) is dict, "Died on .volumes[127].attributes"
    assert result.volumes[127].volume_pairs[0].volume_pair_uuid == UUID("ae7357c0-647b-4a7e-882a-0dba66444201"), "Died on .volumes[127].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[127].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[127].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[127].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[127].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[127].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[127].volume_pairs[0].remote_replication.state"
    assert result.volumes[127].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[127].volume_pairs[0].remote_replication.mode"
    assert result.volumes[127].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[127].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[127].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[127].volume_pairs[0].cluster_pair_id"
    assert result.volumes[127].volume_pairs[0].remote_volume_id == 1128, "Died on +.volumes[127].volume_pairs[0].remote_volume_id"
    assert result.volumes[127].volume_pairs[0].remote_volume_name == """snap-target-128""", "Died on +.volumes[127].volume_pairs[0].remote_volume_name"
    assert result.volumes[127].volume_pairs[0].remote_slice_id == 1128, "Died on +.volumes[127].volume_pairs[0].remote_slice_id"
    assert result.volumes[127].account_id == 4, "Died on +.volumes[127].account_id"
    assert result.volumes[127].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[127].create_time"
    assert result.volumes[127].virtual_volume_id is None, "Died on .volumes[127].virtual_volume_id"
    assert result.volumes[126].status == """active""", "Died on +.volumes[126].status"
    assert result.volumes[126].enable512e == False, "Died on +.volumes[126].enable512e"
    assert result.volumes[126].qos.burst_iops == 15000, "Died on +.volumes[126].qos.burst_iops"
    assert result.volumes[126].qos.burst_time == 60, "Died on +.volumes[126].qos.burst_time"
    assert result.volumes[126].qos.min_iops == 100, "Died on +.volumes[126].qos.min_iops"
    assert result.volumes[126].qos.max_iops == 15000, "Died on +.volumes[126].qos.max_iops"
    assert result.volumes[126].name == """snapshots-source-127""", "Died on +.volumes[126].name"
    assert result.volumes[126].volume_access_groups[0] == 4, "Died on +.volumes[126].volume_access_groups[0]"
    assert result.volumes[126].scsi_naadevice_id == """6f47acc1000000006d69643400000273""", "Died on +.volumes[126].scsi_naadevice_id"
    assert result.volumes[126].total_size == 5000658944, "Died on +.volumes[126].total_size"
    assert result.volumes[126].block_size == 4096, "Died on +.volumes[126].block_size"
    assert result.volumes[126].scsi_euidevice_id == """6d69643400000273f47acc0100000000""", "Died on +.volumes[126].scsi_euidevice_id"
    assert result.volumes[126].volume_id == 627, "Died on +.volumes[126].volume_id"
    assert result.volumes[126].access == """readWrite""", "Died on +.volumes[126].access"
    assert result.volumes[126].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-127.627""", "Died on +.volumes[126].iqn"
    assert result.volumes[126].slice_count == 1, "Died on +.volumes[126].slice_count"
    assert type(result.volumes[126].attributes) is dict, "Died on .volumes[126].attributes"
    assert result.volumes[126].volume_pairs[0].volume_pair_uuid == UUID("d6a4b190-ec48-4bc9-ab1c-36c685a99c95"), "Died on .volumes[126].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[126].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[126].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[126].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[126].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[126].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[126].volume_pairs[0].remote_replication.state"
    assert result.volumes[126].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[126].volume_pairs[0].remote_replication.mode"
    assert result.volumes[126].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[126].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[126].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[126].volume_pairs[0].cluster_pair_id"
    assert result.volumes[126].volume_pairs[0].remote_volume_id == 1127, "Died on +.volumes[126].volume_pairs[0].remote_volume_id"
    assert result.volumes[126].volume_pairs[0].remote_volume_name == """snap-target-127""", "Died on +.volumes[126].volume_pairs[0].remote_volume_name"
    assert result.volumes[126].volume_pairs[0].remote_slice_id == 1127, "Died on +.volumes[126].volume_pairs[0].remote_slice_id"
    assert result.volumes[126].account_id == 4, "Died on +.volumes[126].account_id"
    assert result.volumes[126].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[126].create_time"
    assert result.volumes[126].virtual_volume_id is None, "Died on .volumes[126].virtual_volume_id"
    assert result.volumes[125].status == """active""", "Died on +.volumes[125].status"
    assert result.volumes[125].enable512e == False, "Died on +.volumes[125].enable512e"
    assert result.volumes[125].qos.burst_iops == 15000, "Died on +.volumes[125].qos.burst_iops"
    assert result.volumes[125].qos.burst_time == 60, "Died on +.volumes[125].qos.burst_time"
    assert result.volumes[125].qos.min_iops == 100, "Died on +.volumes[125].qos.min_iops"
    assert result.volumes[125].qos.max_iops == 15000, "Died on +.volumes[125].qos.max_iops"
    assert result.volumes[125].name == """snapshots-source-126""", "Died on +.volumes[125].name"
    assert result.volumes[125].volume_access_groups[0] == 4, "Died on +.volumes[125].volume_access_groups[0]"
    assert result.volumes[125].scsi_naadevice_id == """6f47acc1000000006d69643400000272""", "Died on +.volumes[125].scsi_naadevice_id"
    assert result.volumes[125].total_size == 5000658944, "Died on +.volumes[125].total_size"
    assert result.volumes[125].block_size == 4096, "Died on +.volumes[125].block_size"
    assert result.volumes[125].scsi_euidevice_id == """6d69643400000272f47acc0100000000""", "Died on +.volumes[125].scsi_euidevice_id"
    assert result.volumes[125].volume_id == 626, "Died on +.volumes[125].volume_id"
    assert result.volumes[125].access == """readWrite""", "Died on +.volumes[125].access"
    assert result.volumes[125].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-126.626""", "Died on +.volumes[125].iqn"
    assert result.volumes[125].slice_count == 1, "Died on +.volumes[125].slice_count"
    assert type(result.volumes[125].attributes) is dict, "Died on .volumes[125].attributes"
    assert result.volumes[125].volume_pairs[0].volume_pair_uuid == UUID("41e579fe-862c-4bf3-936b-775c2e7a0ed5"), "Died on .volumes[125].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[125].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[125].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[125].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[125].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[125].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[125].volume_pairs[0].remote_replication.state"
    assert result.volumes[125].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[125].volume_pairs[0].remote_replication.mode"
    assert result.volumes[125].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[125].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[125].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[125].volume_pairs[0].cluster_pair_id"
    assert result.volumes[125].volume_pairs[0].remote_volume_id == 1126, "Died on +.volumes[125].volume_pairs[0].remote_volume_id"
    assert result.volumes[125].volume_pairs[0].remote_volume_name == """snap-target-126""", "Died on +.volumes[125].volume_pairs[0].remote_volume_name"
    assert result.volumes[125].volume_pairs[0].remote_slice_id == 1126, "Died on +.volumes[125].volume_pairs[0].remote_slice_id"
    assert result.volumes[125].account_id == 4, "Died on +.volumes[125].account_id"
    assert result.volumes[125].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[125].create_time"
    assert result.volumes[125].virtual_volume_id is None, "Died on .volumes[125].virtual_volume_id"
    assert result.volumes[124].status == """active""", "Died on +.volumes[124].status"
    assert result.volumes[124].enable512e == False, "Died on +.volumes[124].enable512e"
    assert result.volumes[124].qos.burst_iops == 15000, "Died on +.volumes[124].qos.burst_iops"
    assert result.volumes[124].qos.burst_time == 60, "Died on +.volumes[124].qos.burst_time"
    assert result.volumes[124].qos.min_iops == 100, "Died on +.volumes[124].qos.min_iops"
    assert result.volumes[124].qos.max_iops == 15000, "Died on +.volumes[124].qos.max_iops"
    assert result.volumes[124].name == """snapshots-source-125""", "Died on +.volumes[124].name"
    assert result.volumes[124].volume_access_groups[0] == 4, "Died on +.volumes[124].volume_access_groups[0]"
    assert result.volumes[124].scsi_naadevice_id == """6f47acc1000000006d69643400000271""", "Died on +.volumes[124].scsi_naadevice_id"
    assert result.volumes[124].total_size == 5000658944, "Died on +.volumes[124].total_size"
    assert result.volumes[124].block_size == 4096, "Died on +.volumes[124].block_size"
    assert result.volumes[124].scsi_euidevice_id == """6d69643400000271f47acc0100000000""", "Died on +.volumes[124].scsi_euidevice_id"
    assert result.volumes[124].volume_id == 625, "Died on +.volumes[124].volume_id"
    assert result.volumes[124].access == """readWrite""", "Died on +.volumes[124].access"
    assert result.volumes[124].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-125.625""", "Died on +.volumes[124].iqn"
    assert result.volumes[124].slice_count == 1, "Died on +.volumes[124].slice_count"
    assert type(result.volumes[124].attributes) is dict, "Died on .volumes[124].attributes"
    assert result.volumes[124].volume_pairs[0].volume_pair_uuid == UUID("775b71a9-badd-4e31-92e1-5eadfd27536e"), "Died on .volumes[124].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[124].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[124].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[124].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[124].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[124].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[124].volume_pairs[0].remote_replication.state"
    assert result.volumes[124].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[124].volume_pairs[0].remote_replication.mode"
    assert result.volumes[124].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[124].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[124].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[124].volume_pairs[0].cluster_pair_id"
    assert result.volumes[124].volume_pairs[0].remote_volume_id == 1125, "Died on +.volumes[124].volume_pairs[0].remote_volume_id"
    assert result.volumes[124].volume_pairs[0].remote_volume_name == """snap-target-125""", "Died on +.volumes[124].volume_pairs[0].remote_volume_name"
    assert result.volumes[124].volume_pairs[0].remote_slice_id == 1125, "Died on +.volumes[124].volume_pairs[0].remote_slice_id"
    assert result.volumes[124].account_id == 4, "Died on +.volumes[124].account_id"
    assert result.volumes[124].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[124].create_time"
    assert result.volumes[124].virtual_volume_id is None, "Died on .volumes[124].virtual_volume_id"
    assert result.volumes[123].status == """active""", "Died on +.volumes[123].status"
    assert result.volumes[123].enable512e == False, "Died on +.volumes[123].enable512e"
    assert result.volumes[123].qos.burst_iops == 15000, "Died on +.volumes[123].qos.burst_iops"
    assert result.volumes[123].qos.burst_time == 60, "Died on +.volumes[123].qos.burst_time"
    assert result.volumes[123].qos.min_iops == 100, "Died on +.volumes[123].qos.min_iops"
    assert result.volumes[123].qos.max_iops == 15000, "Died on +.volumes[123].qos.max_iops"
    assert result.volumes[123].name == """snapshots-source-124""", "Died on +.volumes[123].name"
    assert result.volumes[123].volume_access_groups[0] == 4, "Died on +.volumes[123].volume_access_groups[0]"
    assert result.volumes[123].scsi_naadevice_id == """6f47acc1000000006d69643400000270""", "Died on +.volumes[123].scsi_naadevice_id"
    assert result.volumes[123].total_size == 5000658944, "Died on +.volumes[123].total_size"
    assert result.volumes[123].block_size == 4096, "Died on +.volumes[123].block_size"
    assert result.volumes[123].scsi_euidevice_id == """6d69643400000270f47acc0100000000""", "Died on +.volumes[123].scsi_euidevice_id"
    assert result.volumes[123].volume_id == 624, "Died on +.volumes[123].volume_id"
    assert result.volumes[123].access == """readWrite""", "Died on +.volumes[123].access"
    assert result.volumes[123].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-124.624""", "Died on +.volumes[123].iqn"
    assert result.volumes[123].slice_count == 1, "Died on +.volumes[123].slice_count"
    assert type(result.volumes[123].attributes) is dict, "Died on .volumes[123].attributes"
    assert result.volumes[123].volume_pairs[0].volume_pair_uuid == UUID("be578cc8-4fb3-4766-a14f-825267fa21b4"), "Died on .volumes[123].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[123].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[123].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[123].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[123].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[123].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[123].volume_pairs[0].remote_replication.state"
    assert result.volumes[123].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[123].volume_pairs[0].remote_replication.mode"
    assert result.volumes[123].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[123].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[123].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[123].volume_pairs[0].cluster_pair_id"
    assert result.volumes[123].volume_pairs[0].remote_volume_id == 1124, "Died on +.volumes[123].volume_pairs[0].remote_volume_id"
    assert result.volumes[123].volume_pairs[0].remote_volume_name == """snap-target-124""", "Died on +.volumes[123].volume_pairs[0].remote_volume_name"
    assert result.volumes[123].volume_pairs[0].remote_slice_id == 1124, "Died on +.volumes[123].volume_pairs[0].remote_slice_id"
    assert result.volumes[123].account_id == 4, "Died on +.volumes[123].account_id"
    assert result.volumes[123].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[123].create_time"
    assert result.volumes[123].virtual_volume_id is None, "Died on .volumes[123].virtual_volume_id"
    assert result.volumes[122].status == """active""", "Died on +.volumes[122].status"
    assert result.volumes[122].enable512e == False, "Died on +.volumes[122].enable512e"
    assert result.volumes[122].qos.burst_iops == 15000, "Died on +.volumes[122].qos.burst_iops"
    assert result.volumes[122].qos.burst_time == 60, "Died on +.volumes[122].qos.burst_time"
    assert result.volumes[122].qos.min_iops == 100, "Died on +.volumes[122].qos.min_iops"
    assert result.volumes[122].qos.max_iops == 15000, "Died on +.volumes[122].qos.max_iops"
    assert result.volumes[122].name == """snapshots-source-123""", "Died on +.volumes[122].name"
    assert result.volumes[122].volume_access_groups[0] == 4, "Died on +.volumes[122].volume_access_groups[0]"
    assert result.volumes[122].scsi_naadevice_id == """6f47acc1000000006d6964340000026f""", "Died on +.volumes[122].scsi_naadevice_id"
    assert result.volumes[122].total_size == 5000658944, "Died on +.volumes[122].total_size"
    assert result.volumes[122].block_size == 4096, "Died on +.volumes[122].block_size"
    assert result.volumes[122].scsi_euidevice_id == """6d6964340000026ff47acc0100000000""", "Died on +.volumes[122].scsi_euidevice_id"
    assert result.volumes[122].volume_id == 623, "Died on +.volumes[122].volume_id"
    assert result.volumes[122].access == """readWrite""", "Died on +.volumes[122].access"
    assert result.volumes[122].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-123.623""", "Died on +.volumes[122].iqn"
    assert result.volumes[122].slice_count == 1, "Died on +.volumes[122].slice_count"
    assert type(result.volumes[122].attributes) is dict, "Died on .volumes[122].attributes"
    assert result.volumes[122].volume_pairs[0].volume_pair_uuid == UUID("469f0e70-04df-452b-90db-0c2a92a175b9"), "Died on .volumes[122].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[122].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[122].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[122].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[122].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[122].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[122].volume_pairs[0].remote_replication.state"
    assert result.volumes[122].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[122].volume_pairs[0].remote_replication.mode"
    assert result.volumes[122].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[122].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[122].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[122].volume_pairs[0].cluster_pair_id"
    assert result.volumes[122].volume_pairs[0].remote_volume_id == 1123, "Died on +.volumes[122].volume_pairs[0].remote_volume_id"
    assert result.volumes[122].volume_pairs[0].remote_volume_name == """snap-target-123""", "Died on +.volumes[122].volume_pairs[0].remote_volume_name"
    assert result.volumes[122].volume_pairs[0].remote_slice_id == 1123, "Died on +.volumes[122].volume_pairs[0].remote_slice_id"
    assert result.volumes[122].account_id == 4, "Died on +.volumes[122].account_id"
    assert result.volumes[122].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[122].create_time"
    assert result.volumes[122].virtual_volume_id is None, "Died on .volumes[122].virtual_volume_id"
    assert result.volumes[121].status == """active""", "Died on +.volumes[121].status"
    assert result.volumes[121].enable512e == False, "Died on +.volumes[121].enable512e"
    assert result.volumes[121].qos.burst_iops == 15000, "Died on +.volumes[121].qos.burst_iops"
    assert result.volumes[121].qos.burst_time == 60, "Died on +.volumes[121].qos.burst_time"
    assert result.volumes[121].qos.min_iops == 100, "Died on +.volumes[121].qos.min_iops"
    assert result.volumes[121].qos.max_iops == 15000, "Died on +.volumes[121].qos.max_iops"
    assert result.volumes[121].name == """snapshots-source-122""", "Died on +.volumes[121].name"
    assert result.volumes[121].volume_access_groups[0] == 4, "Died on +.volumes[121].volume_access_groups[0]"
    assert result.volumes[121].scsi_naadevice_id == """6f47acc1000000006d6964340000026e""", "Died on +.volumes[121].scsi_naadevice_id"
    assert result.volumes[121].total_size == 5000658944, "Died on +.volumes[121].total_size"
    assert result.volumes[121].block_size == 4096, "Died on +.volumes[121].block_size"
    assert result.volumes[121].scsi_euidevice_id == """6d6964340000026ef47acc0100000000""", "Died on +.volumes[121].scsi_euidevice_id"
    assert result.volumes[121].volume_id == 622, "Died on +.volumes[121].volume_id"
    assert result.volumes[121].access == """readWrite""", "Died on +.volumes[121].access"
    assert result.volumes[121].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-122.622""", "Died on +.volumes[121].iqn"
    assert result.volumes[121].slice_count == 1, "Died on +.volumes[121].slice_count"
    assert type(result.volumes[121].attributes) is dict, "Died on .volumes[121].attributes"
    assert result.volumes[121].volume_pairs[0].volume_pair_uuid == UUID("858ca429-fd78-4c98-8bef-0be5f3738d29"), "Died on .volumes[121].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[121].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[121].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[121].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[121].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[121].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[121].volume_pairs[0].remote_replication.state"
    assert result.volumes[121].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[121].volume_pairs[0].remote_replication.mode"
    assert result.volumes[121].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[121].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[121].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[121].volume_pairs[0].cluster_pair_id"
    assert result.volumes[121].volume_pairs[0].remote_volume_id == 1122, "Died on +.volumes[121].volume_pairs[0].remote_volume_id"
    assert result.volumes[121].volume_pairs[0].remote_volume_name == """snap-target-122""", "Died on +.volumes[121].volume_pairs[0].remote_volume_name"
    assert result.volumes[121].volume_pairs[0].remote_slice_id == 1122, "Died on +.volumes[121].volume_pairs[0].remote_slice_id"
    assert result.volumes[121].account_id == 4, "Died on +.volumes[121].account_id"
    assert result.volumes[121].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[121].create_time"
    assert result.volumes[121].virtual_volume_id is None, "Died on .volumes[121].virtual_volume_id"
    assert result.volumes[120].status == """active""", "Died on +.volumes[120].status"
    assert result.volumes[120].enable512e == False, "Died on +.volumes[120].enable512e"
    assert result.volumes[120].qos.burst_iops == 15000, "Died on +.volumes[120].qos.burst_iops"
    assert result.volumes[120].qos.burst_time == 60, "Died on +.volumes[120].qos.burst_time"
    assert result.volumes[120].qos.min_iops == 100, "Died on +.volumes[120].qos.min_iops"
    assert result.volumes[120].qos.max_iops == 15000, "Died on +.volumes[120].qos.max_iops"
    assert result.volumes[120].name == """snapshots-source-121""", "Died on +.volumes[120].name"
    assert result.volumes[120].volume_access_groups[0] == 4, "Died on +.volumes[120].volume_access_groups[0]"
    assert result.volumes[120].scsi_naadevice_id == """6f47acc1000000006d6964340000026d""", "Died on +.volumes[120].scsi_naadevice_id"
    assert result.volumes[120].total_size == 5000658944, "Died on +.volumes[120].total_size"
    assert result.volumes[120].block_size == 4096, "Died on +.volumes[120].block_size"
    assert result.volumes[120].scsi_euidevice_id == """6d6964340000026df47acc0100000000""", "Died on +.volumes[120].scsi_euidevice_id"
    assert result.volumes[120].volume_id == 621, "Died on +.volumes[120].volume_id"
    assert result.volumes[120].access == """readWrite""", "Died on +.volumes[120].access"
    assert result.volumes[120].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-121.621""", "Died on +.volumes[120].iqn"
    assert result.volumes[120].slice_count == 1, "Died on +.volumes[120].slice_count"
    assert type(result.volumes[120].attributes) is dict, "Died on .volumes[120].attributes"
    assert result.volumes[120].volume_pairs[0].volume_pair_uuid == UUID("ac5e8092-cbfd-4d6f-a008-f646ec064b47"), "Died on .volumes[120].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[120].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[120].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[120].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[120].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[120].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[120].volume_pairs[0].remote_replication.state"
    assert result.volumes[120].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[120].volume_pairs[0].remote_replication.mode"
    assert result.volumes[120].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[120].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[120].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[120].volume_pairs[0].cluster_pair_id"
    assert result.volumes[120].volume_pairs[0].remote_volume_id == 1121, "Died on +.volumes[120].volume_pairs[0].remote_volume_id"
    assert result.volumes[120].volume_pairs[0].remote_volume_name == """snap-target-121""", "Died on +.volumes[120].volume_pairs[0].remote_volume_name"
    assert result.volumes[120].volume_pairs[0].remote_slice_id == 1121, "Died on +.volumes[120].volume_pairs[0].remote_slice_id"
    assert result.volumes[120].account_id == 4, "Died on +.volumes[120].account_id"
    assert result.volumes[120].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[120].create_time"
    assert result.volumes[120].virtual_volume_id is None, "Died on .volumes[120].virtual_volume_id"
    assert result.volumes[119].status == """active""", "Died on +.volumes[119].status"
    assert result.volumes[119].enable512e == False, "Died on +.volumes[119].enable512e"
    assert result.volumes[119].qos.burst_iops == 15000, "Died on +.volumes[119].qos.burst_iops"
    assert result.volumes[119].qos.burst_time == 60, "Died on +.volumes[119].qos.burst_time"
    assert result.volumes[119].qos.min_iops == 100, "Died on +.volumes[119].qos.min_iops"
    assert result.volumes[119].qos.max_iops == 15000, "Died on +.volumes[119].qos.max_iops"
    assert result.volumes[119].name == """snapshots-source-120""", "Died on +.volumes[119].name"
    assert result.volumes[119].volume_access_groups[0] == 4, "Died on +.volumes[119].volume_access_groups[0]"
    assert result.volumes[119].scsi_naadevice_id == """6f47acc1000000006d6964340000026c""", "Died on +.volumes[119].scsi_naadevice_id"
    assert result.volumes[119].total_size == 5000658944, "Died on +.volumes[119].total_size"
    assert result.volumes[119].block_size == 4096, "Died on +.volumes[119].block_size"
    assert result.volumes[119].scsi_euidevice_id == """6d6964340000026cf47acc0100000000""", "Died on +.volumes[119].scsi_euidevice_id"
    assert result.volumes[119].volume_id == 620, "Died on +.volumes[119].volume_id"
    assert result.volumes[119].access == """readWrite""", "Died on +.volumes[119].access"
    assert result.volumes[119].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-120.620""", "Died on +.volumes[119].iqn"
    assert result.volumes[119].slice_count == 1, "Died on +.volumes[119].slice_count"
    assert type(result.volumes[119].attributes) is dict, "Died on .volumes[119].attributes"
    assert result.volumes[119].volume_pairs[0].volume_pair_uuid == UUID("a7094537-21b4-454b-92a5-2596f4f3a66a"), "Died on .volumes[119].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[119].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[119].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[119].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[119].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[119].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[119].volume_pairs[0].remote_replication.state"
    assert result.volumes[119].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[119].volume_pairs[0].remote_replication.mode"
    assert result.volumes[119].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[119].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[119].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[119].volume_pairs[0].cluster_pair_id"
    assert result.volumes[119].volume_pairs[0].remote_volume_id == 1120, "Died on +.volumes[119].volume_pairs[0].remote_volume_id"
    assert result.volumes[119].volume_pairs[0].remote_volume_name == """snap-target-120""", "Died on +.volumes[119].volume_pairs[0].remote_volume_name"
    assert result.volumes[119].volume_pairs[0].remote_slice_id == 1120, "Died on +.volumes[119].volume_pairs[0].remote_slice_id"
    assert result.volumes[119].account_id == 4, "Died on +.volumes[119].account_id"
    assert result.volumes[119].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[119].create_time"
    assert result.volumes[119].virtual_volume_id is None, "Died on .volumes[119].virtual_volume_id"
    assert result.volumes[118].status == """active""", "Died on +.volumes[118].status"
    assert result.volumes[118].enable512e == False, "Died on +.volumes[118].enable512e"
    assert result.volumes[118].qos.burst_iops == 15000, "Died on +.volumes[118].qos.burst_iops"
    assert result.volumes[118].qos.burst_time == 60, "Died on +.volumes[118].qos.burst_time"
    assert result.volumes[118].qos.min_iops == 100, "Died on +.volumes[118].qos.min_iops"
    assert result.volumes[118].qos.max_iops == 15000, "Died on +.volumes[118].qos.max_iops"
    assert result.volumes[118].name == """snapshots-source-119""", "Died on +.volumes[118].name"
    assert result.volumes[118].volume_access_groups[0] == 4, "Died on +.volumes[118].volume_access_groups[0]"
    assert result.volumes[118].scsi_naadevice_id == """6f47acc1000000006d6964340000026b""", "Died on +.volumes[118].scsi_naadevice_id"
    assert result.volumes[118].total_size == 5000658944, "Died on +.volumes[118].total_size"
    assert result.volumes[118].block_size == 4096, "Died on +.volumes[118].block_size"
    assert result.volumes[118].scsi_euidevice_id == """6d6964340000026bf47acc0100000000""", "Died on +.volumes[118].scsi_euidevice_id"
    assert result.volumes[118].volume_id == 619, "Died on +.volumes[118].volume_id"
    assert result.volumes[118].access == """readWrite""", "Died on +.volumes[118].access"
    assert result.volumes[118].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-119.619""", "Died on +.volumes[118].iqn"
    assert result.volumes[118].slice_count == 1, "Died on +.volumes[118].slice_count"
    assert type(result.volumes[118].attributes) is dict, "Died on .volumes[118].attributes"
    assert result.volumes[118].volume_pairs[0].volume_pair_uuid == UUID("47c9d074-ee97-4ebf-b5d1-3746c083550d"), "Died on .volumes[118].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[118].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[118].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[118].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[118].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[118].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[118].volume_pairs[0].remote_replication.state"
    assert result.volumes[118].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[118].volume_pairs[0].remote_replication.mode"
    assert result.volumes[118].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[118].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[118].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[118].volume_pairs[0].cluster_pair_id"
    assert result.volumes[118].volume_pairs[0].remote_volume_id == 1119, "Died on +.volumes[118].volume_pairs[0].remote_volume_id"
    assert result.volumes[118].volume_pairs[0].remote_volume_name == """snap-target-119""", "Died on +.volumes[118].volume_pairs[0].remote_volume_name"
    assert result.volumes[118].volume_pairs[0].remote_slice_id == 1119, "Died on +.volumes[118].volume_pairs[0].remote_slice_id"
    assert result.volumes[118].account_id == 4, "Died on +.volumes[118].account_id"
    assert result.volumes[118].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[118].create_time"
    assert result.volumes[118].virtual_volume_id is None, "Died on .volumes[118].virtual_volume_id"
    assert result.volumes[117].status == """active""", "Died on +.volumes[117].status"
    assert result.volumes[117].enable512e == False, "Died on +.volumes[117].enable512e"
    assert result.volumes[117].qos.burst_iops == 15000, "Died on +.volumes[117].qos.burst_iops"
    assert result.volumes[117].qos.burst_time == 60, "Died on +.volumes[117].qos.burst_time"
    assert result.volumes[117].qos.min_iops == 100, "Died on +.volumes[117].qos.min_iops"
    assert result.volumes[117].qos.max_iops == 15000, "Died on +.volumes[117].qos.max_iops"
    assert result.volumes[117].name == """snapshots-source-118""", "Died on +.volumes[117].name"
    assert result.volumes[117].volume_access_groups[0] == 4, "Died on +.volumes[117].volume_access_groups[0]"
    assert result.volumes[117].scsi_naadevice_id == """6f47acc1000000006d6964340000026a""", "Died on +.volumes[117].scsi_naadevice_id"
    assert result.volumes[117].total_size == 5000658944, "Died on +.volumes[117].total_size"
    assert result.volumes[117].block_size == 4096, "Died on +.volumes[117].block_size"
    assert result.volumes[117].scsi_euidevice_id == """6d6964340000026af47acc0100000000""", "Died on +.volumes[117].scsi_euidevice_id"
    assert result.volumes[117].volume_id == 618, "Died on +.volumes[117].volume_id"
    assert result.volumes[117].access == """readWrite""", "Died on +.volumes[117].access"
    assert result.volumes[117].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-118.618""", "Died on +.volumes[117].iqn"
    assert result.volumes[117].slice_count == 1, "Died on +.volumes[117].slice_count"
    assert type(result.volumes[117].attributes) is dict, "Died on .volumes[117].attributes"
    assert result.volumes[117].volume_pairs[0].volume_pair_uuid == UUID("8e20834f-a305-407b-92ed-da86ab99afb5"), "Died on .volumes[117].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[117].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[117].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[117].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[117].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[117].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[117].volume_pairs[0].remote_replication.state"
    assert result.volumes[117].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[117].volume_pairs[0].remote_replication.mode"
    assert result.volumes[117].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[117].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[117].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[117].volume_pairs[0].cluster_pair_id"
    assert result.volumes[117].volume_pairs[0].remote_volume_id == 1118, "Died on +.volumes[117].volume_pairs[0].remote_volume_id"
    assert result.volumes[117].volume_pairs[0].remote_volume_name == """snap-target-118""", "Died on +.volumes[117].volume_pairs[0].remote_volume_name"
    assert result.volumes[117].volume_pairs[0].remote_slice_id == 1118, "Died on +.volumes[117].volume_pairs[0].remote_slice_id"
    assert result.volumes[117].account_id == 4, "Died on +.volumes[117].account_id"
    assert result.volumes[117].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[117].create_time"
    assert result.volumes[117].virtual_volume_id is None, "Died on .volumes[117].virtual_volume_id"
    assert result.volumes[116].status == """active""", "Died on +.volumes[116].status"
    assert result.volumes[116].enable512e == False, "Died on +.volumes[116].enable512e"
    assert result.volumes[116].qos.burst_iops == 15000, "Died on +.volumes[116].qos.burst_iops"
    assert result.volumes[116].qos.burst_time == 60, "Died on +.volumes[116].qos.burst_time"
    assert result.volumes[116].qos.min_iops == 100, "Died on +.volumes[116].qos.min_iops"
    assert result.volumes[116].qos.max_iops == 15000, "Died on +.volumes[116].qos.max_iops"
    assert result.volumes[116].name == """snapshots-source-117""", "Died on +.volumes[116].name"
    assert result.volumes[116].volume_access_groups[0] == 4, "Died on +.volumes[116].volume_access_groups[0]"
    assert result.volumes[116].scsi_naadevice_id == """6f47acc1000000006d69643400000269""", "Died on +.volumes[116].scsi_naadevice_id"
    assert result.volumes[116].total_size == 5000658944, "Died on +.volumes[116].total_size"
    assert result.volumes[116].block_size == 4096, "Died on +.volumes[116].block_size"
    assert result.volumes[116].scsi_euidevice_id == """6d69643400000269f47acc0100000000""", "Died on +.volumes[116].scsi_euidevice_id"
    assert result.volumes[116].volume_id == 617, "Died on +.volumes[116].volume_id"
    assert result.volumes[116].access == """readWrite""", "Died on +.volumes[116].access"
    assert result.volumes[116].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-117.617""", "Died on +.volumes[116].iqn"
    assert result.volumes[116].slice_count == 1, "Died on +.volumes[116].slice_count"
    assert type(result.volumes[116].attributes) is dict, "Died on .volumes[116].attributes"
    assert result.volumes[116].volume_pairs[0].volume_pair_uuid == UUID("4b9d217d-f20f-4779-8fbc-69b58a38fc91"), "Died on .volumes[116].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[116].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[116].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[116].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[116].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[116].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[116].volume_pairs[0].remote_replication.state"
    assert result.volumes[116].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[116].volume_pairs[0].remote_replication.mode"
    assert result.volumes[116].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[116].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[116].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[116].volume_pairs[0].cluster_pair_id"
    assert result.volumes[116].volume_pairs[0].remote_volume_id == 1117, "Died on +.volumes[116].volume_pairs[0].remote_volume_id"
    assert result.volumes[116].volume_pairs[0].remote_volume_name == """snap-target-117""", "Died on +.volumes[116].volume_pairs[0].remote_volume_name"
    assert result.volumes[116].volume_pairs[0].remote_slice_id == 1117, "Died on +.volumes[116].volume_pairs[0].remote_slice_id"
    assert result.volumes[116].account_id == 4, "Died on +.volumes[116].account_id"
    assert result.volumes[116].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[116].create_time"
    assert result.volumes[116].virtual_volume_id is None, "Died on .volumes[116].virtual_volume_id"
    assert result.volumes[115].status == """active""", "Died on +.volumes[115].status"
    assert result.volumes[115].enable512e == False, "Died on +.volumes[115].enable512e"
    assert result.volumes[115].qos.burst_iops == 15000, "Died on +.volumes[115].qos.burst_iops"
    assert result.volumes[115].qos.burst_time == 60, "Died on +.volumes[115].qos.burst_time"
    assert result.volumes[115].qos.min_iops == 100, "Died on +.volumes[115].qos.min_iops"
    assert result.volumes[115].qos.max_iops == 15000, "Died on +.volumes[115].qos.max_iops"
    assert result.volumes[115].name == """snapshots-source-116""", "Died on +.volumes[115].name"
    assert result.volumes[115].volume_access_groups[0] == 4, "Died on +.volumes[115].volume_access_groups[0]"
    assert result.volumes[115].scsi_naadevice_id == """6f47acc1000000006d69643400000268""", "Died on +.volumes[115].scsi_naadevice_id"
    assert result.volumes[115].total_size == 5000658944, "Died on +.volumes[115].total_size"
    assert result.volumes[115].block_size == 4096, "Died on +.volumes[115].block_size"
    assert result.volumes[115].scsi_euidevice_id == """6d69643400000268f47acc0100000000""", "Died on +.volumes[115].scsi_euidevice_id"
    assert result.volumes[115].volume_id == 616, "Died on +.volumes[115].volume_id"
    assert result.volumes[115].access == """readWrite""", "Died on +.volumes[115].access"
    assert result.volumes[115].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-116.616""", "Died on +.volumes[115].iqn"
    assert result.volumes[115].slice_count == 1, "Died on +.volumes[115].slice_count"
    assert type(result.volumes[115].attributes) is dict, "Died on .volumes[115].attributes"
    assert result.volumes[115].volume_pairs[0].volume_pair_uuid == UUID("3f3d2737-8576-48d6-8312-8a41329f3ac9"), "Died on .volumes[115].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[115].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[115].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[115].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[115].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[115].volume_pairs[0].remote_replication.state == """PausedDisconnected""", "Died on +.volumes[115].volume_pairs[0].remote_replication.state"
    assert result.volumes[115].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[115].volume_pairs[0].remote_replication.mode"
    assert result.volumes[115].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedDisconnected""", "Died on +.volumes[115].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[115].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[115].volume_pairs[0].cluster_pair_id"
    assert result.volumes[115].volume_pairs[0].remote_volume_id == 1116, "Died on +.volumes[115].volume_pairs[0].remote_volume_id"
    assert result.volumes[115].volume_pairs[0].remote_volume_name == """snap-target-116""", "Died on +.volumes[115].volume_pairs[0].remote_volume_name"
    assert result.volumes[115].volume_pairs[0].remote_slice_id == 1116, "Died on +.volumes[115].volume_pairs[0].remote_slice_id"
    assert result.volumes[115].account_id == 4, "Died on +.volumes[115].account_id"
    assert result.volumes[115].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[115].create_time"
    assert result.volumes[115].virtual_volume_id is None, "Died on .volumes[115].virtual_volume_id"
    assert result.volumes[114].status == """active""", "Died on +.volumes[114].status"
    assert result.volumes[114].enable512e == False, "Died on +.volumes[114].enable512e"
    assert result.volumes[114].qos.burst_iops == 15000, "Died on +.volumes[114].qos.burst_iops"
    assert result.volumes[114].qos.burst_time == 60, "Died on +.volumes[114].qos.burst_time"
    assert result.volumes[114].qos.min_iops == 100, "Died on +.volumes[114].qos.min_iops"
    assert result.volumes[114].qos.max_iops == 15000, "Died on +.volumes[114].qos.max_iops"
    assert result.volumes[114].name == """snapshots-source-115""", "Died on +.volumes[114].name"
    assert result.volumes[114].volume_access_groups[0] == 4, "Died on +.volumes[114].volume_access_groups[0]"
    assert result.volumes[114].scsi_naadevice_id == """6f47acc1000000006d69643400000267""", "Died on +.volumes[114].scsi_naadevice_id"
    assert result.volumes[114].total_size == 5000658944, "Died on +.volumes[114].total_size"
    assert result.volumes[114].block_size == 4096, "Died on +.volumes[114].block_size"
    assert result.volumes[114].scsi_euidevice_id == """6d69643400000267f47acc0100000000""", "Died on +.volumes[114].scsi_euidevice_id"
    assert result.volumes[114].volume_id == 615, "Died on +.volumes[114].volume_id"
    assert result.volumes[114].access == """readWrite""", "Died on +.volumes[114].access"
    assert result.volumes[114].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-115.615""", "Died on +.volumes[114].iqn"
    assert result.volumes[114].slice_count == 1, "Died on +.volumes[114].slice_count"
    assert type(result.volumes[114].attributes) is dict, "Died on .volumes[114].attributes"
    assert result.volumes[114].volume_pairs[0].volume_pair_uuid == UUID("1990f3dd-79cb-4058-9ca6-3de33d6c9c96"), "Died on .volumes[114].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[114].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[114].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[114].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[114].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[114].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[114].volume_pairs[0].remote_replication.state"
    assert result.volumes[114].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[114].volume_pairs[0].remote_replication.mode"
    assert result.volumes[114].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[114].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[114].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[114].volume_pairs[0].cluster_pair_id"
    assert result.volumes[114].volume_pairs[0].remote_volume_id == 1115, "Died on +.volumes[114].volume_pairs[0].remote_volume_id"
    assert result.volumes[114].volume_pairs[0].remote_volume_name == """snap-target-115""", "Died on +.volumes[114].volume_pairs[0].remote_volume_name"
    assert result.volumes[114].volume_pairs[0].remote_slice_id == 1115, "Died on +.volumes[114].volume_pairs[0].remote_slice_id"
    assert result.volumes[114].account_id == 4, "Died on +.volumes[114].account_id"
    assert result.volumes[114].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[114].create_time"
    assert result.volumes[114].virtual_volume_id is None, "Died on .volumes[114].virtual_volume_id"
    assert result.volumes[113].status == """active""", "Died on +.volumes[113].status"
    assert result.volumes[113].enable512e == False, "Died on +.volumes[113].enable512e"
    assert result.volumes[113].qos.burst_iops == 15000, "Died on +.volumes[113].qos.burst_iops"
    assert result.volumes[113].qos.burst_time == 60, "Died on +.volumes[113].qos.burst_time"
    assert result.volumes[113].qos.min_iops == 100, "Died on +.volumes[113].qos.min_iops"
    assert result.volumes[113].qos.max_iops == 15000, "Died on +.volumes[113].qos.max_iops"
    assert result.volumes[113].name == """snapshots-source-114""", "Died on +.volumes[113].name"
    assert result.volumes[113].volume_access_groups[0] == 4, "Died on +.volumes[113].volume_access_groups[0]"
    assert result.volumes[113].scsi_naadevice_id == """6f47acc1000000006d69643400000266""", "Died on +.volumes[113].scsi_naadevice_id"
    assert result.volumes[113].total_size == 5000658944, "Died on +.volumes[113].total_size"
    assert result.volumes[113].block_size == 4096, "Died on +.volumes[113].block_size"
    assert result.volumes[113].scsi_euidevice_id == """6d69643400000266f47acc0100000000""", "Died on +.volumes[113].scsi_euidevice_id"
    assert result.volumes[113].volume_id == 614, "Died on +.volumes[113].volume_id"
    assert result.volumes[113].access == """readWrite""", "Died on +.volumes[113].access"
    assert result.volumes[113].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-114.614""", "Died on +.volumes[113].iqn"
    assert result.volumes[113].slice_count == 1, "Died on +.volumes[113].slice_count"
    assert type(result.volumes[113].attributes) is dict, "Died on .volumes[113].attributes"
    assert result.volumes[113].volume_pairs[0].volume_pair_uuid == UUID("a8c2b30b-a838-4435-8e9a-5ca5389255a1"), "Died on .volumes[113].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[113].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[113].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[113].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[113].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[113].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[113].volume_pairs[0].remote_replication.state"
    assert result.volumes[113].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[113].volume_pairs[0].remote_replication.mode"
    assert result.volumes[113].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[113].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[113].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[113].volume_pairs[0].cluster_pair_id"
    assert result.volumes[113].volume_pairs[0].remote_volume_id == 1114, "Died on +.volumes[113].volume_pairs[0].remote_volume_id"
    assert result.volumes[113].volume_pairs[0].remote_volume_name == """snap-target-114""", "Died on +.volumes[113].volume_pairs[0].remote_volume_name"
    assert result.volumes[113].volume_pairs[0].remote_slice_id == 1114, "Died on +.volumes[113].volume_pairs[0].remote_slice_id"
    assert result.volumes[113].account_id == 4, "Died on +.volumes[113].account_id"
    assert result.volumes[113].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[113].create_time"
    assert result.volumes[113].virtual_volume_id is None, "Died on .volumes[113].virtual_volume_id"
    assert result.volumes[112].status == """active""", "Died on +.volumes[112].status"
    assert result.volumes[112].enable512e == False, "Died on +.volumes[112].enable512e"
    assert result.volumes[112].qos.burst_iops == 15000, "Died on +.volumes[112].qos.burst_iops"
    assert result.volumes[112].qos.burst_time == 60, "Died on +.volumes[112].qos.burst_time"
    assert result.volumes[112].qos.min_iops == 100, "Died on +.volumes[112].qos.min_iops"
    assert result.volumes[112].qos.max_iops == 15000, "Died on +.volumes[112].qos.max_iops"
    assert result.volumes[112].name == """snapshots-source-113""", "Died on +.volumes[112].name"
    assert result.volumes[112].volume_access_groups[0] == 4, "Died on +.volumes[112].volume_access_groups[0]"
    assert result.volumes[112].scsi_naadevice_id == """6f47acc1000000006d69643400000265""", "Died on +.volumes[112].scsi_naadevice_id"
    assert result.volumes[112].total_size == 5000658944, "Died on +.volumes[112].total_size"
    assert result.volumes[112].block_size == 4096, "Died on +.volumes[112].block_size"
    assert result.volumes[112].scsi_euidevice_id == """6d69643400000265f47acc0100000000""", "Died on +.volumes[112].scsi_euidevice_id"
    assert result.volumes[112].volume_id == 613, "Died on +.volumes[112].volume_id"
    assert result.volumes[112].access == """readWrite""", "Died on +.volumes[112].access"
    assert result.volumes[112].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-113.613""", "Died on +.volumes[112].iqn"
    assert result.volumes[112].slice_count == 1, "Died on +.volumes[112].slice_count"
    assert type(result.volumes[112].attributes) is dict, "Died on .volumes[112].attributes"
    assert result.volumes[112].volume_pairs[0].volume_pair_uuid == UUID("4d8a596b-07ad-4019-ba1e-5d1ff22e4526"), "Died on .volumes[112].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[112].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[112].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[112].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[112].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[112].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[112].volume_pairs[0].remote_replication.state"
    assert result.volumes[112].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[112].volume_pairs[0].remote_replication.mode"
    assert result.volumes[112].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[112].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[112].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[112].volume_pairs[0].cluster_pair_id"
    assert result.volumes[112].volume_pairs[0].remote_volume_id == 1113, "Died on +.volumes[112].volume_pairs[0].remote_volume_id"
    assert result.volumes[112].volume_pairs[0].remote_volume_name == """snap-target-113""", "Died on +.volumes[112].volume_pairs[0].remote_volume_name"
    assert result.volumes[112].volume_pairs[0].remote_slice_id == 1113, "Died on +.volumes[112].volume_pairs[0].remote_slice_id"
    assert result.volumes[112].account_id == 4, "Died on +.volumes[112].account_id"
    assert result.volumes[112].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[112].create_time"
    assert result.volumes[112].virtual_volume_id is None, "Died on .volumes[112].virtual_volume_id"
    assert result.volumes[111].status == """active""", "Died on +.volumes[111].status"
    assert result.volumes[111].enable512e == False, "Died on +.volumes[111].enable512e"
    assert result.volumes[111].qos.burst_iops == 15000, "Died on +.volumes[111].qos.burst_iops"
    assert result.volumes[111].qos.burst_time == 60, "Died on +.volumes[111].qos.burst_time"
    assert result.volumes[111].qos.min_iops == 100, "Died on +.volumes[111].qos.min_iops"
    assert result.volumes[111].qos.max_iops == 15000, "Died on +.volumes[111].qos.max_iops"
    assert result.volumes[111].name == """snapshots-source-112""", "Died on +.volumes[111].name"
    assert result.volumes[111].volume_access_groups[0] == 4, "Died on +.volumes[111].volume_access_groups[0]"
    assert result.volumes[111].scsi_naadevice_id == """6f47acc1000000006d69643400000264""", "Died on +.volumes[111].scsi_naadevice_id"
    assert result.volumes[111].total_size == 5000658944, "Died on +.volumes[111].total_size"
    assert result.volumes[111].block_size == 4096, "Died on +.volumes[111].block_size"
    assert result.volumes[111].scsi_euidevice_id == """6d69643400000264f47acc0100000000""", "Died on +.volumes[111].scsi_euidevice_id"
    assert result.volumes[111].volume_id == 612, "Died on +.volumes[111].volume_id"
    assert result.volumes[111].access == """readWrite""", "Died on +.volumes[111].access"
    assert result.volumes[111].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-112.612""", "Died on +.volumes[111].iqn"
    assert result.volumes[111].slice_count == 1, "Died on +.volumes[111].slice_count"
    assert type(result.volumes[111].attributes) is dict, "Died on .volumes[111].attributes"
    assert result.volumes[111].volume_pairs[0].volume_pair_uuid == UUID("bab625dd-5c45-476d-8334-3a30392dc1dc"), "Died on .volumes[111].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[111].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[111].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[111].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[111].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[111].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[111].volume_pairs[0].remote_replication.state"
    assert result.volumes[111].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[111].volume_pairs[0].remote_replication.mode"
    assert result.volumes[111].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[111].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[111].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[111].volume_pairs[0].cluster_pair_id"
    assert result.volumes[111].volume_pairs[0].remote_volume_id == 1112, "Died on +.volumes[111].volume_pairs[0].remote_volume_id"
    assert result.volumes[111].volume_pairs[0].remote_volume_name == """snap-target-112""", "Died on +.volumes[111].volume_pairs[0].remote_volume_name"
    assert result.volumes[111].volume_pairs[0].remote_slice_id == 1112, "Died on +.volumes[111].volume_pairs[0].remote_slice_id"
    assert result.volumes[111].account_id == 4, "Died on +.volumes[111].account_id"
    assert result.volumes[111].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[111].create_time"
    assert result.volumes[111].virtual_volume_id is None, "Died on .volumes[111].virtual_volume_id"
    assert result.volumes[110].status == """active""", "Died on +.volumes[110].status"
    assert result.volumes[110].enable512e == False, "Died on +.volumes[110].enable512e"
    assert result.volumes[110].qos.burst_iops == 15000, "Died on +.volumes[110].qos.burst_iops"
    assert result.volumes[110].qos.burst_time == 60, "Died on +.volumes[110].qos.burst_time"
    assert result.volumes[110].qos.min_iops == 100, "Died on +.volumes[110].qos.min_iops"
    assert result.volumes[110].qos.max_iops == 15000, "Died on +.volumes[110].qos.max_iops"
    assert result.volumes[110].name == """snapshots-source-111""", "Died on +.volumes[110].name"
    assert result.volumes[110].volume_access_groups[0] == 4, "Died on +.volumes[110].volume_access_groups[0]"
    assert result.volumes[110].scsi_naadevice_id == """6f47acc1000000006d69643400000263""", "Died on +.volumes[110].scsi_naadevice_id"
    assert result.volumes[110].total_size == 5000658944, "Died on +.volumes[110].total_size"
    assert result.volumes[110].block_size == 4096, "Died on +.volumes[110].block_size"
    assert result.volumes[110].scsi_euidevice_id == """6d69643400000263f47acc0100000000""", "Died on +.volumes[110].scsi_euidevice_id"
    assert result.volumes[110].volume_id == 611, "Died on +.volumes[110].volume_id"
    assert result.volumes[110].access == """readWrite""", "Died on +.volumes[110].access"
    assert result.volumes[110].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-111.611""", "Died on +.volumes[110].iqn"
    assert result.volumes[110].slice_count == 1, "Died on +.volumes[110].slice_count"
    assert type(result.volumes[110].attributes) is dict, "Died on .volumes[110].attributes"
    assert result.volumes[110].volume_pairs[0].volume_pair_uuid == UUID("2d77371f-fd8a-4229-8f81-ec2d0676d32b"), "Died on .volumes[110].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[110].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[110].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[110].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[110].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[110].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[110].volume_pairs[0].remote_replication.state"
    assert result.volumes[110].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[110].volume_pairs[0].remote_replication.mode"
    assert result.volumes[110].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[110].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[110].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[110].volume_pairs[0].cluster_pair_id"
    assert result.volumes[110].volume_pairs[0].remote_volume_id == 1111, "Died on +.volumes[110].volume_pairs[0].remote_volume_id"
    assert result.volumes[110].volume_pairs[0].remote_volume_name == """snap-target-111""", "Died on +.volumes[110].volume_pairs[0].remote_volume_name"
    assert result.volumes[110].volume_pairs[0].remote_slice_id == 1111, "Died on +.volumes[110].volume_pairs[0].remote_slice_id"
    assert result.volumes[110].account_id == 4, "Died on +.volumes[110].account_id"
    assert result.volumes[110].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[110].create_time"
    assert result.volumes[110].virtual_volume_id is None, "Died on .volumes[110].virtual_volume_id"
    assert result.volumes[109].status == """active""", "Died on +.volumes[109].status"
    assert result.volumes[109].enable512e == False, "Died on +.volumes[109].enable512e"
    assert result.volumes[109].qos.burst_iops == 15000, "Died on +.volumes[109].qos.burst_iops"
    assert result.volumes[109].qos.burst_time == 60, "Died on +.volumes[109].qos.burst_time"
    assert result.volumes[109].qos.min_iops == 100, "Died on +.volumes[109].qos.min_iops"
    assert result.volumes[109].qos.max_iops == 15000, "Died on +.volumes[109].qos.max_iops"
    assert result.volumes[109].name == """snapshots-source-110""", "Died on +.volumes[109].name"
    assert result.volumes[109].volume_access_groups[0] == 4, "Died on +.volumes[109].volume_access_groups[0]"
    assert result.volumes[109].scsi_naadevice_id == """6f47acc1000000006d69643400000262""", "Died on +.volumes[109].scsi_naadevice_id"
    assert result.volumes[109].total_size == 5000658944, "Died on +.volumes[109].total_size"
    assert result.volumes[109].block_size == 4096, "Died on +.volumes[109].block_size"
    assert result.volumes[109].scsi_euidevice_id == """6d69643400000262f47acc0100000000""", "Died on +.volumes[109].scsi_euidevice_id"
    assert result.volumes[109].volume_id == 610, "Died on +.volumes[109].volume_id"
    assert result.volumes[109].access == """readWrite""", "Died on +.volumes[109].access"
    assert result.volumes[109].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-110.610""", "Died on +.volumes[109].iqn"
    assert result.volumes[109].slice_count == 1, "Died on +.volumes[109].slice_count"
    assert type(result.volumes[109].attributes) is dict, "Died on .volumes[109].attributes"
    assert result.volumes[109].volume_pairs[0].volume_pair_uuid == UUID("2e1c4231-9c38-424c-b6b3-289278ee7b60"), "Died on .volumes[109].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[109].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[109].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[109].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[109].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[109].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[109].volume_pairs[0].remote_replication.state"
    assert result.volumes[109].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[109].volume_pairs[0].remote_replication.mode"
    assert result.volumes[109].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[109].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[109].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[109].volume_pairs[0].cluster_pair_id"
    assert result.volumes[109].volume_pairs[0].remote_volume_id == 1110, "Died on +.volumes[109].volume_pairs[0].remote_volume_id"
    assert result.volumes[109].volume_pairs[0].remote_volume_name == """snap-target-110""", "Died on +.volumes[109].volume_pairs[0].remote_volume_name"
    assert result.volumes[109].volume_pairs[0].remote_slice_id == 1110, "Died on +.volumes[109].volume_pairs[0].remote_slice_id"
    assert result.volumes[109].account_id == 4, "Died on +.volumes[109].account_id"
    assert result.volumes[109].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[109].create_time"
    assert result.volumes[109].virtual_volume_id is None, "Died on .volumes[109].virtual_volume_id"
    assert result.volumes[108].status == """active""", "Died on +.volumes[108].status"
    assert result.volumes[108].enable512e == False, "Died on +.volumes[108].enable512e"
    assert result.volumes[108].qos.burst_iops == 15000, "Died on +.volumes[108].qos.burst_iops"
    assert result.volumes[108].qos.burst_time == 60, "Died on +.volumes[108].qos.burst_time"
    assert result.volumes[108].qos.min_iops == 100, "Died on +.volumes[108].qos.min_iops"
    assert result.volumes[108].qos.max_iops == 15000, "Died on +.volumes[108].qos.max_iops"
    assert result.volumes[108].name == """snapshots-source-109""", "Died on +.volumes[108].name"
    assert result.volumes[108].volume_access_groups[0] == 4, "Died on +.volumes[108].volume_access_groups[0]"
    assert result.volumes[108].scsi_naadevice_id == """6f47acc1000000006d69643400000261""", "Died on +.volumes[108].scsi_naadevice_id"
    assert result.volumes[108].total_size == 5000658944, "Died on +.volumes[108].total_size"
    assert result.volumes[108].block_size == 4096, "Died on +.volumes[108].block_size"
    assert result.volumes[108].scsi_euidevice_id == """6d69643400000261f47acc0100000000""", "Died on +.volumes[108].scsi_euidevice_id"
    assert result.volumes[108].volume_id == 609, "Died on +.volumes[108].volume_id"
    assert result.volumes[108].access == """readWrite""", "Died on +.volumes[108].access"
    assert result.volumes[108].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-109.609""", "Died on +.volumes[108].iqn"
    assert result.volumes[108].slice_count == 1, "Died on +.volumes[108].slice_count"
    assert type(result.volumes[108].attributes) is dict, "Died on .volumes[108].attributes"
    assert result.volumes[108].volume_pairs[0].volume_pair_uuid == UUID("72e8760c-56fe-47ae-80fa-485697a4b03e"), "Died on .volumes[108].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[108].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[108].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[108].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[108].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[108].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[108].volume_pairs[0].remote_replication.state"
    assert result.volumes[108].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[108].volume_pairs[0].remote_replication.mode"
    assert result.volumes[108].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[108].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[108].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[108].volume_pairs[0].cluster_pair_id"
    assert result.volumes[108].volume_pairs[0].remote_volume_id == 1109, "Died on +.volumes[108].volume_pairs[0].remote_volume_id"
    assert result.volumes[108].volume_pairs[0].remote_volume_name == """snap-target-109""", "Died on +.volumes[108].volume_pairs[0].remote_volume_name"
    assert result.volumes[108].volume_pairs[0].remote_slice_id == 1109, "Died on +.volumes[108].volume_pairs[0].remote_slice_id"
    assert result.volumes[108].account_id == 4, "Died on +.volumes[108].account_id"
    assert result.volumes[108].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[108].create_time"
    assert result.volumes[108].virtual_volume_id is None, "Died on .volumes[108].virtual_volume_id"
    assert result.volumes[107].status == """active""", "Died on +.volumes[107].status"
    assert result.volumes[107].enable512e == False, "Died on +.volumes[107].enable512e"
    assert result.volumes[107].qos.burst_iops == 15000, "Died on +.volumes[107].qos.burst_iops"
    assert result.volumes[107].qos.burst_time == 60, "Died on +.volumes[107].qos.burst_time"
    assert result.volumes[107].qos.min_iops == 100, "Died on +.volumes[107].qos.min_iops"
    assert result.volumes[107].qos.max_iops == 15000, "Died on +.volumes[107].qos.max_iops"
    assert result.volumes[107].name == """snapshots-source-108""", "Died on +.volumes[107].name"
    assert result.volumes[107].volume_access_groups[0] == 4, "Died on +.volumes[107].volume_access_groups[0]"
    assert result.volumes[107].scsi_naadevice_id == """6f47acc1000000006d69643400000260""", "Died on +.volumes[107].scsi_naadevice_id"
    assert result.volumes[107].total_size == 5000658944, "Died on +.volumes[107].total_size"
    assert result.volumes[107].block_size == 4096, "Died on +.volumes[107].block_size"
    assert result.volumes[107].scsi_euidevice_id == """6d69643400000260f47acc0100000000""", "Died on +.volumes[107].scsi_euidevice_id"
    assert result.volumes[107].volume_id == 608, "Died on +.volumes[107].volume_id"
    assert result.volumes[107].access == """readWrite""", "Died on +.volumes[107].access"
    assert result.volumes[107].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-108.608""", "Died on +.volumes[107].iqn"
    assert result.volumes[107].slice_count == 1, "Died on +.volumes[107].slice_count"
    assert type(result.volumes[107].attributes) is dict, "Died on .volumes[107].attributes"
    assert result.volumes[107].volume_pairs[0].volume_pair_uuid == UUID("a46ed6f8-3785-4c26-aae1-20c669db6cc9"), "Died on .volumes[107].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[107].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[107].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[107].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[107].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[107].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[107].volume_pairs[0].remote_replication.state"
    assert result.volumes[107].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[107].volume_pairs[0].remote_replication.mode"
    assert result.volumes[107].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[107].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[107].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[107].volume_pairs[0].cluster_pair_id"
    assert result.volumes[107].volume_pairs[0].remote_volume_id == 1108, "Died on +.volumes[107].volume_pairs[0].remote_volume_id"
    assert result.volumes[107].volume_pairs[0].remote_volume_name == """snap-target-108""", "Died on +.volumes[107].volume_pairs[0].remote_volume_name"
    assert result.volumes[107].volume_pairs[0].remote_slice_id == 1108, "Died on +.volumes[107].volume_pairs[0].remote_slice_id"
    assert result.volumes[107].account_id == 4, "Died on +.volumes[107].account_id"
    assert result.volumes[107].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[107].create_time"
    assert result.volumes[107].virtual_volume_id is None, "Died on .volumes[107].virtual_volume_id"
    assert result.volumes[106].status == """active""", "Died on +.volumes[106].status"
    assert result.volumes[106].enable512e == False, "Died on +.volumes[106].enable512e"
    assert result.volumes[106].qos.burst_iops == 15000, "Died on +.volumes[106].qos.burst_iops"
    assert result.volumes[106].qos.burst_time == 60, "Died on +.volumes[106].qos.burst_time"
    assert result.volumes[106].qos.min_iops == 100, "Died on +.volumes[106].qos.min_iops"
    assert result.volumes[106].qos.max_iops == 15000, "Died on +.volumes[106].qos.max_iops"
    assert result.volumes[106].name == """snapshots-source-107""", "Died on +.volumes[106].name"
    assert result.volumes[106].volume_access_groups[0] == 4, "Died on +.volumes[106].volume_access_groups[0]"
    assert result.volumes[106].scsi_naadevice_id == """6f47acc1000000006d6964340000025f""", "Died on +.volumes[106].scsi_naadevice_id"
    assert result.volumes[106].total_size == 5000658944, "Died on +.volumes[106].total_size"
    assert result.volumes[106].block_size == 4096, "Died on +.volumes[106].block_size"
    assert result.volumes[106].scsi_euidevice_id == """6d6964340000025ff47acc0100000000""", "Died on +.volumes[106].scsi_euidevice_id"
    assert result.volumes[106].volume_id == 607, "Died on +.volumes[106].volume_id"
    assert result.volumes[106].access == """readWrite""", "Died on +.volumes[106].access"
    assert result.volumes[106].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-107.607""", "Died on +.volumes[106].iqn"
    assert result.volumes[106].slice_count == 1, "Died on +.volumes[106].slice_count"
    assert type(result.volumes[106].attributes) is dict, "Died on .volumes[106].attributes"
    assert result.volumes[106].volume_pairs[0].volume_pair_uuid == UUID("bd0f83ce-f1c3-454e-932f-60f829339d6b"), "Died on .volumes[106].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[106].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[106].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[106].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[106].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[106].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[106].volume_pairs[0].remote_replication.state"
    assert result.volumes[106].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[106].volume_pairs[0].remote_replication.mode"
    assert result.volumes[106].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[106].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[106].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[106].volume_pairs[0].cluster_pair_id"
    assert result.volumes[106].volume_pairs[0].remote_volume_id == 1107, "Died on +.volumes[106].volume_pairs[0].remote_volume_id"
    assert result.volumes[106].volume_pairs[0].remote_volume_name == """snap-target-107""", "Died on +.volumes[106].volume_pairs[0].remote_volume_name"
    assert result.volumes[106].volume_pairs[0].remote_slice_id == 1107, "Died on +.volumes[106].volume_pairs[0].remote_slice_id"
    assert result.volumes[106].account_id == 4, "Died on +.volumes[106].account_id"
    assert result.volumes[106].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[106].create_time"
    assert result.volumes[106].virtual_volume_id is None, "Died on .volumes[106].virtual_volume_id"
    assert result.volumes[105].status == """active""", "Died on +.volumes[105].status"
    assert result.volumes[105].enable512e == False, "Died on +.volumes[105].enable512e"
    assert result.volumes[105].qos.burst_iops == 15000, "Died on +.volumes[105].qos.burst_iops"
    assert result.volumes[105].qos.burst_time == 60, "Died on +.volumes[105].qos.burst_time"
    assert result.volumes[105].qos.min_iops == 100, "Died on +.volumes[105].qos.min_iops"
    assert result.volumes[105].qos.max_iops == 15000, "Died on +.volumes[105].qos.max_iops"
    assert result.volumes[105].name == """snapshots-source-106""", "Died on +.volumes[105].name"
    assert result.volumes[105].volume_access_groups[0] == 4, "Died on +.volumes[105].volume_access_groups[0]"
    assert result.volumes[105].scsi_naadevice_id == """6f47acc1000000006d6964340000025e""", "Died on +.volumes[105].scsi_naadevice_id"
    assert result.volumes[105].total_size == 5000658944, "Died on +.volumes[105].total_size"
    assert result.volumes[105].block_size == 4096, "Died on +.volumes[105].block_size"
    assert result.volumes[105].scsi_euidevice_id == """6d6964340000025ef47acc0100000000""", "Died on +.volumes[105].scsi_euidevice_id"
    assert result.volumes[105].volume_id == 606, "Died on +.volumes[105].volume_id"
    assert result.volumes[105].access == """readWrite""", "Died on +.volumes[105].access"
    assert result.volumes[105].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-106.606""", "Died on +.volumes[105].iqn"
    assert result.volumes[105].slice_count == 1, "Died on +.volumes[105].slice_count"
    assert type(result.volumes[105].attributes) is dict, "Died on .volumes[105].attributes"
    assert result.volumes[105].volume_pairs[0].volume_pair_uuid == UUID("f0ba9378-53f7-4fd9-b9bc-d3d2d0a17578"), "Died on .volumes[105].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[105].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[105].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[105].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[105].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[105].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[105].volume_pairs[0].remote_replication.state"
    assert result.volumes[105].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[105].volume_pairs[0].remote_replication.mode"
    assert result.volumes[105].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[105].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[105].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[105].volume_pairs[0].cluster_pair_id"
    assert result.volumes[105].volume_pairs[0].remote_volume_id == 1106, "Died on +.volumes[105].volume_pairs[0].remote_volume_id"
    assert result.volumes[105].volume_pairs[0].remote_volume_name == """snap-target-106""", "Died on +.volumes[105].volume_pairs[0].remote_volume_name"
    assert result.volumes[105].volume_pairs[0].remote_slice_id == 1106, "Died on +.volumes[105].volume_pairs[0].remote_slice_id"
    assert result.volumes[105].account_id == 4, "Died on +.volumes[105].account_id"
    assert result.volumes[105].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[105].create_time"
    assert result.volumes[105].virtual_volume_id is None, "Died on .volumes[105].virtual_volume_id"
    assert result.volumes[104].status == """active""", "Died on +.volumes[104].status"
    assert result.volumes[104].enable512e == False, "Died on +.volumes[104].enable512e"
    assert result.volumes[104].qos.burst_iops == 15000, "Died on +.volumes[104].qos.burst_iops"
    assert result.volumes[104].qos.burst_time == 60, "Died on +.volumes[104].qos.burst_time"
    assert result.volumes[104].qos.min_iops == 100, "Died on +.volumes[104].qos.min_iops"
    assert result.volumes[104].qos.max_iops == 15000, "Died on +.volumes[104].qos.max_iops"
    assert result.volumes[104].name == """snapshots-source-105""", "Died on +.volumes[104].name"
    assert result.volumes[104].volume_access_groups[0] == 4, "Died on +.volumes[104].volume_access_groups[0]"
    assert result.volumes[104].scsi_naadevice_id == """6f47acc1000000006d6964340000025d""", "Died on +.volumes[104].scsi_naadevice_id"
    assert result.volumes[104].total_size == 5000658944, "Died on +.volumes[104].total_size"
    assert result.volumes[104].block_size == 4096, "Died on +.volumes[104].block_size"
    assert result.volumes[104].scsi_euidevice_id == """6d6964340000025df47acc0100000000""", "Died on +.volumes[104].scsi_euidevice_id"
    assert result.volumes[104].volume_id == 605, "Died on +.volumes[104].volume_id"
    assert result.volumes[104].access == """readWrite""", "Died on +.volumes[104].access"
    assert result.volumes[104].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-105.605""", "Died on +.volumes[104].iqn"
    assert result.volumes[104].slice_count == 1, "Died on +.volumes[104].slice_count"
    assert type(result.volumes[104].attributes) is dict, "Died on .volumes[104].attributes"
    assert result.volumes[104].volume_pairs[0].volume_pair_uuid == UUID("d93b7640-e840-4118-8755-f238eca8eab0"), "Died on .volumes[104].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[104].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[104].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[104].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[104].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[104].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[104].volume_pairs[0].remote_replication.state"
    assert result.volumes[104].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[104].volume_pairs[0].remote_replication.mode"
    assert result.volumes[104].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[104].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[104].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[104].volume_pairs[0].cluster_pair_id"
    assert result.volumes[104].volume_pairs[0].remote_volume_id == 1105, "Died on +.volumes[104].volume_pairs[0].remote_volume_id"
    assert result.volumes[104].volume_pairs[0].remote_volume_name == """snap-target-105""", "Died on +.volumes[104].volume_pairs[0].remote_volume_name"
    assert result.volumes[104].volume_pairs[0].remote_slice_id == 1105, "Died on +.volumes[104].volume_pairs[0].remote_slice_id"
    assert result.volumes[104].account_id == 4, "Died on +.volumes[104].account_id"
    assert result.volumes[104].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[104].create_time"
    assert result.volumes[104].virtual_volume_id is None, "Died on .volumes[104].virtual_volume_id"
    assert result.volumes[103].status == """active""", "Died on +.volumes[103].status"
    assert result.volumes[103].enable512e == False, "Died on +.volumes[103].enable512e"
    assert result.volumes[103].qos.burst_iops == 15000, "Died on +.volumes[103].qos.burst_iops"
    assert result.volumes[103].qos.burst_time == 60, "Died on +.volumes[103].qos.burst_time"
    assert result.volumes[103].qos.min_iops == 100, "Died on +.volumes[103].qos.min_iops"
    assert result.volumes[103].qos.max_iops == 15000, "Died on +.volumes[103].qos.max_iops"
    assert result.volumes[103].name == """snapshots-source-104""", "Died on +.volumes[103].name"
    assert result.volumes[103].volume_access_groups[0] == 4, "Died on +.volumes[103].volume_access_groups[0]"
    assert result.volumes[103].scsi_naadevice_id == """6f47acc1000000006d6964340000025c""", "Died on +.volumes[103].scsi_naadevice_id"
    assert result.volumes[103].total_size == 5000658944, "Died on +.volumes[103].total_size"
    assert result.volumes[103].block_size == 4096, "Died on +.volumes[103].block_size"
    assert result.volumes[103].scsi_euidevice_id == """6d6964340000025cf47acc0100000000""", "Died on +.volumes[103].scsi_euidevice_id"
    assert result.volumes[103].volume_id == 604, "Died on +.volumes[103].volume_id"
    assert result.volumes[103].access == """readWrite""", "Died on +.volumes[103].access"
    assert result.volumes[103].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-104.604""", "Died on +.volumes[103].iqn"
    assert result.volumes[103].slice_count == 1, "Died on +.volumes[103].slice_count"
    assert type(result.volumes[103].attributes) is dict, "Died on .volumes[103].attributes"
    assert result.volumes[103].volume_pairs[0].volume_pair_uuid == UUID("21dcb5a2-fc59-4d01-8c95-72f342e1f946"), "Died on .volumes[103].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[103].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[103].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[103].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[103].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[103].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[103].volume_pairs[0].remote_replication.state"
    assert result.volumes[103].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[103].volume_pairs[0].remote_replication.mode"
    assert result.volumes[103].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[103].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[103].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[103].volume_pairs[0].cluster_pair_id"
    assert result.volumes[103].volume_pairs[0].remote_volume_id == 1104, "Died on +.volumes[103].volume_pairs[0].remote_volume_id"
    assert result.volumes[103].volume_pairs[0].remote_volume_name == """snap-target-104""", "Died on +.volumes[103].volume_pairs[0].remote_volume_name"
    assert result.volumes[103].volume_pairs[0].remote_slice_id == 1104, "Died on +.volumes[103].volume_pairs[0].remote_slice_id"
    assert result.volumes[103].account_id == 4, "Died on +.volumes[103].account_id"
    assert result.volumes[103].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[103].create_time"
    assert result.volumes[103].virtual_volume_id is None, "Died on .volumes[103].virtual_volume_id"
    assert result.volumes[102].status == """active""", "Died on +.volumes[102].status"
    assert result.volumes[102].enable512e == False, "Died on +.volumes[102].enable512e"
    assert result.volumes[102].qos.burst_iops == 15000, "Died on +.volumes[102].qos.burst_iops"
    assert result.volumes[102].qos.burst_time == 60, "Died on +.volumes[102].qos.burst_time"
    assert result.volumes[102].qos.min_iops == 100, "Died on +.volumes[102].qos.min_iops"
    assert result.volumes[102].qos.max_iops == 15000, "Died on +.volumes[102].qos.max_iops"
    assert result.volumes[102].name == """snapshots-source-103""", "Died on +.volumes[102].name"
    assert result.volumes[102].volume_access_groups[0] == 4, "Died on +.volumes[102].volume_access_groups[0]"
    assert result.volumes[102].scsi_naadevice_id == """6f47acc1000000006d6964340000025b""", "Died on +.volumes[102].scsi_naadevice_id"
    assert result.volumes[102].total_size == 5000658944, "Died on +.volumes[102].total_size"
    assert result.volumes[102].block_size == 4096, "Died on +.volumes[102].block_size"
    assert result.volumes[102].scsi_euidevice_id == """6d6964340000025bf47acc0100000000""", "Died on +.volumes[102].scsi_euidevice_id"
    assert result.volumes[102].volume_id == 603, "Died on +.volumes[102].volume_id"
    assert result.volumes[102].access == """readWrite""", "Died on +.volumes[102].access"
    assert result.volumes[102].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-103.603""", "Died on +.volumes[102].iqn"
    assert result.volumes[102].slice_count == 1, "Died on +.volumes[102].slice_count"
    assert type(result.volumes[102].attributes) is dict, "Died on .volumes[102].attributes"
    assert result.volumes[102].volume_pairs[0].volume_pair_uuid == UUID("ec68131b-5eeb-41b7-b59a-3ae1ad247474"), "Died on .volumes[102].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[102].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[102].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[102].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[102].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[102].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[102].volume_pairs[0].remote_replication.state"
    assert result.volumes[102].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[102].volume_pairs[0].remote_replication.mode"
    assert result.volumes[102].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[102].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[102].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[102].volume_pairs[0].cluster_pair_id"
    assert result.volumes[102].volume_pairs[0].remote_volume_id == 1103, "Died on +.volumes[102].volume_pairs[0].remote_volume_id"
    assert result.volumes[102].volume_pairs[0].remote_volume_name == """snap-target-103""", "Died on +.volumes[102].volume_pairs[0].remote_volume_name"
    assert result.volumes[102].volume_pairs[0].remote_slice_id == 1103, "Died on +.volumes[102].volume_pairs[0].remote_slice_id"
    assert result.volumes[102].account_id == 4, "Died on +.volumes[102].account_id"
    assert result.volumes[102].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[102].create_time"
    assert result.volumes[102].virtual_volume_id is None, "Died on .volumes[102].virtual_volume_id"
    assert result.volumes[101].status == """active""", "Died on +.volumes[101].status"
    assert result.volumes[101].enable512e == False, "Died on +.volumes[101].enable512e"
    assert result.volumes[101].qos.burst_iops == 15000, "Died on +.volumes[101].qos.burst_iops"
    assert result.volumes[101].qos.burst_time == 60, "Died on +.volumes[101].qos.burst_time"
    assert result.volumes[101].qos.min_iops == 100, "Died on +.volumes[101].qos.min_iops"
    assert result.volumes[101].qos.max_iops == 15000, "Died on +.volumes[101].qos.max_iops"
    assert result.volumes[101].name == """snapshots-source-102""", "Died on +.volumes[101].name"
    assert result.volumes[101].volume_access_groups[0] == 4, "Died on +.volumes[101].volume_access_groups[0]"
    assert result.volumes[101].scsi_naadevice_id == """6f47acc1000000006d6964340000025a""", "Died on +.volumes[101].scsi_naadevice_id"
    assert result.volumes[101].total_size == 5000658944, "Died on +.volumes[101].total_size"
    assert result.volumes[101].block_size == 4096, "Died on +.volumes[101].block_size"
    assert result.volumes[101].scsi_euidevice_id == """6d6964340000025af47acc0100000000""", "Died on +.volumes[101].scsi_euidevice_id"
    assert result.volumes[101].volume_id == 602, "Died on +.volumes[101].volume_id"
    assert result.volumes[101].access == """readWrite""", "Died on +.volumes[101].access"
    assert result.volumes[101].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-102.602""", "Died on +.volumes[101].iqn"
    assert result.volumes[101].slice_count == 1, "Died on +.volumes[101].slice_count"
    assert type(result.volumes[101].attributes) is dict, "Died on .volumes[101].attributes"
    assert result.volumes[101].volume_pairs[0].volume_pair_uuid == UUID("5d8c60d9-7e74-4853-b39b-3fa770491dbb"), "Died on .volumes[101].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[101].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[101].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[101].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[101].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[101].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[101].volume_pairs[0].remote_replication.state"
    assert result.volumes[101].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[101].volume_pairs[0].remote_replication.mode"
    assert result.volumes[101].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[101].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[101].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[101].volume_pairs[0].cluster_pair_id"
    assert result.volumes[101].volume_pairs[0].remote_volume_id == 1102, "Died on +.volumes[101].volume_pairs[0].remote_volume_id"
    assert result.volumes[101].volume_pairs[0].remote_volume_name == """snap-target-102""", "Died on +.volumes[101].volume_pairs[0].remote_volume_name"
    assert result.volumes[101].volume_pairs[0].remote_slice_id == 1102, "Died on +.volumes[101].volume_pairs[0].remote_slice_id"
    assert result.volumes[101].account_id == 4, "Died on +.volumes[101].account_id"
    assert result.volumes[101].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[101].create_time"
    assert result.volumes[101].virtual_volume_id is None, "Died on .volumes[101].virtual_volume_id"
    assert result.volumes[100].status == """active""", "Died on +.volumes[100].status"
    assert result.volumes[100].enable512e == False, "Died on +.volumes[100].enable512e"
    assert result.volumes[100].qos.burst_iops == 15000, "Died on +.volumes[100].qos.burst_iops"
    assert result.volumes[100].qos.burst_time == 60, "Died on +.volumes[100].qos.burst_time"
    assert result.volumes[100].qos.min_iops == 100, "Died on +.volumes[100].qos.min_iops"
    assert result.volumes[100].qos.max_iops == 15000, "Died on +.volumes[100].qos.max_iops"
    assert result.volumes[100].name == """snapshots-source-101""", "Died on +.volumes[100].name"
    assert result.volumes[100].volume_access_groups[0] == 4, "Died on +.volumes[100].volume_access_groups[0]"
    assert result.volumes[100].scsi_naadevice_id == """6f47acc1000000006d69643400000259""", "Died on +.volumes[100].scsi_naadevice_id"
    assert result.volumes[100].total_size == 5000658944, "Died on +.volumes[100].total_size"
    assert result.volumes[100].block_size == 4096, "Died on +.volumes[100].block_size"
    assert result.volumes[100].scsi_euidevice_id == """6d69643400000259f47acc0100000000""", "Died on +.volumes[100].scsi_euidevice_id"
    assert result.volumes[100].volume_id == 601, "Died on +.volumes[100].volume_id"
    assert result.volumes[100].access == """readWrite""", "Died on +.volumes[100].access"
    assert result.volumes[100].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-101.601""", "Died on +.volumes[100].iqn"
    assert result.volumes[100].slice_count == 1, "Died on +.volumes[100].slice_count"
    assert type(result.volumes[100].attributes) is dict, "Died on .volumes[100].attributes"
    assert result.volumes[100].volume_pairs[0].volume_pair_uuid == UUID("8c91b01b-976a-49db-9d48-ec1553391708"), "Died on .volumes[100].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[100].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[100].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[100].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[100].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[100].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[100].volume_pairs[0].remote_replication.state"
    assert result.volumes[100].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[100].volume_pairs[0].remote_replication.mode"
    assert result.volumes[100].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[100].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[100].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[100].volume_pairs[0].cluster_pair_id"
    assert result.volumes[100].volume_pairs[0].remote_volume_id == 1101, "Died on +.volumes[100].volume_pairs[0].remote_volume_id"
    assert result.volumes[100].volume_pairs[0].remote_volume_name == """snap-target-101""", "Died on +.volumes[100].volume_pairs[0].remote_volume_name"
    assert result.volumes[100].volume_pairs[0].remote_slice_id == 1101, "Died on +.volumes[100].volume_pairs[0].remote_slice_id"
    assert result.volumes[100].account_id == 4, "Died on +.volumes[100].account_id"
    assert result.volumes[100].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[100].create_time"
    assert result.volumes[100].virtual_volume_id is None, "Died on .volumes[100].virtual_volume_id"
    assert result.volumes[99].status == """active""", "Died on +.volumes[99].status"
    assert result.volumes[99].enable512e == False, "Died on +.volumes[99].enable512e"
    assert result.volumes[99].qos.burst_iops == 15000, "Died on +.volumes[99].qos.burst_iops"
    assert result.volumes[99].qos.burst_time == 60, "Died on +.volumes[99].qos.burst_time"
    assert result.volumes[99].qos.min_iops == 100, "Died on +.volumes[99].qos.min_iops"
    assert result.volumes[99].qos.max_iops == 15000, "Died on +.volumes[99].qos.max_iops"
    assert result.volumes[99].name == """snapshots-source-100""", "Died on +.volumes[99].name"
    assert result.volumes[99].volume_access_groups[0] == 4, "Died on +.volumes[99].volume_access_groups[0]"
    assert result.volumes[99].scsi_naadevice_id == """6f47acc1000000006d69643400000258""", "Died on +.volumes[99].scsi_naadevice_id"
    assert result.volumes[99].total_size == 5000658944, "Died on +.volumes[99].total_size"
    assert result.volumes[99].block_size == 4096, "Died on +.volumes[99].block_size"
    assert result.volumes[99].scsi_euidevice_id == """6d69643400000258f47acc0100000000""", "Died on +.volumes[99].scsi_euidevice_id"
    assert result.volumes[99].volume_id == 600, "Died on +.volumes[99].volume_id"
    assert result.volumes[99].access == """readWrite""", "Died on +.volumes[99].access"
    assert result.volumes[99].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-100.600""", "Died on +.volumes[99].iqn"
    assert result.volumes[99].slice_count == 1, "Died on +.volumes[99].slice_count"
    assert type(result.volumes[99].attributes) is dict, "Died on .volumes[99].attributes"
    assert result.volumes[99].volume_pairs[0].volume_pair_uuid == UUID("8b60b1ed-1198-4535-9d5f-d5db03a09aa5"), "Died on .volumes[99].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[99].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[99].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[99].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[99].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[99].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[99].volume_pairs[0].remote_replication.state"
    assert result.volumes[99].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[99].volume_pairs[0].remote_replication.mode"
    assert result.volumes[99].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[99].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[99].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[99].volume_pairs[0].cluster_pair_id"
    assert result.volumes[99].volume_pairs[0].remote_volume_id == 1100, "Died on +.volumes[99].volume_pairs[0].remote_volume_id"
    assert result.volumes[99].volume_pairs[0].remote_volume_name == """snap-target-100""", "Died on +.volumes[99].volume_pairs[0].remote_volume_name"
    assert result.volumes[99].volume_pairs[0].remote_slice_id == 1100, "Died on +.volumes[99].volume_pairs[0].remote_slice_id"
    assert result.volumes[99].account_id == 4, "Died on +.volumes[99].account_id"
    assert result.volumes[99].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[99].create_time"
    assert result.volumes[99].virtual_volume_id is None, "Died on .volumes[99].virtual_volume_id"
    assert result.volumes[98].status == """active""", "Died on +.volumes[98].status"
    assert result.volumes[98].enable512e == False, "Died on +.volumes[98].enable512e"
    assert result.volumes[98].qos.burst_iops == 15000, "Died on +.volumes[98].qos.burst_iops"
    assert result.volumes[98].qos.burst_time == 60, "Died on +.volumes[98].qos.burst_time"
    assert result.volumes[98].qos.min_iops == 100, "Died on +.volumes[98].qos.min_iops"
    assert result.volumes[98].qos.max_iops == 15000, "Died on +.volumes[98].qos.max_iops"
    assert result.volumes[98].name == """snapshots-source-99""", "Died on +.volumes[98].name"
    assert result.volumes[98].volume_access_groups[0] == 4, "Died on +.volumes[98].volume_access_groups[0]"
    assert result.volumes[98].scsi_naadevice_id == """6f47acc1000000006d69643400000257""", "Died on +.volumes[98].scsi_naadevice_id"
    assert result.volumes[98].total_size == 5000658944, "Died on +.volumes[98].total_size"
    assert result.volumes[98].block_size == 4096, "Died on +.volumes[98].block_size"
    assert result.volumes[98].scsi_euidevice_id == """6d69643400000257f47acc0100000000""", "Died on +.volumes[98].scsi_euidevice_id"
    assert result.volumes[98].volume_id == 599, "Died on +.volumes[98].volume_id"
    assert result.volumes[98].access == """readWrite""", "Died on +.volumes[98].access"
    assert result.volumes[98].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-99.599""", "Died on +.volumes[98].iqn"
    assert result.volumes[98].slice_count == 1, "Died on +.volumes[98].slice_count"
    assert type(result.volumes[98].attributes) is dict, "Died on .volumes[98].attributes"
    assert result.volumes[98].volume_pairs[0].volume_pair_uuid == UUID("c38be23f-41ee-4dd8-aa43-4e4a16634990"), "Died on .volumes[98].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[98].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[98].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[98].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[98].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[98].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[98].volume_pairs[0].remote_replication.state"
    assert result.volumes[98].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[98].volume_pairs[0].remote_replication.mode"
    assert result.volumes[98].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[98].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[98].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[98].volume_pairs[0].cluster_pair_id"
    assert result.volumes[98].volume_pairs[0].remote_volume_id == 1099, "Died on +.volumes[98].volume_pairs[0].remote_volume_id"
    assert result.volumes[98].volume_pairs[0].remote_volume_name == """snap-target-99""", "Died on +.volumes[98].volume_pairs[0].remote_volume_name"
    assert result.volumes[98].volume_pairs[0].remote_slice_id == 1099, "Died on +.volumes[98].volume_pairs[0].remote_slice_id"
    assert result.volumes[98].account_id == 4, "Died on +.volumes[98].account_id"
    assert result.volumes[98].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[98].create_time"
    assert result.volumes[98].virtual_volume_id is None, "Died on .volumes[98].virtual_volume_id"
    assert result.volumes[97].status == """active""", "Died on +.volumes[97].status"
    assert result.volumes[97].enable512e == False, "Died on +.volumes[97].enable512e"
    assert result.volumes[97].qos.burst_iops == 15000, "Died on +.volumes[97].qos.burst_iops"
    assert result.volumes[97].qos.burst_time == 60, "Died on +.volumes[97].qos.burst_time"
    assert result.volumes[97].qos.min_iops == 100, "Died on +.volumes[97].qos.min_iops"
    assert result.volumes[97].qos.max_iops == 15000, "Died on +.volumes[97].qos.max_iops"
    assert result.volumes[97].name == """snapshots-source-98""", "Died on +.volumes[97].name"
    assert result.volumes[97].volume_access_groups[0] == 4, "Died on +.volumes[97].volume_access_groups[0]"
    assert result.volumes[97].scsi_naadevice_id == """6f47acc1000000006d69643400000256""", "Died on +.volumes[97].scsi_naadevice_id"
    assert result.volumes[97].total_size == 5000658944, "Died on +.volumes[97].total_size"
    assert result.volumes[97].block_size == 4096, "Died on +.volumes[97].block_size"
    assert result.volumes[97].scsi_euidevice_id == """6d69643400000256f47acc0100000000""", "Died on +.volumes[97].scsi_euidevice_id"
    assert result.volumes[97].volume_id == 598, "Died on +.volumes[97].volume_id"
    assert result.volumes[97].access == """readWrite""", "Died on +.volumes[97].access"
    assert result.volumes[97].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-98.598""", "Died on +.volumes[97].iqn"
    assert result.volumes[97].slice_count == 1, "Died on +.volumes[97].slice_count"
    assert type(result.volumes[97].attributes) is dict, "Died on .volumes[97].attributes"
    assert result.volumes[97].volume_pairs[0].volume_pair_uuid == UUID("60aba093-1c94-4a13-9cef-b90fd6b52327"), "Died on .volumes[97].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[97].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[97].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[97].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[97].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[97].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[97].volume_pairs[0].remote_replication.state"
    assert result.volumes[97].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[97].volume_pairs[0].remote_replication.mode"
    assert result.volumes[97].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[97].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[97].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[97].volume_pairs[0].cluster_pair_id"
    assert result.volumes[97].volume_pairs[0].remote_volume_id == 1098, "Died on +.volumes[97].volume_pairs[0].remote_volume_id"
    assert result.volumes[97].volume_pairs[0].remote_volume_name == """snap-target-98""", "Died on +.volumes[97].volume_pairs[0].remote_volume_name"
    assert result.volumes[97].volume_pairs[0].remote_slice_id == 1098, "Died on +.volumes[97].volume_pairs[0].remote_slice_id"
    assert result.volumes[97].account_id == 4, "Died on +.volumes[97].account_id"
    assert result.volumes[97].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[97].create_time"
    assert result.volumes[97].virtual_volume_id is None, "Died on .volumes[97].virtual_volume_id"
    assert result.volumes[96].status == """active""", "Died on +.volumes[96].status"
    assert result.volumes[96].enable512e == False, "Died on +.volumes[96].enable512e"
    assert result.volumes[96].qos.burst_iops == 15000, "Died on +.volumes[96].qos.burst_iops"
    assert result.volumes[96].qos.burst_time == 60, "Died on +.volumes[96].qos.burst_time"
    assert result.volumes[96].qos.min_iops == 100, "Died on +.volumes[96].qos.min_iops"
    assert result.volumes[96].qos.max_iops == 15000, "Died on +.volumes[96].qos.max_iops"
    assert result.volumes[96].name == """snapshots-source-97""", "Died on +.volumes[96].name"
    assert result.volumes[96].volume_access_groups[0] == 4, "Died on +.volumes[96].volume_access_groups[0]"
    assert result.volumes[96].scsi_naadevice_id == """6f47acc1000000006d69643400000255""", "Died on +.volumes[96].scsi_naadevice_id"
    assert result.volumes[96].total_size == 5000658944, "Died on +.volumes[96].total_size"
    assert result.volumes[96].block_size == 4096, "Died on +.volumes[96].block_size"
    assert result.volumes[96].scsi_euidevice_id == """6d69643400000255f47acc0100000000""", "Died on +.volumes[96].scsi_euidevice_id"
    assert result.volumes[96].volume_id == 597, "Died on +.volumes[96].volume_id"
    assert result.volumes[96].access == """readWrite""", "Died on +.volumes[96].access"
    assert result.volumes[96].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-97.597""", "Died on +.volumes[96].iqn"
    assert result.volumes[96].slice_count == 1, "Died on +.volumes[96].slice_count"
    assert type(result.volumes[96].attributes) is dict, "Died on .volumes[96].attributes"
    assert result.volumes[96].volume_pairs[0].volume_pair_uuid == UUID("8b280f7e-86d1-43c0-8126-b42cb04303d8"), "Died on .volumes[96].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[96].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[96].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[96].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[96].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[96].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[96].volume_pairs[0].remote_replication.state"
    assert result.volumes[96].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[96].volume_pairs[0].remote_replication.mode"
    assert result.volumes[96].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[96].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[96].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[96].volume_pairs[0].cluster_pair_id"
    assert result.volumes[96].volume_pairs[0].remote_volume_id == 1097, "Died on +.volumes[96].volume_pairs[0].remote_volume_id"
    assert result.volumes[96].volume_pairs[0].remote_volume_name == """snap-target-97""", "Died on +.volumes[96].volume_pairs[0].remote_volume_name"
    assert result.volumes[96].volume_pairs[0].remote_slice_id == 1097, "Died on +.volumes[96].volume_pairs[0].remote_slice_id"
    assert result.volumes[96].account_id == 4, "Died on +.volumes[96].account_id"
    assert result.volumes[96].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[96].create_time"
    assert result.volumes[96].virtual_volume_id is None, "Died on .volumes[96].virtual_volume_id"
    assert result.volumes[95].status == """active""", "Died on +.volumes[95].status"
    assert result.volumes[95].enable512e == False, "Died on +.volumes[95].enable512e"
    assert result.volumes[95].qos.burst_iops == 15000, "Died on +.volumes[95].qos.burst_iops"
    assert result.volumes[95].qos.burst_time == 60, "Died on +.volumes[95].qos.burst_time"
    assert result.volumes[95].qos.min_iops == 100, "Died on +.volumes[95].qos.min_iops"
    assert result.volumes[95].qos.max_iops == 15000, "Died on +.volumes[95].qos.max_iops"
    assert result.volumes[95].name == """snapshots-source-96""", "Died on +.volumes[95].name"
    assert result.volumes[95].volume_access_groups[0] == 4, "Died on +.volumes[95].volume_access_groups[0]"
    assert result.volumes[95].scsi_naadevice_id == """6f47acc1000000006d69643400000254""", "Died on +.volumes[95].scsi_naadevice_id"
    assert result.volumes[95].total_size == 5000658944, "Died on +.volumes[95].total_size"
    assert result.volumes[95].block_size == 4096, "Died on +.volumes[95].block_size"
    assert result.volumes[95].scsi_euidevice_id == """6d69643400000254f47acc0100000000""", "Died on +.volumes[95].scsi_euidevice_id"
    assert result.volumes[95].volume_id == 596, "Died on +.volumes[95].volume_id"
    assert result.volumes[95].access == """readWrite""", "Died on +.volumes[95].access"
    assert result.volumes[95].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-96.596""", "Died on +.volumes[95].iqn"
    assert result.volumes[95].slice_count == 1, "Died on +.volumes[95].slice_count"
    assert type(result.volumes[95].attributes) is dict, "Died on .volumes[95].attributes"
    assert result.volumes[95].volume_pairs[0].volume_pair_uuid == UUID("32aeb9b9-b531-45e4-8d7e-6e845c7799bf"), "Died on .volumes[95].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[95].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[95].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[95].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[95].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[95].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[95].volume_pairs[0].remote_replication.state"
    assert result.volumes[95].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[95].volume_pairs[0].remote_replication.mode"
    assert result.volumes[95].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[95].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[95].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[95].volume_pairs[0].cluster_pair_id"
    assert result.volumes[95].volume_pairs[0].remote_volume_id == 1096, "Died on +.volumes[95].volume_pairs[0].remote_volume_id"
    assert result.volumes[95].volume_pairs[0].remote_volume_name == """snap-target-96""", "Died on +.volumes[95].volume_pairs[0].remote_volume_name"
    assert result.volumes[95].volume_pairs[0].remote_slice_id == 1096, "Died on +.volumes[95].volume_pairs[0].remote_slice_id"
    assert result.volumes[95].account_id == 4, "Died on +.volumes[95].account_id"
    assert result.volumes[95].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[95].create_time"
    assert result.volumes[95].virtual_volume_id is None, "Died on .volumes[95].virtual_volume_id"
    assert result.volumes[94].status == """active""", "Died on +.volumes[94].status"
    assert result.volumes[94].enable512e == False, "Died on +.volumes[94].enable512e"
    assert result.volumes[94].qos.burst_iops == 15000, "Died on +.volumes[94].qos.burst_iops"
    assert result.volumes[94].qos.burst_time == 60, "Died on +.volumes[94].qos.burst_time"
    assert result.volumes[94].qos.min_iops == 100, "Died on +.volumes[94].qos.min_iops"
    assert result.volumes[94].qos.max_iops == 15000, "Died on +.volumes[94].qos.max_iops"
    assert result.volumes[94].name == """snapshots-source-95""", "Died on +.volumes[94].name"
    assert result.volumes[94].volume_access_groups[0] == 4, "Died on +.volumes[94].volume_access_groups[0]"
    assert result.volumes[94].scsi_naadevice_id == """6f47acc1000000006d69643400000253""", "Died on +.volumes[94].scsi_naadevice_id"
    assert result.volumes[94].total_size == 5000658944, "Died on +.volumes[94].total_size"
    assert result.volumes[94].block_size == 4096, "Died on +.volumes[94].block_size"
    assert result.volumes[94].scsi_euidevice_id == """6d69643400000253f47acc0100000000""", "Died on +.volumes[94].scsi_euidevice_id"
    assert result.volumes[94].volume_id == 595, "Died on +.volumes[94].volume_id"
    assert result.volumes[94].access == """readWrite""", "Died on +.volumes[94].access"
    assert result.volumes[94].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-95.595""", "Died on +.volumes[94].iqn"
    assert result.volumes[94].slice_count == 1, "Died on +.volumes[94].slice_count"
    assert type(result.volumes[94].attributes) is dict, "Died on .volumes[94].attributes"
    assert result.volumes[94].volume_pairs[0].volume_pair_uuid == UUID("11cd1818-a0cc-4ecd-8072-db6c9a2d08c8"), "Died on .volumes[94].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[94].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[94].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[94].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[94].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[94].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[94].volume_pairs[0].remote_replication.state"
    assert result.volumes[94].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[94].volume_pairs[0].remote_replication.mode"
    assert result.volumes[94].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[94].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[94].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[94].volume_pairs[0].cluster_pair_id"
    assert result.volumes[94].volume_pairs[0].remote_volume_id == 1095, "Died on +.volumes[94].volume_pairs[0].remote_volume_id"
    assert result.volumes[94].volume_pairs[0].remote_volume_name == """snap-target-95""", "Died on +.volumes[94].volume_pairs[0].remote_volume_name"
    assert result.volumes[94].volume_pairs[0].remote_slice_id == 1095, "Died on +.volumes[94].volume_pairs[0].remote_slice_id"
    assert result.volumes[94].account_id == 4, "Died on +.volumes[94].account_id"
    assert result.volumes[94].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[94].create_time"
    assert result.volumes[94].virtual_volume_id is None, "Died on .volumes[94].virtual_volume_id"
    assert result.volumes[93].status == """active""", "Died on +.volumes[93].status"
    assert result.volumes[93].enable512e == False, "Died on +.volumes[93].enable512e"
    assert result.volumes[93].qos.burst_iops == 15000, "Died on +.volumes[93].qos.burst_iops"
    assert result.volumes[93].qos.burst_time == 60, "Died on +.volumes[93].qos.burst_time"
    assert result.volumes[93].qos.min_iops == 100, "Died on +.volumes[93].qos.min_iops"
    assert result.volumes[93].qos.max_iops == 15000, "Died on +.volumes[93].qos.max_iops"
    assert result.volumes[93].name == """snapshots-source-94""", "Died on +.volumes[93].name"
    assert result.volumes[93].volume_access_groups[0] == 4, "Died on +.volumes[93].volume_access_groups[0]"
    assert result.volumes[93].scsi_naadevice_id == """6f47acc1000000006d69643400000252""", "Died on +.volumes[93].scsi_naadevice_id"
    assert result.volumes[93].total_size == 5000658944, "Died on +.volumes[93].total_size"
    assert result.volumes[93].block_size == 4096, "Died on +.volumes[93].block_size"
    assert result.volumes[93].scsi_euidevice_id == """6d69643400000252f47acc0100000000""", "Died on +.volumes[93].scsi_euidevice_id"
    assert result.volumes[93].volume_id == 594, "Died on +.volumes[93].volume_id"
    assert result.volumes[93].access == """readWrite""", "Died on +.volumes[93].access"
    assert result.volumes[93].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-94.594""", "Died on +.volumes[93].iqn"
    assert result.volumes[93].slice_count == 1, "Died on +.volumes[93].slice_count"
    assert type(result.volumes[93].attributes) is dict, "Died on .volumes[93].attributes"
    assert result.volumes[93].volume_pairs[0].volume_pair_uuid == UUID("9caf7775-cd5b-4890-8213-c983dcc646da"), "Died on .volumes[93].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[93].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[93].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[93].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[93].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[93].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[93].volume_pairs[0].remote_replication.state"
    assert result.volumes[93].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[93].volume_pairs[0].remote_replication.mode"
    assert result.volumes[93].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[93].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[93].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[93].volume_pairs[0].cluster_pair_id"
    assert result.volumes[93].volume_pairs[0].remote_volume_id == 1094, "Died on +.volumes[93].volume_pairs[0].remote_volume_id"
    assert result.volumes[93].volume_pairs[0].remote_volume_name == """snap-target-94""", "Died on +.volumes[93].volume_pairs[0].remote_volume_name"
    assert result.volumes[93].volume_pairs[0].remote_slice_id == 1094, "Died on +.volumes[93].volume_pairs[0].remote_slice_id"
    assert result.volumes[93].account_id == 4, "Died on +.volumes[93].account_id"
    assert result.volumes[93].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[93].create_time"
    assert result.volumes[93].virtual_volume_id is None, "Died on .volumes[93].virtual_volume_id"
    assert result.volumes[92].status == """active""", "Died on +.volumes[92].status"
    assert result.volumes[92].enable512e == False, "Died on +.volumes[92].enable512e"
    assert result.volumes[92].qos.burst_iops == 15000, "Died on +.volumes[92].qos.burst_iops"
    assert result.volumes[92].qos.burst_time == 60, "Died on +.volumes[92].qos.burst_time"
    assert result.volumes[92].qos.min_iops == 100, "Died on +.volumes[92].qos.min_iops"
    assert result.volumes[92].qos.max_iops == 15000, "Died on +.volumes[92].qos.max_iops"
    assert result.volumes[92].name == """snapshots-source-93""", "Died on +.volumes[92].name"
    assert result.volumes[92].volume_access_groups[0] == 4, "Died on +.volumes[92].volume_access_groups[0]"
    assert result.volumes[92].scsi_naadevice_id == """6f47acc1000000006d69643400000251""", "Died on +.volumes[92].scsi_naadevice_id"
    assert result.volumes[92].total_size == 5000658944, "Died on +.volumes[92].total_size"
    assert result.volumes[92].block_size == 4096, "Died on +.volumes[92].block_size"
    assert result.volumes[92].scsi_euidevice_id == """6d69643400000251f47acc0100000000""", "Died on +.volumes[92].scsi_euidevice_id"
    assert result.volumes[92].volume_id == 593, "Died on +.volumes[92].volume_id"
    assert result.volumes[92].access == """readWrite""", "Died on +.volumes[92].access"
    assert result.volumes[92].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-93.593""", "Died on +.volumes[92].iqn"
    assert result.volumes[92].slice_count == 1, "Died on +.volumes[92].slice_count"
    assert type(result.volumes[92].attributes) is dict, "Died on .volumes[92].attributes"
    assert result.volumes[92].volume_pairs[0].volume_pair_uuid == UUID("1ff6bd53-3ebf-4602-9d19-a2aef976409a"), "Died on .volumes[92].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[92].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[92].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[92].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[92].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[92].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[92].volume_pairs[0].remote_replication.state"
    assert result.volumes[92].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[92].volume_pairs[0].remote_replication.mode"
    assert result.volumes[92].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[92].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[92].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[92].volume_pairs[0].cluster_pair_id"
    assert result.volumes[92].volume_pairs[0].remote_volume_id == 1093, "Died on +.volumes[92].volume_pairs[0].remote_volume_id"
    assert result.volumes[92].volume_pairs[0].remote_volume_name == """snap-target-93""", "Died on +.volumes[92].volume_pairs[0].remote_volume_name"
    assert result.volumes[92].volume_pairs[0].remote_slice_id == 1093, "Died on +.volumes[92].volume_pairs[0].remote_slice_id"
    assert result.volumes[92].account_id == 4, "Died on +.volumes[92].account_id"
    assert result.volumes[92].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[92].create_time"
    assert result.volumes[92].virtual_volume_id is None, "Died on .volumes[92].virtual_volume_id"
    assert result.volumes[91].status == """active""", "Died on +.volumes[91].status"
    assert result.volumes[91].enable512e == False, "Died on +.volumes[91].enable512e"
    assert result.volumes[91].qos.burst_iops == 15000, "Died on +.volumes[91].qos.burst_iops"
    assert result.volumes[91].qos.burst_time == 60, "Died on +.volumes[91].qos.burst_time"
    assert result.volumes[91].qos.min_iops == 100, "Died on +.volumes[91].qos.min_iops"
    assert result.volumes[91].qos.max_iops == 15000, "Died on +.volumes[91].qos.max_iops"
    assert result.volumes[91].name == """snapshots-source-92""", "Died on +.volumes[91].name"
    assert result.volumes[91].volume_access_groups[0] == 4, "Died on +.volumes[91].volume_access_groups[0]"
    assert result.volumes[91].scsi_naadevice_id == """6f47acc1000000006d69643400000250""", "Died on +.volumes[91].scsi_naadevice_id"
    assert result.volumes[91].total_size == 5000658944, "Died on +.volumes[91].total_size"
    assert result.volumes[91].block_size == 4096, "Died on +.volumes[91].block_size"
    assert result.volumes[91].scsi_euidevice_id == """6d69643400000250f47acc0100000000""", "Died on +.volumes[91].scsi_euidevice_id"
    assert result.volumes[91].volume_id == 592, "Died on +.volumes[91].volume_id"
    assert result.volumes[91].access == """readWrite""", "Died on +.volumes[91].access"
    assert result.volumes[91].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-92.592""", "Died on +.volumes[91].iqn"
    assert result.volumes[91].slice_count == 1, "Died on +.volumes[91].slice_count"
    assert type(result.volumes[91].attributes) is dict, "Died on .volumes[91].attributes"
    assert result.volumes[91].volume_pairs[0].volume_pair_uuid == UUID("53e8cca2-2aac-437f-83ac-2dcda5589dd4"), "Died on .volumes[91].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[91].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[91].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[91].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[91].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[91].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[91].volume_pairs[0].remote_replication.state"
    assert result.volumes[91].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[91].volume_pairs[0].remote_replication.mode"
    assert result.volumes[91].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[91].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[91].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[91].volume_pairs[0].cluster_pair_id"
    assert result.volumes[91].volume_pairs[0].remote_volume_id == 1092, "Died on +.volumes[91].volume_pairs[0].remote_volume_id"
    assert result.volumes[91].volume_pairs[0].remote_volume_name == """snap-target-92""", "Died on +.volumes[91].volume_pairs[0].remote_volume_name"
    assert result.volumes[91].volume_pairs[0].remote_slice_id == 1092, "Died on +.volumes[91].volume_pairs[0].remote_slice_id"
    assert result.volumes[91].account_id == 4, "Died on +.volumes[91].account_id"
    assert result.volumes[91].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[91].create_time"
    assert result.volumes[91].virtual_volume_id is None, "Died on .volumes[91].virtual_volume_id"
    assert result.volumes[90].status == """active""", "Died on +.volumes[90].status"
    assert result.volumes[90].enable512e == False, "Died on +.volumes[90].enable512e"
    assert result.volumes[90].qos.burst_iops == 15000, "Died on +.volumes[90].qos.burst_iops"
    assert result.volumes[90].qos.burst_time == 60, "Died on +.volumes[90].qos.burst_time"
    assert result.volumes[90].qos.min_iops == 100, "Died on +.volumes[90].qos.min_iops"
    assert result.volumes[90].qos.max_iops == 15000, "Died on +.volumes[90].qos.max_iops"
    assert result.volumes[90].name == """snapshots-source-91""", "Died on +.volumes[90].name"
    assert result.volumes[90].volume_access_groups[0] == 4, "Died on +.volumes[90].volume_access_groups[0]"
    assert result.volumes[90].scsi_naadevice_id == """6f47acc1000000006d6964340000024f""", "Died on +.volumes[90].scsi_naadevice_id"
    assert result.volumes[90].total_size == 5000658944, "Died on +.volumes[90].total_size"
    assert result.volumes[90].block_size == 4096, "Died on +.volumes[90].block_size"
    assert result.volumes[90].scsi_euidevice_id == """6d6964340000024ff47acc0100000000""", "Died on +.volumes[90].scsi_euidevice_id"
    assert result.volumes[90].volume_id == 591, "Died on +.volumes[90].volume_id"
    assert result.volumes[90].access == """readWrite""", "Died on +.volumes[90].access"
    assert result.volumes[90].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-91.591""", "Died on +.volumes[90].iqn"
    assert result.volumes[90].slice_count == 1, "Died on +.volumes[90].slice_count"
    assert type(result.volumes[90].attributes) is dict, "Died on .volumes[90].attributes"
    assert result.volumes[90].volume_pairs[0].volume_pair_uuid == UUID("142e5e3c-714c-4734-8e6a-46127c3e4f82"), "Died on .volumes[90].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[90].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[90].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[90].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[90].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[90].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[90].volume_pairs[0].remote_replication.state"
    assert result.volumes[90].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[90].volume_pairs[0].remote_replication.mode"
    assert result.volumes[90].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[90].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[90].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[90].volume_pairs[0].cluster_pair_id"
    assert result.volumes[90].volume_pairs[0].remote_volume_id == 1091, "Died on +.volumes[90].volume_pairs[0].remote_volume_id"
    assert result.volumes[90].volume_pairs[0].remote_volume_name == """snap-target-91""", "Died on +.volumes[90].volume_pairs[0].remote_volume_name"
    assert result.volumes[90].volume_pairs[0].remote_slice_id == 1091, "Died on +.volumes[90].volume_pairs[0].remote_slice_id"
    assert result.volumes[90].account_id == 4, "Died on +.volumes[90].account_id"
    assert result.volumes[90].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[90].create_time"
    assert result.volumes[90].virtual_volume_id is None, "Died on .volumes[90].virtual_volume_id"
    assert result.volumes[89].status == """active""", "Died on +.volumes[89].status"
    assert result.volumes[89].enable512e == False, "Died on +.volumes[89].enable512e"
    assert result.volumes[89].qos.burst_iops == 15000, "Died on +.volumes[89].qos.burst_iops"
    assert result.volumes[89].qos.burst_time == 60, "Died on +.volumes[89].qos.burst_time"
    assert result.volumes[89].qos.min_iops == 100, "Died on +.volumes[89].qos.min_iops"
    assert result.volumes[89].qos.max_iops == 15000, "Died on +.volumes[89].qos.max_iops"
    assert result.volumes[89].name == """snapshots-source-90""", "Died on +.volumes[89].name"
    assert result.volumes[89].volume_access_groups[0] == 4, "Died on +.volumes[89].volume_access_groups[0]"
    assert result.volumes[89].scsi_naadevice_id == """6f47acc1000000006d6964340000024e""", "Died on +.volumes[89].scsi_naadevice_id"
    assert result.volumes[89].total_size == 5000658944, "Died on +.volumes[89].total_size"
    assert result.volumes[89].block_size == 4096, "Died on +.volumes[89].block_size"
    assert result.volumes[89].scsi_euidevice_id == """6d6964340000024ef47acc0100000000""", "Died on +.volumes[89].scsi_euidevice_id"
    assert result.volumes[89].volume_id == 590, "Died on +.volumes[89].volume_id"
    assert result.volumes[89].access == """readWrite""", "Died on +.volumes[89].access"
    assert result.volumes[89].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-90.590""", "Died on +.volumes[89].iqn"
    assert result.volumes[89].slice_count == 1, "Died on +.volumes[89].slice_count"
    assert type(result.volumes[89].attributes) is dict, "Died on .volumes[89].attributes"
    assert result.volumes[89].volume_pairs[0].volume_pair_uuid == UUID("c1129f6e-97b0-492a-851b-944a6b964585"), "Died on .volumes[89].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[89].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[89].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[89].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[89].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[89].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[89].volume_pairs[0].remote_replication.state"
    assert result.volumes[89].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[89].volume_pairs[0].remote_replication.mode"
    assert result.volumes[89].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[89].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[89].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[89].volume_pairs[0].cluster_pair_id"
    assert result.volumes[89].volume_pairs[0].remote_volume_id == 1090, "Died on +.volumes[89].volume_pairs[0].remote_volume_id"
    assert result.volumes[89].volume_pairs[0].remote_volume_name == """snap-target-90""", "Died on +.volumes[89].volume_pairs[0].remote_volume_name"
    assert result.volumes[89].volume_pairs[0].remote_slice_id == 1090, "Died on +.volumes[89].volume_pairs[0].remote_slice_id"
    assert result.volumes[89].account_id == 4, "Died on +.volumes[89].account_id"
    assert result.volumes[89].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[89].create_time"
    assert result.volumes[89].virtual_volume_id is None, "Died on .volumes[89].virtual_volume_id"
    assert result.volumes[88].status == """active""", "Died on +.volumes[88].status"
    assert result.volumes[88].enable512e == False, "Died on +.volumes[88].enable512e"
    assert result.volumes[88].qos.burst_iops == 15000, "Died on +.volumes[88].qos.burst_iops"
    assert result.volumes[88].qos.burst_time == 60, "Died on +.volumes[88].qos.burst_time"
    assert result.volumes[88].qos.min_iops == 100, "Died on +.volumes[88].qos.min_iops"
    assert result.volumes[88].qos.max_iops == 15000, "Died on +.volumes[88].qos.max_iops"
    assert result.volumes[88].name == """snapshots-source-89""", "Died on +.volumes[88].name"
    assert result.volumes[88].volume_access_groups[0] == 4, "Died on +.volumes[88].volume_access_groups[0]"
    assert result.volumes[88].scsi_naadevice_id == """6f47acc1000000006d6964340000024d""", "Died on +.volumes[88].scsi_naadevice_id"
    assert result.volumes[88].total_size == 5000658944, "Died on +.volumes[88].total_size"
    assert result.volumes[88].block_size == 4096, "Died on +.volumes[88].block_size"
    assert result.volumes[88].scsi_euidevice_id == """6d6964340000024df47acc0100000000""", "Died on +.volumes[88].scsi_euidevice_id"
    assert result.volumes[88].volume_id == 589, "Died on +.volumes[88].volume_id"
    assert result.volumes[88].access == """readWrite""", "Died on +.volumes[88].access"
    assert result.volumes[88].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-89.589""", "Died on +.volumes[88].iqn"
    assert result.volumes[88].slice_count == 1, "Died on +.volumes[88].slice_count"
    assert type(result.volumes[88].attributes) is dict, "Died on .volumes[88].attributes"
    assert result.volumes[88].volume_pairs[0].volume_pair_uuid == UUID("bbb2e181-640e-4e48-ba31-60cfba59fe61"), "Died on .volumes[88].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[88].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[88].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[88].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[88].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[88].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[88].volume_pairs[0].remote_replication.state"
    assert result.volumes[88].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[88].volume_pairs[0].remote_replication.mode"
    assert result.volumes[88].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[88].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[88].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[88].volume_pairs[0].cluster_pair_id"
    assert result.volumes[88].volume_pairs[0].remote_volume_id == 1089, "Died on +.volumes[88].volume_pairs[0].remote_volume_id"
    assert result.volumes[88].volume_pairs[0].remote_volume_name == """snap-target-89""", "Died on +.volumes[88].volume_pairs[0].remote_volume_name"
    assert result.volumes[88].volume_pairs[0].remote_slice_id == 1089, "Died on +.volumes[88].volume_pairs[0].remote_slice_id"
    assert result.volumes[88].account_id == 4, "Died on +.volumes[88].account_id"
    assert result.volumes[88].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[88].create_time"
    assert result.volumes[88].virtual_volume_id is None, "Died on .volumes[88].virtual_volume_id"
    assert result.volumes[87].status == """active""", "Died on +.volumes[87].status"
    assert result.volumes[87].enable512e == False, "Died on +.volumes[87].enable512e"
    assert result.volumes[87].qos.burst_iops == 15000, "Died on +.volumes[87].qos.burst_iops"
    assert result.volumes[87].qos.burst_time == 60, "Died on +.volumes[87].qos.burst_time"
    assert result.volumes[87].qos.min_iops == 100, "Died on +.volumes[87].qos.min_iops"
    assert result.volumes[87].qos.max_iops == 15000, "Died on +.volumes[87].qos.max_iops"
    assert result.volumes[87].name == """snapshots-source-88""", "Died on +.volumes[87].name"
    assert result.volumes[87].volume_access_groups[0] == 4, "Died on +.volumes[87].volume_access_groups[0]"
    assert result.volumes[87].scsi_naadevice_id == """6f47acc1000000006d6964340000024c""", "Died on +.volumes[87].scsi_naadevice_id"
    assert result.volumes[87].total_size == 5000658944, "Died on +.volumes[87].total_size"
    assert result.volumes[87].block_size == 4096, "Died on +.volumes[87].block_size"
    assert result.volumes[87].scsi_euidevice_id == """6d6964340000024cf47acc0100000000""", "Died on +.volumes[87].scsi_euidevice_id"
    assert result.volumes[87].volume_id == 588, "Died on +.volumes[87].volume_id"
    assert result.volumes[87].access == """readWrite""", "Died on +.volumes[87].access"
    assert result.volumes[87].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-88.588""", "Died on +.volumes[87].iqn"
    assert result.volumes[87].slice_count == 1, "Died on +.volumes[87].slice_count"
    assert type(result.volumes[87].attributes) is dict, "Died on .volumes[87].attributes"
    assert result.volumes[87].volume_pairs[0].volume_pair_uuid == UUID("149ac36c-9cdb-4e7f-a2c6-ffbc9a76f8e7"), "Died on .volumes[87].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[87].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[87].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[87].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[87].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[87].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[87].volume_pairs[0].remote_replication.state"
    assert result.volumes[87].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[87].volume_pairs[0].remote_replication.mode"
    assert result.volumes[87].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[87].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[87].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[87].volume_pairs[0].cluster_pair_id"
    assert result.volumes[87].volume_pairs[0].remote_volume_id == 1088, "Died on +.volumes[87].volume_pairs[0].remote_volume_id"
    assert result.volumes[87].volume_pairs[0].remote_volume_name == """snap-target-88""", "Died on +.volumes[87].volume_pairs[0].remote_volume_name"
    assert result.volumes[87].volume_pairs[0].remote_slice_id == 1088, "Died on +.volumes[87].volume_pairs[0].remote_slice_id"
    assert result.volumes[87].account_id == 4, "Died on +.volumes[87].account_id"
    assert result.volumes[87].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[87].create_time"
    assert result.volumes[87].virtual_volume_id is None, "Died on .volumes[87].virtual_volume_id"
    assert result.volumes[86].status == """active""", "Died on +.volumes[86].status"
    assert result.volumes[86].enable512e == False, "Died on +.volumes[86].enable512e"
    assert result.volumes[86].qos.burst_iops == 15000, "Died on +.volumes[86].qos.burst_iops"
    assert result.volumes[86].qos.burst_time == 60, "Died on +.volumes[86].qos.burst_time"
    assert result.volumes[86].qos.min_iops == 100, "Died on +.volumes[86].qos.min_iops"
    assert result.volumes[86].qos.max_iops == 15000, "Died on +.volumes[86].qos.max_iops"
    assert result.volumes[86].name == """snapshots-source-87""", "Died on +.volumes[86].name"
    assert result.volumes[86].volume_access_groups[0] == 4, "Died on +.volumes[86].volume_access_groups[0]"
    assert result.volumes[86].scsi_naadevice_id == """6f47acc1000000006d6964340000024b""", "Died on +.volumes[86].scsi_naadevice_id"
    assert result.volumes[86].total_size == 5000658944, "Died on +.volumes[86].total_size"
    assert result.volumes[86].block_size == 4096, "Died on +.volumes[86].block_size"
    assert result.volumes[86].scsi_euidevice_id == """6d6964340000024bf47acc0100000000""", "Died on +.volumes[86].scsi_euidevice_id"
    assert result.volumes[86].volume_id == 587, "Died on +.volumes[86].volume_id"
    assert result.volumes[86].access == """readWrite""", "Died on +.volumes[86].access"
    assert result.volumes[86].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-87.587""", "Died on +.volumes[86].iqn"
    assert result.volumes[86].slice_count == 1, "Died on +.volumes[86].slice_count"
    assert type(result.volumes[86].attributes) is dict, "Died on .volumes[86].attributes"
    assert result.volumes[86].volume_pairs[0].volume_pair_uuid == UUID("85d55714-267d-49a9-a94c-6915b36783ae"), "Died on .volumes[86].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[86].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[86].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[86].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[86].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[86].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[86].volume_pairs[0].remote_replication.state"
    assert result.volumes[86].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[86].volume_pairs[0].remote_replication.mode"
    assert result.volumes[86].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[86].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[86].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[86].volume_pairs[0].cluster_pair_id"
    assert result.volumes[86].volume_pairs[0].remote_volume_id == 1087, "Died on +.volumes[86].volume_pairs[0].remote_volume_id"
    assert result.volumes[86].volume_pairs[0].remote_volume_name == """snap-target-87""", "Died on +.volumes[86].volume_pairs[0].remote_volume_name"
    assert result.volumes[86].volume_pairs[0].remote_slice_id == 1087, "Died on +.volumes[86].volume_pairs[0].remote_slice_id"
    assert result.volumes[86].account_id == 4, "Died on +.volumes[86].account_id"
    assert result.volumes[86].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[86].create_time"
    assert result.volumes[86].virtual_volume_id is None, "Died on .volumes[86].virtual_volume_id"
    assert result.volumes[85].status == """active""", "Died on +.volumes[85].status"
    assert result.volumes[85].enable512e == False, "Died on +.volumes[85].enable512e"
    assert result.volumes[85].qos.burst_iops == 15000, "Died on +.volumes[85].qos.burst_iops"
    assert result.volumes[85].qos.burst_time == 60, "Died on +.volumes[85].qos.burst_time"
    assert result.volumes[85].qos.min_iops == 100, "Died on +.volumes[85].qos.min_iops"
    assert result.volumes[85].qos.max_iops == 15000, "Died on +.volumes[85].qos.max_iops"
    assert result.volumes[85].name == """snapshots-source-86""", "Died on +.volumes[85].name"
    assert result.volumes[85].volume_access_groups[0] == 4, "Died on +.volumes[85].volume_access_groups[0]"
    assert result.volumes[85].scsi_naadevice_id == """6f47acc1000000006d6964340000024a""", "Died on +.volumes[85].scsi_naadevice_id"
    assert result.volumes[85].total_size == 5000658944, "Died on +.volumes[85].total_size"
    assert result.volumes[85].block_size == 4096, "Died on +.volumes[85].block_size"
    assert result.volumes[85].scsi_euidevice_id == """6d6964340000024af47acc0100000000""", "Died on +.volumes[85].scsi_euidevice_id"
    assert result.volumes[85].volume_id == 586, "Died on +.volumes[85].volume_id"
    assert result.volumes[85].access == """readWrite""", "Died on +.volumes[85].access"
    assert result.volumes[85].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-86.586""", "Died on +.volumes[85].iqn"
    assert result.volumes[85].slice_count == 1, "Died on +.volumes[85].slice_count"
    assert type(result.volumes[85].attributes) is dict, "Died on .volumes[85].attributes"
    assert result.volumes[85].volume_pairs[0].volume_pair_uuid == UUID("92c4e83f-316b-457d-8236-be9f485396f8"), "Died on .volumes[85].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[85].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[85].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[85].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[85].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[85].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[85].volume_pairs[0].remote_replication.state"
    assert result.volumes[85].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[85].volume_pairs[0].remote_replication.mode"
    assert result.volumes[85].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[85].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[85].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[85].volume_pairs[0].cluster_pair_id"
    assert result.volumes[85].volume_pairs[0].remote_volume_id == 1086, "Died on +.volumes[85].volume_pairs[0].remote_volume_id"
    assert result.volumes[85].volume_pairs[0].remote_volume_name == """snap-target-86""", "Died on +.volumes[85].volume_pairs[0].remote_volume_name"
    assert result.volumes[85].volume_pairs[0].remote_slice_id == 1086, "Died on +.volumes[85].volume_pairs[0].remote_slice_id"
    assert result.volumes[85].account_id == 4, "Died on +.volumes[85].account_id"
    assert result.volumes[85].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[85].create_time"
    assert result.volumes[85].virtual_volume_id is None, "Died on .volumes[85].virtual_volume_id"
    assert result.volumes[84].status == """active""", "Died on +.volumes[84].status"
    assert result.volumes[84].enable512e == False, "Died on +.volumes[84].enable512e"
    assert result.volumes[84].qos.burst_iops == 15000, "Died on +.volumes[84].qos.burst_iops"
    assert result.volumes[84].qos.burst_time == 60, "Died on +.volumes[84].qos.burst_time"
    assert result.volumes[84].qos.min_iops == 100, "Died on +.volumes[84].qos.min_iops"
    assert result.volumes[84].qos.max_iops == 15000, "Died on +.volumes[84].qos.max_iops"
    assert result.volumes[84].name == """snapshots-source-85""", "Died on +.volumes[84].name"
    assert result.volumes[84].volume_access_groups[0] == 4, "Died on +.volumes[84].volume_access_groups[0]"
    assert result.volumes[84].scsi_naadevice_id == """6f47acc1000000006d69643400000249""", "Died on +.volumes[84].scsi_naadevice_id"
    assert result.volumes[84].total_size == 5000658944, "Died on +.volumes[84].total_size"
    assert result.volumes[84].block_size == 4096, "Died on +.volumes[84].block_size"
    assert result.volumes[84].scsi_euidevice_id == """6d69643400000249f47acc0100000000""", "Died on +.volumes[84].scsi_euidevice_id"
    assert result.volumes[84].volume_id == 585, "Died on +.volumes[84].volume_id"
    assert result.volumes[84].access == """readWrite""", "Died on +.volumes[84].access"
    assert result.volumes[84].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-85.585""", "Died on +.volumes[84].iqn"
    assert result.volumes[84].slice_count == 1, "Died on +.volumes[84].slice_count"
    assert type(result.volumes[84].attributes) is dict, "Died on .volumes[84].attributes"
    assert result.volumes[84].volume_pairs[0].volume_pair_uuid == UUID("a73cea85-3b96-4e2a-b56e-b7aa168eb81e"), "Died on .volumes[84].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[84].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[84].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[84].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[84].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[84].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[84].volume_pairs[0].remote_replication.state"
    assert result.volumes[84].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[84].volume_pairs[0].remote_replication.mode"
    assert result.volumes[84].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[84].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[84].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[84].volume_pairs[0].cluster_pair_id"
    assert result.volumes[84].volume_pairs[0].remote_volume_id == 1085, "Died on +.volumes[84].volume_pairs[0].remote_volume_id"
    assert result.volumes[84].volume_pairs[0].remote_volume_name == """snap-target-85""", "Died on +.volumes[84].volume_pairs[0].remote_volume_name"
    assert result.volumes[84].volume_pairs[0].remote_slice_id == 1085, "Died on +.volumes[84].volume_pairs[0].remote_slice_id"
    assert result.volumes[84].account_id == 4, "Died on +.volumes[84].account_id"
    assert result.volumes[84].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[84].create_time"
    assert result.volumes[84].virtual_volume_id is None, "Died on .volumes[84].virtual_volume_id"
    assert result.volumes[83].status == """active""", "Died on +.volumes[83].status"
    assert result.volumes[83].enable512e == False, "Died on +.volumes[83].enable512e"
    assert result.volumes[83].qos.burst_iops == 15000, "Died on +.volumes[83].qos.burst_iops"
    assert result.volumes[83].qos.burst_time == 60, "Died on +.volumes[83].qos.burst_time"
    assert result.volumes[83].qos.min_iops == 100, "Died on +.volumes[83].qos.min_iops"
    assert result.volumes[83].qos.max_iops == 15000, "Died on +.volumes[83].qos.max_iops"
    assert result.volumes[83].name == """snapshots-source-84""", "Died on +.volumes[83].name"
    assert result.volumes[83].volume_access_groups[0] == 4, "Died on +.volumes[83].volume_access_groups[0]"
    assert result.volumes[83].scsi_naadevice_id == """6f47acc1000000006d69643400000248""", "Died on +.volumes[83].scsi_naadevice_id"
    assert result.volumes[83].total_size == 5000658944, "Died on +.volumes[83].total_size"
    assert result.volumes[83].block_size == 4096, "Died on +.volumes[83].block_size"
    assert result.volumes[83].scsi_euidevice_id == """6d69643400000248f47acc0100000000""", "Died on +.volumes[83].scsi_euidevice_id"
    assert result.volumes[83].volume_id == 584, "Died on +.volumes[83].volume_id"
    assert result.volumes[83].access == """readWrite""", "Died on +.volumes[83].access"
    assert result.volumes[83].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-84.584""", "Died on +.volumes[83].iqn"
    assert result.volumes[83].slice_count == 1, "Died on +.volumes[83].slice_count"
    assert type(result.volumes[83].attributes) is dict, "Died on .volumes[83].attributes"
    assert result.volumes[83].volume_pairs[0].volume_pair_uuid == UUID("713e8d50-3d5e-41cf-b91d-eb2a136c0dec"), "Died on .volumes[83].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[83].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[83].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[83].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[83].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[83].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[83].volume_pairs[0].remote_replication.state"
    assert result.volumes[83].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[83].volume_pairs[0].remote_replication.mode"
    assert result.volumes[83].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[83].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[83].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[83].volume_pairs[0].cluster_pair_id"
    assert result.volumes[83].volume_pairs[0].remote_volume_id == 1084, "Died on +.volumes[83].volume_pairs[0].remote_volume_id"
    assert result.volumes[83].volume_pairs[0].remote_volume_name == """snap-target-84""", "Died on +.volumes[83].volume_pairs[0].remote_volume_name"
    assert result.volumes[83].volume_pairs[0].remote_slice_id == 1084, "Died on +.volumes[83].volume_pairs[0].remote_slice_id"
    assert result.volumes[83].account_id == 4, "Died on +.volumes[83].account_id"
    assert result.volumes[83].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[83].create_time"
    assert result.volumes[83].virtual_volume_id is None, "Died on .volumes[83].virtual_volume_id"
    assert result.volumes[82].status == """active""", "Died on +.volumes[82].status"
    assert result.volumes[82].enable512e == False, "Died on +.volumes[82].enable512e"
    assert result.volumes[82].qos.burst_iops == 15000, "Died on +.volumes[82].qos.burst_iops"
    assert result.volumes[82].qos.burst_time == 60, "Died on +.volumes[82].qos.burst_time"
    assert result.volumes[82].qos.min_iops == 100, "Died on +.volumes[82].qos.min_iops"
    assert result.volumes[82].qos.max_iops == 15000, "Died on +.volumes[82].qos.max_iops"
    assert result.volumes[82].name == """snapshots-source-83""", "Died on +.volumes[82].name"
    assert result.volumes[82].volume_access_groups[0] == 4, "Died on +.volumes[82].volume_access_groups[0]"
    assert result.volumes[82].scsi_naadevice_id == """6f47acc1000000006d69643400000247""", "Died on +.volumes[82].scsi_naadevice_id"
    assert result.volumes[82].total_size == 5000658944, "Died on +.volumes[82].total_size"
    assert result.volumes[82].block_size == 4096, "Died on +.volumes[82].block_size"
    assert result.volumes[82].scsi_euidevice_id == """6d69643400000247f47acc0100000000""", "Died on +.volumes[82].scsi_euidevice_id"
    assert result.volumes[82].volume_id == 583, "Died on +.volumes[82].volume_id"
    assert result.volumes[82].access == """readWrite""", "Died on +.volumes[82].access"
    assert result.volumes[82].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-83.583""", "Died on +.volumes[82].iqn"
    assert result.volumes[82].slice_count == 1, "Died on +.volumes[82].slice_count"
    assert type(result.volumes[82].attributes) is dict, "Died on .volumes[82].attributes"
    assert result.volumes[82].volume_pairs[0].volume_pair_uuid == UUID("7a2ce68d-e8bc-4e75-87ae-007080571c67"), "Died on .volumes[82].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[82].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[82].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[82].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[82].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[82].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[82].volume_pairs[0].remote_replication.state"
    assert result.volumes[82].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[82].volume_pairs[0].remote_replication.mode"
    assert result.volumes[82].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[82].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[82].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[82].volume_pairs[0].cluster_pair_id"
    assert result.volumes[82].volume_pairs[0].remote_volume_id == 1083, "Died on +.volumes[82].volume_pairs[0].remote_volume_id"
    assert result.volumes[82].volume_pairs[0].remote_volume_name == """snap-target-83""", "Died on +.volumes[82].volume_pairs[0].remote_volume_name"
    assert result.volumes[82].volume_pairs[0].remote_slice_id == 1083, "Died on +.volumes[82].volume_pairs[0].remote_slice_id"
    assert result.volumes[82].account_id == 4, "Died on +.volumes[82].account_id"
    assert result.volumes[82].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[82].create_time"
    assert result.volumes[82].virtual_volume_id is None, "Died on .volumes[82].virtual_volume_id"
    assert result.volumes[81].status == """active""", "Died on +.volumes[81].status"
    assert result.volumes[81].enable512e == False, "Died on +.volumes[81].enable512e"
    assert result.volumes[81].qos.burst_iops == 15000, "Died on +.volumes[81].qos.burst_iops"
    assert result.volumes[81].qos.burst_time == 60, "Died on +.volumes[81].qos.burst_time"
    assert result.volumes[81].qos.min_iops == 100, "Died on +.volumes[81].qos.min_iops"
    assert result.volumes[81].qos.max_iops == 15000, "Died on +.volumes[81].qos.max_iops"
    assert result.volumes[81].name == """snapshots-source-82""", "Died on +.volumes[81].name"
    assert result.volumes[81].volume_access_groups[0] == 4, "Died on +.volumes[81].volume_access_groups[0]"
    assert result.volumes[81].scsi_naadevice_id == """6f47acc1000000006d69643400000246""", "Died on +.volumes[81].scsi_naadevice_id"
    assert result.volumes[81].total_size == 5000658944, "Died on +.volumes[81].total_size"
    assert result.volumes[81].block_size == 4096, "Died on +.volumes[81].block_size"
    assert result.volumes[81].scsi_euidevice_id == """6d69643400000246f47acc0100000000""", "Died on +.volumes[81].scsi_euidevice_id"
    assert result.volumes[81].volume_id == 582, "Died on +.volumes[81].volume_id"
    assert result.volumes[81].access == """readWrite""", "Died on +.volumes[81].access"
    assert result.volumes[81].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-82.582""", "Died on +.volumes[81].iqn"
    assert result.volumes[81].slice_count == 1, "Died on +.volumes[81].slice_count"
    assert type(result.volumes[81].attributes) is dict, "Died on .volumes[81].attributes"
    assert result.volumes[81].volume_pairs[0].volume_pair_uuid == UUID("3c5e5815-8547-40ae-8a5d-ab5d9f516fca"), "Died on .volumes[81].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[81].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[81].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[81].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[81].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[81].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[81].volume_pairs[0].remote_replication.state"
    assert result.volumes[81].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[81].volume_pairs[0].remote_replication.mode"
    assert result.volumes[81].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[81].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[81].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[81].volume_pairs[0].cluster_pair_id"
    assert result.volumes[81].volume_pairs[0].remote_volume_id == 1082, "Died on +.volumes[81].volume_pairs[0].remote_volume_id"
    assert result.volumes[81].volume_pairs[0].remote_volume_name == """snap-target-82""", "Died on +.volumes[81].volume_pairs[0].remote_volume_name"
    assert result.volumes[81].volume_pairs[0].remote_slice_id == 1082, "Died on +.volumes[81].volume_pairs[0].remote_slice_id"
    assert result.volumes[81].account_id == 4, "Died on +.volumes[81].account_id"
    assert result.volumes[81].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[81].create_time"
    assert result.volumes[81].virtual_volume_id is None, "Died on .volumes[81].virtual_volume_id"
    assert result.volumes[80].status == """active""", "Died on +.volumes[80].status"
    assert result.volumes[80].enable512e == False, "Died on +.volumes[80].enable512e"
    assert result.volumes[80].qos.burst_iops == 15000, "Died on +.volumes[80].qos.burst_iops"
    assert result.volumes[80].qos.burst_time == 60, "Died on +.volumes[80].qos.burst_time"
    assert result.volumes[80].qos.min_iops == 100, "Died on +.volumes[80].qos.min_iops"
    assert result.volumes[80].qos.max_iops == 15000, "Died on +.volumes[80].qos.max_iops"
    assert result.volumes[80].name == """snapshots-source-81""", "Died on +.volumes[80].name"
    assert result.volumes[80].volume_access_groups[0] == 4, "Died on +.volumes[80].volume_access_groups[0]"
    assert result.volumes[80].scsi_naadevice_id == """6f47acc1000000006d69643400000245""", "Died on +.volumes[80].scsi_naadevice_id"
    assert result.volumes[80].total_size == 5000658944, "Died on +.volumes[80].total_size"
    assert result.volumes[80].block_size == 4096, "Died on +.volumes[80].block_size"
    assert result.volumes[80].scsi_euidevice_id == """6d69643400000245f47acc0100000000""", "Died on +.volumes[80].scsi_euidevice_id"
    assert result.volumes[80].volume_id == 581, "Died on +.volumes[80].volume_id"
    assert result.volumes[80].access == """readWrite""", "Died on +.volumes[80].access"
    assert result.volumes[80].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-81.581""", "Died on +.volumes[80].iqn"
    assert result.volumes[80].slice_count == 1, "Died on +.volumes[80].slice_count"
    assert type(result.volumes[80].attributes) is dict, "Died on .volumes[80].attributes"
    assert result.volumes[80].volume_pairs[0].volume_pair_uuid == UUID("05540442-8806-41a7-aa63-65a946e9f736"), "Died on .volumes[80].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[80].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[80].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[80].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[80].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[80].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[80].volume_pairs[0].remote_replication.state"
    assert result.volumes[80].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[80].volume_pairs[0].remote_replication.mode"
    assert result.volumes[80].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[80].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[80].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[80].volume_pairs[0].cluster_pair_id"
    assert result.volumes[80].volume_pairs[0].remote_volume_id == 1081, "Died on +.volumes[80].volume_pairs[0].remote_volume_id"
    assert result.volumes[80].volume_pairs[0].remote_volume_name == """snap-target-81""", "Died on +.volumes[80].volume_pairs[0].remote_volume_name"
    assert result.volumes[80].volume_pairs[0].remote_slice_id == 1081, "Died on +.volumes[80].volume_pairs[0].remote_slice_id"
    assert result.volumes[80].account_id == 4, "Died on +.volumes[80].account_id"
    assert result.volumes[80].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[80].create_time"
    assert result.volumes[80].virtual_volume_id is None, "Died on .volumes[80].virtual_volume_id"
    assert result.volumes[79].status == """active""", "Died on +.volumes[79].status"
    assert result.volumes[79].enable512e == False, "Died on +.volumes[79].enable512e"
    assert result.volumes[79].qos.burst_iops == 15000, "Died on +.volumes[79].qos.burst_iops"
    assert result.volumes[79].qos.burst_time == 60, "Died on +.volumes[79].qos.burst_time"
    assert result.volumes[79].qos.min_iops == 100, "Died on +.volumes[79].qos.min_iops"
    assert result.volumes[79].qos.max_iops == 15000, "Died on +.volumes[79].qos.max_iops"
    assert result.volumes[79].name == """snapshots-source-80""", "Died on +.volumes[79].name"
    assert result.volumes[79].volume_access_groups[0] == 4, "Died on +.volumes[79].volume_access_groups[0]"
    assert result.volumes[79].scsi_naadevice_id == """6f47acc1000000006d69643400000244""", "Died on +.volumes[79].scsi_naadevice_id"
    assert result.volumes[79].total_size == 5000658944, "Died on +.volumes[79].total_size"
    assert result.volumes[79].block_size == 4096, "Died on +.volumes[79].block_size"
    assert result.volumes[79].scsi_euidevice_id == """6d69643400000244f47acc0100000000""", "Died on +.volumes[79].scsi_euidevice_id"
    assert result.volumes[79].volume_id == 580, "Died on +.volumes[79].volume_id"
    assert result.volumes[79].access == """readWrite""", "Died on +.volumes[79].access"
    assert result.volumes[79].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-80.580""", "Died on +.volumes[79].iqn"
    assert result.volumes[79].slice_count == 1, "Died on +.volumes[79].slice_count"
    assert type(result.volumes[79].attributes) is dict, "Died on .volumes[79].attributes"
    assert result.volumes[79].volume_pairs[0].volume_pair_uuid == UUID("4f4c34db-6336-446e-a5e6-354660d50650"), "Died on .volumes[79].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[79].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[79].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[79].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[79].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[79].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[79].volume_pairs[0].remote_replication.state"
    assert result.volumes[79].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[79].volume_pairs[0].remote_replication.mode"
    assert result.volumes[79].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[79].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[79].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[79].volume_pairs[0].cluster_pair_id"
    assert result.volumes[79].volume_pairs[0].remote_volume_id == 1080, "Died on +.volumes[79].volume_pairs[0].remote_volume_id"
    assert result.volumes[79].volume_pairs[0].remote_volume_name == """snap-target-80""", "Died on +.volumes[79].volume_pairs[0].remote_volume_name"
    assert result.volumes[79].volume_pairs[0].remote_slice_id == 1080, "Died on +.volumes[79].volume_pairs[0].remote_slice_id"
    assert result.volumes[79].account_id == 4, "Died on +.volumes[79].account_id"
    assert result.volumes[79].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[79].create_time"
    assert result.volumes[79].virtual_volume_id is None, "Died on .volumes[79].virtual_volume_id"
    assert result.volumes[78].status == """active""", "Died on +.volumes[78].status"
    assert result.volumes[78].enable512e == False, "Died on +.volumes[78].enable512e"
    assert result.volumes[78].qos.burst_iops == 15000, "Died on +.volumes[78].qos.burst_iops"
    assert result.volumes[78].qos.burst_time == 60, "Died on +.volumes[78].qos.burst_time"
    assert result.volumes[78].qos.min_iops == 100, "Died on +.volumes[78].qos.min_iops"
    assert result.volumes[78].qos.max_iops == 15000, "Died on +.volumes[78].qos.max_iops"
    assert result.volumes[78].name == """snapshots-source-79""", "Died on +.volumes[78].name"
    assert result.volumes[78].volume_access_groups[0] == 4, "Died on +.volumes[78].volume_access_groups[0]"
    assert result.volumes[78].scsi_naadevice_id == """6f47acc1000000006d69643400000243""", "Died on +.volumes[78].scsi_naadevice_id"
    assert result.volumes[78].total_size == 5000658944, "Died on +.volumes[78].total_size"
    assert result.volumes[78].block_size == 4096, "Died on +.volumes[78].block_size"
    assert result.volumes[78].scsi_euidevice_id == """6d69643400000243f47acc0100000000""", "Died on +.volumes[78].scsi_euidevice_id"
    assert result.volumes[78].volume_id == 579, "Died on +.volumes[78].volume_id"
    assert result.volumes[78].access == """readWrite""", "Died on +.volumes[78].access"
    assert result.volumes[78].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-79.579""", "Died on +.volumes[78].iqn"
    assert result.volumes[78].slice_count == 1, "Died on +.volumes[78].slice_count"
    assert type(result.volumes[78].attributes) is dict, "Died on .volumes[78].attributes"
    assert result.volumes[78].volume_pairs[0].volume_pair_uuid == UUID("b215c6b6-b068-4996-88c8-1dfd2cc0d4d6"), "Died on .volumes[78].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[78].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[78].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[78].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[78].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[78].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[78].volume_pairs[0].remote_replication.state"
    assert result.volumes[78].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[78].volume_pairs[0].remote_replication.mode"
    assert result.volumes[78].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[78].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[78].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[78].volume_pairs[0].cluster_pair_id"
    assert result.volumes[78].volume_pairs[0].remote_volume_id == 1079, "Died on +.volumes[78].volume_pairs[0].remote_volume_id"
    assert result.volumes[78].volume_pairs[0].remote_volume_name == """snap-target-79""", "Died on +.volumes[78].volume_pairs[0].remote_volume_name"
    assert result.volumes[78].volume_pairs[0].remote_slice_id == 1079, "Died on +.volumes[78].volume_pairs[0].remote_slice_id"
    assert result.volumes[78].account_id == 4, "Died on +.volumes[78].account_id"
    assert result.volumes[78].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[78].create_time"
    assert result.volumes[78].virtual_volume_id is None, "Died on .volumes[78].virtual_volume_id"
    assert result.volumes[77].status == """active""", "Died on +.volumes[77].status"
    assert result.volumes[77].enable512e == False, "Died on +.volumes[77].enable512e"
    assert result.volumes[77].qos.burst_iops == 15000, "Died on +.volumes[77].qos.burst_iops"
    assert result.volumes[77].qos.burst_time == 60, "Died on +.volumes[77].qos.burst_time"
    assert result.volumes[77].qos.min_iops == 100, "Died on +.volumes[77].qos.min_iops"
    assert result.volumes[77].qos.max_iops == 15000, "Died on +.volumes[77].qos.max_iops"
    assert result.volumes[77].name == """snapshots-source-78""", "Died on +.volumes[77].name"
    assert result.volumes[77].volume_access_groups[0] == 4, "Died on +.volumes[77].volume_access_groups[0]"
    assert result.volumes[77].scsi_naadevice_id == """6f47acc1000000006d69643400000242""", "Died on +.volumes[77].scsi_naadevice_id"
    assert result.volumes[77].total_size == 5000658944, "Died on +.volumes[77].total_size"
    assert result.volumes[77].block_size == 4096, "Died on +.volumes[77].block_size"
    assert result.volumes[77].scsi_euidevice_id == """6d69643400000242f47acc0100000000""", "Died on +.volumes[77].scsi_euidevice_id"
    assert result.volumes[77].volume_id == 578, "Died on +.volumes[77].volume_id"
    assert result.volumes[77].access == """readWrite""", "Died on +.volumes[77].access"
    assert result.volumes[77].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-78.578""", "Died on +.volumes[77].iqn"
    assert result.volumes[77].slice_count == 1, "Died on +.volumes[77].slice_count"
    assert type(result.volumes[77].attributes) is dict, "Died on .volumes[77].attributes"
    assert result.volumes[77].volume_pairs[0].volume_pair_uuid == UUID("ea31eeea-5475-47e8-9770-6623da441f54"), "Died on .volumes[77].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[77].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[77].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[77].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[77].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[77].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[77].volume_pairs[0].remote_replication.state"
    assert result.volumes[77].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[77].volume_pairs[0].remote_replication.mode"
    assert result.volumes[77].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[77].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[77].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[77].volume_pairs[0].cluster_pair_id"
    assert result.volumes[77].volume_pairs[0].remote_volume_id == 1078, "Died on +.volumes[77].volume_pairs[0].remote_volume_id"
    assert result.volumes[77].volume_pairs[0].remote_volume_name == """snap-target-78""", "Died on +.volumes[77].volume_pairs[0].remote_volume_name"
    assert result.volumes[77].volume_pairs[0].remote_slice_id == 1078, "Died on +.volumes[77].volume_pairs[0].remote_slice_id"
    assert result.volumes[77].account_id == 4, "Died on +.volumes[77].account_id"
    assert result.volumes[77].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[77].create_time"
    assert result.volumes[77].virtual_volume_id is None, "Died on .volumes[77].virtual_volume_id"
    assert result.volumes[76].status == """active""", "Died on +.volumes[76].status"
    assert result.volumes[76].enable512e == False, "Died on +.volumes[76].enable512e"
    assert result.volumes[76].qos.burst_iops == 15000, "Died on +.volumes[76].qos.burst_iops"
    assert result.volumes[76].qos.burst_time == 60, "Died on +.volumes[76].qos.burst_time"
    assert result.volumes[76].qos.min_iops == 100, "Died on +.volumes[76].qos.min_iops"
    assert result.volumes[76].qos.max_iops == 15000, "Died on +.volumes[76].qos.max_iops"
    assert result.volumes[76].name == """snapshots-source-77""", "Died on +.volumes[76].name"
    assert result.volumes[76].volume_access_groups[0] == 4, "Died on +.volumes[76].volume_access_groups[0]"
    assert result.volumes[76].scsi_naadevice_id == """6f47acc1000000006d69643400000241""", "Died on +.volumes[76].scsi_naadevice_id"
    assert result.volumes[76].total_size == 5000658944, "Died on +.volumes[76].total_size"
    assert result.volumes[76].block_size == 4096, "Died on +.volumes[76].block_size"
    assert result.volumes[76].scsi_euidevice_id == """6d69643400000241f47acc0100000000""", "Died on +.volumes[76].scsi_euidevice_id"
    assert result.volumes[76].volume_id == 577, "Died on +.volumes[76].volume_id"
    assert result.volumes[76].access == """readWrite""", "Died on +.volumes[76].access"
    assert result.volumes[76].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-77.577""", "Died on +.volumes[76].iqn"
    assert result.volumes[76].slice_count == 1, "Died on +.volumes[76].slice_count"
    assert type(result.volumes[76].attributes) is dict, "Died on .volumes[76].attributes"
    assert result.volumes[76].volume_pairs[0].volume_pair_uuid == UUID("8cceabdc-887f-41eb-9641-61434542a786"), "Died on .volumes[76].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[76].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[76].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[76].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[76].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[76].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[76].volume_pairs[0].remote_replication.state"
    assert result.volumes[76].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[76].volume_pairs[0].remote_replication.mode"
    assert result.volumes[76].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[76].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[76].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[76].volume_pairs[0].cluster_pair_id"
    assert result.volumes[76].volume_pairs[0].remote_volume_id == 1077, "Died on +.volumes[76].volume_pairs[0].remote_volume_id"
    assert result.volumes[76].volume_pairs[0].remote_volume_name == """snap-target-77""", "Died on +.volumes[76].volume_pairs[0].remote_volume_name"
    assert result.volumes[76].volume_pairs[0].remote_slice_id == 1077, "Died on +.volumes[76].volume_pairs[0].remote_slice_id"
    assert result.volumes[76].account_id == 4, "Died on +.volumes[76].account_id"
    assert result.volumes[76].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[76].create_time"
    assert result.volumes[76].virtual_volume_id is None, "Died on .volumes[76].virtual_volume_id"
    assert result.volumes[75].status == """active""", "Died on +.volumes[75].status"
    assert result.volumes[75].enable512e == False, "Died on +.volumes[75].enable512e"
    assert result.volumes[75].qos.burst_iops == 15000, "Died on +.volumes[75].qos.burst_iops"
    assert result.volumes[75].qos.burst_time == 60, "Died on +.volumes[75].qos.burst_time"
    assert result.volumes[75].qos.min_iops == 100, "Died on +.volumes[75].qos.min_iops"
    assert result.volumes[75].qos.max_iops == 15000, "Died on +.volumes[75].qos.max_iops"
    assert result.volumes[75].name == """snapshots-source-76""", "Died on +.volumes[75].name"
    assert result.volumes[75].volume_access_groups[0] == 4, "Died on +.volumes[75].volume_access_groups[0]"
    assert result.volumes[75].scsi_naadevice_id == """6f47acc1000000006d69643400000240""", "Died on +.volumes[75].scsi_naadevice_id"
    assert result.volumes[75].total_size == 5000658944, "Died on +.volumes[75].total_size"
    assert result.volumes[75].block_size == 4096, "Died on +.volumes[75].block_size"
    assert result.volumes[75].scsi_euidevice_id == """6d69643400000240f47acc0100000000""", "Died on +.volumes[75].scsi_euidevice_id"
    assert result.volumes[75].volume_id == 576, "Died on +.volumes[75].volume_id"
    assert result.volumes[75].access == """readWrite""", "Died on +.volumes[75].access"
    assert result.volumes[75].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-76.576""", "Died on +.volumes[75].iqn"
    assert result.volumes[75].slice_count == 1, "Died on +.volumes[75].slice_count"
    assert type(result.volumes[75].attributes) is dict, "Died on .volumes[75].attributes"
    assert result.volumes[75].volume_pairs[0].volume_pair_uuid == UUID("b82bb6e1-4dd0-4958-90c2-b320d45d5bd5"), "Died on .volumes[75].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[75].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[75].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[75].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[75].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[75].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[75].volume_pairs[0].remote_replication.state"
    assert result.volumes[75].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[75].volume_pairs[0].remote_replication.mode"
    assert result.volumes[75].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[75].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[75].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[75].volume_pairs[0].cluster_pair_id"
    assert result.volumes[75].volume_pairs[0].remote_volume_id == 1076, "Died on +.volumes[75].volume_pairs[0].remote_volume_id"
    assert result.volumes[75].volume_pairs[0].remote_volume_name == """snap-target-76""", "Died on +.volumes[75].volume_pairs[0].remote_volume_name"
    assert result.volumes[75].volume_pairs[0].remote_slice_id == 1076, "Died on +.volumes[75].volume_pairs[0].remote_slice_id"
    assert result.volumes[75].account_id == 4, "Died on +.volumes[75].account_id"
    assert result.volumes[75].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[75].create_time"
    assert result.volumes[75].virtual_volume_id is None, "Died on .volumes[75].virtual_volume_id"
    assert result.volumes[74].status == """active""", "Died on +.volumes[74].status"
    assert result.volumes[74].enable512e == False, "Died on +.volumes[74].enable512e"
    assert result.volumes[74].qos.burst_iops == 15000, "Died on +.volumes[74].qos.burst_iops"
    assert result.volumes[74].qos.burst_time == 60, "Died on +.volumes[74].qos.burst_time"
    assert result.volumes[74].qos.min_iops == 100, "Died on +.volumes[74].qos.min_iops"
    assert result.volumes[74].qos.max_iops == 15000, "Died on +.volumes[74].qos.max_iops"
    assert result.volumes[74].name == """snapshots-source-75""", "Died on +.volumes[74].name"
    assert result.volumes[74].volume_access_groups[0] == 4, "Died on +.volumes[74].volume_access_groups[0]"
    assert result.volumes[74].scsi_naadevice_id == """6f47acc1000000006d6964340000023f""", "Died on +.volumes[74].scsi_naadevice_id"
    assert result.volumes[74].total_size == 5000658944, "Died on +.volumes[74].total_size"
    assert result.volumes[74].block_size == 4096, "Died on +.volumes[74].block_size"
    assert result.volumes[74].scsi_euidevice_id == """6d6964340000023ff47acc0100000000""", "Died on +.volumes[74].scsi_euidevice_id"
    assert result.volumes[74].volume_id == 575, "Died on +.volumes[74].volume_id"
    assert result.volumes[74].access == """readWrite""", "Died on +.volumes[74].access"
    assert result.volumes[74].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-75.575""", "Died on +.volumes[74].iqn"
    assert result.volumes[74].slice_count == 1, "Died on +.volumes[74].slice_count"
    assert type(result.volumes[74].attributes) is dict, "Died on .volumes[74].attributes"
    assert result.volumes[74].volume_pairs[0].volume_pair_uuid == UUID("fa65bcf6-8542-41b3-937d-e57cdb43bed1"), "Died on .volumes[74].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[74].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[74].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[74].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[74].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[74].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[74].volume_pairs[0].remote_replication.state"
    assert result.volumes[74].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[74].volume_pairs[0].remote_replication.mode"
    assert result.volumes[74].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[74].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[74].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[74].volume_pairs[0].cluster_pair_id"
    assert result.volumes[74].volume_pairs[0].remote_volume_id == 1075, "Died on +.volumes[74].volume_pairs[0].remote_volume_id"
    assert result.volumes[74].volume_pairs[0].remote_volume_name == """snap-target-75""", "Died on +.volumes[74].volume_pairs[0].remote_volume_name"
    assert result.volumes[74].volume_pairs[0].remote_slice_id == 1075, "Died on +.volumes[74].volume_pairs[0].remote_slice_id"
    assert result.volumes[74].account_id == 4, "Died on +.volumes[74].account_id"
    assert result.volumes[74].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[74].create_time"
    assert result.volumes[74].virtual_volume_id is None, "Died on .volumes[74].virtual_volume_id"
    assert result.volumes[73].status == """active""", "Died on +.volumes[73].status"
    assert result.volumes[73].enable512e == False, "Died on +.volumes[73].enable512e"
    assert result.volumes[73].qos.burst_iops == 15000, "Died on +.volumes[73].qos.burst_iops"
    assert result.volumes[73].qos.burst_time == 60, "Died on +.volumes[73].qos.burst_time"
    assert result.volumes[73].qos.min_iops == 100, "Died on +.volumes[73].qos.min_iops"
    assert result.volumes[73].qos.max_iops == 15000, "Died on +.volumes[73].qos.max_iops"
    assert result.volumes[73].name == """snapshots-source-74""", "Died on +.volumes[73].name"
    assert result.volumes[73].volume_access_groups[0] == 4, "Died on +.volumes[73].volume_access_groups[0]"
    assert result.volumes[73].scsi_naadevice_id == """6f47acc1000000006d6964340000023e""", "Died on +.volumes[73].scsi_naadevice_id"
    assert result.volumes[73].total_size == 5000658944, "Died on +.volumes[73].total_size"
    assert result.volumes[73].block_size == 4096, "Died on +.volumes[73].block_size"
    assert result.volumes[73].scsi_euidevice_id == """6d6964340000023ef47acc0100000000""", "Died on +.volumes[73].scsi_euidevice_id"
    assert result.volumes[73].volume_id == 574, "Died on +.volumes[73].volume_id"
    assert result.volumes[73].access == """readWrite""", "Died on +.volumes[73].access"
    assert result.volumes[73].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-74.574""", "Died on +.volumes[73].iqn"
    assert result.volumes[73].slice_count == 1, "Died on +.volumes[73].slice_count"
    assert type(result.volumes[73].attributes) is dict, "Died on .volumes[73].attributes"
    assert result.volumes[73].volume_pairs[0].volume_pair_uuid == UUID("6e5b3fe5-43cd-44f1-9e71-6cb654701373"), "Died on .volumes[73].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[73].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[73].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[73].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[73].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[73].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[73].volume_pairs[0].remote_replication.state"
    assert result.volumes[73].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[73].volume_pairs[0].remote_replication.mode"
    assert result.volumes[73].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[73].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[73].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[73].volume_pairs[0].cluster_pair_id"
    assert result.volumes[73].volume_pairs[0].remote_volume_id == 1074, "Died on +.volumes[73].volume_pairs[0].remote_volume_id"
    assert result.volumes[73].volume_pairs[0].remote_volume_name == """snap-target-74""", "Died on +.volumes[73].volume_pairs[0].remote_volume_name"
    assert result.volumes[73].volume_pairs[0].remote_slice_id == 1074, "Died on +.volumes[73].volume_pairs[0].remote_slice_id"
    assert result.volumes[73].account_id == 4, "Died on +.volumes[73].account_id"
    assert result.volumes[73].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[73].create_time"
    assert result.volumes[73].virtual_volume_id is None, "Died on .volumes[73].virtual_volume_id"
    assert result.volumes[72].status == """active""", "Died on +.volumes[72].status"
    assert result.volumes[72].enable512e == False, "Died on +.volumes[72].enable512e"
    assert result.volumes[72].qos.burst_iops == 15000, "Died on +.volumes[72].qos.burst_iops"
    assert result.volumes[72].qos.burst_time == 60, "Died on +.volumes[72].qos.burst_time"
    assert result.volumes[72].qos.min_iops == 100, "Died on +.volumes[72].qos.min_iops"
    assert result.volumes[72].qos.max_iops == 15000, "Died on +.volumes[72].qos.max_iops"
    assert result.volumes[72].name == """snapshots-source-73""", "Died on +.volumes[72].name"
    assert result.volumes[72].volume_access_groups[0] == 4, "Died on +.volumes[72].volume_access_groups[0]"
    assert result.volumes[72].scsi_naadevice_id == """6f47acc1000000006d6964340000023d""", "Died on +.volumes[72].scsi_naadevice_id"
    assert result.volumes[72].total_size == 5000658944, "Died on +.volumes[72].total_size"
    assert result.volumes[72].block_size == 4096, "Died on +.volumes[72].block_size"
    assert result.volumes[72].scsi_euidevice_id == """6d6964340000023df47acc0100000000""", "Died on +.volumes[72].scsi_euidevice_id"
    assert result.volumes[72].volume_id == 573, "Died on +.volumes[72].volume_id"
    assert result.volumes[72].access == """readWrite""", "Died on +.volumes[72].access"
    assert result.volumes[72].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-73.573""", "Died on +.volumes[72].iqn"
    assert result.volumes[72].slice_count == 1, "Died on +.volumes[72].slice_count"
    assert type(result.volumes[72].attributes) is dict, "Died on .volumes[72].attributes"
    assert result.volumes[72].volume_pairs[0].volume_pair_uuid == UUID("b9523da5-9ff6-4b0f-bb20-5049b4b93df9"), "Died on .volumes[72].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[72].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[72].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[72].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[72].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[72].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[72].volume_pairs[0].remote_replication.state"
    assert result.volumes[72].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[72].volume_pairs[0].remote_replication.mode"
    assert result.volumes[72].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[72].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[72].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[72].volume_pairs[0].cluster_pair_id"
    assert result.volumes[72].volume_pairs[0].remote_volume_id == 1073, "Died on +.volumes[72].volume_pairs[0].remote_volume_id"
    assert result.volumes[72].volume_pairs[0].remote_volume_name == """snap-target-73""", "Died on +.volumes[72].volume_pairs[0].remote_volume_name"
    assert result.volumes[72].volume_pairs[0].remote_slice_id == 1073, "Died on +.volumes[72].volume_pairs[0].remote_slice_id"
    assert result.volumes[72].account_id == 4, "Died on +.volumes[72].account_id"
    assert result.volumes[72].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[72].create_time"
    assert result.volumes[72].virtual_volume_id is None, "Died on .volumes[72].virtual_volume_id"
    assert result.volumes[71].status == """active""", "Died on +.volumes[71].status"
    assert result.volumes[71].enable512e == False, "Died on +.volumes[71].enable512e"
    assert result.volumes[71].qos.burst_iops == 15000, "Died on +.volumes[71].qos.burst_iops"
    assert result.volumes[71].qos.burst_time == 60, "Died on +.volumes[71].qos.burst_time"
    assert result.volumes[71].qos.min_iops == 100, "Died on +.volumes[71].qos.min_iops"
    assert result.volumes[71].qos.max_iops == 15000, "Died on +.volumes[71].qos.max_iops"
    assert result.volumes[71].name == """snapshots-source-72""", "Died on +.volumes[71].name"
    assert result.volumes[71].volume_access_groups[0] == 4, "Died on +.volumes[71].volume_access_groups[0]"
    assert result.volumes[71].scsi_naadevice_id == """6f47acc1000000006d6964340000023c""", "Died on +.volumes[71].scsi_naadevice_id"
    assert result.volumes[71].total_size == 5000658944, "Died on +.volumes[71].total_size"
    assert result.volumes[71].block_size == 4096, "Died on +.volumes[71].block_size"
    assert result.volumes[71].scsi_euidevice_id == """6d6964340000023cf47acc0100000000""", "Died on +.volumes[71].scsi_euidevice_id"
    assert result.volumes[71].volume_id == 572, "Died on +.volumes[71].volume_id"
    assert result.volumes[71].access == """readWrite""", "Died on +.volumes[71].access"
    assert result.volumes[71].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-72.572""", "Died on +.volumes[71].iqn"
    assert result.volumes[71].slice_count == 1, "Died on +.volumes[71].slice_count"
    assert type(result.volumes[71].attributes) is dict, "Died on .volumes[71].attributes"
    assert result.volumes[71].volume_pairs[0].volume_pair_uuid == UUID("14197fd9-38b0-4dd6-b7ca-772573dce586"), "Died on .volumes[71].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[71].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[71].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[71].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[71].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[71].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[71].volume_pairs[0].remote_replication.state"
    assert result.volumes[71].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[71].volume_pairs[0].remote_replication.mode"
    assert result.volumes[71].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[71].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[71].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[71].volume_pairs[0].cluster_pair_id"
    assert result.volumes[71].volume_pairs[0].remote_volume_id == 1072, "Died on +.volumes[71].volume_pairs[0].remote_volume_id"
    assert result.volumes[71].volume_pairs[0].remote_volume_name == """snap-target-72""", "Died on +.volumes[71].volume_pairs[0].remote_volume_name"
    assert result.volumes[71].volume_pairs[0].remote_slice_id == 1072, "Died on +.volumes[71].volume_pairs[0].remote_slice_id"
    assert result.volumes[71].account_id == 4, "Died on +.volumes[71].account_id"
    assert result.volumes[71].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[71].create_time"
    assert result.volumes[71].virtual_volume_id is None, "Died on .volumes[71].virtual_volume_id"
    assert result.volumes[70].status == """active""", "Died on +.volumes[70].status"
    assert result.volumes[70].enable512e == False, "Died on +.volumes[70].enable512e"
    assert result.volumes[70].qos.burst_iops == 15000, "Died on +.volumes[70].qos.burst_iops"
    assert result.volumes[70].qos.burst_time == 60, "Died on +.volumes[70].qos.burst_time"
    assert result.volumes[70].qos.min_iops == 100, "Died on +.volumes[70].qos.min_iops"
    assert result.volumes[70].qos.max_iops == 15000, "Died on +.volumes[70].qos.max_iops"
    assert result.volumes[70].name == """snapshots-source-71""", "Died on +.volumes[70].name"
    assert result.volumes[70].volume_access_groups[0] == 4, "Died on +.volumes[70].volume_access_groups[0]"
    assert result.volumes[70].scsi_naadevice_id == """6f47acc1000000006d6964340000023b""", "Died on +.volumes[70].scsi_naadevice_id"
    assert result.volumes[70].total_size == 5000658944, "Died on +.volumes[70].total_size"
    assert result.volumes[70].block_size == 4096, "Died on +.volumes[70].block_size"
    assert result.volumes[70].scsi_euidevice_id == """6d6964340000023bf47acc0100000000""", "Died on +.volumes[70].scsi_euidevice_id"
    assert result.volumes[70].volume_id == 571, "Died on +.volumes[70].volume_id"
    assert result.volumes[70].access == """readWrite""", "Died on +.volumes[70].access"
    assert result.volumes[70].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-71.571""", "Died on +.volumes[70].iqn"
    assert result.volumes[70].slice_count == 1, "Died on +.volumes[70].slice_count"
    assert type(result.volumes[70].attributes) is dict, "Died on .volumes[70].attributes"
    assert result.volumes[70].volume_pairs[0].volume_pair_uuid == UUID("0506cbad-3f60-4485-bd84-31da90a5f3fb"), "Died on .volumes[70].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[70].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[70].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[70].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[70].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[70].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[70].volume_pairs[0].remote_replication.state"
    assert result.volumes[70].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[70].volume_pairs[0].remote_replication.mode"
    assert result.volumes[70].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[70].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[70].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[70].volume_pairs[0].cluster_pair_id"
    assert result.volumes[70].volume_pairs[0].remote_volume_id == 1071, "Died on +.volumes[70].volume_pairs[0].remote_volume_id"
    assert result.volumes[70].volume_pairs[0].remote_volume_name == """snap-target-71""", "Died on +.volumes[70].volume_pairs[0].remote_volume_name"
    assert result.volumes[70].volume_pairs[0].remote_slice_id == 1071, "Died on +.volumes[70].volume_pairs[0].remote_slice_id"
    assert result.volumes[70].account_id == 4, "Died on +.volumes[70].account_id"
    assert result.volumes[70].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[70].create_time"
    assert result.volumes[70].virtual_volume_id is None, "Died on .volumes[70].virtual_volume_id"
    assert result.volumes[69].status == """active""", "Died on +.volumes[69].status"
    assert result.volumes[69].enable512e == False, "Died on +.volumes[69].enable512e"
    assert result.volumes[69].qos.burst_iops == 15000, "Died on +.volumes[69].qos.burst_iops"
    assert result.volumes[69].qos.burst_time == 60, "Died on +.volumes[69].qos.burst_time"
    assert result.volumes[69].qos.min_iops == 100, "Died on +.volumes[69].qos.min_iops"
    assert result.volumes[69].qos.max_iops == 15000, "Died on +.volumes[69].qos.max_iops"
    assert result.volumes[69].name == """snapshots-source-70""", "Died on +.volumes[69].name"
    assert result.volumes[69].volume_access_groups[0] == 4, "Died on +.volumes[69].volume_access_groups[0]"
    assert result.volumes[69].scsi_naadevice_id == """6f47acc1000000006d6964340000023a""", "Died on +.volumes[69].scsi_naadevice_id"
    assert result.volumes[69].total_size == 5000658944, "Died on +.volumes[69].total_size"
    assert result.volumes[69].block_size == 4096, "Died on +.volumes[69].block_size"
    assert result.volumes[69].scsi_euidevice_id == """6d6964340000023af47acc0100000000""", "Died on +.volumes[69].scsi_euidevice_id"
    assert result.volumes[69].volume_id == 570, "Died on +.volumes[69].volume_id"
    assert result.volumes[69].access == """readWrite""", "Died on +.volumes[69].access"
    assert result.volumes[69].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-70.570""", "Died on +.volumes[69].iqn"
    assert result.volumes[69].slice_count == 1, "Died on +.volumes[69].slice_count"
    assert type(result.volumes[69].attributes) is dict, "Died on .volumes[69].attributes"
    assert result.volumes[69].volume_pairs[0].volume_pair_uuid == UUID("51af4b49-c731-4324-a7bc-bf5dbb673cac"), "Died on .volumes[69].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[69].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[69].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[69].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[69].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[69].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[69].volume_pairs[0].remote_replication.state"
    assert result.volumes[69].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[69].volume_pairs[0].remote_replication.mode"
    assert result.volumes[69].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[69].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[69].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[69].volume_pairs[0].cluster_pair_id"
    assert result.volumes[69].volume_pairs[0].remote_volume_id == 1070, "Died on +.volumes[69].volume_pairs[0].remote_volume_id"
    assert result.volumes[69].volume_pairs[0].remote_volume_name == """snap-target-70""", "Died on +.volumes[69].volume_pairs[0].remote_volume_name"
    assert result.volumes[69].volume_pairs[0].remote_slice_id == 1070, "Died on +.volumes[69].volume_pairs[0].remote_slice_id"
    assert result.volumes[69].account_id == 4, "Died on +.volumes[69].account_id"
    assert result.volumes[69].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[69].create_time"
    assert result.volumes[69].virtual_volume_id is None, "Died on .volumes[69].virtual_volume_id"
    assert result.volumes[68].status == """active""", "Died on +.volumes[68].status"
    assert result.volumes[68].enable512e == False, "Died on +.volumes[68].enable512e"
    assert result.volumes[68].qos.burst_iops == 15000, "Died on +.volumes[68].qos.burst_iops"
    assert result.volumes[68].qos.burst_time == 60, "Died on +.volumes[68].qos.burst_time"
    assert result.volumes[68].qos.min_iops == 100, "Died on +.volumes[68].qos.min_iops"
    assert result.volumes[68].qos.max_iops == 15000, "Died on +.volumes[68].qos.max_iops"
    assert result.volumes[68].name == """snapshots-source-69""", "Died on +.volumes[68].name"
    assert result.volumes[68].volume_access_groups[0] == 4, "Died on +.volumes[68].volume_access_groups[0]"
    assert result.volumes[68].scsi_naadevice_id == """6f47acc1000000006d69643400000239""", "Died on +.volumes[68].scsi_naadevice_id"
    assert result.volumes[68].total_size == 5000658944, "Died on +.volumes[68].total_size"
    assert result.volumes[68].block_size == 4096, "Died on +.volumes[68].block_size"
    assert result.volumes[68].scsi_euidevice_id == """6d69643400000239f47acc0100000000""", "Died on +.volumes[68].scsi_euidevice_id"
    assert result.volumes[68].volume_id == 569, "Died on +.volumes[68].volume_id"
    assert result.volumes[68].access == """readWrite""", "Died on +.volumes[68].access"
    assert result.volumes[68].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-69.569""", "Died on +.volumes[68].iqn"
    assert result.volumes[68].slice_count == 1, "Died on +.volumes[68].slice_count"
    assert type(result.volumes[68].attributes) is dict, "Died on .volumes[68].attributes"
    assert result.volumes[68].volume_pairs[0].volume_pair_uuid == UUID("ab2d4310-b91d-4af4-815b-7bb6699802e4"), "Died on .volumes[68].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[68].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[68].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[68].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[68].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[68].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[68].volume_pairs[0].remote_replication.state"
    assert result.volumes[68].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[68].volume_pairs[0].remote_replication.mode"
    assert result.volumes[68].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[68].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[68].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[68].volume_pairs[0].cluster_pair_id"
    assert result.volumes[68].volume_pairs[0].remote_volume_id == 1069, "Died on +.volumes[68].volume_pairs[0].remote_volume_id"
    assert result.volumes[68].volume_pairs[0].remote_volume_name == """snap-target-69""", "Died on +.volumes[68].volume_pairs[0].remote_volume_name"
    assert result.volumes[68].volume_pairs[0].remote_slice_id == 1069, "Died on +.volumes[68].volume_pairs[0].remote_slice_id"
    assert result.volumes[68].account_id == 4, "Died on +.volumes[68].account_id"
    assert result.volumes[68].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[68].create_time"
    assert result.volumes[68].virtual_volume_id is None, "Died on .volumes[68].virtual_volume_id"
    assert result.volumes[67].status == """active""", "Died on +.volumes[67].status"
    assert result.volumes[67].enable512e == False, "Died on +.volumes[67].enable512e"
    assert result.volumes[67].qos.burst_iops == 15000, "Died on +.volumes[67].qos.burst_iops"
    assert result.volumes[67].qos.burst_time == 60, "Died on +.volumes[67].qos.burst_time"
    assert result.volumes[67].qos.min_iops == 100, "Died on +.volumes[67].qos.min_iops"
    assert result.volumes[67].qos.max_iops == 15000, "Died on +.volumes[67].qos.max_iops"
    assert result.volumes[67].name == """snapshots-source-68""", "Died on +.volumes[67].name"
    assert result.volumes[67].volume_access_groups[0] == 4, "Died on +.volumes[67].volume_access_groups[0]"
    assert result.volumes[67].scsi_naadevice_id == """6f47acc1000000006d69643400000238""", "Died on +.volumes[67].scsi_naadevice_id"
    assert result.volumes[67].total_size == 5000658944, "Died on +.volumes[67].total_size"
    assert result.volumes[67].block_size == 4096, "Died on +.volumes[67].block_size"
    assert result.volumes[67].scsi_euidevice_id == """6d69643400000238f47acc0100000000""", "Died on +.volumes[67].scsi_euidevice_id"
    assert result.volumes[67].volume_id == 568, "Died on +.volumes[67].volume_id"
    assert result.volumes[67].access == """readWrite""", "Died on +.volumes[67].access"
    assert result.volumes[67].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-68.568""", "Died on +.volumes[67].iqn"
    assert result.volumes[67].slice_count == 1, "Died on +.volumes[67].slice_count"
    assert type(result.volumes[67].attributes) is dict, "Died on .volumes[67].attributes"
    assert result.volumes[67].volume_pairs[0].volume_pair_uuid == UUID("69b3525a-bb33-47a6-ad0d-e54354b87319"), "Died on .volumes[67].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[67].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[67].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[67].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[67].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[67].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[67].volume_pairs[0].remote_replication.state"
    assert result.volumes[67].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[67].volume_pairs[0].remote_replication.mode"
    assert result.volumes[67].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[67].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[67].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[67].volume_pairs[0].cluster_pair_id"
    assert result.volumes[67].volume_pairs[0].remote_volume_id == 1068, "Died on +.volumes[67].volume_pairs[0].remote_volume_id"
    assert result.volumes[67].volume_pairs[0].remote_volume_name == """snap-target-68""", "Died on +.volumes[67].volume_pairs[0].remote_volume_name"
    assert result.volumes[67].volume_pairs[0].remote_slice_id == 1068, "Died on +.volumes[67].volume_pairs[0].remote_slice_id"
    assert result.volumes[67].account_id == 4, "Died on +.volumes[67].account_id"
    assert result.volumes[67].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[67].create_time"
    assert result.volumes[67].virtual_volume_id is None, "Died on .volumes[67].virtual_volume_id"
    assert result.volumes[66].status == """active""", "Died on +.volumes[66].status"
    assert result.volumes[66].enable512e == False, "Died on +.volumes[66].enable512e"
    assert result.volumes[66].qos.burst_iops == 15000, "Died on +.volumes[66].qos.burst_iops"
    assert result.volumes[66].qos.burst_time == 60, "Died on +.volumes[66].qos.burst_time"
    assert result.volumes[66].qos.min_iops == 100, "Died on +.volumes[66].qos.min_iops"
    assert result.volumes[66].qos.max_iops == 15000, "Died on +.volumes[66].qos.max_iops"
    assert result.volumes[66].name == """snapshots-source-67""", "Died on +.volumes[66].name"
    assert result.volumes[66].volume_access_groups[0] == 4, "Died on +.volumes[66].volume_access_groups[0]"
    assert result.volumes[66].scsi_naadevice_id == """6f47acc1000000006d69643400000237""", "Died on +.volumes[66].scsi_naadevice_id"
    assert result.volumes[66].total_size == 5000658944, "Died on +.volumes[66].total_size"
    assert result.volumes[66].block_size == 4096, "Died on +.volumes[66].block_size"
    assert result.volumes[66].scsi_euidevice_id == """6d69643400000237f47acc0100000000""", "Died on +.volumes[66].scsi_euidevice_id"
    assert result.volumes[66].volume_id == 567, "Died on +.volumes[66].volume_id"
    assert result.volumes[66].access == """readWrite""", "Died on +.volumes[66].access"
    assert result.volumes[66].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-67.567""", "Died on +.volumes[66].iqn"
    assert result.volumes[66].slice_count == 1, "Died on +.volumes[66].slice_count"
    assert type(result.volumes[66].attributes) is dict, "Died on .volumes[66].attributes"
    assert result.volumes[66].volume_pairs[0].volume_pair_uuid == UUID("aa3e75fa-c8ba-470d-810b-20eb68e56350"), "Died on .volumes[66].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[66].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[66].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[66].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[66].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[66].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[66].volume_pairs[0].remote_replication.state"
    assert result.volumes[66].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[66].volume_pairs[0].remote_replication.mode"
    assert result.volumes[66].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[66].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[66].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[66].volume_pairs[0].cluster_pair_id"
    assert result.volumes[66].volume_pairs[0].remote_volume_id == 1067, "Died on +.volumes[66].volume_pairs[0].remote_volume_id"
    assert result.volumes[66].volume_pairs[0].remote_volume_name == """snap-target-67""", "Died on +.volumes[66].volume_pairs[0].remote_volume_name"
    assert result.volumes[66].volume_pairs[0].remote_slice_id == 1067, "Died on +.volumes[66].volume_pairs[0].remote_slice_id"
    assert result.volumes[66].account_id == 4, "Died on +.volumes[66].account_id"
    assert result.volumes[66].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[66].create_time"
    assert result.volumes[66].virtual_volume_id is None, "Died on .volumes[66].virtual_volume_id"
    assert result.volumes[65].status == """active""", "Died on +.volumes[65].status"
    assert result.volumes[65].enable512e == False, "Died on +.volumes[65].enable512e"
    assert result.volumes[65].qos.burst_iops == 15000, "Died on +.volumes[65].qos.burst_iops"
    assert result.volumes[65].qos.burst_time == 60, "Died on +.volumes[65].qos.burst_time"
    assert result.volumes[65].qos.min_iops == 100, "Died on +.volumes[65].qos.min_iops"
    assert result.volumes[65].qos.max_iops == 15000, "Died on +.volumes[65].qos.max_iops"
    assert result.volumes[65].name == """snapshots-source-66""", "Died on +.volumes[65].name"
    assert result.volumes[65].volume_access_groups[0] == 4, "Died on +.volumes[65].volume_access_groups[0]"
    assert result.volumes[65].scsi_naadevice_id == """6f47acc1000000006d69643400000236""", "Died on +.volumes[65].scsi_naadevice_id"
    assert result.volumes[65].total_size == 5000658944, "Died on +.volumes[65].total_size"
    assert result.volumes[65].block_size == 4096, "Died on +.volumes[65].block_size"
    assert result.volumes[65].scsi_euidevice_id == """6d69643400000236f47acc0100000000""", "Died on +.volumes[65].scsi_euidevice_id"
    assert result.volumes[65].volume_id == 566, "Died on +.volumes[65].volume_id"
    assert result.volumes[65].access == """readWrite""", "Died on +.volumes[65].access"
    assert result.volumes[65].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-66.566""", "Died on +.volumes[65].iqn"
    assert result.volumes[65].slice_count == 1, "Died on +.volumes[65].slice_count"
    assert type(result.volumes[65].attributes) is dict, "Died on .volumes[65].attributes"
    assert result.volumes[65].volume_pairs[0].volume_pair_uuid == UUID("ccc819c2-785d-4605-b742-e3dd3bba5450"), "Died on .volumes[65].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[65].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[65].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[65].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[65].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[65].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[65].volume_pairs[0].remote_replication.state"
    assert result.volumes[65].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[65].volume_pairs[0].remote_replication.mode"
    assert result.volumes[65].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[65].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[65].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[65].volume_pairs[0].cluster_pair_id"
    assert result.volumes[65].volume_pairs[0].remote_volume_id == 1066, "Died on +.volumes[65].volume_pairs[0].remote_volume_id"
    assert result.volumes[65].volume_pairs[0].remote_volume_name == """snap-target-66""", "Died on +.volumes[65].volume_pairs[0].remote_volume_name"
    assert result.volumes[65].volume_pairs[0].remote_slice_id == 1066, "Died on +.volumes[65].volume_pairs[0].remote_slice_id"
    assert result.volumes[65].account_id == 4, "Died on +.volumes[65].account_id"
    assert result.volumes[65].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[65].create_time"
    assert result.volumes[65].virtual_volume_id is None, "Died on .volumes[65].virtual_volume_id"
    assert result.volumes[64].status == """active""", "Died on +.volumes[64].status"
    assert result.volumes[64].enable512e == False, "Died on +.volumes[64].enable512e"
    assert result.volumes[64].qos.burst_iops == 15000, "Died on +.volumes[64].qos.burst_iops"
    assert result.volumes[64].qos.burst_time == 60, "Died on +.volumes[64].qos.burst_time"
    assert result.volumes[64].qos.min_iops == 100, "Died on +.volumes[64].qos.min_iops"
    assert result.volumes[64].qos.max_iops == 15000, "Died on +.volumes[64].qos.max_iops"
    assert result.volumes[64].name == """snapshots-source-65""", "Died on +.volumes[64].name"
    assert result.volumes[64].volume_access_groups[0] == 4, "Died on +.volumes[64].volume_access_groups[0]"
    assert result.volumes[64].scsi_naadevice_id == """6f47acc1000000006d69643400000235""", "Died on +.volumes[64].scsi_naadevice_id"
    assert result.volumes[64].total_size == 5000658944, "Died on +.volumes[64].total_size"
    assert result.volumes[64].block_size == 4096, "Died on +.volumes[64].block_size"
    assert result.volumes[64].scsi_euidevice_id == """6d69643400000235f47acc0100000000""", "Died on +.volumes[64].scsi_euidevice_id"
    assert result.volumes[64].volume_id == 565, "Died on +.volumes[64].volume_id"
    assert result.volumes[64].access == """readWrite""", "Died on +.volumes[64].access"
    assert result.volumes[64].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-65.565""", "Died on +.volumes[64].iqn"
    assert result.volumes[64].slice_count == 1, "Died on +.volumes[64].slice_count"
    assert type(result.volumes[64].attributes) is dict, "Died on .volumes[64].attributes"
    assert result.volumes[64].volume_pairs[0].volume_pair_uuid == UUID("e5428138-39e9-402c-a0b6-2b597aedc696"), "Died on .volumes[64].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[64].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[64].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[64].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[64].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[64].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[64].volume_pairs[0].remote_replication.state"
    assert result.volumes[64].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[64].volume_pairs[0].remote_replication.mode"
    assert result.volumes[64].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[64].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[64].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[64].volume_pairs[0].cluster_pair_id"
    assert result.volumes[64].volume_pairs[0].remote_volume_id == 1065, "Died on +.volumes[64].volume_pairs[0].remote_volume_id"
    assert result.volumes[64].volume_pairs[0].remote_volume_name == """snap-target-65""", "Died on +.volumes[64].volume_pairs[0].remote_volume_name"
    assert result.volumes[64].volume_pairs[0].remote_slice_id == 1065, "Died on +.volumes[64].volume_pairs[0].remote_slice_id"
    assert result.volumes[64].account_id == 4, "Died on +.volumes[64].account_id"
    assert result.volumes[64].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[64].create_time"
    assert result.volumes[64].virtual_volume_id is None, "Died on .volumes[64].virtual_volume_id"
    assert result.volumes[63].status == """active""", "Died on +.volumes[63].status"
    assert result.volumes[63].enable512e == False, "Died on +.volumes[63].enable512e"
    assert result.volumes[63].qos.burst_iops == 15000, "Died on +.volumes[63].qos.burst_iops"
    assert result.volumes[63].qos.burst_time == 60, "Died on +.volumes[63].qos.burst_time"
    assert result.volumes[63].qos.min_iops == 100, "Died on +.volumes[63].qos.min_iops"
    assert result.volumes[63].qos.max_iops == 15000, "Died on +.volumes[63].qos.max_iops"
    assert result.volumes[63].name == """snapshots-source-64""", "Died on +.volumes[63].name"
    assert result.volumes[63].volume_access_groups[0] == 4, "Died on +.volumes[63].volume_access_groups[0]"
    assert result.volumes[63].scsi_naadevice_id == """6f47acc1000000006d69643400000234""", "Died on +.volumes[63].scsi_naadevice_id"
    assert result.volumes[63].total_size == 5000658944, "Died on +.volumes[63].total_size"
    assert result.volumes[63].block_size == 4096, "Died on +.volumes[63].block_size"
    assert result.volumes[63].scsi_euidevice_id == """6d69643400000234f47acc0100000000""", "Died on +.volumes[63].scsi_euidevice_id"
    assert result.volumes[63].volume_id == 564, "Died on +.volumes[63].volume_id"
    assert result.volumes[63].access == """readWrite""", "Died on +.volumes[63].access"
    assert result.volumes[63].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-64.564""", "Died on +.volumes[63].iqn"
    assert result.volumes[63].slice_count == 1, "Died on +.volumes[63].slice_count"
    assert type(result.volumes[63].attributes) is dict, "Died on .volumes[63].attributes"
    assert result.volumes[63].volume_pairs[0].volume_pair_uuid == UUID("9b0f95dd-d4cd-40e3-b497-b183f3d28f93"), "Died on .volumes[63].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[63].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[63].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[63].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[63].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[63].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[63].volume_pairs[0].remote_replication.state"
    assert result.volumes[63].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[63].volume_pairs[0].remote_replication.mode"
    assert result.volumes[63].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[63].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[63].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[63].volume_pairs[0].cluster_pair_id"
    assert result.volumes[63].volume_pairs[0].remote_volume_id == 1064, "Died on +.volumes[63].volume_pairs[0].remote_volume_id"
    assert result.volumes[63].volume_pairs[0].remote_volume_name == """snap-target-64""", "Died on +.volumes[63].volume_pairs[0].remote_volume_name"
    assert result.volumes[63].volume_pairs[0].remote_slice_id == 1064, "Died on +.volumes[63].volume_pairs[0].remote_slice_id"
    assert result.volumes[63].account_id == 4, "Died on +.volumes[63].account_id"
    assert result.volumes[63].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[63].create_time"
    assert result.volumes[63].virtual_volume_id is None, "Died on .volumes[63].virtual_volume_id"
    assert result.volumes[62].status == """active""", "Died on +.volumes[62].status"
    assert result.volumes[62].enable512e == False, "Died on +.volumes[62].enable512e"
    assert result.volumes[62].qos.burst_iops == 15000, "Died on +.volumes[62].qos.burst_iops"
    assert result.volumes[62].qos.burst_time == 60, "Died on +.volumes[62].qos.burst_time"
    assert result.volumes[62].qos.min_iops == 100, "Died on +.volumes[62].qos.min_iops"
    assert result.volumes[62].qos.max_iops == 15000, "Died on +.volumes[62].qos.max_iops"
    assert result.volumes[62].name == """snapshots-source-63""", "Died on +.volumes[62].name"
    assert result.volumes[62].volume_access_groups[0] == 4, "Died on +.volumes[62].volume_access_groups[0]"
    assert result.volumes[62].scsi_naadevice_id == """6f47acc1000000006d69643400000233""", "Died on +.volumes[62].scsi_naadevice_id"
    assert result.volumes[62].total_size == 5000658944, "Died on +.volumes[62].total_size"
    assert result.volumes[62].block_size == 4096, "Died on +.volumes[62].block_size"
    assert result.volumes[62].scsi_euidevice_id == """6d69643400000233f47acc0100000000""", "Died on +.volumes[62].scsi_euidevice_id"
    assert result.volumes[62].volume_id == 563, "Died on +.volumes[62].volume_id"
    assert result.volumes[62].access == """readWrite""", "Died on +.volumes[62].access"
    assert result.volumes[62].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-63.563""", "Died on +.volumes[62].iqn"
    assert result.volumes[62].slice_count == 1, "Died on +.volumes[62].slice_count"
    assert type(result.volumes[62].attributes) is dict, "Died on .volumes[62].attributes"
    assert result.volumes[62].volume_pairs[0].volume_pair_uuid == UUID("72f3f609-fdaa-49a1-93af-c5f1ccc2e492"), "Died on .volumes[62].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[62].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[62].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[62].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[62].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[62].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[62].volume_pairs[0].remote_replication.state"
    assert result.volumes[62].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[62].volume_pairs[0].remote_replication.mode"
    assert result.volumes[62].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[62].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[62].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[62].volume_pairs[0].cluster_pair_id"
    assert result.volumes[62].volume_pairs[0].remote_volume_id == 1063, "Died on +.volumes[62].volume_pairs[0].remote_volume_id"
    assert result.volumes[62].volume_pairs[0].remote_volume_name == """snap-target-63""", "Died on +.volumes[62].volume_pairs[0].remote_volume_name"
    assert result.volumes[62].volume_pairs[0].remote_slice_id == 1063, "Died on +.volumes[62].volume_pairs[0].remote_slice_id"
    assert result.volumes[62].account_id == 4, "Died on +.volumes[62].account_id"
    assert result.volumes[62].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[62].create_time"
    assert result.volumes[62].virtual_volume_id is None, "Died on .volumes[62].virtual_volume_id"
    assert result.volumes[61].status == """active""", "Died on +.volumes[61].status"
    assert result.volumes[61].enable512e == False, "Died on +.volumes[61].enable512e"
    assert result.volumes[61].qos.burst_iops == 15000, "Died on +.volumes[61].qos.burst_iops"
    assert result.volumes[61].qos.burst_time == 60, "Died on +.volumes[61].qos.burst_time"
    assert result.volumes[61].qos.min_iops == 100, "Died on +.volumes[61].qos.min_iops"
    assert result.volumes[61].qos.max_iops == 15000, "Died on +.volumes[61].qos.max_iops"
    assert result.volumes[61].name == """snapshots-source-62""", "Died on +.volumes[61].name"
    assert result.volumes[61].volume_access_groups[0] == 4, "Died on +.volumes[61].volume_access_groups[0]"
    assert result.volumes[61].scsi_naadevice_id == """6f47acc1000000006d69643400000232""", "Died on +.volumes[61].scsi_naadevice_id"
    assert result.volumes[61].total_size == 5000658944, "Died on +.volumes[61].total_size"
    assert result.volumes[61].block_size == 4096, "Died on +.volumes[61].block_size"
    assert result.volumes[61].scsi_euidevice_id == """6d69643400000232f47acc0100000000""", "Died on +.volumes[61].scsi_euidevice_id"
    assert result.volumes[61].volume_id == 562, "Died on +.volumes[61].volume_id"
    assert result.volumes[61].access == """readWrite""", "Died on +.volumes[61].access"
    assert result.volumes[61].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-62.562""", "Died on +.volumes[61].iqn"
    assert result.volumes[61].slice_count == 1, "Died on +.volumes[61].slice_count"
    assert type(result.volumes[61].attributes) is dict, "Died on .volumes[61].attributes"
    assert result.volumes[61].volume_pairs[0].volume_pair_uuid == UUID("8ba7a4d8-d99c-419f-9f9f-235943288683"), "Died on .volumes[61].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[61].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[61].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[61].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[61].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[61].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[61].volume_pairs[0].remote_replication.state"
    assert result.volumes[61].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[61].volume_pairs[0].remote_replication.mode"
    assert result.volumes[61].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[61].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[61].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[61].volume_pairs[0].cluster_pair_id"
    assert result.volumes[61].volume_pairs[0].remote_volume_id == 1062, "Died on +.volumes[61].volume_pairs[0].remote_volume_id"
    assert result.volumes[61].volume_pairs[0].remote_volume_name == """snap-target-62""", "Died on +.volumes[61].volume_pairs[0].remote_volume_name"
    assert result.volumes[61].volume_pairs[0].remote_slice_id == 1062, "Died on +.volumes[61].volume_pairs[0].remote_slice_id"
    assert result.volumes[61].account_id == 4, "Died on +.volumes[61].account_id"
    assert result.volumes[61].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[61].create_time"
    assert result.volumes[61].virtual_volume_id is None, "Died on .volumes[61].virtual_volume_id"
    assert result.volumes[60].status == """active""", "Died on +.volumes[60].status"
    assert result.volumes[60].enable512e == False, "Died on +.volumes[60].enable512e"
    assert result.volumes[60].qos.burst_iops == 15000, "Died on +.volumes[60].qos.burst_iops"
    assert result.volumes[60].qos.burst_time == 60, "Died on +.volumes[60].qos.burst_time"
    assert result.volumes[60].qos.min_iops == 100, "Died on +.volumes[60].qos.min_iops"
    assert result.volumes[60].qos.max_iops == 15000, "Died on +.volumes[60].qos.max_iops"
    assert result.volumes[60].name == """snapshots-source-61""", "Died on +.volumes[60].name"
    assert result.volumes[60].volume_access_groups[0] == 4, "Died on +.volumes[60].volume_access_groups[0]"
    assert result.volumes[60].scsi_naadevice_id == """6f47acc1000000006d69643400000231""", "Died on +.volumes[60].scsi_naadevice_id"
    assert result.volumes[60].total_size == 5000658944, "Died on +.volumes[60].total_size"
    assert result.volumes[60].block_size == 4096, "Died on +.volumes[60].block_size"
    assert result.volumes[60].scsi_euidevice_id == """6d69643400000231f47acc0100000000""", "Died on +.volumes[60].scsi_euidevice_id"
    assert result.volumes[60].volume_id == 561, "Died on +.volumes[60].volume_id"
    assert result.volumes[60].access == """readWrite""", "Died on +.volumes[60].access"
    assert result.volumes[60].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-61.561""", "Died on +.volumes[60].iqn"
    assert result.volumes[60].slice_count == 1, "Died on +.volumes[60].slice_count"
    assert type(result.volumes[60].attributes) is dict, "Died on .volumes[60].attributes"
    assert result.volumes[60].volume_pairs[0].volume_pair_uuid == UUID("f58403f0-42ea-42d6-aa15-d930d2ef714c"), "Died on .volumes[60].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[60].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[60].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[60].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[60].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[60].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[60].volume_pairs[0].remote_replication.state"
    assert result.volumes[60].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[60].volume_pairs[0].remote_replication.mode"
    assert result.volumes[60].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[60].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[60].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[60].volume_pairs[0].cluster_pair_id"
    assert result.volumes[60].volume_pairs[0].remote_volume_id == 1061, "Died on +.volumes[60].volume_pairs[0].remote_volume_id"
    assert result.volumes[60].volume_pairs[0].remote_volume_name == """snap-target-61""", "Died on +.volumes[60].volume_pairs[0].remote_volume_name"
    assert result.volumes[60].volume_pairs[0].remote_slice_id == 1061, "Died on +.volumes[60].volume_pairs[0].remote_slice_id"
    assert result.volumes[60].account_id == 4, "Died on +.volumes[60].account_id"
    assert result.volumes[60].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[60].create_time"
    assert result.volumes[60].virtual_volume_id is None, "Died on .volumes[60].virtual_volume_id"
    assert result.volumes[59].status == """active""", "Died on +.volumes[59].status"
    assert result.volumes[59].enable512e == False, "Died on +.volumes[59].enable512e"
    assert result.volumes[59].qos.burst_iops == 15000, "Died on +.volumes[59].qos.burst_iops"
    assert result.volumes[59].qos.burst_time == 60, "Died on +.volumes[59].qos.burst_time"
    assert result.volumes[59].qos.min_iops == 100, "Died on +.volumes[59].qos.min_iops"
    assert result.volumes[59].qos.max_iops == 15000, "Died on +.volumes[59].qos.max_iops"
    assert result.volumes[59].name == """snapshots-source-60""", "Died on +.volumes[59].name"
    assert result.volumes[59].volume_access_groups[0] == 4, "Died on +.volumes[59].volume_access_groups[0]"
    assert result.volumes[59].scsi_naadevice_id == """6f47acc1000000006d69643400000230""", "Died on +.volumes[59].scsi_naadevice_id"
    assert result.volumes[59].total_size == 5000658944, "Died on +.volumes[59].total_size"
    assert result.volumes[59].block_size == 4096, "Died on +.volumes[59].block_size"
    assert result.volumes[59].scsi_euidevice_id == """6d69643400000230f47acc0100000000""", "Died on +.volumes[59].scsi_euidevice_id"
    assert result.volumes[59].volume_id == 560, "Died on +.volumes[59].volume_id"
    assert result.volumes[59].access == """readWrite""", "Died on +.volumes[59].access"
    assert result.volumes[59].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-60.560""", "Died on +.volumes[59].iqn"
    assert result.volumes[59].slice_count == 1, "Died on +.volumes[59].slice_count"
    assert type(result.volumes[59].attributes) is dict, "Died on .volumes[59].attributes"
    assert result.volumes[59].volume_pairs[0].volume_pair_uuid == UUID("6d5e64fc-b5d6-4150-88c0-a287bd3c6cb9"), "Died on .volumes[59].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[59].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[59].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[59].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[59].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[59].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[59].volume_pairs[0].remote_replication.state"
    assert result.volumes[59].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[59].volume_pairs[0].remote_replication.mode"
    assert result.volumes[59].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[59].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[59].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[59].volume_pairs[0].cluster_pair_id"
    assert result.volumes[59].volume_pairs[0].remote_volume_id == 1060, "Died on +.volumes[59].volume_pairs[0].remote_volume_id"
    assert result.volumes[59].volume_pairs[0].remote_volume_name == """snap-target-60""", "Died on +.volumes[59].volume_pairs[0].remote_volume_name"
    assert result.volumes[59].volume_pairs[0].remote_slice_id == 1060, "Died on +.volumes[59].volume_pairs[0].remote_slice_id"
    assert result.volumes[59].account_id == 4, "Died on +.volumes[59].account_id"
    assert result.volumes[59].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[59].create_time"
    assert result.volumes[59].virtual_volume_id is None, "Died on .volumes[59].virtual_volume_id"
    assert result.volumes[58].status == """active""", "Died on +.volumes[58].status"
    assert result.volumes[58].enable512e == False, "Died on +.volumes[58].enable512e"
    assert result.volumes[58].qos.burst_iops == 15000, "Died on +.volumes[58].qos.burst_iops"
    assert result.volumes[58].qos.burst_time == 60, "Died on +.volumes[58].qos.burst_time"
    assert result.volumes[58].qos.min_iops == 100, "Died on +.volumes[58].qos.min_iops"
    assert result.volumes[58].qos.max_iops == 15000, "Died on +.volumes[58].qos.max_iops"
    assert result.volumes[58].name == """snapshots-source-59""", "Died on +.volumes[58].name"
    assert result.volumes[58].volume_access_groups[0] == 4, "Died on +.volumes[58].volume_access_groups[0]"
    assert result.volumes[58].scsi_naadevice_id == """6f47acc1000000006d6964340000022f""", "Died on +.volumes[58].scsi_naadevice_id"
    assert result.volumes[58].total_size == 5000658944, "Died on +.volumes[58].total_size"
    assert result.volumes[58].block_size == 4096, "Died on +.volumes[58].block_size"
    assert result.volumes[58].scsi_euidevice_id == """6d6964340000022ff47acc0100000000""", "Died on +.volumes[58].scsi_euidevice_id"
    assert result.volumes[58].volume_id == 559, "Died on +.volumes[58].volume_id"
    assert result.volumes[58].access == """readWrite""", "Died on +.volumes[58].access"
    assert result.volumes[58].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-59.559""", "Died on +.volumes[58].iqn"
    assert result.volumes[58].slice_count == 1, "Died on +.volumes[58].slice_count"
    assert type(result.volumes[58].attributes) is dict, "Died on .volumes[58].attributes"
    assert result.volumes[58].volume_pairs[0].volume_pair_uuid == UUID("2a3628c1-5895-4561-a45f-78d4392c610a"), "Died on .volumes[58].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[58].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[58].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[58].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[58].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[58].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[58].volume_pairs[0].remote_replication.state"
    assert result.volumes[58].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[58].volume_pairs[0].remote_replication.mode"
    assert result.volumes[58].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[58].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[58].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[58].volume_pairs[0].cluster_pair_id"
    assert result.volumes[58].volume_pairs[0].remote_volume_id == 1059, "Died on +.volumes[58].volume_pairs[0].remote_volume_id"
    assert result.volumes[58].volume_pairs[0].remote_volume_name == """snap-target-59""", "Died on +.volumes[58].volume_pairs[0].remote_volume_name"
    assert result.volumes[58].volume_pairs[0].remote_slice_id == 1059, "Died on +.volumes[58].volume_pairs[0].remote_slice_id"
    assert result.volumes[58].account_id == 4, "Died on +.volumes[58].account_id"
    assert result.volumes[58].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[58].create_time"
    assert result.volumes[58].virtual_volume_id is None, "Died on .volumes[58].virtual_volume_id"
    assert result.volumes[57].status == """active""", "Died on +.volumes[57].status"
    assert result.volumes[57].enable512e == False, "Died on +.volumes[57].enable512e"
    assert result.volumes[57].qos.burst_iops == 15000, "Died on +.volumes[57].qos.burst_iops"
    assert result.volumes[57].qos.burst_time == 60, "Died on +.volumes[57].qos.burst_time"
    assert result.volumes[57].qos.min_iops == 100, "Died on +.volumes[57].qos.min_iops"
    assert result.volumes[57].qos.max_iops == 15000, "Died on +.volumes[57].qos.max_iops"
    assert result.volumes[57].name == """snapshots-source-58""", "Died on +.volumes[57].name"
    assert result.volumes[57].volume_access_groups[0] == 4, "Died on +.volumes[57].volume_access_groups[0]"
    assert result.volumes[57].scsi_naadevice_id == """6f47acc1000000006d6964340000022e""", "Died on +.volumes[57].scsi_naadevice_id"
    assert result.volumes[57].total_size == 5000658944, "Died on +.volumes[57].total_size"
    assert result.volumes[57].block_size == 4096, "Died on +.volumes[57].block_size"
    assert result.volumes[57].scsi_euidevice_id == """6d6964340000022ef47acc0100000000""", "Died on +.volumes[57].scsi_euidevice_id"
    assert result.volumes[57].volume_id == 558, "Died on +.volumes[57].volume_id"
    assert result.volumes[57].access == """readWrite""", "Died on +.volumes[57].access"
    assert result.volumes[57].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-58.558""", "Died on +.volumes[57].iqn"
    assert result.volumes[57].slice_count == 1, "Died on +.volumes[57].slice_count"
    assert type(result.volumes[57].attributes) is dict, "Died on .volumes[57].attributes"
    assert result.volumes[57].volume_pairs[0].volume_pair_uuid == UUID("992eefb6-bd47-4eba-a8dd-638c6cb25eb3"), "Died on .volumes[57].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[57].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[57].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[57].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[57].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[57].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[57].volume_pairs[0].remote_replication.state"
    assert result.volumes[57].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[57].volume_pairs[0].remote_replication.mode"
    assert result.volumes[57].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[57].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[57].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[57].volume_pairs[0].cluster_pair_id"
    assert result.volumes[57].volume_pairs[0].remote_volume_id == 1058, "Died on +.volumes[57].volume_pairs[0].remote_volume_id"
    assert result.volumes[57].volume_pairs[0].remote_volume_name == """snap-target-58""", "Died on +.volumes[57].volume_pairs[0].remote_volume_name"
    assert result.volumes[57].volume_pairs[0].remote_slice_id == 1058, "Died on +.volumes[57].volume_pairs[0].remote_slice_id"
    assert result.volumes[57].account_id == 4, "Died on +.volumes[57].account_id"
    assert result.volumes[57].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[57].create_time"
    assert result.volumes[57].virtual_volume_id is None, "Died on .volumes[57].virtual_volume_id"
    assert result.volumes[56].status == """active""", "Died on +.volumes[56].status"
    assert result.volumes[56].enable512e == False, "Died on +.volumes[56].enable512e"
    assert result.volumes[56].qos.burst_iops == 15000, "Died on +.volumes[56].qos.burst_iops"
    assert result.volumes[56].qos.burst_time == 60, "Died on +.volumes[56].qos.burst_time"
    assert result.volumes[56].qos.min_iops == 100, "Died on +.volumes[56].qos.min_iops"
    assert result.volumes[56].qos.max_iops == 15000, "Died on +.volumes[56].qos.max_iops"
    assert result.volumes[56].name == """snapshots-source-57""", "Died on +.volumes[56].name"
    assert result.volumes[56].volume_access_groups[0] == 4, "Died on +.volumes[56].volume_access_groups[0]"
    assert result.volumes[56].scsi_naadevice_id == """6f47acc1000000006d6964340000022d""", "Died on +.volumes[56].scsi_naadevice_id"
    assert result.volumes[56].total_size == 5000658944, "Died on +.volumes[56].total_size"
    assert result.volumes[56].block_size == 4096, "Died on +.volumes[56].block_size"
    assert result.volumes[56].scsi_euidevice_id == """6d6964340000022df47acc0100000000""", "Died on +.volumes[56].scsi_euidevice_id"
    assert result.volumes[56].volume_id == 557, "Died on +.volumes[56].volume_id"
    assert result.volumes[56].access == """readWrite""", "Died on +.volumes[56].access"
    assert result.volumes[56].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-57.557""", "Died on +.volumes[56].iqn"
    assert result.volumes[56].slice_count == 1, "Died on +.volumes[56].slice_count"
    assert type(result.volumes[56].attributes) is dict, "Died on .volumes[56].attributes"
    assert result.volumes[56].volume_pairs[0].volume_pair_uuid == UUID("923ee3bd-536e-411d-8049-8788bd2f448a"), "Died on .volumes[56].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[56].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[56].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[56].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[56].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[56].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[56].volume_pairs[0].remote_replication.state"
    assert result.volumes[56].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[56].volume_pairs[0].remote_replication.mode"
    assert result.volumes[56].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[56].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[56].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[56].volume_pairs[0].cluster_pair_id"
    assert result.volumes[56].volume_pairs[0].remote_volume_id == 1057, "Died on +.volumes[56].volume_pairs[0].remote_volume_id"
    assert result.volumes[56].volume_pairs[0].remote_volume_name == """snap-target-57""", "Died on +.volumes[56].volume_pairs[0].remote_volume_name"
    assert result.volumes[56].volume_pairs[0].remote_slice_id == 1057, "Died on +.volumes[56].volume_pairs[0].remote_slice_id"
    assert result.volumes[56].account_id == 4, "Died on +.volumes[56].account_id"
    assert result.volumes[56].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[56].create_time"
    assert result.volumes[56].virtual_volume_id is None, "Died on .volumes[56].virtual_volume_id"
    assert result.volumes[55].status == """active""", "Died on +.volumes[55].status"
    assert result.volumes[55].enable512e == False, "Died on +.volumes[55].enable512e"
    assert result.volumes[55].qos.burst_iops == 15000, "Died on +.volumes[55].qos.burst_iops"
    assert result.volumes[55].qos.burst_time == 60, "Died on +.volumes[55].qos.burst_time"
    assert result.volumes[55].qos.min_iops == 100, "Died on +.volumes[55].qos.min_iops"
    assert result.volumes[55].qos.max_iops == 15000, "Died on +.volumes[55].qos.max_iops"
    assert result.volumes[55].name == """snapshots-source-56""", "Died on +.volumes[55].name"
    assert result.volumes[55].volume_access_groups[0] == 4, "Died on +.volumes[55].volume_access_groups[0]"
    assert result.volumes[55].scsi_naadevice_id == """6f47acc1000000006d6964340000022c""", "Died on +.volumes[55].scsi_naadevice_id"
    assert result.volumes[55].total_size == 5000658944, "Died on +.volumes[55].total_size"
    assert result.volumes[55].block_size == 4096, "Died on +.volumes[55].block_size"
    assert result.volumes[55].scsi_euidevice_id == """6d6964340000022cf47acc0100000000""", "Died on +.volumes[55].scsi_euidevice_id"
    assert result.volumes[55].volume_id == 556, "Died on +.volumes[55].volume_id"
    assert result.volumes[55].access == """readWrite""", "Died on +.volumes[55].access"
    assert result.volumes[55].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-56.556""", "Died on +.volumes[55].iqn"
    assert result.volumes[55].slice_count == 1, "Died on +.volumes[55].slice_count"
    assert type(result.volumes[55].attributes) is dict, "Died on .volumes[55].attributes"
    assert result.volumes[55].volume_pairs[0].volume_pair_uuid == UUID("dc75c0e8-abe5-4956-a24f-bf3343c7af41"), "Died on .volumes[55].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[55].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[55].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[55].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[55].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[55].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[55].volume_pairs[0].remote_replication.state"
    assert result.volumes[55].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[55].volume_pairs[0].remote_replication.mode"
    assert result.volumes[55].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[55].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[55].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[55].volume_pairs[0].cluster_pair_id"
    assert result.volumes[55].volume_pairs[0].remote_volume_id == 1056, "Died on +.volumes[55].volume_pairs[0].remote_volume_id"
    assert result.volumes[55].volume_pairs[0].remote_volume_name == """snap-target-56""", "Died on +.volumes[55].volume_pairs[0].remote_volume_name"
    assert result.volumes[55].volume_pairs[0].remote_slice_id == 1056, "Died on +.volumes[55].volume_pairs[0].remote_slice_id"
    assert result.volumes[55].account_id == 4, "Died on +.volumes[55].account_id"
    assert result.volumes[55].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[55].create_time"
    assert result.volumes[55].virtual_volume_id is None, "Died on .volumes[55].virtual_volume_id"
    assert result.volumes[54].status == """active""", "Died on +.volumes[54].status"
    assert result.volumes[54].enable512e == False, "Died on +.volumes[54].enable512e"
    assert result.volumes[54].qos.burst_iops == 15000, "Died on +.volumes[54].qos.burst_iops"
    assert result.volumes[54].qos.burst_time == 60, "Died on +.volumes[54].qos.burst_time"
    assert result.volumes[54].qos.min_iops == 100, "Died on +.volumes[54].qos.min_iops"
    assert result.volumes[54].qos.max_iops == 15000, "Died on +.volumes[54].qos.max_iops"
    assert result.volumes[54].name == """snapshots-source-55""", "Died on +.volumes[54].name"
    assert result.volumes[54].volume_access_groups[0] == 4, "Died on +.volumes[54].volume_access_groups[0]"
    assert result.volumes[54].scsi_naadevice_id == """6f47acc1000000006d6964340000022b""", "Died on +.volumes[54].scsi_naadevice_id"
    assert result.volumes[54].total_size == 5000658944, "Died on +.volumes[54].total_size"
    assert result.volumes[54].block_size == 4096, "Died on +.volumes[54].block_size"
    assert result.volumes[54].scsi_euidevice_id == """6d6964340000022bf47acc0100000000""", "Died on +.volumes[54].scsi_euidevice_id"
    assert result.volumes[54].volume_id == 555, "Died on +.volumes[54].volume_id"
    assert result.volumes[54].access == """readWrite""", "Died on +.volumes[54].access"
    assert result.volumes[54].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-55.555""", "Died on +.volumes[54].iqn"
    assert result.volumes[54].slice_count == 1, "Died on +.volumes[54].slice_count"
    assert type(result.volumes[54].attributes) is dict, "Died on .volumes[54].attributes"
    assert result.volumes[54].volume_pairs[0].volume_pair_uuid == UUID("e3ba9aa0-85fa-47ac-8ab3-380bf954ab3b"), "Died on .volumes[54].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[54].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[54].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[54].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[54].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[54].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[54].volume_pairs[0].remote_replication.state"
    assert result.volumes[54].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[54].volume_pairs[0].remote_replication.mode"
    assert result.volumes[54].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[54].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[54].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[54].volume_pairs[0].cluster_pair_id"
    assert result.volumes[54].volume_pairs[0].remote_volume_id == 1055, "Died on +.volumes[54].volume_pairs[0].remote_volume_id"
    assert result.volumes[54].volume_pairs[0].remote_volume_name == """snap-target-55""", "Died on +.volumes[54].volume_pairs[0].remote_volume_name"
    assert result.volumes[54].volume_pairs[0].remote_slice_id == 1055, "Died on +.volumes[54].volume_pairs[0].remote_slice_id"
    assert result.volumes[54].account_id == 4, "Died on +.volumes[54].account_id"
    assert result.volumes[54].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[54].create_time"
    assert result.volumes[54].virtual_volume_id is None, "Died on .volumes[54].virtual_volume_id"
    assert result.volumes[53].status == """active""", "Died on +.volumes[53].status"
    assert result.volumes[53].enable512e == False, "Died on +.volumes[53].enable512e"
    assert result.volumes[53].qos.burst_iops == 15000, "Died on +.volumes[53].qos.burst_iops"
    assert result.volumes[53].qos.burst_time == 60, "Died on +.volumes[53].qos.burst_time"
    assert result.volumes[53].qos.min_iops == 100, "Died on +.volumes[53].qos.min_iops"
    assert result.volumes[53].qos.max_iops == 15000, "Died on +.volumes[53].qos.max_iops"
    assert result.volumes[53].name == """snapshots-source-54""", "Died on +.volumes[53].name"
    assert result.volumes[53].volume_access_groups[0] == 4, "Died on +.volumes[53].volume_access_groups[0]"
    assert result.volumes[53].scsi_naadevice_id == """6f47acc1000000006d6964340000022a""", "Died on +.volumes[53].scsi_naadevice_id"
    assert result.volumes[53].total_size == 5000658944, "Died on +.volumes[53].total_size"
    assert result.volumes[53].block_size == 4096, "Died on +.volumes[53].block_size"
    assert result.volumes[53].scsi_euidevice_id == """6d6964340000022af47acc0100000000""", "Died on +.volumes[53].scsi_euidevice_id"
    assert result.volumes[53].volume_id == 554, "Died on +.volumes[53].volume_id"
    assert result.volumes[53].access == """readWrite""", "Died on +.volumes[53].access"
    assert result.volumes[53].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-54.554""", "Died on +.volumes[53].iqn"
    assert result.volumes[53].slice_count == 1, "Died on +.volumes[53].slice_count"
    assert type(result.volumes[53].attributes) is dict, "Died on .volumes[53].attributes"
    assert result.volumes[53].volume_pairs[0].volume_pair_uuid == UUID("f2e25c6e-bed9-460e-93b0-9f388f06a3e0"), "Died on .volumes[53].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[53].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[53].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[53].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[53].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[53].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[53].volume_pairs[0].remote_replication.state"
    assert result.volumes[53].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[53].volume_pairs[0].remote_replication.mode"
    assert result.volumes[53].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[53].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[53].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[53].volume_pairs[0].cluster_pair_id"
    assert result.volumes[53].volume_pairs[0].remote_volume_id == 1054, "Died on +.volumes[53].volume_pairs[0].remote_volume_id"
    assert result.volumes[53].volume_pairs[0].remote_volume_name == """snap-target-54""", "Died on +.volumes[53].volume_pairs[0].remote_volume_name"
    assert result.volumes[53].volume_pairs[0].remote_slice_id == 1054, "Died on +.volumes[53].volume_pairs[0].remote_slice_id"
    assert result.volumes[53].account_id == 4, "Died on +.volumes[53].account_id"
    assert result.volumes[53].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[53].create_time"
    assert result.volumes[53].virtual_volume_id is None, "Died on .volumes[53].virtual_volume_id"
    assert result.volumes[52].status == """active""", "Died on +.volumes[52].status"
    assert result.volumes[52].enable512e == False, "Died on +.volumes[52].enable512e"
    assert result.volumes[52].qos.burst_iops == 15000, "Died on +.volumes[52].qos.burst_iops"
    assert result.volumes[52].qos.burst_time == 60, "Died on +.volumes[52].qos.burst_time"
    assert result.volumes[52].qos.min_iops == 100, "Died on +.volumes[52].qos.min_iops"
    assert result.volumes[52].qos.max_iops == 15000, "Died on +.volumes[52].qos.max_iops"
    assert result.volumes[52].name == """snapshots-source-53""", "Died on +.volumes[52].name"
    assert result.volumes[52].volume_access_groups[0] == 4, "Died on +.volumes[52].volume_access_groups[0]"
    assert result.volumes[52].scsi_naadevice_id == """6f47acc1000000006d69643400000229""", "Died on +.volumes[52].scsi_naadevice_id"
    assert result.volumes[52].total_size == 5000658944, "Died on +.volumes[52].total_size"
    assert result.volumes[52].block_size == 4096, "Died on +.volumes[52].block_size"
    assert result.volumes[52].scsi_euidevice_id == """6d69643400000229f47acc0100000000""", "Died on +.volumes[52].scsi_euidevice_id"
    assert result.volumes[52].volume_id == 553, "Died on +.volumes[52].volume_id"
    assert result.volumes[52].access == """readWrite""", "Died on +.volumes[52].access"
    assert result.volumes[52].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-53.553""", "Died on +.volumes[52].iqn"
    assert result.volumes[52].slice_count == 1, "Died on +.volumes[52].slice_count"
    assert type(result.volumes[52].attributes) is dict, "Died on .volumes[52].attributes"
    assert result.volumes[52].volume_pairs[0].volume_pair_uuid == UUID("c7012b1b-997d-4cf1-8b10-51c3519bf2a8"), "Died on .volumes[52].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[52].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[52].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[52].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[52].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[52].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[52].volume_pairs[0].remote_replication.state"
    assert result.volumes[52].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[52].volume_pairs[0].remote_replication.mode"
    assert result.volumes[52].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[52].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[52].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[52].volume_pairs[0].cluster_pair_id"
    assert result.volumes[52].volume_pairs[0].remote_volume_id == 1053, "Died on +.volumes[52].volume_pairs[0].remote_volume_id"
    assert result.volumes[52].volume_pairs[0].remote_volume_name == """snap-target-53""", "Died on +.volumes[52].volume_pairs[0].remote_volume_name"
    assert result.volumes[52].volume_pairs[0].remote_slice_id == 1053, "Died on +.volumes[52].volume_pairs[0].remote_slice_id"
    assert result.volumes[52].account_id == 4, "Died on +.volumes[52].account_id"
    assert result.volumes[52].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[52].create_time"
    assert result.volumes[52].virtual_volume_id is None, "Died on .volumes[52].virtual_volume_id"
    assert result.volumes[51].status == """active""", "Died on +.volumes[51].status"
    assert result.volumes[51].enable512e == False, "Died on +.volumes[51].enable512e"
    assert result.volumes[51].qos.burst_iops == 15000, "Died on +.volumes[51].qos.burst_iops"
    assert result.volumes[51].qos.burst_time == 60, "Died on +.volumes[51].qos.burst_time"
    assert result.volumes[51].qos.min_iops == 100, "Died on +.volumes[51].qos.min_iops"
    assert result.volumes[51].qos.max_iops == 15000, "Died on +.volumes[51].qos.max_iops"
    assert result.volumes[51].name == """snapshots-source-52""", "Died on +.volumes[51].name"
    assert result.volumes[51].volume_access_groups[0] == 4, "Died on +.volumes[51].volume_access_groups[0]"
    assert result.volumes[51].scsi_naadevice_id == """6f47acc1000000006d69643400000228""", "Died on +.volumes[51].scsi_naadevice_id"
    assert result.volumes[51].total_size == 5000658944, "Died on +.volumes[51].total_size"
    assert result.volumes[51].block_size == 4096, "Died on +.volumes[51].block_size"
    assert result.volumes[51].scsi_euidevice_id == """6d69643400000228f47acc0100000000""", "Died on +.volumes[51].scsi_euidevice_id"
    assert result.volumes[51].volume_id == 552, "Died on +.volumes[51].volume_id"
    assert result.volumes[51].access == """readWrite""", "Died on +.volumes[51].access"
    assert result.volumes[51].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-52.552""", "Died on +.volumes[51].iqn"
    assert result.volumes[51].slice_count == 1, "Died on +.volumes[51].slice_count"
    assert type(result.volumes[51].attributes) is dict, "Died on .volumes[51].attributes"
    assert result.volumes[51].volume_pairs[0].volume_pair_uuid == UUID("0d4a718f-8d31-4ff7-a3c5-f359cd154592"), "Died on .volumes[51].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[51].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[51].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[51].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[51].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[51].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[51].volume_pairs[0].remote_replication.state"
    assert result.volumes[51].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[51].volume_pairs[0].remote_replication.mode"
    assert result.volumes[51].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[51].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[51].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[51].volume_pairs[0].cluster_pair_id"
    assert result.volumes[51].volume_pairs[0].remote_volume_id == 1052, "Died on +.volumes[51].volume_pairs[0].remote_volume_id"
    assert result.volumes[51].volume_pairs[0].remote_volume_name == """snap-target-52""", "Died on +.volumes[51].volume_pairs[0].remote_volume_name"
    assert result.volumes[51].volume_pairs[0].remote_slice_id == 1052, "Died on +.volumes[51].volume_pairs[0].remote_slice_id"
    assert result.volumes[51].account_id == 4, "Died on +.volumes[51].account_id"
    assert result.volumes[51].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[51].create_time"
    assert result.volumes[51].virtual_volume_id is None, "Died on .volumes[51].virtual_volume_id"
    assert result.volumes[50].status == """active""", "Died on +.volumes[50].status"
    assert result.volumes[50].enable512e == False, "Died on +.volumes[50].enable512e"
    assert result.volumes[50].qos.burst_iops == 15000, "Died on +.volumes[50].qos.burst_iops"
    assert result.volumes[50].qos.burst_time == 60, "Died on +.volumes[50].qos.burst_time"
    assert result.volumes[50].qos.min_iops == 100, "Died on +.volumes[50].qos.min_iops"
    assert result.volumes[50].qos.max_iops == 15000, "Died on +.volumes[50].qos.max_iops"
    assert result.volumes[50].name == """snapshots-source-51""", "Died on +.volumes[50].name"
    assert result.volumes[50].volume_access_groups[0] == 4, "Died on +.volumes[50].volume_access_groups[0]"
    assert result.volumes[50].scsi_naadevice_id == """6f47acc1000000006d69643400000227""", "Died on +.volumes[50].scsi_naadevice_id"
    assert result.volumes[50].total_size == 5000658944, "Died on +.volumes[50].total_size"
    assert result.volumes[50].block_size == 4096, "Died on +.volumes[50].block_size"
    assert result.volumes[50].scsi_euidevice_id == """6d69643400000227f47acc0100000000""", "Died on +.volumes[50].scsi_euidevice_id"
    assert result.volumes[50].volume_id == 551, "Died on +.volumes[50].volume_id"
    assert result.volumes[50].access == """readWrite""", "Died on +.volumes[50].access"
    assert result.volumes[50].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-51.551""", "Died on +.volumes[50].iqn"
    assert result.volumes[50].slice_count == 1, "Died on +.volumes[50].slice_count"
    assert type(result.volumes[50].attributes) is dict, "Died on .volumes[50].attributes"
    assert result.volumes[50].volume_pairs[0].volume_pair_uuid == UUID("4a6b2d5b-a258-4737-bcc1-ae5f7256d150"), "Died on .volumes[50].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[50].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[50].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[50].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[50].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[50].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[50].volume_pairs[0].remote_replication.state"
    assert result.volumes[50].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[50].volume_pairs[0].remote_replication.mode"
    assert result.volumes[50].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[50].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[50].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[50].volume_pairs[0].cluster_pair_id"
    assert result.volumes[50].volume_pairs[0].remote_volume_id == 1051, "Died on +.volumes[50].volume_pairs[0].remote_volume_id"
    assert result.volumes[50].volume_pairs[0].remote_volume_name == """snap-target-51""", "Died on +.volumes[50].volume_pairs[0].remote_volume_name"
    assert result.volumes[50].volume_pairs[0].remote_slice_id == 1051, "Died on +.volumes[50].volume_pairs[0].remote_slice_id"
    assert result.volumes[50].account_id == 4, "Died on +.volumes[50].account_id"
    assert result.volumes[50].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[50].create_time"
    assert result.volumes[50].virtual_volume_id is None, "Died on .volumes[50].virtual_volume_id"
    assert result.volumes[49].status == """active""", "Died on +.volumes[49].status"
    assert result.volumes[49].enable512e == False, "Died on +.volumes[49].enable512e"
    assert result.volumes[49].qos.burst_iops == 15000, "Died on +.volumes[49].qos.burst_iops"
    assert result.volumes[49].qos.burst_time == 60, "Died on +.volumes[49].qos.burst_time"
    assert result.volumes[49].qos.min_iops == 100, "Died on +.volumes[49].qos.min_iops"
    assert result.volumes[49].qos.max_iops == 15000, "Died on +.volumes[49].qos.max_iops"
    assert result.volumes[49].name == """snapshots-source-50""", "Died on +.volumes[49].name"
    assert result.volumes[49].volume_access_groups[0] == 4, "Died on +.volumes[49].volume_access_groups[0]"
    assert result.volumes[49].scsi_naadevice_id == """6f47acc1000000006d69643400000226""", "Died on +.volumes[49].scsi_naadevice_id"
    assert result.volumes[49].total_size == 5000658944, "Died on +.volumes[49].total_size"
    assert result.volumes[49].block_size == 4096, "Died on +.volumes[49].block_size"
    assert result.volumes[49].scsi_euidevice_id == """6d69643400000226f47acc0100000000""", "Died on +.volumes[49].scsi_euidevice_id"
    assert result.volumes[49].volume_id == 550, "Died on +.volumes[49].volume_id"
    assert result.volumes[49].access == """readWrite""", "Died on +.volumes[49].access"
    assert result.volumes[49].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-50.550""", "Died on +.volumes[49].iqn"
    assert result.volumes[49].slice_count == 1, "Died on +.volumes[49].slice_count"
    assert type(result.volumes[49].attributes) is dict, "Died on .volumes[49].attributes"
    assert result.volumes[49].volume_pairs[0].volume_pair_uuid == UUID("92b7315e-635f-4947-a9bd-0e02ac0b5fd8"), "Died on .volumes[49].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[49].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[49].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[49].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[49].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[49].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[49].volume_pairs[0].remote_replication.state"
    assert result.volumes[49].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[49].volume_pairs[0].remote_replication.mode"
    assert result.volumes[49].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[49].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[49].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[49].volume_pairs[0].cluster_pair_id"
    assert result.volumes[49].volume_pairs[0].remote_volume_id == 1050, "Died on +.volumes[49].volume_pairs[0].remote_volume_id"
    assert result.volumes[49].volume_pairs[0].remote_volume_name == """snap-target-50""", "Died on +.volumes[49].volume_pairs[0].remote_volume_name"
    assert result.volumes[49].volume_pairs[0].remote_slice_id == 1050, "Died on +.volumes[49].volume_pairs[0].remote_slice_id"
    assert result.volumes[49].account_id == 4, "Died on +.volumes[49].account_id"
    assert result.volumes[49].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[49].create_time"
    assert result.volumes[49].virtual_volume_id is None, "Died on .volumes[49].virtual_volume_id"
    assert result.volumes[48].status == """active""", "Died on +.volumes[48].status"
    assert result.volumes[48].enable512e == False, "Died on +.volumes[48].enable512e"
    assert result.volumes[48].qos.burst_iops == 15000, "Died on +.volumes[48].qos.burst_iops"
    assert result.volumes[48].qos.burst_time == 60, "Died on +.volumes[48].qos.burst_time"
    assert result.volumes[48].qos.min_iops == 100, "Died on +.volumes[48].qos.min_iops"
    assert result.volumes[48].qos.max_iops == 15000, "Died on +.volumes[48].qos.max_iops"
    assert result.volumes[48].name == """snapshots-source-49""", "Died on +.volumes[48].name"
    assert result.volumes[48].volume_access_groups[0] == 4, "Died on +.volumes[48].volume_access_groups[0]"
    assert result.volumes[48].scsi_naadevice_id == """6f47acc1000000006d69643400000225""", "Died on +.volumes[48].scsi_naadevice_id"
    assert result.volumes[48].total_size == 5000658944, "Died on +.volumes[48].total_size"
    assert result.volumes[48].block_size == 4096, "Died on +.volumes[48].block_size"
    assert result.volumes[48].scsi_euidevice_id == """6d69643400000225f47acc0100000000""", "Died on +.volumes[48].scsi_euidevice_id"
    assert result.volumes[48].volume_id == 549, "Died on +.volumes[48].volume_id"
    assert result.volumes[48].access == """readWrite""", "Died on +.volumes[48].access"
    assert result.volumes[48].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-49.549""", "Died on +.volumes[48].iqn"
    assert result.volumes[48].slice_count == 1, "Died on +.volumes[48].slice_count"
    assert type(result.volumes[48].attributes) is dict, "Died on .volumes[48].attributes"
    assert result.volumes[48].volume_pairs[0].volume_pair_uuid == UUID("f78534f4-2b77-4bb2-a472-e60446c54e88"), "Died on .volumes[48].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[48].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[48].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[48].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[48].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[48].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[48].volume_pairs[0].remote_replication.state"
    assert result.volumes[48].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[48].volume_pairs[0].remote_replication.mode"
    assert result.volumes[48].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[48].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[48].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[48].volume_pairs[0].cluster_pair_id"
    assert result.volumes[48].volume_pairs[0].remote_volume_id == 1049, "Died on +.volumes[48].volume_pairs[0].remote_volume_id"
    assert result.volumes[48].volume_pairs[0].remote_volume_name == """snap-target-49""", "Died on +.volumes[48].volume_pairs[0].remote_volume_name"
    assert result.volumes[48].volume_pairs[0].remote_slice_id == 1049, "Died on +.volumes[48].volume_pairs[0].remote_slice_id"
    assert result.volumes[48].account_id == 4, "Died on +.volumes[48].account_id"
    assert result.volumes[48].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[48].create_time"
    assert result.volumes[48].virtual_volume_id is None, "Died on .volumes[48].virtual_volume_id"
    assert result.volumes[47].status == """active""", "Died on +.volumes[47].status"
    assert result.volumes[47].enable512e == False, "Died on +.volumes[47].enable512e"
    assert result.volumes[47].qos.burst_iops == 15000, "Died on +.volumes[47].qos.burst_iops"
    assert result.volumes[47].qos.burst_time == 60, "Died on +.volumes[47].qos.burst_time"
    assert result.volumes[47].qos.min_iops == 100, "Died on +.volumes[47].qos.min_iops"
    assert result.volumes[47].qos.max_iops == 15000, "Died on +.volumes[47].qos.max_iops"
    assert result.volumes[47].name == """snapshots-source-48""", "Died on +.volumes[47].name"
    assert result.volumes[47].volume_access_groups[0] == 4, "Died on +.volumes[47].volume_access_groups[0]"
    assert result.volumes[47].scsi_naadevice_id == """6f47acc1000000006d69643400000224""", "Died on +.volumes[47].scsi_naadevice_id"
    assert result.volumes[47].total_size == 5000658944, "Died on +.volumes[47].total_size"
    assert result.volumes[47].block_size == 4096, "Died on +.volumes[47].block_size"
    assert result.volumes[47].scsi_euidevice_id == """6d69643400000224f47acc0100000000""", "Died on +.volumes[47].scsi_euidevice_id"
    assert result.volumes[47].volume_id == 548, "Died on +.volumes[47].volume_id"
    assert result.volumes[47].access == """readWrite""", "Died on +.volumes[47].access"
    assert result.volumes[47].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-48.548""", "Died on +.volumes[47].iqn"
    assert result.volumes[47].slice_count == 1, "Died on +.volumes[47].slice_count"
    assert type(result.volumes[47].attributes) is dict, "Died on .volumes[47].attributes"
    assert result.volumes[47].volume_pairs[0].volume_pair_uuid == UUID("76980ec5-83b4-44f9-89c1-36a3d4285906"), "Died on .volumes[47].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[47].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[47].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[47].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[47].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[47].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[47].volume_pairs[0].remote_replication.state"
    assert result.volumes[47].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[47].volume_pairs[0].remote_replication.mode"
    assert result.volumes[47].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[47].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[47].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[47].volume_pairs[0].cluster_pair_id"
    assert result.volumes[47].volume_pairs[0].remote_volume_id == 1048, "Died on +.volumes[47].volume_pairs[0].remote_volume_id"
    assert result.volumes[47].volume_pairs[0].remote_volume_name == """snap-target-48""", "Died on +.volumes[47].volume_pairs[0].remote_volume_name"
    assert result.volumes[47].volume_pairs[0].remote_slice_id == 1048, "Died on +.volumes[47].volume_pairs[0].remote_slice_id"
    assert result.volumes[47].account_id == 4, "Died on +.volumes[47].account_id"
    assert result.volumes[47].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[47].create_time"
    assert result.volumes[47].virtual_volume_id is None, "Died on .volumes[47].virtual_volume_id"
    assert result.volumes[46].status == """active""", "Died on +.volumes[46].status"
    assert result.volumes[46].enable512e == False, "Died on +.volumes[46].enable512e"
    assert result.volumes[46].qos.burst_iops == 15000, "Died on +.volumes[46].qos.burst_iops"
    assert result.volumes[46].qos.burst_time == 60, "Died on +.volumes[46].qos.burst_time"
    assert result.volumes[46].qos.min_iops == 100, "Died on +.volumes[46].qos.min_iops"
    assert result.volumes[46].qos.max_iops == 15000, "Died on +.volumes[46].qos.max_iops"
    assert result.volumes[46].name == """snapshots-source-47""", "Died on +.volumes[46].name"
    assert result.volumes[46].volume_access_groups[0] == 4, "Died on +.volumes[46].volume_access_groups[0]"
    assert result.volumes[46].scsi_naadevice_id == """6f47acc1000000006d69643400000223""", "Died on +.volumes[46].scsi_naadevice_id"
    assert result.volumes[46].total_size == 5000658944, "Died on +.volumes[46].total_size"
    assert result.volumes[46].block_size == 4096, "Died on +.volumes[46].block_size"
    assert result.volumes[46].scsi_euidevice_id == """6d69643400000223f47acc0100000000""", "Died on +.volumes[46].scsi_euidevice_id"
    assert result.volumes[46].volume_id == 547, "Died on +.volumes[46].volume_id"
    assert result.volumes[46].access == """readWrite""", "Died on +.volumes[46].access"
    assert result.volumes[46].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-47.547""", "Died on +.volumes[46].iqn"
    assert result.volumes[46].slice_count == 1, "Died on +.volumes[46].slice_count"
    assert type(result.volumes[46].attributes) is dict, "Died on .volumes[46].attributes"
    assert result.volumes[46].volume_pairs[0].volume_pair_uuid == UUID("9c8a48ed-63f7-4c35-9b6f-6f3519908b4a"), "Died on .volumes[46].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[46].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[46].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[46].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[46].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[46].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[46].volume_pairs[0].remote_replication.state"
    assert result.volumes[46].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[46].volume_pairs[0].remote_replication.mode"
    assert result.volumes[46].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[46].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[46].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[46].volume_pairs[0].cluster_pair_id"
    assert result.volumes[46].volume_pairs[0].remote_volume_id == 1047, "Died on +.volumes[46].volume_pairs[0].remote_volume_id"
    assert result.volumes[46].volume_pairs[0].remote_volume_name == """snap-target-47""", "Died on +.volumes[46].volume_pairs[0].remote_volume_name"
    assert result.volumes[46].volume_pairs[0].remote_slice_id == 1047, "Died on +.volumes[46].volume_pairs[0].remote_slice_id"
    assert result.volumes[46].account_id == 4, "Died on +.volumes[46].account_id"
    assert result.volumes[46].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[46].create_time"
    assert result.volumes[46].virtual_volume_id is None, "Died on .volumes[46].virtual_volume_id"
    assert result.volumes[45].status == """active""", "Died on +.volumes[45].status"
    assert result.volumes[45].enable512e == False, "Died on +.volumes[45].enable512e"
    assert result.volumes[45].qos.burst_iops == 15000, "Died on +.volumes[45].qos.burst_iops"
    assert result.volumes[45].qos.burst_time == 60, "Died on +.volumes[45].qos.burst_time"
    assert result.volumes[45].qos.min_iops == 100, "Died on +.volumes[45].qos.min_iops"
    assert result.volumes[45].qos.max_iops == 15000, "Died on +.volumes[45].qos.max_iops"
    assert result.volumes[45].name == """snapshots-source-46""", "Died on +.volumes[45].name"
    assert result.volumes[45].volume_access_groups[0] == 4, "Died on +.volumes[45].volume_access_groups[0]"
    assert result.volumes[45].scsi_naadevice_id == """6f47acc1000000006d69643400000222""", "Died on +.volumes[45].scsi_naadevice_id"
    assert result.volumes[45].total_size == 5000658944, "Died on +.volumes[45].total_size"
    assert result.volumes[45].block_size == 4096, "Died on +.volumes[45].block_size"
    assert result.volumes[45].scsi_euidevice_id == """6d69643400000222f47acc0100000000""", "Died on +.volumes[45].scsi_euidevice_id"
    assert result.volumes[45].volume_id == 546, "Died on +.volumes[45].volume_id"
    assert result.volumes[45].access == """readWrite""", "Died on +.volumes[45].access"
    assert result.volumes[45].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-46.546""", "Died on +.volumes[45].iqn"
    assert result.volumes[45].slice_count == 1, "Died on +.volumes[45].slice_count"
    assert type(result.volumes[45].attributes) is dict, "Died on .volumes[45].attributes"
    assert result.volumes[45].volume_pairs[0].volume_pair_uuid == UUID("53107794-04c1-4d87-88e0-93bc2673dc7e"), "Died on .volumes[45].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[45].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[45].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[45].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[45].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[45].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[45].volume_pairs[0].remote_replication.state"
    assert result.volumes[45].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[45].volume_pairs[0].remote_replication.mode"
    assert result.volumes[45].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[45].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[45].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[45].volume_pairs[0].cluster_pair_id"
    assert result.volumes[45].volume_pairs[0].remote_volume_id == 1046, "Died on +.volumes[45].volume_pairs[0].remote_volume_id"
    assert result.volumes[45].volume_pairs[0].remote_volume_name == """snap-target-46""", "Died on +.volumes[45].volume_pairs[0].remote_volume_name"
    assert result.volumes[45].volume_pairs[0].remote_slice_id == 1046, "Died on +.volumes[45].volume_pairs[0].remote_slice_id"
    assert result.volumes[45].account_id == 4, "Died on +.volumes[45].account_id"
    assert result.volumes[45].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[45].create_time"
    assert result.volumes[45].virtual_volume_id is None, "Died on .volumes[45].virtual_volume_id"
    assert result.volumes[44].status == """active""", "Died on +.volumes[44].status"
    assert result.volumes[44].enable512e == False, "Died on +.volumes[44].enable512e"
    assert result.volumes[44].qos.burst_iops == 15000, "Died on +.volumes[44].qos.burst_iops"
    assert result.volumes[44].qos.burst_time == 60, "Died on +.volumes[44].qos.burst_time"
    assert result.volumes[44].qos.min_iops == 100, "Died on +.volumes[44].qos.min_iops"
    assert result.volumes[44].qos.max_iops == 15000, "Died on +.volumes[44].qos.max_iops"
    assert result.volumes[44].name == """snapshots-source-45""", "Died on +.volumes[44].name"
    assert result.volumes[44].volume_access_groups[0] == 4, "Died on +.volumes[44].volume_access_groups[0]"
    assert result.volumes[44].scsi_naadevice_id == """6f47acc1000000006d69643400000221""", "Died on +.volumes[44].scsi_naadevice_id"
    assert result.volumes[44].total_size == 5000658944, "Died on +.volumes[44].total_size"
    assert result.volumes[44].block_size == 4096, "Died on +.volumes[44].block_size"
    assert result.volumes[44].scsi_euidevice_id == """6d69643400000221f47acc0100000000""", "Died on +.volumes[44].scsi_euidevice_id"
    assert result.volumes[44].volume_id == 545, "Died on +.volumes[44].volume_id"
    assert result.volumes[44].access == """readWrite""", "Died on +.volumes[44].access"
    assert result.volumes[44].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-45.545""", "Died on +.volumes[44].iqn"
    assert result.volumes[44].slice_count == 1, "Died on +.volumes[44].slice_count"
    assert type(result.volumes[44].attributes) is dict, "Died on .volumes[44].attributes"
    assert result.volumes[44].volume_pairs[0].volume_pair_uuid == UUID("dde4ea3e-f809-4f39-bd33-1adfe7a8123b"), "Died on .volumes[44].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[44].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[44].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[44].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[44].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[44].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[44].volume_pairs[0].remote_replication.state"
    assert result.volumes[44].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[44].volume_pairs[0].remote_replication.mode"
    assert result.volumes[44].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[44].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[44].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[44].volume_pairs[0].cluster_pair_id"
    assert result.volumes[44].volume_pairs[0].remote_volume_id == 1045, "Died on +.volumes[44].volume_pairs[0].remote_volume_id"
    assert result.volumes[44].volume_pairs[0].remote_volume_name == """snap-target-45""", "Died on +.volumes[44].volume_pairs[0].remote_volume_name"
    assert result.volumes[44].volume_pairs[0].remote_slice_id == 1045, "Died on +.volumes[44].volume_pairs[0].remote_slice_id"
    assert result.volumes[44].account_id == 4, "Died on +.volumes[44].account_id"
    assert result.volumes[44].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[44].create_time"
    assert result.volumes[44].virtual_volume_id is None, "Died on .volumes[44].virtual_volume_id"
    assert result.volumes[43].status == """active""", "Died on +.volumes[43].status"
    assert result.volumes[43].enable512e == False, "Died on +.volumes[43].enable512e"
    assert result.volumes[43].qos.burst_iops == 15000, "Died on +.volumes[43].qos.burst_iops"
    assert result.volumes[43].qos.burst_time == 60, "Died on +.volumes[43].qos.burst_time"
    assert result.volumes[43].qos.min_iops == 100, "Died on +.volumes[43].qos.min_iops"
    assert result.volumes[43].qos.max_iops == 15000, "Died on +.volumes[43].qos.max_iops"
    assert result.volumes[43].name == """snapshots-source-44""", "Died on +.volumes[43].name"
    assert result.volumes[43].volume_access_groups[0] == 4, "Died on +.volumes[43].volume_access_groups[0]"
    assert result.volumes[43].scsi_naadevice_id == """6f47acc1000000006d69643400000220""", "Died on +.volumes[43].scsi_naadevice_id"
    assert result.volumes[43].total_size == 5000658944, "Died on +.volumes[43].total_size"
    assert result.volumes[43].block_size == 4096, "Died on +.volumes[43].block_size"
    assert result.volumes[43].scsi_euidevice_id == """6d69643400000220f47acc0100000000""", "Died on +.volumes[43].scsi_euidevice_id"
    assert result.volumes[43].volume_id == 544, "Died on +.volumes[43].volume_id"
    assert result.volumes[43].access == """readWrite""", "Died on +.volumes[43].access"
    assert result.volumes[43].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-44.544""", "Died on +.volumes[43].iqn"
    assert result.volumes[43].slice_count == 1, "Died on +.volumes[43].slice_count"
    assert type(result.volumes[43].attributes) is dict, "Died on .volumes[43].attributes"
    assert result.volumes[43].volume_pairs[0].volume_pair_uuid == UUID("4f52398b-cdd1-407a-bce5-8a12969702e0"), "Died on .volumes[43].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[43].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[43].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[43].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[43].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[43].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[43].volume_pairs[0].remote_replication.state"
    assert result.volumes[43].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[43].volume_pairs[0].remote_replication.mode"
    assert result.volumes[43].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[43].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[43].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[43].volume_pairs[0].cluster_pair_id"
    assert result.volumes[43].volume_pairs[0].remote_volume_id == 1044, "Died on +.volumes[43].volume_pairs[0].remote_volume_id"
    assert result.volumes[43].volume_pairs[0].remote_volume_name == """snap-target-44""", "Died on +.volumes[43].volume_pairs[0].remote_volume_name"
    assert result.volumes[43].volume_pairs[0].remote_slice_id == 1044, "Died on +.volumes[43].volume_pairs[0].remote_slice_id"
    assert result.volumes[43].account_id == 4, "Died on +.volumes[43].account_id"
    assert result.volumes[43].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[43].create_time"
    assert result.volumes[43].virtual_volume_id is None, "Died on .volumes[43].virtual_volume_id"
    assert result.volumes[42].status == """active""", "Died on +.volumes[42].status"
    assert result.volumes[42].enable512e == False, "Died on +.volumes[42].enable512e"
    assert result.volumes[42].qos.burst_iops == 15000, "Died on +.volumes[42].qos.burst_iops"
    assert result.volumes[42].qos.burst_time == 60, "Died on +.volumes[42].qos.burst_time"
    assert result.volumes[42].qos.min_iops == 100, "Died on +.volumes[42].qos.min_iops"
    assert result.volumes[42].qos.max_iops == 15000, "Died on +.volumes[42].qos.max_iops"
    assert result.volumes[42].name == """snapshots-source-43""", "Died on +.volumes[42].name"
    assert result.volumes[42].volume_access_groups[0] == 4, "Died on +.volumes[42].volume_access_groups[0]"
    assert result.volumes[42].scsi_naadevice_id == """6f47acc1000000006d6964340000021f""", "Died on +.volumes[42].scsi_naadevice_id"
    assert result.volumes[42].total_size == 5000658944, "Died on +.volumes[42].total_size"
    assert result.volumes[42].block_size == 4096, "Died on +.volumes[42].block_size"
    assert result.volumes[42].scsi_euidevice_id == """6d6964340000021ff47acc0100000000""", "Died on +.volumes[42].scsi_euidevice_id"
    assert result.volumes[42].volume_id == 543, "Died on +.volumes[42].volume_id"
    assert result.volumes[42].access == """readWrite""", "Died on +.volumes[42].access"
    assert result.volumes[42].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-43.543""", "Died on +.volumes[42].iqn"
    assert result.volumes[42].slice_count == 1, "Died on +.volumes[42].slice_count"
    assert type(result.volumes[42].attributes) is dict, "Died on .volumes[42].attributes"
    assert result.volumes[42].volume_pairs[0].volume_pair_uuid == UUID("e33fe654-0789-47b2-8b90-f91e2753bf9e"), "Died on .volumes[42].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[42].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[42].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[42].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[42].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[42].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[42].volume_pairs[0].remote_replication.state"
    assert result.volumes[42].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[42].volume_pairs[0].remote_replication.mode"
    assert result.volumes[42].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[42].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[42].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[42].volume_pairs[0].cluster_pair_id"
    assert result.volumes[42].volume_pairs[0].remote_volume_id == 1043, "Died on +.volumes[42].volume_pairs[0].remote_volume_id"
    assert result.volumes[42].volume_pairs[0].remote_volume_name == """snap-target-43""", "Died on +.volumes[42].volume_pairs[0].remote_volume_name"
    assert result.volumes[42].volume_pairs[0].remote_slice_id == 1043, "Died on +.volumes[42].volume_pairs[0].remote_slice_id"
    assert result.volumes[42].account_id == 4, "Died on +.volumes[42].account_id"
    assert result.volumes[42].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[42].create_time"
    assert result.volumes[42].virtual_volume_id is None, "Died on .volumes[42].virtual_volume_id"
    assert result.volumes[41].status == """active""", "Died on +.volumes[41].status"
    assert result.volumes[41].enable512e == False, "Died on +.volumes[41].enable512e"
    assert result.volumes[41].qos.burst_iops == 15000, "Died on +.volumes[41].qos.burst_iops"
    assert result.volumes[41].qos.burst_time == 60, "Died on +.volumes[41].qos.burst_time"
    assert result.volumes[41].qos.min_iops == 100, "Died on +.volumes[41].qos.min_iops"
    assert result.volumes[41].qos.max_iops == 15000, "Died on +.volumes[41].qos.max_iops"
    assert result.volumes[41].name == """snapshots-source-42""", "Died on +.volumes[41].name"
    assert result.volumes[41].volume_access_groups[0] == 4, "Died on +.volumes[41].volume_access_groups[0]"
    assert result.volumes[41].scsi_naadevice_id == """6f47acc1000000006d6964340000021e""", "Died on +.volumes[41].scsi_naadevice_id"
    assert result.volumes[41].total_size == 5000658944, "Died on +.volumes[41].total_size"
    assert result.volumes[41].block_size == 4096, "Died on +.volumes[41].block_size"
    assert result.volumes[41].scsi_euidevice_id == """6d6964340000021ef47acc0100000000""", "Died on +.volumes[41].scsi_euidevice_id"
    assert result.volumes[41].volume_id == 542, "Died on +.volumes[41].volume_id"
    assert result.volumes[41].access == """readWrite""", "Died on +.volumes[41].access"
    assert result.volumes[41].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-42.542""", "Died on +.volumes[41].iqn"
    assert result.volumes[41].slice_count == 1, "Died on +.volumes[41].slice_count"
    assert type(result.volumes[41].attributes) is dict, "Died on .volumes[41].attributes"
    assert result.volumes[41].volume_pairs[0].volume_pair_uuid == UUID("d6864ffa-c7c9-4469-b5f5-8711cb9a163a"), "Died on .volumes[41].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[41].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[41].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[41].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[41].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[41].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[41].volume_pairs[0].remote_replication.state"
    assert result.volumes[41].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[41].volume_pairs[0].remote_replication.mode"
    assert result.volumes[41].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[41].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[41].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[41].volume_pairs[0].cluster_pair_id"
    assert result.volumes[41].volume_pairs[0].remote_volume_id == 1042, "Died on +.volumes[41].volume_pairs[0].remote_volume_id"
    assert result.volumes[41].volume_pairs[0].remote_volume_name == """snap-target-42""", "Died on +.volumes[41].volume_pairs[0].remote_volume_name"
    assert result.volumes[41].volume_pairs[0].remote_slice_id == 1042, "Died on +.volumes[41].volume_pairs[0].remote_slice_id"
    assert result.volumes[41].account_id == 4, "Died on +.volumes[41].account_id"
    assert result.volumes[41].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[41].create_time"
    assert result.volumes[41].virtual_volume_id is None, "Died on .volumes[41].virtual_volume_id"
    assert result.volumes[40].status == """active""", "Died on +.volumes[40].status"
    assert result.volumes[40].enable512e == False, "Died on +.volumes[40].enable512e"
    assert result.volumes[40].qos.burst_iops == 15000, "Died on +.volumes[40].qos.burst_iops"
    assert result.volumes[40].qos.burst_time == 60, "Died on +.volumes[40].qos.burst_time"
    assert result.volumes[40].qos.min_iops == 100, "Died on +.volumes[40].qos.min_iops"
    assert result.volumes[40].qos.max_iops == 15000, "Died on +.volumes[40].qos.max_iops"
    assert result.volumes[40].name == """snapshots-source-41""", "Died on +.volumes[40].name"
    assert result.volumes[40].volume_access_groups[0] == 4, "Died on +.volumes[40].volume_access_groups[0]"
    assert result.volumes[40].scsi_naadevice_id == """6f47acc1000000006d6964340000021d""", "Died on +.volumes[40].scsi_naadevice_id"
    assert result.volumes[40].total_size == 5000658944, "Died on +.volumes[40].total_size"
    assert result.volumes[40].block_size == 4096, "Died on +.volumes[40].block_size"
    assert result.volumes[40].scsi_euidevice_id == """6d6964340000021df47acc0100000000""", "Died on +.volumes[40].scsi_euidevice_id"
    assert result.volumes[40].volume_id == 541, "Died on +.volumes[40].volume_id"
    assert result.volumes[40].access == """readWrite""", "Died on +.volumes[40].access"
    assert result.volumes[40].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-41.541""", "Died on +.volumes[40].iqn"
    assert result.volumes[40].slice_count == 1, "Died on +.volumes[40].slice_count"
    assert type(result.volumes[40].attributes) is dict, "Died on .volumes[40].attributes"
    assert result.volumes[40].volume_pairs[0].volume_pair_uuid == UUID("2680ed39-29a9-4e6d-bc2b-780eadf5f53b"), "Died on .volumes[40].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[40].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[40].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[40].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[40].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[40].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[40].volume_pairs[0].remote_replication.state"
    assert result.volumes[40].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[40].volume_pairs[0].remote_replication.mode"
    assert result.volumes[40].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[40].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[40].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[40].volume_pairs[0].cluster_pair_id"
    assert result.volumes[40].volume_pairs[0].remote_volume_id == 1041, "Died on +.volumes[40].volume_pairs[0].remote_volume_id"
    assert result.volumes[40].volume_pairs[0].remote_volume_name == """snap-target-41""", "Died on +.volumes[40].volume_pairs[0].remote_volume_name"
    assert result.volumes[40].volume_pairs[0].remote_slice_id == 1041, "Died on +.volumes[40].volume_pairs[0].remote_slice_id"
    assert result.volumes[40].account_id == 4, "Died on +.volumes[40].account_id"
    assert result.volumes[40].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[40].create_time"
    assert result.volumes[40].virtual_volume_id is None, "Died on .volumes[40].virtual_volume_id"
    assert result.volumes[39].status == """active""", "Died on +.volumes[39].status"
    assert result.volumes[39].enable512e == False, "Died on +.volumes[39].enable512e"
    assert result.volumes[39].qos.burst_iops == 15000, "Died on +.volumes[39].qos.burst_iops"
    assert result.volumes[39].qos.burst_time == 60, "Died on +.volumes[39].qos.burst_time"
    assert result.volumes[39].qos.min_iops == 100, "Died on +.volumes[39].qos.min_iops"
    assert result.volumes[39].qos.max_iops == 15000, "Died on +.volumes[39].qos.max_iops"
    assert result.volumes[39].name == """snapshots-source-40""", "Died on +.volumes[39].name"
    assert result.volumes[39].volume_access_groups[0] == 4, "Died on +.volumes[39].volume_access_groups[0]"
    assert result.volumes[39].scsi_naadevice_id == """6f47acc1000000006d6964340000021c""", "Died on +.volumes[39].scsi_naadevice_id"
    assert result.volumes[39].total_size == 5000658944, "Died on +.volumes[39].total_size"
    assert result.volumes[39].block_size == 4096, "Died on +.volumes[39].block_size"
    assert result.volumes[39].scsi_euidevice_id == """6d6964340000021cf47acc0100000000""", "Died on +.volumes[39].scsi_euidevice_id"
    assert result.volumes[39].volume_id == 540, "Died on +.volumes[39].volume_id"
    assert result.volumes[39].access == """readWrite""", "Died on +.volumes[39].access"
    assert result.volumes[39].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-40.540""", "Died on +.volumes[39].iqn"
    assert result.volumes[39].slice_count == 1, "Died on +.volumes[39].slice_count"
    assert type(result.volumes[39].attributes) is dict, "Died on .volumes[39].attributes"
    assert result.volumes[39].volume_pairs[0].volume_pair_uuid == UUID("26806a64-5f83-4b20-873c-6224dcc84dae"), "Died on .volumes[39].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[39].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[39].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[39].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[39].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[39].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[39].volume_pairs[0].remote_replication.state"
    assert result.volumes[39].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[39].volume_pairs[0].remote_replication.mode"
    assert result.volumes[39].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[39].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[39].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[39].volume_pairs[0].cluster_pair_id"
    assert result.volumes[39].volume_pairs[0].remote_volume_id == 1040, "Died on +.volumes[39].volume_pairs[0].remote_volume_id"
    assert result.volumes[39].volume_pairs[0].remote_volume_name == """snap-target-40""", "Died on +.volumes[39].volume_pairs[0].remote_volume_name"
    assert result.volumes[39].volume_pairs[0].remote_slice_id == 1040, "Died on +.volumes[39].volume_pairs[0].remote_slice_id"
    assert result.volumes[39].account_id == 4, "Died on +.volumes[39].account_id"
    assert result.volumes[39].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[39].create_time"
    assert result.volumes[39].virtual_volume_id is None, "Died on .volumes[39].virtual_volume_id"
    assert result.volumes[38].status == """active""", "Died on +.volumes[38].status"
    assert result.volumes[38].enable512e == False, "Died on +.volumes[38].enable512e"
    assert result.volumes[38].qos.burst_iops == 15000, "Died on +.volumes[38].qos.burst_iops"
    assert result.volumes[38].qos.burst_time == 60, "Died on +.volumes[38].qos.burst_time"
    assert result.volumes[38].qos.min_iops == 100, "Died on +.volumes[38].qos.min_iops"
    assert result.volumes[38].qos.max_iops == 15000, "Died on +.volumes[38].qos.max_iops"
    assert result.volumes[38].name == """snapshots-source-39""", "Died on +.volumes[38].name"
    assert result.volumes[38].volume_access_groups[0] == 4, "Died on +.volumes[38].volume_access_groups[0]"
    assert result.volumes[38].scsi_naadevice_id == """6f47acc1000000006d6964340000021b""", "Died on +.volumes[38].scsi_naadevice_id"
    assert result.volumes[38].total_size == 5000658944, "Died on +.volumes[38].total_size"
    assert result.volumes[38].block_size == 4096, "Died on +.volumes[38].block_size"
    assert result.volumes[38].scsi_euidevice_id == """6d6964340000021bf47acc0100000000""", "Died on +.volumes[38].scsi_euidevice_id"
    assert result.volumes[38].volume_id == 539, "Died on +.volumes[38].volume_id"
    assert result.volumes[38].access == """readWrite""", "Died on +.volumes[38].access"
    assert result.volumes[38].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-39.539""", "Died on +.volumes[38].iqn"
    assert result.volumes[38].slice_count == 1, "Died on +.volumes[38].slice_count"
    assert type(result.volumes[38].attributes) is dict, "Died on .volumes[38].attributes"
    assert result.volumes[38].volume_pairs[0].volume_pair_uuid == UUID("88325ec5-d4f0-4251-8867-7f8fb42accf1"), "Died on .volumes[38].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[38].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[38].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[38].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[38].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[38].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[38].volume_pairs[0].remote_replication.state"
    assert result.volumes[38].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[38].volume_pairs[0].remote_replication.mode"
    assert result.volumes[38].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[38].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[38].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[38].volume_pairs[0].cluster_pair_id"
    assert result.volumes[38].volume_pairs[0].remote_volume_id == 1039, "Died on +.volumes[38].volume_pairs[0].remote_volume_id"
    assert result.volumes[38].volume_pairs[0].remote_volume_name == """snap-target-39""", "Died on +.volumes[38].volume_pairs[0].remote_volume_name"
    assert result.volumes[38].volume_pairs[0].remote_slice_id == 1039, "Died on +.volumes[38].volume_pairs[0].remote_slice_id"
    assert result.volumes[38].account_id == 4, "Died on +.volumes[38].account_id"
    assert result.volumes[38].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[38].create_time"
    assert result.volumes[38].virtual_volume_id is None, "Died on .volumes[38].virtual_volume_id"
    assert result.volumes[37].status == """active""", "Died on +.volumes[37].status"
    assert result.volumes[37].enable512e == False, "Died on +.volumes[37].enable512e"
    assert result.volumes[37].qos.burst_iops == 15000, "Died on +.volumes[37].qos.burst_iops"
    assert result.volumes[37].qos.burst_time == 60, "Died on +.volumes[37].qos.burst_time"
    assert result.volumes[37].qos.min_iops == 100, "Died on +.volumes[37].qos.min_iops"
    assert result.volumes[37].qos.max_iops == 15000, "Died on +.volumes[37].qos.max_iops"
    assert result.volumes[37].name == """snapshots-source-38""", "Died on +.volumes[37].name"
    assert result.volumes[37].volume_access_groups[0] == 4, "Died on +.volumes[37].volume_access_groups[0]"
    assert result.volumes[37].scsi_naadevice_id == """6f47acc1000000006d6964340000021a""", "Died on +.volumes[37].scsi_naadevice_id"
    assert result.volumes[37].total_size == 5000658944, "Died on +.volumes[37].total_size"
    assert result.volumes[37].block_size == 4096, "Died on +.volumes[37].block_size"
    assert result.volumes[37].scsi_euidevice_id == """6d6964340000021af47acc0100000000""", "Died on +.volumes[37].scsi_euidevice_id"
    assert result.volumes[37].volume_id == 538, "Died on +.volumes[37].volume_id"
    assert result.volumes[37].access == """readWrite""", "Died on +.volumes[37].access"
    assert result.volumes[37].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-38.538""", "Died on +.volumes[37].iqn"
    assert result.volumes[37].slice_count == 1, "Died on +.volumes[37].slice_count"
    assert type(result.volumes[37].attributes) is dict, "Died on .volumes[37].attributes"
    assert result.volumes[37].volume_pairs[0].volume_pair_uuid == UUID("00bb9eae-110c-426d-bc85-f698493701b8"), "Died on .volumes[37].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[37].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[37].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[37].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[37].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[37].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[37].volume_pairs[0].remote_replication.state"
    assert result.volumes[37].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[37].volume_pairs[0].remote_replication.mode"
    assert result.volumes[37].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[37].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[37].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[37].volume_pairs[0].cluster_pair_id"
    assert result.volumes[37].volume_pairs[0].remote_volume_id == 1038, "Died on +.volumes[37].volume_pairs[0].remote_volume_id"
    assert result.volumes[37].volume_pairs[0].remote_volume_name == """snap-target-38""", "Died on +.volumes[37].volume_pairs[0].remote_volume_name"
    assert result.volumes[37].volume_pairs[0].remote_slice_id == 1038, "Died on +.volumes[37].volume_pairs[0].remote_slice_id"
    assert result.volumes[37].account_id == 4, "Died on +.volumes[37].account_id"
    assert result.volumes[37].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[37].create_time"
    assert result.volumes[37].virtual_volume_id is None, "Died on .volumes[37].virtual_volume_id"
    assert result.volumes[36].status == """active""", "Died on +.volumes[36].status"
    assert result.volumes[36].enable512e == False, "Died on +.volumes[36].enable512e"
    assert result.volumes[36].qos.burst_iops == 15000, "Died on +.volumes[36].qos.burst_iops"
    assert result.volumes[36].qos.burst_time == 60, "Died on +.volumes[36].qos.burst_time"
    assert result.volumes[36].qos.min_iops == 100, "Died on +.volumes[36].qos.min_iops"
    assert result.volumes[36].qos.max_iops == 15000, "Died on +.volumes[36].qos.max_iops"
    assert result.volumes[36].name == """snapshots-source-37""", "Died on +.volumes[36].name"
    assert result.volumes[36].volume_access_groups[0] == 4, "Died on +.volumes[36].volume_access_groups[0]"
    assert result.volumes[36].scsi_naadevice_id == """6f47acc1000000006d69643400000219""", "Died on +.volumes[36].scsi_naadevice_id"
    assert result.volumes[36].total_size == 5000658944, "Died on +.volumes[36].total_size"
    assert result.volumes[36].block_size == 4096, "Died on +.volumes[36].block_size"
    assert result.volumes[36].scsi_euidevice_id == """6d69643400000219f47acc0100000000""", "Died on +.volumes[36].scsi_euidevice_id"
    assert result.volumes[36].volume_id == 537, "Died on +.volumes[36].volume_id"
    assert result.volumes[36].access == """readWrite""", "Died on +.volumes[36].access"
    assert result.volumes[36].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-37.537""", "Died on +.volumes[36].iqn"
    assert result.volumes[36].slice_count == 1, "Died on +.volumes[36].slice_count"
    assert type(result.volumes[36].attributes) is dict, "Died on .volumes[36].attributes"
    assert result.volumes[36].volume_pairs[0].volume_pair_uuid == UUID("fa698dba-afc8-4c7b-b03e-2deb80974ad8"), "Died on .volumes[36].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[36].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[36].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[36].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[36].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[36].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[36].volume_pairs[0].remote_replication.state"
    assert result.volumes[36].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[36].volume_pairs[0].remote_replication.mode"
    assert result.volumes[36].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[36].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[36].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[36].volume_pairs[0].cluster_pair_id"
    assert result.volumes[36].volume_pairs[0].remote_volume_id == 1037, "Died on +.volumes[36].volume_pairs[0].remote_volume_id"
    assert result.volumes[36].volume_pairs[0].remote_volume_name == """snap-target-37""", "Died on +.volumes[36].volume_pairs[0].remote_volume_name"
    assert result.volumes[36].volume_pairs[0].remote_slice_id == 1037, "Died on +.volumes[36].volume_pairs[0].remote_slice_id"
    assert result.volumes[36].account_id == 4, "Died on +.volumes[36].account_id"
    assert result.volumes[36].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[36].create_time"
    assert result.volumes[36].virtual_volume_id is None, "Died on .volumes[36].virtual_volume_id"
    assert result.volumes[35].status == """active""", "Died on +.volumes[35].status"
    assert result.volumes[35].enable512e == False, "Died on +.volumes[35].enable512e"
    assert result.volumes[35].qos.burst_iops == 15000, "Died on +.volumes[35].qos.burst_iops"
    assert result.volumes[35].qos.burst_time == 60, "Died on +.volumes[35].qos.burst_time"
    assert result.volumes[35].qos.min_iops == 100, "Died on +.volumes[35].qos.min_iops"
    assert result.volumes[35].qos.max_iops == 15000, "Died on +.volumes[35].qos.max_iops"
    assert result.volumes[35].name == """snapshots-source-36""", "Died on +.volumes[35].name"
    assert result.volumes[35].volume_access_groups[0] == 4, "Died on +.volumes[35].volume_access_groups[0]"
    assert result.volumes[35].scsi_naadevice_id == """6f47acc1000000006d69643400000218""", "Died on +.volumes[35].scsi_naadevice_id"
    assert result.volumes[35].total_size == 5000658944, "Died on +.volumes[35].total_size"
    assert result.volumes[35].block_size == 4096, "Died on +.volumes[35].block_size"
    assert result.volumes[35].scsi_euidevice_id == """6d69643400000218f47acc0100000000""", "Died on +.volumes[35].scsi_euidevice_id"
    assert result.volumes[35].volume_id == 536, "Died on +.volumes[35].volume_id"
    assert result.volumes[35].access == """readWrite""", "Died on +.volumes[35].access"
    assert result.volumes[35].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-36.536""", "Died on +.volumes[35].iqn"
    assert result.volumes[35].slice_count == 1, "Died on +.volumes[35].slice_count"
    assert type(result.volumes[35].attributes) is dict, "Died on .volumes[35].attributes"
    assert result.volumes[35].volume_pairs[0].volume_pair_uuid == UUID("68f598bc-6e9b-4958-8b3c-b54298a63943"), "Died on .volumes[35].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[35].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[35].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[35].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[35].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[35].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[35].volume_pairs[0].remote_replication.state"
    assert result.volumes[35].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[35].volume_pairs[0].remote_replication.mode"
    assert result.volumes[35].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[35].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[35].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[35].volume_pairs[0].cluster_pair_id"
    assert result.volumes[35].volume_pairs[0].remote_volume_id == 1036, "Died on +.volumes[35].volume_pairs[0].remote_volume_id"
    assert result.volumes[35].volume_pairs[0].remote_volume_name == """snap-target-36""", "Died on +.volumes[35].volume_pairs[0].remote_volume_name"
    assert result.volumes[35].volume_pairs[0].remote_slice_id == 1036, "Died on +.volumes[35].volume_pairs[0].remote_slice_id"
    assert result.volumes[35].account_id == 4, "Died on +.volumes[35].account_id"
    assert result.volumes[35].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[35].create_time"
    assert result.volumes[35].virtual_volume_id is None, "Died on .volumes[35].virtual_volume_id"
    assert result.volumes[34].status == """active""", "Died on +.volumes[34].status"
    assert result.volumes[34].enable512e == False, "Died on +.volumes[34].enable512e"
    assert result.volumes[34].qos.burst_iops == 15000, "Died on +.volumes[34].qos.burst_iops"
    assert result.volumes[34].qos.burst_time == 60, "Died on +.volumes[34].qos.burst_time"
    assert result.volumes[34].qos.min_iops == 100, "Died on +.volumes[34].qos.min_iops"
    assert result.volumes[34].qos.max_iops == 15000, "Died on +.volumes[34].qos.max_iops"
    assert result.volumes[34].name == """snapshots-source-35""", "Died on +.volumes[34].name"
    assert result.volumes[34].volume_access_groups[0] == 4, "Died on +.volumes[34].volume_access_groups[0]"
    assert result.volumes[34].scsi_naadevice_id == """6f47acc1000000006d69643400000217""", "Died on +.volumes[34].scsi_naadevice_id"
    assert result.volumes[34].total_size == 5000658944, "Died on +.volumes[34].total_size"
    assert result.volumes[34].block_size == 4096, "Died on +.volumes[34].block_size"
    assert result.volumes[34].scsi_euidevice_id == """6d69643400000217f47acc0100000000""", "Died on +.volumes[34].scsi_euidevice_id"
    assert result.volumes[34].volume_id == 535, "Died on +.volumes[34].volume_id"
    assert result.volumes[34].access == """readWrite""", "Died on +.volumes[34].access"
    assert result.volumes[34].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-35.535""", "Died on +.volumes[34].iqn"
    assert result.volumes[34].slice_count == 1, "Died on +.volumes[34].slice_count"
    assert type(result.volumes[34].attributes) is dict, "Died on .volumes[34].attributes"
    assert result.volumes[34].volume_pairs[0].volume_pair_uuid == UUID("e444ba3b-c0f0-45b2-872c-455663a1c706"), "Died on .volumes[34].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[34].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[34].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[34].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[34].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[34].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[34].volume_pairs[0].remote_replication.state"
    assert result.volumes[34].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[34].volume_pairs[0].remote_replication.mode"
    assert result.volumes[34].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[34].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[34].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[34].volume_pairs[0].cluster_pair_id"
    assert result.volumes[34].volume_pairs[0].remote_volume_id == 1035, "Died on +.volumes[34].volume_pairs[0].remote_volume_id"
    assert result.volumes[34].volume_pairs[0].remote_volume_name == """snap-target-35""", "Died on +.volumes[34].volume_pairs[0].remote_volume_name"
    assert result.volumes[34].volume_pairs[0].remote_slice_id == 1035, "Died on +.volumes[34].volume_pairs[0].remote_slice_id"
    assert result.volumes[34].account_id == 4, "Died on +.volumes[34].account_id"
    assert result.volumes[34].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[34].create_time"
    assert result.volumes[34].virtual_volume_id is None, "Died on .volumes[34].virtual_volume_id"
    assert result.volumes[33].status == """active""", "Died on +.volumes[33].status"
    assert result.volumes[33].enable512e == False, "Died on +.volumes[33].enable512e"
    assert result.volumes[33].qos.burst_iops == 15000, "Died on +.volumes[33].qos.burst_iops"
    assert result.volumes[33].qos.burst_time == 60, "Died on +.volumes[33].qos.burst_time"
    assert result.volumes[33].qos.min_iops == 100, "Died on +.volumes[33].qos.min_iops"
    assert result.volumes[33].qos.max_iops == 15000, "Died on +.volumes[33].qos.max_iops"
    assert result.volumes[33].name == """snapshots-source-34""", "Died on +.volumes[33].name"
    assert result.volumes[33].volume_access_groups[0] == 4, "Died on +.volumes[33].volume_access_groups[0]"
    assert result.volumes[33].scsi_naadevice_id == """6f47acc1000000006d69643400000216""", "Died on +.volumes[33].scsi_naadevice_id"
    assert result.volumes[33].total_size == 5000658944, "Died on +.volumes[33].total_size"
    assert result.volumes[33].block_size == 4096, "Died on +.volumes[33].block_size"
    assert result.volumes[33].scsi_euidevice_id == """6d69643400000216f47acc0100000000""", "Died on +.volumes[33].scsi_euidevice_id"
    assert result.volumes[33].volume_id == 534, "Died on +.volumes[33].volume_id"
    assert result.volumes[33].access == """readWrite""", "Died on +.volumes[33].access"
    assert result.volumes[33].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-34.534""", "Died on +.volumes[33].iqn"
    assert result.volumes[33].slice_count == 1, "Died on +.volumes[33].slice_count"
    assert type(result.volumes[33].attributes) is dict, "Died on .volumes[33].attributes"
    assert result.volumes[33].volume_pairs[0].volume_pair_uuid == UUID("3719f1e8-253b-4a1f-ab8e-9ba98d28a9ec"), "Died on .volumes[33].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[33].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[33].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[33].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[33].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[33].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[33].volume_pairs[0].remote_replication.state"
    assert result.volumes[33].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[33].volume_pairs[0].remote_replication.mode"
    assert result.volumes[33].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[33].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[33].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[33].volume_pairs[0].cluster_pair_id"
    assert result.volumes[33].volume_pairs[0].remote_volume_id == 1034, "Died on +.volumes[33].volume_pairs[0].remote_volume_id"
    assert result.volumes[33].volume_pairs[0].remote_volume_name == """snap-target-34""", "Died on +.volumes[33].volume_pairs[0].remote_volume_name"
    assert result.volumes[33].volume_pairs[0].remote_slice_id == 1034, "Died on +.volumes[33].volume_pairs[0].remote_slice_id"
    assert result.volumes[33].account_id == 4, "Died on +.volumes[33].account_id"
    assert result.volumes[33].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[33].create_time"
    assert result.volumes[33].virtual_volume_id is None, "Died on .volumes[33].virtual_volume_id"
    assert result.volumes[32].status == """active""", "Died on +.volumes[32].status"
    assert result.volumes[32].enable512e == False, "Died on +.volumes[32].enable512e"
    assert result.volumes[32].qos.burst_iops == 15000, "Died on +.volumes[32].qos.burst_iops"
    assert result.volumes[32].qos.burst_time == 60, "Died on +.volumes[32].qos.burst_time"
    assert result.volumes[32].qos.min_iops == 100, "Died on +.volumes[32].qos.min_iops"
    assert result.volumes[32].qos.max_iops == 15000, "Died on +.volumes[32].qos.max_iops"
    assert result.volumes[32].name == """snapshots-source-33""", "Died on +.volumes[32].name"
    assert result.volumes[32].volume_access_groups[0] == 4, "Died on +.volumes[32].volume_access_groups[0]"
    assert result.volumes[32].scsi_naadevice_id == """6f47acc1000000006d69643400000215""", "Died on +.volumes[32].scsi_naadevice_id"
    assert result.volumes[32].total_size == 5000658944, "Died on +.volumes[32].total_size"
    assert result.volumes[32].block_size == 4096, "Died on +.volumes[32].block_size"
    assert result.volumes[32].scsi_euidevice_id == """6d69643400000215f47acc0100000000""", "Died on +.volumes[32].scsi_euidevice_id"
    assert result.volumes[32].volume_id == 533, "Died on +.volumes[32].volume_id"
    assert result.volumes[32].access == """readWrite""", "Died on +.volumes[32].access"
    assert result.volumes[32].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-33.533""", "Died on +.volumes[32].iqn"
    assert result.volumes[32].slice_count == 1, "Died on +.volumes[32].slice_count"
    assert type(result.volumes[32].attributes) is dict, "Died on .volumes[32].attributes"
    assert result.volumes[32].volume_pairs[0].volume_pair_uuid == UUID("93f39cce-da26-4d2d-8159-c976080d5222"), "Died on .volumes[32].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[32].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[32].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[32].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[32].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[32].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[32].volume_pairs[0].remote_replication.state"
    assert result.volumes[32].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[32].volume_pairs[0].remote_replication.mode"
    assert result.volumes[32].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[32].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[32].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[32].volume_pairs[0].cluster_pair_id"
    assert result.volumes[32].volume_pairs[0].remote_volume_id == 1033, "Died on +.volumes[32].volume_pairs[0].remote_volume_id"
    assert result.volumes[32].volume_pairs[0].remote_volume_name == """snap-target-33""", "Died on +.volumes[32].volume_pairs[0].remote_volume_name"
    assert result.volumes[32].volume_pairs[0].remote_slice_id == 1033, "Died on +.volumes[32].volume_pairs[0].remote_slice_id"
    assert result.volumes[32].account_id == 4, "Died on +.volumes[32].account_id"
    assert result.volumes[32].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[32].create_time"
    assert result.volumes[32].virtual_volume_id is None, "Died on .volumes[32].virtual_volume_id"
    assert result.volumes[31].status == """active""", "Died on +.volumes[31].status"
    assert result.volumes[31].enable512e == False, "Died on +.volumes[31].enable512e"
    assert result.volumes[31].qos.burst_iops == 15000, "Died on +.volumes[31].qos.burst_iops"
    assert result.volumes[31].qos.burst_time == 60, "Died on +.volumes[31].qos.burst_time"
    assert result.volumes[31].qos.min_iops == 100, "Died on +.volumes[31].qos.min_iops"
    assert result.volumes[31].qos.max_iops == 15000, "Died on +.volumes[31].qos.max_iops"
    assert result.volumes[31].name == """snapshots-source-32""", "Died on +.volumes[31].name"
    assert result.volumes[31].volume_access_groups[0] == 4, "Died on +.volumes[31].volume_access_groups[0]"
    assert result.volumes[31].scsi_naadevice_id == """6f47acc1000000006d69643400000214""", "Died on +.volumes[31].scsi_naadevice_id"
    assert result.volumes[31].total_size == 5000658944, "Died on +.volumes[31].total_size"
    assert result.volumes[31].block_size == 4096, "Died on +.volumes[31].block_size"
    assert result.volumes[31].scsi_euidevice_id == """6d69643400000214f47acc0100000000""", "Died on +.volumes[31].scsi_euidevice_id"
    assert result.volumes[31].volume_id == 532, "Died on +.volumes[31].volume_id"
    assert result.volumes[31].access == """readWrite""", "Died on +.volumes[31].access"
    assert result.volumes[31].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-32.532""", "Died on +.volumes[31].iqn"
    assert result.volumes[31].slice_count == 1, "Died on +.volumes[31].slice_count"
    assert type(result.volumes[31].attributes) is dict, "Died on .volumes[31].attributes"
    assert result.volumes[31].volume_pairs[0].volume_pair_uuid == UUID("ac08665e-8555-47e9-a15d-90a5b829ab68"), "Died on .volumes[31].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[31].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[31].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[31].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[31].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[31].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[31].volume_pairs[0].remote_replication.state"
    assert result.volumes[31].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[31].volume_pairs[0].remote_replication.mode"
    assert result.volumes[31].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[31].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[31].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[31].volume_pairs[0].cluster_pair_id"
    assert result.volumes[31].volume_pairs[0].remote_volume_id == 1032, "Died on +.volumes[31].volume_pairs[0].remote_volume_id"
    assert result.volumes[31].volume_pairs[0].remote_volume_name == """snap-target-32""", "Died on +.volumes[31].volume_pairs[0].remote_volume_name"
    assert result.volumes[31].volume_pairs[0].remote_slice_id == 1032, "Died on +.volumes[31].volume_pairs[0].remote_slice_id"
    assert result.volumes[31].account_id == 4, "Died on +.volumes[31].account_id"
    assert result.volumes[31].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[31].create_time"
    assert result.volumes[31].virtual_volume_id is None, "Died on .volumes[31].virtual_volume_id"
    assert result.volumes[30].status == """active""", "Died on +.volumes[30].status"
    assert result.volumes[30].enable512e == False, "Died on +.volumes[30].enable512e"
    assert result.volumes[30].qos.burst_iops == 15000, "Died on +.volumes[30].qos.burst_iops"
    assert result.volumes[30].qos.burst_time == 60, "Died on +.volumes[30].qos.burst_time"
    assert result.volumes[30].qos.min_iops == 100, "Died on +.volumes[30].qos.min_iops"
    assert result.volumes[30].qos.max_iops == 15000, "Died on +.volumes[30].qos.max_iops"
    assert result.volumes[30].name == """snapshots-source-31""", "Died on +.volumes[30].name"
    assert result.volumes[30].volume_access_groups[0] == 4, "Died on +.volumes[30].volume_access_groups[0]"
    assert result.volumes[30].scsi_naadevice_id == """6f47acc1000000006d69643400000213""", "Died on +.volumes[30].scsi_naadevice_id"
    assert result.volumes[30].total_size == 5000658944, "Died on +.volumes[30].total_size"
    assert result.volumes[30].block_size == 4096, "Died on +.volumes[30].block_size"
    assert result.volumes[30].scsi_euidevice_id == """6d69643400000213f47acc0100000000""", "Died on +.volumes[30].scsi_euidevice_id"
    assert result.volumes[30].volume_id == 531, "Died on +.volumes[30].volume_id"
    assert result.volumes[30].access == """readWrite""", "Died on +.volumes[30].access"
    assert result.volumes[30].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-31.531""", "Died on +.volumes[30].iqn"
    assert result.volumes[30].slice_count == 1, "Died on +.volumes[30].slice_count"
    assert type(result.volumes[30].attributes) is dict, "Died on .volumes[30].attributes"
    assert result.volumes[30].volume_pairs[0].volume_pair_uuid == UUID("08454700-bb4a-4d74-9119-0a6fc19f9e56"), "Died on .volumes[30].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[30].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[30].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[30].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[30].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[30].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[30].volume_pairs[0].remote_replication.state"
    assert result.volumes[30].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[30].volume_pairs[0].remote_replication.mode"
    assert result.volumes[30].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[30].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[30].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[30].volume_pairs[0].cluster_pair_id"
    assert result.volumes[30].volume_pairs[0].remote_volume_id == 1031, "Died on +.volumes[30].volume_pairs[0].remote_volume_id"
    assert result.volumes[30].volume_pairs[0].remote_volume_name == """snap-target-31""", "Died on +.volumes[30].volume_pairs[0].remote_volume_name"
    assert result.volumes[30].volume_pairs[0].remote_slice_id == 1031, "Died on +.volumes[30].volume_pairs[0].remote_slice_id"
    assert result.volumes[30].account_id == 4, "Died on +.volumes[30].account_id"
    assert result.volumes[30].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[30].create_time"
    assert result.volumes[30].virtual_volume_id is None, "Died on .volumes[30].virtual_volume_id"
    assert result.volumes[29].status == """active""", "Died on +.volumes[29].status"
    assert result.volumes[29].enable512e == False, "Died on +.volumes[29].enable512e"
    assert result.volumes[29].qos.burst_iops == 15000, "Died on +.volumes[29].qos.burst_iops"
    assert result.volumes[29].qos.burst_time == 60, "Died on +.volumes[29].qos.burst_time"
    assert result.volumes[29].qos.min_iops == 100, "Died on +.volumes[29].qos.min_iops"
    assert result.volumes[29].qos.max_iops == 15000, "Died on +.volumes[29].qos.max_iops"
    assert result.volumes[29].name == """snapshots-source-30""", "Died on +.volumes[29].name"
    assert result.volumes[29].volume_access_groups[0] == 4, "Died on +.volumes[29].volume_access_groups[0]"
    assert result.volumes[29].scsi_naadevice_id == """6f47acc1000000006d69643400000212""", "Died on +.volumes[29].scsi_naadevice_id"
    assert result.volumes[29].total_size == 5000658944, "Died on +.volumes[29].total_size"
    assert result.volumes[29].block_size == 4096, "Died on +.volumes[29].block_size"
    assert result.volumes[29].scsi_euidevice_id == """6d69643400000212f47acc0100000000""", "Died on +.volumes[29].scsi_euidevice_id"
    assert result.volumes[29].volume_id == 530, "Died on +.volumes[29].volume_id"
    assert result.volumes[29].access == """readWrite""", "Died on +.volumes[29].access"
    assert result.volumes[29].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-30.530""", "Died on +.volumes[29].iqn"
    assert result.volumes[29].slice_count == 1, "Died on +.volumes[29].slice_count"
    assert type(result.volumes[29].attributes) is dict, "Died on .volumes[29].attributes"
    assert result.volumes[29].volume_pairs[0].volume_pair_uuid == UUID("9a28feef-449d-4c86-8bd5-699e0a857d55"), "Died on .volumes[29].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[29].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[29].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[29].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[29].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[29].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[29].volume_pairs[0].remote_replication.state"
    assert result.volumes[29].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[29].volume_pairs[0].remote_replication.mode"
    assert result.volumes[29].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[29].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[29].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[29].volume_pairs[0].cluster_pair_id"
    assert result.volumes[29].volume_pairs[0].remote_volume_id == 1030, "Died on +.volumes[29].volume_pairs[0].remote_volume_id"
    assert result.volumes[29].volume_pairs[0].remote_volume_name == """snap-target-30""", "Died on +.volumes[29].volume_pairs[0].remote_volume_name"
    assert result.volumes[29].volume_pairs[0].remote_slice_id == 1030, "Died on +.volumes[29].volume_pairs[0].remote_slice_id"
    assert result.volumes[29].account_id == 4, "Died on +.volumes[29].account_id"
    assert result.volumes[29].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[29].create_time"
    assert result.volumes[29].virtual_volume_id is None, "Died on .volumes[29].virtual_volume_id"
    assert result.volumes[28].status == """active""", "Died on +.volumes[28].status"
    assert result.volumes[28].enable512e == False, "Died on +.volumes[28].enable512e"
    assert result.volumes[28].qos.burst_iops == 15000, "Died on +.volumes[28].qos.burst_iops"
    assert result.volumes[28].qos.burst_time == 60, "Died on +.volumes[28].qos.burst_time"
    assert result.volumes[28].qos.min_iops == 100, "Died on +.volumes[28].qos.min_iops"
    assert result.volumes[28].qos.max_iops == 15000, "Died on +.volumes[28].qos.max_iops"
    assert result.volumes[28].name == """snapshots-source-29""", "Died on +.volumes[28].name"
    assert result.volumes[28].volume_access_groups[0] == 4, "Died on +.volumes[28].volume_access_groups[0]"
    assert result.volumes[28].scsi_naadevice_id == """6f47acc1000000006d69643400000211""", "Died on +.volumes[28].scsi_naadevice_id"
    assert result.volumes[28].total_size == 5000658944, "Died on +.volumes[28].total_size"
    assert result.volumes[28].block_size == 4096, "Died on +.volumes[28].block_size"
    assert result.volumes[28].scsi_euidevice_id == """6d69643400000211f47acc0100000000""", "Died on +.volumes[28].scsi_euidevice_id"
    assert result.volumes[28].volume_id == 529, "Died on +.volumes[28].volume_id"
    assert result.volumes[28].access == """readWrite""", "Died on +.volumes[28].access"
    assert result.volumes[28].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-29.529""", "Died on +.volumes[28].iqn"
    assert result.volumes[28].slice_count == 1, "Died on +.volumes[28].slice_count"
    assert type(result.volumes[28].attributes) is dict, "Died on .volumes[28].attributes"
    assert result.volumes[28].volume_pairs[0].volume_pair_uuid == UUID("94816c9b-d676-424c-a2cc-a04dd6a1078c"), "Died on .volumes[28].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[28].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[28].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[28].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[28].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[28].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[28].volume_pairs[0].remote_replication.state"
    assert result.volumes[28].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[28].volume_pairs[0].remote_replication.mode"
    assert result.volumes[28].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[28].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[28].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[28].volume_pairs[0].cluster_pair_id"
    assert result.volumes[28].volume_pairs[0].remote_volume_id == 1029, "Died on +.volumes[28].volume_pairs[0].remote_volume_id"
    assert result.volumes[28].volume_pairs[0].remote_volume_name == """snap-target-29""", "Died on +.volumes[28].volume_pairs[0].remote_volume_name"
    assert result.volumes[28].volume_pairs[0].remote_slice_id == 1029, "Died on +.volumes[28].volume_pairs[0].remote_slice_id"
    assert result.volumes[28].account_id == 4, "Died on +.volumes[28].account_id"
    assert result.volumes[28].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[28].create_time"
    assert result.volumes[28].virtual_volume_id is None, "Died on .volumes[28].virtual_volume_id"
    assert result.volumes[27].status == """active""", "Died on +.volumes[27].status"
    assert result.volumes[27].enable512e == False, "Died on +.volumes[27].enable512e"
    assert result.volumes[27].qos.burst_iops == 15000, "Died on +.volumes[27].qos.burst_iops"
    assert result.volumes[27].qos.burst_time == 60, "Died on +.volumes[27].qos.burst_time"
    assert result.volumes[27].qos.min_iops == 100, "Died on +.volumes[27].qos.min_iops"
    assert result.volumes[27].qos.max_iops == 15000, "Died on +.volumes[27].qos.max_iops"
    assert result.volumes[27].name == """snapshots-source-28""", "Died on +.volumes[27].name"
    assert result.volumes[27].volume_access_groups[0] == 4, "Died on +.volumes[27].volume_access_groups[0]"
    assert result.volumes[27].scsi_naadevice_id == """6f47acc1000000006d69643400000210""", "Died on +.volumes[27].scsi_naadevice_id"
    assert result.volumes[27].total_size == 5000658944, "Died on +.volumes[27].total_size"
    assert result.volumes[27].block_size == 4096, "Died on +.volumes[27].block_size"
    assert result.volumes[27].scsi_euidevice_id == """6d69643400000210f47acc0100000000""", "Died on +.volumes[27].scsi_euidevice_id"
    assert result.volumes[27].volume_id == 528, "Died on +.volumes[27].volume_id"
    assert result.volumes[27].access == """readWrite""", "Died on +.volumes[27].access"
    assert result.volumes[27].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-28.528""", "Died on +.volumes[27].iqn"
    assert result.volumes[27].slice_count == 1, "Died on +.volumes[27].slice_count"
    assert type(result.volumes[27].attributes) is dict, "Died on .volumes[27].attributes"
    assert result.volumes[27].volume_pairs[0].volume_pair_uuid == UUID("11120df9-befa-43d5-a304-796033a0d844"), "Died on .volumes[27].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[27].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[27].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[27].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[27].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[27].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[27].volume_pairs[0].remote_replication.state"
    assert result.volumes[27].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[27].volume_pairs[0].remote_replication.mode"
    assert result.volumes[27].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[27].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[27].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[27].volume_pairs[0].cluster_pair_id"
    assert result.volumes[27].volume_pairs[0].remote_volume_id == 1028, "Died on +.volumes[27].volume_pairs[0].remote_volume_id"
    assert result.volumes[27].volume_pairs[0].remote_volume_name == """snap-target-28""", "Died on +.volumes[27].volume_pairs[0].remote_volume_name"
    assert result.volumes[27].volume_pairs[0].remote_slice_id == 1028, "Died on +.volumes[27].volume_pairs[0].remote_slice_id"
    assert result.volumes[27].account_id == 4, "Died on +.volumes[27].account_id"
    assert result.volumes[27].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[27].create_time"
    assert result.volumes[27].virtual_volume_id is None, "Died on .volumes[27].virtual_volume_id"
    assert result.volumes[26].status == """active""", "Died on +.volumes[26].status"
    assert result.volumes[26].enable512e == False, "Died on +.volumes[26].enable512e"
    assert result.volumes[26].qos.burst_iops == 15000, "Died on +.volumes[26].qos.burst_iops"
    assert result.volumes[26].qos.burst_time == 60, "Died on +.volumes[26].qos.burst_time"
    assert result.volumes[26].qos.min_iops == 100, "Died on +.volumes[26].qos.min_iops"
    assert result.volumes[26].qos.max_iops == 15000, "Died on +.volumes[26].qos.max_iops"
    assert result.volumes[26].name == """snapshots-source-27""", "Died on +.volumes[26].name"
    assert result.volumes[26].volume_access_groups[0] == 4, "Died on +.volumes[26].volume_access_groups[0]"
    assert result.volumes[26].scsi_naadevice_id == """6f47acc1000000006d6964340000020f""", "Died on +.volumes[26].scsi_naadevice_id"
    assert result.volumes[26].total_size == 5000658944, "Died on +.volumes[26].total_size"
    assert result.volumes[26].block_size == 4096, "Died on +.volumes[26].block_size"
    assert result.volumes[26].scsi_euidevice_id == """6d6964340000020ff47acc0100000000""", "Died on +.volumes[26].scsi_euidevice_id"
    assert result.volumes[26].volume_id == 527, "Died on +.volumes[26].volume_id"
    assert result.volumes[26].access == """readWrite""", "Died on +.volumes[26].access"
    assert result.volumes[26].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-27.527""", "Died on +.volumes[26].iqn"
    assert result.volumes[26].slice_count == 1, "Died on +.volumes[26].slice_count"
    assert type(result.volumes[26].attributes) is dict, "Died on .volumes[26].attributes"
    assert result.volumes[26].volume_pairs[0].volume_pair_uuid == UUID("687351e4-cc1a-4383-8445-90430be11ef1"), "Died on .volumes[26].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[26].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[26].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[26].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[26].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[26].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[26].volume_pairs[0].remote_replication.state"
    assert result.volumes[26].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[26].volume_pairs[0].remote_replication.mode"
    assert result.volumes[26].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[26].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[26].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[26].volume_pairs[0].cluster_pair_id"
    assert result.volumes[26].volume_pairs[0].remote_volume_id == 1027, "Died on +.volumes[26].volume_pairs[0].remote_volume_id"
    assert result.volumes[26].volume_pairs[0].remote_volume_name == """snap-target-27""", "Died on +.volumes[26].volume_pairs[0].remote_volume_name"
    assert result.volumes[26].volume_pairs[0].remote_slice_id == 1027, "Died on +.volumes[26].volume_pairs[0].remote_slice_id"
    assert result.volumes[26].account_id == 4, "Died on +.volumes[26].account_id"
    assert result.volumes[26].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[26].create_time"
    assert result.volumes[26].virtual_volume_id is None, "Died on .volumes[26].virtual_volume_id"
    assert result.volumes[25].status == """active""", "Died on +.volumes[25].status"
    assert result.volumes[25].enable512e == False, "Died on +.volumes[25].enable512e"
    assert result.volumes[25].qos.burst_iops == 15000, "Died on +.volumes[25].qos.burst_iops"
    assert result.volumes[25].qos.burst_time == 60, "Died on +.volumes[25].qos.burst_time"
    assert result.volumes[25].qos.min_iops == 100, "Died on +.volumes[25].qos.min_iops"
    assert result.volumes[25].qos.max_iops == 15000, "Died on +.volumes[25].qos.max_iops"
    assert result.volumes[25].name == """snapshots-source-26""", "Died on +.volumes[25].name"
    assert result.volumes[25].volume_access_groups[0] == 4, "Died on +.volumes[25].volume_access_groups[0]"
    assert result.volumes[25].scsi_naadevice_id == """6f47acc1000000006d6964340000020e""", "Died on +.volumes[25].scsi_naadevice_id"
    assert result.volumes[25].total_size == 5000658944, "Died on +.volumes[25].total_size"
    assert result.volumes[25].block_size == 4096, "Died on +.volumes[25].block_size"
    assert result.volumes[25].scsi_euidevice_id == """6d6964340000020ef47acc0100000000""", "Died on +.volumes[25].scsi_euidevice_id"
    assert result.volumes[25].volume_id == 526, "Died on +.volumes[25].volume_id"
    assert result.volumes[25].access == """readWrite""", "Died on +.volumes[25].access"
    assert result.volumes[25].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-26.526""", "Died on +.volumes[25].iqn"
    assert result.volumes[25].slice_count == 1, "Died on +.volumes[25].slice_count"
    assert type(result.volumes[25].attributes) is dict, "Died on .volumes[25].attributes"
    assert result.volumes[25].volume_pairs[0].volume_pair_uuid == UUID("53bf65c7-de12-45cd-9daa-ac7e98d036ce"), "Died on .volumes[25].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[25].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[25].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[25].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[25].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[25].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[25].volume_pairs[0].remote_replication.state"
    assert result.volumes[25].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[25].volume_pairs[0].remote_replication.mode"
    assert result.volumes[25].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[25].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[25].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[25].volume_pairs[0].cluster_pair_id"
    assert result.volumes[25].volume_pairs[0].remote_volume_id == 1026, "Died on +.volumes[25].volume_pairs[0].remote_volume_id"
    assert result.volumes[25].volume_pairs[0].remote_volume_name == """snap-target-26""", "Died on +.volumes[25].volume_pairs[0].remote_volume_name"
    assert result.volumes[25].volume_pairs[0].remote_slice_id == 1026, "Died on +.volumes[25].volume_pairs[0].remote_slice_id"
    assert result.volumes[25].account_id == 4, "Died on +.volumes[25].account_id"
    assert result.volumes[25].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[25].create_time"
    assert result.volumes[25].virtual_volume_id is None, "Died on .volumes[25].virtual_volume_id"
    assert result.volumes[24].status == """active""", "Died on +.volumes[24].status"
    assert result.volumes[24].enable512e == False, "Died on +.volumes[24].enable512e"
    assert result.volumes[24].qos.burst_iops == 15000, "Died on +.volumes[24].qos.burst_iops"
    assert result.volumes[24].qos.burst_time == 60, "Died on +.volumes[24].qos.burst_time"
    assert result.volumes[24].qos.min_iops == 100, "Died on +.volumes[24].qos.min_iops"
    assert result.volumes[24].qos.max_iops == 15000, "Died on +.volumes[24].qos.max_iops"
    assert result.volumes[24].name == """snapshots-source-25""", "Died on +.volumes[24].name"
    assert result.volumes[24].volume_access_groups[0] == 4, "Died on +.volumes[24].volume_access_groups[0]"
    assert result.volumes[24].scsi_naadevice_id == """6f47acc1000000006d6964340000020d""", "Died on +.volumes[24].scsi_naadevice_id"
    assert result.volumes[24].total_size == 5000658944, "Died on +.volumes[24].total_size"
    assert result.volumes[24].block_size == 4096, "Died on +.volumes[24].block_size"
    assert result.volumes[24].scsi_euidevice_id == """6d6964340000020df47acc0100000000""", "Died on +.volumes[24].scsi_euidevice_id"
    assert result.volumes[24].volume_id == 525, "Died on +.volumes[24].volume_id"
    assert result.volumes[24].access == """readWrite""", "Died on +.volumes[24].access"
    assert result.volumes[24].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-25.525""", "Died on +.volumes[24].iqn"
    assert result.volumes[24].slice_count == 1, "Died on +.volumes[24].slice_count"
    assert type(result.volumes[24].attributes) is dict, "Died on .volumes[24].attributes"
    assert result.volumes[24].volume_pairs[0].volume_pair_uuid == UUID("93fef25a-7d10-4fa0-afdf-64c5b39be343"), "Died on .volumes[24].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[24].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[24].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[24].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[24].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[24].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[24].volume_pairs[0].remote_replication.state"
    assert result.volumes[24].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[24].volume_pairs[0].remote_replication.mode"
    assert result.volumes[24].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[24].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[24].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[24].volume_pairs[0].cluster_pair_id"
    assert result.volumes[24].volume_pairs[0].remote_volume_id == 1025, "Died on +.volumes[24].volume_pairs[0].remote_volume_id"
    assert result.volumes[24].volume_pairs[0].remote_volume_name == """snap-target-25""", "Died on +.volumes[24].volume_pairs[0].remote_volume_name"
    assert result.volumes[24].volume_pairs[0].remote_slice_id == 1025, "Died on +.volumes[24].volume_pairs[0].remote_slice_id"
    assert result.volumes[24].account_id == 4, "Died on +.volumes[24].account_id"
    assert result.volumes[24].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[24].create_time"
    assert result.volumes[24].virtual_volume_id is None, "Died on .volumes[24].virtual_volume_id"
    assert result.volumes[23].status == """active""", "Died on +.volumes[23].status"
    assert result.volumes[23].enable512e == False, "Died on +.volumes[23].enable512e"
    assert result.volumes[23].qos.burst_iops == 15000, "Died on +.volumes[23].qos.burst_iops"
    assert result.volumes[23].qos.burst_time == 60, "Died on +.volumes[23].qos.burst_time"
    assert result.volumes[23].qos.min_iops == 100, "Died on +.volumes[23].qos.min_iops"
    assert result.volumes[23].qos.max_iops == 15000, "Died on +.volumes[23].qos.max_iops"
    assert result.volumes[23].name == """snapshots-source-24""", "Died on +.volumes[23].name"
    assert result.volumes[23].volume_access_groups[0] == 4, "Died on +.volumes[23].volume_access_groups[0]"
    assert result.volumes[23].scsi_naadevice_id == """6f47acc1000000006d6964340000020c""", "Died on +.volumes[23].scsi_naadevice_id"
    assert result.volumes[23].total_size == 5000658944, "Died on +.volumes[23].total_size"
    assert result.volumes[23].block_size == 4096, "Died on +.volumes[23].block_size"
    assert result.volumes[23].scsi_euidevice_id == """6d6964340000020cf47acc0100000000""", "Died on +.volumes[23].scsi_euidevice_id"
    assert result.volumes[23].volume_id == 524, "Died on +.volumes[23].volume_id"
    assert result.volumes[23].access == """readWrite""", "Died on +.volumes[23].access"
    assert result.volumes[23].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-24.524""", "Died on +.volumes[23].iqn"
    assert result.volumes[23].slice_count == 1, "Died on +.volumes[23].slice_count"
    assert type(result.volumes[23].attributes) is dict, "Died on .volumes[23].attributes"
    assert result.volumes[23].volume_pairs[0].volume_pair_uuid == UUID("a22a4a2b-f3da-4ee1-949f-2b8350380e89"), "Died on .volumes[23].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[23].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[23].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[23].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[23].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[23].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[23].volume_pairs[0].remote_replication.state"
    assert result.volumes[23].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[23].volume_pairs[0].remote_replication.mode"
    assert result.volumes[23].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[23].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[23].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[23].volume_pairs[0].cluster_pair_id"
    assert result.volumes[23].volume_pairs[0].remote_volume_id == 1024, "Died on +.volumes[23].volume_pairs[0].remote_volume_id"
    assert result.volumes[23].volume_pairs[0].remote_volume_name == """snap-target-24""", "Died on +.volumes[23].volume_pairs[0].remote_volume_name"
    assert result.volumes[23].volume_pairs[0].remote_slice_id == 1024, "Died on +.volumes[23].volume_pairs[0].remote_slice_id"
    assert result.volumes[23].account_id == 4, "Died on +.volumes[23].account_id"
    assert result.volumes[23].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[23].create_time"
    assert result.volumes[23].virtual_volume_id is None, "Died on .volumes[23].virtual_volume_id"
    assert result.volumes[22].status == """active""", "Died on +.volumes[22].status"
    assert result.volumes[22].enable512e == False, "Died on +.volumes[22].enable512e"
    assert result.volumes[22].qos.burst_iops == 15000, "Died on +.volumes[22].qos.burst_iops"
    assert result.volumes[22].qos.burst_time == 60, "Died on +.volumes[22].qos.burst_time"
    assert result.volumes[22].qos.min_iops == 100, "Died on +.volumes[22].qos.min_iops"
    assert result.volumes[22].qos.max_iops == 15000, "Died on +.volumes[22].qos.max_iops"
    assert result.volumes[22].name == """snapshots-source-23""", "Died on +.volumes[22].name"
    assert result.volumes[22].volume_access_groups[0] == 4, "Died on +.volumes[22].volume_access_groups[0]"
    assert result.volumes[22].scsi_naadevice_id == """6f47acc1000000006d6964340000020b""", "Died on +.volumes[22].scsi_naadevice_id"
    assert result.volumes[22].total_size == 5000658944, "Died on +.volumes[22].total_size"
    assert result.volumes[22].block_size == 4096, "Died on +.volumes[22].block_size"
    assert result.volumes[22].scsi_euidevice_id == """6d6964340000020bf47acc0100000000""", "Died on +.volumes[22].scsi_euidevice_id"
    assert result.volumes[22].volume_id == 523, "Died on +.volumes[22].volume_id"
    assert result.volumes[22].access == """readWrite""", "Died on +.volumes[22].access"
    assert result.volumes[22].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-23.523""", "Died on +.volumes[22].iqn"
    assert result.volumes[22].slice_count == 1, "Died on +.volumes[22].slice_count"
    assert type(result.volumes[22].attributes) is dict, "Died on .volumes[22].attributes"
    assert result.volumes[22].volume_pairs[0].volume_pair_uuid == UUID("e212d722-c41c-41bb-8572-9c7e036002b2"), "Died on .volumes[22].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[22].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[22].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[22].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[22].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[22].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[22].volume_pairs[0].remote_replication.state"
    assert result.volumes[22].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[22].volume_pairs[0].remote_replication.mode"
    assert result.volumes[22].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[22].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[22].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[22].volume_pairs[0].cluster_pair_id"
    assert result.volumes[22].volume_pairs[0].remote_volume_id == 1023, "Died on +.volumes[22].volume_pairs[0].remote_volume_id"
    assert result.volumes[22].volume_pairs[0].remote_volume_name == """snap-target-23""", "Died on +.volumes[22].volume_pairs[0].remote_volume_name"
    assert result.volumes[22].volume_pairs[0].remote_slice_id == 1023, "Died on +.volumes[22].volume_pairs[0].remote_slice_id"
    assert result.volumes[22].account_id == 4, "Died on +.volumes[22].account_id"
    assert result.volumes[22].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[22].create_time"
    assert result.volumes[22].virtual_volume_id is None, "Died on .volumes[22].virtual_volume_id"
    assert result.volumes[21].status == """active""", "Died on +.volumes[21].status"
    assert result.volumes[21].enable512e == False, "Died on +.volumes[21].enable512e"
    assert result.volumes[21].qos.burst_iops == 15000, "Died on +.volumes[21].qos.burst_iops"
    assert result.volumes[21].qos.burst_time == 60, "Died on +.volumes[21].qos.burst_time"
    assert result.volumes[21].qos.min_iops == 100, "Died on +.volumes[21].qos.min_iops"
    assert result.volumes[21].qos.max_iops == 15000, "Died on +.volumes[21].qos.max_iops"
    assert result.volumes[21].name == """snapshots-source-22""", "Died on +.volumes[21].name"
    assert result.volumes[21].volume_access_groups[0] == 4, "Died on +.volumes[21].volume_access_groups[0]"
    assert result.volumes[21].scsi_naadevice_id == """6f47acc1000000006d6964340000020a""", "Died on +.volumes[21].scsi_naadevice_id"
    assert result.volumes[21].total_size == 5000658944, "Died on +.volumes[21].total_size"
    assert result.volumes[21].block_size == 4096, "Died on +.volumes[21].block_size"
    assert result.volumes[21].scsi_euidevice_id == """6d6964340000020af47acc0100000000""", "Died on +.volumes[21].scsi_euidevice_id"
    assert result.volumes[21].volume_id == 522, "Died on +.volumes[21].volume_id"
    assert result.volumes[21].access == """readWrite""", "Died on +.volumes[21].access"
    assert result.volumes[21].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-22.522""", "Died on +.volumes[21].iqn"
    assert result.volumes[21].slice_count == 1, "Died on +.volumes[21].slice_count"
    assert type(result.volumes[21].attributes) is dict, "Died on .volumes[21].attributes"
    assert result.volumes[21].volume_pairs[0].volume_pair_uuid == UUID("e98ac0ca-a2ba-4334-bb6b-b76b79f15c34"), "Died on .volumes[21].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[21].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[21].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[21].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[21].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[21].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[21].volume_pairs[0].remote_replication.state"
    assert result.volumes[21].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[21].volume_pairs[0].remote_replication.mode"
    assert result.volumes[21].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[21].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[21].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[21].volume_pairs[0].cluster_pair_id"
    assert result.volumes[21].volume_pairs[0].remote_volume_id == 1022, "Died on +.volumes[21].volume_pairs[0].remote_volume_id"
    assert result.volumes[21].volume_pairs[0].remote_volume_name == """snap-target-22""", "Died on +.volumes[21].volume_pairs[0].remote_volume_name"
    assert result.volumes[21].volume_pairs[0].remote_slice_id == 1022, "Died on +.volumes[21].volume_pairs[0].remote_slice_id"
    assert result.volumes[21].account_id == 4, "Died on +.volumes[21].account_id"
    assert result.volumes[21].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[21].create_time"
    assert result.volumes[21].virtual_volume_id is None, "Died on .volumes[21].virtual_volume_id"
    assert result.volumes[20].status == """active""", "Died on +.volumes[20].status"
    assert result.volumes[20].enable512e == False, "Died on +.volumes[20].enable512e"
    assert result.volumes[20].qos.burst_iops == 15000, "Died on +.volumes[20].qos.burst_iops"
    assert result.volumes[20].qos.burst_time == 60, "Died on +.volumes[20].qos.burst_time"
    assert result.volumes[20].qos.min_iops == 100, "Died on +.volumes[20].qos.min_iops"
    assert result.volumes[20].qos.max_iops == 15000, "Died on +.volumes[20].qos.max_iops"
    assert result.volumes[20].name == """snapshots-source-21""", "Died on +.volumes[20].name"
    assert result.volumes[20].volume_access_groups[0] == 4, "Died on +.volumes[20].volume_access_groups[0]"
    assert result.volumes[20].scsi_naadevice_id == """6f47acc1000000006d69643400000209""", "Died on +.volumes[20].scsi_naadevice_id"
    assert result.volumes[20].total_size == 5000658944, "Died on +.volumes[20].total_size"
    assert result.volumes[20].block_size == 4096, "Died on +.volumes[20].block_size"
    assert result.volumes[20].scsi_euidevice_id == """6d69643400000209f47acc0100000000""", "Died on +.volumes[20].scsi_euidevice_id"
    assert result.volumes[20].volume_id == 521, "Died on +.volumes[20].volume_id"
    assert result.volumes[20].access == """readWrite""", "Died on +.volumes[20].access"
    assert result.volumes[20].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-21.521""", "Died on +.volumes[20].iqn"
    assert result.volumes[20].slice_count == 1, "Died on +.volumes[20].slice_count"
    assert type(result.volumes[20].attributes) is dict, "Died on .volumes[20].attributes"
    assert result.volumes[20].volume_pairs[0].volume_pair_uuid == UUID("d97e34eb-6e81-4bfe-9235-44f884310ae4"), "Died on .volumes[20].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[20].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[20].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[20].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[20].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[20].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[20].volume_pairs[0].remote_replication.state"
    assert result.volumes[20].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[20].volume_pairs[0].remote_replication.mode"
    assert result.volumes[20].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[20].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[20].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[20].volume_pairs[0].cluster_pair_id"
    assert result.volumes[20].volume_pairs[0].remote_volume_id == 1021, "Died on +.volumes[20].volume_pairs[0].remote_volume_id"
    assert result.volumes[20].volume_pairs[0].remote_volume_name == """snap-target-21""", "Died on +.volumes[20].volume_pairs[0].remote_volume_name"
    assert result.volumes[20].volume_pairs[0].remote_slice_id == 1021, "Died on +.volumes[20].volume_pairs[0].remote_slice_id"
    assert result.volumes[20].account_id == 4, "Died on +.volumes[20].account_id"
    assert result.volumes[20].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[20].create_time"
    assert result.volumes[20].virtual_volume_id is None, "Died on .volumes[20].virtual_volume_id"
    assert result.volumes[19].status == """active""", "Died on +.volumes[19].status"
    assert result.volumes[19].enable512e == False, "Died on +.volumes[19].enable512e"
    assert result.volumes[19].qos.burst_iops == 15000, "Died on +.volumes[19].qos.burst_iops"
    assert result.volumes[19].qos.burst_time == 60, "Died on +.volumes[19].qos.burst_time"
    assert result.volumes[19].qos.min_iops == 100, "Died on +.volumes[19].qos.min_iops"
    assert result.volumes[19].qos.max_iops == 15000, "Died on +.volumes[19].qos.max_iops"
    assert result.volumes[19].name == """snapshots-source-20""", "Died on +.volumes[19].name"
    assert result.volumes[19].volume_access_groups[0] == 4, "Died on +.volumes[19].volume_access_groups[0]"
    assert result.volumes[19].scsi_naadevice_id == """6f47acc1000000006d69643400000208""", "Died on +.volumes[19].scsi_naadevice_id"
    assert result.volumes[19].total_size == 5000658944, "Died on +.volumes[19].total_size"
    assert result.volumes[19].block_size == 4096, "Died on +.volumes[19].block_size"
    assert result.volumes[19].scsi_euidevice_id == """6d69643400000208f47acc0100000000""", "Died on +.volumes[19].scsi_euidevice_id"
    assert result.volumes[19].volume_id == 520, "Died on +.volumes[19].volume_id"
    assert result.volumes[19].access == """readWrite""", "Died on +.volumes[19].access"
    assert result.volumes[19].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-20.520""", "Died on +.volumes[19].iqn"
    assert result.volumes[19].slice_count == 1, "Died on +.volumes[19].slice_count"
    assert type(result.volumes[19].attributes) is dict, "Died on .volumes[19].attributes"
    assert result.volumes[19].volume_pairs[0].volume_pair_uuid == UUID("a389458d-3157-4ce3-9208-5c12bfa8f557"), "Died on .volumes[19].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[19].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[19].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[19].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[19].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[19].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[19].volume_pairs[0].remote_replication.state"
    assert result.volumes[19].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[19].volume_pairs[0].remote_replication.mode"
    assert result.volumes[19].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[19].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[19].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[19].volume_pairs[0].cluster_pair_id"
    assert result.volumes[19].volume_pairs[0].remote_volume_id == 1020, "Died on +.volumes[19].volume_pairs[0].remote_volume_id"
    assert result.volumes[19].volume_pairs[0].remote_volume_name == """snap-target-20""", "Died on +.volumes[19].volume_pairs[0].remote_volume_name"
    assert result.volumes[19].volume_pairs[0].remote_slice_id == 1020, "Died on +.volumes[19].volume_pairs[0].remote_slice_id"
    assert result.volumes[19].account_id == 4, "Died on +.volumes[19].account_id"
    assert result.volumes[19].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[19].create_time"
    assert result.volumes[19].virtual_volume_id is None, "Died on .volumes[19].virtual_volume_id"
    assert result.volumes[18].status == """active""", "Died on +.volumes[18].status"
    assert result.volumes[18].enable512e == False, "Died on +.volumes[18].enable512e"
    assert result.volumes[18].qos.burst_iops == 15000, "Died on +.volumes[18].qos.burst_iops"
    assert result.volumes[18].qos.burst_time == 60, "Died on +.volumes[18].qos.burst_time"
    assert result.volumes[18].qos.min_iops == 100, "Died on +.volumes[18].qos.min_iops"
    assert result.volumes[18].qos.max_iops == 15000, "Died on +.volumes[18].qos.max_iops"
    assert result.volumes[18].name == """snapshots-source-19""", "Died on +.volumes[18].name"
    assert result.volumes[18].volume_access_groups[0] == 4, "Died on +.volumes[18].volume_access_groups[0]"
    assert result.volumes[18].scsi_naadevice_id == """6f47acc1000000006d69643400000207""", "Died on +.volumes[18].scsi_naadevice_id"
    assert result.volumes[18].total_size == 5000658944, "Died on +.volumes[18].total_size"
    assert result.volumes[18].block_size == 4096, "Died on +.volumes[18].block_size"
    assert result.volumes[18].scsi_euidevice_id == """6d69643400000207f47acc0100000000""", "Died on +.volumes[18].scsi_euidevice_id"
    assert result.volumes[18].volume_id == 519, "Died on +.volumes[18].volume_id"
    assert result.volumes[18].access == """readWrite""", "Died on +.volumes[18].access"
    assert result.volumes[18].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-19.519""", "Died on +.volumes[18].iqn"
    assert result.volumes[18].slice_count == 1, "Died on +.volumes[18].slice_count"
    assert type(result.volumes[18].attributes) is dict, "Died on .volumes[18].attributes"
    assert result.volumes[18].volume_pairs[0].volume_pair_uuid == UUID("ed7ea45e-2b6d-4f25-ac96-7c11049bdabe"), "Died on .volumes[18].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[18].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[18].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[18].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[18].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[18].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[18].volume_pairs[0].remote_replication.state"
    assert result.volumes[18].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[18].volume_pairs[0].remote_replication.mode"
    assert result.volumes[18].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[18].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[18].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[18].volume_pairs[0].cluster_pair_id"
    assert result.volumes[18].volume_pairs[0].remote_volume_id == 1019, "Died on +.volumes[18].volume_pairs[0].remote_volume_id"
    assert result.volumes[18].volume_pairs[0].remote_volume_name == """snap-target-19""", "Died on +.volumes[18].volume_pairs[0].remote_volume_name"
    assert result.volumes[18].volume_pairs[0].remote_slice_id == 1019, "Died on +.volumes[18].volume_pairs[0].remote_slice_id"
    assert result.volumes[18].account_id == 4, "Died on +.volumes[18].account_id"
    assert result.volumes[18].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[18].create_time"
    assert result.volumes[18].virtual_volume_id is None, "Died on .volumes[18].virtual_volume_id"
    assert result.volumes[17].status == """active""", "Died on +.volumes[17].status"
    assert result.volumes[17].enable512e == False, "Died on +.volumes[17].enable512e"
    assert result.volumes[17].qos.burst_iops == 15000, "Died on +.volumes[17].qos.burst_iops"
    assert result.volumes[17].qos.burst_time == 60, "Died on +.volumes[17].qos.burst_time"
    assert result.volumes[17].qos.min_iops == 100, "Died on +.volumes[17].qos.min_iops"
    assert result.volumes[17].qos.max_iops == 15000, "Died on +.volumes[17].qos.max_iops"
    assert result.volumes[17].name == """snapshots-source-18""", "Died on +.volumes[17].name"
    assert result.volumes[17].volume_access_groups[0] == 4, "Died on +.volumes[17].volume_access_groups[0]"
    assert result.volumes[17].scsi_naadevice_id == """6f47acc1000000006d69643400000206""", "Died on +.volumes[17].scsi_naadevice_id"
    assert result.volumes[17].total_size == 5000658944, "Died on +.volumes[17].total_size"
    assert result.volumes[17].block_size == 4096, "Died on +.volumes[17].block_size"
    assert result.volumes[17].scsi_euidevice_id == """6d69643400000206f47acc0100000000""", "Died on +.volumes[17].scsi_euidevice_id"
    assert result.volumes[17].volume_id == 518, "Died on +.volumes[17].volume_id"
    assert result.volumes[17].access == """readWrite""", "Died on +.volumes[17].access"
    assert result.volumes[17].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-18.518""", "Died on +.volumes[17].iqn"
    assert result.volumes[17].slice_count == 1, "Died on +.volumes[17].slice_count"
    assert type(result.volumes[17].attributes) is dict, "Died on .volumes[17].attributes"
    assert result.volumes[17].volume_pairs[0].volume_pair_uuid == UUID("da17be64-f489-45d5-817e-0d9501798702"), "Died on .volumes[17].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[17].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[17].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[17].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[17].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[17].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[17].volume_pairs[0].remote_replication.state"
    assert result.volumes[17].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[17].volume_pairs[0].remote_replication.mode"
    assert result.volumes[17].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[17].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[17].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[17].volume_pairs[0].cluster_pair_id"
    assert result.volumes[17].volume_pairs[0].remote_volume_id == 1018, "Died on +.volumes[17].volume_pairs[0].remote_volume_id"
    assert result.volumes[17].volume_pairs[0].remote_volume_name == """snap-target-18""", "Died on +.volumes[17].volume_pairs[0].remote_volume_name"
    assert result.volumes[17].volume_pairs[0].remote_slice_id == 1018, "Died on +.volumes[17].volume_pairs[0].remote_slice_id"
    assert result.volumes[17].account_id == 4, "Died on +.volumes[17].account_id"
    assert result.volumes[17].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[17].create_time"
    assert result.volumes[17].virtual_volume_id is None, "Died on .volumes[17].virtual_volume_id"
    assert result.volumes[16].status == """active""", "Died on +.volumes[16].status"
    assert result.volumes[16].enable512e == False, "Died on +.volumes[16].enable512e"
    assert result.volumes[16].qos.burst_iops == 15000, "Died on +.volumes[16].qos.burst_iops"
    assert result.volumes[16].qos.burst_time == 60, "Died on +.volumes[16].qos.burst_time"
    assert result.volumes[16].qos.min_iops == 100, "Died on +.volumes[16].qos.min_iops"
    assert result.volumes[16].qos.max_iops == 15000, "Died on +.volumes[16].qos.max_iops"
    assert result.volumes[16].name == """snapshots-source-17""", "Died on +.volumes[16].name"
    assert result.volumes[16].volume_access_groups[0] == 4, "Died on +.volumes[16].volume_access_groups[0]"
    assert result.volumes[16].scsi_naadevice_id == """6f47acc1000000006d69643400000205""", "Died on +.volumes[16].scsi_naadevice_id"
    assert result.volumes[16].total_size == 5000658944, "Died on +.volumes[16].total_size"
    assert result.volumes[16].block_size == 4096, "Died on +.volumes[16].block_size"
    assert result.volumes[16].scsi_euidevice_id == """6d69643400000205f47acc0100000000""", "Died on +.volumes[16].scsi_euidevice_id"
    assert result.volumes[16].volume_id == 517, "Died on +.volumes[16].volume_id"
    assert result.volumes[16].access == """readWrite""", "Died on +.volumes[16].access"
    assert result.volumes[16].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-17.517""", "Died on +.volumes[16].iqn"
    assert result.volumes[16].slice_count == 1, "Died on +.volumes[16].slice_count"
    assert type(result.volumes[16].attributes) is dict, "Died on .volumes[16].attributes"
    assert result.volumes[16].volume_pairs[0].volume_pair_uuid == UUID("d0f476e0-c5f0-4fd9-bdfa-eccb436263c3"), "Died on .volumes[16].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[16].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[16].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[16].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[16].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[16].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[16].volume_pairs[0].remote_replication.state"
    assert result.volumes[16].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[16].volume_pairs[0].remote_replication.mode"
    assert result.volumes[16].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[16].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[16].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[16].volume_pairs[0].cluster_pair_id"
    assert result.volumes[16].volume_pairs[0].remote_volume_id == 1017, "Died on +.volumes[16].volume_pairs[0].remote_volume_id"
    assert result.volumes[16].volume_pairs[0].remote_volume_name == """snap-target-17""", "Died on +.volumes[16].volume_pairs[0].remote_volume_name"
    assert result.volumes[16].volume_pairs[0].remote_slice_id == 1017, "Died on +.volumes[16].volume_pairs[0].remote_slice_id"
    assert result.volumes[16].account_id == 4, "Died on +.volumes[16].account_id"
    assert result.volumes[16].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[16].create_time"
    assert result.volumes[16].virtual_volume_id is None, "Died on .volumes[16].virtual_volume_id"
    assert result.volumes[15].status == """active""", "Died on +.volumes[15].status"
    assert result.volumes[15].enable512e == False, "Died on +.volumes[15].enable512e"
    assert result.volumes[15].qos.burst_iops == 15000, "Died on +.volumes[15].qos.burst_iops"
    assert result.volumes[15].qos.burst_time == 60, "Died on +.volumes[15].qos.burst_time"
    assert result.volumes[15].qos.min_iops == 100, "Died on +.volumes[15].qos.min_iops"
    assert result.volumes[15].qos.max_iops == 15000, "Died on +.volumes[15].qos.max_iops"
    assert result.volumes[15].name == """snapshots-source-16""", "Died on +.volumes[15].name"
    assert result.volumes[15].volume_access_groups[0] == 4, "Died on +.volumes[15].volume_access_groups[0]"
    assert result.volumes[15].scsi_naadevice_id == """6f47acc1000000006d69643400000204""", "Died on +.volumes[15].scsi_naadevice_id"
    assert result.volumes[15].total_size == 5000658944, "Died on +.volumes[15].total_size"
    assert result.volumes[15].block_size == 4096, "Died on +.volumes[15].block_size"
    assert result.volumes[15].scsi_euidevice_id == """6d69643400000204f47acc0100000000""", "Died on +.volumes[15].scsi_euidevice_id"
    assert result.volumes[15].volume_id == 516, "Died on +.volumes[15].volume_id"
    assert result.volumes[15].access == """readWrite""", "Died on +.volumes[15].access"
    assert result.volumes[15].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-16.516""", "Died on +.volumes[15].iqn"
    assert result.volumes[15].slice_count == 1, "Died on +.volumes[15].slice_count"
    assert type(result.volumes[15].attributes) is dict, "Died on .volumes[15].attributes"
    assert result.volumes[15].volume_pairs[0].volume_pair_uuid == UUID("36ef96c8-77dd-4abe-9c82-f042e87b73a2"), "Died on .volumes[15].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[15].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[15].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[15].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[15].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[15].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[15].volume_pairs[0].remote_replication.state"
    assert result.volumes[15].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[15].volume_pairs[0].remote_replication.mode"
    assert result.volumes[15].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[15].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[15].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[15].volume_pairs[0].cluster_pair_id"
    assert result.volumes[15].volume_pairs[0].remote_volume_id == 1016, "Died on +.volumes[15].volume_pairs[0].remote_volume_id"
    assert result.volumes[15].volume_pairs[0].remote_volume_name == """snap-target-16""", "Died on +.volumes[15].volume_pairs[0].remote_volume_name"
    assert result.volumes[15].volume_pairs[0].remote_slice_id == 1016, "Died on +.volumes[15].volume_pairs[0].remote_slice_id"
    assert result.volumes[15].account_id == 4, "Died on +.volumes[15].account_id"
    assert result.volumes[15].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[15].create_time"
    assert result.volumes[15].virtual_volume_id is None, "Died on .volumes[15].virtual_volume_id"
    assert result.volumes[14].status == """active""", "Died on +.volumes[14].status"
    assert result.volumes[14].enable512e == False, "Died on +.volumes[14].enable512e"
    assert result.volumes[14].qos.burst_iops == 15000, "Died on +.volumes[14].qos.burst_iops"
    assert result.volumes[14].qos.burst_time == 60, "Died on +.volumes[14].qos.burst_time"
    assert result.volumes[14].qos.min_iops == 100, "Died on +.volumes[14].qos.min_iops"
    assert result.volumes[14].qos.max_iops == 15000, "Died on +.volumes[14].qos.max_iops"
    assert result.volumes[14].name == """snapshots-source-15""", "Died on +.volumes[14].name"
    assert result.volumes[14].volume_access_groups[0] == 4, "Died on +.volumes[14].volume_access_groups[0]"
    assert result.volumes[14].scsi_naadevice_id == """6f47acc1000000006d69643400000203""", "Died on +.volumes[14].scsi_naadevice_id"
    assert result.volumes[14].total_size == 5000658944, "Died on +.volumes[14].total_size"
    assert result.volumes[14].block_size == 4096, "Died on +.volumes[14].block_size"
    assert result.volumes[14].scsi_euidevice_id == """6d69643400000203f47acc0100000000""", "Died on +.volumes[14].scsi_euidevice_id"
    assert result.volumes[14].volume_id == 515, "Died on +.volumes[14].volume_id"
    assert result.volumes[14].access == """readWrite""", "Died on +.volumes[14].access"
    assert result.volumes[14].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-15.515""", "Died on +.volumes[14].iqn"
    assert result.volumes[14].slice_count == 1, "Died on +.volumes[14].slice_count"
    assert type(result.volumes[14].attributes) is dict, "Died on .volumes[14].attributes"
    assert result.volumes[14].volume_pairs[0].volume_pair_uuid == UUID("c0be44ff-054b-4f0d-b047-6c3f70cf31f6"), "Died on .volumes[14].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[14].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[14].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[14].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[14].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[14].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[14].volume_pairs[0].remote_replication.state"
    assert result.volumes[14].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[14].volume_pairs[0].remote_replication.mode"
    assert result.volumes[14].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[14].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[14].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[14].volume_pairs[0].cluster_pair_id"
    assert result.volumes[14].volume_pairs[0].remote_volume_id == 1015, "Died on +.volumes[14].volume_pairs[0].remote_volume_id"
    assert result.volumes[14].volume_pairs[0].remote_volume_name == """snap-target-15""", "Died on +.volumes[14].volume_pairs[0].remote_volume_name"
    assert result.volumes[14].volume_pairs[0].remote_slice_id == 1015, "Died on +.volumes[14].volume_pairs[0].remote_slice_id"
    assert result.volumes[14].account_id == 4, "Died on +.volumes[14].account_id"
    assert result.volumes[14].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[14].create_time"
    assert result.volumes[14].virtual_volume_id is None, "Died on .volumes[14].virtual_volume_id"
    assert result.volumes[13].status == """active""", "Died on +.volumes[13].status"
    assert result.volumes[13].enable512e == False, "Died on +.volumes[13].enable512e"
    assert result.volumes[13].qos.burst_iops == 15000, "Died on +.volumes[13].qos.burst_iops"
    assert result.volumes[13].qos.burst_time == 60, "Died on +.volumes[13].qos.burst_time"
    assert result.volumes[13].qos.min_iops == 100, "Died on +.volumes[13].qos.min_iops"
    assert result.volumes[13].qos.max_iops == 15000, "Died on +.volumes[13].qos.max_iops"
    assert result.volumes[13].name == """snapshots-source-14""", "Died on +.volumes[13].name"
    assert result.volumes[13].volume_access_groups[0] == 4, "Died on +.volumes[13].volume_access_groups[0]"
    assert result.volumes[13].scsi_naadevice_id == """6f47acc1000000006d69643400000202""", "Died on +.volumes[13].scsi_naadevice_id"
    assert result.volumes[13].total_size == 5000658944, "Died on +.volumes[13].total_size"
    assert result.volumes[13].block_size == 4096, "Died on +.volumes[13].block_size"
    assert result.volumes[13].scsi_euidevice_id == """6d69643400000202f47acc0100000000""", "Died on +.volumes[13].scsi_euidevice_id"
    assert result.volumes[13].volume_id == 514, "Died on +.volumes[13].volume_id"
    assert result.volumes[13].access == """readWrite""", "Died on +.volumes[13].access"
    assert result.volumes[13].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-14.514""", "Died on +.volumes[13].iqn"
    assert result.volumes[13].slice_count == 1, "Died on +.volumes[13].slice_count"
    assert type(result.volumes[13].attributes) is dict, "Died on .volumes[13].attributes"
    assert result.volumes[13].volume_pairs[0].volume_pair_uuid == UUID("2ae9dc92-5754-4ad1-a0b6-a2d9a25fa087"), "Died on .volumes[13].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[13].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[13].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[13].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[13].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[13].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[13].volume_pairs[0].remote_replication.state"
    assert result.volumes[13].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[13].volume_pairs[0].remote_replication.mode"
    assert result.volumes[13].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[13].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[13].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[13].volume_pairs[0].cluster_pair_id"
    assert result.volumes[13].volume_pairs[0].remote_volume_id == 1014, "Died on +.volumes[13].volume_pairs[0].remote_volume_id"
    assert result.volumes[13].volume_pairs[0].remote_volume_name == """snap-target-14""", "Died on +.volumes[13].volume_pairs[0].remote_volume_name"
    assert result.volumes[13].volume_pairs[0].remote_slice_id == 1014, "Died on +.volumes[13].volume_pairs[0].remote_slice_id"
    assert result.volumes[13].account_id == 4, "Died on +.volumes[13].account_id"
    assert result.volumes[13].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[13].create_time"
    assert result.volumes[13].virtual_volume_id is None, "Died on .volumes[13].virtual_volume_id"
    assert result.volumes[12].status == """active""", "Died on +.volumes[12].status"
    assert result.volumes[12].enable512e == False, "Died on +.volumes[12].enable512e"
    assert result.volumes[12].qos.burst_iops == 15000, "Died on +.volumes[12].qos.burst_iops"
    assert result.volumes[12].qos.burst_time == 60, "Died on +.volumes[12].qos.burst_time"
    assert result.volumes[12].qos.min_iops == 100, "Died on +.volumes[12].qos.min_iops"
    assert result.volumes[12].qos.max_iops == 15000, "Died on +.volumes[12].qos.max_iops"
    assert result.volumes[12].name == """snapshots-source-13""", "Died on +.volumes[12].name"
    assert result.volumes[12].volume_access_groups[0] == 4, "Died on +.volumes[12].volume_access_groups[0]"
    assert result.volumes[12].scsi_naadevice_id == """6f47acc1000000006d69643400000201""", "Died on +.volumes[12].scsi_naadevice_id"
    assert result.volumes[12].total_size == 5000658944, "Died on +.volumes[12].total_size"
    assert result.volumes[12].block_size == 4096, "Died on +.volumes[12].block_size"
    assert result.volumes[12].scsi_euidevice_id == """6d69643400000201f47acc0100000000""", "Died on +.volumes[12].scsi_euidevice_id"
    assert result.volumes[12].volume_id == 513, "Died on +.volumes[12].volume_id"
    assert result.volumes[12].access == """readWrite""", "Died on +.volumes[12].access"
    assert result.volumes[12].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-13.513""", "Died on +.volumes[12].iqn"
    assert result.volumes[12].slice_count == 1, "Died on +.volumes[12].slice_count"
    assert type(result.volumes[12].attributes) is dict, "Died on .volumes[12].attributes"
    assert result.volumes[12].volume_pairs[0].volume_pair_uuid == UUID("5e33e894-01ac-428c-9712-209998300c80"), "Died on .volumes[12].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[12].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[12].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[12].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[12].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[12].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[12].volume_pairs[0].remote_replication.state"
    assert result.volumes[12].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[12].volume_pairs[0].remote_replication.mode"
    assert result.volumes[12].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[12].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[12].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[12].volume_pairs[0].cluster_pair_id"
    assert result.volumes[12].volume_pairs[0].remote_volume_id == 1013, "Died on +.volumes[12].volume_pairs[0].remote_volume_id"
    assert result.volumes[12].volume_pairs[0].remote_volume_name == """snap-target-13""", "Died on +.volumes[12].volume_pairs[0].remote_volume_name"
    assert result.volumes[12].volume_pairs[0].remote_slice_id == 1013, "Died on +.volumes[12].volume_pairs[0].remote_slice_id"
    assert result.volumes[12].account_id == 4, "Died on +.volumes[12].account_id"
    assert result.volumes[12].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[12].create_time"
    assert result.volumes[12].virtual_volume_id is None, "Died on .volumes[12].virtual_volume_id"
    assert result.volumes[11].status == """active""", "Died on +.volumes[11].status"
    assert result.volumes[11].enable512e == False, "Died on +.volumes[11].enable512e"
    assert result.volumes[11].qos.burst_iops == 15000, "Died on +.volumes[11].qos.burst_iops"
    assert result.volumes[11].qos.burst_time == 60, "Died on +.volumes[11].qos.burst_time"
    assert result.volumes[11].qos.min_iops == 100, "Died on +.volumes[11].qos.min_iops"
    assert result.volumes[11].qos.max_iops == 15000, "Died on +.volumes[11].qos.max_iops"
    assert result.volumes[11].name == """snapshots-source-12""", "Died on +.volumes[11].name"
    assert result.volumes[11].volume_access_groups[0] == 4, "Died on +.volumes[11].volume_access_groups[0]"
    assert result.volumes[11].scsi_naadevice_id == """6f47acc1000000006d69643400000200""", "Died on +.volumes[11].scsi_naadevice_id"
    assert result.volumes[11].total_size == 5000658944, "Died on +.volumes[11].total_size"
    assert result.volumes[11].block_size == 4096, "Died on +.volumes[11].block_size"
    assert result.volumes[11].scsi_euidevice_id == """6d69643400000200f47acc0100000000""", "Died on +.volumes[11].scsi_euidevice_id"
    assert result.volumes[11].volume_id == 512, "Died on +.volumes[11].volume_id"
    assert result.volumes[11].access == """readWrite""", "Died on +.volumes[11].access"
    assert result.volumes[11].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-12.512""", "Died on +.volumes[11].iqn"
    assert result.volumes[11].slice_count == 1, "Died on +.volumes[11].slice_count"
    assert type(result.volumes[11].attributes) is dict, "Died on .volumes[11].attributes"
    assert result.volumes[11].volume_pairs[0].volume_pair_uuid == UUID("d79634c3-147b-492c-a5b4-f56f60ff7d57"), "Died on .volumes[11].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[11].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[11].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[11].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[11].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[11].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[11].volume_pairs[0].remote_replication.state"
    assert result.volumes[11].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[11].volume_pairs[0].remote_replication.mode"
    assert result.volumes[11].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[11].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[11].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[11].volume_pairs[0].cluster_pair_id"
    assert result.volumes[11].volume_pairs[0].remote_volume_id == 1012, "Died on +.volumes[11].volume_pairs[0].remote_volume_id"
    assert result.volumes[11].volume_pairs[0].remote_volume_name == """snap-target-12""", "Died on +.volumes[11].volume_pairs[0].remote_volume_name"
    assert result.volumes[11].volume_pairs[0].remote_slice_id == 1012, "Died on +.volumes[11].volume_pairs[0].remote_slice_id"
    assert result.volumes[11].account_id == 4, "Died on +.volumes[11].account_id"
    assert result.volumes[11].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[11].create_time"
    assert result.volumes[11].virtual_volume_id is None, "Died on .volumes[11].virtual_volume_id"
    assert result.volumes[10].status == """active""", "Died on +.volumes[10].status"
    assert result.volumes[10].enable512e == False, "Died on +.volumes[10].enable512e"
    assert result.volumes[10].qos.burst_iops == 15000, "Died on +.volumes[10].qos.burst_iops"
    assert result.volumes[10].qos.burst_time == 60, "Died on +.volumes[10].qos.burst_time"
    assert result.volumes[10].qos.min_iops == 100, "Died on +.volumes[10].qos.min_iops"
    assert result.volumes[10].qos.max_iops == 15000, "Died on +.volumes[10].qos.max_iops"
    assert result.volumes[10].name == """snapshots-source-11""", "Died on +.volumes[10].name"
    assert result.volumes[10].volume_access_groups[0] == 4, "Died on +.volumes[10].volume_access_groups[0]"
    assert result.volumes[10].scsi_naadevice_id == """6f47acc1000000006d696434000001ff""", "Died on +.volumes[10].scsi_naadevice_id"
    assert result.volumes[10].total_size == 5000658944, "Died on +.volumes[10].total_size"
    assert result.volumes[10].block_size == 4096, "Died on +.volumes[10].block_size"
    assert result.volumes[10].scsi_euidevice_id == """6d696434000001fff47acc0100000000""", "Died on +.volumes[10].scsi_euidevice_id"
    assert result.volumes[10].volume_id == 511, "Died on +.volumes[10].volume_id"
    assert result.volumes[10].access == """readWrite""", "Died on +.volumes[10].access"
    assert result.volumes[10].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-11.511""", "Died on +.volumes[10].iqn"
    assert result.volumes[10].slice_count == 1, "Died on +.volumes[10].slice_count"
    assert type(result.volumes[10].attributes) is dict, "Died on .volumes[10].attributes"
    assert result.volumes[10].volume_pairs[0].volume_pair_uuid == UUID("861e4f44-4b73-4fb4-ad39-13a5c8455130"), "Died on .volumes[10].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[10].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[10].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[10].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[10].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[10].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[10].volume_pairs[0].remote_replication.state"
    assert result.volumes[10].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[10].volume_pairs[0].remote_replication.mode"
    assert result.volumes[10].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[10].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[10].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[10].volume_pairs[0].cluster_pair_id"
    assert result.volumes[10].volume_pairs[0].remote_volume_id == 1011, "Died on +.volumes[10].volume_pairs[0].remote_volume_id"
    assert result.volumes[10].volume_pairs[0].remote_volume_name == """snap-target-11""", "Died on +.volumes[10].volume_pairs[0].remote_volume_name"
    assert result.volumes[10].volume_pairs[0].remote_slice_id == 1011, "Died on +.volumes[10].volume_pairs[0].remote_slice_id"
    assert result.volumes[10].account_id == 4, "Died on +.volumes[10].account_id"
    assert result.volumes[10].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[10].create_time"
    assert result.volumes[10].virtual_volume_id is None, "Died on .volumes[10].virtual_volume_id"
    assert result.volumes[9].status == """active""", "Died on +.volumes[9].status"
    assert result.volumes[9].enable512e == False, "Died on +.volumes[9].enable512e"
    assert result.volumes[9].qos.burst_iops == 15000, "Died on +.volumes[9].qos.burst_iops"
    assert result.volumes[9].qos.burst_time == 60, "Died on +.volumes[9].qos.burst_time"
    assert result.volumes[9].qos.min_iops == 100, "Died on +.volumes[9].qos.min_iops"
    assert result.volumes[9].qos.max_iops == 15000, "Died on +.volumes[9].qos.max_iops"
    assert result.volumes[9].name == """snapshots-source-10""", "Died on +.volumes[9].name"
    assert result.volumes[9].volume_access_groups[0] == 4, "Died on +.volumes[9].volume_access_groups[0]"
    assert result.volumes[9].scsi_naadevice_id == """6f47acc1000000006d696434000001fe""", "Died on +.volumes[9].scsi_naadevice_id"
    assert result.volumes[9].total_size == 5000658944, "Died on +.volumes[9].total_size"
    assert result.volumes[9].block_size == 4096, "Died on +.volumes[9].block_size"
    assert result.volumes[9].scsi_euidevice_id == """6d696434000001fef47acc0100000000""", "Died on +.volumes[9].scsi_euidevice_id"
    assert result.volumes[9].volume_id == 510, "Died on +.volumes[9].volume_id"
    assert result.volumes[9].access == """readWrite""", "Died on +.volumes[9].access"
    assert result.volumes[9].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-10.510""", "Died on +.volumes[9].iqn"
    assert result.volumes[9].slice_count == 1, "Died on +.volumes[9].slice_count"
    assert type(result.volumes[9].attributes) is dict, "Died on .volumes[9].attributes"
    assert result.volumes[9].volume_pairs[0].volume_pair_uuid == UUID("46417bba-2ee0-43a7-8606-c6ad374c1a10"), "Died on .volumes[9].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[9].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[9].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[9].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[9].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[9].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[9].volume_pairs[0].remote_replication.state"
    assert result.volumes[9].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[9].volume_pairs[0].remote_replication.mode"
    assert result.volumes[9].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[9].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[9].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[9].volume_pairs[0].cluster_pair_id"
    assert result.volumes[9].volume_pairs[0].remote_volume_id == 1010, "Died on +.volumes[9].volume_pairs[0].remote_volume_id"
    assert result.volumes[9].volume_pairs[0].remote_volume_name == """snap-target-10""", "Died on +.volumes[9].volume_pairs[0].remote_volume_name"
    assert result.volumes[9].volume_pairs[0].remote_slice_id == 1010, "Died on +.volumes[9].volume_pairs[0].remote_slice_id"
    assert result.volumes[9].account_id == 4, "Died on +.volumes[9].account_id"
    assert result.volumes[9].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[9].create_time"
    assert result.volumes[9].virtual_volume_id is None, "Died on .volumes[9].virtual_volume_id"
    assert result.volumes[8].status == """active""", "Died on +.volumes[8].status"
    assert result.volumes[8].enable512e == False, "Died on +.volumes[8].enable512e"
    assert result.volumes[8].qos.burst_iops == 15000, "Died on +.volumes[8].qos.burst_iops"
    assert result.volumes[8].qos.burst_time == 60, "Died on +.volumes[8].qos.burst_time"
    assert result.volumes[8].qos.min_iops == 100, "Died on +.volumes[8].qos.min_iops"
    assert result.volumes[8].qos.max_iops == 15000, "Died on +.volumes[8].qos.max_iops"
    assert result.volumes[8].name == """snapshots-source-9""", "Died on +.volumes[8].name"
    assert result.volumes[8].volume_access_groups[0] == 4, "Died on +.volumes[8].volume_access_groups[0]"
    assert result.volumes[8].scsi_naadevice_id == """6f47acc1000000006d696434000001fd""", "Died on +.volumes[8].scsi_naadevice_id"
    assert result.volumes[8].total_size == 5000658944, "Died on +.volumes[8].total_size"
    assert result.volumes[8].block_size == 4096, "Died on +.volumes[8].block_size"
    assert result.volumes[8].scsi_euidevice_id == """6d696434000001fdf47acc0100000000""", "Died on +.volumes[8].scsi_euidevice_id"
    assert result.volumes[8].volume_id == 509, "Died on +.volumes[8].volume_id"
    assert result.volumes[8].access == """readWrite""", "Died on +.volumes[8].access"
    assert result.volumes[8].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-9.509""", "Died on +.volumes[8].iqn"
    assert result.volumes[8].slice_count == 1, "Died on +.volumes[8].slice_count"
    assert type(result.volumes[8].attributes) is dict, "Died on .volumes[8].attributes"
    assert result.volumes[8].volume_pairs[0].volume_pair_uuid == UUID("ff0a214e-46bd-45b4-9ba5-d600ea61e853"), "Died on .volumes[8].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[8].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[8].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[8].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[8].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[8].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[8].volume_pairs[0].remote_replication.state"
    assert result.volumes[8].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[8].volume_pairs[0].remote_replication.mode"
    assert result.volumes[8].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[8].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[8].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[8].volume_pairs[0].cluster_pair_id"
    assert result.volumes[8].volume_pairs[0].remote_volume_id == 1009, "Died on +.volumes[8].volume_pairs[0].remote_volume_id"
    assert result.volumes[8].volume_pairs[0].remote_volume_name == """snap-target-9""", "Died on +.volumes[8].volume_pairs[0].remote_volume_name"
    assert result.volumes[8].volume_pairs[0].remote_slice_id == 1009, "Died on +.volumes[8].volume_pairs[0].remote_slice_id"
    assert result.volumes[8].account_id == 4, "Died on +.volumes[8].account_id"
    assert result.volumes[8].create_time == """2016-12-30T18:07:02Z""", "Died on +.volumes[8].create_time"
    assert result.volumes[8].virtual_volume_id is None, "Died on .volumes[8].virtual_volume_id"
    assert result.volumes[7].status == """active""", "Died on +.volumes[7].status"
    assert result.volumes[7].enable512e == False, "Died on +.volumes[7].enable512e"
    assert result.volumes[7].qos.burst_iops == 15000, "Died on +.volumes[7].qos.burst_iops"
    assert result.volumes[7].qos.burst_time == 60, "Died on +.volumes[7].qos.burst_time"
    assert result.volumes[7].qos.min_iops == 100, "Died on +.volumes[7].qos.min_iops"
    assert result.volumes[7].qos.max_iops == 15000, "Died on +.volumes[7].qos.max_iops"
    assert result.volumes[7].name == """snapshots-source-8""", "Died on +.volumes[7].name"
    assert result.volumes[7].volume_access_groups[0] == 4, "Died on +.volumes[7].volume_access_groups[0]"
    assert result.volumes[7].scsi_naadevice_id == """6f47acc1000000006d696434000001fc""", "Died on +.volumes[7].scsi_naadevice_id"
    assert result.volumes[7].total_size == 5000658944, "Died on +.volumes[7].total_size"
    assert result.volumes[7].block_size == 4096, "Died on +.volumes[7].block_size"
    assert result.volumes[7].scsi_euidevice_id == """6d696434000001fcf47acc0100000000""", "Died on +.volumes[7].scsi_euidevice_id"
    assert result.volumes[7].volume_id == 508, "Died on +.volumes[7].volume_id"
    assert result.volumes[7].access == """readWrite""", "Died on +.volumes[7].access"
    assert result.volumes[7].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-8.508""", "Died on +.volumes[7].iqn"
    assert result.volumes[7].slice_count == 1, "Died on +.volumes[7].slice_count"
    assert type(result.volumes[7].attributes) is dict, "Died on .volumes[7].attributes"
    assert result.volumes[7].volume_pairs[0].volume_pair_uuid == UUID("a1d3defc-5988-4d3f-8fbd-9ac9bb6ef775"), "Died on .volumes[7].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[7].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[7].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[7].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[7].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[7].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[7].volume_pairs[0].remote_replication.state"
    assert result.volumes[7].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[7].volume_pairs[0].remote_replication.mode"
    assert result.volumes[7].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[7].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[7].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[7].volume_pairs[0].cluster_pair_id"
    assert result.volumes[7].volume_pairs[0].remote_volume_id == 1008, "Died on +.volumes[7].volume_pairs[0].remote_volume_id"
    assert result.volumes[7].volume_pairs[0].remote_volume_name == """snap-target-8""", "Died on +.volumes[7].volume_pairs[0].remote_volume_name"
    assert result.volumes[7].volume_pairs[0].remote_slice_id == 1008, "Died on +.volumes[7].volume_pairs[0].remote_slice_id"
    assert result.volumes[7].account_id == 4, "Died on +.volumes[7].account_id"
    assert result.volumes[7].create_time == """2016-12-30T18:07:02Z""", "Died on +.volumes[7].create_time"
    assert result.volumes[7].virtual_volume_id is None, "Died on .volumes[7].virtual_volume_id"
    assert result.volumes[6].status == """active""", "Died on +.volumes[6].status"
    assert result.volumes[6].enable512e == False, "Died on +.volumes[6].enable512e"
    assert result.volumes[6].qos.burst_iops == 15000, "Died on +.volumes[6].qos.burst_iops"
    assert result.volumes[6].qos.burst_time == 60, "Died on +.volumes[6].qos.burst_time"
    assert result.volumes[6].qos.min_iops == 100, "Died on +.volumes[6].qos.min_iops"
    assert result.volumes[6].qos.max_iops == 15000, "Died on +.volumes[6].qos.max_iops"
    assert result.volumes[6].name == """snapshots-source-7""", "Died on +.volumes[6].name"
    assert result.volumes[6].volume_access_groups[0] == 4, "Died on +.volumes[6].volume_access_groups[0]"
    assert result.volumes[6].scsi_naadevice_id == """6f47acc1000000006d696434000001fb""", "Died on +.volumes[6].scsi_naadevice_id"
    assert result.volumes[6].total_size == 5000658944, "Died on +.volumes[6].total_size"
    assert result.volumes[6].block_size == 4096, "Died on +.volumes[6].block_size"
    assert result.volumes[6].scsi_euidevice_id == """6d696434000001fbf47acc0100000000""", "Died on +.volumes[6].scsi_euidevice_id"
    assert result.volumes[6].volume_id == 507, "Died on +.volumes[6].volume_id"
    assert result.volumes[6].access == """readWrite""", "Died on +.volumes[6].access"
    assert result.volumes[6].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-7.507""", "Died on +.volumes[6].iqn"
    assert result.volumes[6].slice_count == 1, "Died on +.volumes[6].slice_count"
    assert type(result.volumes[6].attributes) is dict, "Died on .volumes[6].attributes"
    assert result.volumes[6].volume_pairs[0].volume_pair_uuid == UUID("307cf60c-571c-45e6-93a7-a7ce6bcf672d"), "Died on .volumes[6].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[6].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[6].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[6].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[6].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[6].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[6].volume_pairs[0].remote_replication.state"
    assert result.volumes[6].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[6].volume_pairs[0].remote_replication.mode"
    assert result.volumes[6].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[6].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[6].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[6].volume_pairs[0].cluster_pair_id"
    assert result.volumes[6].volume_pairs[0].remote_volume_id == 1007, "Died on +.volumes[6].volume_pairs[0].remote_volume_id"
    assert result.volumes[6].volume_pairs[0].remote_volume_name == """snap-target-7""", "Died on +.volumes[6].volume_pairs[0].remote_volume_name"
    assert result.volumes[6].volume_pairs[0].remote_slice_id == 1007, "Died on +.volumes[6].volume_pairs[0].remote_slice_id"
    assert result.volumes[6].account_id == 4, "Died on +.volumes[6].account_id"
    assert result.volumes[6].create_time == """2016-12-30T18:07:02Z""", "Died on +.volumes[6].create_time"
    assert result.volumes[6].virtual_volume_id is None, "Died on .volumes[6].virtual_volume_id"
    assert result.volumes[5].status == """active""", "Died on +.volumes[5].status"
    assert result.volumes[5].enable512e == False, "Died on +.volumes[5].enable512e"
    assert result.volumes[5].qos.burst_iops == 15000, "Died on +.volumes[5].qos.burst_iops"
    assert result.volumes[5].qos.burst_time == 60, "Died on +.volumes[5].qos.burst_time"
    assert result.volumes[5].qos.min_iops == 100, "Died on +.volumes[5].qos.min_iops"
    assert result.volumes[5].qos.max_iops == 15000, "Died on +.volumes[5].qos.max_iops"
    assert result.volumes[5].name == """snapshots-source-6""", "Died on +.volumes[5].name"
    assert result.volumes[5].volume_access_groups[0] == 4, "Died on +.volumes[5].volume_access_groups[0]"
    assert result.volumes[5].scsi_naadevice_id == """6f47acc1000000006d696434000001fa""", "Died on +.volumes[5].scsi_naadevice_id"
    assert result.volumes[5].total_size == 5000658944, "Died on +.volumes[5].total_size"
    assert result.volumes[5].block_size == 4096, "Died on +.volumes[5].block_size"
    assert result.volumes[5].scsi_euidevice_id == """6d696434000001faf47acc0100000000""", "Died on +.volumes[5].scsi_euidevice_id"
    assert result.volumes[5].volume_id == 506, "Died on +.volumes[5].volume_id"
    assert result.volumes[5].access == """readWrite""", "Died on +.volumes[5].access"
    assert result.volumes[5].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-6.506""", "Died on +.volumes[5].iqn"
    assert result.volumes[5].slice_count == 1, "Died on +.volumes[5].slice_count"
    assert type(result.volumes[5].attributes) is dict, "Died on .volumes[5].attributes"
    assert result.volumes[5].volume_pairs[0].volume_pair_uuid == UUID("d55b5395-266d-4531-8502-21516d8f1291"), "Died on .volumes[5].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[5].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[5].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[5].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[5].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[5].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[5].volume_pairs[0].remote_replication.state"
    assert result.volumes[5].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[5].volume_pairs[0].remote_replication.mode"
    assert result.volumes[5].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[5].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[5].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[5].volume_pairs[0].cluster_pair_id"
    assert result.volumes[5].volume_pairs[0].remote_volume_id == 1006, "Died on +.volumes[5].volume_pairs[0].remote_volume_id"
    assert result.volumes[5].volume_pairs[0].remote_volume_name == """snap-target-6""", "Died on +.volumes[5].volume_pairs[0].remote_volume_name"
    assert result.volumes[5].volume_pairs[0].remote_slice_id == 1006, "Died on +.volumes[5].volume_pairs[0].remote_slice_id"
    assert result.volumes[5].account_id == 4, "Died on +.volumes[5].account_id"
    assert result.volumes[5].create_time == """2016-12-30T18:07:02Z""", "Died on +.volumes[5].create_time"
    assert result.volumes[5].virtual_volume_id is None, "Died on .volumes[5].virtual_volume_id"
    assert result.volumes[4].status == """active""", "Died on +.volumes[4].status"
    assert result.volumes[4].enable512e == False, "Died on +.volumes[4].enable512e"
    assert result.volumes[4].qos.burst_iops == 15000, "Died on +.volumes[4].qos.burst_iops"
    assert result.volumes[4].qos.burst_time == 60, "Died on +.volumes[4].qos.burst_time"
    assert result.volumes[4].qos.min_iops == 100, "Died on +.volumes[4].qos.min_iops"
    assert result.volumes[4].qos.max_iops == 15000, "Died on +.volumes[4].qos.max_iops"
    assert result.volumes[4].name == """snapshots-source-5""", "Died on +.volumes[4].name"
    assert result.volumes[4].volume_access_groups[0] == 4, "Died on +.volumes[4].volume_access_groups[0]"
    assert result.volumes[4].scsi_naadevice_id == """6f47acc1000000006d696434000001f9""", "Died on +.volumes[4].scsi_naadevice_id"
    assert result.volumes[4].total_size == 5000658944, "Died on +.volumes[4].total_size"
    assert result.volumes[4].block_size == 4096, "Died on +.volumes[4].block_size"
    assert result.volumes[4].scsi_euidevice_id == """6d696434000001f9f47acc0100000000""", "Died on +.volumes[4].scsi_euidevice_id"
    assert result.volumes[4].volume_id == 505, "Died on +.volumes[4].volume_id"
    assert result.volumes[4].access == """readWrite""", "Died on +.volumes[4].access"
    assert result.volumes[4].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-5.505""", "Died on +.volumes[4].iqn"
    assert result.volumes[4].slice_count == 1, "Died on +.volumes[4].slice_count"
    assert type(result.volumes[4].attributes) is dict, "Died on .volumes[4].attributes"
    assert result.volumes[4].volume_pairs[0].volume_pair_uuid == UUID("9b358840-69ab-41bb-a3a5-d8492d8dd7e1"), "Died on .volumes[4].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[4].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[4].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[4].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[4].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[4].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[4].volume_pairs[0].remote_replication.state"
    assert result.volumes[4].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[4].volume_pairs[0].remote_replication.mode"
    assert result.volumes[4].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[4].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[4].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[4].volume_pairs[0].cluster_pair_id"
    assert result.volumes[4].volume_pairs[0].remote_volume_id == 1005, "Died on +.volumes[4].volume_pairs[0].remote_volume_id"
    assert result.volumes[4].volume_pairs[0].remote_volume_name == """snap-target-5""", "Died on +.volumes[4].volume_pairs[0].remote_volume_name"
    assert result.volumes[4].volume_pairs[0].remote_slice_id == 1005, "Died on +.volumes[4].volume_pairs[0].remote_slice_id"
    assert result.volumes[4].account_id == 4, "Died on +.volumes[4].account_id"
    assert result.volumes[4].create_time == """2016-12-30T18:07:02Z""", "Died on +.volumes[4].create_time"
    assert result.volumes[4].virtual_volume_id is None, "Died on .volumes[4].virtual_volume_id"
    assert result.volumes[3].status == """active""", "Died on +.volumes[3].status"
    assert result.volumes[3].enable512e == False, "Died on +.volumes[3].enable512e"
    assert result.volumes[3].qos.burst_iops == 15000, "Died on +.volumes[3].qos.burst_iops"
    assert result.volumes[3].qos.burst_time == 60, "Died on +.volumes[3].qos.burst_time"
    assert result.volumes[3].qos.min_iops == 100, "Died on +.volumes[3].qos.min_iops"
    assert result.volumes[3].qos.max_iops == 15000, "Died on +.volumes[3].qos.max_iops"
    assert result.volumes[3].name == """snapshots-source-4""", "Died on +.volumes[3].name"
    assert result.volumes[3].volume_access_groups[0] == 4, "Died on +.volumes[3].volume_access_groups[0]"
    assert result.volumes[3].scsi_naadevice_id == """6f47acc1000000006d696434000001f8""", "Died on +.volumes[3].scsi_naadevice_id"
    assert result.volumes[3].total_size == 5000658944, "Died on +.volumes[3].total_size"
    assert result.volumes[3].block_size == 4096, "Died on +.volumes[3].block_size"
    assert result.volumes[3].scsi_euidevice_id == """6d696434000001f8f47acc0100000000""", "Died on +.volumes[3].scsi_euidevice_id"
    assert result.volumes[3].volume_id == 504, "Died on +.volumes[3].volume_id"
    assert result.volumes[3].access == """readWrite""", "Died on +.volumes[3].access"
    assert result.volumes[3].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-4.504""", "Died on +.volumes[3].iqn"
    assert result.volumes[3].slice_count == 1, "Died on +.volumes[3].slice_count"
    assert type(result.volumes[3].attributes) is dict, "Died on .volumes[3].attributes"
    assert result.volumes[3].volume_pairs[0].volume_pair_uuid == UUID("2dd334e5-f2fd-401f-a603-47125d50bd93"), "Died on .volumes[3].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[3].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[3].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[3].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[3].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[3].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[3].volume_pairs[0].remote_replication.state"
    assert result.volumes[3].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[3].volume_pairs[0].remote_replication.mode"
    assert result.volumes[3].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[3].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[3].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[3].volume_pairs[0].cluster_pair_id"
    assert result.volumes[3].volume_pairs[0].remote_volume_id == 1004, "Died on +.volumes[3].volume_pairs[0].remote_volume_id"
    assert result.volumes[3].volume_pairs[0].remote_volume_name == """snap-target-4""", "Died on +.volumes[3].volume_pairs[0].remote_volume_name"
    assert result.volumes[3].volume_pairs[0].remote_slice_id == 1004, "Died on +.volumes[3].volume_pairs[0].remote_slice_id"
    assert result.volumes[3].account_id == 4, "Died on +.volumes[3].account_id"
    assert result.volumes[3].create_time == """2016-12-30T18:07:02Z""", "Died on +.volumes[3].create_time"
    assert result.volumes[3].virtual_volume_id is None, "Died on .volumes[3].virtual_volume_id"
    assert result.volumes[2].status == """active""", "Died on +.volumes[2].status"
    assert result.volumes[2].enable512e == False, "Died on +.volumes[2].enable512e"
    assert result.volumes[2].qos.burst_iops == 15000, "Died on +.volumes[2].qos.burst_iops"
    assert result.volumes[2].qos.burst_time == 60, "Died on +.volumes[2].qos.burst_time"
    assert result.volumes[2].qos.min_iops == 100, "Died on +.volumes[2].qos.min_iops"
    assert result.volumes[2].qos.max_iops == 15000, "Died on +.volumes[2].qos.max_iops"
    assert result.volumes[2].name == """snapshots-source-3""", "Died on +.volumes[2].name"
    assert result.volumes[2].volume_access_groups[0] == 4, "Died on +.volumes[2].volume_access_groups[0]"
    assert result.volumes[2].scsi_naadevice_id == """6f47acc1000000006d696434000001f7""", "Died on +.volumes[2].scsi_naadevice_id"
    assert result.volumes[2].total_size == 5000658944, "Died on +.volumes[2].total_size"
    assert result.volumes[2].block_size == 4096, "Died on +.volumes[2].block_size"
    assert result.volumes[2].scsi_euidevice_id == """6d696434000001f7f47acc0100000000""", "Died on +.volumes[2].scsi_euidevice_id"
    assert result.volumes[2].volume_id == 503, "Died on +.volumes[2].volume_id"
    assert result.volumes[2].access == """readWrite""", "Died on +.volumes[2].access"
    assert result.volumes[2].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-3.503""", "Died on +.volumes[2].iqn"
    assert result.volumes[2].slice_count == 1, "Died on +.volumes[2].slice_count"
    assert type(result.volumes[2].attributes) is dict, "Died on .volumes[2].attributes"
    assert result.volumes[2].volume_pairs[0].volume_pair_uuid == UUID("09e0b630-d7a8-4b44-b201-c7bf88f486e3"), "Died on .volumes[2].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[2].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[2].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[2].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[2].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[2].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[2].volume_pairs[0].remote_replication.state"
    assert result.volumes[2].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[2].volume_pairs[0].remote_replication.mode"
    assert result.volumes[2].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[2].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[2].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[2].volume_pairs[0].cluster_pair_id"
    assert result.volumes[2].volume_pairs[0].remote_volume_id == 1003, "Died on +.volumes[2].volume_pairs[0].remote_volume_id"
    assert result.volumes[2].volume_pairs[0].remote_volume_name == """snap-target-3""", "Died on +.volumes[2].volume_pairs[0].remote_volume_name"
    assert result.volumes[2].volume_pairs[0].remote_slice_id == 1003, "Died on +.volumes[2].volume_pairs[0].remote_slice_id"
    assert result.volumes[2].account_id == 4, "Died on +.volumes[2].account_id"
    assert result.volumes[2].create_time == """2016-12-30T18:07:02Z""", "Died on +.volumes[2].create_time"
    assert result.volumes[2].virtual_volume_id is None, "Died on .volumes[2].virtual_volume_id"
    assert result.volumes[1].status == """active""", "Died on +.volumes[1].status"
    assert result.volumes[1].enable512e == False, "Died on +.volumes[1].enable512e"
    assert result.volumes[1].qos.burst_iops == 15000, "Died on +.volumes[1].qos.burst_iops"
    assert result.volumes[1].qos.burst_time == 60, "Died on +.volumes[1].qos.burst_time"
    assert result.volumes[1].qos.min_iops == 100, "Died on +.volumes[1].qos.min_iops"
    assert result.volumes[1].qos.max_iops == 15000, "Died on +.volumes[1].qos.max_iops"
    assert result.volumes[1].name == """snapshots-source-2""", "Died on +.volumes[1].name"
    assert result.volumes[1].volume_access_groups[0] == 4, "Died on +.volumes[1].volume_access_groups[0]"
    assert result.volumes[1].scsi_naadevice_id == """6f47acc1000000006d696434000001f6""", "Died on +.volumes[1].scsi_naadevice_id"
    assert result.volumes[1].total_size == 5000658944, "Died on +.volumes[1].total_size"
    assert result.volumes[1].block_size == 4096, "Died on +.volumes[1].block_size"
    assert result.volumes[1].scsi_euidevice_id == """6d696434000001f6f47acc0100000000""", "Died on +.volumes[1].scsi_euidevice_id"
    assert result.volumes[1].volume_id == 502, "Died on +.volumes[1].volume_id"
    assert result.volumes[1].access == """readWrite""", "Died on +.volumes[1].access"
    assert result.volumes[1].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-2.502""", "Died on +.volumes[1].iqn"
    assert result.volumes[1].slice_count == 1, "Died on +.volumes[1].slice_count"
    assert type(result.volumes[1].attributes) is dict, "Died on .volumes[1].attributes"
    assert result.volumes[1].volume_pairs[0].volume_pair_uuid == UUID("2270f1a2-89dd-413f-8164-8067d0b75d16"), "Died on .volumes[1].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[1].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[1].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[1].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[1].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[1].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[1].volume_pairs[0].remote_replication.state"
    assert result.volumes[1].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[1].volume_pairs[0].remote_replication.mode"
    assert result.volumes[1].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[1].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[1].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[1].volume_pairs[0].cluster_pair_id"
    assert result.volumes[1].volume_pairs[0].remote_volume_id == 1002, "Died on +.volumes[1].volume_pairs[0].remote_volume_id"
    assert result.volumes[1].volume_pairs[0].remote_volume_name == """snap-target-2""", "Died on +.volumes[1].volume_pairs[0].remote_volume_name"
    assert result.volumes[1].volume_pairs[0].remote_slice_id == 1002, "Died on +.volumes[1].volume_pairs[0].remote_slice_id"
    assert result.volumes[1].account_id == 4, "Died on +.volumes[1].account_id"
    assert result.volumes[1].create_time == """2016-12-30T18:07:02Z""", "Died on +.volumes[1].create_time"
    assert result.volumes[1].virtual_volume_id is None, "Died on .volumes[1].virtual_volume_id"
    assert result.volumes[0].status == """active""", "Died on +.volumes[0].status"
    assert result.volumes[0].enable512e == False, "Died on +.volumes[0].enable512e"
    assert result.volumes[0].qos.burst_iops == 15000, "Died on +.volumes[0].qos.burst_iops"
    assert result.volumes[0].qos.burst_time == 60, "Died on +.volumes[0].qos.burst_time"
    assert result.volumes[0].qos.min_iops == 100, "Died on +.volumes[0].qos.min_iops"
    assert result.volumes[0].qos.max_iops == 15000, "Died on +.volumes[0].qos.max_iops"
    assert result.volumes[0].name == """snapshots-source-1""", "Died on +.volumes[0].name"
    assert result.volumes[0].volume_access_groups[0] == 4, "Died on +.volumes[0].volume_access_groups[0]"
    assert result.volumes[0].scsi_naadevice_id == """6f47acc1000000006d696434000001f5""", "Died on +.volumes[0].scsi_naadevice_id"
    assert result.volumes[0].total_size == 5000658944, "Died on +.volumes[0].total_size"
    assert result.volumes[0].block_size == 4096, "Died on +.volumes[0].block_size"
    assert result.volumes[0].scsi_euidevice_id == """6d696434000001f5f47acc0100000000""", "Died on +.volumes[0].scsi_euidevice_id"
    assert result.volumes[0].volume_id == 501, "Died on +.volumes[0].volume_id"
    assert result.volumes[0].access == """readWrite""", "Died on +.volumes[0].access"
    assert result.volumes[0].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-1.501""", "Died on +.volumes[0].iqn"
    assert result.volumes[0].slice_count == 1, "Died on +.volumes[0].slice_count"
    assert type(result.volumes[0].attributes) is dict, "Died on .volumes[0].attributes"
    assert result.volumes[0].volume_pairs[0].volume_pair_uuid == UUID("a3c7928a-6e21-4884-b5cf-9e7aea8841d4"), "Died on .volumes[0].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[0].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[0].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[0].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[0].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[0].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[0].volume_pairs[0].remote_replication.state"
    assert result.volumes[0].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[0].volume_pairs[0].remote_replication.mode"
    assert result.volumes[0].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[0].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[0].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[0].volume_pairs[0].cluster_pair_id"
    assert result.volumes[0].volume_pairs[0].remote_volume_id == 1001, "Died on +.volumes[0].volume_pairs[0].remote_volume_id"
    assert result.volumes[0].volume_pairs[0].remote_volume_name == """snap-target-1""", "Died on +.volumes[0].volume_pairs[0].remote_volume_name"
    assert result.volumes[0].volume_pairs[0].remote_slice_id == 1001, "Died on +.volumes[0].volume_pairs[0].remote_slice_id"
    assert result.volumes[0].account_id == 4, "Died on +.volumes[0].account_id"
    assert result.volumes[0].create_time == """2016-12-30T18:07:02Z""", "Died on +.volumes[0].create_time"
    assert result.volumes[0].virtual_volume_id is None, "Died on .volumes[0].virtual_volume_id"

def test_list_active_volumes_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListActiveVolumes_v8.4_0)

    
    start_volume_id = 42 # start_volume_id
    limit = 42 # limit
    result = ef.list_active_volumes()
    assert result.volumes[23].status == """active""", "Died on +.volumes[23].status"
    assert result.volumes[23].enable512e == False, "Died on +.volumes[23].enable512e"
    assert result.volumes[23].qos.burst_iops == 15000, "Died on +.volumes[23].qos.burst_iops"
    assert result.volumes[23].qos.burst_time == 60, "Died on +.volumes[23].qos.burst_time"
    assert result.volumes[23].qos.min_iops == 50, "Died on +.volumes[23].qos.min_iops"
    assert result.volumes[23].qos.max_iops == 15000, "Died on +.volumes[23].qos.max_iops"
    assert result.volumes[23].name == """CcxUogWXPr0AeI5s""", "Died on +.volumes[23].name"
    assert result.volumes[23].scsi_naadevice_id == """6f47acc1000000003463703500000018""", "Died on +.volumes[23].scsi_naadevice_id"
    assert result.volumes[23].total_size == 100000595968, "Died on +.volumes[23].total_size"
    assert result.volumes[23].block_size == 4096, "Died on +.volumes[23].block_size"
    assert result.volumes[23].scsi_euidevice_id == """3463703500000018f47acc0100000000""", "Died on +.volumes[23].scsi_euidevice_id"
    assert result.volumes[23].volume_id == 24, "Died on +.volumes[23].volume_id"
    assert result.volumes[23].access == """readWrite""", "Died on +.volumes[23].access"
    assert result.volumes[23].iqn == """iqn.2010-01.com.solidfire:4cp5.ccxuogwxpr0aei5s.24""", "Died on +.volumes[23].iqn"
    assert result.volumes[23].slice_count == 1, "Died on +.volumes[23].slice_count"
    assert type(result.volumes[23].attributes) is dict, "Died on .volumes[23].attributes"
    assert result.volumes[23].create_time == """2017-01-12T21:50:55Z""", "Died on +.volumes[23].create_time"
    assert result.volumes[23].account_id == 1, "Died on +.volumes[23].account_id"
    assert result.volumes[22].status == """active""", "Died on +.volumes[22].status"
    assert result.volumes[22].enable512e == False, "Died on +.volumes[22].enable512e"
    assert result.volumes[22].qos.burst_iops == 15000, "Died on +.volumes[22].qos.burst_iops"
    assert result.volumes[22].qos.burst_time == 60, "Died on +.volumes[22].qos.burst_time"
    assert result.volumes[22].qos.min_iops == 50, "Died on +.volumes[22].qos.min_iops"
    assert result.volumes[22].qos.max_iops == 15000, "Died on +.volumes[22].qos.max_iops"
    assert result.volumes[22].name == """ZkiyCWkJlKwEpkhv""", "Died on +.volumes[22].name"
    assert result.volumes[22].scsi_naadevice_id == """6f47acc1000000003463703500000017""", "Died on +.volumes[22].scsi_naadevice_id"
    assert result.volumes[22].total_size == 100000595968, "Died on +.volumes[22].total_size"
    assert result.volumes[22].block_size == 4096, "Died on +.volumes[22].block_size"
    assert result.volumes[22].scsi_euidevice_id == """3463703500000017f47acc0100000000""", "Died on +.volumes[22].scsi_euidevice_id"
    assert result.volumes[22].volume_id == 23, "Died on +.volumes[22].volume_id"
    assert result.volumes[22].access == """readWrite""", "Died on +.volumes[22].access"
    assert result.volumes[22].iqn == """iqn.2010-01.com.solidfire:4cp5.zkiycwkjlkwepkhv.23""", "Died on +.volumes[22].iqn"
    assert result.volumes[22].slice_count == 1, "Died on +.volumes[22].slice_count"
    assert type(result.volumes[22].attributes) is dict, "Died on .volumes[22].attributes"
    assert result.volumes[22].create_time == """2017-01-12T21:50:55Z""", "Died on +.volumes[22].create_time"
    assert result.volumes[22].account_id == 1, "Died on +.volumes[22].account_id"
    assert result.volumes[21].status == """active""", "Died on +.volumes[21].status"
    assert result.volumes[21].enable512e == False, "Died on +.volumes[21].enable512e"
    assert result.volumes[21].qos.burst_iops == 15000, "Died on +.volumes[21].qos.burst_iops"
    assert result.volumes[21].qos.burst_time == 60, "Died on +.volumes[21].qos.burst_time"
    assert result.volumes[21].qos.min_iops == 50, "Died on +.volumes[21].qos.min_iops"
    assert result.volumes[21].qos.max_iops == 15000, "Died on +.volumes[21].qos.max_iops"
    assert result.volumes[21].name == """HY5qbcN633ttrWcs""", "Died on +.volumes[21].name"
    assert result.volumes[21].scsi_naadevice_id == """6f47acc1000000003463703500000016""", "Died on +.volumes[21].scsi_naadevice_id"
    assert result.volumes[21].total_size == 100000595968, "Died on +.volumes[21].total_size"
    assert result.volumes[21].block_size == 4096, "Died on +.volumes[21].block_size"
    assert result.volumes[21].scsi_euidevice_id == """3463703500000016f47acc0100000000""", "Died on +.volumes[21].scsi_euidevice_id"
    assert result.volumes[21].volume_id == 22, "Died on +.volumes[21].volume_id"
    assert result.volumes[21].access == """readWrite""", "Died on +.volumes[21].access"
    assert result.volumes[21].iqn == """iqn.2010-01.com.solidfire:4cp5.hy5qbcn633ttrwcs.22""", "Died on +.volumes[21].iqn"
    assert result.volumes[21].slice_count == 1, "Died on +.volumes[21].slice_count"
    assert type(result.volumes[21].attributes) is dict, "Died on .volumes[21].attributes"
    assert result.volumes[21].create_time == """2017-01-12T21:50:55Z""", "Died on +.volumes[21].create_time"
    assert result.volumes[21].account_id == 1, "Died on +.volumes[21].account_id"
    assert result.volumes[20].status == """active""", "Died on +.volumes[20].status"
    assert result.volumes[20].enable512e == False, "Died on +.volumes[20].enable512e"
    assert result.volumes[20].qos.burst_iops == 15000, "Died on +.volumes[20].qos.burst_iops"
    assert result.volumes[20].qos.burst_time == 60, "Died on +.volumes[20].qos.burst_time"
    assert result.volumes[20].qos.min_iops == 50, "Died on +.volumes[20].qos.min_iops"
    assert result.volumes[20].qos.max_iops == 15000, "Died on +.volumes[20].qos.max_iops"
    assert result.volumes[20].name == """nydG98nIv9CVpvwX""", "Died on +.volumes[20].name"
    assert result.volumes[20].scsi_naadevice_id == """6f47acc1000000003463703500000015""", "Died on +.volumes[20].scsi_naadevice_id"
    assert result.volumes[20].total_size == 100000595968, "Died on +.volumes[20].total_size"
    assert result.volumes[20].block_size == 4096, "Died on +.volumes[20].block_size"
    assert result.volumes[20].scsi_euidevice_id == """3463703500000015f47acc0100000000""", "Died on +.volumes[20].scsi_euidevice_id"
    assert result.volumes[20].volume_id == 21, "Died on +.volumes[20].volume_id"
    assert result.volumes[20].access == """readWrite""", "Died on +.volumes[20].access"
    assert result.volumes[20].iqn == """iqn.2010-01.com.solidfire:4cp5.nydg98niv9cvpvwx.21""", "Died on +.volumes[20].iqn"
    assert result.volumes[20].slice_count == 1, "Died on +.volumes[20].slice_count"
    assert type(result.volumes[20].attributes) is dict, "Died on .volumes[20].attributes"
    assert result.volumes[20].create_time == """2017-01-12T21:50:55Z""", "Died on +.volumes[20].create_time"
    assert result.volumes[20].account_id == 1, "Died on +.volumes[20].account_id"
    assert result.volumes[19].status == """active""", "Died on +.volumes[19].status"
    assert result.volumes[19].enable512e == False, "Died on +.volumes[19].enable512e"
    assert result.volumes[19].qos.burst_iops == 15000, "Died on +.volumes[19].qos.burst_iops"
    assert result.volumes[19].qos.burst_time == 60, "Died on +.volumes[19].qos.burst_time"
    assert result.volumes[19].qos.min_iops == 50, "Died on +.volumes[19].qos.min_iops"
    assert result.volumes[19].qos.max_iops == 15000, "Died on +.volumes[19].qos.max_iops"
    assert result.volumes[19].name == """LkXN4OOmRXRb3gJc""", "Died on +.volumes[19].name"
    assert result.volumes[19].scsi_naadevice_id == """6f47acc1000000003463703500000014""", "Died on +.volumes[19].scsi_naadevice_id"
    assert result.volumes[19].total_size == 100000595968, "Died on +.volumes[19].total_size"
    assert result.volumes[19].block_size == 4096, "Died on +.volumes[19].block_size"
    assert result.volumes[19].scsi_euidevice_id == """3463703500000014f47acc0100000000""", "Died on +.volumes[19].scsi_euidevice_id"
    assert result.volumes[19].volume_id == 20, "Died on +.volumes[19].volume_id"
    assert result.volumes[19].access == """readWrite""", "Died on +.volumes[19].access"
    assert result.volumes[19].iqn == """iqn.2010-01.com.solidfire:4cp5.lkxn4oomrxrb3gjc.20""", "Died on +.volumes[19].iqn"
    assert result.volumes[19].slice_count == 1, "Died on +.volumes[19].slice_count"
    assert type(result.volumes[19].attributes) is dict, "Died on .volumes[19].attributes"
    assert result.volumes[19].create_time == """2017-01-12T21:50:55Z""", "Died on +.volumes[19].create_time"
    assert result.volumes[19].account_id == 1, "Died on +.volumes[19].account_id"
    assert result.volumes[18].status == """active""", "Died on +.volumes[18].status"
    assert result.volumes[18].enable512e == False, "Died on +.volumes[18].enable512e"
    assert result.volumes[18].qos.burst_iops == 15000, "Died on +.volumes[18].qos.burst_iops"
    assert result.volumes[18].qos.burst_time == 60, "Died on +.volumes[18].qos.burst_time"
    assert result.volumes[18].qos.min_iops == 50, "Died on +.volumes[18].qos.min_iops"
    assert result.volumes[18].qos.max_iops == 15000, "Died on +.volumes[18].qos.max_iops"
    assert result.volumes[18].name == """QpZzP9LgkaR0pTyJ""", "Died on +.volumes[18].name"
    assert result.volumes[18].scsi_naadevice_id == """6f47acc1000000003463703500000013""", "Died on +.volumes[18].scsi_naadevice_id"
    assert result.volumes[18].total_size == 100000595968, "Died on +.volumes[18].total_size"
    assert result.volumes[18].block_size == 4096, "Died on +.volumes[18].block_size"
    assert result.volumes[18].scsi_euidevice_id == """3463703500000013f47acc0100000000""", "Died on +.volumes[18].scsi_euidevice_id"
    assert result.volumes[18].volume_id == 19, "Died on +.volumes[18].volume_id"
    assert result.volumes[18].access == """readWrite""", "Died on +.volumes[18].access"
    assert result.volumes[18].iqn == """iqn.2010-01.com.solidfire:4cp5.qpzzp9lgkar0ptyj.19""", "Died on +.volumes[18].iqn"
    assert result.volumes[18].slice_count == 1, "Died on +.volumes[18].slice_count"
    assert type(result.volumes[18].attributes) is dict, "Died on .volumes[18].attributes"
    assert result.volumes[18].create_time == """2017-01-12T21:50:55Z""", "Died on +.volumes[18].create_time"
    assert result.volumes[18].account_id == 1, "Died on +.volumes[18].account_id"
    assert result.volumes[17].status == """active""", "Died on +.volumes[17].status"
    assert result.volumes[17].enable512e == False, "Died on +.volumes[17].enable512e"
    assert result.volumes[17].qos.burst_iops == 15000, "Died on +.volumes[17].qos.burst_iops"
    assert result.volumes[17].qos.burst_time == 60, "Died on +.volumes[17].qos.burst_time"
    assert result.volumes[17].qos.min_iops == 50, "Died on +.volumes[17].qos.min_iops"
    assert result.volumes[17].qos.max_iops == 15000, "Died on +.volumes[17].qos.max_iops"
    assert result.volumes[17].name == """RlXJtJLhq1Wq4sfn""", "Died on +.volumes[17].name"
    assert result.volumes[17].scsi_naadevice_id == """6f47acc1000000003463703500000012""", "Died on +.volumes[17].scsi_naadevice_id"
    assert result.volumes[17].total_size == 100000595968, "Died on +.volumes[17].total_size"
    assert result.volumes[17].block_size == 4096, "Died on +.volumes[17].block_size"
    assert result.volumes[17].scsi_euidevice_id == """3463703500000012f47acc0100000000""", "Died on +.volumes[17].scsi_euidevice_id"
    assert result.volumes[17].volume_id == 18, "Died on +.volumes[17].volume_id"
    assert result.volumes[17].access == """readWrite""", "Died on +.volumes[17].access"
    assert result.volumes[17].iqn == """iqn.2010-01.com.solidfire:4cp5.rlxjtjlhq1wq4sfn.18""", "Died on +.volumes[17].iqn"
    assert result.volumes[17].slice_count == 1, "Died on +.volumes[17].slice_count"
    assert type(result.volumes[17].attributes) is dict, "Died on .volumes[17].attributes"
    assert result.volumes[17].create_time == """2017-01-12T21:50:55Z""", "Died on +.volumes[17].create_time"
    assert result.volumes[17].account_id == 1, "Died on +.volumes[17].account_id"
    assert result.volumes[16].status == """active""", "Died on +.volumes[16].status"
    assert result.volumes[16].enable512e == False, "Died on +.volumes[16].enable512e"
    assert result.volumes[16].qos.burst_iops == 15000, "Died on +.volumes[16].qos.burst_iops"
    assert result.volumes[16].qos.burst_time == 60, "Died on +.volumes[16].qos.burst_time"
    assert result.volumes[16].qos.min_iops == 50, "Died on +.volumes[16].qos.min_iops"
    assert result.volumes[16].qos.max_iops == 15000, "Died on +.volumes[16].qos.max_iops"
    assert result.volumes[16].name == """OeSJRdLzgDF7ngEo""", "Died on +.volumes[16].name"
    assert result.volumes[16].scsi_naadevice_id == """6f47acc1000000003463703500000011""", "Died on +.volumes[16].scsi_naadevice_id"
    assert result.volumes[16].total_size == 100000595968, "Died on +.volumes[16].total_size"
    assert result.volumes[16].block_size == 4096, "Died on +.volumes[16].block_size"
    assert result.volumes[16].scsi_euidevice_id == """3463703500000011f47acc0100000000""", "Died on +.volumes[16].scsi_euidevice_id"
    assert result.volumes[16].volume_id == 17, "Died on +.volumes[16].volume_id"
    assert result.volumes[16].access == """readWrite""", "Died on +.volumes[16].access"
    assert result.volumes[16].iqn == """iqn.2010-01.com.solidfire:4cp5.oesjrdlzgdf7ngeo.17""", "Died on +.volumes[16].iqn"
    assert result.volumes[16].slice_count == 1, "Died on +.volumes[16].slice_count"
    assert type(result.volumes[16].attributes) is dict, "Died on .volumes[16].attributes"
    assert result.volumes[16].create_time == """2017-01-12T21:50:54Z""", "Died on +.volumes[16].create_time"
    assert result.volumes[16].account_id == 1, "Died on +.volumes[16].account_id"
    assert result.volumes[15].status == """active""", "Died on +.volumes[15].status"
    assert result.volumes[15].enable512e == False, "Died on +.volumes[15].enable512e"
    assert result.volumes[15].qos.burst_iops == 15000, "Died on +.volumes[15].qos.burst_iops"
    assert result.volumes[15].qos.burst_time == 60, "Died on +.volumes[15].qos.burst_time"
    assert result.volumes[15].qos.min_iops == 50, "Died on +.volumes[15].qos.min_iops"
    assert result.volumes[15].qos.max_iops == 15000, "Died on +.volumes[15].qos.max_iops"
    assert result.volumes[15].name == """UY947gNc68c1Y7CH""", "Died on +.volumes[15].name"
    assert result.volumes[15].scsi_naadevice_id == """6f47acc1000000003463703500000010""", "Died on +.volumes[15].scsi_naadevice_id"
    assert result.volumes[15].total_size == 100000595968, "Died on +.volumes[15].total_size"
    assert result.volumes[15].block_size == 4096, "Died on +.volumes[15].block_size"
    assert result.volumes[15].scsi_euidevice_id == """3463703500000010f47acc0100000000""", "Died on +.volumes[15].scsi_euidevice_id"
    assert result.volumes[15].volume_id == 16, "Died on +.volumes[15].volume_id"
    assert result.volumes[15].access == """readWrite""", "Died on +.volumes[15].access"
    assert result.volumes[15].iqn == """iqn.2010-01.com.solidfire:4cp5.uy947gnc68c1y7ch.16""", "Died on +.volumes[15].iqn"
    assert result.volumes[15].slice_count == 1, "Died on +.volumes[15].slice_count"
    assert type(result.volumes[15].attributes) is dict, "Died on .volumes[15].attributes"
    assert result.volumes[15].create_time == """2017-01-12T21:50:54Z""", "Died on +.volumes[15].create_time"
    assert result.volumes[15].account_id == 1, "Died on +.volumes[15].account_id"
    assert result.volumes[14].status == """active""", "Died on +.volumes[14].status"
    assert result.volumes[14].enable512e == False, "Died on +.volumes[14].enable512e"
    assert result.volumes[14].qos.burst_iops == 15000, "Died on +.volumes[14].qos.burst_iops"
    assert result.volumes[14].qos.burst_time == 60, "Died on +.volumes[14].qos.burst_time"
    assert result.volumes[14].qos.min_iops == 50, "Died on +.volumes[14].qos.min_iops"
    assert result.volumes[14].qos.max_iops == 15000, "Died on +.volumes[14].qos.max_iops"
    assert result.volumes[14].name == """Ggs1O4t77t7QcHBW""", "Died on +.volumes[14].name"
    assert result.volumes[14].scsi_naadevice_id == """6f47acc100000000346370350000000f""", "Died on +.volumes[14].scsi_naadevice_id"
    assert result.volumes[14].total_size == 100000595968, "Died on +.volumes[14].total_size"
    assert result.volumes[14].block_size == 4096, "Died on +.volumes[14].block_size"
    assert result.volumes[14].scsi_euidevice_id == """346370350000000ff47acc0100000000""", "Died on +.volumes[14].scsi_euidevice_id"
    assert result.volumes[14].volume_id == 15, "Died on +.volumes[14].volume_id"
    assert result.volumes[14].access == """readWrite""", "Died on +.volumes[14].access"
    assert result.volumes[14].iqn == """iqn.2010-01.com.solidfire:4cp5.ggs1o4t77t7qchbw.15""", "Died on +.volumes[14].iqn"
    assert result.volumes[14].slice_count == 1, "Died on +.volumes[14].slice_count"
    assert type(result.volumes[14].attributes) is dict, "Died on .volumes[14].attributes"
    assert result.volumes[14].create_time == """2017-01-12T21:50:54Z""", "Died on +.volumes[14].create_time"
    assert result.volumes[14].account_id == 1, "Died on +.volumes[14].account_id"
    assert result.volumes[13].status == """active""", "Died on +.volumes[13].status"
    assert result.volumes[13].enable512e == False, "Died on +.volumes[13].enable512e"
    assert result.volumes[13].qos.burst_iops == 15000, "Died on +.volumes[13].qos.burst_iops"
    assert result.volumes[13].qos.burst_time == 60, "Died on +.volumes[13].qos.burst_time"
    assert result.volumes[13].qos.min_iops == 50, "Died on +.volumes[13].qos.min_iops"
    assert result.volumes[13].qos.max_iops == 15000, "Died on +.volumes[13].qos.max_iops"
    assert result.volumes[13].name == """Wq5fqm1L9C1SBNZo""", "Died on +.volumes[13].name"
    assert result.volumes[13].scsi_naadevice_id == """6f47acc100000000346370350000000e""", "Died on +.volumes[13].scsi_naadevice_id"
    assert result.volumes[13].total_size == 100000595968, "Died on +.volumes[13].total_size"
    assert result.volumes[13].block_size == 4096, "Died on +.volumes[13].block_size"
    assert result.volumes[13].scsi_euidevice_id == """346370350000000ef47acc0100000000""", "Died on +.volumes[13].scsi_euidevice_id"
    assert result.volumes[13].volume_id == 14, "Died on +.volumes[13].volume_id"
    assert result.volumes[13].access == """readWrite""", "Died on +.volumes[13].access"
    assert result.volumes[13].iqn == """iqn.2010-01.com.solidfire:4cp5.wq5fqm1l9c1sbnzo.14""", "Died on +.volumes[13].iqn"
    assert result.volumes[13].slice_count == 1, "Died on +.volumes[13].slice_count"
    assert type(result.volumes[13].attributes) is dict, "Died on .volumes[13].attributes"
    assert result.volumes[13].create_time == """2017-01-12T21:50:54Z""", "Died on +.volumes[13].create_time"
    assert result.volumes[13].account_id == 1, "Died on +.volumes[13].account_id"
    assert result.volumes[12].status == """active""", "Died on +.volumes[12].status"
    assert result.volumes[12].enable512e == False, "Died on +.volumes[12].enable512e"
    assert result.volumes[12].qos.burst_iops == 15000, "Died on +.volumes[12].qos.burst_iops"
    assert result.volumes[12].qos.burst_time == 60, "Died on +.volumes[12].qos.burst_time"
    assert result.volumes[12].qos.min_iops == 50, "Died on +.volumes[12].qos.min_iops"
    assert result.volumes[12].qos.max_iops == 15000, "Died on +.volumes[12].qos.max_iops"
    assert result.volumes[12].name == """fbRDZnauPIpWkIzF""", "Died on +.volumes[12].name"
    assert result.volumes[12].scsi_naadevice_id == """6f47acc100000000346370350000000d""", "Died on +.volumes[12].scsi_naadevice_id"
    assert result.volumes[12].total_size == 100000595968, "Died on +.volumes[12].total_size"
    assert result.volumes[12].block_size == 4096, "Died on +.volumes[12].block_size"
    assert result.volumes[12].scsi_euidevice_id == """346370350000000df47acc0100000000""", "Died on +.volumes[12].scsi_euidevice_id"
    assert result.volumes[12].volume_id == 13, "Died on +.volumes[12].volume_id"
    assert result.volumes[12].access == """readWrite""", "Died on +.volumes[12].access"
    assert result.volumes[12].iqn == """iqn.2010-01.com.solidfire:4cp5.fbrdznaupipwkizf.13""", "Died on +.volumes[12].iqn"
    assert result.volumes[12].slice_count == 1, "Died on +.volumes[12].slice_count"
    assert type(result.volumes[12].attributes) is dict, "Died on .volumes[12].attributes"
    assert result.volumes[12].create_time == """2017-01-12T21:50:54Z""", "Died on +.volumes[12].create_time"
    assert result.volumes[12].account_id == 1, "Died on +.volumes[12].account_id"
    assert result.volumes[11].status == """active""", "Died on +.volumes[11].status"
    assert result.volumes[11].enable512e == False, "Died on +.volumes[11].enable512e"
    assert result.volumes[11].qos.burst_iops == 15000, "Died on +.volumes[11].qos.burst_iops"
    assert result.volumes[11].qos.burst_time == 60, "Died on +.volumes[11].qos.burst_time"
    assert result.volumes[11].qos.min_iops == 50, "Died on +.volumes[11].qos.min_iops"
    assert result.volumes[11].qos.max_iops == 15000, "Died on +.volumes[11].qos.max_iops"
    assert result.volumes[11].name == """cZpCO3D9cvrNniYa""", "Died on +.volumes[11].name"
    assert result.volumes[11].scsi_naadevice_id == """6f47acc100000000346370350000000c""", "Died on +.volumes[11].scsi_naadevice_id"
    assert result.volumes[11].total_size == 100000595968, "Died on +.volumes[11].total_size"
    assert result.volumes[11].block_size == 4096, "Died on +.volumes[11].block_size"
    assert result.volumes[11].scsi_euidevice_id == """346370350000000cf47acc0100000000""", "Died on +.volumes[11].scsi_euidevice_id"
    assert result.volumes[11].volume_id == 12, "Died on +.volumes[11].volume_id"
    assert result.volumes[11].access == """readWrite""", "Died on +.volumes[11].access"
    assert result.volumes[11].iqn == """iqn.2010-01.com.solidfire:4cp5.czpco3d9cvrnniya.12""", "Died on +.volumes[11].iqn"
    assert result.volumes[11].slice_count == 1, "Died on +.volumes[11].slice_count"
    assert type(result.volumes[11].attributes) is dict, "Died on .volumes[11].attributes"
    assert result.volumes[11].create_time == """2017-01-12T21:50:54Z""", "Died on +.volumes[11].create_time"
    assert result.volumes[11].account_id == 1, "Died on +.volumes[11].account_id"
    assert result.volumes[10].status == """active""", "Died on +.volumes[10].status"
    assert result.volumes[10].enable512e == False, "Died on +.volumes[10].enable512e"
    assert result.volumes[10].qos.burst_iops == 15000, "Died on +.volumes[10].qos.burst_iops"
    assert result.volumes[10].qos.burst_time == 60, "Died on +.volumes[10].qos.burst_time"
    assert result.volumes[10].qos.min_iops == 50, "Died on +.volumes[10].qos.min_iops"
    assert result.volumes[10].qos.max_iops == 15000, "Died on +.volumes[10].qos.max_iops"
    assert result.volumes[10].name == """wYzesUurRcnhJ4oy""", "Died on +.volumes[10].name"
    assert result.volumes[10].scsi_naadevice_id == """6f47acc100000000346370350000000b""", "Died on +.volumes[10].scsi_naadevice_id"
    assert result.volumes[10].total_size == 100000595968, "Died on +.volumes[10].total_size"
    assert result.volumes[10].block_size == 4096, "Died on +.volumes[10].block_size"
    assert result.volumes[10].scsi_euidevice_id == """346370350000000bf47acc0100000000""", "Died on +.volumes[10].scsi_euidevice_id"
    assert result.volumes[10].volume_id == 11, "Died on +.volumes[10].volume_id"
    assert result.volumes[10].access == """readWrite""", "Died on +.volumes[10].access"
    assert result.volumes[10].iqn == """iqn.2010-01.com.solidfire:4cp5.wyzesuurrcnhj4oy.11""", "Died on +.volumes[10].iqn"
    assert result.volumes[10].slice_count == 1, "Died on +.volumes[10].slice_count"
    assert type(result.volumes[10].attributes) is dict, "Died on .volumes[10].attributes"
    assert result.volumes[10].create_time == """2017-01-12T21:50:54Z""", "Died on +.volumes[10].create_time"
    assert result.volumes[10].account_id == 1, "Died on +.volumes[10].account_id"
    assert result.volumes[9].status == """active""", "Died on +.volumes[9].status"
    assert result.volumes[9].enable512e == False, "Died on +.volumes[9].enable512e"
    assert result.volumes[9].qos.burst_iops == 15000, "Died on +.volumes[9].qos.burst_iops"
    assert result.volumes[9].qos.burst_time == 60, "Died on +.volumes[9].qos.burst_time"
    assert result.volumes[9].qos.min_iops == 50, "Died on +.volumes[9].qos.min_iops"
    assert result.volumes[9].qos.max_iops == 15000, "Died on +.volumes[9].qos.max_iops"
    assert result.volumes[9].name == """pr5vqVNwcNYOSB8z""", "Died on +.volumes[9].name"
    assert result.volumes[9].scsi_naadevice_id == """6f47acc100000000346370350000000a""", "Died on +.volumes[9].scsi_naadevice_id"
    assert result.volumes[9].total_size == 100000595968, "Died on +.volumes[9].total_size"
    assert result.volumes[9].block_size == 4096, "Died on +.volumes[9].block_size"
    assert result.volumes[9].scsi_euidevice_id == """346370350000000af47acc0100000000""", "Died on +.volumes[9].scsi_euidevice_id"
    assert result.volumes[9].volume_id == 10, "Died on +.volumes[9].volume_id"
    assert result.volumes[9].access == """readWrite""", "Died on +.volumes[9].access"
    assert result.volumes[9].iqn == """iqn.2010-01.com.solidfire:4cp5.pr5vqvnwcnyosb8z.10""", "Died on +.volumes[9].iqn"
    assert result.volumes[9].slice_count == 1, "Died on +.volumes[9].slice_count"
    assert type(result.volumes[9].attributes) is dict, "Died on .volumes[9].attributes"
    assert result.volumes[9].create_time == """2017-01-12T21:50:54Z""", "Died on +.volumes[9].create_time"
    assert result.volumes[9].account_id == 1, "Died on +.volumes[9].account_id"
    assert result.volumes[8].status == """active""", "Died on +.volumes[8].status"
    assert result.volumes[8].enable512e == False, "Died on +.volumes[8].enable512e"
    assert result.volumes[8].qos.burst_iops == 15000, "Died on +.volumes[8].qos.burst_iops"
    assert result.volumes[8].qos.burst_time == 60, "Died on +.volumes[8].qos.burst_time"
    assert result.volumes[8].qos.min_iops == 50, "Died on +.volumes[8].qos.min_iops"
    assert result.volumes[8].qos.max_iops == 15000, "Died on +.volumes[8].qos.max_iops"
    assert result.volumes[8].name == """EJWKsgVUdJFzpbq9""", "Died on +.volumes[8].name"
    assert result.volumes[8].scsi_naadevice_id == """6f47acc1000000003463703500000009""", "Died on +.volumes[8].scsi_naadevice_id"
    assert result.volumes[8].total_size == 100000595968, "Died on +.volumes[8].total_size"
    assert result.volumes[8].block_size == 4096, "Died on +.volumes[8].block_size"
    assert result.volumes[8].scsi_euidevice_id == """3463703500000009f47acc0100000000""", "Died on +.volumes[8].scsi_euidevice_id"
    assert result.volumes[8].volume_id == 9, "Died on +.volumes[8].volume_id"
    assert result.volumes[8].access == """readWrite""", "Died on +.volumes[8].access"
    assert result.volumes[8].iqn == """iqn.2010-01.com.solidfire:4cp5.ejwksgvudjfzpbq9.9""", "Died on +.volumes[8].iqn"
    assert result.volumes[8].slice_count == 1, "Died on +.volumes[8].slice_count"
    assert type(result.volumes[8].attributes) is dict, "Died on .volumes[8].attributes"
    assert result.volumes[8].create_time == """2017-01-12T21:50:54Z""", "Died on +.volumes[8].create_time"
    assert result.volumes[8].account_id == 1, "Died on +.volumes[8].account_id"
    assert result.volumes[7].status == """active""", "Died on +.volumes[7].status"
    assert result.volumes[7].enable512e == False, "Died on +.volumes[7].enable512e"
    assert result.volumes[7].qos.burst_iops == 15000, "Died on +.volumes[7].qos.burst_iops"
    assert result.volumes[7].qos.burst_time == 60, "Died on +.volumes[7].qos.burst_time"
    assert result.volumes[7].qos.min_iops == 50, "Died on +.volumes[7].qos.min_iops"
    assert result.volumes[7].qos.max_iops == 15000, "Died on +.volumes[7].qos.max_iops"
    assert result.volumes[7].name == """s5vq8897ANbw2XvD""", "Died on +.volumes[7].name"
    assert result.volumes[7].scsi_naadevice_id == """6f47acc1000000003463703500000008""", "Died on +.volumes[7].scsi_naadevice_id"
    assert result.volumes[7].total_size == 100000595968, "Died on +.volumes[7].total_size"
    assert result.volumes[7].block_size == 4096, "Died on +.volumes[7].block_size"
    assert result.volumes[7].scsi_euidevice_id == """3463703500000008f47acc0100000000""", "Died on +.volumes[7].scsi_euidevice_id"
    assert result.volumes[7].volume_id == 8, "Died on +.volumes[7].volume_id"
    assert result.volumes[7].access == """readWrite""", "Died on +.volumes[7].access"
    assert result.volumes[7].iqn == """iqn.2010-01.com.solidfire:4cp5.s5vq8897anbw2xvd.8""", "Died on +.volumes[7].iqn"
    assert result.volumes[7].slice_count == 1, "Died on +.volumes[7].slice_count"
    assert type(result.volumes[7].attributes) is dict, "Died on .volumes[7].attributes"
    assert result.volumes[7].create_time == """2017-01-12T21:50:54Z""", "Died on +.volumes[7].create_time"
    assert result.volumes[7].account_id == 1, "Died on +.volumes[7].account_id"
    assert result.volumes[6].status == """active""", "Died on +.volumes[6].status"
    assert result.volumes[6].enable512e == False, "Died on +.volumes[6].enable512e"
    assert result.volumes[6].qos.burst_iops == 15000, "Died on +.volumes[6].qos.burst_iops"
    assert result.volumes[6].qos.burst_time == 60, "Died on +.volumes[6].qos.burst_time"
    assert result.volumes[6].qos.min_iops == 50, "Died on +.volumes[6].qos.min_iops"
    assert result.volumes[6].qos.max_iops == 15000, "Died on +.volumes[6].qos.max_iops"
    assert result.volumes[6].name == """wNPvtkDUYtqxE8YJ""", "Died on +.volumes[6].name"
    assert result.volumes[6].scsi_naadevice_id == """6f47acc1000000003463703500000007""", "Died on +.volumes[6].scsi_naadevice_id"
    assert result.volumes[6].total_size == 100000595968, "Died on +.volumes[6].total_size"
    assert result.volumes[6].block_size == 4096, "Died on +.volumes[6].block_size"
    assert result.volumes[6].scsi_euidevice_id == """3463703500000007f47acc0100000000""", "Died on +.volumes[6].scsi_euidevice_id"
    assert result.volumes[6].volume_id == 7, "Died on +.volumes[6].volume_id"
    assert result.volumes[6].access == """readWrite""", "Died on +.volumes[6].access"
    assert result.volumes[6].iqn == """iqn.2010-01.com.solidfire:4cp5.wnpvtkduytqxe8yj.7""", "Died on +.volumes[6].iqn"
    assert result.volumes[6].slice_count == 1, "Died on +.volumes[6].slice_count"
    assert type(result.volumes[6].attributes) is dict, "Died on .volumes[6].attributes"
    assert result.volumes[6].create_time == """2017-01-12T21:50:54Z""", "Died on +.volumes[6].create_time"
    assert result.volumes[6].account_id == 1, "Died on +.volumes[6].account_id"
    assert result.volumes[5].status == """active""", "Died on +.volumes[5].status"
    assert result.volumes[5].enable512e == False, "Died on +.volumes[5].enable512e"
    assert result.volumes[5].qos.burst_iops == 15000, "Died on +.volumes[5].qos.burst_iops"
    assert result.volumes[5].qos.burst_time == 60, "Died on +.volumes[5].qos.burst_time"
    assert result.volumes[5].qos.min_iops == 50, "Died on +.volumes[5].qos.min_iops"
    assert result.volumes[5].qos.max_iops == 15000, "Died on +.volumes[5].qos.max_iops"
    assert result.volumes[5].name == """YOrFHArnXi05zJ2s""", "Died on +.volumes[5].name"
    assert result.volumes[5].scsi_naadevice_id == """6f47acc1000000003463703500000006""", "Died on +.volumes[5].scsi_naadevice_id"
    assert result.volumes[5].total_size == 100000595968, "Died on +.volumes[5].total_size"
    assert result.volumes[5].block_size == 4096, "Died on +.volumes[5].block_size"
    assert result.volumes[5].scsi_euidevice_id == """3463703500000006f47acc0100000000""", "Died on +.volumes[5].scsi_euidevice_id"
    assert result.volumes[5].volume_id == 6, "Died on +.volumes[5].volume_id"
    assert result.volumes[5].access == """readWrite""", "Died on +.volumes[5].access"
    assert result.volumes[5].iqn == """iqn.2010-01.com.solidfire:4cp5.yorfharnxi05zj2s.6""", "Died on +.volumes[5].iqn"
    assert result.volumes[5].slice_count == 1, "Died on +.volumes[5].slice_count"
    assert type(result.volumes[5].attributes) is dict, "Died on .volumes[5].attributes"
    assert result.volumes[5].create_time == """2017-01-12T21:50:54Z""", "Died on +.volumes[5].create_time"
    assert result.volumes[5].account_id == 1, "Died on +.volumes[5].account_id"
    assert result.volumes[4].status == """active""", "Died on +.volumes[4].status"
    assert result.volumes[4].enable512e == False, "Died on +.volumes[4].enable512e"
    assert result.volumes[4].qos.burst_iops == 15000, "Died on +.volumes[4].qos.burst_iops"
    assert result.volumes[4].qos.burst_time == 60, "Died on +.volumes[4].qos.burst_time"
    assert result.volumes[4].qos.min_iops == 50, "Died on +.volumes[4].qos.min_iops"
    assert result.volumes[4].qos.max_iops == 15000, "Died on +.volumes[4].qos.max_iops"
    assert result.volumes[4].name == """F51tbr94bWV0jy8o""", "Died on +.volumes[4].name"
    assert result.volumes[4].scsi_naadevice_id == """6f47acc1000000003463703500000005""", "Died on +.volumes[4].scsi_naadevice_id"
    assert result.volumes[4].total_size == 100000595968, "Died on +.volumes[4].total_size"
    assert result.volumes[4].block_size == 4096, "Died on +.volumes[4].block_size"
    assert result.volumes[4].scsi_euidevice_id == """3463703500000005f47acc0100000000""", "Died on +.volumes[4].scsi_euidevice_id"
    assert result.volumes[4].volume_id == 5, "Died on +.volumes[4].volume_id"
    assert result.volumes[4].access == """readWrite""", "Died on +.volumes[4].access"
    assert result.volumes[4].iqn == """iqn.2010-01.com.solidfire:4cp5.f51tbr94bwv0jy8o.5""", "Died on +.volumes[4].iqn"
    assert result.volumes[4].slice_count == 1, "Died on +.volumes[4].slice_count"
    assert type(result.volumes[4].attributes) is dict, "Died on .volumes[4].attributes"
    assert result.volumes[4].create_time == """2017-01-12T21:50:54Z""", "Died on +.volumes[4].create_time"
    assert result.volumes[4].account_id == 1, "Died on +.volumes[4].account_id"
    assert result.volumes[3].status == """active""", "Died on +.volumes[3].status"
    assert result.volumes[3].enable512e == False, "Died on +.volumes[3].enable512e"
    assert result.volumes[3].qos.burst_iops == 15000, "Died on +.volumes[3].qos.burst_iops"
    assert result.volumes[3].qos.burst_time == 60, "Died on +.volumes[3].qos.burst_time"
    assert result.volumes[3].qos.min_iops == 50, "Died on +.volumes[3].qos.min_iops"
    assert result.volumes[3].qos.max_iops == 15000, "Died on +.volumes[3].qos.max_iops"
    assert result.volumes[3].name == """2exbguYB0vhzReBx""", "Died on +.volumes[3].name"
    assert result.volumes[3].scsi_naadevice_id == """6f47acc1000000003463703500000004""", "Died on +.volumes[3].scsi_naadevice_id"
    assert result.volumes[3].total_size == 100000595968, "Died on +.volumes[3].total_size"
    assert result.volumes[3].block_size == 4096, "Died on +.volumes[3].block_size"
    assert result.volumes[3].scsi_euidevice_id == """3463703500000004f47acc0100000000""", "Died on +.volumes[3].scsi_euidevice_id"
    assert result.volumes[3].volume_id == 4, "Died on +.volumes[3].volume_id"
    assert result.volumes[3].access == """readWrite""", "Died on +.volumes[3].access"
    assert result.volumes[3].iqn == """iqn.2010-01.com.solidfire:4cp5.2exbguyb0vhzrebx.4""", "Died on +.volumes[3].iqn"
    assert result.volumes[3].slice_count == 1, "Died on +.volumes[3].slice_count"
    assert type(result.volumes[3].attributes) is dict, "Died on .volumes[3].attributes"
    assert result.volumes[3].create_time == """2017-01-12T21:50:54Z""", "Died on +.volumes[3].create_time"
    assert result.volumes[3].account_id == 1, "Died on +.volumes[3].account_id"
    assert result.volumes[2].status == """active""", "Died on +.volumes[2].status"
    assert result.volumes[2].enable512e == False, "Died on +.volumes[2].enable512e"
    assert result.volumes[2].qos.burst_iops == 15000, "Died on +.volumes[2].qos.burst_iops"
    assert result.volumes[2].qos.burst_time == 60, "Died on +.volumes[2].qos.burst_time"
    assert result.volumes[2].qos.min_iops == 50, "Died on +.volumes[2].qos.min_iops"
    assert result.volumes[2].qos.max_iops == 15000, "Died on +.volumes[2].qos.max_iops"
    assert result.volumes[2].name == """0GWnM3aVwS2QUvnS""", "Died on +.volumes[2].name"
    assert result.volumes[2].scsi_naadevice_id == """6f47acc1000000003463703500000003""", "Died on +.volumes[2].scsi_naadevice_id"
    assert result.volumes[2].total_size == 100000595968, "Died on +.volumes[2].total_size"
    assert result.volumes[2].block_size == 4096, "Died on +.volumes[2].block_size"
    assert result.volumes[2].scsi_euidevice_id == """3463703500000003f47acc0100000000""", "Died on +.volumes[2].scsi_euidevice_id"
    assert result.volumes[2].volume_id == 3, "Died on +.volumes[2].volume_id"
    assert result.volumes[2].access == """readWrite""", "Died on +.volumes[2].access"
    assert result.volumes[2].iqn == """iqn.2010-01.com.solidfire:4cp5.0gwnm3avws2quvns.3""", "Died on +.volumes[2].iqn"
    assert result.volumes[2].slice_count == 1, "Died on +.volumes[2].slice_count"
    assert type(result.volumes[2].attributes) is dict, "Died on .volumes[2].attributes"
    assert result.volumes[2].create_time == """2017-01-12T21:50:54Z""", "Died on +.volumes[2].create_time"
    assert result.volumes[2].account_id == 1, "Died on +.volumes[2].account_id"
    assert result.volumes[1].status == """active""", "Died on +.volumes[1].status"
    assert result.volumes[1].enable512e == False, "Died on +.volumes[1].enable512e"
    assert result.volumes[1].qos.burst_iops == 15000, "Died on +.volumes[1].qos.burst_iops"
    assert result.volumes[1].qos.burst_time == 60, "Died on +.volumes[1].qos.burst_time"
    assert result.volumes[1].qos.min_iops == 50, "Died on +.volumes[1].qos.min_iops"
    assert result.volumes[1].qos.max_iops == 15000, "Died on +.volumes[1].qos.max_iops"
    assert result.volumes[1].name == """4fSI4FhcIvP2SACd""", "Died on +.volumes[1].name"
    assert result.volumes[1].scsi_naadevice_id == """6f47acc1000000003463703500000002""", "Died on +.volumes[1].scsi_naadevice_id"
    assert result.volumes[1].total_size == 100000595968, "Died on +.volumes[1].total_size"
    assert result.volumes[1].block_size == 4096, "Died on +.volumes[1].block_size"
    assert result.volumes[1].scsi_euidevice_id == """3463703500000002f47acc0100000000""", "Died on +.volumes[1].scsi_euidevice_id"
    assert result.volumes[1].volume_id == 2, "Died on +.volumes[1].volume_id"
    assert result.volumes[1].access == """readWrite""", "Died on +.volumes[1].access"
    assert result.volumes[1].iqn == """iqn.2010-01.com.solidfire:4cp5.4fsi4fhcivp2sacd.2""", "Died on +.volumes[1].iqn"
    assert result.volumes[1].slice_count == 1, "Died on +.volumes[1].slice_count"
    assert type(result.volumes[1].attributes) is dict, "Died on .volumes[1].attributes"
    assert result.volumes[1].create_time == """2017-01-12T21:50:54Z""", "Died on +.volumes[1].create_time"
    assert result.volumes[1].account_id == 1, "Died on +.volumes[1].account_id"
    assert result.volumes[0].status == """active""", "Died on +.volumes[0].status"
    assert result.volumes[0].enable512e == False, "Died on +.volumes[0].enable512e"
    assert result.volumes[0].qos.burst_iops == 15000, "Died on +.volumes[0].qos.burst_iops"
    assert result.volumes[0].qos.burst_time == 60, "Died on +.volumes[0].qos.burst_time"
    assert result.volumes[0].qos.min_iops == 50, "Died on +.volumes[0].qos.min_iops"
    assert result.volumes[0].qos.max_iops == 15000, "Died on +.volumes[0].qos.max_iops"
    assert result.volumes[0].name == """bfu9yDcZNU76bVZD""", "Died on +.volumes[0].name"
    assert result.volumes[0].scsi_naadevice_id == """6f47acc1000000003463703500000001""", "Died on +.volumes[0].scsi_naadevice_id"
    assert result.volumes[0].total_size == 100000595968, "Died on +.volumes[0].total_size"
    assert result.volumes[0].block_size == 4096, "Died on +.volumes[0].block_size"
    assert result.volumes[0].scsi_euidevice_id == """3463703500000001f47acc0100000000""", "Died on +.volumes[0].scsi_euidevice_id"
    assert result.volumes[0].volume_id == 1, "Died on +.volumes[0].volume_id"
    assert result.volumes[0].access == """readWrite""", "Died on +.volumes[0].access"
    assert result.volumes[0].iqn == """iqn.2010-01.com.solidfire:4cp5.bfu9ydcznu76bvzd.1""", "Died on +.volumes[0].iqn"
    assert result.volumes[0].slice_count == 1, "Died on +.volumes[0].slice_count"
    assert type(result.volumes[0].attributes) is dict, "Died on .volumes[0].attributes"
    assert result.volumes[0].create_time == """2017-01-12T21:50:54Z""", "Died on +.volumes[0].create_time"
    assert result.volumes[0].account_id == 1, "Died on +.volumes[0].account_id"

def test_list_active_volumes_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListActiveVolumes_v8.6_0)

    
    start_volume_id = 42 # start_volume_id
    limit = 42 # limit
    result = ef.list_active_volumes()
    assert result.volumes[23].status == """active""", "Died on +.volumes[23].status"
    assert result.volumes[23].enable512e == False, "Died on +.volumes[23].enable512e"
    assert result.volumes[23].qos.burst_iops == 15000, "Died on +.volumes[23].qos.burst_iops"
    assert result.volumes[23].qos.burst_time == 60, "Died on +.volumes[23].qos.burst_time"
    assert result.volumes[23].qos.min_iops == 50, "Died on +.volumes[23].qos.min_iops"
    assert result.volumes[23].qos.max_iops == 15000, "Died on +.volumes[23].qos.max_iops"
    assert result.volumes[23].name == """QczReP7sAW5Blntg""", "Died on +.volumes[23].name"
    assert result.volumes[23].scsi_naadevice_id == """6f47acc10000000070316c7100000018""", "Died on +.volumes[23].scsi_naadevice_id"
    assert result.volumes[23].total_size == 100000595968, "Died on +.volumes[23].total_size"
    assert result.volumes[23].block_size == 4096, "Died on +.volumes[23].block_size"
    assert result.volumes[23].scsi_euidevice_id == """70316c7100000018f47acc0100000000""", "Died on +.volumes[23].scsi_euidevice_id"
    assert result.volumes[23].volume_id == 24, "Died on +.volumes[23].volume_id"
    assert result.volumes[23].access == """readWrite""", "Died on +.volumes[23].access"
    assert result.volumes[23].iqn == """iqn.2010-01.com.solidfire:p1lq.qczrep7saw5blntg.24""", "Died on +.volumes[23].iqn"
    assert result.volumes[23].slice_count == 1, "Died on +.volumes[23].slice_count"
    assert type(result.volumes[23].attributes) is dict, "Died on .volumes[23].attributes"
    assert result.volumes[23].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[23].create_time"
    assert result.volumes[23].account_id == 1, "Died on +.volumes[23].account_id"
    assert result.volumes[22].status == """active""", "Died on +.volumes[22].status"
    assert result.volumes[22].enable512e == False, "Died on +.volumes[22].enable512e"
    assert result.volumes[22].qos.burst_iops == 15000, "Died on +.volumes[22].qos.burst_iops"
    assert result.volumes[22].qos.burst_time == 60, "Died on +.volumes[22].qos.burst_time"
    assert result.volumes[22].qos.min_iops == 50, "Died on +.volumes[22].qos.min_iops"
    assert result.volumes[22].qos.max_iops == 15000, "Died on +.volumes[22].qos.max_iops"
    assert result.volumes[22].name == """0wLrKvCMUZGVGCfD""", "Died on +.volumes[22].name"
    assert result.volumes[22].scsi_naadevice_id == """6f47acc10000000070316c7100000017""", "Died on +.volumes[22].scsi_naadevice_id"
    assert result.volumes[22].total_size == 100000595968, "Died on +.volumes[22].total_size"
    assert result.volumes[22].block_size == 4096, "Died on +.volumes[22].block_size"
    assert result.volumes[22].scsi_euidevice_id == """70316c7100000017f47acc0100000000""", "Died on +.volumes[22].scsi_euidevice_id"
    assert result.volumes[22].volume_id == 23, "Died on +.volumes[22].volume_id"
    assert result.volumes[22].access == """readWrite""", "Died on +.volumes[22].access"
    assert result.volumes[22].iqn == """iqn.2010-01.com.solidfire:p1lq.0wlrkvcmuzgvgcfd.23""", "Died on +.volumes[22].iqn"
    assert result.volumes[22].slice_count == 1, "Died on +.volumes[22].slice_count"
    assert type(result.volumes[22].attributes) is dict, "Died on .volumes[22].attributes"
    assert result.volumes[22].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[22].create_time"
    assert result.volumes[22].account_id == 1, "Died on +.volumes[22].account_id"
    assert result.volumes[21].status == """active""", "Died on +.volumes[21].status"
    assert result.volumes[21].enable512e == False, "Died on +.volumes[21].enable512e"
    assert result.volumes[21].qos.burst_iops == 15000, "Died on +.volumes[21].qos.burst_iops"
    assert result.volumes[21].qos.burst_time == 60, "Died on +.volumes[21].qos.burst_time"
    assert result.volumes[21].qos.min_iops == 50, "Died on +.volumes[21].qos.min_iops"
    assert result.volumes[21].qos.max_iops == 15000, "Died on +.volumes[21].qos.max_iops"
    assert result.volumes[21].name == """ujaYo9UmSxFxMWUI""", "Died on +.volumes[21].name"
    assert result.volumes[21].scsi_naadevice_id == """6f47acc10000000070316c7100000016""", "Died on +.volumes[21].scsi_naadevice_id"
    assert result.volumes[21].total_size == 100000595968, "Died on +.volumes[21].total_size"
    assert result.volumes[21].block_size == 4096, "Died on +.volumes[21].block_size"
    assert result.volumes[21].scsi_euidevice_id == """70316c7100000016f47acc0100000000""", "Died on +.volumes[21].scsi_euidevice_id"
    assert result.volumes[21].volume_id == 22, "Died on +.volumes[21].volume_id"
    assert result.volumes[21].access == """readWrite""", "Died on +.volumes[21].access"
    assert result.volumes[21].iqn == """iqn.2010-01.com.solidfire:p1lq.ujayo9umsxfxmwui.22""", "Died on +.volumes[21].iqn"
    assert result.volumes[21].slice_count == 1, "Died on +.volumes[21].slice_count"
    assert type(result.volumes[21].attributes) is dict, "Died on .volumes[21].attributes"
    assert result.volumes[21].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[21].create_time"
    assert result.volumes[21].account_id == 1, "Died on +.volumes[21].account_id"
    assert result.volumes[20].status == """active""", "Died on +.volumes[20].status"
    assert result.volumes[20].enable512e == False, "Died on +.volumes[20].enable512e"
    assert result.volumes[20].qos.burst_iops == 15000, "Died on +.volumes[20].qos.burst_iops"
    assert result.volumes[20].qos.burst_time == 60, "Died on +.volumes[20].qos.burst_time"
    assert result.volumes[20].qos.min_iops == 50, "Died on +.volumes[20].qos.min_iops"
    assert result.volumes[20].qos.max_iops == 15000, "Died on +.volumes[20].qos.max_iops"
    assert result.volumes[20].name == """EWcQf8wNBHVTDJfQ""", "Died on +.volumes[20].name"
    assert result.volumes[20].scsi_naadevice_id == """6f47acc10000000070316c7100000015""", "Died on +.volumes[20].scsi_naadevice_id"
    assert result.volumes[20].total_size == 100000595968, "Died on +.volumes[20].total_size"
    assert result.volumes[20].block_size == 4096, "Died on +.volumes[20].block_size"
    assert result.volumes[20].scsi_euidevice_id == """70316c7100000015f47acc0100000000""", "Died on +.volumes[20].scsi_euidevice_id"
    assert result.volumes[20].volume_id == 21, "Died on +.volumes[20].volume_id"
    assert result.volumes[20].access == """readWrite""", "Died on +.volumes[20].access"
    assert result.volumes[20].iqn == """iqn.2010-01.com.solidfire:p1lq.ewcqf8wnbhvtdjfq.21""", "Died on +.volumes[20].iqn"
    assert result.volumes[20].slice_count == 1, "Died on +.volumes[20].slice_count"
    assert type(result.volumes[20].attributes) is dict, "Died on .volumes[20].attributes"
    assert result.volumes[20].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[20].create_time"
    assert result.volumes[20].account_id == 1, "Died on +.volumes[20].account_id"
    assert result.volumes[19].status == """active""", "Died on +.volumes[19].status"
    assert result.volumes[19].enable512e == False, "Died on +.volumes[19].enable512e"
    assert result.volumes[19].qos.burst_iops == 15000, "Died on +.volumes[19].qos.burst_iops"
    assert result.volumes[19].qos.burst_time == 60, "Died on +.volumes[19].qos.burst_time"
    assert result.volumes[19].qos.min_iops == 50, "Died on +.volumes[19].qos.min_iops"
    assert result.volumes[19].qos.max_iops == 15000, "Died on +.volumes[19].qos.max_iops"
    assert result.volumes[19].name == """y18p2z5r7cOKdnLJ""", "Died on +.volumes[19].name"
    assert result.volumes[19].scsi_naadevice_id == """6f47acc10000000070316c7100000014""", "Died on +.volumes[19].scsi_naadevice_id"
    assert result.volumes[19].total_size == 100000595968, "Died on +.volumes[19].total_size"
    assert result.volumes[19].block_size == 4096, "Died on +.volumes[19].block_size"
    assert result.volumes[19].scsi_euidevice_id == """70316c7100000014f47acc0100000000""", "Died on +.volumes[19].scsi_euidevice_id"
    assert result.volumes[19].volume_id == 20, "Died on +.volumes[19].volume_id"
    assert result.volumes[19].access == """readWrite""", "Died on +.volumes[19].access"
    assert result.volumes[19].iqn == """iqn.2010-01.com.solidfire:p1lq.y18p2z5r7cokdnlj.20""", "Died on +.volumes[19].iqn"
    assert result.volumes[19].slice_count == 1, "Died on +.volumes[19].slice_count"
    assert type(result.volumes[19].attributes) is dict, "Died on .volumes[19].attributes"
    assert result.volumes[19].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[19].create_time"
    assert result.volumes[19].account_id == 1, "Died on +.volumes[19].account_id"
    assert result.volumes[18].status == """active""", "Died on +.volumes[18].status"
    assert result.volumes[18].enable512e == False, "Died on +.volumes[18].enable512e"
    assert result.volumes[18].qos.burst_iops == 15000, "Died on +.volumes[18].qos.burst_iops"
    assert result.volumes[18].qos.burst_time == 60, "Died on +.volumes[18].qos.burst_time"
    assert result.volumes[18].qos.min_iops == 50, "Died on +.volumes[18].qos.min_iops"
    assert result.volumes[18].qos.max_iops == 15000, "Died on +.volumes[18].qos.max_iops"
    assert result.volumes[18].name == """3cb8gKHyqVSKLHMa""", "Died on +.volumes[18].name"
    assert result.volumes[18].scsi_naadevice_id == """6f47acc10000000070316c7100000013""", "Died on +.volumes[18].scsi_naadevice_id"
    assert result.volumes[18].total_size == 100000595968, "Died on +.volumes[18].total_size"
    assert result.volumes[18].block_size == 4096, "Died on +.volumes[18].block_size"
    assert result.volumes[18].scsi_euidevice_id == """70316c7100000013f47acc0100000000""", "Died on +.volumes[18].scsi_euidevice_id"
    assert result.volumes[18].volume_id == 19, "Died on +.volumes[18].volume_id"
    assert result.volumes[18].access == """readWrite""", "Died on +.volumes[18].access"
    assert result.volumes[18].iqn == """iqn.2010-01.com.solidfire:p1lq.3cb8gkhyqvsklhma.19""", "Died on +.volumes[18].iqn"
    assert result.volumes[18].slice_count == 1, "Died on +.volumes[18].slice_count"
    assert type(result.volumes[18].attributes) is dict, "Died on .volumes[18].attributes"
    assert result.volumes[18].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[18].create_time"
    assert result.volumes[18].account_id == 1, "Died on +.volumes[18].account_id"
    assert result.volumes[17].status == """active""", "Died on +.volumes[17].status"
    assert result.volumes[17].enable512e == False, "Died on +.volumes[17].enable512e"
    assert result.volumes[17].qos.burst_iops == 15000, "Died on +.volumes[17].qos.burst_iops"
    assert result.volumes[17].qos.burst_time == 60, "Died on +.volumes[17].qos.burst_time"
    assert result.volumes[17].qos.min_iops == 50, "Died on +.volumes[17].qos.min_iops"
    assert result.volumes[17].qos.max_iops == 15000, "Died on +.volumes[17].qos.max_iops"
    assert result.volumes[17].name == """MZyzwAcyxmnF1sL6""", "Died on +.volumes[17].name"
    assert result.volumes[17].scsi_naadevice_id == """6f47acc10000000070316c7100000012""", "Died on +.volumes[17].scsi_naadevice_id"
    assert result.volumes[17].total_size == 100000595968, "Died on +.volumes[17].total_size"
    assert result.volumes[17].block_size == 4096, "Died on +.volumes[17].block_size"
    assert result.volumes[17].scsi_euidevice_id == """70316c7100000012f47acc0100000000""", "Died on +.volumes[17].scsi_euidevice_id"
    assert result.volumes[17].volume_id == 18, "Died on +.volumes[17].volume_id"
    assert result.volumes[17].access == """readWrite""", "Died on +.volumes[17].access"
    assert result.volumes[17].iqn == """iqn.2010-01.com.solidfire:p1lq.mzyzwacyxmnf1sl6.18""", "Died on +.volumes[17].iqn"
    assert result.volumes[17].slice_count == 1, "Died on +.volumes[17].slice_count"
    assert type(result.volumes[17].attributes) is dict, "Died on .volumes[17].attributes"
    assert result.volumes[17].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[17].create_time"
    assert result.volumes[17].account_id == 1, "Died on +.volumes[17].account_id"
    assert result.volumes[16].status == """active""", "Died on +.volumes[16].status"
    assert result.volumes[16].enable512e == False, "Died on +.volumes[16].enable512e"
    assert result.volumes[16].qos.burst_iops == 15000, "Died on +.volumes[16].qos.burst_iops"
    assert result.volumes[16].qos.burst_time == 60, "Died on +.volumes[16].qos.burst_time"
    assert result.volumes[16].qos.min_iops == 50, "Died on +.volumes[16].qos.min_iops"
    assert result.volumes[16].qos.max_iops == 15000, "Died on +.volumes[16].qos.max_iops"
    assert result.volumes[16].name == """uPelImPA8k34waty""", "Died on +.volumes[16].name"
    assert result.volumes[16].scsi_naadevice_id == """6f47acc10000000070316c7100000011""", "Died on +.volumes[16].scsi_naadevice_id"
    assert result.volumes[16].total_size == 100000595968, "Died on +.volumes[16].total_size"
    assert result.volumes[16].block_size == 4096, "Died on +.volumes[16].block_size"
    assert result.volumes[16].scsi_euidevice_id == """70316c7100000011f47acc0100000000""", "Died on +.volumes[16].scsi_euidevice_id"
    assert result.volumes[16].volume_id == 17, "Died on +.volumes[16].volume_id"
    assert result.volumes[16].access == """readWrite""", "Died on +.volumes[16].access"
    assert result.volumes[16].iqn == """iqn.2010-01.com.solidfire:p1lq.upelimpa8k34waty.17""", "Died on +.volumes[16].iqn"
    assert result.volumes[16].slice_count == 1, "Died on +.volumes[16].slice_count"
    assert type(result.volumes[16].attributes) is dict, "Died on .volumes[16].attributes"
    assert result.volumes[16].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[16].create_time"
    assert result.volumes[16].account_id == 1, "Died on +.volumes[16].account_id"
    assert result.volumes[15].status == """active""", "Died on +.volumes[15].status"
    assert result.volumes[15].enable512e == False, "Died on +.volumes[15].enable512e"
    assert result.volumes[15].qos.burst_iops == 15000, "Died on +.volumes[15].qos.burst_iops"
    assert result.volumes[15].qos.burst_time == 60, "Died on +.volumes[15].qos.burst_time"
    assert result.volumes[15].qos.min_iops == 50, "Died on +.volumes[15].qos.min_iops"
    assert result.volumes[15].qos.max_iops == 15000, "Died on +.volumes[15].qos.max_iops"
    assert result.volumes[15].name == """PIiIWNhpOlJ5jRXa""", "Died on +.volumes[15].name"
    assert result.volumes[15].scsi_naadevice_id == """6f47acc10000000070316c7100000010""", "Died on +.volumes[15].scsi_naadevice_id"
    assert result.volumes[15].total_size == 100000595968, "Died on +.volumes[15].total_size"
    assert result.volumes[15].block_size == 4096, "Died on +.volumes[15].block_size"
    assert result.volumes[15].scsi_euidevice_id == """70316c7100000010f47acc0100000000""", "Died on +.volumes[15].scsi_euidevice_id"
    assert result.volumes[15].volume_id == 16, "Died on +.volumes[15].volume_id"
    assert result.volumes[15].access == """readWrite""", "Died on +.volumes[15].access"
    assert result.volumes[15].iqn == """iqn.2010-01.com.solidfire:p1lq.piiiwnhpolj5jrxa.16""", "Died on +.volumes[15].iqn"
    assert result.volumes[15].slice_count == 1, "Died on +.volumes[15].slice_count"
    assert type(result.volumes[15].attributes) is dict, "Died on .volumes[15].attributes"
    assert result.volumes[15].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[15].create_time"
    assert result.volumes[15].account_id == 1, "Died on +.volumes[15].account_id"
    assert result.volumes[14].status == """active""", "Died on +.volumes[14].status"
    assert result.volumes[14].enable512e == False, "Died on +.volumes[14].enable512e"
    assert result.volumes[14].qos.burst_iops == 15000, "Died on +.volumes[14].qos.burst_iops"
    assert result.volumes[14].qos.burst_time == 60, "Died on +.volumes[14].qos.burst_time"
    assert result.volumes[14].qos.min_iops == 50, "Died on +.volumes[14].qos.min_iops"
    assert result.volumes[14].qos.max_iops == 15000, "Died on +.volumes[14].qos.max_iops"
    assert result.volumes[14].name == """znGdtdL6yByACumh""", "Died on +.volumes[14].name"
    assert result.volumes[14].scsi_naadevice_id == """6f47acc10000000070316c710000000f""", "Died on +.volumes[14].scsi_naadevice_id"
    assert result.volumes[14].total_size == 100000595968, "Died on +.volumes[14].total_size"
    assert result.volumes[14].block_size == 4096, "Died on +.volumes[14].block_size"
    assert result.volumes[14].scsi_euidevice_id == """70316c710000000ff47acc0100000000""", "Died on +.volumes[14].scsi_euidevice_id"
    assert result.volumes[14].volume_id == 15, "Died on +.volumes[14].volume_id"
    assert result.volumes[14].access == """readWrite""", "Died on +.volumes[14].access"
    assert result.volumes[14].iqn == """iqn.2010-01.com.solidfire:p1lq.zngdtdl6ybyacumh.15""", "Died on +.volumes[14].iqn"
    assert result.volumes[14].slice_count == 1, "Died on +.volumes[14].slice_count"
    assert type(result.volumes[14].attributes) is dict, "Died on .volumes[14].attributes"
    assert result.volumes[14].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[14].create_time"
    assert result.volumes[14].account_id == 1, "Died on +.volumes[14].account_id"
    assert result.volumes[13].status == """active""", "Died on +.volumes[13].status"
    assert result.volumes[13].enable512e == False, "Died on +.volumes[13].enable512e"
    assert result.volumes[13].qos.burst_iops == 15000, "Died on +.volumes[13].qos.burst_iops"
    assert result.volumes[13].qos.burst_time == 60, "Died on +.volumes[13].qos.burst_time"
    assert result.volumes[13].qos.min_iops == 50, "Died on +.volumes[13].qos.min_iops"
    assert result.volumes[13].qos.max_iops == 15000, "Died on +.volumes[13].qos.max_iops"
    assert result.volumes[13].name == """k9JTOWQfUfTozXgQ""", "Died on +.volumes[13].name"
    assert result.volumes[13].scsi_naadevice_id == """6f47acc10000000070316c710000000e""", "Died on +.volumes[13].scsi_naadevice_id"
    assert result.volumes[13].total_size == 100000595968, "Died on +.volumes[13].total_size"
    assert result.volumes[13].block_size == 4096, "Died on +.volumes[13].block_size"
    assert result.volumes[13].scsi_euidevice_id == """70316c710000000ef47acc0100000000""", "Died on +.volumes[13].scsi_euidevice_id"
    assert result.volumes[13].volume_id == 14, "Died on +.volumes[13].volume_id"
    assert result.volumes[13].access == """readWrite""", "Died on +.volumes[13].access"
    assert result.volumes[13].iqn == """iqn.2010-01.com.solidfire:p1lq.k9jtowqfuftozxgq.14""", "Died on +.volumes[13].iqn"
    assert result.volumes[13].slice_count == 1, "Died on +.volumes[13].slice_count"
    assert type(result.volumes[13].attributes) is dict, "Died on .volumes[13].attributes"
    assert result.volumes[13].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[13].create_time"
    assert result.volumes[13].account_id == 1, "Died on +.volumes[13].account_id"
    assert result.volumes[12].status == """active""", "Died on +.volumes[12].status"
    assert result.volumes[12].enable512e == False, "Died on +.volumes[12].enable512e"
    assert result.volumes[12].qos.burst_iops == 15000, "Died on +.volumes[12].qos.burst_iops"
    assert result.volumes[12].qos.burst_time == 60, "Died on +.volumes[12].qos.burst_time"
    assert result.volumes[12].qos.min_iops == 50, "Died on +.volumes[12].qos.min_iops"
    assert result.volumes[12].qos.max_iops == 15000, "Died on +.volumes[12].qos.max_iops"
    assert result.volumes[12].name == """GKXUBz5ZOdfi3FXe""", "Died on +.volumes[12].name"
    assert result.volumes[12].scsi_naadevice_id == """6f47acc10000000070316c710000000d""", "Died on +.volumes[12].scsi_naadevice_id"
    assert result.volumes[12].total_size == 100000595968, "Died on +.volumes[12].total_size"
    assert result.volumes[12].block_size == 4096, "Died on +.volumes[12].block_size"
    assert result.volumes[12].scsi_euidevice_id == """70316c710000000df47acc0100000000""", "Died on +.volumes[12].scsi_euidevice_id"
    assert result.volumes[12].volume_id == 13, "Died on +.volumes[12].volume_id"
    assert result.volumes[12].access == """readWrite""", "Died on +.volumes[12].access"
    assert result.volumes[12].iqn == """iqn.2010-01.com.solidfire:p1lq.gkxubz5zodfi3fxe.13""", "Died on +.volumes[12].iqn"
    assert result.volumes[12].slice_count == 1, "Died on +.volumes[12].slice_count"
    assert type(result.volumes[12].attributes) is dict, "Died on .volumes[12].attributes"
    assert result.volumes[12].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[12].create_time"
    assert result.volumes[12].account_id == 1, "Died on +.volumes[12].account_id"
    assert result.volumes[11].status == """active""", "Died on +.volumes[11].status"
    assert result.volumes[11].enable512e == False, "Died on +.volumes[11].enable512e"
    assert result.volumes[11].qos.burst_iops == 15000, "Died on +.volumes[11].qos.burst_iops"
    assert result.volumes[11].qos.burst_time == 60, "Died on +.volumes[11].qos.burst_time"
    assert result.volumes[11].qos.min_iops == 50, "Died on +.volumes[11].qos.min_iops"
    assert result.volumes[11].qos.max_iops == 15000, "Died on +.volumes[11].qos.max_iops"
    assert result.volumes[11].name == """i1XvBWkLpTnhqjU3""", "Died on +.volumes[11].name"
    assert result.volumes[11].scsi_naadevice_id == """6f47acc10000000070316c710000000c""", "Died on +.volumes[11].scsi_naadevice_id"
    assert result.volumes[11].total_size == 100000595968, "Died on +.volumes[11].total_size"
    assert result.volumes[11].block_size == 4096, "Died on +.volumes[11].block_size"
    assert result.volumes[11].scsi_euidevice_id == """70316c710000000cf47acc0100000000""", "Died on +.volumes[11].scsi_euidevice_id"
    assert result.volumes[11].volume_id == 12, "Died on +.volumes[11].volume_id"
    assert result.volumes[11].access == """readWrite""", "Died on +.volumes[11].access"
    assert result.volumes[11].iqn == """iqn.2010-01.com.solidfire:p1lq.i1xvbwklptnhqju3.12""", "Died on +.volumes[11].iqn"
    assert result.volumes[11].slice_count == 1, "Died on +.volumes[11].slice_count"
    assert type(result.volumes[11].attributes) is dict, "Died on .volumes[11].attributes"
    assert result.volumes[11].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[11].create_time"
    assert result.volumes[11].account_id == 1, "Died on +.volumes[11].account_id"
    assert result.volumes[10].status == """active""", "Died on +.volumes[10].status"
    assert result.volumes[10].enable512e == False, "Died on +.volumes[10].enable512e"
    assert result.volumes[10].qos.burst_iops == 15000, "Died on +.volumes[10].qos.burst_iops"
    assert result.volumes[10].qos.burst_time == 60, "Died on +.volumes[10].qos.burst_time"
    assert result.volumes[10].qos.min_iops == 50, "Died on +.volumes[10].qos.min_iops"
    assert result.volumes[10].qos.max_iops == 15000, "Died on +.volumes[10].qos.max_iops"
    assert result.volumes[10].name == """J77IpcBMNEUUbsOt""", "Died on +.volumes[10].name"
    assert result.volumes[10].scsi_naadevice_id == """6f47acc10000000070316c710000000b""", "Died on +.volumes[10].scsi_naadevice_id"
    assert result.volumes[10].total_size == 100000595968, "Died on +.volumes[10].total_size"
    assert result.volumes[10].block_size == 4096, "Died on +.volumes[10].block_size"
    assert result.volumes[10].scsi_euidevice_id == """70316c710000000bf47acc0100000000""", "Died on +.volumes[10].scsi_euidevice_id"
    assert result.volumes[10].volume_id == 11, "Died on +.volumes[10].volume_id"
    assert result.volumes[10].access == """readWrite""", "Died on +.volumes[10].access"
    assert result.volumes[10].iqn == """iqn.2010-01.com.solidfire:p1lq.j77ipcbmneuubsot.11""", "Died on +.volumes[10].iqn"
    assert result.volumes[10].slice_count == 1, "Died on +.volumes[10].slice_count"
    assert type(result.volumes[10].attributes) is dict, "Died on .volumes[10].attributes"
    assert result.volumes[10].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[10].create_time"
    assert result.volumes[10].account_id == 1, "Died on +.volumes[10].account_id"
    assert result.volumes[9].status == """active""", "Died on +.volumes[9].status"
    assert result.volumes[9].enable512e == False, "Died on +.volumes[9].enable512e"
    assert result.volumes[9].qos.burst_iops == 15000, "Died on +.volumes[9].qos.burst_iops"
    assert result.volumes[9].qos.burst_time == 60, "Died on +.volumes[9].qos.burst_time"
    assert result.volumes[9].qos.min_iops == 50, "Died on +.volumes[9].qos.min_iops"
    assert result.volumes[9].qos.max_iops == 15000, "Died on +.volumes[9].qos.max_iops"
    assert result.volumes[9].name == """feoVzzsxxY3EzVT0""", "Died on +.volumes[9].name"
    assert result.volumes[9].scsi_naadevice_id == """6f47acc10000000070316c710000000a""", "Died on +.volumes[9].scsi_naadevice_id"
    assert result.volumes[9].total_size == 100000595968, "Died on +.volumes[9].total_size"
    assert result.volumes[9].block_size == 4096, "Died on +.volumes[9].block_size"
    assert result.volumes[9].scsi_euidevice_id == """70316c710000000af47acc0100000000""", "Died on +.volumes[9].scsi_euidevice_id"
    assert result.volumes[9].volume_id == 10, "Died on +.volumes[9].volume_id"
    assert result.volumes[9].access == """readWrite""", "Died on +.volumes[9].access"
    assert result.volumes[9].iqn == """iqn.2010-01.com.solidfire:p1lq.feovzzsxxy3ezvt0.10""", "Died on +.volumes[9].iqn"
    assert result.volumes[9].slice_count == 1, "Died on +.volumes[9].slice_count"
    assert type(result.volumes[9].attributes) is dict, "Died on .volumes[9].attributes"
    assert result.volumes[9].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[9].create_time"
    assert result.volumes[9].account_id == 1, "Died on +.volumes[9].account_id"
    assert result.volumes[8].status == """active""", "Died on +.volumes[8].status"
    assert result.volumes[8].enable512e == False, "Died on +.volumes[8].enable512e"
    assert result.volumes[8].qos.burst_iops == 15000, "Died on +.volumes[8].qos.burst_iops"
    assert result.volumes[8].qos.burst_time == 60, "Died on +.volumes[8].qos.burst_time"
    assert result.volumes[8].qos.min_iops == 50, "Died on +.volumes[8].qos.min_iops"
    assert result.volumes[8].qos.max_iops == 15000, "Died on +.volumes[8].qos.max_iops"
    assert result.volumes[8].name == """BbzQYqqtGc31HYck""", "Died on +.volumes[8].name"
    assert result.volumes[8].scsi_naadevice_id == """6f47acc10000000070316c7100000009""", "Died on +.volumes[8].scsi_naadevice_id"
    assert result.volumes[8].total_size == 100000595968, "Died on +.volumes[8].total_size"
    assert result.volumes[8].block_size == 4096, "Died on +.volumes[8].block_size"
    assert result.volumes[8].scsi_euidevice_id == """70316c7100000009f47acc0100000000""", "Died on +.volumes[8].scsi_euidevice_id"
    assert result.volumes[8].volume_id == 9, "Died on +.volumes[8].volume_id"
    assert result.volumes[8].access == """readWrite""", "Died on +.volumes[8].access"
    assert result.volumes[8].iqn == """iqn.2010-01.com.solidfire:p1lq.bbzqyqqtgc31hyck.9""", "Died on +.volumes[8].iqn"
    assert result.volumes[8].slice_count == 1, "Died on +.volumes[8].slice_count"
    assert type(result.volumes[8].attributes) is dict, "Died on .volumes[8].attributes"
    assert result.volumes[8].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[8].create_time"
    assert result.volumes[8].account_id == 1, "Died on +.volumes[8].account_id"
    assert result.volumes[7].status == """active""", "Died on +.volumes[7].status"
    assert result.volumes[7].enable512e == False, "Died on +.volumes[7].enable512e"
    assert result.volumes[7].qos.burst_iops == 15000, "Died on +.volumes[7].qos.burst_iops"
    assert result.volumes[7].qos.burst_time == 60, "Died on +.volumes[7].qos.burst_time"
    assert result.volumes[7].qos.min_iops == 50, "Died on +.volumes[7].qos.min_iops"
    assert result.volumes[7].qos.max_iops == 15000, "Died on +.volumes[7].qos.max_iops"
    assert result.volumes[7].name == """nxNNoumHdf5UXcvu""", "Died on +.volumes[7].name"
    assert result.volumes[7].scsi_naadevice_id == """6f47acc10000000070316c7100000008""", "Died on +.volumes[7].scsi_naadevice_id"
    assert result.volumes[7].total_size == 100000595968, "Died on +.volumes[7].total_size"
    assert result.volumes[7].block_size == 4096, "Died on +.volumes[7].block_size"
    assert result.volumes[7].scsi_euidevice_id == """70316c7100000008f47acc0100000000""", "Died on +.volumes[7].scsi_euidevice_id"
    assert result.volumes[7].volume_id == 8, "Died on +.volumes[7].volume_id"
    assert result.volumes[7].access == """readWrite""", "Died on +.volumes[7].access"
    assert result.volumes[7].iqn == """iqn.2010-01.com.solidfire:p1lq.nxnnoumhdf5uxcvu.8""", "Died on +.volumes[7].iqn"
    assert result.volumes[7].slice_count == 1, "Died on +.volumes[7].slice_count"
    assert type(result.volumes[7].attributes) is dict, "Died on .volumes[7].attributes"
    assert result.volumes[7].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[7].create_time"
    assert result.volumes[7].account_id == 1, "Died on +.volumes[7].account_id"
    assert result.volumes[6].status == """active""", "Died on +.volumes[6].status"
    assert result.volumes[6].enable512e == False, "Died on +.volumes[6].enable512e"
    assert result.volumes[6].qos.burst_iops == 15000, "Died on +.volumes[6].qos.burst_iops"
    assert result.volumes[6].qos.burst_time == 60, "Died on +.volumes[6].qos.burst_time"
    assert result.volumes[6].qos.min_iops == 50, "Died on +.volumes[6].qos.min_iops"
    assert result.volumes[6].qos.max_iops == 15000, "Died on +.volumes[6].qos.max_iops"
    assert result.volumes[6].name == """1fZtTmEhPvnWYZ2W""", "Died on +.volumes[6].name"
    assert result.volumes[6].scsi_naadevice_id == """6f47acc10000000070316c7100000007""", "Died on +.volumes[6].scsi_naadevice_id"
    assert result.volumes[6].total_size == 100000595968, "Died on +.volumes[6].total_size"
    assert result.volumes[6].block_size == 4096, "Died on +.volumes[6].block_size"
    assert result.volumes[6].scsi_euidevice_id == """70316c7100000007f47acc0100000000""", "Died on +.volumes[6].scsi_euidevice_id"
    assert result.volumes[6].volume_id == 7, "Died on +.volumes[6].volume_id"
    assert result.volumes[6].access == """readWrite""", "Died on +.volumes[6].access"
    assert result.volumes[6].iqn == """iqn.2010-01.com.solidfire:p1lq.1fzttmehpvnwyz2w.7""", "Died on +.volumes[6].iqn"
    assert result.volumes[6].slice_count == 1, "Died on +.volumes[6].slice_count"
    assert type(result.volumes[6].attributes) is dict, "Died on .volumes[6].attributes"
    assert result.volumes[6].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[6].create_time"
    assert result.volumes[6].account_id == 1, "Died on +.volumes[6].account_id"
    assert result.volumes[5].status == """active""", "Died on +.volumes[5].status"
    assert result.volumes[5].enable512e == False, "Died on +.volumes[5].enable512e"
    assert result.volumes[5].qos.burst_iops == 15000, "Died on +.volumes[5].qos.burst_iops"
    assert result.volumes[5].qos.burst_time == 60, "Died on +.volumes[5].qos.burst_time"
    assert result.volumes[5].qos.min_iops == 50, "Died on +.volumes[5].qos.min_iops"
    assert result.volumes[5].qos.max_iops == 15000, "Died on +.volumes[5].qos.max_iops"
    assert result.volumes[5].name == """EuUab85p5zr2Lk6d""", "Died on +.volumes[5].name"
    assert result.volumes[5].scsi_naadevice_id == """6f47acc10000000070316c7100000006""", "Died on +.volumes[5].scsi_naadevice_id"
    assert result.volumes[5].total_size == 100000595968, "Died on +.volumes[5].total_size"
    assert result.volumes[5].block_size == 4096, "Died on +.volumes[5].block_size"
    assert result.volumes[5].scsi_euidevice_id == """70316c7100000006f47acc0100000000""", "Died on +.volumes[5].scsi_euidevice_id"
    assert result.volumes[5].volume_id == 6, "Died on +.volumes[5].volume_id"
    assert result.volumes[5].access == """readWrite""", "Died on +.volumes[5].access"
    assert result.volumes[5].iqn == """iqn.2010-01.com.solidfire:p1lq.euuab85p5zr2lk6d.6""", "Died on +.volumes[5].iqn"
    assert result.volumes[5].slice_count == 1, "Died on +.volumes[5].slice_count"
    assert type(result.volumes[5].attributes) is dict, "Died on .volumes[5].attributes"
    assert result.volumes[5].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[5].create_time"
    assert result.volumes[5].account_id == 1, "Died on +.volumes[5].account_id"
    assert result.volumes[4].status == """active""", "Died on +.volumes[4].status"
    assert result.volumes[4].enable512e == False, "Died on +.volumes[4].enable512e"
    assert result.volumes[4].qos.burst_iops == 15000, "Died on +.volumes[4].qos.burst_iops"
    assert result.volumes[4].qos.burst_time == 60, "Died on +.volumes[4].qos.burst_time"
    assert result.volumes[4].qos.min_iops == 50, "Died on +.volumes[4].qos.min_iops"
    assert result.volumes[4].qos.max_iops == 15000, "Died on +.volumes[4].qos.max_iops"
    assert result.volumes[4].name == """FK4Z3xvjVHH33eVg""", "Died on +.volumes[4].name"
    assert result.volumes[4].scsi_naadevice_id == """6f47acc10000000070316c7100000005""", "Died on +.volumes[4].scsi_naadevice_id"
    assert result.volumes[4].total_size == 100000595968, "Died on +.volumes[4].total_size"
    assert result.volumes[4].block_size == 4096, "Died on +.volumes[4].block_size"
    assert result.volumes[4].scsi_euidevice_id == """70316c7100000005f47acc0100000000""", "Died on +.volumes[4].scsi_euidevice_id"
    assert result.volumes[4].volume_id == 5, "Died on +.volumes[4].volume_id"
    assert result.volumes[4].access == """readWrite""", "Died on +.volumes[4].access"
    assert result.volumes[4].iqn == """iqn.2010-01.com.solidfire:p1lq.fk4z3xvjvhh33evg.5""", "Died on +.volumes[4].iqn"
    assert result.volumes[4].slice_count == 1, "Died on +.volumes[4].slice_count"
    assert type(result.volumes[4].attributes) is dict, "Died on .volumes[4].attributes"
    assert result.volumes[4].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[4].create_time"
    assert result.volumes[4].account_id == 1, "Died on +.volumes[4].account_id"
    assert result.volumes[3].status == """active""", "Died on +.volumes[3].status"
    assert result.volumes[3].enable512e == False, "Died on +.volumes[3].enable512e"
    assert result.volumes[3].qos.burst_iops == 15000, "Died on +.volumes[3].qos.burst_iops"
    assert result.volumes[3].qos.burst_time == 60, "Died on +.volumes[3].qos.burst_time"
    assert result.volumes[3].qos.min_iops == 50, "Died on +.volumes[3].qos.min_iops"
    assert result.volumes[3].qos.max_iops == 15000, "Died on +.volumes[3].qos.max_iops"
    assert result.volumes[3].name == """hQT7NDXcTT7vAiie""", "Died on +.volumes[3].name"
    assert result.volumes[3].scsi_naadevice_id == """6f47acc10000000070316c7100000004""", "Died on +.volumes[3].scsi_naadevice_id"
    assert result.volumes[3].total_size == 100000595968, "Died on +.volumes[3].total_size"
    assert result.volumes[3].block_size == 4096, "Died on +.volumes[3].block_size"
    assert result.volumes[3].scsi_euidevice_id == """70316c7100000004f47acc0100000000""", "Died on +.volumes[3].scsi_euidevice_id"
    assert result.volumes[3].volume_id == 4, "Died on +.volumes[3].volume_id"
    assert result.volumes[3].access == """readWrite""", "Died on +.volumes[3].access"
    assert result.volumes[3].iqn == """iqn.2010-01.com.solidfire:p1lq.hqt7ndxctt7vaiie.4""", "Died on +.volumes[3].iqn"
    assert result.volumes[3].slice_count == 1, "Died on +.volumes[3].slice_count"
    assert type(result.volumes[3].attributes) is dict, "Died on .volumes[3].attributes"
    assert result.volumes[3].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[3].create_time"
    assert result.volumes[3].account_id == 1, "Died on +.volumes[3].account_id"
    assert result.volumes[2].status == """active""", "Died on +.volumes[2].status"
    assert result.volumes[2].enable512e == False, "Died on +.volumes[2].enable512e"
    assert result.volumes[2].qos.burst_iops == 15000, "Died on +.volumes[2].qos.burst_iops"
    assert result.volumes[2].qos.burst_time == 60, "Died on +.volumes[2].qos.burst_time"
    assert result.volumes[2].qos.min_iops == 50, "Died on +.volumes[2].qos.min_iops"
    assert result.volumes[2].qos.max_iops == 15000, "Died on +.volumes[2].qos.max_iops"
    assert result.volumes[2].name == """fPtI0y26AyHF0Q3l""", "Died on +.volumes[2].name"
    assert result.volumes[2].scsi_naadevice_id == """6f47acc10000000070316c7100000003""", "Died on +.volumes[2].scsi_naadevice_id"
    assert result.volumes[2].total_size == 100000595968, "Died on +.volumes[2].total_size"
    assert result.volumes[2].block_size == 4096, "Died on +.volumes[2].block_size"
    assert result.volumes[2].scsi_euidevice_id == """70316c7100000003f47acc0100000000""", "Died on +.volumes[2].scsi_euidevice_id"
    assert result.volumes[2].volume_id == 3, "Died on +.volumes[2].volume_id"
    assert result.volumes[2].access == """readWrite""", "Died on +.volumes[2].access"
    assert result.volumes[2].iqn == """iqn.2010-01.com.solidfire:p1lq.fpti0y26ayhf0q3l.3""", "Died on +.volumes[2].iqn"
    assert result.volumes[2].slice_count == 1, "Died on +.volumes[2].slice_count"
    assert type(result.volumes[2].attributes) is dict, "Died on .volumes[2].attributes"
    assert result.volumes[2].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[2].create_time"
    assert result.volumes[2].account_id == 1, "Died on +.volumes[2].account_id"
    assert result.volumes[1].status == """active""", "Died on +.volumes[1].status"
    assert result.volumes[1].enable512e == False, "Died on +.volumes[1].enable512e"
    assert result.volumes[1].qos.burst_iops == 15000, "Died on +.volumes[1].qos.burst_iops"
    assert result.volumes[1].qos.burst_time == 60, "Died on +.volumes[1].qos.burst_time"
    assert result.volumes[1].qos.min_iops == 50, "Died on +.volumes[1].qos.min_iops"
    assert result.volumes[1].qos.max_iops == 15000, "Died on +.volumes[1].qos.max_iops"
    assert result.volumes[1].name == """iP0OQ46fAWvaMuQK""", "Died on +.volumes[1].name"
    assert result.volumes[1].scsi_naadevice_id == """6f47acc10000000070316c7100000002""", "Died on +.volumes[1].scsi_naadevice_id"
    assert result.volumes[1].total_size == 100000595968, "Died on +.volumes[1].total_size"
    assert result.volumes[1].block_size == 4096, "Died on +.volumes[1].block_size"
    assert result.volumes[1].scsi_euidevice_id == """70316c7100000002f47acc0100000000""", "Died on +.volumes[1].scsi_euidevice_id"
    assert result.volumes[1].volume_id == 2, "Died on +.volumes[1].volume_id"
    assert result.volumes[1].access == """readWrite""", "Died on +.volumes[1].access"
    assert result.volumes[1].iqn == """iqn.2010-01.com.solidfire:p1lq.ip0oq46fawvamuqk.2""", "Died on +.volumes[1].iqn"
    assert result.volumes[1].slice_count == 1, "Died on +.volumes[1].slice_count"
    assert type(result.volumes[1].attributes) is dict, "Died on .volumes[1].attributes"
    assert result.volumes[1].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[1].create_time"
    assert result.volumes[1].account_id == 1, "Died on +.volumes[1].account_id"
    assert result.volumes[0].status == """active""", "Died on +.volumes[0].status"
    assert result.volumes[0].enable512e == False, "Died on +.volumes[0].enable512e"
    assert result.volumes[0].qos.burst_iops == 15000, "Died on +.volumes[0].qos.burst_iops"
    assert result.volumes[0].qos.burst_time == 60, "Died on +.volumes[0].qos.burst_time"
    assert result.volumes[0].qos.min_iops == 50, "Died on +.volumes[0].qos.min_iops"
    assert result.volumes[0].qos.max_iops == 15000, "Died on +.volumes[0].qos.max_iops"
    assert result.volumes[0].name == """x8QFYmxI5yHklnJZ""", "Died on +.volumes[0].name"
    assert result.volumes[0].scsi_naadevice_id == """6f47acc10000000070316c7100000001""", "Died on +.volumes[0].scsi_naadevice_id"
    assert result.volumes[0].total_size == 100000595968, "Died on +.volumes[0].total_size"
    assert result.volumes[0].block_size == 4096, "Died on +.volumes[0].block_size"
    assert result.volumes[0].scsi_euidevice_id == """70316c7100000001f47acc0100000000""", "Died on +.volumes[0].scsi_euidevice_id"
    assert result.volumes[0].volume_id == 1, "Died on +.volumes[0].volume_id"
    assert result.volumes[0].access == """readWrite""", "Died on +.volumes[0].access"
    assert result.volumes[0].iqn == """iqn.2010-01.com.solidfire:p1lq.x8qfymxi5yhklnjz.1""", "Died on +.volumes[0].iqn"
    assert result.volumes[0].slice_count == 1, "Died on +.volumes[0].slice_count"
    assert type(result.volumes[0].attributes) is dict, "Died on .volumes[0].attributes"
    assert result.volumes[0].create_time == """2017-02-03T00:45:51Z""", "Died on +.volumes[0].create_time"
    assert result.volumes[0].account_id == 1, "Died on +.volumes[0].account_id"

def test_list_active_volumes_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListActiveVolumes_v8.7_0)

    
    start_volume_id = 42 # start_volume_id
    limit = 42 # limit
    result = ef.list_active_volumes()
    assert result.volumes[136].status == """active""", "Died on +.volumes[136].status"
    assert result.volumes[136].enable512e == False, "Died on +.volumes[136].enable512e"
    assert result.volumes[136].qos.burst_iops == 100, "Died on +.volumes[136].qos.burst_iops"
    assert result.volumes[136].qos.burst_time == 60, "Died on +.volumes[136].qos.burst_time"
    assert result.volumes[136].qos.min_iops == 100, "Died on +.volumes[136].qos.min_iops"
    assert result.volumes[136].qos.max_iops == 100, "Died on +.volumes[136].qos.max_iops"
    assert result.volumes[136].name == """suite-stage-2-QED--137""", "Died on +.volumes[136].name"
    assert result.volumes[136].scsi_naadevice_id == """6f47acc10000000035796d3600000089""", "Died on +.volumes[136].scsi_naadevice_id"
    assert result.volumes[136].total_size == 268435456000, "Died on +.volumes[136].total_size"
    assert result.volumes[136].block_size == 4096, "Died on +.volumes[136].block_size"
    assert result.volumes[136].scsi_euidevice_id == """35796d3600000089f47acc0100000000""", "Died on +.volumes[136].scsi_euidevice_id"
    assert result.volumes[136].volume_id == 137, "Died on +.volumes[136].volume_id"
    assert result.volumes[136].access == """readWrite""", "Died on +.volumes[136].access"
    assert result.volumes[136].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--137.137""", "Died on +.volumes[136].iqn"
    assert result.volumes[136].slice_count == 1, "Died on +.volumes[136].slice_count"
    assert type(result.volumes[136].attributes) is dict, "Died on .volumes[136].attributes"
    assert result.volumes[136].create_time == """2017-01-17T17:13:52Z""", "Died on +.volumes[136].create_time"
    assert result.volumes[136].account_id == 1, "Died on +.volumes[136].account_id"
    assert result.volumes[135].status == """active""", "Died on +.volumes[135].status"
    assert result.volumes[135].enable512e == False, "Died on +.volumes[135].enable512e"
    assert result.volumes[135].qos.burst_iops == 100, "Died on +.volumes[135].qos.burst_iops"
    assert result.volumes[135].qos.burst_time == 60, "Died on +.volumes[135].qos.burst_time"
    assert result.volumes[135].qos.min_iops == 100, "Died on +.volumes[135].qos.min_iops"
    assert result.volumes[135].qos.max_iops == 100, "Died on +.volumes[135].qos.max_iops"
    assert result.volumes[135].name == """suite-stage-2-QED--136""", "Died on +.volumes[135].name"
    assert result.volumes[135].scsi_naadevice_id == """6f47acc10000000035796d3600000088""", "Died on +.volumes[135].scsi_naadevice_id"
    assert result.volumes[135].total_size == 268435456000, "Died on +.volumes[135].total_size"
    assert result.volumes[135].block_size == 4096, "Died on +.volumes[135].block_size"
    assert result.volumes[135].scsi_euidevice_id == """35796d3600000088f47acc0100000000""", "Died on +.volumes[135].scsi_euidevice_id"
    assert result.volumes[135].volume_id == 136, "Died on +.volumes[135].volume_id"
    assert result.volumes[135].access == """readWrite""", "Died on +.volumes[135].access"
    assert result.volumes[135].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--136.136""", "Died on +.volumes[135].iqn"
    assert result.volumes[135].slice_count == 1, "Died on +.volumes[135].slice_count"
    assert type(result.volumes[135].attributes) is dict, "Died on .volumes[135].attributes"
    assert result.volumes[135].create_time == """2017-01-17T17:13:52Z""", "Died on +.volumes[135].create_time"
    assert result.volumes[135].account_id == 1, "Died on +.volumes[135].account_id"
    assert result.volumes[134].status == """active""", "Died on +.volumes[134].status"
    assert result.volumes[134].enable512e == False, "Died on +.volumes[134].enable512e"
    assert result.volumes[134].qos.burst_iops == 100, "Died on +.volumes[134].qos.burst_iops"
    assert result.volumes[134].qos.burst_time == 60, "Died on +.volumes[134].qos.burst_time"
    assert result.volumes[134].qos.min_iops == 100, "Died on +.volumes[134].qos.min_iops"
    assert result.volumes[134].qos.max_iops == 100, "Died on +.volumes[134].qos.max_iops"
    assert result.volumes[134].name == """suite-stage-2-QED--135""", "Died on +.volumes[134].name"
    assert result.volumes[134].scsi_naadevice_id == """6f47acc10000000035796d3600000087""", "Died on +.volumes[134].scsi_naadevice_id"
    assert result.volumes[134].total_size == 268435456000, "Died on +.volumes[134].total_size"
    assert result.volumes[134].block_size == 4096, "Died on +.volumes[134].block_size"
    assert result.volumes[134].scsi_euidevice_id == """35796d3600000087f47acc0100000000""", "Died on +.volumes[134].scsi_euidevice_id"
    assert result.volumes[134].volume_id == 135, "Died on +.volumes[134].volume_id"
    assert result.volumes[134].access == """readWrite""", "Died on +.volumes[134].access"
    assert result.volumes[134].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--135.135""", "Died on +.volumes[134].iqn"
    assert result.volumes[134].slice_count == 1, "Died on +.volumes[134].slice_count"
    assert type(result.volumes[134].attributes) is dict, "Died on .volumes[134].attributes"
    assert result.volumes[134].create_time == """2017-01-17T17:13:52Z""", "Died on +.volumes[134].create_time"
    assert result.volumes[134].account_id == 1, "Died on +.volumes[134].account_id"
    assert result.volumes[133].status == """active""", "Died on +.volumes[133].status"
    assert result.volumes[133].enable512e == False, "Died on +.volumes[133].enable512e"
    assert result.volumes[133].qos.burst_iops == 100, "Died on +.volumes[133].qos.burst_iops"
    assert result.volumes[133].qos.burst_time == 60, "Died on +.volumes[133].qos.burst_time"
    assert result.volumes[133].qos.min_iops == 100, "Died on +.volumes[133].qos.min_iops"
    assert result.volumes[133].qos.max_iops == 100, "Died on +.volumes[133].qos.max_iops"
    assert result.volumes[133].name == """suite-stage-2-QED--134""", "Died on +.volumes[133].name"
    assert result.volumes[133].scsi_naadevice_id == """6f47acc10000000035796d3600000086""", "Died on +.volumes[133].scsi_naadevice_id"
    assert result.volumes[133].total_size == 268435456000, "Died on +.volumes[133].total_size"
    assert result.volumes[133].block_size == 4096, "Died on +.volumes[133].block_size"
    assert result.volumes[133].scsi_euidevice_id == """35796d3600000086f47acc0100000000""", "Died on +.volumes[133].scsi_euidevice_id"
    assert result.volumes[133].volume_id == 134, "Died on +.volumes[133].volume_id"
    assert result.volumes[133].access == """readWrite""", "Died on +.volumes[133].access"
    assert result.volumes[133].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--134.134""", "Died on +.volumes[133].iqn"
    assert result.volumes[133].slice_count == 1, "Died on +.volumes[133].slice_count"
    assert type(result.volumes[133].attributes) is dict, "Died on .volumes[133].attributes"
    assert result.volumes[133].create_time == """2017-01-17T17:13:52Z""", "Died on +.volumes[133].create_time"
    assert result.volumes[133].account_id == 1, "Died on +.volumes[133].account_id"
    assert result.volumes[132].status == """active""", "Died on +.volumes[132].status"
    assert result.volumes[132].enable512e == False, "Died on +.volumes[132].enable512e"
    assert result.volumes[132].qos.burst_iops == 100, "Died on +.volumes[132].qos.burst_iops"
    assert result.volumes[132].qos.burst_time == 60, "Died on +.volumes[132].qos.burst_time"
    assert result.volumes[132].qos.min_iops == 100, "Died on +.volumes[132].qos.min_iops"
    assert result.volumes[132].qos.max_iops == 100, "Died on +.volumes[132].qos.max_iops"
    assert result.volumes[132].name == """suite-stage-2-QED--133""", "Died on +.volumes[132].name"
    assert result.volumes[132].scsi_naadevice_id == """6f47acc10000000035796d3600000085""", "Died on +.volumes[132].scsi_naadevice_id"
    assert result.volumes[132].total_size == 268435456000, "Died on +.volumes[132].total_size"
    assert result.volumes[132].block_size == 4096, "Died on +.volumes[132].block_size"
    assert result.volumes[132].scsi_euidevice_id == """35796d3600000085f47acc0100000000""", "Died on +.volumes[132].scsi_euidevice_id"
    assert result.volumes[132].volume_id == 133, "Died on +.volumes[132].volume_id"
    assert result.volumes[132].access == """readWrite""", "Died on +.volumes[132].access"
    assert result.volumes[132].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--133.133""", "Died on +.volumes[132].iqn"
    assert result.volumes[132].slice_count == 1, "Died on +.volumes[132].slice_count"
    assert type(result.volumes[132].attributes) is dict, "Died on .volumes[132].attributes"
    assert result.volumes[132].create_time == """2017-01-17T17:13:52Z""", "Died on +.volumes[132].create_time"
    assert result.volumes[132].account_id == 1, "Died on +.volumes[132].account_id"
    assert result.volumes[131].status == """active""", "Died on +.volumes[131].status"
    assert result.volumes[131].enable512e == False, "Died on +.volumes[131].enable512e"
    assert result.volumes[131].qos.burst_iops == 100, "Died on +.volumes[131].qos.burst_iops"
    assert result.volumes[131].qos.burst_time == 60, "Died on +.volumes[131].qos.burst_time"
    assert result.volumes[131].qos.min_iops == 100, "Died on +.volumes[131].qos.min_iops"
    assert result.volumes[131].qos.max_iops == 100, "Died on +.volumes[131].qos.max_iops"
    assert result.volumes[131].name == """suite-stage-2-QED--132""", "Died on +.volumes[131].name"
    assert result.volumes[131].scsi_naadevice_id == """6f47acc10000000035796d3600000084""", "Died on +.volumes[131].scsi_naadevice_id"
    assert result.volumes[131].total_size == 268435456000, "Died on +.volumes[131].total_size"
    assert result.volumes[131].block_size == 4096, "Died on +.volumes[131].block_size"
    assert result.volumes[131].scsi_euidevice_id == """35796d3600000084f47acc0100000000""", "Died on +.volumes[131].scsi_euidevice_id"
    assert result.volumes[131].volume_id == 132, "Died on +.volumes[131].volume_id"
    assert result.volumes[131].access == """readWrite""", "Died on +.volumes[131].access"
    assert result.volumes[131].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--132.132""", "Died on +.volumes[131].iqn"
    assert result.volumes[131].slice_count == 1, "Died on +.volumes[131].slice_count"
    assert type(result.volumes[131].attributes) is dict, "Died on .volumes[131].attributes"
    assert result.volumes[131].create_time == """2017-01-17T17:13:52Z""", "Died on +.volumes[131].create_time"
    assert result.volumes[131].account_id == 1, "Died on +.volumes[131].account_id"
    assert result.volumes[130].status == """active""", "Died on +.volumes[130].status"
    assert result.volumes[130].enable512e == False, "Died on +.volumes[130].enable512e"
    assert result.volumes[130].qos.burst_iops == 100, "Died on +.volumes[130].qos.burst_iops"
    assert result.volumes[130].qos.burst_time == 60, "Died on +.volumes[130].qos.burst_time"
    assert result.volumes[130].qos.min_iops == 100, "Died on +.volumes[130].qos.min_iops"
    assert result.volumes[130].qos.max_iops == 100, "Died on +.volumes[130].qos.max_iops"
    assert result.volumes[130].name == """suite-stage-2-QED--131""", "Died on +.volumes[130].name"
    assert result.volumes[130].scsi_naadevice_id == """6f47acc10000000035796d3600000083""", "Died on +.volumes[130].scsi_naadevice_id"
    assert result.volumes[130].total_size == 268435456000, "Died on +.volumes[130].total_size"
    assert result.volumes[130].block_size == 4096, "Died on +.volumes[130].block_size"
    assert result.volumes[130].scsi_euidevice_id == """35796d3600000083f47acc0100000000""", "Died on +.volumes[130].scsi_euidevice_id"
    assert result.volumes[130].volume_id == 131, "Died on +.volumes[130].volume_id"
    assert result.volumes[130].access == """readWrite""", "Died on +.volumes[130].access"
    assert result.volumes[130].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--131.131""", "Died on +.volumes[130].iqn"
    assert result.volumes[130].slice_count == 1, "Died on +.volumes[130].slice_count"
    assert type(result.volumes[130].attributes) is dict, "Died on .volumes[130].attributes"
    assert result.volumes[130].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[130].create_time"
    assert result.volumes[130].account_id == 1, "Died on +.volumes[130].account_id"
    assert result.volumes[129].status == """active""", "Died on +.volumes[129].status"
    assert result.volumes[129].enable512e == False, "Died on +.volumes[129].enable512e"
    assert result.volumes[129].qos.burst_iops == 100, "Died on +.volumes[129].qos.burst_iops"
    assert result.volumes[129].qos.burst_time == 60, "Died on +.volumes[129].qos.burst_time"
    assert result.volumes[129].qos.min_iops == 100, "Died on +.volumes[129].qos.min_iops"
    assert result.volumes[129].qos.max_iops == 100, "Died on +.volumes[129].qos.max_iops"
    assert result.volumes[129].name == """suite-stage-2-QED--130""", "Died on +.volumes[129].name"
    assert result.volumes[129].scsi_naadevice_id == """6f47acc10000000035796d3600000082""", "Died on +.volumes[129].scsi_naadevice_id"
    assert result.volumes[129].total_size == 268435456000, "Died on +.volumes[129].total_size"
    assert result.volumes[129].block_size == 4096, "Died on +.volumes[129].block_size"
    assert result.volumes[129].scsi_euidevice_id == """35796d3600000082f47acc0100000000""", "Died on +.volumes[129].scsi_euidevice_id"
    assert result.volumes[129].volume_id == 130, "Died on +.volumes[129].volume_id"
    assert result.volumes[129].access == """readWrite""", "Died on +.volumes[129].access"
    assert result.volumes[129].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--130.130""", "Died on +.volumes[129].iqn"
    assert result.volumes[129].slice_count == 1, "Died on +.volumes[129].slice_count"
    assert type(result.volumes[129].attributes) is dict, "Died on .volumes[129].attributes"
    assert result.volumes[129].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[129].create_time"
    assert result.volumes[129].account_id == 1, "Died on +.volumes[129].account_id"
    assert result.volumes[128].status == """active""", "Died on +.volumes[128].status"
    assert result.volumes[128].enable512e == False, "Died on +.volumes[128].enable512e"
    assert result.volumes[128].qos.burst_iops == 100, "Died on +.volumes[128].qos.burst_iops"
    assert result.volumes[128].qos.burst_time == 60, "Died on +.volumes[128].qos.burst_time"
    assert result.volumes[128].qos.min_iops == 100, "Died on +.volumes[128].qos.min_iops"
    assert result.volumes[128].qos.max_iops == 100, "Died on +.volumes[128].qos.max_iops"
    assert result.volumes[128].name == """suite-stage-2-QED--129""", "Died on +.volumes[128].name"
    assert result.volumes[128].scsi_naadevice_id == """6f47acc10000000035796d3600000081""", "Died on +.volumes[128].scsi_naadevice_id"
    assert result.volumes[128].total_size == 268435456000, "Died on +.volumes[128].total_size"
    assert result.volumes[128].block_size == 4096, "Died on +.volumes[128].block_size"
    assert result.volumes[128].scsi_euidevice_id == """35796d3600000081f47acc0100000000""", "Died on +.volumes[128].scsi_euidevice_id"
    assert result.volumes[128].volume_id == 129, "Died on +.volumes[128].volume_id"
    assert result.volumes[128].access == """readWrite""", "Died on +.volumes[128].access"
    assert result.volumes[128].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--129.129""", "Died on +.volumes[128].iqn"
    assert result.volumes[128].slice_count == 1, "Died on +.volumes[128].slice_count"
    assert type(result.volumes[128].attributes) is dict, "Died on .volumes[128].attributes"
    assert result.volumes[128].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[128].create_time"
    assert result.volumes[128].account_id == 1, "Died on +.volumes[128].account_id"
    assert result.volumes[127].status == """active""", "Died on +.volumes[127].status"
    assert result.volumes[127].enable512e == False, "Died on +.volumes[127].enable512e"
    assert result.volumes[127].qos.burst_iops == 100, "Died on +.volumes[127].qos.burst_iops"
    assert result.volumes[127].qos.burst_time == 60, "Died on +.volumes[127].qos.burst_time"
    assert result.volumes[127].qos.min_iops == 100, "Died on +.volumes[127].qos.min_iops"
    assert result.volumes[127].qos.max_iops == 100, "Died on +.volumes[127].qos.max_iops"
    assert result.volumes[127].name == """suite-stage-2-QED--128""", "Died on +.volumes[127].name"
    assert result.volumes[127].scsi_naadevice_id == """6f47acc10000000035796d3600000080""", "Died on +.volumes[127].scsi_naadevice_id"
    assert result.volumes[127].total_size == 268435456000, "Died on +.volumes[127].total_size"
    assert result.volumes[127].block_size == 4096, "Died on +.volumes[127].block_size"
    assert result.volumes[127].scsi_euidevice_id == """35796d3600000080f47acc0100000000""", "Died on +.volumes[127].scsi_euidevice_id"
    assert result.volumes[127].volume_id == 128, "Died on +.volumes[127].volume_id"
    assert result.volumes[127].access == """readWrite""", "Died on +.volumes[127].access"
    assert result.volumes[127].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--128.128""", "Died on +.volumes[127].iqn"
    assert result.volumes[127].slice_count == 1, "Died on +.volumes[127].slice_count"
    assert type(result.volumes[127].attributes) is dict, "Died on .volumes[127].attributes"
    assert result.volumes[127].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[127].create_time"
    assert result.volumes[127].account_id == 1, "Died on +.volumes[127].account_id"
    assert result.volumes[126].status == """active""", "Died on +.volumes[126].status"
    assert result.volumes[126].enable512e == False, "Died on +.volumes[126].enable512e"
    assert result.volumes[126].qos.burst_iops == 100, "Died on +.volumes[126].qos.burst_iops"
    assert result.volumes[126].qos.burst_time == 60, "Died on +.volumes[126].qos.burst_time"
    assert result.volumes[126].qos.min_iops == 100, "Died on +.volumes[126].qos.min_iops"
    assert result.volumes[126].qos.max_iops == 100, "Died on +.volumes[126].qos.max_iops"
    assert result.volumes[126].name == """suite-stage-2-QED--127""", "Died on +.volumes[126].name"
    assert result.volumes[126].scsi_naadevice_id == """6f47acc10000000035796d360000007f""", "Died on +.volumes[126].scsi_naadevice_id"
    assert result.volumes[126].total_size == 268435456000, "Died on +.volumes[126].total_size"
    assert result.volumes[126].block_size == 4096, "Died on +.volumes[126].block_size"
    assert result.volumes[126].scsi_euidevice_id == """35796d360000007ff47acc0100000000""", "Died on +.volumes[126].scsi_euidevice_id"
    assert result.volumes[126].volume_id == 127, "Died on +.volumes[126].volume_id"
    assert result.volumes[126].access == """readWrite""", "Died on +.volumes[126].access"
    assert result.volumes[126].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--127.127""", "Died on +.volumes[126].iqn"
    assert result.volumes[126].slice_count == 1, "Died on +.volumes[126].slice_count"
    assert type(result.volumes[126].attributes) is dict, "Died on .volumes[126].attributes"
    assert result.volumes[126].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[126].create_time"
    assert result.volumes[126].account_id == 1, "Died on +.volumes[126].account_id"
    assert result.volumes[125].status == """active""", "Died on +.volumes[125].status"
    assert result.volumes[125].enable512e == False, "Died on +.volumes[125].enable512e"
    assert result.volumes[125].qos.burst_iops == 100, "Died on +.volumes[125].qos.burst_iops"
    assert result.volumes[125].qos.burst_time == 60, "Died on +.volumes[125].qos.burst_time"
    assert result.volumes[125].qos.min_iops == 100, "Died on +.volumes[125].qos.min_iops"
    assert result.volumes[125].qos.max_iops == 100, "Died on +.volumes[125].qos.max_iops"
    assert result.volumes[125].name == """suite-stage-2-QED--126""", "Died on +.volumes[125].name"
    assert result.volumes[125].scsi_naadevice_id == """6f47acc10000000035796d360000007e""", "Died on +.volumes[125].scsi_naadevice_id"
    assert result.volumes[125].total_size == 268435456000, "Died on +.volumes[125].total_size"
    assert result.volumes[125].block_size == 4096, "Died on +.volumes[125].block_size"
    assert result.volumes[125].scsi_euidevice_id == """35796d360000007ef47acc0100000000""", "Died on +.volumes[125].scsi_euidevice_id"
    assert result.volumes[125].volume_id == 126, "Died on +.volumes[125].volume_id"
    assert result.volumes[125].access == """readWrite""", "Died on +.volumes[125].access"
    assert result.volumes[125].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--126.126""", "Died on +.volumes[125].iqn"
    assert result.volumes[125].slice_count == 1, "Died on +.volumes[125].slice_count"
    assert type(result.volumes[125].attributes) is dict, "Died on .volumes[125].attributes"
    assert result.volumes[125].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[125].create_time"
    assert result.volumes[125].account_id == 1, "Died on +.volumes[125].account_id"
    assert result.volumes[124].status == """active""", "Died on +.volumes[124].status"
    assert result.volumes[124].enable512e == False, "Died on +.volumes[124].enable512e"
    assert result.volumes[124].qos.burst_iops == 100, "Died on +.volumes[124].qos.burst_iops"
    assert result.volumes[124].qos.burst_time == 60, "Died on +.volumes[124].qos.burst_time"
    assert result.volumes[124].qos.min_iops == 100, "Died on +.volumes[124].qos.min_iops"
    assert result.volumes[124].qos.max_iops == 100, "Died on +.volumes[124].qos.max_iops"
    assert result.volumes[124].name == """suite-stage-2-QED--125""", "Died on +.volumes[124].name"
    assert result.volumes[124].scsi_naadevice_id == """6f47acc10000000035796d360000007d""", "Died on +.volumes[124].scsi_naadevice_id"
    assert result.volumes[124].total_size == 268435456000, "Died on +.volumes[124].total_size"
    assert result.volumes[124].block_size == 4096, "Died on +.volumes[124].block_size"
    assert result.volumes[124].scsi_euidevice_id == """35796d360000007df47acc0100000000""", "Died on +.volumes[124].scsi_euidevice_id"
    assert result.volumes[124].volume_id == 125, "Died on +.volumes[124].volume_id"
    assert result.volumes[124].access == """readWrite""", "Died on +.volumes[124].access"
    assert result.volumes[124].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--125.125""", "Died on +.volumes[124].iqn"
    assert result.volumes[124].slice_count == 1, "Died on +.volumes[124].slice_count"
    assert type(result.volumes[124].attributes) is dict, "Died on .volumes[124].attributes"
    assert result.volumes[124].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[124].create_time"
    assert result.volumes[124].account_id == 1, "Died on +.volumes[124].account_id"
    assert result.volumes[123].status == """active""", "Died on +.volumes[123].status"
    assert result.volumes[123].enable512e == False, "Died on +.volumes[123].enable512e"
    assert result.volumes[123].qos.burst_iops == 100, "Died on +.volumes[123].qos.burst_iops"
    assert result.volumes[123].qos.burst_time == 60, "Died on +.volumes[123].qos.burst_time"
    assert result.volumes[123].qos.min_iops == 100, "Died on +.volumes[123].qos.min_iops"
    assert result.volumes[123].qos.max_iops == 100, "Died on +.volumes[123].qos.max_iops"
    assert result.volumes[123].name == """suite-stage-2-QED--124""", "Died on +.volumes[123].name"
    assert result.volumes[123].scsi_naadevice_id == """6f47acc10000000035796d360000007c""", "Died on +.volumes[123].scsi_naadevice_id"
    assert result.volumes[123].total_size == 268435456000, "Died on +.volumes[123].total_size"
    assert result.volumes[123].block_size == 4096, "Died on +.volumes[123].block_size"
    assert result.volumes[123].scsi_euidevice_id == """35796d360000007cf47acc0100000000""", "Died on +.volumes[123].scsi_euidevice_id"
    assert result.volumes[123].volume_id == 124, "Died on +.volumes[123].volume_id"
    assert result.volumes[123].access == """readWrite""", "Died on +.volumes[123].access"
    assert result.volumes[123].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--124.124""", "Died on +.volumes[123].iqn"
    assert result.volumes[123].slice_count == 1, "Died on +.volumes[123].slice_count"
    assert type(result.volumes[123].attributes) is dict, "Died on .volumes[123].attributes"
    assert result.volumes[123].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[123].create_time"
    assert result.volumes[123].account_id == 1, "Died on +.volumes[123].account_id"
    assert result.volumes[122].status == """active""", "Died on +.volumes[122].status"
    assert result.volumes[122].enable512e == False, "Died on +.volumes[122].enable512e"
    assert result.volumes[122].qos.burst_iops == 100, "Died on +.volumes[122].qos.burst_iops"
    assert result.volumes[122].qos.burst_time == 60, "Died on +.volumes[122].qos.burst_time"
    assert result.volumes[122].qos.min_iops == 100, "Died on +.volumes[122].qos.min_iops"
    assert result.volumes[122].qos.max_iops == 100, "Died on +.volumes[122].qos.max_iops"
    assert result.volumes[122].name == """suite-stage-2-QED--123""", "Died on +.volumes[122].name"
    assert result.volumes[122].scsi_naadevice_id == """6f47acc10000000035796d360000007b""", "Died on +.volumes[122].scsi_naadevice_id"
    assert result.volumes[122].total_size == 268435456000, "Died on +.volumes[122].total_size"
    assert result.volumes[122].block_size == 4096, "Died on +.volumes[122].block_size"
    assert result.volumes[122].scsi_euidevice_id == """35796d360000007bf47acc0100000000""", "Died on +.volumes[122].scsi_euidevice_id"
    assert result.volumes[122].volume_id == 123, "Died on +.volumes[122].volume_id"
    assert result.volumes[122].access == """readWrite""", "Died on +.volumes[122].access"
    assert result.volumes[122].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--123.123""", "Died on +.volumes[122].iqn"
    assert result.volumes[122].slice_count == 1, "Died on +.volumes[122].slice_count"
    assert type(result.volumes[122].attributes) is dict, "Died on .volumes[122].attributes"
    assert result.volumes[122].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[122].create_time"
    assert result.volumes[122].account_id == 1, "Died on +.volumes[122].account_id"
    assert result.volumes[121].status == """active""", "Died on +.volumes[121].status"
    assert result.volumes[121].enable512e == False, "Died on +.volumes[121].enable512e"
    assert result.volumes[121].qos.burst_iops == 100, "Died on +.volumes[121].qos.burst_iops"
    assert result.volumes[121].qos.burst_time == 60, "Died on +.volumes[121].qos.burst_time"
    assert result.volumes[121].qos.min_iops == 100, "Died on +.volumes[121].qos.min_iops"
    assert result.volumes[121].qos.max_iops == 100, "Died on +.volumes[121].qos.max_iops"
    assert result.volumes[121].name == """suite-stage-2-QED--122""", "Died on +.volumes[121].name"
    assert result.volumes[121].scsi_naadevice_id == """6f47acc10000000035796d360000007a""", "Died on +.volumes[121].scsi_naadevice_id"
    assert result.volumes[121].total_size == 268435456000, "Died on +.volumes[121].total_size"
    assert result.volumes[121].block_size == 4096, "Died on +.volumes[121].block_size"
    assert result.volumes[121].scsi_euidevice_id == """35796d360000007af47acc0100000000""", "Died on +.volumes[121].scsi_euidevice_id"
    assert result.volumes[121].volume_id == 122, "Died on +.volumes[121].volume_id"
    assert result.volumes[121].access == """readWrite""", "Died on +.volumes[121].access"
    assert result.volumes[121].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--122.122""", "Died on +.volumes[121].iqn"
    assert result.volumes[121].slice_count == 1, "Died on +.volumes[121].slice_count"
    assert type(result.volumes[121].attributes) is dict, "Died on .volumes[121].attributes"
    assert result.volumes[121].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[121].create_time"
    assert result.volumes[121].account_id == 1, "Died on +.volumes[121].account_id"
    assert result.volumes[120].status == """active""", "Died on +.volumes[120].status"
    assert result.volumes[120].enable512e == False, "Died on +.volumes[120].enable512e"
    assert result.volumes[120].qos.burst_iops == 100, "Died on +.volumes[120].qos.burst_iops"
    assert result.volumes[120].qos.burst_time == 60, "Died on +.volumes[120].qos.burst_time"
    assert result.volumes[120].qos.min_iops == 100, "Died on +.volumes[120].qos.min_iops"
    assert result.volumes[120].qos.max_iops == 100, "Died on +.volumes[120].qos.max_iops"
    assert result.volumes[120].name == """suite-stage-2-QED--121""", "Died on +.volumes[120].name"
    assert result.volumes[120].scsi_naadevice_id == """6f47acc10000000035796d3600000079""", "Died on +.volumes[120].scsi_naadevice_id"
    assert result.volumes[120].total_size == 268435456000, "Died on +.volumes[120].total_size"
    assert result.volumes[120].block_size == 4096, "Died on +.volumes[120].block_size"
    assert result.volumes[120].scsi_euidevice_id == """35796d3600000079f47acc0100000000""", "Died on +.volumes[120].scsi_euidevice_id"
    assert result.volumes[120].volume_id == 121, "Died on +.volumes[120].volume_id"
    assert result.volumes[120].access == """readWrite""", "Died on +.volumes[120].access"
    assert result.volumes[120].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--121.121""", "Died on +.volumes[120].iqn"
    assert result.volumes[120].slice_count == 1, "Died on +.volumes[120].slice_count"
    assert type(result.volumes[120].attributes) is dict, "Died on .volumes[120].attributes"
    assert result.volumes[120].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[120].create_time"
    assert result.volumes[120].account_id == 1, "Died on +.volumes[120].account_id"
    assert result.volumes[119].status == """active""", "Died on +.volumes[119].status"
    assert result.volumes[119].enable512e == False, "Died on +.volumes[119].enable512e"
    assert result.volumes[119].qos.burst_iops == 100, "Died on +.volumes[119].qos.burst_iops"
    assert result.volumes[119].qos.burst_time == 60, "Died on +.volumes[119].qos.burst_time"
    assert result.volumes[119].qos.min_iops == 100, "Died on +.volumes[119].qos.min_iops"
    assert result.volumes[119].qos.max_iops == 100, "Died on +.volumes[119].qos.max_iops"
    assert result.volumes[119].name == """suite-stage-2-QED--120""", "Died on +.volumes[119].name"
    assert result.volumes[119].scsi_naadevice_id == """6f47acc10000000035796d3600000078""", "Died on +.volumes[119].scsi_naadevice_id"
    assert result.volumes[119].total_size == 268435456000, "Died on +.volumes[119].total_size"
    assert result.volumes[119].block_size == 4096, "Died on +.volumes[119].block_size"
    assert result.volumes[119].scsi_euidevice_id == """35796d3600000078f47acc0100000000""", "Died on +.volumes[119].scsi_euidevice_id"
    assert result.volumes[119].volume_id == 120, "Died on +.volumes[119].volume_id"
    assert result.volumes[119].access == """readWrite""", "Died on +.volumes[119].access"
    assert result.volumes[119].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--120.120""", "Died on +.volumes[119].iqn"
    assert result.volumes[119].slice_count == 1, "Died on +.volumes[119].slice_count"
    assert type(result.volumes[119].attributes) is dict, "Died on .volumes[119].attributes"
    assert result.volumes[119].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[119].create_time"
    assert result.volumes[119].account_id == 1, "Died on +.volumes[119].account_id"
    assert result.volumes[118].status == """active""", "Died on +.volumes[118].status"
    assert result.volumes[118].enable512e == False, "Died on +.volumes[118].enable512e"
    assert result.volumes[118].qos.burst_iops == 100, "Died on +.volumes[118].qos.burst_iops"
    assert result.volumes[118].qos.burst_time == 60, "Died on +.volumes[118].qos.burst_time"
    assert result.volumes[118].qos.min_iops == 100, "Died on +.volumes[118].qos.min_iops"
    assert result.volumes[118].qos.max_iops == 100, "Died on +.volumes[118].qos.max_iops"
    assert result.volumes[118].name == """suite-stage-2-QED--119""", "Died on +.volumes[118].name"
    assert result.volumes[118].scsi_naadevice_id == """6f47acc10000000035796d3600000077""", "Died on +.volumes[118].scsi_naadevice_id"
    assert result.volumes[118].total_size == 268435456000, "Died on +.volumes[118].total_size"
    assert result.volumes[118].block_size == 4096, "Died on +.volumes[118].block_size"
    assert result.volumes[118].scsi_euidevice_id == """35796d3600000077f47acc0100000000""", "Died on +.volumes[118].scsi_euidevice_id"
    assert result.volumes[118].volume_id == 119, "Died on +.volumes[118].volume_id"
    assert result.volumes[118].access == """readWrite""", "Died on +.volumes[118].access"
    assert result.volumes[118].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--119.119""", "Died on +.volumes[118].iqn"
    assert result.volumes[118].slice_count == 1, "Died on +.volumes[118].slice_count"
    assert type(result.volumes[118].attributes) is dict, "Died on .volumes[118].attributes"
    assert result.volumes[118].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[118].create_time"
    assert result.volumes[118].account_id == 1, "Died on +.volumes[118].account_id"
    assert result.volumes[117].status == """active""", "Died on +.volumes[117].status"
    assert result.volumes[117].enable512e == False, "Died on +.volumes[117].enable512e"
    assert result.volumes[117].qos.burst_iops == 100, "Died on +.volumes[117].qos.burst_iops"
    assert result.volumes[117].qos.burst_time == 60, "Died on +.volumes[117].qos.burst_time"
    assert result.volumes[117].qos.min_iops == 100, "Died on +.volumes[117].qos.min_iops"
    assert result.volumes[117].qos.max_iops == 100, "Died on +.volumes[117].qos.max_iops"
    assert result.volumes[117].name == """suite-stage-2-QED--118""", "Died on +.volumes[117].name"
    assert result.volumes[117].scsi_naadevice_id == """6f47acc10000000035796d3600000076""", "Died on +.volumes[117].scsi_naadevice_id"
    assert result.volumes[117].total_size == 268435456000, "Died on +.volumes[117].total_size"
    assert result.volumes[117].block_size == 4096, "Died on +.volumes[117].block_size"
    assert result.volumes[117].scsi_euidevice_id == """35796d3600000076f47acc0100000000""", "Died on +.volumes[117].scsi_euidevice_id"
    assert result.volumes[117].volume_id == 118, "Died on +.volumes[117].volume_id"
    assert result.volumes[117].access == """readWrite""", "Died on +.volumes[117].access"
    assert result.volumes[117].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--118.118""", "Died on +.volumes[117].iqn"
    assert result.volumes[117].slice_count == 1, "Died on +.volumes[117].slice_count"
    assert type(result.volumes[117].attributes) is dict, "Died on .volumes[117].attributes"
    assert result.volumes[117].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[117].create_time"
    assert result.volumes[117].account_id == 1, "Died on +.volumes[117].account_id"
    assert result.volumes[116].status == """active""", "Died on +.volumes[116].status"
    assert result.volumes[116].enable512e == False, "Died on +.volumes[116].enable512e"
    assert result.volumes[116].qos.burst_iops == 100, "Died on +.volumes[116].qos.burst_iops"
    assert result.volumes[116].qos.burst_time == 60, "Died on +.volumes[116].qos.burst_time"
    assert result.volumes[116].qos.min_iops == 100, "Died on +.volumes[116].qos.min_iops"
    assert result.volumes[116].qos.max_iops == 100, "Died on +.volumes[116].qos.max_iops"
    assert result.volumes[116].name == """suite-stage-2-QED--117""", "Died on +.volumes[116].name"
    assert result.volumes[116].scsi_naadevice_id == """6f47acc10000000035796d3600000075""", "Died on +.volumes[116].scsi_naadevice_id"
    assert result.volumes[116].total_size == 268435456000, "Died on +.volumes[116].total_size"
    assert result.volumes[116].block_size == 4096, "Died on +.volumes[116].block_size"
    assert result.volumes[116].scsi_euidevice_id == """35796d3600000075f47acc0100000000""", "Died on +.volumes[116].scsi_euidevice_id"
    assert result.volumes[116].volume_id == 117, "Died on +.volumes[116].volume_id"
    assert result.volumes[116].access == """readWrite""", "Died on +.volumes[116].access"
    assert result.volumes[116].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--117.117""", "Died on +.volumes[116].iqn"
    assert result.volumes[116].slice_count == 1, "Died on +.volumes[116].slice_count"
    assert type(result.volumes[116].attributes) is dict, "Died on .volumes[116].attributes"
    assert result.volumes[116].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[116].create_time"
    assert result.volumes[116].account_id == 1, "Died on +.volumes[116].account_id"
    assert result.volumes[115].status == """active""", "Died on +.volumes[115].status"
    assert result.volumes[115].enable512e == False, "Died on +.volumes[115].enable512e"
    assert result.volumes[115].qos.burst_iops == 100, "Died on +.volumes[115].qos.burst_iops"
    assert result.volumes[115].qos.burst_time == 60, "Died on +.volumes[115].qos.burst_time"
    assert result.volumes[115].qos.min_iops == 100, "Died on +.volumes[115].qos.min_iops"
    assert result.volumes[115].qos.max_iops == 100, "Died on +.volumes[115].qos.max_iops"
    assert result.volumes[115].name == """suite-stage-2-QED--116""", "Died on +.volumes[115].name"
    assert result.volumes[115].scsi_naadevice_id == """6f47acc10000000035796d3600000074""", "Died on +.volumes[115].scsi_naadevice_id"
    assert result.volumes[115].total_size == 268435456000, "Died on +.volumes[115].total_size"
    assert result.volumes[115].block_size == 4096, "Died on +.volumes[115].block_size"
    assert result.volumes[115].scsi_euidevice_id == """35796d3600000074f47acc0100000000""", "Died on +.volumes[115].scsi_euidevice_id"
    assert result.volumes[115].volume_id == 116, "Died on +.volumes[115].volume_id"
    assert result.volumes[115].access == """readWrite""", "Died on +.volumes[115].access"
    assert result.volumes[115].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--116.116""", "Died on +.volumes[115].iqn"
    assert result.volumes[115].slice_count == 1, "Died on +.volumes[115].slice_count"
    assert type(result.volumes[115].attributes) is dict, "Died on .volumes[115].attributes"
    assert result.volumes[115].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[115].create_time"
    assert result.volumes[115].account_id == 1, "Died on +.volumes[115].account_id"
    assert result.volumes[114].status == """active""", "Died on +.volumes[114].status"
    assert result.volumes[114].enable512e == False, "Died on +.volumes[114].enable512e"
    assert result.volumes[114].qos.burst_iops == 100, "Died on +.volumes[114].qos.burst_iops"
    assert result.volumes[114].qos.burst_time == 60, "Died on +.volumes[114].qos.burst_time"
    assert result.volumes[114].qos.min_iops == 100, "Died on +.volumes[114].qos.min_iops"
    assert result.volumes[114].qos.max_iops == 100, "Died on +.volumes[114].qos.max_iops"
    assert result.volumes[114].name == """suite-stage-2-QED--115""", "Died on +.volumes[114].name"
    assert result.volumes[114].scsi_naadevice_id == """6f47acc10000000035796d3600000073""", "Died on +.volumes[114].scsi_naadevice_id"
    assert result.volumes[114].total_size == 268435456000, "Died on +.volumes[114].total_size"
    assert result.volumes[114].block_size == 4096, "Died on +.volumes[114].block_size"
    assert result.volumes[114].scsi_euidevice_id == """35796d3600000073f47acc0100000000""", "Died on +.volumes[114].scsi_euidevice_id"
    assert result.volumes[114].volume_id == 115, "Died on +.volumes[114].volume_id"
    assert result.volumes[114].access == """readWrite""", "Died on +.volumes[114].access"
    assert result.volumes[114].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--115.115""", "Died on +.volumes[114].iqn"
    assert result.volumes[114].slice_count == 1, "Died on +.volumes[114].slice_count"
    assert type(result.volumes[114].attributes) is dict, "Died on .volumes[114].attributes"
    assert result.volumes[114].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[114].create_time"
    assert result.volumes[114].account_id == 1, "Died on +.volumes[114].account_id"
    assert result.volumes[113].status == """active""", "Died on +.volumes[113].status"
    assert result.volumes[113].enable512e == False, "Died on +.volumes[113].enable512e"
    assert result.volumes[113].qos.burst_iops == 100, "Died on +.volumes[113].qos.burst_iops"
    assert result.volumes[113].qos.burst_time == 60, "Died on +.volumes[113].qos.burst_time"
    assert result.volumes[113].qos.min_iops == 100, "Died on +.volumes[113].qos.min_iops"
    assert result.volumes[113].qos.max_iops == 100, "Died on +.volumes[113].qos.max_iops"
    assert result.volumes[113].name == """suite-stage-2-QED--114""", "Died on +.volumes[113].name"
    assert result.volumes[113].scsi_naadevice_id == """6f47acc10000000035796d3600000072""", "Died on +.volumes[113].scsi_naadevice_id"
    assert result.volumes[113].total_size == 268435456000, "Died on +.volumes[113].total_size"
    assert result.volumes[113].block_size == 4096, "Died on +.volumes[113].block_size"
    assert result.volumes[113].scsi_euidevice_id == """35796d3600000072f47acc0100000000""", "Died on +.volumes[113].scsi_euidevice_id"
    assert result.volumes[113].volume_id == 114, "Died on +.volumes[113].volume_id"
    assert result.volumes[113].access == """readWrite""", "Died on +.volumes[113].access"
    assert result.volumes[113].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--114.114""", "Died on +.volumes[113].iqn"
    assert result.volumes[113].slice_count == 1, "Died on +.volumes[113].slice_count"
    assert type(result.volumes[113].attributes) is dict, "Died on .volumes[113].attributes"
    assert result.volumes[113].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[113].create_time"
    assert result.volumes[113].account_id == 1, "Died on +.volumes[113].account_id"
    assert result.volumes[112].status == """active""", "Died on +.volumes[112].status"
    assert result.volumes[112].enable512e == False, "Died on +.volumes[112].enable512e"
    assert result.volumes[112].qos.burst_iops == 100, "Died on +.volumes[112].qos.burst_iops"
    assert result.volumes[112].qos.burst_time == 60, "Died on +.volumes[112].qos.burst_time"
    assert result.volumes[112].qos.min_iops == 100, "Died on +.volumes[112].qos.min_iops"
    assert result.volumes[112].qos.max_iops == 100, "Died on +.volumes[112].qos.max_iops"
    assert result.volumes[112].name == """suite-stage-2-QED--113""", "Died on +.volumes[112].name"
    assert result.volumes[112].scsi_naadevice_id == """6f47acc10000000035796d3600000071""", "Died on +.volumes[112].scsi_naadevice_id"
    assert result.volumes[112].total_size == 268435456000, "Died on +.volumes[112].total_size"
    assert result.volumes[112].block_size == 4096, "Died on +.volumes[112].block_size"
    assert result.volumes[112].scsi_euidevice_id == """35796d3600000071f47acc0100000000""", "Died on +.volumes[112].scsi_euidevice_id"
    assert result.volumes[112].volume_id == 113, "Died on +.volumes[112].volume_id"
    assert result.volumes[112].access == """readWrite""", "Died on +.volumes[112].access"
    assert result.volumes[112].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--113.113""", "Died on +.volumes[112].iqn"
    assert result.volumes[112].slice_count == 1, "Died on +.volumes[112].slice_count"
    assert type(result.volumes[112].attributes) is dict, "Died on .volumes[112].attributes"
    assert result.volumes[112].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[112].create_time"
    assert result.volumes[112].account_id == 1, "Died on +.volumes[112].account_id"
    assert result.volumes[111].status == """active""", "Died on +.volumes[111].status"
    assert result.volumes[111].enable512e == False, "Died on +.volumes[111].enable512e"
    assert result.volumes[111].qos.burst_iops == 100, "Died on +.volumes[111].qos.burst_iops"
    assert result.volumes[111].qos.burst_time == 60, "Died on +.volumes[111].qos.burst_time"
    assert result.volumes[111].qos.min_iops == 100, "Died on +.volumes[111].qos.min_iops"
    assert result.volumes[111].qos.max_iops == 100, "Died on +.volumes[111].qos.max_iops"
    assert result.volumes[111].name == """suite-stage-2-QED--112""", "Died on +.volumes[111].name"
    assert result.volumes[111].scsi_naadevice_id == """6f47acc10000000035796d3600000070""", "Died on +.volumes[111].scsi_naadevice_id"
    assert result.volumes[111].total_size == 268435456000, "Died on +.volumes[111].total_size"
    assert result.volumes[111].block_size == 4096, "Died on +.volumes[111].block_size"
    assert result.volumes[111].scsi_euidevice_id == """35796d3600000070f47acc0100000000""", "Died on +.volumes[111].scsi_euidevice_id"
    assert result.volumes[111].volume_id == 112, "Died on +.volumes[111].volume_id"
    assert result.volumes[111].access == """readWrite""", "Died on +.volumes[111].access"
    assert result.volumes[111].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--112.112""", "Died on +.volumes[111].iqn"
    assert result.volumes[111].slice_count == 1, "Died on +.volumes[111].slice_count"
    assert type(result.volumes[111].attributes) is dict, "Died on .volumes[111].attributes"
    assert result.volumes[111].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[111].create_time"
    assert result.volumes[111].account_id == 1, "Died on +.volumes[111].account_id"
    assert result.volumes[110].status == """active""", "Died on +.volumes[110].status"
    assert result.volumes[110].enable512e == False, "Died on +.volumes[110].enable512e"
    assert result.volumes[110].qos.burst_iops == 100, "Died on +.volumes[110].qos.burst_iops"
    assert result.volumes[110].qos.burst_time == 60, "Died on +.volumes[110].qos.burst_time"
    assert result.volumes[110].qos.min_iops == 100, "Died on +.volumes[110].qos.min_iops"
    assert result.volumes[110].qos.max_iops == 100, "Died on +.volumes[110].qos.max_iops"
    assert result.volumes[110].name == """suite-stage-2-QED--111""", "Died on +.volumes[110].name"
    assert result.volumes[110].scsi_naadevice_id == """6f47acc10000000035796d360000006f""", "Died on +.volumes[110].scsi_naadevice_id"
    assert result.volumes[110].total_size == 268435456000, "Died on +.volumes[110].total_size"
    assert result.volumes[110].block_size == 4096, "Died on +.volumes[110].block_size"
    assert result.volumes[110].scsi_euidevice_id == """35796d360000006ff47acc0100000000""", "Died on +.volumes[110].scsi_euidevice_id"
    assert result.volumes[110].volume_id == 111, "Died on +.volumes[110].volume_id"
    assert result.volumes[110].access == """readWrite""", "Died on +.volumes[110].access"
    assert result.volumes[110].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--111.111""", "Died on +.volumes[110].iqn"
    assert result.volumes[110].slice_count == 1, "Died on +.volumes[110].slice_count"
    assert type(result.volumes[110].attributes) is dict, "Died on .volumes[110].attributes"
    assert result.volumes[110].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[110].create_time"
    assert result.volumes[110].account_id == 1, "Died on +.volumes[110].account_id"
    assert result.volumes[109].status == """active""", "Died on +.volumes[109].status"
    assert result.volumes[109].enable512e == False, "Died on +.volumes[109].enable512e"
    assert result.volumes[109].qos.burst_iops == 100, "Died on +.volumes[109].qos.burst_iops"
    assert result.volumes[109].qos.burst_time == 60, "Died on +.volumes[109].qos.burst_time"
    assert result.volumes[109].qos.min_iops == 100, "Died on +.volumes[109].qos.min_iops"
    assert result.volumes[109].qos.max_iops == 100, "Died on +.volumes[109].qos.max_iops"
    assert result.volumes[109].name == """suite-stage-2-QED--110""", "Died on +.volumes[109].name"
    assert result.volumes[109].scsi_naadevice_id == """6f47acc10000000035796d360000006e""", "Died on +.volumes[109].scsi_naadevice_id"
    assert result.volumes[109].total_size == 268435456000, "Died on +.volumes[109].total_size"
    assert result.volumes[109].block_size == 4096, "Died on +.volumes[109].block_size"
    assert result.volumes[109].scsi_euidevice_id == """35796d360000006ef47acc0100000000""", "Died on +.volumes[109].scsi_euidevice_id"
    assert result.volumes[109].volume_id == 110, "Died on +.volumes[109].volume_id"
    assert result.volumes[109].access == """readWrite""", "Died on +.volumes[109].access"
    assert result.volumes[109].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--110.110""", "Died on +.volumes[109].iqn"
    assert result.volumes[109].slice_count == 1, "Died on +.volumes[109].slice_count"
    assert type(result.volumes[109].attributes) is dict, "Died on .volumes[109].attributes"
    assert result.volumes[109].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[109].create_time"
    assert result.volumes[109].account_id == 1, "Died on +.volumes[109].account_id"
    assert result.volumes[108].status == """active""", "Died on +.volumes[108].status"
    assert result.volumes[108].enable512e == False, "Died on +.volumes[108].enable512e"
    assert result.volumes[108].qos.burst_iops == 100, "Died on +.volumes[108].qos.burst_iops"
    assert result.volumes[108].qos.burst_time == 60, "Died on +.volumes[108].qos.burst_time"
    assert result.volumes[108].qos.min_iops == 100, "Died on +.volumes[108].qos.min_iops"
    assert result.volumes[108].qos.max_iops == 100, "Died on +.volumes[108].qos.max_iops"
    assert result.volumes[108].name == """suite-stage-2-QED--109""", "Died on +.volumes[108].name"
    assert result.volumes[108].scsi_naadevice_id == """6f47acc10000000035796d360000006d""", "Died on +.volumes[108].scsi_naadevice_id"
    assert result.volumes[108].total_size == 268435456000, "Died on +.volumes[108].total_size"
    assert result.volumes[108].block_size == 4096, "Died on +.volumes[108].block_size"
    assert result.volumes[108].scsi_euidevice_id == """35796d360000006df47acc0100000000""", "Died on +.volumes[108].scsi_euidevice_id"
    assert result.volumes[108].volume_id == 109, "Died on +.volumes[108].volume_id"
    assert result.volumes[108].access == """readWrite""", "Died on +.volumes[108].access"
    assert result.volumes[108].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--109.109""", "Died on +.volumes[108].iqn"
    assert result.volumes[108].slice_count == 1, "Died on +.volumes[108].slice_count"
    assert type(result.volumes[108].attributes) is dict, "Died on .volumes[108].attributes"
    assert result.volumes[108].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[108].create_time"
    assert result.volumes[108].account_id == 1, "Died on +.volumes[108].account_id"
    assert result.volumes[107].status == """active""", "Died on +.volumes[107].status"
    assert result.volumes[107].enable512e == False, "Died on +.volumes[107].enable512e"
    assert result.volumes[107].qos.burst_iops == 100, "Died on +.volumes[107].qos.burst_iops"
    assert result.volumes[107].qos.burst_time == 60, "Died on +.volumes[107].qos.burst_time"
    assert result.volumes[107].qos.min_iops == 100, "Died on +.volumes[107].qos.min_iops"
    assert result.volumes[107].qos.max_iops == 100, "Died on +.volumes[107].qos.max_iops"
    assert result.volumes[107].name == """suite-stage-2-QED--108""", "Died on +.volumes[107].name"
    assert result.volumes[107].scsi_naadevice_id == """6f47acc10000000035796d360000006c""", "Died on +.volumes[107].scsi_naadevice_id"
    assert result.volumes[107].total_size == 268435456000, "Died on +.volumes[107].total_size"
    assert result.volumes[107].block_size == 4096, "Died on +.volumes[107].block_size"
    assert result.volumes[107].scsi_euidevice_id == """35796d360000006cf47acc0100000000""", "Died on +.volumes[107].scsi_euidevice_id"
    assert result.volumes[107].volume_id == 108, "Died on +.volumes[107].volume_id"
    assert result.volumes[107].access == """readWrite""", "Died on +.volumes[107].access"
    assert result.volumes[107].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--108.108""", "Died on +.volumes[107].iqn"
    assert result.volumes[107].slice_count == 1, "Died on +.volumes[107].slice_count"
    assert type(result.volumes[107].attributes) is dict, "Died on .volumes[107].attributes"
    assert result.volumes[107].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[107].create_time"
    assert result.volumes[107].account_id == 1, "Died on +.volumes[107].account_id"
    assert result.volumes[106].status == """active""", "Died on +.volumes[106].status"
    assert result.volumes[106].enable512e == False, "Died on +.volumes[106].enable512e"
    assert result.volumes[106].qos.burst_iops == 100, "Died on +.volumes[106].qos.burst_iops"
    assert result.volumes[106].qos.burst_time == 60, "Died on +.volumes[106].qos.burst_time"
    assert result.volumes[106].qos.min_iops == 100, "Died on +.volumes[106].qos.min_iops"
    assert result.volumes[106].qos.max_iops == 100, "Died on +.volumes[106].qos.max_iops"
    assert result.volumes[106].name == """suite-stage-2-QED--107""", "Died on +.volumes[106].name"
    assert result.volumes[106].scsi_naadevice_id == """6f47acc10000000035796d360000006b""", "Died on +.volumes[106].scsi_naadevice_id"
    assert result.volumes[106].total_size == 268435456000, "Died on +.volumes[106].total_size"
    assert result.volumes[106].block_size == 4096, "Died on +.volumes[106].block_size"
    assert result.volumes[106].scsi_euidevice_id == """35796d360000006bf47acc0100000000""", "Died on +.volumes[106].scsi_euidevice_id"
    assert result.volumes[106].volume_id == 107, "Died on +.volumes[106].volume_id"
    assert result.volumes[106].access == """readWrite""", "Died on +.volumes[106].access"
    assert result.volumes[106].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--107.107""", "Died on +.volumes[106].iqn"
    assert result.volumes[106].slice_count == 1, "Died on +.volumes[106].slice_count"
    assert type(result.volumes[106].attributes) is dict, "Died on .volumes[106].attributes"
    assert result.volumes[106].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[106].create_time"
    assert result.volumes[106].account_id == 1, "Died on +.volumes[106].account_id"
    assert result.volumes[105].status == """active""", "Died on +.volumes[105].status"
    assert result.volumes[105].enable512e == False, "Died on +.volumes[105].enable512e"
    assert result.volumes[105].qos.burst_iops == 100, "Died on +.volumes[105].qos.burst_iops"
    assert result.volumes[105].qos.burst_time == 60, "Died on +.volumes[105].qos.burst_time"
    assert result.volumes[105].qos.min_iops == 100, "Died on +.volumes[105].qos.min_iops"
    assert result.volumes[105].qos.max_iops == 100, "Died on +.volumes[105].qos.max_iops"
    assert result.volumes[105].name == """suite-stage-2-QED--106""", "Died on +.volumes[105].name"
    assert result.volumes[105].scsi_naadevice_id == """6f47acc10000000035796d360000006a""", "Died on +.volumes[105].scsi_naadevice_id"
    assert result.volumes[105].total_size == 268435456000, "Died on +.volumes[105].total_size"
    assert result.volumes[105].block_size == 4096, "Died on +.volumes[105].block_size"
    assert result.volumes[105].scsi_euidevice_id == """35796d360000006af47acc0100000000""", "Died on +.volumes[105].scsi_euidevice_id"
    assert result.volumes[105].volume_id == 106, "Died on +.volumes[105].volume_id"
    assert result.volumes[105].access == """readWrite""", "Died on +.volumes[105].access"
    assert result.volumes[105].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--106.106""", "Died on +.volumes[105].iqn"
    assert result.volumes[105].slice_count == 1, "Died on +.volumes[105].slice_count"
    assert type(result.volumes[105].attributes) is dict, "Died on .volumes[105].attributes"
    assert result.volumes[105].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[105].create_time"
    assert result.volumes[105].account_id == 1, "Died on +.volumes[105].account_id"
    assert result.volumes[104].status == """active""", "Died on +.volumes[104].status"
    assert result.volumes[104].enable512e == False, "Died on +.volumes[104].enable512e"
    assert result.volumes[104].qos.burst_iops == 100, "Died on +.volumes[104].qos.burst_iops"
    assert result.volumes[104].qos.burst_time == 60, "Died on +.volumes[104].qos.burst_time"
    assert result.volumes[104].qos.min_iops == 100, "Died on +.volumes[104].qos.min_iops"
    assert result.volumes[104].qos.max_iops == 100, "Died on +.volumes[104].qos.max_iops"
    assert result.volumes[104].name == """suite-stage-2-QED--105""", "Died on +.volumes[104].name"
    assert result.volumes[104].scsi_naadevice_id == """6f47acc10000000035796d3600000069""", "Died on +.volumes[104].scsi_naadevice_id"
    assert result.volumes[104].total_size == 268435456000, "Died on +.volumes[104].total_size"
    assert result.volumes[104].block_size == 4096, "Died on +.volumes[104].block_size"
    assert result.volumes[104].scsi_euidevice_id == """35796d3600000069f47acc0100000000""", "Died on +.volumes[104].scsi_euidevice_id"
    assert result.volumes[104].volume_id == 105, "Died on +.volumes[104].volume_id"
    assert result.volumes[104].access == """readWrite""", "Died on +.volumes[104].access"
    assert result.volumes[104].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--105.105""", "Died on +.volumes[104].iqn"
    assert result.volumes[104].slice_count == 1, "Died on +.volumes[104].slice_count"
    assert type(result.volumes[104].attributes) is dict, "Died on .volumes[104].attributes"
    assert result.volumes[104].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[104].create_time"
    assert result.volumes[104].account_id == 1, "Died on +.volumes[104].account_id"
    assert result.volumes[103].status == """active""", "Died on +.volumes[103].status"
    assert result.volumes[103].enable512e == False, "Died on +.volumes[103].enable512e"
    assert result.volumes[103].qos.burst_iops == 100, "Died on +.volumes[103].qos.burst_iops"
    assert result.volumes[103].qos.burst_time == 60, "Died on +.volumes[103].qos.burst_time"
    assert result.volumes[103].qos.min_iops == 100, "Died on +.volumes[103].qos.min_iops"
    assert result.volumes[103].qos.max_iops == 100, "Died on +.volumes[103].qos.max_iops"
    assert result.volumes[103].name == """suite-stage-2-QED--104""", "Died on +.volumes[103].name"
    assert result.volumes[103].scsi_naadevice_id == """6f47acc10000000035796d3600000068""", "Died on +.volumes[103].scsi_naadevice_id"
    assert result.volumes[103].total_size == 268435456000, "Died on +.volumes[103].total_size"
    assert result.volumes[103].block_size == 4096, "Died on +.volumes[103].block_size"
    assert result.volumes[103].scsi_euidevice_id == """35796d3600000068f47acc0100000000""", "Died on +.volumes[103].scsi_euidevice_id"
    assert result.volumes[103].volume_id == 104, "Died on +.volumes[103].volume_id"
    assert result.volumes[103].access == """readWrite""", "Died on +.volumes[103].access"
    assert result.volumes[103].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--104.104""", "Died on +.volumes[103].iqn"
    assert result.volumes[103].slice_count == 1, "Died on +.volumes[103].slice_count"
    assert type(result.volumes[103].attributes) is dict, "Died on .volumes[103].attributes"
    assert result.volumes[103].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[103].create_time"
    assert result.volumes[103].account_id == 1, "Died on +.volumes[103].account_id"
    assert result.volumes[102].status == """active""", "Died on +.volumes[102].status"
    assert result.volumes[102].enable512e == False, "Died on +.volumes[102].enable512e"
    assert result.volumes[102].qos.burst_iops == 100, "Died on +.volumes[102].qos.burst_iops"
    assert result.volumes[102].qos.burst_time == 60, "Died on +.volumes[102].qos.burst_time"
    assert result.volumes[102].qos.min_iops == 100, "Died on +.volumes[102].qos.min_iops"
    assert result.volumes[102].qos.max_iops == 100, "Died on +.volumes[102].qos.max_iops"
    assert result.volumes[102].name == """suite-stage-2-QED--103""", "Died on +.volumes[102].name"
    assert result.volumes[102].scsi_naadevice_id == """6f47acc10000000035796d3600000067""", "Died on +.volumes[102].scsi_naadevice_id"
    assert result.volumes[102].total_size == 268435456000, "Died on +.volumes[102].total_size"
    assert result.volumes[102].block_size == 4096, "Died on +.volumes[102].block_size"
    assert result.volumes[102].scsi_euidevice_id == """35796d3600000067f47acc0100000000""", "Died on +.volumes[102].scsi_euidevice_id"
    assert result.volumes[102].volume_id == 103, "Died on +.volumes[102].volume_id"
    assert result.volumes[102].access == """readWrite""", "Died on +.volumes[102].access"
    assert result.volumes[102].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--103.103""", "Died on +.volumes[102].iqn"
    assert result.volumes[102].slice_count == 1, "Died on +.volumes[102].slice_count"
    assert type(result.volumes[102].attributes) is dict, "Died on .volumes[102].attributes"
    assert result.volumes[102].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[102].create_time"
    assert result.volumes[102].account_id == 1, "Died on +.volumes[102].account_id"
    assert result.volumes[101].status == """active""", "Died on +.volumes[101].status"
    assert result.volumes[101].enable512e == False, "Died on +.volumes[101].enable512e"
    assert result.volumes[101].qos.burst_iops == 100, "Died on +.volumes[101].qos.burst_iops"
    assert result.volumes[101].qos.burst_time == 60, "Died on +.volumes[101].qos.burst_time"
    assert result.volumes[101].qos.min_iops == 100, "Died on +.volumes[101].qos.min_iops"
    assert result.volumes[101].qos.max_iops == 100, "Died on +.volumes[101].qos.max_iops"
    assert result.volumes[101].name == """suite-stage-2-QED--102""", "Died on +.volumes[101].name"
    assert result.volumes[101].scsi_naadevice_id == """6f47acc10000000035796d3600000066""", "Died on +.volumes[101].scsi_naadevice_id"
    assert result.volumes[101].total_size == 268435456000, "Died on +.volumes[101].total_size"
    assert result.volumes[101].block_size == 4096, "Died on +.volumes[101].block_size"
    assert result.volumes[101].scsi_euidevice_id == """35796d3600000066f47acc0100000000""", "Died on +.volumes[101].scsi_euidevice_id"
    assert result.volumes[101].volume_id == 102, "Died on +.volumes[101].volume_id"
    assert result.volumes[101].access == """readWrite""", "Died on +.volumes[101].access"
    assert result.volumes[101].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--102.102""", "Died on +.volumes[101].iqn"
    assert result.volumes[101].slice_count == 1, "Died on +.volumes[101].slice_count"
    assert type(result.volumes[101].attributes) is dict, "Died on .volumes[101].attributes"
    assert result.volumes[101].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[101].create_time"
    assert result.volumes[101].account_id == 1, "Died on +.volumes[101].account_id"
    assert result.volumes[100].status == """active""", "Died on +.volumes[100].status"
    assert result.volumes[100].enable512e == False, "Died on +.volumes[100].enable512e"
    assert result.volumes[100].qos.burst_iops == 100, "Died on +.volumes[100].qos.burst_iops"
    assert result.volumes[100].qos.burst_time == 60, "Died on +.volumes[100].qos.burst_time"
    assert result.volumes[100].qos.min_iops == 100, "Died on +.volumes[100].qos.min_iops"
    assert result.volumes[100].qos.max_iops == 100, "Died on +.volumes[100].qos.max_iops"
    assert result.volumes[100].name == """suite-stage-2-QED--101""", "Died on +.volumes[100].name"
    assert result.volumes[100].scsi_naadevice_id == """6f47acc10000000035796d3600000065""", "Died on +.volumes[100].scsi_naadevice_id"
    assert result.volumes[100].total_size == 268435456000, "Died on +.volumes[100].total_size"
    assert result.volumes[100].block_size == 4096, "Died on +.volumes[100].block_size"
    assert result.volumes[100].scsi_euidevice_id == """35796d3600000065f47acc0100000000""", "Died on +.volumes[100].scsi_euidevice_id"
    assert result.volumes[100].volume_id == 101, "Died on +.volumes[100].volume_id"
    assert result.volumes[100].access == """readWrite""", "Died on +.volumes[100].access"
    assert result.volumes[100].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--101.101""", "Died on +.volumes[100].iqn"
    assert result.volumes[100].slice_count == 1, "Died on +.volumes[100].slice_count"
    assert type(result.volumes[100].attributes) is dict, "Died on .volumes[100].attributes"
    assert result.volumes[100].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[100].create_time"
    assert result.volumes[100].account_id == 1, "Died on +.volumes[100].account_id"
    assert result.volumes[99].status == """active""", "Died on +.volumes[99].status"
    assert result.volumes[99].enable512e == False, "Died on +.volumes[99].enable512e"
    assert result.volumes[99].qos.burst_iops == 100, "Died on +.volumes[99].qos.burst_iops"
    assert result.volumes[99].qos.burst_time == 60, "Died on +.volumes[99].qos.burst_time"
    assert result.volumes[99].qos.min_iops == 100, "Died on +.volumes[99].qos.min_iops"
    assert result.volumes[99].qos.max_iops == 100, "Died on +.volumes[99].qos.max_iops"
    assert result.volumes[99].name == """suite-stage-2-QED--100""", "Died on +.volumes[99].name"
    assert result.volumes[99].scsi_naadevice_id == """6f47acc10000000035796d3600000064""", "Died on +.volumes[99].scsi_naadevice_id"
    assert result.volumes[99].total_size == 268435456000, "Died on +.volumes[99].total_size"
    assert result.volumes[99].block_size == 4096, "Died on +.volumes[99].block_size"
    assert result.volumes[99].scsi_euidevice_id == """35796d3600000064f47acc0100000000""", "Died on +.volumes[99].scsi_euidevice_id"
    assert result.volumes[99].volume_id == 100, "Died on +.volumes[99].volume_id"
    assert result.volumes[99].access == """readWrite""", "Died on +.volumes[99].access"
    assert result.volumes[99].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--100.100""", "Died on +.volumes[99].iqn"
    assert result.volumes[99].slice_count == 1, "Died on +.volumes[99].slice_count"
    assert type(result.volumes[99].attributes) is dict, "Died on .volumes[99].attributes"
    assert result.volumes[99].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[99].create_time"
    assert result.volumes[99].account_id == 1, "Died on +.volumes[99].account_id"
    assert result.volumes[98].status == """active""", "Died on +.volumes[98].status"
    assert result.volumes[98].enable512e == False, "Died on +.volumes[98].enable512e"
    assert result.volumes[98].qos.burst_iops == 100, "Died on +.volumes[98].qos.burst_iops"
    assert result.volumes[98].qos.burst_time == 60, "Died on +.volumes[98].qos.burst_time"
    assert result.volumes[98].qos.min_iops == 100, "Died on +.volumes[98].qos.min_iops"
    assert result.volumes[98].qos.max_iops == 100, "Died on +.volumes[98].qos.max_iops"
    assert result.volumes[98].name == """suite-stage-2-QED--99""", "Died on +.volumes[98].name"
    assert result.volumes[98].scsi_naadevice_id == """6f47acc10000000035796d3600000063""", "Died on +.volumes[98].scsi_naadevice_id"
    assert result.volumes[98].total_size == 268435456000, "Died on +.volumes[98].total_size"
    assert result.volumes[98].block_size == 4096, "Died on +.volumes[98].block_size"
    assert result.volumes[98].scsi_euidevice_id == """35796d3600000063f47acc0100000000""", "Died on +.volumes[98].scsi_euidevice_id"
    assert result.volumes[98].volume_id == 99, "Died on +.volumes[98].volume_id"
    assert result.volumes[98].access == """readWrite""", "Died on +.volumes[98].access"
    assert result.volumes[98].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--99.99""", "Died on +.volumes[98].iqn"
    assert result.volumes[98].slice_count == 1, "Died on +.volumes[98].slice_count"
    assert type(result.volumes[98].attributes) is dict, "Died on .volumes[98].attributes"
    assert result.volumes[98].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[98].create_time"
    assert result.volumes[98].account_id == 1, "Died on +.volumes[98].account_id"
    assert result.volumes[97].status == """active""", "Died on +.volumes[97].status"
    assert result.volumes[97].enable512e == False, "Died on +.volumes[97].enable512e"
    assert result.volumes[97].qos.burst_iops == 100, "Died on +.volumes[97].qos.burst_iops"
    assert result.volumes[97].qos.burst_time == 60, "Died on +.volumes[97].qos.burst_time"
    assert result.volumes[97].qos.min_iops == 100, "Died on +.volumes[97].qos.min_iops"
    assert result.volumes[97].qos.max_iops == 100, "Died on +.volumes[97].qos.max_iops"
    assert result.volumes[97].name == """suite-stage-2-QED--98""", "Died on +.volumes[97].name"
    assert result.volumes[97].scsi_naadevice_id == """6f47acc10000000035796d3600000062""", "Died on +.volumes[97].scsi_naadevice_id"
    assert result.volumes[97].total_size == 268435456000, "Died on +.volumes[97].total_size"
    assert result.volumes[97].block_size == 4096, "Died on +.volumes[97].block_size"
    assert result.volumes[97].scsi_euidevice_id == """35796d3600000062f47acc0100000000""", "Died on +.volumes[97].scsi_euidevice_id"
    assert result.volumes[97].volume_id == 98, "Died on +.volumes[97].volume_id"
    assert result.volumes[97].access == """readWrite""", "Died on +.volumes[97].access"
    assert result.volumes[97].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--98.98""", "Died on +.volumes[97].iqn"
    assert result.volumes[97].slice_count == 1, "Died on +.volumes[97].slice_count"
    assert type(result.volumes[97].attributes) is dict, "Died on .volumes[97].attributes"
    assert result.volumes[97].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[97].create_time"
    assert result.volumes[97].account_id == 1, "Died on +.volumes[97].account_id"
    assert result.volumes[96].status == """active""", "Died on +.volumes[96].status"
    assert result.volumes[96].enable512e == False, "Died on +.volumes[96].enable512e"
    assert result.volumes[96].qos.burst_iops == 100, "Died on +.volumes[96].qos.burst_iops"
    assert result.volumes[96].qos.burst_time == 60, "Died on +.volumes[96].qos.burst_time"
    assert result.volumes[96].qos.min_iops == 100, "Died on +.volumes[96].qos.min_iops"
    assert result.volumes[96].qos.max_iops == 100, "Died on +.volumes[96].qos.max_iops"
    assert result.volumes[96].name == """suite-stage-2-QED--97""", "Died on +.volumes[96].name"
    assert result.volumes[96].scsi_naadevice_id == """6f47acc10000000035796d3600000061""", "Died on +.volumes[96].scsi_naadevice_id"
    assert result.volumes[96].total_size == 268435456000, "Died on +.volumes[96].total_size"
    assert result.volumes[96].block_size == 4096, "Died on +.volumes[96].block_size"
    assert result.volumes[96].scsi_euidevice_id == """35796d3600000061f47acc0100000000""", "Died on +.volumes[96].scsi_euidevice_id"
    assert result.volumes[96].volume_id == 97, "Died on +.volumes[96].volume_id"
    assert result.volumes[96].access == """readWrite""", "Died on +.volumes[96].access"
    assert result.volumes[96].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--97.97""", "Died on +.volumes[96].iqn"
    assert result.volumes[96].slice_count == 1, "Died on +.volumes[96].slice_count"
    assert type(result.volumes[96].attributes) is dict, "Died on .volumes[96].attributes"
    assert result.volumes[96].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[96].create_time"
    assert result.volumes[96].account_id == 1, "Died on +.volumes[96].account_id"
    assert result.volumes[95].status == """active""", "Died on +.volumes[95].status"
    assert result.volumes[95].enable512e == False, "Died on +.volumes[95].enable512e"
    assert result.volumes[95].qos.burst_iops == 100, "Died on +.volumes[95].qos.burst_iops"
    assert result.volumes[95].qos.burst_time == 60, "Died on +.volumes[95].qos.burst_time"
    assert result.volumes[95].qos.min_iops == 100, "Died on +.volumes[95].qos.min_iops"
    assert result.volumes[95].qos.max_iops == 100, "Died on +.volumes[95].qos.max_iops"
    assert result.volumes[95].name == """suite-stage-2-QED--96""", "Died on +.volumes[95].name"
    assert result.volumes[95].scsi_naadevice_id == """6f47acc10000000035796d3600000060""", "Died on +.volumes[95].scsi_naadevice_id"
    assert result.volumes[95].total_size == 268435456000, "Died on +.volumes[95].total_size"
    assert result.volumes[95].block_size == 4096, "Died on +.volumes[95].block_size"
    assert result.volumes[95].scsi_euidevice_id == """35796d3600000060f47acc0100000000""", "Died on +.volumes[95].scsi_euidevice_id"
    assert result.volumes[95].volume_id == 96, "Died on +.volumes[95].volume_id"
    assert result.volumes[95].access == """readWrite""", "Died on +.volumes[95].access"
    assert result.volumes[95].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--96.96""", "Died on +.volumes[95].iqn"
    assert result.volumes[95].slice_count == 1, "Died on +.volumes[95].slice_count"
    assert type(result.volumes[95].attributes) is dict, "Died on .volumes[95].attributes"
    assert result.volumes[95].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[95].create_time"
    assert result.volumes[95].account_id == 1, "Died on +.volumes[95].account_id"
    assert result.volumes[94].status == """active""", "Died on +.volumes[94].status"
    assert result.volumes[94].enable512e == False, "Died on +.volumes[94].enable512e"
    assert result.volumes[94].qos.burst_iops == 100, "Died on +.volumes[94].qos.burst_iops"
    assert result.volumes[94].qos.burst_time == 60, "Died on +.volumes[94].qos.burst_time"
    assert result.volumes[94].qos.min_iops == 100, "Died on +.volumes[94].qos.min_iops"
    assert result.volumes[94].qos.max_iops == 100, "Died on +.volumes[94].qos.max_iops"
    assert result.volumes[94].name == """suite-stage-2-QED--95""", "Died on +.volumes[94].name"
    assert result.volumes[94].scsi_naadevice_id == """6f47acc10000000035796d360000005f""", "Died on +.volumes[94].scsi_naadevice_id"
    assert result.volumes[94].total_size == 268435456000, "Died on +.volumes[94].total_size"
    assert result.volumes[94].block_size == 4096, "Died on +.volumes[94].block_size"
    assert result.volumes[94].scsi_euidevice_id == """35796d360000005ff47acc0100000000""", "Died on +.volumes[94].scsi_euidevice_id"
    assert result.volumes[94].volume_id == 95, "Died on +.volumes[94].volume_id"
    assert result.volumes[94].access == """readWrite""", "Died on +.volumes[94].access"
    assert result.volumes[94].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--95.95""", "Died on +.volumes[94].iqn"
    assert result.volumes[94].slice_count == 1, "Died on +.volumes[94].slice_count"
    assert type(result.volumes[94].attributes) is dict, "Died on .volumes[94].attributes"
    assert result.volumes[94].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[94].create_time"
    assert result.volumes[94].account_id == 1, "Died on +.volumes[94].account_id"
    assert result.volumes[93].status == """active""", "Died on +.volumes[93].status"
    assert result.volumes[93].enable512e == False, "Died on +.volumes[93].enable512e"
    assert result.volumes[93].qos.burst_iops == 100, "Died on +.volumes[93].qos.burst_iops"
    assert result.volumes[93].qos.burst_time == 60, "Died on +.volumes[93].qos.burst_time"
    assert result.volumes[93].qos.min_iops == 100, "Died on +.volumes[93].qos.min_iops"
    assert result.volumes[93].qos.max_iops == 100, "Died on +.volumes[93].qos.max_iops"
    assert result.volumes[93].name == """suite-stage-2-QED--94""", "Died on +.volumes[93].name"
    assert result.volumes[93].scsi_naadevice_id == """6f47acc10000000035796d360000005e""", "Died on +.volumes[93].scsi_naadevice_id"
    assert result.volumes[93].total_size == 268435456000, "Died on +.volumes[93].total_size"
    assert result.volumes[93].block_size == 4096, "Died on +.volumes[93].block_size"
    assert result.volumes[93].scsi_euidevice_id == """35796d360000005ef47acc0100000000""", "Died on +.volumes[93].scsi_euidevice_id"
    assert result.volumes[93].volume_id == 94, "Died on +.volumes[93].volume_id"
    assert result.volumes[93].access == """readWrite""", "Died on +.volumes[93].access"
    assert result.volumes[93].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--94.94""", "Died on +.volumes[93].iqn"
    assert result.volumes[93].slice_count == 1, "Died on +.volumes[93].slice_count"
    assert type(result.volumes[93].attributes) is dict, "Died on .volumes[93].attributes"
    assert result.volumes[93].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[93].create_time"
    assert result.volumes[93].account_id == 1, "Died on +.volumes[93].account_id"
    assert result.volumes[92].status == """active""", "Died on +.volumes[92].status"
    assert result.volumes[92].enable512e == False, "Died on +.volumes[92].enable512e"
    assert result.volumes[92].qos.burst_iops == 100, "Died on +.volumes[92].qos.burst_iops"
    assert result.volumes[92].qos.burst_time == 60, "Died on +.volumes[92].qos.burst_time"
    assert result.volumes[92].qos.min_iops == 100, "Died on +.volumes[92].qos.min_iops"
    assert result.volumes[92].qos.max_iops == 100, "Died on +.volumes[92].qos.max_iops"
    assert result.volumes[92].name == """suite-stage-2-QED--93""", "Died on +.volumes[92].name"
    assert result.volumes[92].scsi_naadevice_id == """6f47acc10000000035796d360000005d""", "Died on +.volumes[92].scsi_naadevice_id"
    assert result.volumes[92].total_size == 268435456000, "Died on +.volumes[92].total_size"
    assert result.volumes[92].block_size == 4096, "Died on +.volumes[92].block_size"
    assert result.volumes[92].scsi_euidevice_id == """35796d360000005df47acc0100000000""", "Died on +.volumes[92].scsi_euidevice_id"
    assert result.volumes[92].volume_id == 93, "Died on +.volumes[92].volume_id"
    assert result.volumes[92].access == """readWrite""", "Died on +.volumes[92].access"
    assert result.volumes[92].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--93.93""", "Died on +.volumes[92].iqn"
    assert result.volumes[92].slice_count == 1, "Died on +.volumes[92].slice_count"
    assert type(result.volumes[92].attributes) is dict, "Died on .volumes[92].attributes"
    assert result.volumes[92].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[92].create_time"
    assert result.volumes[92].account_id == 1, "Died on +.volumes[92].account_id"
    assert result.volumes[91].status == """active""", "Died on +.volumes[91].status"
    assert result.volumes[91].enable512e == False, "Died on +.volumes[91].enable512e"
    assert result.volumes[91].qos.burst_iops == 100, "Died on +.volumes[91].qos.burst_iops"
    assert result.volumes[91].qos.burst_time == 60, "Died on +.volumes[91].qos.burst_time"
    assert result.volumes[91].qos.min_iops == 100, "Died on +.volumes[91].qos.min_iops"
    assert result.volumes[91].qos.max_iops == 100, "Died on +.volumes[91].qos.max_iops"
    assert result.volumes[91].name == """suite-stage-2-QED--92""", "Died on +.volumes[91].name"
    assert result.volumes[91].scsi_naadevice_id == """6f47acc10000000035796d360000005c""", "Died on +.volumes[91].scsi_naadevice_id"
    assert result.volumes[91].total_size == 268435456000, "Died on +.volumes[91].total_size"
    assert result.volumes[91].block_size == 4096, "Died on +.volumes[91].block_size"
    assert result.volumes[91].scsi_euidevice_id == """35796d360000005cf47acc0100000000""", "Died on +.volumes[91].scsi_euidevice_id"
    assert result.volumes[91].volume_id == 92, "Died on +.volumes[91].volume_id"
    assert result.volumes[91].access == """readWrite""", "Died on +.volumes[91].access"
    assert result.volumes[91].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--92.92""", "Died on +.volumes[91].iqn"
    assert result.volumes[91].slice_count == 1, "Died on +.volumes[91].slice_count"
    assert type(result.volumes[91].attributes) is dict, "Died on .volumes[91].attributes"
    assert result.volumes[91].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[91].create_time"
    assert result.volumes[91].account_id == 1, "Died on +.volumes[91].account_id"
    assert result.volumes[90].status == """active""", "Died on +.volumes[90].status"
    assert result.volumes[90].enable512e == False, "Died on +.volumes[90].enable512e"
    assert result.volumes[90].qos.burst_iops == 100, "Died on +.volumes[90].qos.burst_iops"
    assert result.volumes[90].qos.burst_time == 60, "Died on +.volumes[90].qos.burst_time"
    assert result.volumes[90].qos.min_iops == 100, "Died on +.volumes[90].qos.min_iops"
    assert result.volumes[90].qos.max_iops == 100, "Died on +.volumes[90].qos.max_iops"
    assert result.volumes[90].name == """suite-stage-2-QED--91""", "Died on +.volumes[90].name"
    assert result.volumes[90].scsi_naadevice_id == """6f47acc10000000035796d360000005b""", "Died on +.volumes[90].scsi_naadevice_id"
    assert result.volumes[90].total_size == 268435456000, "Died on +.volumes[90].total_size"
    assert result.volumes[90].block_size == 4096, "Died on +.volumes[90].block_size"
    assert result.volumes[90].scsi_euidevice_id == """35796d360000005bf47acc0100000000""", "Died on +.volumes[90].scsi_euidevice_id"
    assert result.volumes[90].volume_id == 91, "Died on +.volumes[90].volume_id"
    assert result.volumes[90].access == """readWrite""", "Died on +.volumes[90].access"
    assert result.volumes[90].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--91.91""", "Died on +.volumes[90].iqn"
    assert result.volumes[90].slice_count == 1, "Died on +.volumes[90].slice_count"
    assert type(result.volumes[90].attributes) is dict, "Died on .volumes[90].attributes"
    assert result.volumes[90].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[90].create_time"
    assert result.volumes[90].account_id == 1, "Died on +.volumes[90].account_id"
    assert result.volumes[89].status == """active""", "Died on +.volumes[89].status"
    assert result.volumes[89].enable512e == False, "Died on +.volumes[89].enable512e"
    assert result.volumes[89].qos.burst_iops == 100, "Died on +.volumes[89].qos.burst_iops"
    assert result.volumes[89].qos.burst_time == 60, "Died on +.volumes[89].qos.burst_time"
    assert result.volumes[89].qos.min_iops == 100, "Died on +.volumes[89].qos.min_iops"
    assert result.volumes[89].qos.max_iops == 100, "Died on +.volumes[89].qos.max_iops"
    assert result.volumes[89].name == """suite-stage-2-QED--90""", "Died on +.volumes[89].name"
    assert result.volumes[89].scsi_naadevice_id == """6f47acc10000000035796d360000005a""", "Died on +.volumes[89].scsi_naadevice_id"
    assert result.volumes[89].total_size == 268435456000, "Died on +.volumes[89].total_size"
    assert result.volumes[89].block_size == 4096, "Died on +.volumes[89].block_size"
    assert result.volumes[89].scsi_euidevice_id == """35796d360000005af47acc0100000000""", "Died on +.volumes[89].scsi_euidevice_id"
    assert result.volumes[89].volume_id == 90, "Died on +.volumes[89].volume_id"
    assert result.volumes[89].access == """readWrite""", "Died on +.volumes[89].access"
    assert result.volumes[89].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--90.90""", "Died on +.volumes[89].iqn"
    assert result.volumes[89].slice_count == 1, "Died on +.volumes[89].slice_count"
    assert type(result.volumes[89].attributes) is dict, "Died on .volumes[89].attributes"
    assert result.volumes[89].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[89].create_time"
    assert result.volumes[89].account_id == 1, "Died on +.volumes[89].account_id"
    assert result.volumes[88].status == """active""", "Died on +.volumes[88].status"
    assert result.volumes[88].enable512e == False, "Died on +.volumes[88].enable512e"
    assert result.volumes[88].qos.burst_iops == 100, "Died on +.volumes[88].qos.burst_iops"
    assert result.volumes[88].qos.burst_time == 60, "Died on +.volumes[88].qos.burst_time"
    assert result.volumes[88].qos.min_iops == 100, "Died on +.volumes[88].qos.min_iops"
    assert result.volumes[88].qos.max_iops == 100, "Died on +.volumes[88].qos.max_iops"
    assert result.volumes[88].name == """suite-stage-2-QED--89""", "Died on +.volumes[88].name"
    assert result.volumes[88].scsi_naadevice_id == """6f47acc10000000035796d3600000059""", "Died on +.volumes[88].scsi_naadevice_id"
    assert result.volumes[88].total_size == 268435456000, "Died on +.volumes[88].total_size"
    assert result.volumes[88].block_size == 4096, "Died on +.volumes[88].block_size"
    assert result.volumes[88].scsi_euidevice_id == """35796d3600000059f47acc0100000000""", "Died on +.volumes[88].scsi_euidevice_id"
    assert result.volumes[88].volume_id == 89, "Died on +.volumes[88].volume_id"
    assert result.volumes[88].access == """readWrite""", "Died on +.volumes[88].access"
    assert result.volumes[88].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--89.89""", "Died on +.volumes[88].iqn"
    assert result.volumes[88].slice_count == 1, "Died on +.volumes[88].slice_count"
    assert type(result.volumes[88].attributes) is dict, "Died on .volumes[88].attributes"
    assert result.volumes[88].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[88].create_time"
    assert result.volumes[88].account_id == 1, "Died on +.volumes[88].account_id"
    assert result.volumes[87].status == """active""", "Died on +.volumes[87].status"
    assert result.volumes[87].enable512e == False, "Died on +.volumes[87].enable512e"
    assert result.volumes[87].qos.burst_iops == 100, "Died on +.volumes[87].qos.burst_iops"
    assert result.volumes[87].qos.burst_time == 60, "Died on +.volumes[87].qos.burst_time"
    assert result.volumes[87].qos.min_iops == 100, "Died on +.volumes[87].qos.min_iops"
    assert result.volumes[87].qos.max_iops == 100, "Died on +.volumes[87].qos.max_iops"
    assert result.volumes[87].name == """suite-stage-2-QED--88""", "Died on +.volumes[87].name"
    assert result.volumes[87].scsi_naadevice_id == """6f47acc10000000035796d3600000058""", "Died on +.volumes[87].scsi_naadevice_id"
    assert result.volumes[87].total_size == 268435456000, "Died on +.volumes[87].total_size"
    assert result.volumes[87].block_size == 4096, "Died on +.volumes[87].block_size"
    assert result.volumes[87].scsi_euidevice_id == """35796d3600000058f47acc0100000000""", "Died on +.volumes[87].scsi_euidevice_id"
    assert result.volumes[87].volume_id == 88, "Died on +.volumes[87].volume_id"
    assert result.volumes[87].access == """readWrite""", "Died on +.volumes[87].access"
    assert result.volumes[87].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--88.88""", "Died on +.volumes[87].iqn"
    assert result.volumes[87].slice_count == 1, "Died on +.volumes[87].slice_count"
    assert type(result.volumes[87].attributes) is dict, "Died on .volumes[87].attributes"
    assert result.volumes[87].create_time == """2017-01-17T17:13:51Z""", "Died on +.volumes[87].create_time"
    assert result.volumes[87].account_id == 1, "Died on +.volumes[87].account_id"
    assert result.volumes[86].status == """active""", "Died on +.volumes[86].status"
    assert result.volumes[86].enable512e == False, "Died on +.volumes[86].enable512e"
    assert result.volumes[86].qos.burst_iops == 100, "Died on +.volumes[86].qos.burst_iops"
    assert result.volumes[86].qos.burst_time == 60, "Died on +.volumes[86].qos.burst_time"
    assert result.volumes[86].qos.min_iops == 100, "Died on +.volumes[86].qos.min_iops"
    assert result.volumes[86].qos.max_iops == 100, "Died on +.volumes[86].qos.max_iops"
    assert result.volumes[86].name == """suite-stage-2-QED--87""", "Died on +.volumes[86].name"
    assert result.volumes[86].scsi_naadevice_id == """6f47acc10000000035796d3600000057""", "Died on +.volumes[86].scsi_naadevice_id"
    assert result.volumes[86].total_size == 268435456000, "Died on +.volumes[86].total_size"
    assert result.volumes[86].block_size == 4096, "Died on +.volumes[86].block_size"
    assert result.volumes[86].scsi_euidevice_id == """35796d3600000057f47acc0100000000""", "Died on +.volumes[86].scsi_euidevice_id"
    assert result.volumes[86].volume_id == 87, "Died on +.volumes[86].volume_id"
    assert result.volumes[86].access == """readWrite""", "Died on +.volumes[86].access"
    assert result.volumes[86].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--87.87""", "Died on +.volumes[86].iqn"
    assert result.volumes[86].slice_count == 1, "Died on +.volumes[86].slice_count"
    assert type(result.volumes[86].attributes) is dict, "Died on .volumes[86].attributes"
    assert result.volumes[86].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[86].create_time"
    assert result.volumes[86].account_id == 1, "Died on +.volumes[86].account_id"
    assert result.volumes[85].status == """active""", "Died on +.volumes[85].status"
    assert result.volumes[85].enable512e == False, "Died on +.volumes[85].enable512e"
    assert result.volumes[85].qos.burst_iops == 100, "Died on +.volumes[85].qos.burst_iops"
    assert result.volumes[85].qos.burst_time == 60, "Died on +.volumes[85].qos.burst_time"
    assert result.volumes[85].qos.min_iops == 100, "Died on +.volumes[85].qos.min_iops"
    assert result.volumes[85].qos.max_iops == 100, "Died on +.volumes[85].qos.max_iops"
    assert result.volumes[85].name == """suite-stage-2-QED--86""", "Died on +.volumes[85].name"
    assert result.volumes[85].scsi_naadevice_id == """6f47acc10000000035796d3600000056""", "Died on +.volumes[85].scsi_naadevice_id"
    assert result.volumes[85].total_size == 268435456000, "Died on +.volumes[85].total_size"
    assert result.volumes[85].block_size == 4096, "Died on +.volumes[85].block_size"
    assert result.volumes[85].scsi_euidevice_id == """35796d3600000056f47acc0100000000""", "Died on +.volumes[85].scsi_euidevice_id"
    assert result.volumes[85].volume_id == 86, "Died on +.volumes[85].volume_id"
    assert result.volumes[85].access == """readWrite""", "Died on +.volumes[85].access"
    assert result.volumes[85].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--86.86""", "Died on +.volumes[85].iqn"
    assert result.volumes[85].slice_count == 1, "Died on +.volumes[85].slice_count"
    assert type(result.volumes[85].attributes) is dict, "Died on .volumes[85].attributes"
    assert result.volumes[85].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[85].create_time"
    assert result.volumes[85].account_id == 1, "Died on +.volumes[85].account_id"
    assert result.volumes[84].status == """active""", "Died on +.volumes[84].status"
    assert result.volumes[84].enable512e == False, "Died on +.volumes[84].enable512e"
    assert result.volumes[84].qos.burst_iops == 100, "Died on +.volumes[84].qos.burst_iops"
    assert result.volumes[84].qos.burst_time == 60, "Died on +.volumes[84].qos.burst_time"
    assert result.volumes[84].qos.min_iops == 100, "Died on +.volumes[84].qos.min_iops"
    assert result.volumes[84].qos.max_iops == 100, "Died on +.volumes[84].qos.max_iops"
    assert result.volumes[84].name == """suite-stage-2-QED--85""", "Died on +.volumes[84].name"
    assert result.volumes[84].scsi_naadevice_id == """6f47acc10000000035796d3600000055""", "Died on +.volumes[84].scsi_naadevice_id"
    assert result.volumes[84].total_size == 268435456000, "Died on +.volumes[84].total_size"
    assert result.volumes[84].block_size == 4096, "Died on +.volumes[84].block_size"
    assert result.volumes[84].scsi_euidevice_id == """35796d3600000055f47acc0100000000""", "Died on +.volumes[84].scsi_euidevice_id"
    assert result.volumes[84].volume_id == 85, "Died on +.volumes[84].volume_id"
    assert result.volumes[84].access == """readWrite""", "Died on +.volumes[84].access"
    assert result.volumes[84].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--85.85""", "Died on +.volumes[84].iqn"
    assert result.volumes[84].slice_count == 1, "Died on +.volumes[84].slice_count"
    assert type(result.volumes[84].attributes) is dict, "Died on .volumes[84].attributes"
    assert result.volumes[84].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[84].create_time"
    assert result.volumes[84].account_id == 1, "Died on +.volumes[84].account_id"
    assert result.volumes[83].status == """active""", "Died on +.volumes[83].status"
    assert result.volumes[83].enable512e == False, "Died on +.volumes[83].enable512e"
    assert result.volumes[83].qos.burst_iops == 100, "Died on +.volumes[83].qos.burst_iops"
    assert result.volumes[83].qos.burst_time == 60, "Died on +.volumes[83].qos.burst_time"
    assert result.volumes[83].qos.min_iops == 100, "Died on +.volumes[83].qos.min_iops"
    assert result.volumes[83].qos.max_iops == 100, "Died on +.volumes[83].qos.max_iops"
    assert result.volumes[83].name == """suite-stage-2-QED--84""", "Died on +.volumes[83].name"
    assert result.volumes[83].scsi_naadevice_id == """6f47acc10000000035796d3600000054""", "Died on +.volumes[83].scsi_naadevice_id"
    assert result.volumes[83].total_size == 268435456000, "Died on +.volumes[83].total_size"
    assert result.volumes[83].block_size == 4096, "Died on +.volumes[83].block_size"
    assert result.volumes[83].scsi_euidevice_id == """35796d3600000054f47acc0100000000""", "Died on +.volumes[83].scsi_euidevice_id"
    assert result.volumes[83].volume_id == 84, "Died on +.volumes[83].volume_id"
    assert result.volumes[83].access == """readWrite""", "Died on +.volumes[83].access"
    assert result.volumes[83].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--84.84""", "Died on +.volumes[83].iqn"
    assert result.volumes[83].slice_count == 1, "Died on +.volumes[83].slice_count"
    assert type(result.volumes[83].attributes) is dict, "Died on .volumes[83].attributes"
    assert result.volumes[83].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[83].create_time"
    assert result.volumes[83].account_id == 1, "Died on +.volumes[83].account_id"
    assert result.volumes[82].status == """active""", "Died on +.volumes[82].status"
    assert result.volumes[82].enable512e == False, "Died on +.volumes[82].enable512e"
    assert result.volumes[82].qos.burst_iops == 100, "Died on +.volumes[82].qos.burst_iops"
    assert result.volumes[82].qos.burst_time == 60, "Died on +.volumes[82].qos.burst_time"
    assert result.volumes[82].qos.min_iops == 100, "Died on +.volumes[82].qos.min_iops"
    assert result.volumes[82].qos.max_iops == 100, "Died on +.volumes[82].qos.max_iops"
    assert result.volumes[82].name == """suite-stage-2-QED--83""", "Died on +.volumes[82].name"
    assert result.volumes[82].scsi_naadevice_id == """6f47acc10000000035796d3600000053""", "Died on +.volumes[82].scsi_naadevice_id"
    assert result.volumes[82].total_size == 268435456000, "Died on +.volumes[82].total_size"
    assert result.volumes[82].block_size == 4096, "Died on +.volumes[82].block_size"
    assert result.volumes[82].scsi_euidevice_id == """35796d3600000053f47acc0100000000""", "Died on +.volumes[82].scsi_euidevice_id"
    assert result.volumes[82].volume_id == 83, "Died on +.volumes[82].volume_id"
    assert result.volumes[82].access == """readWrite""", "Died on +.volumes[82].access"
    assert result.volumes[82].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--83.83""", "Died on +.volumes[82].iqn"
    assert result.volumes[82].slice_count == 1, "Died on +.volumes[82].slice_count"
    assert type(result.volumes[82].attributes) is dict, "Died on .volumes[82].attributes"
    assert result.volumes[82].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[82].create_time"
    assert result.volumes[82].account_id == 1, "Died on +.volumes[82].account_id"
    assert result.volumes[81].status == """active""", "Died on +.volumes[81].status"
    assert result.volumes[81].enable512e == False, "Died on +.volumes[81].enable512e"
    assert result.volumes[81].qos.burst_iops == 100, "Died on +.volumes[81].qos.burst_iops"
    assert result.volumes[81].qos.burst_time == 60, "Died on +.volumes[81].qos.burst_time"
    assert result.volumes[81].qos.min_iops == 100, "Died on +.volumes[81].qos.min_iops"
    assert result.volumes[81].qos.max_iops == 100, "Died on +.volumes[81].qos.max_iops"
    assert result.volumes[81].name == """suite-stage-2-QED--82""", "Died on +.volumes[81].name"
    assert result.volumes[81].scsi_naadevice_id == """6f47acc10000000035796d3600000052""", "Died on +.volumes[81].scsi_naadevice_id"
    assert result.volumes[81].total_size == 268435456000, "Died on +.volumes[81].total_size"
    assert result.volumes[81].block_size == 4096, "Died on +.volumes[81].block_size"
    assert result.volumes[81].scsi_euidevice_id == """35796d3600000052f47acc0100000000""", "Died on +.volumes[81].scsi_euidevice_id"
    assert result.volumes[81].volume_id == 82, "Died on +.volumes[81].volume_id"
    assert result.volumes[81].access == """readWrite""", "Died on +.volumes[81].access"
    assert result.volumes[81].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--82.82""", "Died on +.volumes[81].iqn"
    assert result.volumes[81].slice_count == 1, "Died on +.volumes[81].slice_count"
    assert type(result.volumes[81].attributes) is dict, "Died on .volumes[81].attributes"
    assert result.volumes[81].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[81].create_time"
    assert result.volumes[81].account_id == 1, "Died on +.volumes[81].account_id"
    assert result.volumes[80].status == """active""", "Died on +.volumes[80].status"
    assert result.volumes[80].enable512e == False, "Died on +.volumes[80].enable512e"
    assert result.volumes[80].qos.burst_iops == 100, "Died on +.volumes[80].qos.burst_iops"
    assert result.volumes[80].qos.burst_time == 60, "Died on +.volumes[80].qos.burst_time"
    assert result.volumes[80].qos.min_iops == 100, "Died on +.volumes[80].qos.min_iops"
    assert result.volumes[80].qos.max_iops == 100, "Died on +.volumes[80].qos.max_iops"
    assert result.volumes[80].name == """suite-stage-2-QED--81""", "Died on +.volumes[80].name"
    assert result.volumes[80].scsi_naadevice_id == """6f47acc10000000035796d3600000051""", "Died on +.volumes[80].scsi_naadevice_id"
    assert result.volumes[80].total_size == 268435456000, "Died on +.volumes[80].total_size"
    assert result.volumes[80].block_size == 4096, "Died on +.volumes[80].block_size"
    assert result.volumes[80].scsi_euidevice_id == """35796d3600000051f47acc0100000000""", "Died on +.volumes[80].scsi_euidevice_id"
    assert result.volumes[80].volume_id == 81, "Died on +.volumes[80].volume_id"
    assert result.volumes[80].access == """readWrite""", "Died on +.volumes[80].access"
    assert result.volumes[80].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--81.81""", "Died on +.volumes[80].iqn"
    assert result.volumes[80].slice_count == 1, "Died on +.volumes[80].slice_count"
    assert type(result.volumes[80].attributes) is dict, "Died on .volumes[80].attributes"
    assert result.volumes[80].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[80].create_time"
    assert result.volumes[80].account_id == 1, "Died on +.volumes[80].account_id"
    assert result.volumes[79].status == """active""", "Died on +.volumes[79].status"
    assert result.volumes[79].enable512e == False, "Died on +.volumes[79].enable512e"
    assert result.volumes[79].qos.burst_iops == 100, "Died on +.volumes[79].qos.burst_iops"
    assert result.volumes[79].qos.burst_time == 60, "Died on +.volumes[79].qos.burst_time"
    assert result.volumes[79].qos.min_iops == 100, "Died on +.volumes[79].qos.min_iops"
    assert result.volumes[79].qos.max_iops == 100, "Died on +.volumes[79].qos.max_iops"
    assert result.volumes[79].name == """suite-stage-2-QED--80""", "Died on +.volumes[79].name"
    assert result.volumes[79].scsi_naadevice_id == """6f47acc10000000035796d3600000050""", "Died on +.volumes[79].scsi_naadevice_id"
    assert result.volumes[79].total_size == 268435456000, "Died on +.volumes[79].total_size"
    assert result.volumes[79].block_size == 4096, "Died on +.volumes[79].block_size"
    assert result.volumes[79].scsi_euidevice_id == """35796d3600000050f47acc0100000000""", "Died on +.volumes[79].scsi_euidevice_id"
    assert result.volumes[79].volume_id == 80, "Died on +.volumes[79].volume_id"
    assert result.volumes[79].access == """readWrite""", "Died on +.volumes[79].access"
    assert result.volumes[79].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--80.80""", "Died on +.volumes[79].iqn"
    assert result.volumes[79].slice_count == 1, "Died on +.volumes[79].slice_count"
    assert type(result.volumes[79].attributes) is dict, "Died on .volumes[79].attributes"
    assert result.volumes[79].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[79].create_time"
    assert result.volumes[79].account_id == 1, "Died on +.volumes[79].account_id"
    assert result.volumes[78].status == """active""", "Died on +.volumes[78].status"
    assert result.volumes[78].enable512e == False, "Died on +.volumes[78].enable512e"
    assert result.volumes[78].qos.burst_iops == 100, "Died on +.volumes[78].qos.burst_iops"
    assert result.volumes[78].qos.burst_time == 60, "Died on +.volumes[78].qos.burst_time"
    assert result.volumes[78].qos.min_iops == 100, "Died on +.volumes[78].qos.min_iops"
    assert result.volumes[78].qos.max_iops == 100, "Died on +.volumes[78].qos.max_iops"
    assert result.volumes[78].name == """suite-stage-2-QED--79""", "Died on +.volumes[78].name"
    assert result.volumes[78].scsi_naadevice_id == """6f47acc10000000035796d360000004f""", "Died on +.volumes[78].scsi_naadevice_id"
    assert result.volumes[78].total_size == 268435456000, "Died on +.volumes[78].total_size"
    assert result.volumes[78].block_size == 4096, "Died on +.volumes[78].block_size"
    assert result.volumes[78].scsi_euidevice_id == """35796d360000004ff47acc0100000000""", "Died on +.volumes[78].scsi_euidevice_id"
    assert result.volumes[78].volume_id == 79, "Died on +.volumes[78].volume_id"
    assert result.volumes[78].access == """readWrite""", "Died on +.volumes[78].access"
    assert result.volumes[78].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--79.79""", "Died on +.volumes[78].iqn"
    assert result.volumes[78].slice_count == 1, "Died on +.volumes[78].slice_count"
    assert type(result.volumes[78].attributes) is dict, "Died on .volumes[78].attributes"
    assert result.volumes[78].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[78].create_time"
    assert result.volumes[78].account_id == 1, "Died on +.volumes[78].account_id"
    assert result.volumes[77].status == """active""", "Died on +.volumes[77].status"
    assert result.volumes[77].enable512e == False, "Died on +.volumes[77].enable512e"
    assert result.volumes[77].qos.burst_iops == 100, "Died on +.volumes[77].qos.burst_iops"
    assert result.volumes[77].qos.burst_time == 60, "Died on +.volumes[77].qos.burst_time"
    assert result.volumes[77].qos.min_iops == 100, "Died on +.volumes[77].qos.min_iops"
    assert result.volumes[77].qos.max_iops == 100, "Died on +.volumes[77].qos.max_iops"
    assert result.volumes[77].name == """suite-stage-2-QED--78""", "Died on +.volumes[77].name"
    assert result.volumes[77].scsi_naadevice_id == """6f47acc10000000035796d360000004e""", "Died on +.volumes[77].scsi_naadevice_id"
    assert result.volumes[77].total_size == 268435456000, "Died on +.volumes[77].total_size"
    assert result.volumes[77].block_size == 4096, "Died on +.volumes[77].block_size"
    assert result.volumes[77].scsi_euidevice_id == """35796d360000004ef47acc0100000000""", "Died on +.volumes[77].scsi_euidevice_id"
    assert result.volumes[77].volume_id == 78, "Died on +.volumes[77].volume_id"
    assert result.volumes[77].access == """readWrite""", "Died on +.volumes[77].access"
    assert result.volumes[77].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--78.78""", "Died on +.volumes[77].iqn"
    assert result.volumes[77].slice_count == 1, "Died on +.volumes[77].slice_count"
    assert type(result.volumes[77].attributes) is dict, "Died on .volumes[77].attributes"
    assert result.volumes[77].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[77].create_time"
    assert result.volumes[77].account_id == 1, "Died on +.volumes[77].account_id"
    assert result.volumes[76].status == """active""", "Died on +.volumes[76].status"
    assert result.volumes[76].enable512e == False, "Died on +.volumes[76].enable512e"
    assert result.volumes[76].qos.burst_iops == 100, "Died on +.volumes[76].qos.burst_iops"
    assert result.volumes[76].qos.burst_time == 60, "Died on +.volumes[76].qos.burst_time"
    assert result.volumes[76].qos.min_iops == 100, "Died on +.volumes[76].qos.min_iops"
    assert result.volumes[76].qos.max_iops == 100, "Died on +.volumes[76].qos.max_iops"
    assert result.volumes[76].name == """suite-stage-2-QED--77""", "Died on +.volumes[76].name"
    assert result.volumes[76].scsi_naadevice_id == """6f47acc10000000035796d360000004d""", "Died on +.volumes[76].scsi_naadevice_id"
    assert result.volumes[76].total_size == 268435456000, "Died on +.volumes[76].total_size"
    assert result.volumes[76].block_size == 4096, "Died on +.volumes[76].block_size"
    assert result.volumes[76].scsi_euidevice_id == """35796d360000004df47acc0100000000""", "Died on +.volumes[76].scsi_euidevice_id"
    assert result.volumes[76].volume_id == 77, "Died on +.volumes[76].volume_id"
    assert result.volumes[76].access == """readWrite""", "Died on +.volumes[76].access"
    assert result.volumes[76].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--77.77""", "Died on +.volumes[76].iqn"
    assert result.volumes[76].slice_count == 1, "Died on +.volumes[76].slice_count"
    assert type(result.volumes[76].attributes) is dict, "Died on .volumes[76].attributes"
    assert result.volumes[76].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[76].create_time"
    assert result.volumes[76].account_id == 1, "Died on +.volumes[76].account_id"
    assert result.volumes[75].status == """active""", "Died on +.volumes[75].status"
    assert result.volumes[75].enable512e == False, "Died on +.volumes[75].enable512e"
    assert result.volumes[75].qos.burst_iops == 100, "Died on +.volumes[75].qos.burst_iops"
    assert result.volumes[75].qos.burst_time == 60, "Died on +.volumes[75].qos.burst_time"
    assert result.volumes[75].qos.min_iops == 100, "Died on +.volumes[75].qos.min_iops"
    assert result.volumes[75].qos.max_iops == 100, "Died on +.volumes[75].qos.max_iops"
    assert result.volumes[75].name == """suite-stage-2-QED--76""", "Died on +.volumes[75].name"
    assert result.volumes[75].scsi_naadevice_id == """6f47acc10000000035796d360000004c""", "Died on +.volumes[75].scsi_naadevice_id"
    assert result.volumes[75].total_size == 268435456000, "Died on +.volumes[75].total_size"
    assert result.volumes[75].block_size == 4096, "Died on +.volumes[75].block_size"
    assert result.volumes[75].scsi_euidevice_id == """35796d360000004cf47acc0100000000""", "Died on +.volumes[75].scsi_euidevice_id"
    assert result.volumes[75].volume_id == 76, "Died on +.volumes[75].volume_id"
    assert result.volumes[75].access == """readWrite""", "Died on +.volumes[75].access"
    assert result.volumes[75].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--76.76""", "Died on +.volumes[75].iqn"
    assert result.volumes[75].slice_count == 1, "Died on +.volumes[75].slice_count"
    assert type(result.volumes[75].attributes) is dict, "Died on .volumes[75].attributes"
    assert result.volumes[75].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[75].create_time"
    assert result.volumes[75].account_id == 1, "Died on +.volumes[75].account_id"
    assert result.volumes[74].status == """active""", "Died on +.volumes[74].status"
    assert result.volumes[74].enable512e == False, "Died on +.volumes[74].enable512e"
    assert result.volumes[74].qos.burst_iops == 100, "Died on +.volumes[74].qos.burst_iops"
    assert result.volumes[74].qos.burst_time == 60, "Died on +.volumes[74].qos.burst_time"
    assert result.volumes[74].qos.min_iops == 100, "Died on +.volumes[74].qos.min_iops"
    assert result.volumes[74].qos.max_iops == 100, "Died on +.volumes[74].qos.max_iops"
    assert result.volumes[74].name == """suite-stage-2-QED--75""", "Died on +.volumes[74].name"
    assert result.volumes[74].scsi_naadevice_id == """6f47acc10000000035796d360000004b""", "Died on +.volumes[74].scsi_naadevice_id"
    assert result.volumes[74].total_size == 268435456000, "Died on +.volumes[74].total_size"
    assert result.volumes[74].block_size == 4096, "Died on +.volumes[74].block_size"
    assert result.volumes[74].scsi_euidevice_id == """35796d360000004bf47acc0100000000""", "Died on +.volumes[74].scsi_euidevice_id"
    assert result.volumes[74].volume_id == 75, "Died on +.volumes[74].volume_id"
    assert result.volumes[74].access == """readWrite""", "Died on +.volumes[74].access"
    assert result.volumes[74].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--75.75""", "Died on +.volumes[74].iqn"
    assert result.volumes[74].slice_count == 1, "Died on +.volumes[74].slice_count"
    assert type(result.volumes[74].attributes) is dict, "Died on .volumes[74].attributes"
    assert result.volumes[74].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[74].create_time"
    assert result.volumes[74].account_id == 1, "Died on +.volumes[74].account_id"
    assert result.volumes[73].status == """active""", "Died on +.volumes[73].status"
    assert result.volumes[73].enable512e == False, "Died on +.volumes[73].enable512e"
    assert result.volumes[73].qos.burst_iops == 100, "Died on +.volumes[73].qos.burst_iops"
    assert result.volumes[73].qos.burst_time == 60, "Died on +.volumes[73].qos.burst_time"
    assert result.volumes[73].qos.min_iops == 100, "Died on +.volumes[73].qos.min_iops"
    assert result.volumes[73].qos.max_iops == 100, "Died on +.volumes[73].qos.max_iops"
    assert result.volumes[73].name == """suite-stage-2-QED--74""", "Died on +.volumes[73].name"
    assert result.volumes[73].scsi_naadevice_id == """6f47acc10000000035796d360000004a""", "Died on +.volumes[73].scsi_naadevice_id"
    assert result.volumes[73].total_size == 268435456000, "Died on +.volumes[73].total_size"
    assert result.volumes[73].block_size == 4096, "Died on +.volumes[73].block_size"
    assert result.volumes[73].scsi_euidevice_id == """35796d360000004af47acc0100000000""", "Died on +.volumes[73].scsi_euidevice_id"
    assert result.volumes[73].volume_id == 74, "Died on +.volumes[73].volume_id"
    assert result.volumes[73].access == """readWrite""", "Died on +.volumes[73].access"
    assert result.volumes[73].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--74.74""", "Died on +.volumes[73].iqn"
    assert result.volumes[73].slice_count == 1, "Died on +.volumes[73].slice_count"
    assert type(result.volumes[73].attributes) is dict, "Died on .volumes[73].attributes"
    assert result.volumes[73].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[73].create_time"
    assert result.volumes[73].account_id == 1, "Died on +.volumes[73].account_id"
    assert result.volumes[72].status == """active""", "Died on +.volumes[72].status"
    assert result.volumes[72].enable512e == False, "Died on +.volumes[72].enable512e"
    assert result.volumes[72].qos.burst_iops == 100, "Died on +.volumes[72].qos.burst_iops"
    assert result.volumes[72].qos.burst_time == 60, "Died on +.volumes[72].qos.burst_time"
    assert result.volumes[72].qos.min_iops == 100, "Died on +.volumes[72].qos.min_iops"
    assert result.volumes[72].qos.max_iops == 100, "Died on +.volumes[72].qos.max_iops"
    assert result.volumes[72].name == """suite-stage-2-QED--73""", "Died on +.volumes[72].name"
    assert result.volumes[72].scsi_naadevice_id == """6f47acc10000000035796d3600000049""", "Died on +.volumes[72].scsi_naadevice_id"
    assert result.volumes[72].total_size == 268435456000, "Died on +.volumes[72].total_size"
    assert result.volumes[72].block_size == 4096, "Died on +.volumes[72].block_size"
    assert result.volumes[72].scsi_euidevice_id == """35796d3600000049f47acc0100000000""", "Died on +.volumes[72].scsi_euidevice_id"
    assert result.volumes[72].volume_id == 73, "Died on +.volumes[72].volume_id"
    assert result.volumes[72].access == """readWrite""", "Died on +.volumes[72].access"
    assert result.volumes[72].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--73.73""", "Died on +.volumes[72].iqn"
    assert result.volumes[72].slice_count == 1, "Died on +.volumes[72].slice_count"
    assert type(result.volumes[72].attributes) is dict, "Died on .volumes[72].attributes"
    assert result.volumes[72].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[72].create_time"
    assert result.volumes[72].account_id == 1, "Died on +.volumes[72].account_id"
    assert result.volumes[71].status == """active""", "Died on +.volumes[71].status"
    assert result.volumes[71].enable512e == False, "Died on +.volumes[71].enable512e"
    assert result.volumes[71].qos.burst_iops == 100, "Died on +.volumes[71].qos.burst_iops"
    assert result.volumes[71].qos.burst_time == 60, "Died on +.volumes[71].qos.burst_time"
    assert result.volumes[71].qos.min_iops == 100, "Died on +.volumes[71].qos.min_iops"
    assert result.volumes[71].qos.max_iops == 100, "Died on +.volumes[71].qos.max_iops"
    assert result.volumes[71].name == """suite-stage-2-QED--72""", "Died on +.volumes[71].name"
    assert result.volumes[71].scsi_naadevice_id == """6f47acc10000000035796d3600000048""", "Died on +.volumes[71].scsi_naadevice_id"
    assert result.volumes[71].total_size == 268435456000, "Died on +.volumes[71].total_size"
    assert result.volumes[71].block_size == 4096, "Died on +.volumes[71].block_size"
    assert result.volumes[71].scsi_euidevice_id == """35796d3600000048f47acc0100000000""", "Died on +.volumes[71].scsi_euidevice_id"
    assert result.volumes[71].volume_id == 72, "Died on +.volumes[71].volume_id"
    assert result.volumes[71].access == """readWrite""", "Died on +.volumes[71].access"
    assert result.volumes[71].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--72.72""", "Died on +.volumes[71].iqn"
    assert result.volumes[71].slice_count == 1, "Died on +.volumes[71].slice_count"
    assert type(result.volumes[71].attributes) is dict, "Died on .volumes[71].attributes"
    assert result.volumes[71].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[71].create_time"
    assert result.volumes[71].account_id == 1, "Died on +.volumes[71].account_id"
    assert result.volumes[70].status == """active""", "Died on +.volumes[70].status"
    assert result.volumes[70].enable512e == False, "Died on +.volumes[70].enable512e"
    assert result.volumes[70].qos.burst_iops == 100, "Died on +.volumes[70].qos.burst_iops"
    assert result.volumes[70].qos.burst_time == 60, "Died on +.volumes[70].qos.burst_time"
    assert result.volumes[70].qos.min_iops == 100, "Died on +.volumes[70].qos.min_iops"
    assert result.volumes[70].qos.max_iops == 100, "Died on +.volumes[70].qos.max_iops"
    assert result.volumes[70].name == """suite-stage-2-QED--71""", "Died on +.volumes[70].name"
    assert result.volumes[70].scsi_naadevice_id == """6f47acc10000000035796d3600000047""", "Died on +.volumes[70].scsi_naadevice_id"
    assert result.volumes[70].total_size == 268435456000, "Died on +.volumes[70].total_size"
    assert result.volumes[70].block_size == 4096, "Died on +.volumes[70].block_size"
    assert result.volumes[70].scsi_euidevice_id == """35796d3600000047f47acc0100000000""", "Died on +.volumes[70].scsi_euidevice_id"
    assert result.volumes[70].volume_id == 71, "Died on +.volumes[70].volume_id"
    assert result.volumes[70].access == """readWrite""", "Died on +.volumes[70].access"
    assert result.volumes[70].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--71.71""", "Died on +.volumes[70].iqn"
    assert result.volumes[70].slice_count == 1, "Died on +.volumes[70].slice_count"
    assert type(result.volumes[70].attributes) is dict, "Died on .volumes[70].attributes"
    assert result.volumes[70].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[70].create_time"
    assert result.volumes[70].account_id == 1, "Died on +.volumes[70].account_id"
    assert result.volumes[69].status == """active""", "Died on +.volumes[69].status"
    assert result.volumes[69].enable512e == False, "Died on +.volumes[69].enable512e"
    assert result.volumes[69].qos.burst_iops == 100, "Died on +.volumes[69].qos.burst_iops"
    assert result.volumes[69].qos.burst_time == 60, "Died on +.volumes[69].qos.burst_time"
    assert result.volumes[69].qos.min_iops == 100, "Died on +.volumes[69].qos.min_iops"
    assert result.volumes[69].qos.max_iops == 100, "Died on +.volumes[69].qos.max_iops"
    assert result.volumes[69].name == """suite-stage-2-QED--70""", "Died on +.volumes[69].name"
    assert result.volumes[69].scsi_naadevice_id == """6f47acc10000000035796d3600000046""", "Died on +.volumes[69].scsi_naadevice_id"
    assert result.volumes[69].total_size == 268435456000, "Died on +.volumes[69].total_size"
    assert result.volumes[69].block_size == 4096, "Died on +.volumes[69].block_size"
    assert result.volumes[69].scsi_euidevice_id == """35796d3600000046f47acc0100000000""", "Died on +.volumes[69].scsi_euidevice_id"
    assert result.volumes[69].volume_id == 70, "Died on +.volumes[69].volume_id"
    assert result.volumes[69].access == """readWrite""", "Died on +.volumes[69].access"
    assert result.volumes[69].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--70.70""", "Died on +.volumes[69].iqn"
    assert result.volumes[69].slice_count == 1, "Died on +.volumes[69].slice_count"
    assert type(result.volumes[69].attributes) is dict, "Died on .volumes[69].attributes"
    assert result.volumes[69].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[69].create_time"
    assert result.volumes[69].account_id == 1, "Died on +.volumes[69].account_id"
    assert result.volumes[68].status == """active""", "Died on +.volumes[68].status"
    assert result.volumes[68].enable512e == False, "Died on +.volumes[68].enable512e"
    assert result.volumes[68].qos.burst_iops == 100, "Died on +.volumes[68].qos.burst_iops"
    assert result.volumes[68].qos.burst_time == 60, "Died on +.volumes[68].qos.burst_time"
    assert result.volumes[68].qos.min_iops == 100, "Died on +.volumes[68].qos.min_iops"
    assert result.volumes[68].qos.max_iops == 100, "Died on +.volumes[68].qos.max_iops"
    assert result.volumes[68].name == """suite-stage-2-QED--69""", "Died on +.volumes[68].name"
    assert result.volumes[68].scsi_naadevice_id == """6f47acc10000000035796d3600000045""", "Died on +.volumes[68].scsi_naadevice_id"
    assert result.volumes[68].total_size == 268435456000, "Died on +.volumes[68].total_size"
    assert result.volumes[68].block_size == 4096, "Died on +.volumes[68].block_size"
    assert result.volumes[68].scsi_euidevice_id == """35796d3600000045f47acc0100000000""", "Died on +.volumes[68].scsi_euidevice_id"
    assert result.volumes[68].volume_id == 69, "Died on +.volumes[68].volume_id"
    assert result.volumes[68].access == """readWrite""", "Died on +.volumes[68].access"
    assert result.volumes[68].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--69.69""", "Died on +.volumes[68].iqn"
    assert result.volumes[68].slice_count == 1, "Died on +.volumes[68].slice_count"
    assert type(result.volumes[68].attributes) is dict, "Died on .volumes[68].attributes"
    assert result.volumes[68].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[68].create_time"
    assert result.volumes[68].account_id == 1, "Died on +.volumes[68].account_id"
    assert result.volumes[67].status == """active""", "Died on +.volumes[67].status"
    assert result.volumes[67].enable512e == False, "Died on +.volumes[67].enable512e"
    assert result.volumes[67].qos.burst_iops == 100, "Died on +.volumes[67].qos.burst_iops"
    assert result.volumes[67].qos.burst_time == 60, "Died on +.volumes[67].qos.burst_time"
    assert result.volumes[67].qos.min_iops == 100, "Died on +.volumes[67].qos.min_iops"
    assert result.volumes[67].qos.max_iops == 100, "Died on +.volumes[67].qos.max_iops"
    assert result.volumes[67].name == """suite-stage-2-QED--68""", "Died on +.volumes[67].name"
    assert result.volumes[67].scsi_naadevice_id == """6f47acc10000000035796d3600000044""", "Died on +.volumes[67].scsi_naadevice_id"
    assert result.volumes[67].total_size == 268435456000, "Died on +.volumes[67].total_size"
    assert result.volumes[67].block_size == 4096, "Died on +.volumes[67].block_size"
    assert result.volumes[67].scsi_euidevice_id == """35796d3600000044f47acc0100000000""", "Died on +.volumes[67].scsi_euidevice_id"
    assert result.volumes[67].volume_id == 68, "Died on +.volumes[67].volume_id"
    assert result.volumes[67].access == """readWrite""", "Died on +.volumes[67].access"
    assert result.volumes[67].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--68.68""", "Died on +.volumes[67].iqn"
    assert result.volumes[67].slice_count == 1, "Died on +.volumes[67].slice_count"
    assert type(result.volumes[67].attributes) is dict, "Died on .volumes[67].attributes"
    assert result.volumes[67].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[67].create_time"
    assert result.volumes[67].account_id == 1, "Died on +.volumes[67].account_id"
    assert result.volumes[66].status == """active""", "Died on +.volumes[66].status"
    assert result.volumes[66].enable512e == False, "Died on +.volumes[66].enable512e"
    assert result.volumes[66].qos.burst_iops == 100, "Died on +.volumes[66].qos.burst_iops"
    assert result.volumes[66].qos.burst_time == 60, "Died on +.volumes[66].qos.burst_time"
    assert result.volumes[66].qos.min_iops == 100, "Died on +.volumes[66].qos.min_iops"
    assert result.volumes[66].qos.max_iops == 100, "Died on +.volumes[66].qos.max_iops"
    assert result.volumes[66].name == """suite-stage-2-QED--67""", "Died on +.volumes[66].name"
    assert result.volumes[66].scsi_naadevice_id == """6f47acc10000000035796d3600000043""", "Died on +.volumes[66].scsi_naadevice_id"
    assert result.volumes[66].total_size == 268435456000, "Died on +.volumes[66].total_size"
    assert result.volumes[66].block_size == 4096, "Died on +.volumes[66].block_size"
    assert result.volumes[66].scsi_euidevice_id == """35796d3600000043f47acc0100000000""", "Died on +.volumes[66].scsi_euidevice_id"
    assert result.volumes[66].volume_id == 67, "Died on +.volumes[66].volume_id"
    assert result.volumes[66].access == """readWrite""", "Died on +.volumes[66].access"
    assert result.volumes[66].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--67.67""", "Died on +.volumes[66].iqn"
    assert result.volumes[66].slice_count == 1, "Died on +.volumes[66].slice_count"
    assert type(result.volumes[66].attributes) is dict, "Died on .volumes[66].attributes"
    assert result.volumes[66].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[66].create_time"
    assert result.volumes[66].account_id == 1, "Died on +.volumes[66].account_id"
    assert result.volumes[65].status == """active""", "Died on +.volumes[65].status"
    assert result.volumes[65].enable512e == False, "Died on +.volumes[65].enable512e"
    assert result.volumes[65].qos.burst_iops == 100, "Died on +.volumes[65].qos.burst_iops"
    assert result.volumes[65].qos.burst_time == 60, "Died on +.volumes[65].qos.burst_time"
    assert result.volumes[65].qos.min_iops == 100, "Died on +.volumes[65].qos.min_iops"
    assert result.volumes[65].qos.max_iops == 100, "Died on +.volumes[65].qos.max_iops"
    assert result.volumes[65].name == """suite-stage-2-QED--66""", "Died on +.volumes[65].name"
    assert result.volumes[65].scsi_naadevice_id == """6f47acc10000000035796d3600000042""", "Died on +.volumes[65].scsi_naadevice_id"
    assert result.volumes[65].total_size == 268435456000, "Died on +.volumes[65].total_size"
    assert result.volumes[65].block_size == 4096, "Died on +.volumes[65].block_size"
    assert result.volumes[65].scsi_euidevice_id == """35796d3600000042f47acc0100000000""", "Died on +.volumes[65].scsi_euidevice_id"
    assert result.volumes[65].volume_id == 66, "Died on +.volumes[65].volume_id"
    assert result.volumes[65].access == """readWrite""", "Died on +.volumes[65].access"
    assert result.volumes[65].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--66.66""", "Died on +.volumes[65].iqn"
    assert result.volumes[65].slice_count == 1, "Died on +.volumes[65].slice_count"
    assert type(result.volumes[65].attributes) is dict, "Died on .volumes[65].attributes"
    assert result.volumes[65].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[65].create_time"
    assert result.volumes[65].account_id == 1, "Died on +.volumes[65].account_id"
    assert result.volumes[64].status == """active""", "Died on +.volumes[64].status"
    assert result.volumes[64].enable512e == False, "Died on +.volumes[64].enable512e"
    assert result.volumes[64].qos.burst_iops == 100, "Died on +.volumes[64].qos.burst_iops"
    assert result.volumes[64].qos.burst_time == 60, "Died on +.volumes[64].qos.burst_time"
    assert result.volumes[64].qos.min_iops == 100, "Died on +.volumes[64].qos.min_iops"
    assert result.volumes[64].qos.max_iops == 100, "Died on +.volumes[64].qos.max_iops"
    assert result.volumes[64].name == """suite-stage-2-QED--65""", "Died on +.volumes[64].name"
    assert result.volumes[64].scsi_naadevice_id == """6f47acc10000000035796d3600000041""", "Died on +.volumes[64].scsi_naadevice_id"
    assert result.volumes[64].total_size == 268435456000, "Died on +.volumes[64].total_size"
    assert result.volumes[64].block_size == 4096, "Died on +.volumes[64].block_size"
    assert result.volumes[64].scsi_euidevice_id == """35796d3600000041f47acc0100000000""", "Died on +.volumes[64].scsi_euidevice_id"
    assert result.volumes[64].volume_id == 65, "Died on +.volumes[64].volume_id"
    assert result.volumes[64].access == """readWrite""", "Died on +.volumes[64].access"
    assert result.volumes[64].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--65.65""", "Died on +.volumes[64].iqn"
    assert result.volumes[64].slice_count == 1, "Died on +.volumes[64].slice_count"
    assert type(result.volumes[64].attributes) is dict, "Died on .volumes[64].attributes"
    assert result.volumes[64].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[64].create_time"
    assert result.volumes[64].account_id == 1, "Died on +.volumes[64].account_id"
    assert result.volumes[63].status == """active""", "Died on +.volumes[63].status"
    assert result.volumes[63].enable512e == False, "Died on +.volumes[63].enable512e"
    assert result.volumes[63].qos.burst_iops == 100, "Died on +.volumes[63].qos.burst_iops"
    assert result.volumes[63].qos.burst_time == 60, "Died on +.volumes[63].qos.burst_time"
    assert result.volumes[63].qos.min_iops == 100, "Died on +.volumes[63].qos.min_iops"
    assert result.volumes[63].qos.max_iops == 100, "Died on +.volumes[63].qos.max_iops"
    assert result.volumes[63].name == """suite-stage-2-QED--64""", "Died on +.volumes[63].name"
    assert result.volumes[63].scsi_naadevice_id == """6f47acc10000000035796d3600000040""", "Died on +.volumes[63].scsi_naadevice_id"
    assert result.volumes[63].total_size == 268435456000, "Died on +.volumes[63].total_size"
    assert result.volumes[63].block_size == 4096, "Died on +.volumes[63].block_size"
    assert result.volumes[63].scsi_euidevice_id == """35796d3600000040f47acc0100000000""", "Died on +.volumes[63].scsi_euidevice_id"
    assert result.volumes[63].volume_id == 64, "Died on +.volumes[63].volume_id"
    assert result.volumes[63].access == """readWrite""", "Died on +.volumes[63].access"
    assert result.volumes[63].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--64.64""", "Died on +.volumes[63].iqn"
    assert result.volumes[63].slice_count == 1, "Died on +.volumes[63].slice_count"
    assert type(result.volumes[63].attributes) is dict, "Died on .volumes[63].attributes"
    assert result.volumes[63].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[63].create_time"
    assert result.volumes[63].account_id == 1, "Died on +.volumes[63].account_id"
    assert result.volumes[62].status == """active""", "Died on +.volumes[62].status"
    assert result.volumes[62].enable512e == False, "Died on +.volumes[62].enable512e"
    assert result.volumes[62].qos.burst_iops == 100, "Died on +.volumes[62].qos.burst_iops"
    assert result.volumes[62].qos.burst_time == 60, "Died on +.volumes[62].qos.burst_time"
    assert result.volumes[62].qos.min_iops == 100, "Died on +.volumes[62].qos.min_iops"
    assert result.volumes[62].qos.max_iops == 100, "Died on +.volumes[62].qos.max_iops"
    assert result.volumes[62].name == """suite-stage-2-QED--63""", "Died on +.volumes[62].name"
    assert result.volumes[62].scsi_naadevice_id == """6f47acc10000000035796d360000003f""", "Died on +.volumes[62].scsi_naadevice_id"
    assert result.volumes[62].total_size == 268435456000, "Died on +.volumes[62].total_size"
    assert result.volumes[62].block_size == 4096, "Died on +.volumes[62].block_size"
    assert result.volumes[62].scsi_euidevice_id == """35796d360000003ff47acc0100000000""", "Died on +.volumes[62].scsi_euidevice_id"
    assert result.volumes[62].volume_id == 63, "Died on +.volumes[62].volume_id"
    assert result.volumes[62].access == """readWrite""", "Died on +.volumes[62].access"
    assert result.volumes[62].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--63.63""", "Died on +.volumes[62].iqn"
    assert result.volumes[62].slice_count == 1, "Died on +.volumes[62].slice_count"
    assert type(result.volumes[62].attributes) is dict, "Died on .volumes[62].attributes"
    assert result.volumes[62].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[62].create_time"
    assert result.volumes[62].account_id == 1, "Died on +.volumes[62].account_id"
    assert result.volumes[61].status == """active""", "Died on +.volumes[61].status"
    assert result.volumes[61].enable512e == False, "Died on +.volumes[61].enable512e"
    assert result.volumes[61].qos.burst_iops == 100, "Died on +.volumes[61].qos.burst_iops"
    assert result.volumes[61].qos.burst_time == 60, "Died on +.volumes[61].qos.burst_time"
    assert result.volumes[61].qos.min_iops == 100, "Died on +.volumes[61].qos.min_iops"
    assert result.volumes[61].qos.max_iops == 100, "Died on +.volumes[61].qos.max_iops"
    assert result.volumes[61].name == """suite-stage-2-QED--62""", "Died on +.volumes[61].name"
    assert result.volumes[61].scsi_naadevice_id == """6f47acc10000000035796d360000003e""", "Died on +.volumes[61].scsi_naadevice_id"
    assert result.volumes[61].total_size == 268435456000, "Died on +.volumes[61].total_size"
    assert result.volumes[61].block_size == 4096, "Died on +.volumes[61].block_size"
    assert result.volumes[61].scsi_euidevice_id == """35796d360000003ef47acc0100000000""", "Died on +.volumes[61].scsi_euidevice_id"
    assert result.volumes[61].volume_id == 62, "Died on +.volumes[61].volume_id"
    assert result.volumes[61].access == """readWrite""", "Died on +.volumes[61].access"
    assert result.volumes[61].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--62.62""", "Died on +.volumes[61].iqn"
    assert result.volumes[61].slice_count == 1, "Died on +.volumes[61].slice_count"
    assert type(result.volumes[61].attributes) is dict, "Died on .volumes[61].attributes"
    assert result.volumes[61].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[61].create_time"
    assert result.volumes[61].account_id == 1, "Died on +.volumes[61].account_id"
    assert result.volumes[60].status == """active""", "Died on +.volumes[60].status"
    assert result.volumes[60].enable512e == False, "Died on +.volumes[60].enable512e"
    assert result.volumes[60].qos.burst_iops == 100, "Died on +.volumes[60].qos.burst_iops"
    assert result.volumes[60].qos.burst_time == 60, "Died on +.volumes[60].qos.burst_time"
    assert result.volumes[60].qos.min_iops == 100, "Died on +.volumes[60].qos.min_iops"
    assert result.volumes[60].qos.max_iops == 100, "Died on +.volumes[60].qos.max_iops"
    assert result.volumes[60].name == """suite-stage-2-QED--61""", "Died on +.volumes[60].name"
    assert result.volumes[60].scsi_naadevice_id == """6f47acc10000000035796d360000003d""", "Died on +.volumes[60].scsi_naadevice_id"
    assert result.volumes[60].total_size == 268435456000, "Died on +.volumes[60].total_size"
    assert result.volumes[60].block_size == 4096, "Died on +.volumes[60].block_size"
    assert result.volumes[60].scsi_euidevice_id == """35796d360000003df47acc0100000000""", "Died on +.volumes[60].scsi_euidevice_id"
    assert result.volumes[60].volume_id == 61, "Died on +.volumes[60].volume_id"
    assert result.volumes[60].access == """readWrite""", "Died on +.volumes[60].access"
    assert result.volumes[60].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--61.61""", "Died on +.volumes[60].iqn"
    assert result.volumes[60].slice_count == 1, "Died on +.volumes[60].slice_count"
    assert type(result.volumes[60].attributes) is dict, "Died on .volumes[60].attributes"
    assert result.volumes[60].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[60].create_time"
    assert result.volumes[60].account_id == 1, "Died on +.volumes[60].account_id"
    assert result.volumes[59].status == """active""", "Died on +.volumes[59].status"
    assert result.volumes[59].enable512e == False, "Died on +.volumes[59].enable512e"
    assert result.volumes[59].qos.burst_iops == 100, "Died on +.volumes[59].qos.burst_iops"
    assert result.volumes[59].qos.burst_time == 60, "Died on +.volumes[59].qos.burst_time"
    assert result.volumes[59].qos.min_iops == 100, "Died on +.volumes[59].qos.min_iops"
    assert result.volumes[59].qos.max_iops == 100, "Died on +.volumes[59].qos.max_iops"
    assert result.volumes[59].name == """suite-stage-2-QED--60""", "Died on +.volumes[59].name"
    assert result.volumes[59].scsi_naadevice_id == """6f47acc10000000035796d360000003c""", "Died on +.volumes[59].scsi_naadevice_id"
    assert result.volumes[59].total_size == 268435456000, "Died on +.volumes[59].total_size"
    assert result.volumes[59].block_size == 4096, "Died on +.volumes[59].block_size"
    assert result.volumes[59].scsi_euidevice_id == """35796d360000003cf47acc0100000000""", "Died on +.volumes[59].scsi_euidevice_id"
    assert result.volumes[59].volume_id == 60, "Died on +.volumes[59].volume_id"
    assert result.volumes[59].access == """readWrite""", "Died on +.volumes[59].access"
    assert result.volumes[59].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--60.60""", "Died on +.volumes[59].iqn"
    assert result.volumes[59].slice_count == 1, "Died on +.volumes[59].slice_count"
    assert type(result.volumes[59].attributes) is dict, "Died on .volumes[59].attributes"
    assert result.volumes[59].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[59].create_time"
    assert result.volumes[59].account_id == 1, "Died on +.volumes[59].account_id"
    assert result.volumes[58].status == """active""", "Died on +.volumes[58].status"
    assert result.volumes[58].enable512e == False, "Died on +.volumes[58].enable512e"
    assert result.volumes[58].qos.burst_iops == 100, "Died on +.volumes[58].qos.burst_iops"
    assert result.volumes[58].qos.burst_time == 60, "Died on +.volumes[58].qos.burst_time"
    assert result.volumes[58].qos.min_iops == 100, "Died on +.volumes[58].qos.min_iops"
    assert result.volumes[58].qos.max_iops == 100, "Died on +.volumes[58].qos.max_iops"
    assert result.volumes[58].name == """suite-stage-2-QED--59""", "Died on +.volumes[58].name"
    assert result.volumes[58].scsi_naadevice_id == """6f47acc10000000035796d360000003b""", "Died on +.volumes[58].scsi_naadevice_id"
    assert result.volumes[58].total_size == 268435456000, "Died on +.volumes[58].total_size"
    assert result.volumes[58].block_size == 4096, "Died on +.volumes[58].block_size"
    assert result.volumes[58].scsi_euidevice_id == """35796d360000003bf47acc0100000000""", "Died on +.volumes[58].scsi_euidevice_id"
    assert result.volumes[58].volume_id == 59, "Died on +.volumes[58].volume_id"
    assert result.volumes[58].access == """readWrite""", "Died on +.volumes[58].access"
    assert result.volumes[58].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--59.59""", "Died on +.volumes[58].iqn"
    assert result.volumes[58].slice_count == 1, "Died on +.volumes[58].slice_count"
    assert type(result.volumes[58].attributes) is dict, "Died on .volumes[58].attributes"
    assert result.volumes[58].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[58].create_time"
    assert result.volumes[58].account_id == 1, "Died on +.volumes[58].account_id"
    assert result.volumes[57].status == """active""", "Died on +.volumes[57].status"
    assert result.volumes[57].enable512e == False, "Died on +.volumes[57].enable512e"
    assert result.volumes[57].qos.burst_iops == 100, "Died on +.volumes[57].qos.burst_iops"
    assert result.volumes[57].qos.burst_time == 60, "Died on +.volumes[57].qos.burst_time"
    assert result.volumes[57].qos.min_iops == 100, "Died on +.volumes[57].qos.min_iops"
    assert result.volumes[57].qos.max_iops == 100, "Died on +.volumes[57].qos.max_iops"
    assert result.volumes[57].name == """suite-stage-2-QED--58""", "Died on +.volumes[57].name"
    assert result.volumes[57].scsi_naadevice_id == """6f47acc10000000035796d360000003a""", "Died on +.volumes[57].scsi_naadevice_id"
    assert result.volumes[57].total_size == 268435456000, "Died on +.volumes[57].total_size"
    assert result.volumes[57].block_size == 4096, "Died on +.volumes[57].block_size"
    assert result.volumes[57].scsi_euidevice_id == """35796d360000003af47acc0100000000""", "Died on +.volumes[57].scsi_euidevice_id"
    assert result.volumes[57].volume_id == 58, "Died on +.volumes[57].volume_id"
    assert result.volumes[57].access == """readWrite""", "Died on +.volumes[57].access"
    assert result.volumes[57].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--58.58""", "Died on +.volumes[57].iqn"
    assert result.volumes[57].slice_count == 1, "Died on +.volumes[57].slice_count"
    assert type(result.volumes[57].attributes) is dict, "Died on .volumes[57].attributes"
    assert result.volumes[57].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[57].create_time"
    assert result.volumes[57].account_id == 1, "Died on +.volumes[57].account_id"
    assert result.volumes[56].status == """active""", "Died on +.volumes[56].status"
    assert result.volumes[56].enable512e == False, "Died on +.volumes[56].enable512e"
    assert result.volumes[56].qos.burst_iops == 100, "Died on +.volumes[56].qos.burst_iops"
    assert result.volumes[56].qos.burst_time == 60, "Died on +.volumes[56].qos.burst_time"
    assert result.volumes[56].qos.min_iops == 100, "Died on +.volumes[56].qos.min_iops"
    assert result.volumes[56].qos.max_iops == 100, "Died on +.volumes[56].qos.max_iops"
    assert result.volumes[56].name == """suite-stage-2-QED--57""", "Died on +.volumes[56].name"
    assert result.volumes[56].scsi_naadevice_id == """6f47acc10000000035796d3600000039""", "Died on +.volumes[56].scsi_naadevice_id"
    assert result.volumes[56].total_size == 268435456000, "Died on +.volumes[56].total_size"
    assert result.volumes[56].block_size == 4096, "Died on +.volumes[56].block_size"
    assert result.volumes[56].scsi_euidevice_id == """35796d3600000039f47acc0100000000""", "Died on +.volumes[56].scsi_euidevice_id"
    assert result.volumes[56].volume_id == 57, "Died on +.volumes[56].volume_id"
    assert result.volumes[56].access == """readWrite""", "Died on +.volumes[56].access"
    assert result.volumes[56].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--57.57""", "Died on +.volumes[56].iqn"
    assert result.volumes[56].slice_count == 1, "Died on +.volumes[56].slice_count"
    assert type(result.volumes[56].attributes) is dict, "Died on .volumes[56].attributes"
    assert result.volumes[56].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[56].create_time"
    assert result.volumes[56].account_id == 1, "Died on +.volumes[56].account_id"
    assert result.volumes[55].status == """active""", "Died on +.volumes[55].status"
    assert result.volumes[55].enable512e == False, "Died on +.volumes[55].enable512e"
    assert result.volumes[55].qos.burst_iops == 100, "Died on +.volumes[55].qos.burst_iops"
    assert result.volumes[55].qos.burst_time == 60, "Died on +.volumes[55].qos.burst_time"
    assert result.volumes[55].qos.min_iops == 100, "Died on +.volumes[55].qos.min_iops"
    assert result.volumes[55].qos.max_iops == 100, "Died on +.volumes[55].qos.max_iops"
    assert result.volumes[55].name == """suite-stage-2-QED--56""", "Died on +.volumes[55].name"
    assert result.volumes[55].scsi_naadevice_id == """6f47acc10000000035796d3600000038""", "Died on +.volumes[55].scsi_naadevice_id"
    assert result.volumes[55].total_size == 268435456000, "Died on +.volumes[55].total_size"
    assert result.volumes[55].block_size == 4096, "Died on +.volumes[55].block_size"
    assert result.volumes[55].scsi_euidevice_id == """35796d3600000038f47acc0100000000""", "Died on +.volumes[55].scsi_euidevice_id"
    assert result.volumes[55].volume_id == 56, "Died on +.volumes[55].volume_id"
    assert result.volumes[55].access == """readWrite""", "Died on +.volumes[55].access"
    assert result.volumes[55].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--56.56""", "Died on +.volumes[55].iqn"
    assert result.volumes[55].slice_count == 1, "Died on +.volumes[55].slice_count"
    assert type(result.volumes[55].attributes) is dict, "Died on .volumes[55].attributes"
    assert result.volumes[55].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[55].create_time"
    assert result.volumes[55].account_id == 1, "Died on +.volumes[55].account_id"
    assert result.volumes[54].status == """active""", "Died on +.volumes[54].status"
    assert result.volumes[54].enable512e == False, "Died on +.volumes[54].enable512e"
    assert result.volumes[54].qos.burst_iops == 100, "Died on +.volumes[54].qos.burst_iops"
    assert result.volumes[54].qos.burst_time == 60, "Died on +.volumes[54].qos.burst_time"
    assert result.volumes[54].qos.min_iops == 100, "Died on +.volumes[54].qos.min_iops"
    assert result.volumes[54].qos.max_iops == 100, "Died on +.volumes[54].qos.max_iops"
    assert result.volumes[54].name == """suite-stage-2-QED--55""", "Died on +.volumes[54].name"
    assert result.volumes[54].scsi_naadevice_id == """6f47acc10000000035796d3600000037""", "Died on +.volumes[54].scsi_naadevice_id"
    assert result.volumes[54].total_size == 268435456000, "Died on +.volumes[54].total_size"
    assert result.volumes[54].block_size == 4096, "Died on +.volumes[54].block_size"
    assert result.volumes[54].scsi_euidevice_id == """35796d3600000037f47acc0100000000""", "Died on +.volumes[54].scsi_euidevice_id"
    assert result.volumes[54].volume_id == 55, "Died on +.volumes[54].volume_id"
    assert result.volumes[54].access == """readWrite""", "Died on +.volumes[54].access"
    assert result.volumes[54].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--55.55""", "Died on +.volumes[54].iqn"
    assert result.volumes[54].slice_count == 1, "Died on +.volumes[54].slice_count"
    assert type(result.volumes[54].attributes) is dict, "Died on .volumes[54].attributes"
    assert result.volumes[54].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[54].create_time"
    assert result.volumes[54].account_id == 1, "Died on +.volumes[54].account_id"
    assert result.volumes[53].status == """active""", "Died on +.volumes[53].status"
    assert result.volumes[53].enable512e == False, "Died on +.volumes[53].enable512e"
    assert result.volumes[53].qos.burst_iops == 100, "Died on +.volumes[53].qos.burst_iops"
    assert result.volumes[53].qos.burst_time == 60, "Died on +.volumes[53].qos.burst_time"
    assert result.volumes[53].qos.min_iops == 100, "Died on +.volumes[53].qos.min_iops"
    assert result.volumes[53].qos.max_iops == 100, "Died on +.volumes[53].qos.max_iops"
    assert result.volumes[53].name == """suite-stage-2-QED--54""", "Died on +.volumes[53].name"
    assert result.volumes[53].scsi_naadevice_id == """6f47acc10000000035796d3600000036""", "Died on +.volumes[53].scsi_naadevice_id"
    assert result.volumes[53].total_size == 268435456000, "Died on +.volumes[53].total_size"
    assert result.volumes[53].block_size == 4096, "Died on +.volumes[53].block_size"
    assert result.volumes[53].scsi_euidevice_id == """35796d3600000036f47acc0100000000""", "Died on +.volumes[53].scsi_euidevice_id"
    assert result.volumes[53].volume_id == 54, "Died on +.volumes[53].volume_id"
    assert result.volumes[53].access == """readWrite""", "Died on +.volumes[53].access"
    assert result.volumes[53].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--54.54""", "Died on +.volumes[53].iqn"
    assert result.volumes[53].slice_count == 1, "Died on +.volumes[53].slice_count"
    assert type(result.volumes[53].attributes) is dict, "Died on .volumes[53].attributes"
    assert result.volumes[53].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[53].create_time"
    assert result.volumes[53].account_id == 1, "Died on +.volumes[53].account_id"
    assert result.volumes[52].status == """active""", "Died on +.volumes[52].status"
    assert result.volumes[52].enable512e == False, "Died on +.volumes[52].enable512e"
    assert result.volumes[52].qos.burst_iops == 100, "Died on +.volumes[52].qos.burst_iops"
    assert result.volumes[52].qos.burst_time == 60, "Died on +.volumes[52].qos.burst_time"
    assert result.volumes[52].qos.min_iops == 100, "Died on +.volumes[52].qos.min_iops"
    assert result.volumes[52].qos.max_iops == 100, "Died on +.volumes[52].qos.max_iops"
    assert result.volumes[52].name == """suite-stage-2-QED--53""", "Died on +.volumes[52].name"
    assert result.volumes[52].scsi_naadevice_id == """6f47acc10000000035796d3600000035""", "Died on +.volumes[52].scsi_naadevice_id"
    assert result.volumes[52].total_size == 268435456000, "Died on +.volumes[52].total_size"
    assert result.volumes[52].block_size == 4096, "Died on +.volumes[52].block_size"
    assert result.volumes[52].scsi_euidevice_id == """35796d3600000035f47acc0100000000""", "Died on +.volumes[52].scsi_euidevice_id"
    assert result.volumes[52].volume_id == 53, "Died on +.volumes[52].volume_id"
    assert result.volumes[52].access == """readWrite""", "Died on +.volumes[52].access"
    assert result.volumes[52].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--53.53""", "Died on +.volumes[52].iqn"
    assert result.volumes[52].slice_count == 1, "Died on +.volumes[52].slice_count"
    assert type(result.volumes[52].attributes) is dict, "Died on .volumes[52].attributes"
    assert result.volumes[52].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[52].create_time"
    assert result.volumes[52].account_id == 1, "Died on +.volumes[52].account_id"
    assert result.volumes[51].status == """active""", "Died on +.volumes[51].status"
    assert result.volumes[51].enable512e == False, "Died on +.volumes[51].enable512e"
    assert result.volumes[51].qos.burst_iops == 100, "Died on +.volumes[51].qos.burst_iops"
    assert result.volumes[51].qos.burst_time == 60, "Died on +.volumes[51].qos.burst_time"
    assert result.volumes[51].qos.min_iops == 100, "Died on +.volumes[51].qos.min_iops"
    assert result.volumes[51].qos.max_iops == 100, "Died on +.volumes[51].qos.max_iops"
    assert result.volumes[51].name == """suite-stage-2-QED--52""", "Died on +.volumes[51].name"
    assert result.volumes[51].scsi_naadevice_id == """6f47acc10000000035796d3600000034""", "Died on +.volumes[51].scsi_naadevice_id"
    assert result.volumes[51].total_size == 268435456000, "Died on +.volumes[51].total_size"
    assert result.volumes[51].block_size == 4096, "Died on +.volumes[51].block_size"
    assert result.volumes[51].scsi_euidevice_id == """35796d3600000034f47acc0100000000""", "Died on +.volumes[51].scsi_euidevice_id"
    assert result.volumes[51].volume_id == 52, "Died on +.volumes[51].volume_id"
    assert result.volumes[51].access == """readWrite""", "Died on +.volumes[51].access"
    assert result.volumes[51].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--52.52""", "Died on +.volumes[51].iqn"
    assert result.volumes[51].slice_count == 1, "Died on +.volumes[51].slice_count"
    assert type(result.volumes[51].attributes) is dict, "Died on .volumes[51].attributes"
    assert result.volumes[51].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[51].create_time"
    assert result.volumes[51].account_id == 1, "Died on +.volumes[51].account_id"
    assert result.volumes[50].status == """active""", "Died on +.volumes[50].status"
    assert result.volumes[50].enable512e == False, "Died on +.volumes[50].enable512e"
    assert result.volumes[50].qos.burst_iops == 100, "Died on +.volumes[50].qos.burst_iops"
    assert result.volumes[50].qos.burst_time == 60, "Died on +.volumes[50].qos.burst_time"
    assert result.volumes[50].qos.min_iops == 100, "Died on +.volumes[50].qos.min_iops"
    assert result.volumes[50].qos.max_iops == 100, "Died on +.volumes[50].qos.max_iops"
    assert result.volumes[50].name == """suite-stage-2-QED--51""", "Died on +.volumes[50].name"
    assert result.volumes[50].scsi_naadevice_id == """6f47acc10000000035796d3600000033""", "Died on +.volumes[50].scsi_naadevice_id"
    assert result.volumes[50].total_size == 268435456000, "Died on +.volumes[50].total_size"
    assert result.volumes[50].block_size == 4096, "Died on +.volumes[50].block_size"
    assert result.volumes[50].scsi_euidevice_id == """35796d3600000033f47acc0100000000""", "Died on +.volumes[50].scsi_euidevice_id"
    assert result.volumes[50].volume_id == 51, "Died on +.volumes[50].volume_id"
    assert result.volumes[50].access == """readWrite""", "Died on +.volumes[50].access"
    assert result.volumes[50].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--51.51""", "Died on +.volumes[50].iqn"
    assert result.volumes[50].slice_count == 1, "Died on +.volumes[50].slice_count"
    assert type(result.volumes[50].attributes) is dict, "Died on .volumes[50].attributes"
    assert result.volumes[50].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[50].create_time"
    assert result.volumes[50].account_id == 1, "Died on +.volumes[50].account_id"
    assert result.volumes[49].status == """active""", "Died on +.volumes[49].status"
    assert result.volumes[49].enable512e == False, "Died on +.volumes[49].enable512e"
    assert result.volumes[49].qos.burst_iops == 100, "Died on +.volumes[49].qos.burst_iops"
    assert result.volumes[49].qos.burst_time == 60, "Died on +.volumes[49].qos.burst_time"
    assert result.volumes[49].qos.min_iops == 100, "Died on +.volumes[49].qos.min_iops"
    assert result.volumes[49].qos.max_iops == 100, "Died on +.volumes[49].qos.max_iops"
    assert result.volumes[49].name == """suite-stage-2-QED--50""", "Died on +.volumes[49].name"
    assert result.volumes[49].scsi_naadevice_id == """6f47acc10000000035796d3600000032""", "Died on +.volumes[49].scsi_naadevice_id"
    assert result.volumes[49].total_size == 268435456000, "Died on +.volumes[49].total_size"
    assert result.volumes[49].block_size == 4096, "Died on +.volumes[49].block_size"
    assert result.volumes[49].scsi_euidevice_id == """35796d3600000032f47acc0100000000""", "Died on +.volumes[49].scsi_euidevice_id"
    assert result.volumes[49].volume_id == 50, "Died on +.volumes[49].volume_id"
    assert result.volumes[49].access == """readWrite""", "Died on +.volumes[49].access"
    assert result.volumes[49].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--50.50""", "Died on +.volumes[49].iqn"
    assert result.volumes[49].slice_count == 1, "Died on +.volumes[49].slice_count"
    assert type(result.volumes[49].attributes) is dict, "Died on .volumes[49].attributes"
    assert result.volumes[49].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[49].create_time"
    assert result.volumes[49].account_id == 1, "Died on +.volumes[49].account_id"
    assert result.volumes[48].status == """active""", "Died on +.volumes[48].status"
    assert result.volumes[48].enable512e == False, "Died on +.volumes[48].enable512e"
    assert result.volumes[48].qos.burst_iops == 100, "Died on +.volumes[48].qos.burst_iops"
    assert result.volumes[48].qos.burst_time == 60, "Died on +.volumes[48].qos.burst_time"
    assert result.volumes[48].qos.min_iops == 100, "Died on +.volumes[48].qos.min_iops"
    assert result.volumes[48].qos.max_iops == 100, "Died on +.volumes[48].qos.max_iops"
    assert result.volumes[48].name == """suite-stage-2-QED--49""", "Died on +.volumes[48].name"
    assert result.volumes[48].scsi_naadevice_id == """6f47acc10000000035796d3600000031""", "Died on +.volumes[48].scsi_naadevice_id"
    assert result.volumes[48].total_size == 268435456000, "Died on +.volumes[48].total_size"
    assert result.volumes[48].block_size == 4096, "Died on +.volumes[48].block_size"
    assert result.volumes[48].scsi_euidevice_id == """35796d3600000031f47acc0100000000""", "Died on +.volumes[48].scsi_euidevice_id"
    assert result.volumes[48].volume_id == 49, "Died on +.volumes[48].volume_id"
    assert result.volumes[48].access == """readWrite""", "Died on +.volumes[48].access"
    assert result.volumes[48].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--49.49""", "Died on +.volumes[48].iqn"
    assert result.volumes[48].slice_count == 1, "Died on +.volumes[48].slice_count"
    assert type(result.volumes[48].attributes) is dict, "Died on .volumes[48].attributes"
    assert result.volumes[48].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[48].create_time"
    assert result.volumes[48].account_id == 1, "Died on +.volumes[48].account_id"
    assert result.volumes[47].status == """active""", "Died on +.volumes[47].status"
    assert result.volumes[47].enable512e == False, "Died on +.volumes[47].enable512e"
    assert result.volumes[47].qos.burst_iops == 100, "Died on +.volumes[47].qos.burst_iops"
    assert result.volumes[47].qos.burst_time == 60, "Died on +.volumes[47].qos.burst_time"
    assert result.volumes[47].qos.min_iops == 100, "Died on +.volumes[47].qos.min_iops"
    assert result.volumes[47].qos.max_iops == 100, "Died on +.volumes[47].qos.max_iops"
    assert result.volumes[47].name == """suite-stage-2-QED--48""", "Died on +.volumes[47].name"
    assert result.volumes[47].scsi_naadevice_id == """6f47acc10000000035796d3600000030""", "Died on +.volumes[47].scsi_naadevice_id"
    assert result.volumes[47].total_size == 268435456000, "Died on +.volumes[47].total_size"
    assert result.volumes[47].block_size == 4096, "Died on +.volumes[47].block_size"
    assert result.volumes[47].scsi_euidevice_id == """35796d3600000030f47acc0100000000""", "Died on +.volumes[47].scsi_euidevice_id"
    assert result.volumes[47].volume_id == 48, "Died on +.volumes[47].volume_id"
    assert result.volumes[47].access == """readWrite""", "Died on +.volumes[47].access"
    assert result.volumes[47].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--48.48""", "Died on +.volumes[47].iqn"
    assert result.volumes[47].slice_count == 1, "Died on +.volumes[47].slice_count"
    assert type(result.volumes[47].attributes) is dict, "Died on .volumes[47].attributes"
    assert result.volumes[47].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[47].create_time"
    assert result.volumes[47].account_id == 1, "Died on +.volumes[47].account_id"
    assert result.volumes[46].status == """active""", "Died on +.volumes[46].status"
    assert result.volumes[46].enable512e == False, "Died on +.volumes[46].enable512e"
    assert result.volumes[46].qos.burst_iops == 100, "Died on +.volumes[46].qos.burst_iops"
    assert result.volumes[46].qos.burst_time == 60, "Died on +.volumes[46].qos.burst_time"
    assert result.volumes[46].qos.min_iops == 100, "Died on +.volumes[46].qos.min_iops"
    assert result.volumes[46].qos.max_iops == 100, "Died on +.volumes[46].qos.max_iops"
    assert result.volumes[46].name == """suite-stage-2-QED--47""", "Died on +.volumes[46].name"
    assert result.volumes[46].scsi_naadevice_id == """6f47acc10000000035796d360000002f""", "Died on +.volumes[46].scsi_naadevice_id"
    assert result.volumes[46].total_size == 268435456000, "Died on +.volumes[46].total_size"
    assert result.volumes[46].block_size == 4096, "Died on +.volumes[46].block_size"
    assert result.volumes[46].scsi_euidevice_id == """35796d360000002ff47acc0100000000""", "Died on +.volumes[46].scsi_euidevice_id"
    assert result.volumes[46].volume_id == 47, "Died on +.volumes[46].volume_id"
    assert result.volumes[46].access == """readWrite""", "Died on +.volumes[46].access"
    assert result.volumes[46].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--47.47""", "Died on +.volumes[46].iqn"
    assert result.volumes[46].slice_count == 1, "Died on +.volumes[46].slice_count"
    assert type(result.volumes[46].attributes) is dict, "Died on .volumes[46].attributes"
    assert result.volumes[46].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[46].create_time"
    assert result.volumes[46].account_id == 1, "Died on +.volumes[46].account_id"
    assert result.volumes[45].status == """active""", "Died on +.volumes[45].status"
    assert result.volumes[45].enable512e == False, "Died on +.volumes[45].enable512e"
    assert result.volumes[45].qos.burst_iops == 100, "Died on +.volumes[45].qos.burst_iops"
    assert result.volumes[45].qos.burst_time == 60, "Died on +.volumes[45].qos.burst_time"
    assert result.volumes[45].qos.min_iops == 100, "Died on +.volumes[45].qos.min_iops"
    assert result.volumes[45].qos.max_iops == 100, "Died on +.volumes[45].qos.max_iops"
    assert result.volumes[45].name == """suite-stage-2-QED--46""", "Died on +.volumes[45].name"
    assert result.volumes[45].scsi_naadevice_id == """6f47acc10000000035796d360000002e""", "Died on +.volumes[45].scsi_naadevice_id"
    assert result.volumes[45].total_size == 268435456000, "Died on +.volumes[45].total_size"
    assert result.volumes[45].block_size == 4096, "Died on +.volumes[45].block_size"
    assert result.volumes[45].scsi_euidevice_id == """35796d360000002ef47acc0100000000""", "Died on +.volumes[45].scsi_euidevice_id"
    assert result.volumes[45].volume_id == 46, "Died on +.volumes[45].volume_id"
    assert result.volumes[45].access == """readWrite""", "Died on +.volumes[45].access"
    assert result.volumes[45].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--46.46""", "Died on +.volumes[45].iqn"
    assert result.volumes[45].slice_count == 1, "Died on +.volumes[45].slice_count"
    assert type(result.volumes[45].attributes) is dict, "Died on .volumes[45].attributes"
    assert result.volumes[45].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[45].create_time"
    assert result.volumes[45].account_id == 1, "Died on +.volumes[45].account_id"
    assert result.volumes[44].status == """active""", "Died on +.volumes[44].status"
    assert result.volumes[44].enable512e == False, "Died on +.volumes[44].enable512e"
    assert result.volumes[44].qos.burst_iops == 100, "Died on +.volumes[44].qos.burst_iops"
    assert result.volumes[44].qos.burst_time == 60, "Died on +.volumes[44].qos.burst_time"
    assert result.volumes[44].qos.min_iops == 100, "Died on +.volumes[44].qos.min_iops"
    assert result.volumes[44].qos.max_iops == 100, "Died on +.volumes[44].qos.max_iops"
    assert result.volumes[44].name == """suite-stage-2-QED--45""", "Died on +.volumes[44].name"
    assert result.volumes[44].scsi_naadevice_id == """6f47acc10000000035796d360000002d""", "Died on +.volumes[44].scsi_naadevice_id"
    assert result.volumes[44].total_size == 268435456000, "Died on +.volumes[44].total_size"
    assert result.volumes[44].block_size == 4096, "Died on +.volumes[44].block_size"
    assert result.volumes[44].scsi_euidevice_id == """35796d360000002df47acc0100000000""", "Died on +.volumes[44].scsi_euidevice_id"
    assert result.volumes[44].volume_id == 45, "Died on +.volumes[44].volume_id"
    assert result.volumes[44].access == """readWrite""", "Died on +.volumes[44].access"
    assert result.volumes[44].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--45.45""", "Died on +.volumes[44].iqn"
    assert result.volumes[44].slice_count == 1, "Died on +.volumes[44].slice_count"
    assert type(result.volumes[44].attributes) is dict, "Died on .volumes[44].attributes"
    assert result.volumes[44].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[44].create_time"
    assert result.volumes[44].account_id == 1, "Died on +.volumes[44].account_id"
    assert result.volumes[43].status == """active""", "Died on +.volumes[43].status"
    assert result.volumes[43].enable512e == False, "Died on +.volumes[43].enable512e"
    assert result.volumes[43].qos.burst_iops == 100, "Died on +.volumes[43].qos.burst_iops"
    assert result.volumes[43].qos.burst_time == 60, "Died on +.volumes[43].qos.burst_time"
    assert result.volumes[43].qos.min_iops == 100, "Died on +.volumes[43].qos.min_iops"
    assert result.volumes[43].qos.max_iops == 100, "Died on +.volumes[43].qos.max_iops"
    assert result.volumes[43].name == """suite-stage-2-QED--44""", "Died on +.volumes[43].name"
    assert result.volumes[43].scsi_naadevice_id == """6f47acc10000000035796d360000002c""", "Died on +.volumes[43].scsi_naadevice_id"
    assert result.volumes[43].total_size == 268435456000, "Died on +.volumes[43].total_size"
    assert result.volumes[43].block_size == 4096, "Died on +.volumes[43].block_size"
    assert result.volumes[43].scsi_euidevice_id == """35796d360000002cf47acc0100000000""", "Died on +.volumes[43].scsi_euidevice_id"
    assert result.volumes[43].volume_id == 44, "Died on +.volumes[43].volume_id"
    assert result.volumes[43].access == """readWrite""", "Died on +.volumes[43].access"
    assert result.volumes[43].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--44.44""", "Died on +.volumes[43].iqn"
    assert result.volumes[43].slice_count == 1, "Died on +.volumes[43].slice_count"
    assert type(result.volumes[43].attributes) is dict, "Died on .volumes[43].attributes"
    assert result.volumes[43].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[43].create_time"
    assert result.volumes[43].account_id == 1, "Died on +.volumes[43].account_id"
    assert result.volumes[42].status == """active""", "Died on +.volumes[42].status"
    assert result.volumes[42].enable512e == False, "Died on +.volumes[42].enable512e"
    assert result.volumes[42].qos.burst_iops == 100, "Died on +.volumes[42].qos.burst_iops"
    assert result.volumes[42].qos.burst_time == 60, "Died on +.volumes[42].qos.burst_time"
    assert result.volumes[42].qos.min_iops == 100, "Died on +.volumes[42].qos.min_iops"
    assert result.volumes[42].qos.max_iops == 100, "Died on +.volumes[42].qos.max_iops"
    assert result.volumes[42].name == """suite-stage-2-QED--43""", "Died on +.volumes[42].name"
    assert result.volumes[42].scsi_naadevice_id == """6f47acc10000000035796d360000002b""", "Died on +.volumes[42].scsi_naadevice_id"
    assert result.volumes[42].total_size == 268435456000, "Died on +.volumes[42].total_size"
    assert result.volumes[42].block_size == 4096, "Died on +.volumes[42].block_size"
    assert result.volumes[42].scsi_euidevice_id == """35796d360000002bf47acc0100000000""", "Died on +.volumes[42].scsi_euidevice_id"
    assert result.volumes[42].volume_id == 43, "Died on +.volumes[42].volume_id"
    assert result.volumes[42].access == """readWrite""", "Died on +.volumes[42].access"
    assert result.volumes[42].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--43.43""", "Died on +.volumes[42].iqn"
    assert result.volumes[42].slice_count == 1, "Died on +.volumes[42].slice_count"
    assert type(result.volumes[42].attributes) is dict, "Died on .volumes[42].attributes"
    assert result.volumes[42].create_time == """2017-01-17T17:13:50Z""", "Died on +.volumes[42].create_time"
    assert result.volumes[42].account_id == 1, "Died on +.volumes[42].account_id"
    assert result.volumes[41].status == """active""", "Died on +.volumes[41].status"
    assert result.volumes[41].enable512e == False, "Died on +.volumes[41].enable512e"
    assert result.volumes[41].qos.burst_iops == 100, "Died on +.volumes[41].qos.burst_iops"
    assert result.volumes[41].qos.burst_time == 60, "Died on +.volumes[41].qos.burst_time"
    assert result.volumes[41].qos.min_iops == 100, "Died on +.volumes[41].qos.min_iops"
    assert result.volumes[41].qos.max_iops == 100, "Died on +.volumes[41].qos.max_iops"
    assert result.volumes[41].name == """suite-stage-2-QED--42""", "Died on +.volumes[41].name"
    assert result.volumes[41].scsi_naadevice_id == """6f47acc10000000035796d360000002a""", "Died on +.volumes[41].scsi_naadevice_id"
    assert result.volumes[41].total_size == 268435456000, "Died on +.volumes[41].total_size"
    assert result.volumes[41].block_size == 4096, "Died on +.volumes[41].block_size"
    assert result.volumes[41].scsi_euidevice_id == """35796d360000002af47acc0100000000""", "Died on +.volumes[41].scsi_euidevice_id"
    assert result.volumes[41].volume_id == 42, "Died on +.volumes[41].volume_id"
    assert result.volumes[41].access == """readWrite""", "Died on +.volumes[41].access"
    assert result.volumes[41].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--42.42""", "Died on +.volumes[41].iqn"
    assert result.volumes[41].slice_count == 1, "Died on +.volumes[41].slice_count"
    assert type(result.volumes[41].attributes) is dict, "Died on .volumes[41].attributes"
    assert result.volumes[41].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[41].create_time"
    assert result.volumes[41].account_id == 1, "Died on +.volumes[41].account_id"
    assert result.volumes[40].status == """active""", "Died on +.volumes[40].status"
    assert result.volumes[40].enable512e == False, "Died on +.volumes[40].enable512e"
    assert result.volumes[40].qos.burst_iops == 100, "Died on +.volumes[40].qos.burst_iops"
    assert result.volumes[40].qos.burst_time == 60, "Died on +.volumes[40].qos.burst_time"
    assert result.volumes[40].qos.min_iops == 100, "Died on +.volumes[40].qos.min_iops"
    assert result.volumes[40].qos.max_iops == 100, "Died on +.volumes[40].qos.max_iops"
    assert result.volumes[40].name == """suite-stage-2-QED--41""", "Died on +.volumes[40].name"
    assert result.volumes[40].scsi_naadevice_id == """6f47acc10000000035796d3600000029""", "Died on +.volumes[40].scsi_naadevice_id"
    assert result.volumes[40].total_size == 268435456000, "Died on +.volumes[40].total_size"
    assert result.volumes[40].block_size == 4096, "Died on +.volumes[40].block_size"
    assert result.volumes[40].scsi_euidevice_id == """35796d3600000029f47acc0100000000""", "Died on +.volumes[40].scsi_euidevice_id"
    assert result.volumes[40].volume_id == 41, "Died on +.volumes[40].volume_id"
    assert result.volumes[40].access == """readWrite""", "Died on +.volumes[40].access"
    assert result.volumes[40].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--41.41""", "Died on +.volumes[40].iqn"
    assert result.volumes[40].slice_count == 1, "Died on +.volumes[40].slice_count"
    assert type(result.volumes[40].attributes) is dict, "Died on .volumes[40].attributes"
    assert result.volumes[40].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[40].create_time"
    assert result.volumes[40].account_id == 1, "Died on +.volumes[40].account_id"
    assert result.volumes[39].status == """active""", "Died on +.volumes[39].status"
    assert result.volumes[39].enable512e == False, "Died on +.volumes[39].enable512e"
    assert result.volumes[39].qos.burst_iops == 100, "Died on +.volumes[39].qos.burst_iops"
    assert result.volumes[39].qos.burst_time == 60, "Died on +.volumes[39].qos.burst_time"
    assert result.volumes[39].qos.min_iops == 100, "Died on +.volumes[39].qos.min_iops"
    assert result.volumes[39].qos.max_iops == 100, "Died on +.volumes[39].qos.max_iops"
    assert result.volumes[39].name == """suite-stage-2-QED--40""", "Died on +.volumes[39].name"
    assert result.volumes[39].scsi_naadevice_id == """6f47acc10000000035796d3600000028""", "Died on +.volumes[39].scsi_naadevice_id"
    assert result.volumes[39].total_size == 268435456000, "Died on +.volumes[39].total_size"
    assert result.volumes[39].block_size == 4096, "Died on +.volumes[39].block_size"
    assert result.volumes[39].scsi_euidevice_id == """35796d3600000028f47acc0100000000""", "Died on +.volumes[39].scsi_euidevice_id"
    assert result.volumes[39].volume_id == 40, "Died on +.volumes[39].volume_id"
    assert result.volumes[39].access == """readWrite""", "Died on +.volumes[39].access"
    assert result.volumes[39].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--40.40""", "Died on +.volumes[39].iqn"
    assert result.volumes[39].slice_count == 1, "Died on +.volumes[39].slice_count"
    assert type(result.volumes[39].attributes) is dict, "Died on .volumes[39].attributes"
    assert result.volumes[39].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[39].create_time"
    assert result.volumes[39].account_id == 1, "Died on +.volumes[39].account_id"
    assert result.volumes[38].status == """active""", "Died on +.volumes[38].status"
    assert result.volumes[38].enable512e == False, "Died on +.volumes[38].enable512e"
    assert result.volumes[38].qos.burst_iops == 100, "Died on +.volumes[38].qos.burst_iops"
    assert result.volumes[38].qos.burst_time == 60, "Died on +.volumes[38].qos.burst_time"
    assert result.volumes[38].qos.min_iops == 100, "Died on +.volumes[38].qos.min_iops"
    assert result.volumes[38].qos.max_iops == 100, "Died on +.volumes[38].qos.max_iops"
    assert result.volumes[38].name == """suite-stage-2-QED--39""", "Died on +.volumes[38].name"
    assert result.volumes[38].scsi_naadevice_id == """6f47acc10000000035796d3600000027""", "Died on +.volumes[38].scsi_naadevice_id"
    assert result.volumes[38].total_size == 268435456000, "Died on +.volumes[38].total_size"
    assert result.volumes[38].block_size == 4096, "Died on +.volumes[38].block_size"
    assert result.volumes[38].scsi_euidevice_id == """35796d3600000027f47acc0100000000""", "Died on +.volumes[38].scsi_euidevice_id"
    assert result.volumes[38].volume_id == 39, "Died on +.volumes[38].volume_id"
    assert result.volumes[38].access == """readWrite""", "Died on +.volumes[38].access"
    assert result.volumes[38].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--39.39""", "Died on +.volumes[38].iqn"
    assert result.volumes[38].slice_count == 1, "Died on +.volumes[38].slice_count"
    assert type(result.volumes[38].attributes) is dict, "Died on .volumes[38].attributes"
    assert result.volumes[38].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[38].create_time"
    assert result.volumes[38].account_id == 1, "Died on +.volumes[38].account_id"
    assert result.volumes[37].status == """active""", "Died on +.volumes[37].status"
    assert result.volumes[37].enable512e == False, "Died on +.volumes[37].enable512e"
    assert result.volumes[37].qos.burst_iops == 100, "Died on +.volumes[37].qos.burst_iops"
    assert result.volumes[37].qos.burst_time == 60, "Died on +.volumes[37].qos.burst_time"
    assert result.volumes[37].qos.min_iops == 100, "Died on +.volumes[37].qos.min_iops"
    assert result.volumes[37].qos.max_iops == 100, "Died on +.volumes[37].qos.max_iops"
    assert result.volumes[37].name == """suite-stage-2-QED--38""", "Died on +.volumes[37].name"
    assert result.volumes[37].scsi_naadevice_id == """6f47acc10000000035796d3600000026""", "Died on +.volumes[37].scsi_naadevice_id"
    assert result.volumes[37].total_size == 268435456000, "Died on +.volumes[37].total_size"
    assert result.volumes[37].block_size == 4096, "Died on +.volumes[37].block_size"
    assert result.volumes[37].scsi_euidevice_id == """35796d3600000026f47acc0100000000""", "Died on +.volumes[37].scsi_euidevice_id"
    assert result.volumes[37].volume_id == 38, "Died on +.volumes[37].volume_id"
    assert result.volumes[37].access == """readWrite""", "Died on +.volumes[37].access"
    assert result.volumes[37].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--38.38""", "Died on +.volumes[37].iqn"
    assert result.volumes[37].slice_count == 1, "Died on +.volumes[37].slice_count"
    assert type(result.volumes[37].attributes) is dict, "Died on .volumes[37].attributes"
    assert result.volumes[37].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[37].create_time"
    assert result.volumes[37].account_id == 1, "Died on +.volumes[37].account_id"
    assert result.volumes[36].status == """active""", "Died on +.volumes[36].status"
    assert result.volumes[36].enable512e == False, "Died on +.volumes[36].enable512e"
    assert result.volumes[36].qos.burst_iops == 100, "Died on +.volumes[36].qos.burst_iops"
    assert result.volumes[36].qos.burst_time == 60, "Died on +.volumes[36].qos.burst_time"
    assert result.volumes[36].qos.min_iops == 100, "Died on +.volumes[36].qos.min_iops"
    assert result.volumes[36].qos.max_iops == 100, "Died on +.volumes[36].qos.max_iops"
    assert result.volumes[36].name == """suite-stage-2-QED--37""", "Died on +.volumes[36].name"
    assert result.volumes[36].scsi_naadevice_id == """6f47acc10000000035796d3600000025""", "Died on +.volumes[36].scsi_naadevice_id"
    assert result.volumes[36].total_size == 268435456000, "Died on +.volumes[36].total_size"
    assert result.volumes[36].block_size == 4096, "Died on +.volumes[36].block_size"
    assert result.volumes[36].scsi_euidevice_id == """35796d3600000025f47acc0100000000""", "Died on +.volumes[36].scsi_euidevice_id"
    assert result.volumes[36].volume_id == 37, "Died on +.volumes[36].volume_id"
    assert result.volumes[36].access == """readWrite""", "Died on +.volumes[36].access"
    assert result.volumes[36].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--37.37""", "Died on +.volumes[36].iqn"
    assert result.volumes[36].slice_count == 1, "Died on +.volumes[36].slice_count"
    assert type(result.volumes[36].attributes) is dict, "Died on .volumes[36].attributes"
    assert result.volumes[36].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[36].create_time"
    assert result.volumes[36].account_id == 1, "Died on +.volumes[36].account_id"
    assert result.volumes[35].status == """active""", "Died on +.volumes[35].status"
    assert result.volumes[35].enable512e == False, "Died on +.volumes[35].enable512e"
    assert result.volumes[35].qos.burst_iops == 100, "Died on +.volumes[35].qos.burst_iops"
    assert result.volumes[35].qos.burst_time == 60, "Died on +.volumes[35].qos.burst_time"
    assert result.volumes[35].qos.min_iops == 100, "Died on +.volumes[35].qos.min_iops"
    assert result.volumes[35].qos.max_iops == 100, "Died on +.volumes[35].qos.max_iops"
    assert result.volumes[35].name == """suite-stage-2-QED--36""", "Died on +.volumes[35].name"
    assert result.volumes[35].scsi_naadevice_id == """6f47acc10000000035796d3600000024""", "Died on +.volumes[35].scsi_naadevice_id"
    assert result.volumes[35].total_size == 268435456000, "Died on +.volumes[35].total_size"
    assert result.volumes[35].block_size == 4096, "Died on +.volumes[35].block_size"
    assert result.volumes[35].scsi_euidevice_id == """35796d3600000024f47acc0100000000""", "Died on +.volumes[35].scsi_euidevice_id"
    assert result.volumes[35].volume_id == 36, "Died on +.volumes[35].volume_id"
    assert result.volumes[35].access == """readWrite""", "Died on +.volumes[35].access"
    assert result.volumes[35].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--36.36""", "Died on +.volumes[35].iqn"
    assert result.volumes[35].slice_count == 1, "Died on +.volumes[35].slice_count"
    assert type(result.volumes[35].attributes) is dict, "Died on .volumes[35].attributes"
    assert result.volumes[35].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[35].create_time"
    assert result.volumes[35].account_id == 1, "Died on +.volumes[35].account_id"
    assert result.volumes[34].status == """active""", "Died on +.volumes[34].status"
    assert result.volumes[34].enable512e == False, "Died on +.volumes[34].enable512e"
    assert result.volumes[34].qos.burst_iops == 100, "Died on +.volumes[34].qos.burst_iops"
    assert result.volumes[34].qos.burst_time == 60, "Died on +.volumes[34].qos.burst_time"
    assert result.volumes[34].qos.min_iops == 100, "Died on +.volumes[34].qos.min_iops"
    assert result.volumes[34].qos.max_iops == 100, "Died on +.volumes[34].qos.max_iops"
    assert result.volumes[34].name == """suite-stage-2-QED--35""", "Died on +.volumes[34].name"
    assert result.volumes[34].scsi_naadevice_id == """6f47acc10000000035796d3600000023""", "Died on +.volumes[34].scsi_naadevice_id"
    assert result.volumes[34].total_size == 268435456000, "Died on +.volumes[34].total_size"
    assert result.volumes[34].block_size == 4096, "Died on +.volumes[34].block_size"
    assert result.volumes[34].scsi_euidevice_id == """35796d3600000023f47acc0100000000""", "Died on +.volumes[34].scsi_euidevice_id"
    assert result.volumes[34].volume_id == 35, "Died on +.volumes[34].volume_id"
    assert result.volumes[34].access == """readWrite""", "Died on +.volumes[34].access"
    assert result.volumes[34].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--35.35""", "Died on +.volumes[34].iqn"
    assert result.volumes[34].slice_count == 1, "Died on +.volumes[34].slice_count"
    assert type(result.volumes[34].attributes) is dict, "Died on .volumes[34].attributes"
    assert result.volumes[34].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[34].create_time"
    assert result.volumes[34].account_id == 1, "Died on +.volumes[34].account_id"
    assert result.volumes[33].status == """active""", "Died on +.volumes[33].status"
    assert result.volumes[33].enable512e == False, "Died on +.volumes[33].enable512e"
    assert result.volumes[33].qos.burst_iops == 100, "Died on +.volumes[33].qos.burst_iops"
    assert result.volumes[33].qos.burst_time == 60, "Died on +.volumes[33].qos.burst_time"
    assert result.volumes[33].qos.min_iops == 100, "Died on +.volumes[33].qos.min_iops"
    assert result.volumes[33].qos.max_iops == 100, "Died on +.volumes[33].qos.max_iops"
    assert result.volumes[33].name == """suite-stage-2-QED--34""", "Died on +.volumes[33].name"
    assert result.volumes[33].scsi_naadevice_id == """6f47acc10000000035796d3600000022""", "Died on +.volumes[33].scsi_naadevice_id"
    assert result.volumes[33].total_size == 268435456000, "Died on +.volumes[33].total_size"
    assert result.volumes[33].block_size == 4096, "Died on +.volumes[33].block_size"
    assert result.volumes[33].scsi_euidevice_id == """35796d3600000022f47acc0100000000""", "Died on +.volumes[33].scsi_euidevice_id"
    assert result.volumes[33].volume_id == 34, "Died on +.volumes[33].volume_id"
    assert result.volumes[33].access == """readWrite""", "Died on +.volumes[33].access"
    assert result.volumes[33].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--34.34""", "Died on +.volumes[33].iqn"
    assert result.volumes[33].slice_count == 1, "Died on +.volumes[33].slice_count"
    assert type(result.volumes[33].attributes) is dict, "Died on .volumes[33].attributes"
    assert result.volumes[33].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[33].create_time"
    assert result.volumes[33].account_id == 1, "Died on +.volumes[33].account_id"
    assert result.volumes[32].status == """active""", "Died on +.volumes[32].status"
    assert result.volumes[32].enable512e == False, "Died on +.volumes[32].enable512e"
    assert result.volumes[32].qos.burst_iops == 100, "Died on +.volumes[32].qos.burst_iops"
    assert result.volumes[32].qos.burst_time == 60, "Died on +.volumes[32].qos.burst_time"
    assert result.volumes[32].qos.min_iops == 100, "Died on +.volumes[32].qos.min_iops"
    assert result.volumes[32].qos.max_iops == 100, "Died on +.volumes[32].qos.max_iops"
    assert result.volumes[32].name == """suite-stage-2-QED--33""", "Died on +.volumes[32].name"
    assert result.volumes[32].scsi_naadevice_id == """6f47acc10000000035796d3600000021""", "Died on +.volumes[32].scsi_naadevice_id"
    assert result.volumes[32].total_size == 268435456000, "Died on +.volumes[32].total_size"
    assert result.volumes[32].block_size == 4096, "Died on +.volumes[32].block_size"
    assert result.volumes[32].scsi_euidevice_id == """35796d3600000021f47acc0100000000""", "Died on +.volumes[32].scsi_euidevice_id"
    assert result.volumes[32].volume_id == 33, "Died on +.volumes[32].volume_id"
    assert result.volumes[32].access == """readWrite""", "Died on +.volumes[32].access"
    assert result.volumes[32].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--33.33""", "Died on +.volumes[32].iqn"
    assert result.volumes[32].slice_count == 1, "Died on +.volumes[32].slice_count"
    assert type(result.volumes[32].attributes) is dict, "Died on .volumes[32].attributes"
    assert result.volumes[32].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[32].create_time"
    assert result.volumes[32].account_id == 1, "Died on +.volumes[32].account_id"
    assert result.volumes[31].status == """active""", "Died on +.volumes[31].status"
    assert result.volumes[31].enable512e == False, "Died on +.volumes[31].enable512e"
    assert result.volumes[31].qos.burst_iops == 100, "Died on +.volumes[31].qos.burst_iops"
    assert result.volumes[31].qos.burst_time == 60, "Died on +.volumes[31].qos.burst_time"
    assert result.volumes[31].qos.min_iops == 100, "Died on +.volumes[31].qos.min_iops"
    assert result.volumes[31].qos.max_iops == 100, "Died on +.volumes[31].qos.max_iops"
    assert result.volumes[31].name == """suite-stage-2-QED--32""", "Died on +.volumes[31].name"
    assert result.volumes[31].scsi_naadevice_id == """6f47acc10000000035796d3600000020""", "Died on +.volumes[31].scsi_naadevice_id"
    assert result.volumes[31].total_size == 268435456000, "Died on +.volumes[31].total_size"
    assert result.volumes[31].block_size == 4096, "Died on +.volumes[31].block_size"
    assert result.volumes[31].scsi_euidevice_id == """35796d3600000020f47acc0100000000""", "Died on +.volumes[31].scsi_euidevice_id"
    assert result.volumes[31].volume_id == 32, "Died on +.volumes[31].volume_id"
    assert result.volumes[31].access == """readWrite""", "Died on +.volumes[31].access"
    assert result.volumes[31].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--32.32""", "Died on +.volumes[31].iqn"
    assert result.volumes[31].slice_count == 1, "Died on +.volumes[31].slice_count"
    assert type(result.volumes[31].attributes) is dict, "Died on .volumes[31].attributes"
    assert result.volumes[31].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[31].create_time"
    assert result.volumes[31].account_id == 1, "Died on +.volumes[31].account_id"
    assert result.volumes[30].status == """active""", "Died on +.volumes[30].status"
    assert result.volumes[30].enable512e == False, "Died on +.volumes[30].enable512e"
    assert result.volumes[30].qos.burst_iops == 100, "Died on +.volumes[30].qos.burst_iops"
    assert result.volumes[30].qos.burst_time == 60, "Died on +.volumes[30].qos.burst_time"
    assert result.volumes[30].qos.min_iops == 100, "Died on +.volumes[30].qos.min_iops"
    assert result.volumes[30].qos.max_iops == 100, "Died on +.volumes[30].qos.max_iops"
    assert result.volumes[30].name == """suite-stage-2-QED--31""", "Died on +.volumes[30].name"
    assert result.volumes[30].scsi_naadevice_id == """6f47acc10000000035796d360000001f""", "Died on +.volumes[30].scsi_naadevice_id"
    assert result.volumes[30].total_size == 268435456000, "Died on +.volumes[30].total_size"
    assert result.volumes[30].block_size == 4096, "Died on +.volumes[30].block_size"
    assert result.volumes[30].scsi_euidevice_id == """35796d360000001ff47acc0100000000""", "Died on +.volumes[30].scsi_euidevice_id"
    assert result.volumes[30].volume_id == 31, "Died on +.volumes[30].volume_id"
    assert result.volumes[30].access == """readWrite""", "Died on +.volumes[30].access"
    assert result.volumes[30].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--31.31""", "Died on +.volumes[30].iqn"
    assert result.volumes[30].slice_count == 1, "Died on +.volumes[30].slice_count"
    assert type(result.volumes[30].attributes) is dict, "Died on .volumes[30].attributes"
    assert result.volumes[30].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[30].create_time"
    assert result.volumes[30].account_id == 1, "Died on +.volumes[30].account_id"
    assert result.volumes[29].status == """active""", "Died on +.volumes[29].status"
    assert result.volumes[29].enable512e == False, "Died on +.volumes[29].enable512e"
    assert result.volumes[29].qos.burst_iops == 100, "Died on +.volumes[29].qos.burst_iops"
    assert result.volumes[29].qos.burst_time == 60, "Died on +.volumes[29].qos.burst_time"
    assert result.volumes[29].qos.min_iops == 100, "Died on +.volumes[29].qos.min_iops"
    assert result.volumes[29].qos.max_iops == 100, "Died on +.volumes[29].qos.max_iops"
    assert result.volumes[29].name == """suite-stage-2-QED--30""", "Died on +.volumes[29].name"
    assert result.volumes[29].scsi_naadevice_id == """6f47acc10000000035796d360000001e""", "Died on +.volumes[29].scsi_naadevice_id"
    assert result.volumes[29].total_size == 268435456000, "Died on +.volumes[29].total_size"
    assert result.volumes[29].block_size == 4096, "Died on +.volumes[29].block_size"
    assert result.volumes[29].scsi_euidevice_id == """35796d360000001ef47acc0100000000""", "Died on +.volumes[29].scsi_euidevice_id"
    assert result.volumes[29].volume_id == 30, "Died on +.volumes[29].volume_id"
    assert result.volumes[29].access == """readWrite""", "Died on +.volumes[29].access"
    assert result.volumes[29].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--30.30""", "Died on +.volumes[29].iqn"
    assert result.volumes[29].slice_count == 1, "Died on +.volumes[29].slice_count"
    assert type(result.volumes[29].attributes) is dict, "Died on .volumes[29].attributes"
    assert result.volumes[29].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[29].create_time"
    assert result.volumes[29].account_id == 1, "Died on +.volumes[29].account_id"
    assert result.volumes[28].status == """active""", "Died on +.volumes[28].status"
    assert result.volumes[28].enable512e == False, "Died on +.volumes[28].enable512e"
    assert result.volumes[28].qos.burst_iops == 100, "Died on +.volumes[28].qos.burst_iops"
    assert result.volumes[28].qos.burst_time == 60, "Died on +.volumes[28].qos.burst_time"
    assert result.volumes[28].qos.min_iops == 100, "Died on +.volumes[28].qos.min_iops"
    assert result.volumes[28].qos.max_iops == 100, "Died on +.volumes[28].qos.max_iops"
    assert result.volumes[28].name == """suite-stage-2-QED--29""", "Died on +.volumes[28].name"
    assert result.volumes[28].scsi_naadevice_id == """6f47acc10000000035796d360000001d""", "Died on +.volumes[28].scsi_naadevice_id"
    assert result.volumes[28].total_size == 268435456000, "Died on +.volumes[28].total_size"
    assert result.volumes[28].block_size == 4096, "Died on +.volumes[28].block_size"
    assert result.volumes[28].scsi_euidevice_id == """35796d360000001df47acc0100000000""", "Died on +.volumes[28].scsi_euidevice_id"
    assert result.volumes[28].volume_id == 29, "Died on +.volumes[28].volume_id"
    assert result.volumes[28].access == """readWrite""", "Died on +.volumes[28].access"
    assert result.volumes[28].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--29.29""", "Died on +.volumes[28].iqn"
    assert result.volumes[28].slice_count == 1, "Died on +.volumes[28].slice_count"
    assert type(result.volumes[28].attributes) is dict, "Died on .volumes[28].attributes"
    assert result.volumes[28].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[28].create_time"
    assert result.volumes[28].account_id == 1, "Died on +.volumes[28].account_id"
    assert result.volumes[27].status == """active""", "Died on +.volumes[27].status"
    assert result.volumes[27].enable512e == False, "Died on +.volumes[27].enable512e"
    assert result.volumes[27].qos.burst_iops == 100, "Died on +.volumes[27].qos.burst_iops"
    assert result.volumes[27].qos.burst_time == 60, "Died on +.volumes[27].qos.burst_time"
    assert result.volumes[27].qos.min_iops == 100, "Died on +.volumes[27].qos.min_iops"
    assert result.volumes[27].qos.max_iops == 100, "Died on +.volumes[27].qos.max_iops"
    assert result.volumes[27].name == """suite-stage-2-QED--28""", "Died on +.volumes[27].name"
    assert result.volumes[27].scsi_naadevice_id == """6f47acc10000000035796d360000001c""", "Died on +.volumes[27].scsi_naadevice_id"
    assert result.volumes[27].total_size == 268435456000, "Died on +.volumes[27].total_size"
    assert result.volumes[27].block_size == 4096, "Died on +.volumes[27].block_size"
    assert result.volumes[27].scsi_euidevice_id == """35796d360000001cf47acc0100000000""", "Died on +.volumes[27].scsi_euidevice_id"
    assert result.volumes[27].volume_id == 28, "Died on +.volumes[27].volume_id"
    assert result.volumes[27].access == """readWrite""", "Died on +.volumes[27].access"
    assert result.volumes[27].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--28.28""", "Died on +.volumes[27].iqn"
    assert result.volumes[27].slice_count == 1, "Died on +.volumes[27].slice_count"
    assert type(result.volumes[27].attributes) is dict, "Died on .volumes[27].attributes"
    assert result.volumes[27].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[27].create_time"
    assert result.volumes[27].account_id == 1, "Died on +.volumes[27].account_id"
    assert result.volumes[26].status == """active""", "Died on +.volumes[26].status"
    assert result.volumes[26].enable512e == False, "Died on +.volumes[26].enable512e"
    assert result.volumes[26].qos.burst_iops == 100, "Died on +.volumes[26].qos.burst_iops"
    assert result.volumes[26].qos.burst_time == 60, "Died on +.volumes[26].qos.burst_time"
    assert result.volumes[26].qos.min_iops == 100, "Died on +.volumes[26].qos.min_iops"
    assert result.volumes[26].qos.max_iops == 100, "Died on +.volumes[26].qos.max_iops"
    assert result.volumes[26].name == """suite-stage-2-QED--27""", "Died on +.volumes[26].name"
    assert result.volumes[26].scsi_naadevice_id == """6f47acc10000000035796d360000001b""", "Died on +.volumes[26].scsi_naadevice_id"
    assert result.volumes[26].total_size == 268435456000, "Died on +.volumes[26].total_size"
    assert result.volumes[26].block_size == 4096, "Died on +.volumes[26].block_size"
    assert result.volumes[26].scsi_euidevice_id == """35796d360000001bf47acc0100000000""", "Died on +.volumes[26].scsi_euidevice_id"
    assert result.volumes[26].volume_id == 27, "Died on +.volumes[26].volume_id"
    assert result.volumes[26].access == """readWrite""", "Died on +.volumes[26].access"
    assert result.volumes[26].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--27.27""", "Died on +.volumes[26].iqn"
    assert result.volumes[26].slice_count == 1, "Died on +.volumes[26].slice_count"
    assert type(result.volumes[26].attributes) is dict, "Died on .volumes[26].attributes"
    assert result.volumes[26].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[26].create_time"
    assert result.volumes[26].account_id == 1, "Died on +.volumes[26].account_id"
    assert result.volumes[25].status == """active""", "Died on +.volumes[25].status"
    assert result.volumes[25].enable512e == False, "Died on +.volumes[25].enable512e"
    assert result.volumes[25].qos.burst_iops == 100, "Died on +.volumes[25].qos.burst_iops"
    assert result.volumes[25].qos.burst_time == 60, "Died on +.volumes[25].qos.burst_time"
    assert result.volumes[25].qos.min_iops == 100, "Died on +.volumes[25].qos.min_iops"
    assert result.volumes[25].qos.max_iops == 100, "Died on +.volumes[25].qos.max_iops"
    assert result.volumes[25].name == """suite-stage-2-QED--26""", "Died on +.volumes[25].name"
    assert result.volumes[25].scsi_naadevice_id == """6f47acc10000000035796d360000001a""", "Died on +.volumes[25].scsi_naadevice_id"
    assert result.volumes[25].total_size == 268435456000, "Died on +.volumes[25].total_size"
    assert result.volumes[25].block_size == 4096, "Died on +.volumes[25].block_size"
    assert result.volumes[25].scsi_euidevice_id == """35796d360000001af47acc0100000000""", "Died on +.volumes[25].scsi_euidevice_id"
    assert result.volumes[25].volume_id == 26, "Died on +.volumes[25].volume_id"
    assert result.volumes[25].access == """readWrite""", "Died on +.volumes[25].access"
    assert result.volumes[25].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--26.26""", "Died on +.volumes[25].iqn"
    assert result.volumes[25].slice_count == 1, "Died on +.volumes[25].slice_count"
    assert type(result.volumes[25].attributes) is dict, "Died on .volumes[25].attributes"
    assert result.volumes[25].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[25].create_time"
    assert result.volumes[25].account_id == 1, "Died on +.volumes[25].account_id"
    assert result.volumes[24].status == """active""", "Died on +.volumes[24].status"
    assert result.volumes[24].enable512e == False, "Died on +.volumes[24].enable512e"
    assert result.volumes[24].qos.burst_iops == 100, "Died on +.volumes[24].qos.burst_iops"
    assert result.volumes[24].qos.burst_time == 60, "Died on +.volumes[24].qos.burst_time"
    assert result.volumes[24].qos.min_iops == 100, "Died on +.volumes[24].qos.min_iops"
    assert result.volumes[24].qos.max_iops == 100, "Died on +.volumes[24].qos.max_iops"
    assert result.volumes[24].name == """suite-stage-2-QED--25""", "Died on +.volumes[24].name"
    assert result.volumes[24].scsi_naadevice_id == """6f47acc10000000035796d3600000019""", "Died on +.volumes[24].scsi_naadevice_id"
    assert result.volumes[24].total_size == 268435456000, "Died on +.volumes[24].total_size"
    assert result.volumes[24].block_size == 4096, "Died on +.volumes[24].block_size"
    assert result.volumes[24].scsi_euidevice_id == """35796d3600000019f47acc0100000000""", "Died on +.volumes[24].scsi_euidevice_id"
    assert result.volumes[24].volume_id == 25, "Died on +.volumes[24].volume_id"
    assert result.volumes[24].access == """readWrite""", "Died on +.volumes[24].access"
    assert result.volumes[24].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--25.25""", "Died on +.volumes[24].iqn"
    assert result.volumes[24].slice_count == 1, "Died on +.volumes[24].slice_count"
    assert type(result.volumes[24].attributes) is dict, "Died on .volumes[24].attributes"
    assert result.volumes[24].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[24].create_time"
    assert result.volumes[24].account_id == 1, "Died on +.volumes[24].account_id"
    assert result.volumes[23].status == """active""", "Died on +.volumes[23].status"
    assert result.volumes[23].enable512e == False, "Died on +.volumes[23].enable512e"
    assert result.volumes[23].qos.burst_iops == 100, "Died on +.volumes[23].qos.burst_iops"
    assert result.volumes[23].qos.burst_time == 60, "Died on +.volumes[23].qos.burst_time"
    assert result.volumes[23].qos.min_iops == 100, "Died on +.volumes[23].qos.min_iops"
    assert result.volumes[23].qos.max_iops == 100, "Died on +.volumes[23].qos.max_iops"
    assert result.volumes[23].name == """suite-stage-2-QED--24""", "Died on +.volumes[23].name"
    assert result.volumes[23].scsi_naadevice_id == """6f47acc10000000035796d3600000018""", "Died on +.volumes[23].scsi_naadevice_id"
    assert result.volumes[23].total_size == 268435456000, "Died on +.volumes[23].total_size"
    assert result.volumes[23].block_size == 4096, "Died on +.volumes[23].block_size"
    assert result.volumes[23].scsi_euidevice_id == """35796d3600000018f47acc0100000000""", "Died on +.volumes[23].scsi_euidevice_id"
    assert result.volumes[23].volume_id == 24, "Died on +.volumes[23].volume_id"
    assert result.volumes[23].access == """readWrite""", "Died on +.volumes[23].access"
    assert result.volumes[23].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--24.24""", "Died on +.volumes[23].iqn"
    assert result.volumes[23].slice_count == 1, "Died on +.volumes[23].slice_count"
    assert type(result.volumes[23].attributes) is dict, "Died on .volumes[23].attributes"
    assert result.volumes[23].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[23].create_time"
    assert result.volumes[23].account_id == 1, "Died on +.volumes[23].account_id"
    assert result.volumes[22].status == """active""", "Died on +.volumes[22].status"
    assert result.volumes[22].enable512e == False, "Died on +.volumes[22].enable512e"
    assert result.volumes[22].qos.burst_iops == 100, "Died on +.volumes[22].qos.burst_iops"
    assert result.volumes[22].qos.burst_time == 60, "Died on +.volumes[22].qos.burst_time"
    assert result.volumes[22].qos.min_iops == 100, "Died on +.volumes[22].qos.min_iops"
    assert result.volumes[22].qos.max_iops == 100, "Died on +.volumes[22].qos.max_iops"
    assert result.volumes[22].name == """suite-stage-2-QED--23""", "Died on +.volumes[22].name"
    assert result.volumes[22].scsi_naadevice_id == """6f47acc10000000035796d3600000017""", "Died on +.volumes[22].scsi_naadevice_id"
    assert result.volumes[22].total_size == 268435456000, "Died on +.volumes[22].total_size"
    assert result.volumes[22].block_size == 4096, "Died on +.volumes[22].block_size"
    assert result.volumes[22].scsi_euidevice_id == """35796d3600000017f47acc0100000000""", "Died on +.volumes[22].scsi_euidevice_id"
    assert result.volumes[22].volume_id == 23, "Died on +.volumes[22].volume_id"
    assert result.volumes[22].access == """readWrite""", "Died on +.volumes[22].access"
    assert result.volumes[22].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--23.23""", "Died on +.volumes[22].iqn"
    assert result.volumes[22].slice_count == 1, "Died on +.volumes[22].slice_count"
    assert type(result.volumes[22].attributes) is dict, "Died on .volumes[22].attributes"
    assert result.volumes[22].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[22].create_time"
    assert result.volumes[22].account_id == 1, "Died on +.volumes[22].account_id"
    assert result.volumes[21].status == """active""", "Died on +.volumes[21].status"
    assert result.volumes[21].enable512e == False, "Died on +.volumes[21].enable512e"
    assert result.volumes[21].qos.burst_iops == 100, "Died on +.volumes[21].qos.burst_iops"
    assert result.volumes[21].qos.burst_time == 60, "Died on +.volumes[21].qos.burst_time"
    assert result.volumes[21].qos.min_iops == 100, "Died on +.volumes[21].qos.min_iops"
    assert result.volumes[21].qos.max_iops == 100, "Died on +.volumes[21].qos.max_iops"
    assert result.volumes[21].name == """suite-stage-2-QED--22""", "Died on +.volumes[21].name"
    assert result.volumes[21].scsi_naadevice_id == """6f47acc10000000035796d3600000016""", "Died on +.volumes[21].scsi_naadevice_id"
    assert result.volumes[21].total_size == 268435456000, "Died on +.volumes[21].total_size"
    assert result.volumes[21].block_size == 4096, "Died on +.volumes[21].block_size"
    assert result.volumes[21].scsi_euidevice_id == """35796d3600000016f47acc0100000000""", "Died on +.volumes[21].scsi_euidevice_id"
    assert result.volumes[21].volume_id == 22, "Died on +.volumes[21].volume_id"
    assert result.volumes[21].access == """readWrite""", "Died on +.volumes[21].access"
    assert result.volumes[21].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--22.22""", "Died on +.volumes[21].iqn"
    assert result.volumes[21].slice_count == 1, "Died on +.volumes[21].slice_count"
    assert type(result.volumes[21].attributes) is dict, "Died on .volumes[21].attributes"
    assert result.volumes[21].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[21].create_time"
    assert result.volumes[21].account_id == 1, "Died on +.volumes[21].account_id"
    assert result.volumes[20].status == """active""", "Died on +.volumes[20].status"
    assert result.volumes[20].enable512e == False, "Died on +.volumes[20].enable512e"
    assert result.volumes[20].qos.burst_iops == 100, "Died on +.volumes[20].qos.burst_iops"
    assert result.volumes[20].qos.burst_time == 60, "Died on +.volumes[20].qos.burst_time"
    assert result.volumes[20].qos.min_iops == 100, "Died on +.volumes[20].qos.min_iops"
    assert result.volumes[20].qos.max_iops == 100, "Died on +.volumes[20].qos.max_iops"
    assert result.volumes[20].name == """suite-stage-2-QED--21""", "Died on +.volumes[20].name"
    assert result.volumes[20].scsi_naadevice_id == """6f47acc10000000035796d3600000015""", "Died on +.volumes[20].scsi_naadevice_id"
    assert result.volumes[20].total_size == 268435456000, "Died on +.volumes[20].total_size"
    assert result.volumes[20].block_size == 4096, "Died on +.volumes[20].block_size"
    assert result.volumes[20].scsi_euidevice_id == """35796d3600000015f47acc0100000000""", "Died on +.volumes[20].scsi_euidevice_id"
    assert result.volumes[20].volume_id == 21, "Died on +.volumes[20].volume_id"
    assert result.volumes[20].access == """readWrite""", "Died on +.volumes[20].access"
    assert result.volumes[20].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--21.21""", "Died on +.volumes[20].iqn"
    assert result.volumes[20].slice_count == 1, "Died on +.volumes[20].slice_count"
    assert type(result.volumes[20].attributes) is dict, "Died on .volumes[20].attributes"
    assert result.volumes[20].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[20].create_time"
    assert result.volumes[20].account_id == 1, "Died on +.volumes[20].account_id"
    assert result.volumes[19].status == """active""", "Died on +.volumes[19].status"
    assert result.volumes[19].enable512e == False, "Died on +.volumes[19].enable512e"
    assert result.volumes[19].qos.burst_iops == 100, "Died on +.volumes[19].qos.burst_iops"
    assert result.volumes[19].qos.burst_time == 60, "Died on +.volumes[19].qos.burst_time"
    assert result.volumes[19].qos.min_iops == 100, "Died on +.volumes[19].qos.min_iops"
    assert result.volumes[19].qos.max_iops == 100, "Died on +.volumes[19].qos.max_iops"
    assert result.volumes[19].name == """suite-stage-2-QED--20""", "Died on +.volumes[19].name"
    assert result.volumes[19].scsi_naadevice_id == """6f47acc10000000035796d3600000014""", "Died on +.volumes[19].scsi_naadevice_id"
    assert result.volumes[19].total_size == 268435456000, "Died on +.volumes[19].total_size"
    assert result.volumes[19].block_size == 4096, "Died on +.volumes[19].block_size"
    assert result.volumes[19].scsi_euidevice_id == """35796d3600000014f47acc0100000000""", "Died on +.volumes[19].scsi_euidevice_id"
    assert result.volumes[19].volume_id == 20, "Died on +.volumes[19].volume_id"
    assert result.volumes[19].access == """readWrite""", "Died on +.volumes[19].access"
    assert result.volumes[19].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--20.20""", "Died on +.volumes[19].iqn"
    assert result.volumes[19].slice_count == 1, "Died on +.volumes[19].slice_count"
    assert type(result.volumes[19].attributes) is dict, "Died on .volumes[19].attributes"
    assert result.volumes[19].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[19].create_time"
    assert result.volumes[19].account_id == 1, "Died on +.volumes[19].account_id"
    assert result.volumes[18].status == """active""", "Died on +.volumes[18].status"
    assert result.volumes[18].enable512e == False, "Died on +.volumes[18].enable512e"
    assert result.volumes[18].qos.burst_iops == 100, "Died on +.volumes[18].qos.burst_iops"
    assert result.volumes[18].qos.burst_time == 60, "Died on +.volumes[18].qos.burst_time"
    assert result.volumes[18].qos.min_iops == 100, "Died on +.volumes[18].qos.min_iops"
    assert result.volumes[18].qos.max_iops == 100, "Died on +.volumes[18].qos.max_iops"
    assert result.volumes[18].name == """suite-stage-2-QED--19""", "Died on +.volumes[18].name"
    assert result.volumes[18].scsi_naadevice_id == """6f47acc10000000035796d3600000013""", "Died on +.volumes[18].scsi_naadevice_id"
    assert result.volumes[18].total_size == 268435456000, "Died on +.volumes[18].total_size"
    assert result.volumes[18].block_size == 4096, "Died on +.volumes[18].block_size"
    assert result.volumes[18].scsi_euidevice_id == """35796d3600000013f47acc0100000000""", "Died on +.volumes[18].scsi_euidevice_id"
    assert result.volumes[18].volume_id == 19, "Died on +.volumes[18].volume_id"
    assert result.volumes[18].access == """readWrite""", "Died on +.volumes[18].access"
    assert result.volumes[18].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--19.19""", "Died on +.volumes[18].iqn"
    assert result.volumes[18].slice_count == 1, "Died on +.volumes[18].slice_count"
    assert type(result.volumes[18].attributes) is dict, "Died on .volumes[18].attributes"
    assert result.volumes[18].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[18].create_time"
    assert result.volumes[18].account_id == 1, "Died on +.volumes[18].account_id"
    assert result.volumes[17].status == """active""", "Died on +.volumes[17].status"
    assert result.volumes[17].enable512e == False, "Died on +.volumes[17].enable512e"
    assert result.volumes[17].qos.burst_iops == 100, "Died on +.volumes[17].qos.burst_iops"
    assert result.volumes[17].qos.burst_time == 60, "Died on +.volumes[17].qos.burst_time"
    assert result.volumes[17].qos.min_iops == 100, "Died on +.volumes[17].qos.min_iops"
    assert result.volumes[17].qos.max_iops == 100, "Died on +.volumes[17].qos.max_iops"
    assert result.volumes[17].name == """suite-stage-2-QED--18""", "Died on +.volumes[17].name"
    assert result.volumes[17].scsi_naadevice_id == """6f47acc10000000035796d3600000012""", "Died on +.volumes[17].scsi_naadevice_id"
    assert result.volumes[17].total_size == 268435456000, "Died on +.volumes[17].total_size"
    assert result.volumes[17].block_size == 4096, "Died on +.volumes[17].block_size"
    assert result.volumes[17].scsi_euidevice_id == """35796d3600000012f47acc0100000000""", "Died on +.volumes[17].scsi_euidevice_id"
    assert result.volumes[17].volume_id == 18, "Died on +.volumes[17].volume_id"
    assert result.volumes[17].access == """readWrite""", "Died on +.volumes[17].access"
    assert result.volumes[17].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--18.18""", "Died on +.volumes[17].iqn"
    assert result.volumes[17].slice_count == 1, "Died on +.volumes[17].slice_count"
    assert type(result.volumes[17].attributes) is dict, "Died on .volumes[17].attributes"
    assert result.volumes[17].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[17].create_time"
    assert result.volumes[17].account_id == 1, "Died on +.volumes[17].account_id"
    assert result.volumes[16].status == """active""", "Died on +.volumes[16].status"
    assert result.volumes[16].enable512e == False, "Died on +.volumes[16].enable512e"
    assert result.volumes[16].qos.burst_iops == 100, "Died on +.volumes[16].qos.burst_iops"
    assert result.volumes[16].qos.burst_time == 60, "Died on +.volumes[16].qos.burst_time"
    assert result.volumes[16].qos.min_iops == 100, "Died on +.volumes[16].qos.min_iops"
    assert result.volumes[16].qos.max_iops == 100, "Died on +.volumes[16].qos.max_iops"
    assert result.volumes[16].name == """suite-stage-2-QED--17""", "Died on +.volumes[16].name"
    assert result.volumes[16].scsi_naadevice_id == """6f47acc10000000035796d3600000011""", "Died on +.volumes[16].scsi_naadevice_id"
    assert result.volumes[16].total_size == 268435456000, "Died on +.volumes[16].total_size"
    assert result.volumes[16].block_size == 4096, "Died on +.volumes[16].block_size"
    assert result.volumes[16].scsi_euidevice_id == """35796d3600000011f47acc0100000000""", "Died on +.volumes[16].scsi_euidevice_id"
    assert result.volumes[16].volume_id == 17, "Died on +.volumes[16].volume_id"
    assert result.volumes[16].access == """readWrite""", "Died on +.volumes[16].access"
    assert result.volumes[16].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--17.17""", "Died on +.volumes[16].iqn"
    assert result.volumes[16].slice_count == 1, "Died on +.volumes[16].slice_count"
    assert type(result.volumes[16].attributes) is dict, "Died on .volumes[16].attributes"
    assert result.volumes[16].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[16].create_time"
    assert result.volumes[16].account_id == 1, "Died on +.volumes[16].account_id"
    assert result.volumes[15].status == """active""", "Died on +.volumes[15].status"
    assert result.volumes[15].enable512e == False, "Died on +.volumes[15].enable512e"
    assert result.volumes[15].qos.burst_iops == 100, "Died on +.volumes[15].qos.burst_iops"
    assert result.volumes[15].qos.burst_time == 60, "Died on +.volumes[15].qos.burst_time"
    assert result.volumes[15].qos.min_iops == 100, "Died on +.volumes[15].qos.min_iops"
    assert result.volumes[15].qos.max_iops == 100, "Died on +.volumes[15].qos.max_iops"
    assert result.volumes[15].name == """suite-stage-2-QED--16""", "Died on +.volumes[15].name"
    assert result.volumes[15].scsi_naadevice_id == """6f47acc10000000035796d3600000010""", "Died on +.volumes[15].scsi_naadevice_id"
    assert result.volumes[15].total_size == 268435456000, "Died on +.volumes[15].total_size"
    assert result.volumes[15].block_size == 4096, "Died on +.volumes[15].block_size"
    assert result.volumes[15].scsi_euidevice_id == """35796d3600000010f47acc0100000000""", "Died on +.volumes[15].scsi_euidevice_id"
    assert result.volumes[15].volume_id == 16, "Died on +.volumes[15].volume_id"
    assert result.volumes[15].access == """readWrite""", "Died on +.volumes[15].access"
    assert result.volumes[15].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--16.16""", "Died on +.volumes[15].iqn"
    assert result.volumes[15].slice_count == 1, "Died on +.volumes[15].slice_count"
    assert type(result.volumes[15].attributes) is dict, "Died on .volumes[15].attributes"
    assert result.volumes[15].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[15].create_time"
    assert result.volumes[15].account_id == 1, "Died on +.volumes[15].account_id"
    assert result.volumes[14].status == """active""", "Died on +.volumes[14].status"
    assert result.volumes[14].enable512e == False, "Died on +.volumes[14].enable512e"
    assert result.volumes[14].qos.burst_iops == 100, "Died on +.volumes[14].qos.burst_iops"
    assert result.volumes[14].qos.burst_time == 60, "Died on +.volumes[14].qos.burst_time"
    assert result.volumes[14].qos.min_iops == 100, "Died on +.volumes[14].qos.min_iops"
    assert result.volumes[14].qos.max_iops == 100, "Died on +.volumes[14].qos.max_iops"
    assert result.volumes[14].name == """suite-stage-2-QED--15""", "Died on +.volumes[14].name"
    assert result.volumes[14].scsi_naadevice_id == """6f47acc10000000035796d360000000f""", "Died on +.volumes[14].scsi_naadevice_id"
    assert result.volumes[14].total_size == 268435456000, "Died on +.volumes[14].total_size"
    assert result.volumes[14].block_size == 4096, "Died on +.volumes[14].block_size"
    assert result.volumes[14].scsi_euidevice_id == """35796d360000000ff47acc0100000000""", "Died on +.volumes[14].scsi_euidevice_id"
    assert result.volumes[14].volume_id == 15, "Died on +.volumes[14].volume_id"
    assert result.volumes[14].access == """readWrite""", "Died on +.volumes[14].access"
    assert result.volumes[14].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--15.15""", "Died on +.volumes[14].iqn"
    assert result.volumes[14].slice_count == 1, "Died on +.volumes[14].slice_count"
    assert type(result.volumes[14].attributes) is dict, "Died on .volumes[14].attributes"
    assert result.volumes[14].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[14].create_time"
    assert result.volumes[14].account_id == 1, "Died on +.volumes[14].account_id"
    assert result.volumes[13].status == """active""", "Died on +.volumes[13].status"
    assert result.volumes[13].enable512e == False, "Died on +.volumes[13].enable512e"
    assert result.volumes[13].qos.burst_iops == 100, "Died on +.volumes[13].qos.burst_iops"
    assert result.volumes[13].qos.burst_time == 60, "Died on +.volumes[13].qos.burst_time"
    assert result.volumes[13].qos.min_iops == 100, "Died on +.volumes[13].qos.min_iops"
    assert result.volumes[13].qos.max_iops == 100, "Died on +.volumes[13].qos.max_iops"
    assert result.volumes[13].name == """suite-stage-2-QED--14""", "Died on +.volumes[13].name"
    assert result.volumes[13].scsi_naadevice_id == """6f47acc10000000035796d360000000e""", "Died on +.volumes[13].scsi_naadevice_id"
    assert result.volumes[13].total_size == 268435456000, "Died on +.volumes[13].total_size"
    assert result.volumes[13].block_size == 4096, "Died on +.volumes[13].block_size"
    assert result.volumes[13].scsi_euidevice_id == """35796d360000000ef47acc0100000000""", "Died on +.volumes[13].scsi_euidevice_id"
    assert result.volumes[13].volume_id == 14, "Died on +.volumes[13].volume_id"
    assert result.volumes[13].access == """readWrite""", "Died on +.volumes[13].access"
    assert result.volumes[13].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--14.14""", "Died on +.volumes[13].iqn"
    assert result.volumes[13].slice_count == 1, "Died on +.volumes[13].slice_count"
    assert type(result.volumes[13].attributes) is dict, "Died on .volumes[13].attributes"
    assert result.volumes[13].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[13].create_time"
    assert result.volumes[13].account_id == 1, "Died on +.volumes[13].account_id"
    assert result.volumes[12].status == """active""", "Died on +.volumes[12].status"
    assert result.volumes[12].enable512e == False, "Died on +.volumes[12].enable512e"
    assert result.volumes[12].qos.burst_iops == 100, "Died on +.volumes[12].qos.burst_iops"
    assert result.volumes[12].qos.burst_time == 60, "Died on +.volumes[12].qos.burst_time"
    assert result.volumes[12].qos.min_iops == 100, "Died on +.volumes[12].qos.min_iops"
    assert result.volumes[12].qos.max_iops == 100, "Died on +.volumes[12].qos.max_iops"
    assert result.volumes[12].name == """suite-stage-2-QED--13""", "Died on +.volumes[12].name"
    assert result.volumes[12].scsi_naadevice_id == """6f47acc10000000035796d360000000d""", "Died on +.volumes[12].scsi_naadevice_id"
    assert result.volumes[12].total_size == 268435456000, "Died on +.volumes[12].total_size"
    assert result.volumes[12].block_size == 4096, "Died on +.volumes[12].block_size"
    assert result.volumes[12].scsi_euidevice_id == """35796d360000000df47acc0100000000""", "Died on +.volumes[12].scsi_euidevice_id"
    assert result.volumes[12].volume_id == 13, "Died on +.volumes[12].volume_id"
    assert result.volumes[12].access == """readWrite""", "Died on +.volumes[12].access"
    assert result.volumes[12].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--13.13""", "Died on +.volumes[12].iqn"
    assert result.volumes[12].slice_count == 1, "Died on +.volumes[12].slice_count"
    assert type(result.volumes[12].attributes) is dict, "Died on .volumes[12].attributes"
    assert result.volumes[12].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[12].create_time"
    assert result.volumes[12].account_id == 1, "Died on +.volumes[12].account_id"
    assert result.volumes[11].status == """active""", "Died on +.volumes[11].status"
    assert result.volumes[11].enable512e == False, "Died on +.volumes[11].enable512e"
    assert result.volumes[11].qos.burst_iops == 100, "Died on +.volumes[11].qos.burst_iops"
    assert result.volumes[11].qos.burst_time == 60, "Died on +.volumes[11].qos.burst_time"
    assert result.volumes[11].qos.min_iops == 100, "Died on +.volumes[11].qos.min_iops"
    assert result.volumes[11].qos.max_iops == 100, "Died on +.volumes[11].qos.max_iops"
    assert result.volumes[11].name == """suite-stage-2-QED--12""", "Died on +.volumes[11].name"
    assert result.volumes[11].scsi_naadevice_id == """6f47acc10000000035796d360000000c""", "Died on +.volumes[11].scsi_naadevice_id"
    assert result.volumes[11].total_size == 268435456000, "Died on +.volumes[11].total_size"
    assert result.volumes[11].block_size == 4096, "Died on +.volumes[11].block_size"
    assert result.volumes[11].scsi_euidevice_id == """35796d360000000cf47acc0100000000""", "Died on +.volumes[11].scsi_euidevice_id"
    assert result.volumes[11].volume_id == 12, "Died on +.volumes[11].volume_id"
    assert result.volumes[11].access == """readWrite""", "Died on +.volumes[11].access"
    assert result.volumes[11].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--12.12""", "Died on +.volumes[11].iqn"
    assert result.volumes[11].slice_count == 1, "Died on +.volumes[11].slice_count"
    assert type(result.volumes[11].attributes) is dict, "Died on .volumes[11].attributes"
    assert result.volumes[11].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[11].create_time"
    assert result.volumes[11].account_id == 1, "Died on +.volumes[11].account_id"
    assert result.volumes[10].status == """active""", "Died on +.volumes[10].status"
    assert result.volumes[10].enable512e == False, "Died on +.volumes[10].enable512e"
    assert result.volumes[10].qos.burst_iops == 100, "Died on +.volumes[10].qos.burst_iops"
    assert result.volumes[10].qos.burst_time == 60, "Died on +.volumes[10].qos.burst_time"
    assert result.volumes[10].qos.min_iops == 100, "Died on +.volumes[10].qos.min_iops"
    assert result.volumes[10].qos.max_iops == 100, "Died on +.volumes[10].qos.max_iops"
    assert result.volumes[10].name == """suite-stage-2-QED--11""", "Died on +.volumes[10].name"
    assert result.volumes[10].scsi_naadevice_id == """6f47acc10000000035796d360000000b""", "Died on +.volumes[10].scsi_naadevice_id"
    assert result.volumes[10].total_size == 268435456000, "Died on +.volumes[10].total_size"
    assert result.volumes[10].block_size == 4096, "Died on +.volumes[10].block_size"
    assert result.volumes[10].scsi_euidevice_id == """35796d360000000bf47acc0100000000""", "Died on +.volumes[10].scsi_euidevice_id"
    assert result.volumes[10].volume_id == 11, "Died on +.volumes[10].volume_id"
    assert result.volumes[10].access == """readWrite""", "Died on +.volumes[10].access"
    assert result.volumes[10].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--11.11""", "Died on +.volumes[10].iqn"
    assert result.volumes[10].slice_count == 1, "Died on +.volumes[10].slice_count"
    assert type(result.volumes[10].attributes) is dict, "Died on .volumes[10].attributes"
    assert result.volumes[10].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[10].create_time"
    assert result.volumes[10].account_id == 1, "Died on +.volumes[10].account_id"
    assert result.volumes[9].status == """active""", "Died on +.volumes[9].status"
    assert result.volumes[9].enable512e == False, "Died on +.volumes[9].enable512e"
    assert result.volumes[9].qos.burst_iops == 100, "Died on +.volumes[9].qos.burst_iops"
    assert result.volumes[9].qos.burst_time == 60, "Died on +.volumes[9].qos.burst_time"
    assert result.volumes[9].qos.min_iops == 100, "Died on +.volumes[9].qos.min_iops"
    assert result.volumes[9].qos.max_iops == 100, "Died on +.volumes[9].qos.max_iops"
    assert result.volumes[9].name == """suite-stage-2-QED--10""", "Died on +.volumes[9].name"
    assert result.volumes[9].scsi_naadevice_id == """6f47acc10000000035796d360000000a""", "Died on +.volumes[9].scsi_naadevice_id"
    assert result.volumes[9].total_size == 268435456000, "Died on +.volumes[9].total_size"
    assert result.volumes[9].block_size == 4096, "Died on +.volumes[9].block_size"
    assert result.volumes[9].scsi_euidevice_id == """35796d360000000af47acc0100000000""", "Died on +.volumes[9].scsi_euidevice_id"
    assert result.volumes[9].volume_id == 10, "Died on +.volumes[9].volume_id"
    assert result.volumes[9].access == """readWrite""", "Died on +.volumes[9].access"
    assert result.volumes[9].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--10.10""", "Died on +.volumes[9].iqn"
    assert result.volumes[9].slice_count == 1, "Died on +.volumes[9].slice_count"
    assert type(result.volumes[9].attributes) is dict, "Died on .volumes[9].attributes"
    assert result.volumes[9].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[9].create_time"
    assert result.volumes[9].account_id == 1, "Died on +.volumes[9].account_id"
    assert result.volumes[8].status == """active""", "Died on +.volumes[8].status"
    assert result.volumes[8].enable512e == False, "Died on +.volumes[8].enable512e"
    assert result.volumes[8].qos.burst_iops == 100, "Died on +.volumes[8].qos.burst_iops"
    assert result.volumes[8].qos.burst_time == 60, "Died on +.volumes[8].qos.burst_time"
    assert result.volumes[8].qos.min_iops == 100, "Died on +.volumes[8].qos.min_iops"
    assert result.volumes[8].qos.max_iops == 100, "Died on +.volumes[8].qos.max_iops"
    assert result.volumes[8].name == """suite-stage-2-QED--9""", "Died on +.volumes[8].name"
    assert result.volumes[8].scsi_naadevice_id == """6f47acc10000000035796d3600000009""", "Died on +.volumes[8].scsi_naadevice_id"
    assert result.volumes[8].total_size == 268435456000, "Died on +.volumes[8].total_size"
    assert result.volumes[8].block_size == 4096, "Died on +.volumes[8].block_size"
    assert result.volumes[8].scsi_euidevice_id == """35796d3600000009f47acc0100000000""", "Died on +.volumes[8].scsi_euidevice_id"
    assert result.volumes[8].volume_id == 9, "Died on +.volumes[8].volume_id"
    assert result.volumes[8].access == """readWrite""", "Died on +.volumes[8].access"
    assert result.volumes[8].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--9.9""", "Died on +.volumes[8].iqn"
    assert result.volumes[8].slice_count == 1, "Died on +.volumes[8].slice_count"
    assert type(result.volumes[8].attributes) is dict, "Died on .volumes[8].attributes"
    assert result.volumes[8].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[8].create_time"
    assert result.volumes[8].account_id == 1, "Died on +.volumes[8].account_id"
    assert result.volumes[7].status == """active""", "Died on +.volumes[7].status"
    assert result.volumes[7].enable512e == False, "Died on +.volumes[7].enable512e"
    assert result.volumes[7].qos.burst_iops == 100, "Died on +.volumes[7].qos.burst_iops"
    assert result.volumes[7].qos.burst_time == 60, "Died on +.volumes[7].qos.burst_time"
    assert result.volumes[7].qos.min_iops == 100, "Died on +.volumes[7].qos.min_iops"
    assert result.volumes[7].qos.max_iops == 100, "Died on +.volumes[7].qos.max_iops"
    assert result.volumes[7].name == """suite-stage-2-QED--8""", "Died on +.volumes[7].name"
    assert result.volumes[7].scsi_naadevice_id == """6f47acc10000000035796d3600000008""", "Died on +.volumes[7].scsi_naadevice_id"
    assert result.volumes[7].total_size == 268435456000, "Died on +.volumes[7].total_size"
    assert result.volumes[7].block_size == 4096, "Died on +.volumes[7].block_size"
    assert result.volumes[7].scsi_euidevice_id == """35796d3600000008f47acc0100000000""", "Died on +.volumes[7].scsi_euidevice_id"
    assert result.volumes[7].volume_id == 8, "Died on +.volumes[7].volume_id"
    assert result.volumes[7].access == """readWrite""", "Died on +.volumes[7].access"
    assert result.volumes[7].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--8.8""", "Died on +.volumes[7].iqn"
    assert result.volumes[7].slice_count == 1, "Died on +.volumes[7].slice_count"
    assert type(result.volumes[7].attributes) is dict, "Died on .volumes[7].attributes"
    assert result.volumes[7].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[7].create_time"
    assert result.volumes[7].account_id == 1, "Died on +.volumes[7].account_id"
    assert result.volumes[6].status == """active""", "Died on +.volumes[6].status"
    assert result.volumes[6].enable512e == False, "Died on +.volumes[6].enable512e"
    assert result.volumes[6].qos.burst_iops == 100, "Died on +.volumes[6].qos.burst_iops"
    assert result.volumes[6].qos.burst_time == 60, "Died on +.volumes[6].qos.burst_time"
    assert result.volumes[6].qos.min_iops == 100, "Died on +.volumes[6].qos.min_iops"
    assert result.volumes[6].qos.max_iops == 100, "Died on +.volumes[6].qos.max_iops"
    assert result.volumes[6].name == """suite-stage-2-QED--7""", "Died on +.volumes[6].name"
    assert result.volumes[6].scsi_naadevice_id == """6f47acc10000000035796d3600000007""", "Died on +.volumes[6].scsi_naadevice_id"
    assert result.volumes[6].total_size == 268435456000, "Died on +.volumes[6].total_size"
    assert result.volumes[6].block_size == 4096, "Died on +.volumes[6].block_size"
    assert result.volumes[6].scsi_euidevice_id == """35796d3600000007f47acc0100000000""", "Died on +.volumes[6].scsi_euidevice_id"
    assert result.volumes[6].volume_id == 7, "Died on +.volumes[6].volume_id"
    assert result.volumes[6].access == """readWrite""", "Died on +.volumes[6].access"
    assert result.volumes[6].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--7.7""", "Died on +.volumes[6].iqn"
    assert result.volumes[6].slice_count == 1, "Died on +.volumes[6].slice_count"
    assert type(result.volumes[6].attributes) is dict, "Died on .volumes[6].attributes"
    assert result.volumes[6].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[6].create_time"
    assert result.volumes[6].account_id == 1, "Died on +.volumes[6].account_id"
    assert result.volumes[5].status == """active""", "Died on +.volumes[5].status"
    assert result.volumes[5].enable512e == False, "Died on +.volumes[5].enable512e"
    assert result.volumes[5].qos.burst_iops == 100, "Died on +.volumes[5].qos.burst_iops"
    assert result.volumes[5].qos.burst_time == 60, "Died on +.volumes[5].qos.burst_time"
    assert result.volumes[5].qos.min_iops == 100, "Died on +.volumes[5].qos.min_iops"
    assert result.volumes[5].qos.max_iops == 100, "Died on +.volumes[5].qos.max_iops"
    assert result.volumes[5].name == """suite-stage-2-QED--6""", "Died on +.volumes[5].name"
    assert result.volumes[5].scsi_naadevice_id == """6f47acc10000000035796d3600000006""", "Died on +.volumes[5].scsi_naadevice_id"
    assert result.volumes[5].total_size == 268435456000, "Died on +.volumes[5].total_size"
    assert result.volumes[5].block_size == 4096, "Died on +.volumes[5].block_size"
    assert result.volumes[5].scsi_euidevice_id == """35796d3600000006f47acc0100000000""", "Died on +.volumes[5].scsi_euidevice_id"
    assert result.volumes[5].volume_id == 6, "Died on +.volumes[5].volume_id"
    assert result.volumes[5].access == """readWrite""", "Died on +.volumes[5].access"
    assert result.volumes[5].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--6.6""", "Died on +.volumes[5].iqn"
    assert result.volumes[5].slice_count == 1, "Died on +.volumes[5].slice_count"
    assert type(result.volumes[5].attributes) is dict, "Died on .volumes[5].attributes"
    assert result.volumes[5].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[5].create_time"
    assert result.volumes[5].account_id == 1, "Died on +.volumes[5].account_id"
    assert result.volumes[4].status == """active""", "Died on +.volumes[4].status"
    assert result.volumes[4].enable512e == False, "Died on +.volumes[4].enable512e"
    assert result.volumes[4].qos.burst_iops == 100, "Died on +.volumes[4].qos.burst_iops"
    assert result.volumes[4].qos.burst_time == 60, "Died on +.volumes[4].qos.burst_time"
    assert result.volumes[4].qos.min_iops == 100, "Died on +.volumes[4].qos.min_iops"
    assert result.volumes[4].qos.max_iops == 100, "Died on +.volumes[4].qos.max_iops"
    assert result.volumes[4].name == """suite-stage-2-QED--5""", "Died on +.volumes[4].name"
    assert result.volumes[4].scsi_naadevice_id == """6f47acc10000000035796d3600000005""", "Died on +.volumes[4].scsi_naadevice_id"
    assert result.volumes[4].total_size == 268435456000, "Died on +.volumes[4].total_size"
    assert result.volumes[4].block_size == 4096, "Died on +.volumes[4].block_size"
    assert result.volumes[4].scsi_euidevice_id == """35796d3600000005f47acc0100000000""", "Died on +.volumes[4].scsi_euidevice_id"
    assert result.volumes[4].volume_id == 5, "Died on +.volumes[4].volume_id"
    assert result.volumes[4].access == """readWrite""", "Died on +.volumes[4].access"
    assert result.volumes[4].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--5.5""", "Died on +.volumes[4].iqn"
    assert result.volumes[4].slice_count == 1, "Died on +.volumes[4].slice_count"
    assert type(result.volumes[4].attributes) is dict, "Died on .volumes[4].attributes"
    assert result.volumes[4].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[4].create_time"
    assert result.volumes[4].account_id == 1, "Died on +.volumes[4].account_id"
    assert result.volumes[3].status == """active""", "Died on +.volumes[3].status"
    assert result.volumes[3].enable512e == False, "Died on +.volumes[3].enable512e"
    assert result.volumes[3].qos.burst_iops == 100, "Died on +.volumes[3].qos.burst_iops"
    assert result.volumes[3].qos.burst_time == 60, "Died on +.volumes[3].qos.burst_time"
    assert result.volumes[3].qos.min_iops == 100, "Died on +.volumes[3].qos.min_iops"
    assert result.volumes[3].qos.max_iops == 100, "Died on +.volumes[3].qos.max_iops"
    assert result.volumes[3].name == """suite-stage-2-QED--4""", "Died on +.volumes[3].name"
    assert result.volumes[3].scsi_naadevice_id == """6f47acc10000000035796d3600000004""", "Died on +.volumes[3].scsi_naadevice_id"
    assert result.volumes[3].total_size == 268435456000, "Died on +.volumes[3].total_size"
    assert result.volumes[3].block_size == 4096, "Died on +.volumes[3].block_size"
    assert result.volumes[3].scsi_euidevice_id == """35796d3600000004f47acc0100000000""", "Died on +.volumes[3].scsi_euidevice_id"
    assert result.volumes[3].volume_id == 4, "Died on +.volumes[3].volume_id"
    assert result.volumes[3].access == """readWrite""", "Died on +.volumes[3].access"
    assert result.volumes[3].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--4.4""", "Died on +.volumes[3].iqn"
    assert result.volumes[3].slice_count == 1, "Died on +.volumes[3].slice_count"
    assert type(result.volumes[3].attributes) is dict, "Died on .volumes[3].attributes"
    assert result.volumes[3].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[3].create_time"
    assert result.volumes[3].account_id == 1, "Died on +.volumes[3].account_id"
    assert result.volumes[2].status == """active""", "Died on +.volumes[2].status"
    assert result.volumes[2].enable512e == False, "Died on +.volumes[2].enable512e"
    assert result.volumes[2].qos.burst_iops == 100, "Died on +.volumes[2].qos.burst_iops"
    assert result.volumes[2].qos.burst_time == 60, "Died on +.volumes[2].qos.burst_time"
    assert result.volumes[2].qos.min_iops == 100, "Died on +.volumes[2].qos.min_iops"
    assert result.volumes[2].qos.max_iops == 100, "Died on +.volumes[2].qos.max_iops"
    assert result.volumes[2].name == """suite-stage-2-QED--3""", "Died on +.volumes[2].name"
    assert result.volumes[2].scsi_naadevice_id == """6f47acc10000000035796d3600000003""", "Died on +.volumes[2].scsi_naadevice_id"
    assert result.volumes[2].total_size == 268435456000, "Died on +.volumes[2].total_size"
    assert result.volumes[2].block_size == 4096, "Died on +.volumes[2].block_size"
    assert result.volumes[2].scsi_euidevice_id == """35796d3600000003f47acc0100000000""", "Died on +.volumes[2].scsi_euidevice_id"
    assert result.volumes[2].volume_id == 3, "Died on +.volumes[2].volume_id"
    assert result.volumes[2].access == """readWrite""", "Died on +.volumes[2].access"
    assert result.volumes[2].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--3.3""", "Died on +.volumes[2].iqn"
    assert result.volumes[2].slice_count == 1, "Died on +.volumes[2].slice_count"
    assert type(result.volumes[2].attributes) is dict, "Died on .volumes[2].attributes"
    assert result.volumes[2].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[2].create_time"
    assert result.volumes[2].account_id == 1, "Died on +.volumes[2].account_id"
    assert result.volumes[1].status == """active""", "Died on +.volumes[1].status"
    assert result.volumes[1].enable512e == False, "Died on +.volumes[1].enable512e"
    assert result.volumes[1].qos.burst_iops == 100, "Died on +.volumes[1].qos.burst_iops"
    assert result.volumes[1].qos.burst_time == 60, "Died on +.volumes[1].qos.burst_time"
    assert result.volumes[1].qos.min_iops == 100, "Died on +.volumes[1].qos.min_iops"
    assert result.volumes[1].qos.max_iops == 100, "Died on +.volumes[1].qos.max_iops"
    assert result.volumes[1].name == """suite-stage-2-QED--2""", "Died on +.volumes[1].name"
    assert result.volumes[1].scsi_naadevice_id == """6f47acc10000000035796d3600000002""", "Died on +.volumes[1].scsi_naadevice_id"
    assert result.volumes[1].total_size == 268435456000, "Died on +.volumes[1].total_size"
    assert result.volumes[1].block_size == 4096, "Died on +.volumes[1].block_size"
    assert result.volumes[1].scsi_euidevice_id == """35796d3600000002f47acc0100000000""", "Died on +.volumes[1].scsi_euidevice_id"
    assert result.volumes[1].volume_id == 2, "Died on +.volumes[1].volume_id"
    assert result.volumes[1].access == """readWrite""", "Died on +.volumes[1].access"
    assert result.volumes[1].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--2.2""", "Died on +.volumes[1].iqn"
    assert result.volumes[1].slice_count == 1, "Died on +.volumes[1].slice_count"
    assert type(result.volumes[1].attributes) is dict, "Died on .volumes[1].attributes"
    assert result.volumes[1].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[1].create_time"
    assert result.volumes[1].account_id == 1, "Died on +.volumes[1].account_id"
    assert result.volumes[0].status == """active""", "Died on +.volumes[0].status"
    assert result.volumes[0].enable512e == False, "Died on +.volumes[0].enable512e"
    assert result.volumes[0].qos.burst_iops == 100, "Died on +.volumes[0].qos.burst_iops"
    assert result.volumes[0].qos.burst_time == 60, "Died on +.volumes[0].qos.burst_time"
    assert result.volumes[0].qos.min_iops == 100, "Died on +.volumes[0].qos.min_iops"
    assert result.volumes[0].qos.max_iops == 100, "Died on +.volumes[0].qos.max_iops"
    assert result.volumes[0].name == """suite-stage-2-QED--1""", "Died on +.volumes[0].name"
    assert result.volumes[0].scsi_naadevice_id == """6f47acc10000000035796d3600000001""", "Died on +.volumes[0].scsi_naadevice_id"
    assert result.volumes[0].total_size == 268435456000, "Died on +.volumes[0].total_size"
    assert result.volumes[0].block_size == 4096, "Died on +.volumes[0].block_size"
    assert result.volumes[0].scsi_euidevice_id == """35796d3600000001f47acc0100000000""", "Died on +.volumes[0].scsi_euidevice_id"
    assert result.volumes[0].volume_id == 1, "Died on +.volumes[0].volume_id"
    assert result.volumes[0].access == """readWrite""", "Died on +.volumes[0].access"
    assert result.volumes[0].iqn == """iqn.2010-01.com.solidfire:5ym6.suite-stage-2-qed--1.1""", "Died on +.volumes[0].iqn"
    assert result.volumes[0].slice_count == 1, "Died on +.volumes[0].slice_count"
    assert type(result.volumes[0].attributes) is dict, "Died on .volumes[0].attributes"
    assert result.volumes[0].create_time == """2017-01-17T17:13:49Z""", "Died on +.volumes[0].create_time"
    assert result.volumes[0].account_id == 1, "Died on +.volumes[0].account_id"

def test_list_active_volumes_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListActiveVolumes_v9.0_0)

    
    start_volume_id = 42 # start_volume_id
    limit = 42 # limit
    result = ef.list_active_volumes()
    assert result.volumes[23].status == """active""", "Died on +.volumes[23].status"
    assert result.volumes[23].enable512e == False, "Died on +.volumes[23].enable512e"
    assert result.volumes[23].qos.burst_iops == 15000, "Died on +.volumes[23].qos.burst_iops"
    assert result.volumes[23].qos.burst_time == 60, "Died on +.volumes[23].qos.burst_time"
    assert result.volumes[23].qos.min_iops == 50, "Died on +.volumes[23].qos.min_iops"
    assert result.volumes[23].qos.max_iops == 15000, "Died on +.volumes[23].qos.max_iops"
    assert result.volumes[23].name == """DUaZ90I4gcQ7m04l""", "Died on +.volumes[23].name"
    assert result.volumes[23].scsi_naadevice_id == """6f47acc1000000003966677300000018""", "Died on +.volumes[23].scsi_naadevice_id"
    assert result.volumes[23].total_size == 100000595968, "Died on +.volumes[23].total_size"
    assert result.volumes[23].block_size == 4096, "Died on +.volumes[23].block_size"
    assert result.volumes[23].scsi_euidevice_id == """3966677300000018f47acc0100000000""", "Died on +.volumes[23].scsi_euidevice_id"
    assert result.volumes[23].volume_id == 24, "Died on +.volumes[23].volume_id"
    assert result.volumes[23].access == """readWrite""", "Died on +.volumes[23].access"
    assert result.volumes[23].iqn == """iqn.2010-01.com.solidfire:9fgs.duaz90i4gcq7m04l.24""", "Died on +.volumes[23].iqn"
    assert result.volumes[23].slice_count == 1, "Died on +.volumes[23].slice_count"
    assert type(result.volumes[23].attributes) is dict, "Died on .volumes[23].attributes"
    assert result.volumes[23].account_id == 1, "Died on +.volumes[23].account_id"
    assert result.volumes[23].create_time == """2017-01-12T20:47:57Z""", "Died on +.volumes[23].create_time"
    assert result.volumes[23].virtual_volume_id is None, "Died on .volumes[23].virtual_volume_id"
    assert result.volumes[22].status == """active""", "Died on +.volumes[22].status"
    assert result.volumes[22].enable512e == False, "Died on +.volumes[22].enable512e"
    assert result.volumes[22].qos.burst_iops == 15000, "Died on +.volumes[22].qos.burst_iops"
    assert result.volumes[22].qos.burst_time == 60, "Died on +.volumes[22].qos.burst_time"
    assert result.volumes[22].qos.min_iops == 50, "Died on +.volumes[22].qos.min_iops"
    assert result.volumes[22].qos.max_iops == 15000, "Died on +.volumes[22].qos.max_iops"
    assert result.volumes[22].name == """mTNDEVdpAylfW3B1""", "Died on +.volumes[22].name"
    assert result.volumes[22].scsi_naadevice_id == """6f47acc1000000003966677300000017""", "Died on +.volumes[22].scsi_naadevice_id"
    assert result.volumes[22].total_size == 100000595968, "Died on +.volumes[22].total_size"
    assert result.volumes[22].block_size == 4096, "Died on +.volumes[22].block_size"
    assert result.volumes[22].scsi_euidevice_id == """3966677300000017f47acc0100000000""", "Died on +.volumes[22].scsi_euidevice_id"
    assert result.volumes[22].volume_id == 23, "Died on +.volumes[22].volume_id"
    assert result.volumes[22].access == """readWrite""", "Died on +.volumes[22].access"
    assert result.volumes[22].iqn == """iqn.2010-01.com.solidfire:9fgs.mtndevdpaylfw3b1.23""", "Died on +.volumes[22].iqn"
    assert result.volumes[22].slice_count == 1, "Died on +.volumes[22].slice_count"
    assert type(result.volumes[22].attributes) is dict, "Died on .volumes[22].attributes"
    assert result.volumes[22].account_id == 1, "Died on +.volumes[22].account_id"
    assert result.volumes[22].create_time == """2017-01-12T20:47:57Z""", "Died on +.volumes[22].create_time"
    assert result.volumes[22].virtual_volume_id is None, "Died on .volumes[22].virtual_volume_id"
    assert result.volumes[21].status == """active""", "Died on +.volumes[21].status"
    assert result.volumes[21].enable512e == False, "Died on +.volumes[21].enable512e"
    assert result.volumes[21].qos.burst_iops == 15000, "Died on +.volumes[21].qos.burst_iops"
    assert result.volumes[21].qos.burst_time == 60, "Died on +.volumes[21].qos.burst_time"
    assert result.volumes[21].qos.min_iops == 50, "Died on +.volumes[21].qos.min_iops"
    assert result.volumes[21].qos.max_iops == 15000, "Died on +.volumes[21].qos.max_iops"
    assert result.volumes[21].name == """fF5A9NhnnBW3zVa7""", "Died on +.volumes[21].name"
    assert result.volumes[21].scsi_naadevice_id == """6f47acc1000000003966677300000016""", "Died on +.volumes[21].scsi_naadevice_id"
    assert result.volumes[21].total_size == 100000595968, "Died on +.volumes[21].total_size"
    assert result.volumes[21].block_size == 4096, "Died on +.volumes[21].block_size"
    assert result.volumes[21].scsi_euidevice_id == """3966677300000016f47acc0100000000""", "Died on +.volumes[21].scsi_euidevice_id"
    assert result.volumes[21].volume_id == 22, "Died on +.volumes[21].volume_id"
    assert result.volumes[21].access == """readWrite""", "Died on +.volumes[21].access"
    assert result.volumes[21].iqn == """iqn.2010-01.com.solidfire:9fgs.ff5a9nhnnbw3zva7.22""", "Died on +.volumes[21].iqn"
    assert result.volumes[21].slice_count == 1, "Died on +.volumes[21].slice_count"
    assert type(result.volumes[21].attributes) is dict, "Died on .volumes[21].attributes"
    assert result.volumes[21].account_id == 1, "Died on +.volumes[21].account_id"
    assert result.volumes[21].create_time == """2017-01-12T20:47:57Z""", "Died on +.volumes[21].create_time"
    assert result.volumes[21].virtual_volume_id is None, "Died on .volumes[21].virtual_volume_id"
    assert result.volumes[20].status == """active""", "Died on +.volumes[20].status"
    assert result.volumes[20].enable512e == False, "Died on +.volumes[20].enable512e"
    assert result.volumes[20].qos.burst_iops == 15000, "Died on +.volumes[20].qos.burst_iops"
    assert result.volumes[20].qos.burst_time == 60, "Died on +.volumes[20].qos.burst_time"
    assert result.volumes[20].qos.min_iops == 50, "Died on +.volumes[20].qos.min_iops"
    assert result.volumes[20].qos.max_iops == 15000, "Died on +.volumes[20].qos.max_iops"
    assert result.volumes[20].name == """i9Ht7hamjaFIVXOp""", "Died on +.volumes[20].name"
    assert result.volumes[20].scsi_naadevice_id == """6f47acc1000000003966677300000015""", "Died on +.volumes[20].scsi_naadevice_id"
    assert result.volumes[20].total_size == 100000595968, "Died on +.volumes[20].total_size"
    assert result.volumes[20].block_size == 4096, "Died on +.volumes[20].block_size"
    assert result.volumes[20].scsi_euidevice_id == """3966677300000015f47acc0100000000""", "Died on +.volumes[20].scsi_euidevice_id"
    assert result.volumes[20].volume_id == 21, "Died on +.volumes[20].volume_id"
    assert result.volumes[20].access == """readWrite""", "Died on +.volumes[20].access"
    assert result.volumes[20].iqn == """iqn.2010-01.com.solidfire:9fgs.i9ht7hamjafivxop.21""", "Died on +.volumes[20].iqn"
    assert result.volumes[20].slice_count == 1, "Died on +.volumes[20].slice_count"
    assert type(result.volumes[20].attributes) is dict, "Died on .volumes[20].attributes"
    assert result.volumes[20].account_id == 1, "Died on +.volumes[20].account_id"
    assert result.volumes[20].create_time == """2017-01-12T20:47:57Z""", "Died on +.volumes[20].create_time"
    assert result.volumes[20].virtual_volume_id is None, "Died on .volumes[20].virtual_volume_id"
    assert result.volumes[19].status == """active""", "Died on +.volumes[19].status"
    assert result.volumes[19].enable512e == False, "Died on +.volumes[19].enable512e"
    assert result.volumes[19].qos.burst_iops == 15000, "Died on +.volumes[19].qos.burst_iops"
    assert result.volumes[19].qos.burst_time == 60, "Died on +.volumes[19].qos.burst_time"
    assert result.volumes[19].qos.min_iops == 50, "Died on +.volumes[19].qos.min_iops"
    assert result.volumes[19].qos.max_iops == 15000, "Died on +.volumes[19].qos.max_iops"
    assert result.volumes[19].name == """3qzVrg7JhldzFysL""", "Died on +.volumes[19].name"
    assert result.volumes[19].scsi_naadevice_id == """6f47acc1000000003966677300000014""", "Died on +.volumes[19].scsi_naadevice_id"
    assert result.volumes[19].total_size == 100000595968, "Died on +.volumes[19].total_size"
    assert result.volumes[19].block_size == 4096, "Died on +.volumes[19].block_size"
    assert result.volumes[19].scsi_euidevice_id == """3966677300000014f47acc0100000000""", "Died on +.volumes[19].scsi_euidevice_id"
    assert result.volumes[19].volume_id == 20, "Died on +.volumes[19].volume_id"
    assert result.volumes[19].access == """readWrite""", "Died on +.volumes[19].access"
    assert result.volumes[19].iqn == """iqn.2010-01.com.solidfire:9fgs.3qzvrg7jhldzfysl.20""", "Died on +.volumes[19].iqn"
    assert result.volumes[19].slice_count == 1, "Died on +.volumes[19].slice_count"
    assert type(result.volumes[19].attributes) is dict, "Died on .volumes[19].attributes"
    assert result.volumes[19].account_id == 1, "Died on +.volumes[19].account_id"
    assert result.volumes[19].create_time == """2017-01-12T20:47:57Z""", "Died on +.volumes[19].create_time"
    assert result.volumes[19].virtual_volume_id is None, "Died on .volumes[19].virtual_volume_id"
    assert result.volumes[18].status == """active""", "Died on +.volumes[18].status"
    assert result.volumes[18].enable512e == False, "Died on +.volumes[18].enable512e"
    assert result.volumes[18].qos.burst_iops == 15000, "Died on +.volumes[18].qos.burst_iops"
    assert result.volumes[18].qos.burst_time == 60, "Died on +.volumes[18].qos.burst_time"
    assert result.volumes[18].qos.min_iops == 50, "Died on +.volumes[18].qos.min_iops"
    assert result.volumes[18].qos.max_iops == 15000, "Died on +.volumes[18].qos.max_iops"
    assert result.volumes[18].name == """FowKbYTDDmMlTdO7""", "Died on +.volumes[18].name"
    assert result.volumes[18].scsi_naadevice_id == """6f47acc1000000003966677300000013""", "Died on +.volumes[18].scsi_naadevice_id"
    assert result.volumes[18].total_size == 100000595968, "Died on +.volumes[18].total_size"
    assert result.volumes[18].block_size == 4096, "Died on +.volumes[18].block_size"
    assert result.volumes[18].scsi_euidevice_id == """3966677300000013f47acc0100000000""", "Died on +.volumes[18].scsi_euidevice_id"
    assert result.volumes[18].volume_id == 19, "Died on +.volumes[18].volume_id"
    assert result.volumes[18].access == """readWrite""", "Died on +.volumes[18].access"
    assert result.volumes[18].iqn == """iqn.2010-01.com.solidfire:9fgs.fowkbytddmmltdo7.19""", "Died on +.volumes[18].iqn"
    assert result.volumes[18].slice_count == 1, "Died on +.volumes[18].slice_count"
    assert type(result.volumes[18].attributes) is dict, "Died on .volumes[18].attributes"
    assert result.volumes[18].account_id == 1, "Died on +.volumes[18].account_id"
    assert result.volumes[18].create_time == """2017-01-12T20:47:57Z""", "Died on +.volumes[18].create_time"
    assert result.volumes[18].virtual_volume_id is None, "Died on .volumes[18].virtual_volume_id"
    assert result.volumes[17].status == """active""", "Died on +.volumes[17].status"
    assert result.volumes[17].enable512e == False, "Died on +.volumes[17].enable512e"
    assert result.volumes[17].qos.burst_iops == 15000, "Died on +.volumes[17].qos.burst_iops"
    assert result.volumes[17].qos.burst_time == 60, "Died on +.volumes[17].qos.burst_time"
    assert result.volumes[17].qos.min_iops == 50, "Died on +.volumes[17].qos.min_iops"
    assert result.volumes[17].qos.max_iops == 15000, "Died on +.volumes[17].qos.max_iops"
    assert result.volumes[17].name == """gXrxAJOKD4jvDELy""", "Died on +.volumes[17].name"
    assert result.volumes[17].scsi_naadevice_id == """6f47acc1000000003966677300000012""", "Died on +.volumes[17].scsi_naadevice_id"
    assert result.volumes[17].total_size == 100000595968, "Died on +.volumes[17].total_size"
    assert result.volumes[17].block_size == 4096, "Died on +.volumes[17].block_size"
    assert result.volumes[17].scsi_euidevice_id == """3966677300000012f47acc0100000000""", "Died on +.volumes[17].scsi_euidevice_id"
    assert result.volumes[17].volume_id == 18, "Died on +.volumes[17].volume_id"
    assert result.volumes[17].access == """readWrite""", "Died on +.volumes[17].access"
    assert result.volumes[17].iqn == """iqn.2010-01.com.solidfire:9fgs.gxrxajokd4jvdely.18""", "Died on +.volumes[17].iqn"
    assert result.volumes[17].slice_count == 1, "Died on +.volumes[17].slice_count"
    assert type(result.volumes[17].attributes) is dict, "Died on .volumes[17].attributes"
    assert result.volumes[17].account_id == 1, "Died on +.volumes[17].account_id"
    assert result.volumes[17].create_time == """2017-01-12T20:47:57Z""", "Died on +.volumes[17].create_time"
    assert result.volumes[17].virtual_volume_id is None, "Died on .volumes[17].virtual_volume_id"
    assert result.volumes[16].status == """active""", "Died on +.volumes[16].status"
    assert result.volumes[16].enable512e == False, "Died on +.volumes[16].enable512e"
    assert result.volumes[16].qos.burst_iops == 15000, "Died on +.volumes[16].qos.burst_iops"
    assert result.volumes[16].qos.burst_time == 60, "Died on +.volumes[16].qos.burst_time"
    assert result.volumes[16].qos.min_iops == 50, "Died on +.volumes[16].qos.min_iops"
    assert result.volumes[16].qos.max_iops == 15000, "Died on +.volumes[16].qos.max_iops"
    assert result.volumes[16].name == """ojYFCD1xbgJ0SlVz""", "Died on +.volumes[16].name"
    assert result.volumes[16].scsi_naadevice_id == """6f47acc1000000003966677300000011""", "Died on +.volumes[16].scsi_naadevice_id"
    assert result.volumes[16].total_size == 100000595968, "Died on +.volumes[16].total_size"
    assert result.volumes[16].block_size == 4096, "Died on +.volumes[16].block_size"
    assert result.volumes[16].scsi_euidevice_id == """3966677300000011f47acc0100000000""", "Died on +.volumes[16].scsi_euidevice_id"
    assert result.volumes[16].volume_id == 17, "Died on +.volumes[16].volume_id"
    assert result.volumes[16].access == """readWrite""", "Died on +.volumes[16].access"
    assert result.volumes[16].iqn == """iqn.2010-01.com.solidfire:9fgs.ojyfcd1xbgj0slvz.17""", "Died on +.volumes[16].iqn"
    assert result.volumes[16].slice_count == 1, "Died on +.volumes[16].slice_count"
    assert type(result.volumes[16].attributes) is dict, "Died on .volumes[16].attributes"
    assert result.volumes[16].account_id == 1, "Died on +.volumes[16].account_id"
    assert result.volumes[16].create_time == """2017-01-12T20:47:57Z""", "Died on +.volumes[16].create_time"
    assert result.volumes[16].virtual_volume_id is None, "Died on .volumes[16].virtual_volume_id"
    assert result.volumes[15].status == """active""", "Died on +.volumes[15].status"
    assert result.volumes[15].enable512e == False, "Died on +.volumes[15].enable512e"
    assert result.volumes[15].qos.burst_iops == 15000, "Died on +.volumes[15].qos.burst_iops"
    assert result.volumes[15].qos.burst_time == 60, "Died on +.volumes[15].qos.burst_time"
    assert result.volumes[15].qos.min_iops == 50, "Died on +.volumes[15].qos.min_iops"
    assert result.volumes[15].qos.max_iops == 15000, "Died on +.volumes[15].qos.max_iops"
    assert result.volumes[15].name == """cS2ar4Sx7fvggcpk""", "Died on +.volumes[15].name"
    assert result.volumes[15].scsi_naadevice_id == """6f47acc1000000003966677300000010""", "Died on +.volumes[15].scsi_naadevice_id"
    assert result.volumes[15].total_size == 100000595968, "Died on +.volumes[15].total_size"
    assert result.volumes[15].block_size == 4096, "Died on +.volumes[15].block_size"
    assert result.volumes[15].scsi_euidevice_id == """3966677300000010f47acc0100000000""", "Died on +.volumes[15].scsi_euidevice_id"
    assert result.volumes[15].volume_id == 16, "Died on +.volumes[15].volume_id"
    assert result.volumes[15].access == """readWrite""", "Died on +.volumes[15].access"
    assert result.volumes[15].iqn == """iqn.2010-01.com.solidfire:9fgs.cs2ar4sx7fvggcpk.16""", "Died on +.volumes[15].iqn"
    assert result.volumes[15].slice_count == 1, "Died on +.volumes[15].slice_count"
    assert type(result.volumes[15].attributes) is dict, "Died on .volumes[15].attributes"
    assert result.volumes[15].account_id == 1, "Died on +.volumes[15].account_id"
    assert result.volumes[15].create_time == """2017-01-12T20:47:57Z""", "Died on +.volumes[15].create_time"
    assert result.volumes[15].virtual_volume_id is None, "Died on .volumes[15].virtual_volume_id"
    assert result.volumes[14].status == """active""", "Died on +.volumes[14].status"
    assert result.volumes[14].enable512e == False, "Died on +.volumes[14].enable512e"
    assert result.volumes[14].qos.burst_iops == 15000, "Died on +.volumes[14].qos.burst_iops"
    assert result.volumes[14].qos.burst_time == 60, "Died on +.volumes[14].qos.burst_time"
    assert result.volumes[14].qos.min_iops == 50, "Died on +.volumes[14].qos.min_iops"
    assert result.volumes[14].qos.max_iops == 15000, "Died on +.volumes[14].qos.max_iops"
    assert result.volumes[14].name == """jf9yLlHXqWu5ahVI""", "Died on +.volumes[14].name"
    assert result.volumes[14].scsi_naadevice_id == """6f47acc100000000396667730000000f""", "Died on +.volumes[14].scsi_naadevice_id"
    assert result.volumes[14].total_size == 100000595968, "Died on +.volumes[14].total_size"
    assert result.volumes[14].block_size == 4096, "Died on +.volumes[14].block_size"
    assert result.volumes[14].scsi_euidevice_id == """396667730000000ff47acc0100000000""", "Died on +.volumes[14].scsi_euidevice_id"
    assert result.volumes[14].volume_id == 15, "Died on +.volumes[14].volume_id"
    assert result.volumes[14].access == """readWrite""", "Died on +.volumes[14].access"
    assert result.volumes[14].iqn == """iqn.2010-01.com.solidfire:9fgs.jf9yllhxqwu5ahvi.15""", "Died on +.volumes[14].iqn"
    assert result.volumes[14].slice_count == 1, "Died on +.volumes[14].slice_count"
    assert type(result.volumes[14].attributes) is dict, "Died on .volumes[14].attributes"
    assert result.volumes[14].account_id == 1, "Died on +.volumes[14].account_id"
    assert result.volumes[14].create_time == """2017-01-12T20:47:57Z""", "Died on +.volumes[14].create_time"
    assert result.volumes[14].virtual_volume_id is None, "Died on .volumes[14].virtual_volume_id"
    assert result.volumes[13].status == """active""", "Died on +.volumes[13].status"
    assert result.volumes[13].enable512e == False, "Died on +.volumes[13].enable512e"
    assert result.volumes[13].qos.burst_iops == 15000, "Died on +.volumes[13].qos.burst_iops"
    assert result.volumes[13].qos.burst_time == 60, "Died on +.volumes[13].qos.burst_time"
    assert result.volumes[13].qos.min_iops == 50, "Died on +.volumes[13].qos.min_iops"
    assert result.volumes[13].qos.max_iops == 15000, "Died on +.volumes[13].qos.max_iops"
    assert result.volumes[13].name == """kHC4bEhkpHVysGhe""", "Died on +.volumes[13].name"
    assert result.volumes[13].scsi_naadevice_id == """6f47acc100000000396667730000000e""", "Died on +.volumes[13].scsi_naadevice_id"
    assert result.volumes[13].total_size == 100000595968, "Died on +.volumes[13].total_size"
    assert result.volumes[13].block_size == 4096, "Died on +.volumes[13].block_size"
    assert result.volumes[13].scsi_euidevice_id == """396667730000000ef47acc0100000000""", "Died on +.volumes[13].scsi_euidevice_id"
    assert result.volumes[13].volume_id == 14, "Died on +.volumes[13].volume_id"
    assert result.volumes[13].access == """readWrite""", "Died on +.volumes[13].access"
    assert result.volumes[13].iqn == """iqn.2010-01.com.solidfire:9fgs.khc4behkphvysghe.14""", "Died on +.volumes[13].iqn"
    assert result.volumes[13].slice_count == 1, "Died on +.volumes[13].slice_count"
    assert type(result.volumes[13].attributes) is dict, "Died on .volumes[13].attributes"
    assert result.volumes[13].account_id == 1, "Died on +.volumes[13].account_id"
    assert result.volumes[13].create_time == """2017-01-12T20:47:57Z""", "Died on +.volumes[13].create_time"
    assert result.volumes[13].virtual_volume_id is None, "Died on .volumes[13].virtual_volume_id"
    assert result.volumes[12].status == """active""", "Died on +.volumes[12].status"
    assert result.volumes[12].enable512e == False, "Died on +.volumes[12].enable512e"
    assert result.volumes[12].qos.burst_iops == 15000, "Died on +.volumes[12].qos.burst_iops"
    assert result.volumes[12].qos.burst_time == 60, "Died on +.volumes[12].qos.burst_time"
    assert result.volumes[12].qos.min_iops == 50, "Died on +.volumes[12].qos.min_iops"
    assert result.volumes[12].qos.max_iops == 15000, "Died on +.volumes[12].qos.max_iops"
    assert result.volumes[12].name == """edOJju7tcj9P6NWE""", "Died on +.volumes[12].name"
    assert result.volumes[12].scsi_naadevice_id == """6f47acc100000000396667730000000d""", "Died on +.volumes[12].scsi_naadevice_id"
    assert result.volumes[12].total_size == 100000595968, "Died on +.volumes[12].total_size"
    assert result.volumes[12].block_size == 4096, "Died on +.volumes[12].block_size"
    assert result.volumes[12].scsi_euidevice_id == """396667730000000df47acc0100000000""", "Died on +.volumes[12].scsi_euidevice_id"
    assert result.volumes[12].volume_id == 13, "Died on +.volumes[12].volume_id"
    assert result.volumes[12].access == """readWrite""", "Died on +.volumes[12].access"
    assert result.volumes[12].iqn == """iqn.2010-01.com.solidfire:9fgs.edojju7tcj9p6nwe.13""", "Died on +.volumes[12].iqn"
    assert result.volumes[12].slice_count == 1, "Died on +.volumes[12].slice_count"
    assert type(result.volumes[12].attributes) is dict, "Died on .volumes[12].attributes"
    assert result.volumes[12].account_id == 1, "Died on +.volumes[12].account_id"
    assert result.volumes[12].create_time == """2017-01-12T20:47:57Z""", "Died on +.volumes[12].create_time"
    assert result.volumes[12].virtual_volume_id is None, "Died on .volumes[12].virtual_volume_id"
    assert result.volumes[11].status == """active""", "Died on +.volumes[11].status"
    assert result.volumes[11].enable512e == False, "Died on +.volumes[11].enable512e"
    assert result.volumes[11].qos.burst_iops == 15000, "Died on +.volumes[11].qos.burst_iops"
    assert result.volumes[11].qos.burst_time == 60, "Died on +.volumes[11].qos.burst_time"
    assert result.volumes[11].qos.min_iops == 50, "Died on +.volumes[11].qos.min_iops"
    assert result.volumes[11].qos.max_iops == 15000, "Died on +.volumes[11].qos.max_iops"
    assert result.volumes[11].name == """76WLLMNSTJf6wUvk""", "Died on +.volumes[11].name"
    assert result.volumes[11].scsi_naadevice_id == """6f47acc100000000396667730000000c""", "Died on +.volumes[11].scsi_naadevice_id"
    assert result.volumes[11].total_size == 100000595968, "Died on +.volumes[11].total_size"
    assert result.volumes[11].block_size == 4096, "Died on +.volumes[11].block_size"
    assert result.volumes[11].scsi_euidevice_id == """396667730000000cf47acc0100000000""", "Died on +.volumes[11].scsi_euidevice_id"
    assert result.volumes[11].volume_id == 12, "Died on +.volumes[11].volume_id"
    assert result.volumes[11].access == """readWrite""", "Died on +.volumes[11].access"
    assert result.volumes[11].iqn == """iqn.2010-01.com.solidfire:9fgs.76wllmnstjf6wuvk.12""", "Died on +.volumes[11].iqn"
    assert result.volumes[11].slice_count == 1, "Died on +.volumes[11].slice_count"
    assert type(result.volumes[11].attributes) is dict, "Died on .volumes[11].attributes"
    assert result.volumes[11].account_id == 1, "Died on +.volumes[11].account_id"
    assert result.volumes[11].create_time == """2017-01-12T20:47:57Z""", "Died on +.volumes[11].create_time"
    assert result.volumes[11].virtual_volume_id is None, "Died on .volumes[11].virtual_volume_id"
    assert result.volumes[10].status == """active""", "Died on +.volumes[10].status"
    assert result.volumes[10].enable512e == False, "Died on +.volumes[10].enable512e"
    assert result.volumes[10].qos.burst_iops == 15000, "Died on +.volumes[10].qos.burst_iops"
    assert result.volumes[10].qos.burst_time == 60, "Died on +.volumes[10].qos.burst_time"
    assert result.volumes[10].qos.min_iops == 50, "Died on +.volumes[10].qos.min_iops"
    assert result.volumes[10].qos.max_iops == 15000, "Died on +.volumes[10].qos.max_iops"
    assert result.volumes[10].name == """y6TZNpHwPSiqD6hB""", "Died on +.volumes[10].name"
    assert result.volumes[10].scsi_naadevice_id == """6f47acc100000000396667730000000b""", "Died on +.volumes[10].scsi_naadevice_id"
    assert result.volumes[10].total_size == 100000595968, "Died on +.volumes[10].total_size"
    assert result.volumes[10].block_size == 4096, "Died on +.volumes[10].block_size"
    assert result.volumes[10].scsi_euidevice_id == """396667730000000bf47acc0100000000""", "Died on +.volumes[10].scsi_euidevice_id"
    assert result.volumes[10].volume_id == 11, "Died on +.volumes[10].volume_id"
    assert result.volumes[10].access == """readWrite""", "Died on +.volumes[10].access"
    assert result.volumes[10].iqn == """iqn.2010-01.com.solidfire:9fgs.y6tznphwpsiqd6hb.11""", "Died on +.volumes[10].iqn"
    assert result.volumes[10].slice_count == 1, "Died on +.volumes[10].slice_count"
    assert type(result.volumes[10].attributes) is dict, "Died on .volumes[10].attributes"
    assert result.volumes[10].account_id == 1, "Died on +.volumes[10].account_id"
    assert result.volumes[10].create_time == """2017-01-12T20:47:57Z""", "Died on +.volumes[10].create_time"
    assert result.volumes[10].virtual_volume_id is None, "Died on .volumes[10].virtual_volume_id"
    assert result.volumes[9].status == """active""", "Died on +.volumes[9].status"
    assert result.volumes[9].enable512e == False, "Died on +.volumes[9].enable512e"
    assert result.volumes[9].qos.burst_iops == 15000, "Died on +.volumes[9].qos.burst_iops"
    assert result.volumes[9].qos.burst_time == 60, "Died on +.volumes[9].qos.burst_time"
    assert result.volumes[9].qos.min_iops == 50, "Died on +.volumes[9].qos.min_iops"
    assert result.volumes[9].qos.max_iops == 15000, "Died on +.volumes[9].qos.max_iops"
    assert result.volumes[9].name == """K6tpTdypUXqlrFFb""", "Died on +.volumes[9].name"
    assert result.volumes[9].scsi_naadevice_id == """6f47acc100000000396667730000000a""", "Died on +.volumes[9].scsi_naadevice_id"
    assert result.volumes[9].total_size == 100000595968, "Died on +.volumes[9].total_size"
    assert result.volumes[9].block_size == 4096, "Died on +.volumes[9].block_size"
    assert result.volumes[9].scsi_euidevice_id == """396667730000000af47acc0100000000""", "Died on +.volumes[9].scsi_euidevice_id"
    assert result.volumes[9].volume_id == 10, "Died on +.volumes[9].volume_id"
    assert result.volumes[9].access == """readWrite""", "Died on +.volumes[9].access"
    assert result.volumes[9].iqn == """iqn.2010-01.com.solidfire:9fgs.k6tptdypuxqlrffb.10""", "Died on +.volumes[9].iqn"
    assert result.volumes[9].slice_count == 1, "Died on +.volumes[9].slice_count"
    assert type(result.volumes[9].attributes) is dict, "Died on .volumes[9].attributes"
    assert result.volumes[9].account_id == 1, "Died on +.volumes[9].account_id"
    assert result.volumes[9].create_time == """2017-01-12T20:47:57Z""", "Died on +.volumes[9].create_time"
    assert result.volumes[9].virtual_volume_id is None, "Died on .volumes[9].virtual_volume_id"
    assert result.volumes[8].status == """active""", "Died on +.volumes[8].status"
    assert result.volumes[8].enable512e == False, "Died on +.volumes[8].enable512e"
    assert result.volumes[8].qos.burst_iops == 15000, "Died on +.volumes[8].qos.burst_iops"
    assert result.volumes[8].qos.burst_time == 60, "Died on +.volumes[8].qos.burst_time"
    assert result.volumes[8].qos.min_iops == 50, "Died on +.volumes[8].qos.min_iops"
    assert result.volumes[8].qos.max_iops == 15000, "Died on +.volumes[8].qos.max_iops"
    assert result.volumes[8].name == """qfd0XN3T9RkW4yN3""", "Died on +.volumes[8].name"
    assert result.volumes[8].scsi_naadevice_id == """6f47acc1000000003966677300000009""", "Died on +.volumes[8].scsi_naadevice_id"
    assert result.volumes[8].total_size == 100000595968, "Died on +.volumes[8].total_size"
    assert result.volumes[8].block_size == 4096, "Died on +.volumes[8].block_size"
    assert result.volumes[8].scsi_euidevice_id == """3966677300000009f47acc0100000000""", "Died on +.volumes[8].scsi_euidevice_id"
    assert result.volumes[8].volume_id == 9, "Died on +.volumes[8].volume_id"
    assert result.volumes[8].access == """readWrite""", "Died on +.volumes[8].access"
    assert result.volumes[8].iqn == """iqn.2010-01.com.solidfire:9fgs.qfd0xn3t9rkw4yn3.9""", "Died on +.volumes[8].iqn"
    assert result.volumes[8].slice_count == 1, "Died on +.volumes[8].slice_count"
    assert type(result.volumes[8].attributes) is dict, "Died on .volumes[8].attributes"
    assert result.volumes[8].account_id == 1, "Died on +.volumes[8].account_id"
    assert result.volumes[8].create_time == """2017-01-12T20:47:57Z""", "Died on +.volumes[8].create_time"
    assert result.volumes[8].virtual_volume_id is None, "Died on .volumes[8].virtual_volume_id"
    assert result.volumes[7].status == """active""", "Died on +.volumes[7].status"
    assert result.volumes[7].enable512e == False, "Died on +.volumes[7].enable512e"
    assert result.volumes[7].qos.burst_iops == 15000, "Died on +.volumes[7].qos.burst_iops"
    assert result.volumes[7].qos.burst_time == 60, "Died on +.volumes[7].qos.burst_time"
    assert result.volumes[7].qos.min_iops == 50, "Died on +.volumes[7].qos.min_iops"
    assert result.volumes[7].qos.max_iops == 15000, "Died on +.volumes[7].qos.max_iops"
    assert result.volumes[7].name == """x6UNSWXuR3VoPhax""", "Died on +.volumes[7].name"
    assert result.volumes[7].scsi_naadevice_id == """6f47acc1000000003966677300000008""", "Died on +.volumes[7].scsi_naadevice_id"
    assert result.volumes[7].total_size == 100000595968, "Died on +.volumes[7].total_size"
    assert result.volumes[7].block_size == 4096, "Died on +.volumes[7].block_size"
    assert result.volumes[7].scsi_euidevice_id == """3966677300000008f47acc0100000000""", "Died on +.volumes[7].scsi_euidevice_id"
    assert result.volumes[7].volume_id == 8, "Died on +.volumes[7].volume_id"
    assert result.volumes[7].access == """readWrite""", "Died on +.volumes[7].access"
    assert result.volumes[7].iqn == """iqn.2010-01.com.solidfire:9fgs.x6unswxur3vophax.8""", "Died on +.volumes[7].iqn"
    assert result.volumes[7].slice_count == 1, "Died on +.volumes[7].slice_count"
    assert type(result.volumes[7].attributes) is dict, "Died on .volumes[7].attributes"
    assert result.volumes[7].account_id == 1, "Died on +.volumes[7].account_id"
    assert result.volumes[7].create_time == """2017-01-12T20:47:57Z""", "Died on +.volumes[7].create_time"
    assert result.volumes[7].virtual_volume_id is None, "Died on .volumes[7].virtual_volume_id"
    assert result.volumes[6].status == """active""", "Died on +.volumes[6].status"
    assert result.volumes[6].enable512e == False, "Died on +.volumes[6].enable512e"
    assert result.volumes[6].qos.burst_iops == 15000, "Died on +.volumes[6].qos.burst_iops"
    assert result.volumes[6].qos.burst_time == 60, "Died on +.volumes[6].qos.burst_time"
    assert result.volumes[6].qos.min_iops == 50, "Died on +.volumes[6].qos.min_iops"
    assert result.volumes[6].qos.max_iops == 15000, "Died on +.volumes[6].qos.max_iops"
    assert result.volumes[6].name == """7X7iOT7xH6jAISSw""", "Died on +.volumes[6].name"
    assert result.volumes[6].scsi_naadevice_id == """6f47acc1000000003966677300000007""", "Died on +.volumes[6].scsi_naadevice_id"
    assert result.volumes[6].total_size == 100000595968, "Died on +.volumes[6].total_size"
    assert result.volumes[6].block_size == 4096, "Died on +.volumes[6].block_size"
    assert result.volumes[6].scsi_euidevice_id == """3966677300000007f47acc0100000000""", "Died on +.volumes[6].scsi_euidevice_id"
    assert result.volumes[6].volume_id == 7, "Died on +.volumes[6].volume_id"
    assert result.volumes[6].access == """readWrite""", "Died on +.volumes[6].access"
    assert result.volumes[6].iqn == """iqn.2010-01.com.solidfire:9fgs.7x7iot7xh6jaissw.7""", "Died on +.volumes[6].iqn"
    assert result.volumes[6].slice_count == 1, "Died on +.volumes[6].slice_count"
    assert type(result.volumes[6].attributes) is dict, "Died on .volumes[6].attributes"
    assert result.volumes[6].account_id == 1, "Died on +.volumes[6].account_id"
    assert result.volumes[6].create_time == """2017-01-12T20:47:57Z""", "Died on +.volumes[6].create_time"
    assert result.volumes[6].virtual_volume_id is None, "Died on .volumes[6].virtual_volume_id"
    assert result.volumes[5].status == """active""", "Died on +.volumes[5].status"
    assert result.volumes[5].enable512e == False, "Died on +.volumes[5].enable512e"
    assert result.volumes[5].qos.burst_iops == 15000, "Died on +.volumes[5].qos.burst_iops"
    assert result.volumes[5].qos.burst_time == 60, "Died on +.volumes[5].qos.burst_time"
    assert result.volumes[5].qos.min_iops == 50, "Died on +.volumes[5].qos.min_iops"
    assert result.volumes[5].qos.max_iops == 15000, "Died on +.volumes[5].qos.max_iops"
    assert result.volumes[5].name == """itHoJnrZRJQbtM2T""", "Died on +.volumes[5].name"
    assert result.volumes[5].scsi_naadevice_id == """6f47acc1000000003966677300000006""", "Died on +.volumes[5].scsi_naadevice_id"
    assert result.volumes[5].total_size == 100000595968, "Died on +.volumes[5].total_size"
    assert result.volumes[5].block_size == 4096, "Died on +.volumes[5].block_size"
    assert result.volumes[5].scsi_euidevice_id == """3966677300000006f47acc0100000000""", "Died on +.volumes[5].scsi_euidevice_id"
    assert result.volumes[5].volume_id == 6, "Died on +.volumes[5].volume_id"
    assert result.volumes[5].access == """readWrite""", "Died on +.volumes[5].access"
    assert result.volumes[5].iqn == """iqn.2010-01.com.solidfire:9fgs.ithojnrzrjqbtm2t.6""", "Died on +.volumes[5].iqn"
    assert result.volumes[5].slice_count == 1, "Died on +.volumes[5].slice_count"
    assert type(result.volumes[5].attributes) is dict, "Died on .volumes[5].attributes"
    assert result.volumes[5].account_id == 1, "Died on +.volumes[5].account_id"
    assert result.volumes[5].create_time == """2017-01-12T20:47:56Z""", "Died on +.volumes[5].create_time"
    assert result.volumes[5].virtual_volume_id is None, "Died on .volumes[5].virtual_volume_id"
    assert result.volumes[4].status == """active""", "Died on +.volumes[4].status"
    assert result.volumes[4].enable512e == False, "Died on +.volumes[4].enable512e"
    assert result.volumes[4].qos.burst_iops == 15000, "Died on +.volumes[4].qos.burst_iops"
    assert result.volumes[4].qos.burst_time == 60, "Died on +.volumes[4].qos.burst_time"
    assert result.volumes[4].qos.min_iops == 50, "Died on +.volumes[4].qos.min_iops"
    assert result.volumes[4].qos.max_iops == 15000, "Died on +.volumes[4].qos.max_iops"
    assert result.volumes[4].name == """LDSTqvfpQXk21pyt""", "Died on +.volumes[4].name"
    assert result.volumes[4].scsi_naadevice_id == """6f47acc1000000003966677300000005""", "Died on +.volumes[4].scsi_naadevice_id"
    assert result.volumes[4].total_size == 100000595968, "Died on +.volumes[4].total_size"
    assert result.volumes[4].block_size == 4096, "Died on +.volumes[4].block_size"
    assert result.volumes[4].scsi_euidevice_id == """3966677300000005f47acc0100000000""", "Died on +.volumes[4].scsi_euidevice_id"
    assert result.volumes[4].volume_id == 5, "Died on +.volumes[4].volume_id"
    assert result.volumes[4].access == """readWrite""", "Died on +.volumes[4].access"
    assert result.volumes[4].iqn == """iqn.2010-01.com.solidfire:9fgs.ldstqvfpqxk21pyt.5""", "Died on +.volumes[4].iqn"
    assert result.volumes[4].slice_count == 1, "Died on +.volumes[4].slice_count"
    assert type(result.volumes[4].attributes) is dict, "Died on .volumes[4].attributes"
    assert result.volumes[4].account_id == 1, "Died on +.volumes[4].account_id"
    assert result.volumes[4].create_time == """2017-01-12T20:47:56Z""", "Died on +.volumes[4].create_time"
    assert result.volumes[4].virtual_volume_id is None, "Died on .volumes[4].virtual_volume_id"
    assert result.volumes[3].status == """active""", "Died on +.volumes[3].status"
    assert result.volumes[3].enable512e == False, "Died on +.volumes[3].enable512e"
    assert result.volumes[3].qos.burst_iops == 15000, "Died on +.volumes[3].qos.burst_iops"
    assert result.volumes[3].qos.burst_time == 60, "Died on +.volumes[3].qos.burst_time"
    assert result.volumes[3].qos.min_iops == 50, "Died on +.volumes[3].qos.min_iops"
    assert result.volumes[3].qos.max_iops == 15000, "Died on +.volumes[3].qos.max_iops"
    assert result.volumes[3].name == """faJWsqqfH8OEvq17""", "Died on +.volumes[3].name"
    assert result.volumes[3].scsi_naadevice_id == """6f47acc1000000003966677300000004""", "Died on +.volumes[3].scsi_naadevice_id"
    assert result.volumes[3].total_size == 100000595968, "Died on +.volumes[3].total_size"
    assert result.volumes[3].block_size == 4096, "Died on +.volumes[3].block_size"
    assert result.volumes[3].scsi_euidevice_id == """3966677300000004f47acc0100000000""", "Died on +.volumes[3].scsi_euidevice_id"
    assert result.volumes[3].volume_id == 4, "Died on +.volumes[3].volume_id"
    assert result.volumes[3].access == """readWrite""", "Died on +.volumes[3].access"
    assert result.volumes[3].iqn == """iqn.2010-01.com.solidfire:9fgs.fajwsqqfh8oevq17.4""", "Died on +.volumes[3].iqn"
    assert result.volumes[3].slice_count == 1, "Died on +.volumes[3].slice_count"
    assert type(result.volumes[3].attributes) is dict, "Died on .volumes[3].attributes"
    assert result.volumes[3].account_id == 1, "Died on +.volumes[3].account_id"
    assert result.volumes[3].create_time == """2017-01-12T20:47:56Z""", "Died on +.volumes[3].create_time"
    assert result.volumes[3].virtual_volume_id is None, "Died on .volumes[3].virtual_volume_id"
    assert result.volumes[2].status == """active""", "Died on +.volumes[2].status"
    assert result.volumes[2].enable512e == False, "Died on +.volumes[2].enable512e"
    assert result.volumes[2].qos.burst_iops == 15000, "Died on +.volumes[2].qos.burst_iops"
    assert result.volumes[2].qos.burst_time == 60, "Died on +.volumes[2].qos.burst_time"
    assert result.volumes[2].qos.min_iops == 50, "Died on +.volumes[2].qos.min_iops"
    assert result.volumes[2].qos.max_iops == 15000, "Died on +.volumes[2].qos.max_iops"
    assert result.volumes[2].name == """PpAY6R9Plpng0gKc""", "Died on +.volumes[2].name"
    assert result.volumes[2].scsi_naadevice_id == """6f47acc1000000003966677300000003""", "Died on +.volumes[2].scsi_naadevice_id"
    assert result.volumes[2].total_size == 100000595968, "Died on +.volumes[2].total_size"
    assert result.volumes[2].block_size == 4096, "Died on +.volumes[2].block_size"
    assert result.volumes[2].scsi_euidevice_id == """3966677300000003f47acc0100000000""", "Died on +.volumes[2].scsi_euidevice_id"
    assert result.volumes[2].volume_id == 3, "Died on +.volumes[2].volume_id"
    assert result.volumes[2].access == """readWrite""", "Died on +.volumes[2].access"
    assert result.volumes[2].iqn == """iqn.2010-01.com.solidfire:9fgs.ppay6r9plpng0gkc.3""", "Died on +.volumes[2].iqn"
    assert result.volumes[2].slice_count == 1, "Died on +.volumes[2].slice_count"
    assert type(result.volumes[2].attributes) is dict, "Died on .volumes[2].attributes"
    assert result.volumes[2].account_id == 1, "Died on +.volumes[2].account_id"
    assert result.volumes[2].create_time == """2017-01-12T20:47:56Z""", "Died on +.volumes[2].create_time"
    assert result.volumes[2].virtual_volume_id is None, "Died on .volumes[2].virtual_volume_id"
    assert result.volumes[1].status == """active""", "Died on +.volumes[1].status"
    assert result.volumes[1].enable512e == False, "Died on +.volumes[1].enable512e"
    assert result.volumes[1].qos.burst_iops == 15000, "Died on +.volumes[1].qos.burst_iops"
    assert result.volumes[1].qos.burst_time == 60, "Died on +.volumes[1].qos.burst_time"
    assert result.volumes[1].qos.min_iops == 50, "Died on +.volumes[1].qos.min_iops"
    assert result.volumes[1].qos.max_iops == 15000, "Died on +.volumes[1].qos.max_iops"
    assert result.volumes[1].name == """Gy0Sfu83xoYrBaVZ""", "Died on +.volumes[1].name"
    assert result.volumes[1].scsi_naadevice_id == """6f47acc1000000003966677300000002""", "Died on +.volumes[1].scsi_naadevice_id"
    assert result.volumes[1].total_size == 100000595968, "Died on +.volumes[1].total_size"
    assert result.volumes[1].block_size == 4096, "Died on +.volumes[1].block_size"
    assert result.volumes[1].scsi_euidevice_id == """3966677300000002f47acc0100000000""", "Died on +.volumes[1].scsi_euidevice_id"
    assert result.volumes[1].volume_id == 2, "Died on +.volumes[1].volume_id"
    assert result.volumes[1].access == """readWrite""", "Died on +.volumes[1].access"
    assert result.volumes[1].iqn == """iqn.2010-01.com.solidfire:9fgs.gy0sfu83xoyrbavz.2""", "Died on +.volumes[1].iqn"
    assert result.volumes[1].slice_count == 1, "Died on +.volumes[1].slice_count"
    assert type(result.volumes[1].attributes) is dict, "Died on .volumes[1].attributes"
    assert result.volumes[1].account_id == 1, "Died on +.volumes[1].account_id"
    assert result.volumes[1].create_time == """2017-01-12T20:47:56Z""", "Died on +.volumes[1].create_time"
    assert result.volumes[1].virtual_volume_id is None, "Died on .volumes[1].virtual_volume_id"
    assert result.volumes[0].status == """active""", "Died on +.volumes[0].status"
    assert result.volumes[0].enable512e == False, "Died on +.volumes[0].enable512e"
    assert result.volumes[0].qos.burst_iops == 15000, "Died on +.volumes[0].qos.burst_iops"
    assert result.volumes[0].qos.burst_time == 60, "Died on +.volumes[0].qos.burst_time"
    assert result.volumes[0].qos.min_iops == 50, "Died on +.volumes[0].qos.min_iops"
    assert result.volumes[0].qos.max_iops == 15000, "Died on +.volumes[0].qos.max_iops"
    assert result.volumes[0].name == """yaYcfHDje3QwXeiD""", "Died on +.volumes[0].name"
    assert result.volumes[0].scsi_naadevice_id == """6f47acc1000000003966677300000001""", "Died on +.volumes[0].scsi_naadevice_id"
    assert result.volumes[0].total_size == 100000595968, "Died on +.volumes[0].total_size"
    assert result.volumes[0].block_size == 4096, "Died on +.volumes[0].block_size"
    assert result.volumes[0].scsi_euidevice_id == """3966677300000001f47acc0100000000""", "Died on +.volumes[0].scsi_euidevice_id"
    assert result.volumes[0].volume_id == 1, "Died on +.volumes[0].volume_id"
    assert result.volumes[0].access == """readWrite""", "Died on +.volumes[0].access"
    assert result.volumes[0].iqn == """iqn.2010-01.com.solidfire:9fgs.yaycfhdje3qwxeid.1""", "Died on +.volumes[0].iqn"
    assert result.volumes[0].slice_count == 1, "Died on +.volumes[0].slice_count"
    assert type(result.volumes[0].attributes) is dict, "Died on .volumes[0].attributes"
    assert result.volumes[0].account_id == 1, "Died on +.volumes[0].account_id"
    assert result.volumes[0].create_time == """2017-01-12T20:47:56Z""", "Died on +.volumes[0].create_time"
    assert result.volumes[0].virtual_volume_id is None, "Died on .volumes[0].virtual_volume_id"

def test_list_active_volumes_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListActiveVolumes_v9.1_0)

    
    start_volume_id = 42 # start_volume_id
    limit = 42 # limit
    result = ef.list_active_volumes()
    assert result.volumes[25].status == """active""", "Died on +.volumes[25].status"
    assert result.volumes[25].enable512e == False, "Died on +.volumes[25].enable512e"
    assert result.volumes[25].qos.burst_iops == 15000, "Died on +.volumes[25].qos.burst_iops"
    assert result.volumes[25].qos.burst_time == 60, "Died on +.volumes[25].qos.burst_time"
    assert result.volumes[25].qos.min_iops == 100, "Died on +.volumes[25].qos.min_iops"
    assert result.volumes[25].qos.max_iops == 15000, "Died on +.volumes[25].qos.max_iops"
    assert result.volumes[25].name == """source-volume-1600GB-4096-1""", "Died on +.volumes[25].name"
    assert result.volumes[25].volume_access_groups[0] == 4, "Died on +.volumes[25].volume_access_groups[0]"
    assert result.volumes[25].scsi_naadevice_id == """6f47acc1000000006439766d0000001a""", "Died on +.volumes[25].scsi_naadevice_id"
    assert result.volumes[25].total_size == 1600000098304, "Died on +.volumes[25].total_size"
    assert result.volumes[25].block_size == 4096, "Died on +.volumes[25].block_size"
    assert result.volumes[25].scsi_euidevice_id == """6439766d0000001af47acc0100000000""", "Died on +.volumes[25].scsi_euidevice_id"
    assert result.volumes[25].volume_id == 26, "Died on +.volumes[25].volume_id"
    assert result.volumes[25].access == """readWrite""", "Died on +.volumes[25].access"
    assert result.volumes[25].iqn == """iqn.2010-01.com.solidfire:d9vm.source-volume-1600gb-4096-1.26""", "Died on +.volumes[25].iqn"
    assert result.volumes[25].slice_count == 1, "Died on +.volumes[25].slice_count"
    assert type(result.volumes[25].attributes) is dict, "Died on .volumes[25].attributes"
    assert result.volumes[25].account_id == 1, "Died on +.volumes[25].account_id"
    assert result.volumes[25].create_time == """2016-12-30T17:39:52Z""", "Died on +.volumes[25].create_time"
    assert result.volumes[25].virtual_volume_id is None, "Died on .volumes[25].virtual_volume_id"
    assert result.volumes[24].status == """active""", "Died on +.volumes[24].status"
    assert result.volumes[24].enable512e == True, "Died on +.volumes[24].enable512e"
    assert result.volumes[24].qos.burst_iops == 15000, "Died on +.volumes[24].qos.burst_iops"
    assert result.volumes[24].qos.burst_time == 60, "Died on +.volumes[24].qos.burst_time"
    assert result.volumes[24].qos.min_iops == 100, "Died on +.volumes[24].qos.min_iops"
    assert result.volumes[24].qos.max_iops == 15000, "Died on +.volumes[24].qos.max_iops"
    assert result.volumes[24].name == """source-volume-1600GB-512e-1""", "Died on +.volumes[24].name"
    assert result.volumes[24].volume_access_groups[0] == 4, "Died on +.volumes[24].volume_access_groups[0]"
    assert result.volumes[24].scsi_naadevice_id == """6f47acc1000000006439766d00000019""", "Died on +.volumes[24].scsi_naadevice_id"
    assert result.volumes[24].total_size == 1600000098304, "Died on +.volumes[24].total_size"
    assert result.volumes[24].block_size == 4096, "Died on +.volumes[24].block_size"
    assert result.volumes[24].scsi_euidevice_id == """6439766d00000019f47acc0100000000""", "Died on +.volumes[24].scsi_euidevice_id"
    assert result.volumes[24].volume_id == 25, "Died on +.volumes[24].volume_id"
    assert result.volumes[24].access == """readWrite""", "Died on +.volumes[24].access"
    assert result.volumes[24].iqn == """iqn.2010-01.com.solidfire:d9vm.source-volume-1600gb-512e-1.25""", "Died on +.volumes[24].iqn"
    assert result.volumes[24].slice_count == 1, "Died on +.volumes[24].slice_count"
    assert type(result.volumes[24].attributes) is dict, "Died on .volumes[24].attributes"
    assert result.volumes[24].account_id == 1, "Died on +.volumes[24].account_id"
    assert result.volumes[24].create_time == """2016-12-30T17:39:49Z""", "Died on +.volumes[24].create_time"
    assert result.volumes[24].virtual_volume_id is None, "Died on .volumes[24].virtual_volume_id"
    assert result.volumes[23].status == """active""", "Died on +.volumes[23].status"
    assert result.volumes[23].enable512e == False, "Died on +.volumes[23].enable512e"
    assert result.volumes[23].qos.burst_iops == 15000, "Died on +.volumes[23].qos.burst_iops"
    assert result.volumes[23].qos.burst_time == 60, "Died on +.volumes[23].qos.burst_time"
    assert result.volumes[23].qos.min_iops == 100, "Died on +.volumes[23].qos.min_iops"
    assert result.volumes[23].qos.max_iops == 15000, "Died on +.volumes[23].qos.max_iops"
    assert result.volumes[23].name == """source-volume-100GB-4096-4""", "Died on +.volumes[23].name"
    assert result.volumes[23].volume_access_groups[0] == 3, "Died on +.volumes[23].volume_access_groups[0]"
    assert result.volumes[23].scsi_naadevice_id == """6f47acc1000000006439766d00000018""", "Died on +.volumes[23].scsi_naadevice_id"
    assert result.volumes[23].total_size == 100000595968, "Died on +.volumes[23].total_size"
    assert result.volumes[23].block_size == 4096, "Died on +.volumes[23].block_size"
    assert result.volumes[23].scsi_euidevice_id == """6439766d00000018f47acc0100000000""", "Died on +.volumes[23].scsi_euidevice_id"
    assert result.volumes[23].volume_id == 24, "Died on +.volumes[23].volume_id"
    assert result.volumes[23].access == """readWrite""", "Died on +.volumes[23].access"
    assert result.volumes[23].iqn == """iqn.2010-01.com.solidfire:d9vm.source-volume-100gb-4096-4.24""", "Died on +.volumes[23].iqn"
    assert result.volumes[23].slice_count == 1, "Died on +.volumes[23].slice_count"
    assert type(result.volumes[23].attributes) is dict, "Died on .volumes[23].attributes"
    assert result.volumes[23].account_id == 1, "Died on +.volumes[23].account_id"
    assert result.volumes[23].create_time == """2016-12-30T17:37:40Z""", "Died on +.volumes[23].create_time"
    assert result.volumes[23].virtual_volume_id is None, "Died on .volumes[23].virtual_volume_id"
    assert result.volumes[22].status == """active""", "Died on +.volumes[22].status"
    assert result.volumes[22].enable512e == False, "Died on +.volumes[22].enable512e"
    assert result.volumes[22].qos.burst_iops == 15000, "Died on +.volumes[22].qos.burst_iops"
    assert result.volumes[22].qos.burst_time == 60, "Died on +.volumes[22].qos.burst_time"
    assert result.volumes[22].qos.min_iops == 100, "Died on +.volumes[22].qos.min_iops"
    assert result.volumes[22].qos.max_iops == 15000, "Died on +.volumes[22].qos.max_iops"
    assert result.volumes[22].name == """source-volume-100GB-4096-3""", "Died on +.volumes[22].name"
    assert result.volumes[22].volume_access_groups[0] == 3, "Died on +.volumes[22].volume_access_groups[0]"
    assert result.volumes[22].scsi_naadevice_id == """6f47acc1000000006439766d00000017""", "Died on +.volumes[22].scsi_naadevice_id"
    assert result.volumes[22].total_size == 100000595968, "Died on +.volumes[22].total_size"
    assert result.volumes[22].block_size == 4096, "Died on +.volumes[22].block_size"
    assert result.volumes[22].scsi_euidevice_id == """6439766d00000017f47acc0100000000""", "Died on +.volumes[22].scsi_euidevice_id"
    assert result.volumes[22].volume_id == 23, "Died on +.volumes[22].volume_id"
    assert result.volumes[22].access == """readWrite""", "Died on +.volumes[22].access"
    assert result.volumes[22].iqn == """iqn.2010-01.com.solidfire:d9vm.source-volume-100gb-4096-3.23""", "Died on +.volumes[22].iqn"
    assert result.volumes[22].slice_count == 1, "Died on +.volumes[22].slice_count"
    assert type(result.volumes[22].attributes) is dict, "Died on .volumes[22].attributes"
    assert result.volumes[22].account_id == 1, "Died on +.volumes[22].account_id"
    assert result.volumes[22].create_time == """2016-12-30T17:37:40Z""", "Died on +.volumes[22].create_time"
    assert result.volumes[22].virtual_volume_id is None, "Died on .volumes[22].virtual_volume_id"
    assert result.volumes[21].status == """active""", "Died on +.volumes[21].status"
    assert result.volumes[21].enable512e == False, "Died on +.volumes[21].enable512e"
    assert result.volumes[21].qos.burst_iops == 15000, "Died on +.volumes[21].qos.burst_iops"
    assert result.volumes[21].qos.burst_time == 60, "Died on +.volumes[21].qos.burst_time"
    assert result.volumes[21].qos.min_iops == 100, "Died on +.volumes[21].qos.min_iops"
    assert result.volumes[21].qos.max_iops == 15000, "Died on +.volumes[21].qos.max_iops"
    assert result.volumes[21].name == """source-volume-100GB-4096-2""", "Died on +.volumes[21].name"
    assert result.volumes[21].volume_access_groups[0] == 3, "Died on +.volumes[21].volume_access_groups[0]"
    assert result.volumes[21].scsi_naadevice_id == """6f47acc1000000006439766d00000016""", "Died on +.volumes[21].scsi_naadevice_id"
    assert result.volumes[21].total_size == 100000595968, "Died on +.volumes[21].total_size"
    assert result.volumes[21].block_size == 4096, "Died on +.volumes[21].block_size"
    assert result.volumes[21].scsi_euidevice_id == """6439766d00000016f47acc0100000000""", "Died on +.volumes[21].scsi_euidevice_id"
    assert result.volumes[21].volume_id == 22, "Died on +.volumes[21].volume_id"
    assert result.volumes[21].access == """readWrite""", "Died on +.volumes[21].access"
    assert result.volumes[21].iqn == """iqn.2010-01.com.solidfire:d9vm.source-volume-100gb-4096-2.22""", "Died on +.volumes[21].iqn"
    assert result.volumes[21].slice_count == 1, "Died on +.volumes[21].slice_count"
    assert type(result.volumes[21].attributes) is dict, "Died on .volumes[21].attributes"
    assert result.volumes[21].account_id == 1, "Died on +.volumes[21].account_id"
    assert result.volumes[21].create_time == """2016-12-30T17:37:40Z""", "Died on +.volumes[21].create_time"
    assert result.volumes[21].virtual_volume_id is None, "Died on .volumes[21].virtual_volume_id"
    assert result.volumes[20].status == """active""", "Died on +.volumes[20].status"
    assert result.volumes[20].enable512e == False, "Died on +.volumes[20].enable512e"
    assert result.volumes[20].qos.burst_iops == 15000, "Died on +.volumes[20].qos.burst_iops"
    assert result.volumes[20].qos.burst_time == 60, "Died on +.volumes[20].qos.burst_time"
    assert result.volumes[20].qos.min_iops == 100, "Died on +.volumes[20].qos.min_iops"
    assert result.volumes[20].qos.max_iops == 15000, "Died on +.volumes[20].qos.max_iops"
    assert result.volumes[20].name == """source-volume-100GB-4096-1""", "Died on +.volumes[20].name"
    assert result.volumes[20].volume_access_groups[0] == 3, "Died on +.volumes[20].volume_access_groups[0]"
    assert result.volumes[20].scsi_naadevice_id == """6f47acc1000000006439766d00000015""", "Died on +.volumes[20].scsi_naadevice_id"
    assert result.volumes[20].total_size == 100000595968, "Died on +.volumes[20].total_size"
    assert result.volumes[20].block_size == 4096, "Died on +.volumes[20].block_size"
    assert result.volumes[20].scsi_euidevice_id == """6439766d00000015f47acc0100000000""", "Died on +.volumes[20].scsi_euidevice_id"
    assert result.volumes[20].volume_id == 21, "Died on +.volumes[20].volume_id"
    assert result.volumes[20].access == """readWrite""", "Died on +.volumes[20].access"
    assert result.volumes[20].iqn == """iqn.2010-01.com.solidfire:d9vm.source-volume-100gb-4096-1.21""", "Died on +.volumes[20].iqn"
    assert result.volumes[20].slice_count == 1, "Died on +.volumes[20].slice_count"
    assert type(result.volumes[20].attributes) is dict, "Died on .volumes[20].attributes"
    assert result.volumes[20].account_id == 1, "Died on +.volumes[20].account_id"
    assert result.volumes[20].create_time == """2016-12-30T17:37:40Z""", "Died on +.volumes[20].create_time"
    assert result.volumes[20].virtual_volume_id is None, "Died on .volumes[20].virtual_volume_id"
    assert result.volumes[19].status == """active""", "Died on +.volumes[19].status"
    assert result.volumes[19].enable512e == True, "Died on +.volumes[19].enable512e"
    assert result.volumes[19].qos.burst_iops == 15000, "Died on +.volumes[19].qos.burst_iops"
    assert result.volumes[19].qos.burst_time == 60, "Died on +.volumes[19].qos.burst_time"
    assert result.volumes[19].qos.min_iops == 100, "Died on +.volumes[19].qos.min_iops"
    assert result.volumes[19].qos.max_iops == 15000, "Died on +.volumes[19].qos.max_iops"
    assert result.volumes[19].name == """source-volume-100GB-512e-4""", "Died on +.volumes[19].name"
    assert result.volumes[19].volume_access_groups[0] == 3, "Died on +.volumes[19].volume_access_groups[0]"
    assert result.volumes[19].scsi_naadevice_id == """6f47acc1000000006439766d00000014""", "Died on +.volumes[19].scsi_naadevice_id"
    assert result.volumes[19].total_size == 100000595968, "Died on +.volumes[19].total_size"
    assert result.volumes[19].block_size == 4096, "Died on +.volumes[19].block_size"
    assert result.volumes[19].scsi_euidevice_id == """6439766d00000014f47acc0100000000""", "Died on +.volumes[19].scsi_euidevice_id"
    assert result.volumes[19].volume_id == 20, "Died on +.volumes[19].volume_id"
    assert result.volumes[19].access == """readWrite""", "Died on +.volumes[19].access"
    assert result.volumes[19].iqn == """iqn.2010-01.com.solidfire:d9vm.source-volume-100gb-512e-4.20""", "Died on +.volumes[19].iqn"
    assert result.volumes[19].slice_count == 1, "Died on +.volumes[19].slice_count"
    assert type(result.volumes[19].attributes) is dict, "Died on .volumes[19].attributes"
    assert result.volumes[19].account_id == 1, "Died on +.volumes[19].account_id"
    assert result.volumes[19].create_time == """2016-12-30T17:37:21Z""", "Died on +.volumes[19].create_time"
    assert result.volumes[19].virtual_volume_id is None, "Died on .volumes[19].virtual_volume_id"
    assert result.volumes[18].status == """active""", "Died on +.volumes[18].status"
    assert result.volumes[18].enable512e == True, "Died on +.volumes[18].enable512e"
    assert result.volumes[18].qos.burst_iops == 15000, "Died on +.volumes[18].qos.burst_iops"
    assert result.volumes[18].qos.burst_time == 60, "Died on +.volumes[18].qos.burst_time"
    assert result.volumes[18].qos.min_iops == 100, "Died on +.volumes[18].qos.min_iops"
    assert result.volumes[18].qos.max_iops == 15000, "Died on +.volumes[18].qos.max_iops"
    assert result.volumes[18].name == """source-volume-100GB-512e-3""", "Died on +.volumes[18].name"
    assert result.volumes[18].volume_access_groups[0] == 3, "Died on +.volumes[18].volume_access_groups[0]"
    assert result.volumes[18].scsi_naadevice_id == """6f47acc1000000006439766d00000013""", "Died on +.volumes[18].scsi_naadevice_id"
    assert result.volumes[18].total_size == 100000595968, "Died on +.volumes[18].total_size"
    assert result.volumes[18].block_size == 4096, "Died on +.volumes[18].block_size"
    assert result.volumes[18].scsi_euidevice_id == """6439766d00000013f47acc0100000000""", "Died on +.volumes[18].scsi_euidevice_id"
    assert result.volumes[18].volume_id == 19, "Died on +.volumes[18].volume_id"
    assert result.volumes[18].access == """readWrite""", "Died on +.volumes[18].access"
    assert result.volumes[18].iqn == """iqn.2010-01.com.solidfire:d9vm.source-volume-100gb-512e-3.19""", "Died on +.volumes[18].iqn"
    assert result.volumes[18].slice_count == 1, "Died on +.volumes[18].slice_count"
    assert type(result.volumes[18].attributes) is dict, "Died on .volumes[18].attributes"
    assert result.volumes[18].account_id == 1, "Died on +.volumes[18].account_id"
    assert result.volumes[18].create_time == """2016-12-30T17:37:21Z""", "Died on +.volumes[18].create_time"
    assert result.volumes[18].virtual_volume_id is None, "Died on .volumes[18].virtual_volume_id"
    assert result.volumes[17].status == """active""", "Died on +.volumes[17].status"
    assert result.volumes[17].enable512e == True, "Died on +.volumes[17].enable512e"
    assert result.volumes[17].qos.burst_iops == 15000, "Died on +.volumes[17].qos.burst_iops"
    assert result.volumes[17].qos.burst_time == 60, "Died on +.volumes[17].qos.burst_time"
    assert result.volumes[17].qos.min_iops == 100, "Died on +.volumes[17].qos.min_iops"
    assert result.volumes[17].qos.max_iops == 15000, "Died on +.volumes[17].qos.max_iops"
    assert result.volumes[17].name == """source-volume-100GB-512e-2""", "Died on +.volumes[17].name"
    assert result.volumes[17].volume_access_groups[0] == 3, "Died on +.volumes[17].volume_access_groups[0]"
    assert result.volumes[17].scsi_naadevice_id == """6f47acc1000000006439766d00000012""", "Died on +.volumes[17].scsi_naadevice_id"
    assert result.volumes[17].total_size == 100000595968, "Died on +.volumes[17].total_size"
    assert result.volumes[17].block_size == 4096, "Died on +.volumes[17].block_size"
    assert result.volumes[17].scsi_euidevice_id == """6439766d00000012f47acc0100000000""", "Died on +.volumes[17].scsi_euidevice_id"
    assert result.volumes[17].volume_id == 18, "Died on +.volumes[17].volume_id"
    assert result.volumes[17].access == """readWrite""", "Died on +.volumes[17].access"
    assert result.volumes[17].iqn == """iqn.2010-01.com.solidfire:d9vm.source-volume-100gb-512e-2.18""", "Died on +.volumes[17].iqn"
    assert result.volumes[17].slice_count == 1, "Died on +.volumes[17].slice_count"
    assert type(result.volumes[17].attributes) is dict, "Died on .volumes[17].attributes"
    assert result.volumes[17].account_id == 1, "Died on +.volumes[17].account_id"
    assert result.volumes[17].create_time == """2016-12-30T17:37:21Z""", "Died on +.volumes[17].create_time"
    assert result.volumes[17].virtual_volume_id is None, "Died on .volumes[17].virtual_volume_id"
    assert result.volumes[16].status == """active""", "Died on +.volumes[16].status"
    assert result.volumes[16].enable512e == True, "Died on +.volumes[16].enable512e"
    assert result.volumes[16].qos.burst_iops == 15000, "Died on +.volumes[16].qos.burst_iops"
    assert result.volumes[16].qos.burst_time == 60, "Died on +.volumes[16].qos.burst_time"
    assert result.volumes[16].qos.min_iops == 100, "Died on +.volumes[16].qos.min_iops"
    assert result.volumes[16].qos.max_iops == 15000, "Died on +.volumes[16].qos.max_iops"
    assert result.volumes[16].name == """source-volume-100GB-512e-1""", "Died on +.volumes[16].name"
    assert result.volumes[16].volume_access_groups[0] == 3, "Died on +.volumes[16].volume_access_groups[0]"
    assert result.volumes[16].scsi_naadevice_id == """6f47acc1000000006439766d00000011""", "Died on +.volumes[16].scsi_naadevice_id"
    assert result.volumes[16].total_size == 100000595968, "Died on +.volumes[16].total_size"
    assert result.volumes[16].block_size == 4096, "Died on +.volumes[16].block_size"
    assert result.volumes[16].scsi_euidevice_id == """6439766d00000011f47acc0100000000""", "Died on +.volumes[16].scsi_euidevice_id"
    assert result.volumes[16].volume_id == 17, "Died on +.volumes[16].volume_id"
    assert result.volumes[16].access == """readWrite""", "Died on +.volumes[16].access"
    assert result.volumes[16].iqn == """iqn.2010-01.com.solidfire:d9vm.source-volume-100gb-512e-1.17""", "Died on +.volumes[16].iqn"
    assert result.volumes[16].slice_count == 1, "Died on +.volumes[16].slice_count"
    assert type(result.volumes[16].attributes) is dict, "Died on .volumes[16].attributes"
    assert result.volumes[16].account_id == 1, "Died on +.volumes[16].account_id"
    assert result.volumes[16].create_time == """2016-12-30T17:37:21Z""", "Died on +.volumes[16].create_time"
    assert result.volumes[16].virtual_volume_id is None, "Died on .volumes[16].virtual_volume_id"
    assert result.volumes[15].status == """active""", "Died on +.volumes[15].status"
    assert result.volumes[15].enable512e == False, "Died on +.volumes[15].enable512e"
    assert result.volumes[15].qos.burst_iops == 15000, "Died on +.volumes[15].qos.burst_iops"
    assert result.volumes[15].qos.burst_time == 60, "Died on +.volumes[15].qos.burst_time"
    assert result.volumes[15].qos.min_iops == 100, "Died on +.volumes[15].qos.min_iops"
    assert result.volumes[15].qos.max_iops == 15000, "Died on +.volumes[15].qos.max_iops"
    assert result.volumes[15].name == """source-volume-1GB-4096-4""", "Died on +.volumes[15].name"
    assert result.volumes[15].volume_access_groups[0] == 2, "Died on +.volumes[15].volume_access_groups[0]"
    assert result.volumes[15].scsi_naadevice_id == """6f47acc1000000006439766d00000010""", "Died on +.volumes[15].scsi_naadevice_id"
    assert result.volumes[15].total_size == 1000341504, "Died on +.volumes[15].total_size"
    assert result.volumes[15].block_size == 4096, "Died on +.volumes[15].block_size"
    assert result.volumes[15].scsi_euidevice_id == """6439766d00000010f47acc0100000000""", "Died on +.volumes[15].scsi_euidevice_id"
    assert result.volumes[15].volume_id == 16, "Died on +.volumes[15].volume_id"
    assert result.volumes[15].access == """readWrite""", "Died on +.volumes[15].access"
    assert result.volumes[15].iqn == """iqn.2010-01.com.solidfire:d9vm.source-volume-1gb-4096-4.16""", "Died on +.volumes[15].iqn"
    assert result.volumes[15].slice_count == 1, "Died on +.volumes[15].slice_count"
    assert type(result.volumes[15].attributes) is dict, "Died on .volumes[15].attributes"
    assert result.volumes[15].account_id == 1, "Died on +.volumes[15].account_id"
    assert result.volumes[15].create_time == """2016-12-30T17:35:40Z""", "Died on +.volumes[15].create_time"
    assert result.volumes[15].virtual_volume_id is None, "Died on .volumes[15].virtual_volume_id"
    assert result.volumes[14].status == """active""", "Died on +.volumes[14].status"
    assert result.volumes[14].enable512e == False, "Died on +.volumes[14].enable512e"
    assert result.volumes[14].qos.burst_iops == 15000, "Died on +.volumes[14].qos.burst_iops"
    assert result.volumes[14].qos.burst_time == 60, "Died on +.volumes[14].qos.burst_time"
    assert result.volumes[14].qos.min_iops == 100, "Died on +.volumes[14].qos.min_iops"
    assert result.volumes[14].qos.max_iops == 15000, "Died on +.volumes[14].qos.max_iops"
    assert result.volumes[14].name == """source-volume-1GB-4096-3""", "Died on +.volumes[14].name"
    assert result.volumes[14].volume_access_groups[0] == 2, "Died on +.volumes[14].volume_access_groups[0]"
    assert result.volumes[14].scsi_naadevice_id == """6f47acc1000000006439766d0000000f""", "Died on +.volumes[14].scsi_naadevice_id"
    assert result.volumes[14].total_size == 1000341504, "Died on +.volumes[14].total_size"
    assert result.volumes[14].block_size == 4096, "Died on +.volumes[14].block_size"
    assert result.volumes[14].scsi_euidevice_id == """6439766d0000000ff47acc0100000000""", "Died on +.volumes[14].scsi_euidevice_id"
    assert result.volumes[14].volume_id == 15, "Died on +.volumes[14].volume_id"
    assert result.volumes[14].access == """readWrite""", "Died on +.volumes[14].access"
    assert result.volumes[14].iqn == """iqn.2010-01.com.solidfire:d9vm.source-volume-1gb-4096-3.15""", "Died on +.volumes[14].iqn"
    assert result.volumes[14].slice_count == 1, "Died on +.volumes[14].slice_count"
    assert type(result.volumes[14].attributes) is dict, "Died on .volumes[14].attributes"
    assert result.volumes[14].account_id == 1, "Died on +.volumes[14].account_id"
    assert result.volumes[14].create_time == """2016-12-30T17:35:40Z""", "Died on +.volumes[14].create_time"
    assert result.volumes[14].virtual_volume_id is None, "Died on .volumes[14].virtual_volume_id"
    assert result.volumes[13].status == """active""", "Died on +.volumes[13].status"
    assert result.volumes[13].enable512e == False, "Died on +.volumes[13].enable512e"
    assert result.volumes[13].qos.burst_iops == 15000, "Died on +.volumes[13].qos.burst_iops"
    assert result.volumes[13].qos.burst_time == 60, "Died on +.volumes[13].qos.burst_time"
    assert result.volumes[13].qos.min_iops == 100, "Died on +.volumes[13].qos.min_iops"
    assert result.volumes[13].qos.max_iops == 15000, "Died on +.volumes[13].qos.max_iops"
    assert result.volumes[13].name == """source-volume-1GB-4096-2""", "Died on +.volumes[13].name"
    assert result.volumes[13].volume_access_groups[0] == 2, "Died on +.volumes[13].volume_access_groups[0]"
    assert result.volumes[13].scsi_naadevice_id == """6f47acc1000000006439766d0000000e""", "Died on +.volumes[13].scsi_naadevice_id"
    assert result.volumes[13].total_size == 1000341504, "Died on +.volumes[13].total_size"
    assert result.volumes[13].block_size == 4096, "Died on +.volumes[13].block_size"
    assert result.volumes[13].scsi_euidevice_id == """6439766d0000000ef47acc0100000000""", "Died on +.volumes[13].scsi_euidevice_id"
    assert result.volumes[13].volume_id == 14, "Died on +.volumes[13].volume_id"
    assert result.volumes[13].access == """readWrite""", "Died on +.volumes[13].access"
    assert result.volumes[13].iqn == """iqn.2010-01.com.solidfire:d9vm.source-volume-1gb-4096-2.14""", "Died on +.volumes[13].iqn"
    assert result.volumes[13].slice_count == 1, "Died on +.volumes[13].slice_count"
    assert type(result.volumes[13].attributes) is dict, "Died on .volumes[13].attributes"
    assert result.volumes[13].account_id == 1, "Died on +.volumes[13].account_id"
    assert result.volumes[13].create_time == """2016-12-30T17:35:40Z""", "Died on +.volumes[13].create_time"
    assert result.volumes[13].virtual_volume_id is None, "Died on .volumes[13].virtual_volume_id"
    assert result.volumes[12].status == """active""", "Died on +.volumes[12].status"
    assert result.volumes[12].enable512e == False, "Died on +.volumes[12].enable512e"
    assert result.volumes[12].qos.burst_iops == 15000, "Died on +.volumes[12].qos.burst_iops"
    assert result.volumes[12].qos.burst_time == 60, "Died on +.volumes[12].qos.burst_time"
    assert result.volumes[12].qos.min_iops == 100, "Died on +.volumes[12].qos.min_iops"
    assert result.volumes[12].qos.max_iops == 15000, "Died on +.volumes[12].qos.max_iops"
    assert result.volumes[12].name == """source-volume-1GB-4096-1""", "Died on +.volumes[12].name"
    assert result.volumes[12].volume_access_groups[0] == 2, "Died on +.volumes[12].volume_access_groups[0]"
    assert result.volumes[12].scsi_naadevice_id == """6f47acc1000000006439766d0000000d""", "Died on +.volumes[12].scsi_naadevice_id"
    assert result.volumes[12].total_size == 1000341504, "Died on +.volumes[12].total_size"
    assert result.volumes[12].block_size == 4096, "Died on +.volumes[12].block_size"
    assert result.volumes[12].scsi_euidevice_id == """6439766d0000000df47acc0100000000""", "Died on +.volumes[12].scsi_euidevice_id"
    assert result.volumes[12].volume_id == 13, "Died on +.volumes[12].volume_id"
    assert result.volumes[12].access == """readWrite""", "Died on +.volumes[12].access"
    assert result.volumes[12].iqn == """iqn.2010-01.com.solidfire:d9vm.source-volume-1gb-4096-1.13""", "Died on +.volumes[12].iqn"
    assert result.volumes[12].slice_count == 1, "Died on +.volumes[12].slice_count"
    assert type(result.volumes[12].attributes) is dict, "Died on .volumes[12].attributes"
    assert result.volumes[12].account_id == 1, "Died on +.volumes[12].account_id"
    assert result.volumes[12].create_time == """2016-12-30T17:35:40Z""", "Died on +.volumes[12].create_time"
    assert result.volumes[12].virtual_volume_id is None, "Died on .volumes[12].virtual_volume_id"
    assert result.volumes[11].status == """active""", "Died on +.volumes[11].status"
    assert result.volumes[11].enable512e == False, "Died on +.volumes[11].enable512e"
    assert result.volumes[11].qos.burst_iops == 500, "Died on +.volumes[11].qos.burst_iops"
    assert result.volumes[11].qos.burst_time == 60, "Died on +.volumes[11].qos.burst_time"
    assert result.volumes[11].qos.min_iops == 200, "Died on +.volumes[11].qos.min_iops"
    assert result.volumes[11].qos.max_iops == 500, "Died on +.volumes[11].qos.max_iops"
    assert result.volumes[11].name == """WLwRzDxuN8O9AGw3""", "Died on +.volumes[11].name"
    assert result.volumes[11].volume_access_groups[0] == 1, "Died on +.volumes[11].volume_access_groups[0]"
    assert result.volumes[11].scsi_naadevice_id == """6f47acc1000000006439766d0000000c""", "Died on +.volumes[11].scsi_naadevice_id"
    assert result.volumes[11].total_size == 100000595968, "Died on +.volumes[11].total_size"
    assert result.volumes[11].block_size == 4096, "Died on +.volumes[11].block_size"
    assert result.volumes[11].scsi_euidevice_id == """6439766d0000000cf47acc0100000000""", "Died on +.volumes[11].scsi_euidevice_id"
    assert result.volumes[11].volume_id == 12, "Died on +.volumes[11].volume_id"
    assert result.volumes[11].access == """readWrite""", "Died on +.volumes[11].access"
    assert result.volumes[11].iqn == """iqn.2010-01.com.solidfire:d9vm.wlwrzdxun8o9agw3.12""", "Died on +.volumes[11].iqn"
    assert result.volumes[11].slice_count == 1, "Died on +.volumes[11].slice_count"
    assert type(result.volumes[11].attributes) is dict, "Died on .volumes[11].attributes"
    assert result.volumes[11].account_id == 3, "Died on +.volumes[11].account_id"
    assert result.volumes[11].create_time == """2016-12-30T17:35:28Z""", "Died on +.volumes[11].create_time"
    assert result.volumes[11].virtual_volume_id is None, "Died on .volumes[11].virtual_volume_id"
    assert result.volumes[10].status == """active""", "Died on +.volumes[10].status"
    assert result.volumes[10].enable512e == False, "Died on +.volumes[10].enable512e"
    assert result.volumes[10].qos.burst_iops == 500, "Died on +.volumes[10].qos.burst_iops"
    assert result.volumes[10].qos.burst_time == 60, "Died on +.volumes[10].qos.burst_time"
    assert result.volumes[10].qos.min_iops == 200, "Died on +.volumes[10].qos.min_iops"
    assert result.volumes[10].qos.max_iops == 500, "Died on +.volumes[10].qos.max_iops"
    assert result.volumes[10].name == """6rpcTxNpIqxknDgK""", "Died on +.volumes[10].name"
    assert result.volumes[10].volume_access_groups[0] == 1, "Died on +.volumes[10].volume_access_groups[0]"
    assert result.volumes[10].scsi_naadevice_id == """6f47acc1000000006439766d0000000b""", "Died on +.volumes[10].scsi_naadevice_id"
    assert result.volumes[10].total_size == 100000595968, "Died on +.volumes[10].total_size"
    assert result.volumes[10].block_size == 4096, "Died on +.volumes[10].block_size"
    assert result.volumes[10].scsi_euidevice_id == """6439766d0000000bf47acc0100000000""", "Died on +.volumes[10].scsi_euidevice_id"
    assert result.volumes[10].volume_id == 11, "Died on +.volumes[10].volume_id"
    assert result.volumes[10].access == """readWrite""", "Died on +.volumes[10].access"
    assert result.volumes[10].iqn == """iqn.2010-01.com.solidfire:d9vm.6rpctxnpiqxkndgk.11""", "Died on +.volumes[10].iqn"
    assert result.volumes[10].slice_count == 1, "Died on +.volumes[10].slice_count"
    assert type(result.volumes[10].attributes) is dict, "Died on .volumes[10].attributes"
    assert result.volumes[10].account_id == 3, "Died on +.volumes[10].account_id"
    assert result.volumes[10].create_time == """2016-12-30T17:35:28Z""", "Died on +.volumes[10].create_time"
    assert result.volumes[10].virtual_volume_id is None, "Died on .volumes[10].virtual_volume_id"
    assert result.volumes[9].status == """active""", "Died on +.volumes[9].status"
    assert result.volumes[9].enable512e == False, "Died on +.volumes[9].enable512e"
    assert result.volumes[9].qos.burst_iops == 500, "Died on +.volumes[9].qos.burst_iops"
    assert result.volumes[9].qos.burst_time == 60, "Died on +.volumes[9].qos.burst_time"
    assert result.volumes[9].qos.min_iops == 200, "Died on +.volumes[9].qos.min_iops"
    assert result.volumes[9].qos.max_iops == 500, "Died on +.volumes[9].qos.max_iops"
    assert result.volumes[9].name == """Z0bUeok9a6lCIvVe""", "Died on +.volumes[9].name"
    assert result.volumes[9].volume_access_groups[0] == 1, "Died on +.volumes[9].volume_access_groups[0]"
    assert result.volumes[9].scsi_naadevice_id == """6f47acc1000000006439766d0000000a""", "Died on +.volumes[9].scsi_naadevice_id"
    assert result.volumes[9].total_size == 100000595968, "Died on +.volumes[9].total_size"
    assert result.volumes[9].block_size == 4096, "Died on +.volumes[9].block_size"
    assert result.volumes[9].scsi_euidevice_id == """6439766d0000000af47acc0100000000""", "Died on +.volumes[9].scsi_euidevice_id"
    assert result.volumes[9].volume_id == 10, "Died on +.volumes[9].volume_id"
    assert result.volumes[9].access == """readWrite""", "Died on +.volumes[9].access"
    assert result.volumes[9].iqn == """iqn.2010-01.com.solidfire:d9vm.z0bueok9a6lcivve.10""", "Died on +.volumes[9].iqn"
    assert result.volumes[9].slice_count == 1, "Died on +.volumes[9].slice_count"
    assert type(result.volumes[9].attributes) is dict, "Died on .volumes[9].attributes"
    assert result.volumes[9].account_id == 3, "Died on +.volumes[9].account_id"
    assert result.volumes[9].create_time == """2016-12-30T17:35:28Z""", "Died on +.volumes[9].create_time"
    assert result.volumes[9].virtual_volume_id is None, "Died on .volumes[9].virtual_volume_id"
    assert result.volumes[8].status == """active""", "Died on +.volumes[8].status"
    assert result.volumes[8].enable512e == False, "Died on +.volumes[8].enable512e"
    assert result.volumes[8].qos.burst_iops == 500, "Died on +.volumes[8].qos.burst_iops"
    assert result.volumes[8].qos.burst_time == 60, "Died on +.volumes[8].qos.burst_time"
    assert result.volumes[8].qos.min_iops == 200, "Died on +.volumes[8].qos.min_iops"
    assert result.volumes[8].qos.max_iops == 500, "Died on +.volumes[8].qos.max_iops"
    assert result.volumes[8].name == """jFfEacthkCuwtm3q""", "Died on +.volumes[8].name"
    assert result.volumes[8].volume_access_groups[0] == 1, "Died on +.volumes[8].volume_access_groups[0]"
    assert result.volumes[8].scsi_naadevice_id == """6f47acc1000000006439766d00000009""", "Died on +.volumes[8].scsi_naadevice_id"
    assert result.volumes[8].total_size == 100000595968, "Died on +.volumes[8].total_size"
    assert result.volumes[8].block_size == 4096, "Died on +.volumes[8].block_size"
    assert result.volumes[8].scsi_euidevice_id == """6439766d00000009f47acc0100000000""", "Died on +.volumes[8].scsi_euidevice_id"
    assert result.volumes[8].volume_id == 9, "Died on +.volumes[8].volume_id"
    assert result.volumes[8].access == """readWrite""", "Died on +.volumes[8].access"
    assert result.volumes[8].iqn == """iqn.2010-01.com.solidfire:d9vm.jffeacthkcuwtm3q.9""", "Died on +.volumes[8].iqn"
    assert result.volumes[8].slice_count == 1, "Died on +.volumes[8].slice_count"
    assert type(result.volumes[8].attributes) is dict, "Died on .volumes[8].attributes"
    assert result.volumes[8].account_id == 3, "Died on +.volumes[8].account_id"
    assert result.volumes[8].create_time == """2016-12-30T17:35:28Z""", "Died on +.volumes[8].create_time"
    assert result.volumes[8].virtual_volume_id is None, "Died on .volumes[8].virtual_volume_id"
    assert result.volumes[7].status == """active""", "Died on +.volumes[7].status"
    assert result.volumes[7].enable512e == False, "Died on +.volumes[7].enable512e"
    assert result.volumes[7].qos.burst_iops == 500, "Died on +.volumes[7].qos.burst_iops"
    assert result.volumes[7].qos.burst_time == 60, "Died on +.volumes[7].qos.burst_time"
    assert result.volumes[7].qos.min_iops == 200, "Died on +.volumes[7].qos.min_iops"
    assert result.volumes[7].qos.max_iops == 500, "Died on +.volumes[7].qos.max_iops"
    assert result.volumes[7].name == """1PAx45hrnftYJ681""", "Died on +.volumes[7].name"
    assert result.volumes[7].volume_access_groups[0] == 1, "Died on +.volumes[7].volume_access_groups[0]"
    assert result.volumes[7].scsi_naadevice_id == """6f47acc1000000006439766d00000008""", "Died on +.volumes[7].scsi_naadevice_id"
    assert result.volumes[7].total_size == 100000595968, "Died on +.volumes[7].total_size"
    assert result.volumes[7].block_size == 4096, "Died on +.volumes[7].block_size"
    assert result.volumes[7].scsi_euidevice_id == """6439766d00000008f47acc0100000000""", "Died on +.volumes[7].scsi_euidevice_id"
    assert result.volumes[7].volume_id == 8, "Died on +.volumes[7].volume_id"
    assert result.volumes[7].access == """readWrite""", "Died on +.volumes[7].access"
    assert result.volumes[7].iqn == """iqn.2010-01.com.solidfire:d9vm.1pax45hrnftyj681.8""", "Died on +.volumes[7].iqn"
    assert result.volumes[7].slice_count == 1, "Died on +.volumes[7].slice_count"
    assert type(result.volumes[7].attributes) is dict, "Died on .volumes[7].attributes"
    assert result.volumes[7].account_id == 3, "Died on +.volumes[7].account_id"
    assert result.volumes[7].create_time == """2016-12-30T17:35:28Z""", "Died on +.volumes[7].create_time"
    assert result.volumes[7].virtual_volume_id is None, "Died on .volumes[7].virtual_volume_id"
    assert result.volumes[6].status == """active""", "Died on +.volumes[6].status"
    assert result.volumes[6].enable512e == False, "Died on +.volumes[6].enable512e"
    assert result.volumes[6].qos.burst_iops == 500, "Died on +.volumes[6].qos.burst_iops"
    assert result.volumes[6].qos.burst_time == 60, "Died on +.volumes[6].qos.burst_time"
    assert result.volumes[6].qos.min_iops == 200, "Died on +.volumes[6].qos.min_iops"
    assert result.volumes[6].qos.max_iops == 500, "Died on +.volumes[6].qos.max_iops"
    assert result.volumes[6].name == """jLoDJjdZp9rfgZ9D""", "Died on +.volumes[6].name"
    assert result.volumes[6].volume_access_groups[0] == 1, "Died on +.volumes[6].volume_access_groups[0]"
    assert result.volumes[6].scsi_naadevice_id == """6f47acc1000000006439766d00000007""", "Died on +.volumes[6].scsi_naadevice_id"
    assert result.volumes[6].total_size == 100000595968, "Died on +.volumes[6].total_size"
    assert result.volumes[6].block_size == 4096, "Died on +.volumes[6].block_size"
    assert result.volumes[6].scsi_euidevice_id == """6439766d00000007f47acc0100000000""", "Died on +.volumes[6].scsi_euidevice_id"
    assert result.volumes[6].volume_id == 7, "Died on +.volumes[6].volume_id"
    assert result.volumes[6].access == """readWrite""", "Died on +.volumes[6].access"
    assert result.volumes[6].iqn == """iqn.2010-01.com.solidfire:d9vm.jlodjjdzp9rfgz9d.7""", "Died on +.volumes[6].iqn"
    assert result.volumes[6].slice_count == 1, "Died on +.volumes[6].slice_count"
    assert type(result.volumes[6].attributes) is dict, "Died on .volumes[6].attributes"
    assert result.volumes[6].account_id == 3, "Died on +.volumes[6].account_id"
    assert result.volumes[6].create_time == """2016-12-30T17:35:28Z""", "Died on +.volumes[6].create_time"
    assert result.volumes[6].virtual_volume_id is None, "Died on .volumes[6].virtual_volume_id"
    assert result.volumes[5].status == """active""", "Died on +.volumes[5].status"
    assert result.volumes[5].enable512e == False, "Died on +.volumes[5].enable512e"
    assert result.volumes[5].qos.burst_iops == 500, "Died on +.volumes[5].qos.burst_iops"
    assert result.volumes[5].qos.burst_time == 60, "Died on +.volumes[5].qos.burst_time"
    assert result.volumes[5].qos.min_iops == 200, "Died on +.volumes[5].qos.min_iops"
    assert result.volumes[5].qos.max_iops == 500, "Died on +.volumes[5].qos.max_iops"
    assert result.volumes[5].name == """qFO2SPNvqucIFJx1""", "Died on +.volumes[5].name"
    assert result.volumes[5].volume_access_groups[0] == 1, "Died on +.volumes[5].volume_access_groups[0]"
    assert result.volumes[5].scsi_naadevice_id == """6f47acc1000000006439766d00000006""", "Died on +.volumes[5].scsi_naadevice_id"
    assert result.volumes[5].total_size == 100000595968, "Died on +.volumes[5].total_size"
    assert result.volumes[5].block_size == 4096, "Died on +.volumes[5].block_size"
    assert result.volumes[5].scsi_euidevice_id == """6439766d00000006f47acc0100000000""", "Died on +.volumes[5].scsi_euidevice_id"
    assert result.volumes[5].volume_id == 6, "Died on +.volumes[5].volume_id"
    assert result.volumes[5].access == """readWrite""", "Died on +.volumes[5].access"
    assert result.volumes[5].iqn == """iqn.2010-01.com.solidfire:d9vm.qfo2spnvqucifjx1.6""", "Died on +.volumes[5].iqn"
    assert result.volumes[5].slice_count == 1, "Died on +.volumes[5].slice_count"
    assert type(result.volumes[5].attributes) is dict, "Died on .volumes[5].attributes"
    assert result.volumes[5].account_id == 3, "Died on +.volumes[5].account_id"
    assert result.volumes[5].create_time == """2016-12-30T17:35:28Z""", "Died on +.volumes[5].create_time"
    assert result.volumes[5].virtual_volume_id is None, "Died on .volumes[5].virtual_volume_id"
    assert result.volumes[4].status == """active""", "Died on +.volumes[4].status"
    assert result.volumes[4].enable512e == False, "Died on +.volumes[4].enable512e"
    assert result.volumes[4].qos.burst_iops == 500, "Died on +.volumes[4].qos.burst_iops"
    assert result.volumes[4].qos.burst_time == 60, "Died on +.volumes[4].qos.burst_time"
    assert result.volumes[4].qos.min_iops == 200, "Died on +.volumes[4].qos.min_iops"
    assert result.volumes[4].qos.max_iops == 500, "Died on +.volumes[4].qos.max_iops"
    assert result.volumes[4].name == """3mYlvPLviAFUzoQ4""", "Died on +.volumes[4].name"
    assert result.volumes[4].volume_access_groups[0] == 1, "Died on +.volumes[4].volume_access_groups[0]"
    assert result.volumes[4].scsi_naadevice_id == """6f47acc1000000006439766d00000005""", "Died on +.volumes[4].scsi_naadevice_id"
    assert result.volumes[4].total_size == 100000595968, "Died on +.volumes[4].total_size"
    assert result.volumes[4].block_size == 4096, "Died on +.volumes[4].block_size"
    assert result.volumes[4].scsi_euidevice_id == """6439766d00000005f47acc0100000000""", "Died on +.volumes[4].scsi_euidevice_id"
    assert result.volumes[4].volume_id == 5, "Died on +.volumes[4].volume_id"
    assert result.volumes[4].access == """readWrite""", "Died on +.volumes[4].access"
    assert result.volumes[4].iqn == """iqn.2010-01.com.solidfire:d9vm.3mylvplviafuzoq4.5""", "Died on +.volumes[4].iqn"
    assert result.volumes[4].slice_count == 1, "Died on +.volumes[4].slice_count"
    assert type(result.volumes[4].attributes) is dict, "Died on .volumes[4].attributes"
    assert result.volumes[4].account_id == 3, "Died on +.volumes[4].account_id"
    assert result.volumes[4].create_time == """2016-12-30T17:35:28Z""", "Died on +.volumes[4].create_time"
    assert result.volumes[4].virtual_volume_id is None, "Died on .volumes[4].virtual_volume_id"
    assert result.volumes[3].status == """active""", "Died on +.volumes[3].status"
    assert result.volumes[3].enable512e == True, "Died on +.volumes[3].enable512e"
    assert result.volumes[3].qos.burst_iops == 15000, "Died on +.volumes[3].qos.burst_iops"
    assert result.volumes[3].qos.burst_time == 60, "Died on +.volumes[3].qos.burst_time"
    assert result.volumes[3].qos.min_iops == 100, "Died on +.volumes[3].qos.min_iops"
    assert result.volumes[3].qos.max_iops == 15000, "Died on +.volumes[3].qos.max_iops"
    assert result.volumes[3].name == """source-volume-1GB-512e-4""", "Died on +.volumes[3].name"
    assert result.volumes[3].volume_access_groups[0] == 2, "Died on +.volumes[3].volume_access_groups[0]"
    assert result.volumes[3].scsi_naadevice_id == """6f47acc1000000006439766d00000004""", "Died on +.volumes[3].scsi_naadevice_id"
    assert result.volumes[3].total_size == 1000341504, "Died on +.volumes[3].total_size"
    assert result.volumes[3].block_size == 4096, "Died on +.volumes[3].block_size"
    assert result.volumes[3].scsi_euidevice_id == """6439766d00000004f47acc0100000000""", "Died on +.volumes[3].scsi_euidevice_id"
    assert result.volumes[3].volume_id == 4, "Died on +.volumes[3].volume_id"
    assert result.volumes[3].access == """readWrite""", "Died on +.volumes[3].access"
    assert result.volumes[3].iqn == """iqn.2010-01.com.solidfire:d9vm.source-volume-1gb-512e-4.4""", "Died on +.volumes[3].iqn"
    assert result.volumes[3].slice_count == 1, "Died on +.volumes[3].slice_count"
    assert type(result.volumes[3].attributes) is dict, "Died on .volumes[3].attributes"
    assert result.volumes[3].account_id == 1, "Died on +.volumes[3].account_id"
    assert result.volumes[3].create_time == """2016-12-30T17:35:21Z""", "Died on +.volumes[3].create_time"
    assert result.volumes[3].virtual_volume_id is None, "Died on .volumes[3].virtual_volume_id"
    assert result.volumes[2].status == """active""", "Died on +.volumes[2].status"
    assert result.volumes[2].enable512e == True, "Died on +.volumes[2].enable512e"
    assert result.volumes[2].qos.burst_iops == 15000, "Died on +.volumes[2].qos.burst_iops"
    assert result.volumes[2].qos.burst_time == 60, "Died on +.volumes[2].qos.burst_time"
    assert result.volumes[2].qos.min_iops == 100, "Died on +.volumes[2].qos.min_iops"
    assert result.volumes[2].qos.max_iops == 15000, "Died on +.volumes[2].qos.max_iops"
    assert result.volumes[2].name == """source-volume-1GB-512e-3""", "Died on +.volumes[2].name"
    assert result.volumes[2].volume_access_groups[0] == 2, "Died on +.volumes[2].volume_access_groups[0]"
    assert result.volumes[2].scsi_naadevice_id == """6f47acc1000000006439766d00000003""", "Died on +.volumes[2].scsi_naadevice_id"
    assert result.volumes[2].total_size == 1000341504, "Died on +.volumes[2].total_size"
    assert result.volumes[2].block_size == 4096, "Died on +.volumes[2].block_size"
    assert result.volumes[2].scsi_euidevice_id == """6439766d00000003f47acc0100000000""", "Died on +.volumes[2].scsi_euidevice_id"
    assert result.volumes[2].volume_id == 3, "Died on +.volumes[2].volume_id"
    assert result.volumes[2].access == """readWrite""", "Died on +.volumes[2].access"
    assert result.volumes[2].iqn == """iqn.2010-01.com.solidfire:d9vm.source-volume-1gb-512e-3.3""", "Died on +.volumes[2].iqn"
    assert result.volumes[2].slice_count == 1, "Died on +.volumes[2].slice_count"
    assert type(result.volumes[2].attributes) is dict, "Died on .volumes[2].attributes"
    assert result.volumes[2].account_id == 1, "Died on +.volumes[2].account_id"
    assert result.volumes[2].create_time == """2016-12-30T17:35:21Z""", "Died on +.volumes[2].create_time"
    assert result.volumes[2].virtual_volume_id is None, "Died on .volumes[2].virtual_volume_id"
    assert result.volumes[1].status == """active""", "Died on +.volumes[1].status"
    assert result.volumes[1].enable512e == True, "Died on +.volumes[1].enable512e"
    assert result.volumes[1].qos.burst_iops == 15000, "Died on +.volumes[1].qos.burst_iops"
    assert result.volumes[1].qos.burst_time == 60, "Died on +.volumes[1].qos.burst_time"
    assert result.volumes[1].qos.min_iops == 100, "Died on +.volumes[1].qos.min_iops"
    assert result.volumes[1].qos.max_iops == 15000, "Died on +.volumes[1].qos.max_iops"
    assert result.volumes[1].name == """source-volume-1GB-512e-2""", "Died on +.volumes[1].name"
    assert result.volumes[1].volume_access_groups[0] == 2, "Died on +.volumes[1].volume_access_groups[0]"
    assert result.volumes[1].scsi_naadevice_id == """6f47acc1000000006439766d00000002""", "Died on +.volumes[1].scsi_naadevice_id"
    assert result.volumes[1].total_size == 1000341504, "Died on +.volumes[1].total_size"
    assert result.volumes[1].block_size == 4096, "Died on +.volumes[1].block_size"
    assert result.volumes[1].scsi_euidevice_id == """6439766d00000002f47acc0100000000""", "Died on +.volumes[1].scsi_euidevice_id"
    assert result.volumes[1].volume_id == 2, "Died on +.volumes[1].volume_id"
    assert result.volumes[1].access == """readWrite""", "Died on +.volumes[1].access"
    assert result.volumes[1].iqn == """iqn.2010-01.com.solidfire:d9vm.source-volume-1gb-512e-2.2""", "Died on +.volumes[1].iqn"
    assert result.volumes[1].slice_count == 1, "Died on +.volumes[1].slice_count"
    assert type(result.volumes[1].attributes) is dict, "Died on .volumes[1].attributes"
    assert result.volumes[1].account_id == 1, "Died on +.volumes[1].account_id"
    assert result.volumes[1].create_time == """2016-12-30T17:35:21Z""", "Died on +.volumes[1].create_time"
    assert result.volumes[1].virtual_volume_id is None, "Died on .volumes[1].virtual_volume_id"
    assert result.volumes[0].status == """active""", "Died on +.volumes[0].status"
    assert result.volumes[0].enable512e == True, "Died on +.volumes[0].enable512e"
    assert result.volumes[0].qos.burst_iops == 15000, "Died on +.volumes[0].qos.burst_iops"
    assert result.volumes[0].qos.burst_time == 60, "Died on +.volumes[0].qos.burst_time"
    assert result.volumes[0].qos.min_iops == 100, "Died on +.volumes[0].qos.min_iops"
    assert result.volumes[0].qos.max_iops == 15000, "Died on +.volumes[0].qos.max_iops"
    assert result.volumes[0].name == """source-volume-1GB-512e-1""", "Died on +.volumes[0].name"
    assert result.volumes[0].volume_access_groups[0] == 2, "Died on +.volumes[0].volume_access_groups[0]"
    assert result.volumes[0].scsi_naadevice_id == """6f47acc1000000006439766d00000001""", "Died on +.volumes[0].scsi_naadevice_id"
    assert result.volumes[0].total_size == 1000341504, "Died on +.volumes[0].total_size"
    assert result.volumes[0].block_size == 4096, "Died on +.volumes[0].block_size"
    assert result.volumes[0].scsi_euidevice_id == """6439766d00000001f47acc0100000000""", "Died on +.volumes[0].scsi_euidevice_id"
    assert result.volumes[0].volume_id == 1, "Died on +.volumes[0].volume_id"
    assert result.volumes[0].access == """readWrite""", "Died on +.volumes[0].access"
    assert result.volumes[0].iqn == """iqn.2010-01.com.solidfire:d9vm.source-volume-1gb-512e-1.1""", "Died on +.volumes[0].iqn"
    assert result.volumes[0].slice_count == 1, "Died on +.volumes[0].slice_count"
    assert type(result.volumes[0].attributes) is dict, "Died on .volumes[0].attributes"
    assert result.volumes[0].account_id == 1, "Died on +.volumes[0].account_id"
    assert result.volumes[0].create_time == """2016-12-30T17:35:21Z""", "Died on +.volumes[0].create_time"
    assert result.volumes[0].virtual_volume_id is None, "Died on .volumes[0].virtual_volume_id"

def test_list_active_volumes_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListActiveVolumes_v9.1_1)

    
    start_volume_id = 42 # start_volume_id
    limit = 42 # limit
    result = ef.list_active_volumes()
    assert result.volumes[0].status == """active""", "Died on +.volumes[0].status"
    assert result.volumes[0].enable512e == False, "Died on +.volumes[0].enable512e"
    assert result.volumes[0].qos.burst_iops == 15000, "Died on +.volumes[0].qos.burst_iops"
    assert result.volumes[0].qos.burst_time == 60, "Died on +.volumes[0].qos.burst_time"
    assert result.volumes[0].qos.min_iops == 100, "Died on +.volumes[0].qos.min_iops"
    assert result.volumes[0].qos.max_iops == 15000, "Died on +.volumes[0].qos.max_iops"
    assert result.volumes[0].name == """snap-target-83""", "Died on +.volumes[0].name"
    assert result.volumes[0].volume_access_groups[0] == 7, "Died on +.volumes[0].volume_access_groups[0]"
    assert result.volumes[0].scsi_naadevice_id == """6f47acc1000000006d6964340000043b""", "Died on +.volumes[0].scsi_naadevice_id"
    assert result.volumes[0].total_size == 5000658944, "Died on +.volumes[0].total_size"
    assert result.volumes[0].block_size == 4096, "Died on +.volumes[0].block_size"
    assert result.volumes[0].scsi_euidevice_id == """6d6964340000043bf47acc0100000000""", "Died on +.volumes[0].scsi_euidevice_id"
    assert result.volumes[0].volume_id == 1083, "Died on +.volumes[0].volume_id"
    assert result.volumes[0].access == """readWrite""", "Died on +.volumes[0].access"
    assert result.volumes[0].iqn == """iqn.2010-01.com.solidfire:mid4.snap-target-83.1083""", "Died on +.volumes[0].iqn"
    assert result.volumes[0].slice_count == 1, "Died on +.volumes[0].slice_count"
    assert type(result.volumes[0].attributes) is dict, "Died on .volumes[0].attributes"
    assert result.volumes[0].volume_pairs[0].volume_pair_uuid == UUID("f224f16e-7365-4330-95ef-900e3420056f"), "Died on .volumes[0].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[0].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[0].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[0].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[0].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[0].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[0].volume_pairs[0].remote_replication.state"
    assert result.volumes[0].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[0].volume_pairs[0].remote_replication.mode"
    assert result.volumes[0].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[0].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[0].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[0].volume_pairs[0].cluster_pair_id"
    assert result.volumes[0].volume_pairs[0].remote_volume_id == 583, "Died on +.volumes[0].volume_pairs[0].remote_volume_id"
    assert result.volumes[0].volume_pairs[0].remote_volume_name == """snapshots-source-83""", "Died on +.volumes[0].volume_pairs[0].remote_volume_name"
    assert result.volumes[0].volume_pairs[0].remote_slice_id == 583, "Died on +.volumes[0].volume_pairs[0].remote_slice_id"
    assert result.volumes[0].account_id == 7, "Died on +.volumes[0].account_id"
    assert result.volumes[0].create_time == """2016-12-30T18:07:41Z""", "Died on +.volumes[0].create_time"
    assert result.volumes[0].virtual_volume_id is None, "Died on .volumes[0].virtual_volume_id"

def test_list_all_nodes_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListAllNodes_v8.4_0)

    
    result = ef.list_all_nodes()
    assert result.nodes[5].sip == """10.117.58.52""", "Died on +.nodes[5].sip"
    assert result.nodes[5].node_id == 6, "Died on +.nodes[5].node_id"
    assert result.nodes[5].uuid == UUID("4C4C4544-0052-3210-8030-B3C04F4D3032"), "Died on .nodes[5].uuid"
    assert result.nodes[5].name == """NLABP0924""", "Died on +.nodes[5].name"
    assert result.nodes[5].platform_info.node_type == """SF9605""", "Died on +.nodes[5].platform_info.node_type"
    assert result.nodes[5].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz""", "Died on +.nodes[5].platform_info.cpu_model"
    assert result.nodes[5].platform_info.node_memory_gb == 256, "Died on +.nodes[5].platform_info.node_memory_gb"
    assert result.nodes[5].platform_info.chassis_type == """R620""", "Died on +.nodes[5].platform_info.chassis_type"
    assert result.nodes[5].sipi == """Bond10G""", "Died on +.nodes[5].sipi"
    assert result.nodes[5].mipi == """Bond1G""", "Died on +.nodes[5].mipi"
    assert result.nodes[5].software_version == """8.4.0.68""", "Died on +.nodes[5].software_version"
    assert result.nodes[5].cip == """10.117.58.52""", "Died on +.nodes[5].cip"
    assert result.nodes[5].fibre_channel_target_port_group is None, "Died on .nodes[5].fibre_channel_target_port_group"
    assert result.nodes[5].mip == """10.117.56.52""", "Died on +.nodes[5].mip"
    assert result.nodes[5].associated_fservice_id == 0, "Died on +.nodes[5].associated_fservice_id"
    assert result.nodes[5].associated_master_service_id == 2, "Died on +.nodes[5].associated_master_service_id"
    assert result.nodes[5].cipi == """Bond10G""", "Died on +.nodes[5].cipi"
    assert type(result.nodes[5].attributes) is dict, "Died on .nodes[5].attributes"
    assert result.nodes[4].sip == """10.117.58.49""", "Died on +.nodes[4].sip"
    assert result.nodes[4].node_id == 5, "Died on +.nodes[4].node_id"
    assert result.nodes[4].uuid == UUID("4C4C4544-0043-4C10-8032-C7C04F445A31"), "Died on .nodes[4].uuid"
    assert result.nodes[4].name == """nlabp0921""", "Died on +.nodes[4].name"
    assert result.nodes[4].platform_info.node_type == """SF9605""", "Died on +.nodes[4].platform_info.node_type"
    assert result.nodes[4].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz""", "Died on +.nodes[4].platform_info.cpu_model"
    assert result.nodes[4].platform_info.node_memory_gb == 256, "Died on +.nodes[4].platform_info.node_memory_gb"
    assert result.nodes[4].platform_info.chassis_type == """R620""", "Died on +.nodes[4].platform_info.chassis_type"
    assert result.nodes[4].sipi == """Bond10G""", "Died on +.nodes[4].sipi"
    assert result.nodes[4].mipi == """Bond1G""", "Died on +.nodes[4].mipi"
    assert result.nodes[4].software_version == """8.4.0.68""", "Died on +.nodes[4].software_version"
    assert result.nodes[4].cip == """10.117.58.49""", "Died on +.nodes[4].cip"
    assert result.nodes[4].fibre_channel_target_port_group is None, "Died on .nodes[4].fibre_channel_target_port_group"
    assert result.nodes[4].mip == """10.117.56.49""", "Died on +.nodes[4].mip"
    assert result.nodes[4].associated_fservice_id == 0, "Died on +.nodes[4].associated_fservice_id"
    assert result.nodes[4].associated_master_service_id == 4, "Died on +.nodes[4].associated_master_service_id"
    assert result.nodes[4].cipi == """Bond10G""", "Died on +.nodes[4].cipi"
    assert type(result.nodes[4].attributes) is dict, "Died on .nodes[4].attributes"
    assert result.nodes[3].sip == """10.117.58.19""", "Died on +.nodes[3].sip"
    assert result.nodes[3].node_id == 4, "Died on +.nodes[3].node_id"
    assert result.nodes[3].uuid == UUID("4C4C4544-0048-4710-8057-C7C04F395931"), "Died on .nodes[3].uuid"
    assert result.nodes[3].name == """NLABP0908""", "Died on +.nodes[3].name"
    assert result.nodes[3].platform_info.node_type == """SF9605""", "Died on +.nodes[3].platform_info.node_type"
    assert result.nodes[3].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz""", "Died on +.nodes[3].platform_info.cpu_model"
    assert result.nodes[3].platform_info.node_memory_gb == 256, "Died on +.nodes[3].platform_info.node_memory_gb"
    assert result.nodes[3].platform_info.chassis_type == """R620""", "Died on +.nodes[3].platform_info.chassis_type"
    assert result.nodes[3].sipi == """Bond10G""", "Died on +.nodes[3].sipi"
    assert result.nodes[3].mipi == """Bond1G""", "Died on +.nodes[3].mipi"
    assert result.nodes[3].software_version == """8.4.0.68""", "Died on +.nodes[3].software_version"
    assert result.nodes[3].cip == """10.117.58.19""", "Died on +.nodes[3].cip"
    assert result.nodes[3].fibre_channel_target_port_group is None, "Died on .nodes[3].fibre_channel_target_port_group"
    assert result.nodes[3].mip == """10.117.56.19""", "Died on +.nodes[3].mip"
    assert result.nodes[3].associated_fservice_id == 0, "Died on +.nodes[3].associated_fservice_id"
    assert result.nodes[3].associated_master_service_id == 3, "Died on +.nodes[3].associated_master_service_id"
    assert result.nodes[3].cipi == """Bond10G""", "Died on +.nodes[3].cipi"
    assert type(result.nodes[3].attributes) is dict, "Died on .nodes[3].attributes"
    assert result.nodes[2].sip == """10.117.58.18""", "Died on +.nodes[2].sip"
    assert result.nodes[2].node_id == 3, "Died on +.nodes[2].node_id"
    assert result.nodes[2].uuid == UUID("4C4C4544-0048-4E10-8057-C7C04F395931"), "Died on .nodes[2].uuid"
    assert result.nodes[2].name == """NLABP0907""", "Died on +.nodes[2].name"
    assert result.nodes[2].platform_info.node_type == """SF9605""", "Died on +.nodes[2].platform_info.node_type"
    assert result.nodes[2].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz""", "Died on +.nodes[2].platform_info.cpu_model"
    assert result.nodes[2].platform_info.node_memory_gb == 256, "Died on +.nodes[2].platform_info.node_memory_gb"
    assert result.nodes[2].platform_info.chassis_type == """R620""", "Died on +.nodes[2].platform_info.chassis_type"
    assert result.nodes[2].sipi == """Bond10G""", "Died on +.nodes[2].sipi"
    assert result.nodes[2].mipi == """Bond1G""", "Died on +.nodes[2].mipi"
    assert result.nodes[2].software_version == """8.4.0.68""", "Died on +.nodes[2].software_version"
    assert result.nodes[2].cip == """10.117.58.18""", "Died on +.nodes[2].cip"
    assert result.nodes[2].fibre_channel_target_port_group is None, "Died on .nodes[2].fibre_channel_target_port_group"
    assert result.nodes[2].mip == """10.117.56.18""", "Died on +.nodes[2].mip"
    assert result.nodes[2].associated_fservice_id == 0, "Died on +.nodes[2].associated_fservice_id"
    assert result.nodes[2].associated_master_service_id == 6, "Died on +.nodes[2].associated_master_service_id"
    assert result.nodes[2].cipi == """Bond10G""", "Died on +.nodes[2].cipi"
    assert type(result.nodes[2].attributes) is dict, "Died on .nodes[2].attributes"
    assert result.nodes[1].sip == """10.117.58.17""", "Died on +.nodes[1].sip"
    assert result.nodes[1].node_id == 2, "Died on +.nodes[1].node_id"
    assert result.nodes[1].uuid == UUID("4C4C4544-0048-4810-8058-C7C04F395931"), "Died on .nodes[1].uuid"
    assert result.nodes[1].name == """NLABP0906""", "Died on +.nodes[1].name"
    assert result.nodes[1].platform_info.node_type == """SF9605""", "Died on +.nodes[1].platform_info.node_type"
    assert result.nodes[1].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz""", "Died on +.nodes[1].platform_info.cpu_model"
    assert result.nodes[1].platform_info.node_memory_gb == 256, "Died on +.nodes[1].platform_info.node_memory_gb"
    assert result.nodes[1].platform_info.chassis_type == """R620""", "Died on +.nodes[1].platform_info.chassis_type"
    assert result.nodes[1].sipi == """Bond10G""", "Died on +.nodes[1].sipi"
    assert result.nodes[1].mipi == """Bond1G""", "Died on +.nodes[1].mipi"
    assert result.nodes[1].software_version == """8.4.0.68""", "Died on +.nodes[1].software_version"
    assert result.nodes[1].cip == """10.117.58.17""", "Died on +.nodes[1].cip"
    assert result.nodes[1].fibre_channel_target_port_group is None, "Died on .nodes[1].fibre_channel_target_port_group"
    assert result.nodes[1].mip == """10.117.56.17""", "Died on +.nodes[1].mip"
    assert result.nodes[1].associated_fservice_id == 0, "Died on +.nodes[1].associated_fservice_id"
    assert result.nodes[1].associated_master_service_id == 5, "Died on +.nodes[1].associated_master_service_id"
    assert result.nodes[1].cipi == """Bond10G""", "Died on +.nodes[1].cipi"
    assert type(result.nodes[1].attributes) is dict, "Died on .nodes[1].attributes"
    assert result.nodes[0].sip == """10.117.58.16""", "Died on +.nodes[0].sip"
    assert result.nodes[0].node_id == 1, "Died on +.nodes[0].node_id"
    assert result.nodes[0].uuid == UUID("4C4C4544-0048-3810-8058-C7C04F395931"), "Died on .nodes[0].uuid"
    assert result.nodes[0].name == """NLABP0905""", "Died on +.nodes[0].name"
    assert result.nodes[0].platform_info.node_type == """SF9605""", "Died on +.nodes[0].platform_info.node_type"
    assert result.nodes[0].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz""", "Died on +.nodes[0].platform_info.cpu_model"
    assert result.nodes[0].platform_info.node_memory_gb == 256, "Died on +.nodes[0].platform_info.node_memory_gb"
    assert result.nodes[0].platform_info.chassis_type == """R620""", "Died on +.nodes[0].platform_info.chassis_type"
    assert result.nodes[0].sipi == """Bond10G""", "Died on +.nodes[0].sipi"
    assert result.nodes[0].mipi == """Bond1G""", "Died on +.nodes[0].mipi"
    assert result.nodes[0].software_version == """8.4.0.68""", "Died on +.nodes[0].software_version"
    assert result.nodes[0].cip == """10.117.58.16""", "Died on +.nodes[0].cip"
    assert result.nodes[0].fibre_channel_target_port_group is None, "Died on .nodes[0].fibre_channel_target_port_group"
    assert result.nodes[0].mip == """10.117.56.16""", "Died on +.nodes[0].mip"
    assert result.nodes[0].associated_fservice_id == 0, "Died on +.nodes[0].associated_fservice_id"
    assert result.nodes[0].associated_master_service_id == 1, "Died on +.nodes[0].associated_master_service_id"
    assert result.nodes[0].cipi == """Bond10G""", "Died on +.nodes[0].cipi"
    assert type(result.nodes[0].attributes) is dict, "Died on .nodes[0].attributes"

def test_list_all_nodes_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListAllNodes_v8.6_0)

    
    result = ef.list_all_nodes()
    assert result.nodes[4].sip == """10.117.58.106""", "Died on +.nodes[4].sip"
    assert result.nodes[4].node_id == 5, "Died on +.nodes[4].node_id"
    assert result.nodes[4].uuid == UUID("4C4C4544-0059-5210-8037-B7C04F563532"), "Died on .nodes[4].uuid"
    assert result.nodes[4].name == """NLABP2017""", "Died on +.nodes[4].name"
    assert result.nodes[4].platform_info.node_type == """SF2405""", "Died on +.nodes[4].platform_info.node_type"
    assert result.nodes[4].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHz""", "Died on +.nodes[4].platform_info.cpu_model"
    assert result.nodes[4].platform_info.node_memory_gb == 64, "Died on +.nodes[4].platform_info.node_memory_gb"
    assert result.nodes[4].platform_info.chassis_type == """R630""", "Died on +.nodes[4].platform_info.chassis_type"
    assert result.nodes[4].sipi == """Bond10G""", "Died on +.nodes[4].sipi"
    assert result.nodes[4].mipi == """Bond1G""", "Died on +.nodes[4].mipi"
    assert result.nodes[4].software_version == """8.6.2.3""", "Died on +.nodes[4].software_version"
    assert result.nodes[4].cip == """10.117.58.106""", "Died on +.nodes[4].cip"
    assert result.nodes[4].fibre_channel_target_port_group is None, "Died on .nodes[4].fibre_channel_target_port_group"
    assert result.nodes[4].mip == """10.117.56.106""", "Died on +.nodes[4].mip"
    assert result.nodes[4].associated_fservice_id == 0, "Died on +.nodes[4].associated_fservice_id"
    assert result.nodes[4].associated_master_service_id == 2, "Died on +.nodes[4].associated_master_service_id"
    assert result.nodes[4].cipi == """Bond10G""", "Died on +.nodes[4].cipi"
    assert type(result.nodes[4].attributes) is dict, "Died on .nodes[4].attributes"
    assert result.nodes[3].sip == """10.117.58.96""", "Died on +.nodes[3].sip"
    assert result.nodes[3].node_id == 4, "Died on +.nodes[3].node_id"
    assert result.nodes[3].uuid == UUID("4C4C4544-0052-3410-8050-B5C04F383432"), "Died on .nodes[3].uuid"
    assert result.nodes[3].name == """NLABP1029""", "Died on +.nodes[3].name"
    assert result.nodes[3].platform_info.node_type == """SF2405""", "Died on +.nodes[3].platform_info.node_type"
    assert result.nodes[3].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHz""", "Died on +.nodes[3].platform_info.cpu_model"
    assert result.nodes[3].platform_info.node_memory_gb == 64, "Died on +.nodes[3].platform_info.node_memory_gb"
    assert result.nodes[3].platform_info.chassis_type == """R630""", "Died on +.nodes[3].platform_info.chassis_type"
    assert result.nodes[3].sipi == """Bond10G""", "Died on +.nodes[3].sipi"
    assert result.nodes[3].mipi == """Bond1G""", "Died on +.nodes[3].mipi"
    assert result.nodes[3].software_version == """8.6.2.3""", "Died on +.nodes[3].software_version"
    assert result.nodes[3].cip == """10.117.58.96""", "Died on +.nodes[3].cip"
    assert result.nodes[3].fibre_channel_target_port_group is None, "Died on .nodes[3].fibre_channel_target_port_group"
    assert result.nodes[3].mip == """10.117.56.96""", "Died on +.nodes[3].mip"
    assert result.nodes[3].associated_fservice_id == 0, "Died on +.nodes[3].associated_fservice_id"
    assert result.nodes[3].associated_master_service_id == 3, "Died on +.nodes[3].associated_master_service_id"
    assert result.nodes[3].cipi == """Bond10G""", "Died on +.nodes[3].cipi"
    assert type(result.nodes[3].attributes) is dict, "Died on .nodes[3].attributes"
    assert result.nodes[2].sip == """10.117.58.40""", "Died on +.nodes[2].sip"
    assert result.nodes[2].node_id == 3, "Died on +.nodes[2].node_id"
    assert result.nodes[2].uuid == UUID("4C4C4544-0046-4710-8036-C6C04F435A31"), "Died on .nodes[2].uuid"
    assert result.nodes[2].name == """NLABP1317""", "Died on +.nodes[2].name"
    assert result.nodes[2].platform_info.node_type == """SF2405""", "Died on +.nodes[2].platform_info.node_type"
    assert result.nodes[2].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz""", "Died on +.nodes[2].platform_info.cpu_model"
    assert result.nodes[2].platform_info.node_memory_gb == 64, "Died on +.nodes[2].platform_info.node_memory_gb"
    assert result.nodes[2].platform_info.chassis_type == """R620""", "Died on +.nodes[2].platform_info.chassis_type"
    assert result.nodes[2].sipi == """Bond10G""", "Died on +.nodes[2].sipi"
    assert result.nodes[2].mipi == """Bond1G""", "Died on +.nodes[2].mipi"
    assert result.nodes[2].software_version == """8.6.2.3""", "Died on +.nodes[2].software_version"
    assert result.nodes[2].cip == """10.117.58.40""", "Died on +.nodes[2].cip"
    assert result.nodes[2].fibre_channel_target_port_group is None, "Died on .nodes[2].fibre_channel_target_port_group"
    assert result.nodes[2].mip == """10.117.56.40""", "Died on +.nodes[2].mip"
    assert result.nodes[2].associated_fservice_id == 0, "Died on +.nodes[2].associated_fservice_id"
    assert result.nodes[2].associated_master_service_id == 4, "Died on +.nodes[2].associated_master_service_id"
    assert result.nodes[2].cipi == """Bond10G""", "Died on +.nodes[2].cipi"
    assert type(result.nodes[2].attributes) is dict, "Died on .nodes[2].attributes"
    assert result.nodes[1].sip == """10.117.58.27""", "Died on +.nodes[1].sip"
    assert result.nodes[1].node_id == 2, "Died on +.nodes[1].node_id"
    assert result.nodes[1].uuid == UUID("4C4C4544-0046-4310-8036-C6C04F435A31"), "Died on .nodes[1].uuid"
    assert result.nodes[1].name == """NLABP1305""", "Died on +.nodes[1].name"
    assert result.nodes[1].platform_info.node_type == """SF2405""", "Died on +.nodes[1].platform_info.node_type"
    assert result.nodes[1].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz""", "Died on +.nodes[1].platform_info.cpu_model"
    assert result.nodes[1].platform_info.node_memory_gb == 64, "Died on +.nodes[1].platform_info.node_memory_gb"
    assert result.nodes[1].platform_info.chassis_type == """R620""", "Died on +.nodes[1].platform_info.chassis_type"
    assert result.nodes[1].sipi == """Bond10G""", "Died on +.nodes[1].sipi"
    assert result.nodes[1].mipi == """Bond1G""", "Died on +.nodes[1].mipi"
    assert result.nodes[1].software_version == """8.6.2.3""", "Died on +.nodes[1].software_version"
    assert result.nodes[1].cip == """10.117.58.27""", "Died on +.nodes[1].cip"
    assert result.nodes[1].fibre_channel_target_port_group is None, "Died on .nodes[1].fibre_channel_target_port_group"
    assert result.nodes[1].mip == """10.117.56.27""", "Died on +.nodes[1].mip"
    assert result.nodes[1].associated_fservice_id == 0, "Died on +.nodes[1].associated_fservice_id"
    assert result.nodes[1].associated_master_service_id == 5, "Died on +.nodes[1].associated_master_service_id"
    assert result.nodes[1].cipi == """Bond10G""", "Died on +.nodes[1].cipi"
    assert type(result.nodes[1].attributes) is dict, "Died on .nodes[1].attributes"
    assert result.nodes[0].sip == """10.117.58.25""", "Died on +.nodes[0].sip"
    assert result.nodes[0].node_id == 1, "Died on +.nodes[0].node_id"
    assert result.nodes[0].uuid == UUID("4C4C4544-0046-4E10-8035-C6C04F435A31"), "Died on .nodes[0].uuid"
    assert result.nodes[0].name == """NLABP1303""", "Died on +.nodes[0].name"
    assert result.nodes[0].platform_info.node_type == """SF2405""", "Died on +.nodes[0].platform_info.node_type"
    assert result.nodes[0].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz""", "Died on +.nodes[0].platform_info.cpu_model"
    assert result.nodes[0].platform_info.node_memory_gb == 64, "Died on +.nodes[0].platform_info.node_memory_gb"
    assert result.nodes[0].platform_info.chassis_type == """R620""", "Died on +.nodes[0].platform_info.chassis_type"
    assert result.nodes[0].sipi == """Bond10G""", "Died on +.nodes[0].sipi"
    assert result.nodes[0].mipi == """Bond1G""", "Died on +.nodes[0].mipi"
    assert result.nodes[0].software_version == """8.6.2.3""", "Died on +.nodes[0].software_version"
    assert result.nodes[0].cip == """10.117.58.25""", "Died on +.nodes[0].cip"
    assert result.nodes[0].fibre_channel_target_port_group is None, "Died on .nodes[0].fibre_channel_target_port_group"
    assert result.nodes[0].mip == """10.117.56.25""", "Died on +.nodes[0].mip"
    assert result.nodes[0].associated_fservice_id == 0, "Died on +.nodes[0].associated_fservice_id"
    assert result.nodes[0].associated_master_service_id == 1, "Died on +.nodes[0].associated_master_service_id"
    assert result.nodes[0].cipi == """Bond10G""", "Died on +.nodes[0].cipi"
    assert type(result.nodes[0].attributes) is dict, "Died on .nodes[0].attributes"

def test_list_all_nodes_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListAllNodes_v8.7_0)

    
    result = ef.list_all_nodes()
    assert result.nodes[4].sip == """10.117.58.49""", "Died on +.nodes[4].sip"
    assert result.nodes[4].node_id == 5, "Died on +.nodes[4].node_id"
    assert result.nodes[4].uuid == UUID("4C4C4544-0043-4C10-8032-C7C04F445A31"), "Died on .nodes[4].uuid"
    assert result.nodes[4].name == """nlabp0921""", "Died on +.nodes[4].name"
    assert result.nodes[4].platform_info.node_type == """SF9605""", "Died on +.nodes[4].platform_info.node_type"
    assert result.nodes[4].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz""", "Died on +.nodes[4].platform_info.cpu_model"
    assert result.nodes[4].platform_info.node_memory_gb == 256, "Died on +.nodes[4].platform_info.node_memory_gb"
    assert result.nodes[4].platform_info.chassis_type == """R620""", "Died on +.nodes[4].platform_info.chassis_type"
    assert result.nodes[4].sipi == """Bond10G""", "Died on +.nodes[4].sipi"
    assert result.nodes[4].mipi == """Bond1G""", "Died on +.nodes[4].mipi"
    assert result.nodes[4].software_version == """8.7.0.15""", "Died on +.nodes[4].software_version"
    assert result.nodes[4].cip == """10.117.58.49""", "Died on +.nodes[4].cip"
    assert result.nodes[4].fibre_channel_target_port_group is None, "Died on .nodes[4].fibre_channel_target_port_group"
    assert result.nodes[4].mip == """10.117.56.49""", "Died on +.nodes[4].mip"
    assert result.nodes[4].associated_fservice_id == 0, "Died on +.nodes[4].associated_fservice_id"
    assert result.nodes[4].associated_master_service_id == 5, "Died on +.nodes[4].associated_master_service_id"
    assert result.nodes[4].cipi == """Bond10G""", "Died on +.nodes[4].cipi"
    assert type(result.nodes[4].attributes) is dict, "Died on .nodes[4].attributes"
    assert result.nodes[3].sip == """10.117.58.48""", "Died on +.nodes[3].sip"
    assert result.nodes[3].node_id == 4, "Died on +.nodes[3].node_id"
    assert result.nodes[3].uuid == UUID("4C4C4544-0043-4E10-8053-B5C04F383432"), "Died on .nodes[3].uuid"
    assert result.nodes[3].name == """NLABP0920""", "Died on +.nodes[3].name"
    assert result.nodes[3].platform_info.node_type == """SF9605""", "Died on +.nodes[3].platform_info.node_type"
    assert result.nodes[3].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHz""", "Died on +.nodes[3].platform_info.cpu_model"
    assert result.nodes[3].platform_info.node_memory_gb == 256, "Died on +.nodes[3].platform_info.node_memory_gb"
    assert result.nodes[3].platform_info.chassis_type == """R630""", "Died on +.nodes[3].platform_info.chassis_type"
    assert result.nodes[3].sipi == """Bond10G""", "Died on +.nodes[3].sipi"
    assert result.nodes[3].mipi == """Bond1G""", "Died on +.nodes[3].mipi"
    assert result.nodes[3].software_version == """8.7.0.15""", "Died on +.nodes[3].software_version"
    assert result.nodes[3].cip == """10.117.58.48""", "Died on +.nodes[3].cip"
    assert result.nodes[3].fibre_channel_target_port_group is None, "Died on .nodes[3].fibre_channel_target_port_group"
    assert result.nodes[3].mip == """10.117.56.48""", "Died on +.nodes[3].mip"
    assert result.nodes[3].associated_fservice_id == 0, "Died on +.nodes[3].associated_fservice_id"
    assert result.nodes[3].associated_master_service_id == 4, "Died on +.nodes[3].associated_master_service_id"
    assert result.nodes[3].cipi == """Bond10G""", "Died on +.nodes[3].cipi"
    assert type(result.nodes[3].attributes) is dict, "Died on .nodes[3].attributes"
    assert result.nodes[2].sip == """10.117.58.47""", "Died on +.nodes[2].sip"
    assert result.nodes[2].node_id == 3, "Died on +.nodes[2].node_id"
    assert result.nodes[2].uuid == UUID("4C4C4544-0038-4A10-804E-B6C04F383432"), "Died on .nodes[2].uuid"
    assert result.nodes[2].name == """NLABP0919""", "Died on +.nodes[2].name"
    assert result.nodes[2].platform_info.node_type == """SF9605""", "Died on +.nodes[2].platform_info.node_type"
    assert result.nodes[2].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHz""", "Died on +.nodes[2].platform_info.cpu_model"
    assert result.nodes[2].platform_info.node_memory_gb == 256, "Died on +.nodes[2].platform_info.node_memory_gb"
    assert result.nodes[2].platform_info.chassis_type == """R630""", "Died on +.nodes[2].platform_info.chassis_type"
    assert result.nodes[2].sipi == """Bond10G""", "Died on +.nodes[2].sipi"
    assert result.nodes[2].mipi == """Bond1G""", "Died on +.nodes[2].mipi"
    assert result.nodes[2].software_version == """8.7.0.15""", "Died on +.nodes[2].software_version"
    assert result.nodes[2].cip == """10.117.58.47""", "Died on +.nodes[2].cip"
    assert result.nodes[2].fibre_channel_target_port_group is None, "Died on .nodes[2].fibre_channel_target_port_group"
    assert result.nodes[2].mip == """10.117.56.47""", "Died on +.nodes[2].mip"
    assert result.nodes[2].associated_fservice_id == 0, "Died on +.nodes[2].associated_fservice_id"
    assert result.nodes[2].associated_master_service_id == 2, "Died on +.nodes[2].associated_master_service_id"
    assert result.nodes[2].cipi == """Bond10G""", "Died on +.nodes[2].cipi"
    assert type(result.nodes[2].attributes) is dict, "Died on .nodes[2].attributes"
    assert result.nodes[1].sip == """10.117.58.46""", "Died on +.nodes[1].sip"
    assert result.nodes[1].node_id == 2, "Died on +.nodes[1].node_id"
    assert result.nodes[1].uuid == UUID("4C4C4544-0043-5010-804D-B5C04F383432"), "Died on .nodes[1].uuid"
    assert result.nodes[1].name == """NLABP0917""", "Died on +.nodes[1].name"
    assert result.nodes[1].platform_info.node_type == """SF9605""", "Died on +.nodes[1].platform_info.node_type"
    assert result.nodes[1].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHz""", "Died on +.nodes[1].platform_info.cpu_model"
    assert result.nodes[1].platform_info.node_memory_gb == 256, "Died on +.nodes[1].platform_info.node_memory_gb"
    assert result.nodes[1].platform_info.chassis_type == """R630""", "Died on +.nodes[1].platform_info.chassis_type"
    assert result.nodes[1].sipi == """Bond10G""", "Died on +.nodes[1].sipi"
    assert result.nodes[1].mipi == """Bond1G""", "Died on +.nodes[1].mipi"
    assert result.nodes[1].software_version == """8.7.0.15""", "Died on +.nodes[1].software_version"
    assert result.nodes[1].cip == """10.117.58.46""", "Died on +.nodes[1].cip"
    assert result.nodes[1].fibre_channel_target_port_group is None, "Died on .nodes[1].fibre_channel_target_port_group"
    assert result.nodes[1].mip == """10.117.56.46""", "Died on +.nodes[1].mip"
    assert result.nodes[1].associated_fservice_id == 0, "Died on +.nodes[1].associated_fservice_id"
    assert result.nodes[1].associated_master_service_id == 3, "Died on +.nodes[1].associated_master_service_id"
    assert result.nodes[1].cipi == """Bond10G""", "Died on +.nodes[1].cipi"
    assert type(result.nodes[1].attributes) is dict, "Died on .nodes[1].attributes"
    assert result.nodes[0].sip == """10.117.58.45""", "Died on +.nodes[0].sip"
    assert result.nodes[0].node_id == 1, "Died on +.nodes[0].node_id"
    assert result.nodes[0].uuid == UUID("4C4C4544-0052-3910-804E-B5C04F383432"), "Died on .nodes[0].uuid"
    assert result.nodes[0].name == """NLABP0916""", "Died on +.nodes[0].name"
    assert result.nodes[0].platform_info.node_type == """SF9605""", "Died on +.nodes[0].platform_info.node_type"
    assert result.nodes[0].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHz""", "Died on +.nodes[0].platform_info.cpu_model"
    assert result.nodes[0].platform_info.node_memory_gb == 256, "Died on +.nodes[0].platform_info.node_memory_gb"
    assert result.nodes[0].platform_info.chassis_type == """R630""", "Died on +.nodes[0].platform_info.chassis_type"
    assert result.nodes[0].sipi == """Bond10G""", "Died on +.nodes[0].sipi"
    assert result.nodes[0].mipi == """Bond1G""", "Died on +.nodes[0].mipi"
    assert result.nodes[0].software_version == """8.7.0.15""", "Died on +.nodes[0].software_version"
    assert result.nodes[0].cip == """10.117.58.45""", "Died on +.nodes[0].cip"
    assert result.nodes[0].fibre_channel_target_port_group is None, "Died on .nodes[0].fibre_channel_target_port_group"
    assert result.nodes[0].mip == """10.117.56.45""", "Died on +.nodes[0].mip"
    assert result.nodes[0].associated_fservice_id == 0, "Died on +.nodes[0].associated_fservice_id"
    assert result.nodes[0].associated_master_service_id == 1, "Died on +.nodes[0].associated_master_service_id"
    assert result.nodes[0].cipi == """Bond10G""", "Died on +.nodes[0].cipi"
    assert type(result.nodes[0].attributes) is dict, "Died on .nodes[0].attributes"

def test_list_all_nodes_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListAllNodes_v9.0_0)

    
    result = ef.list_all_nodes()
    assert result.nodes[4].sip == """10.117.58.103""", "Died on +.nodes[4].sip"
    assert result.nodes[4].node_id == 5, "Died on +.nodes[4].node_id"
    assert result.nodes[4].uuid == UUID("4C4C4544-0048-4210-8057-C7C04F395931"), "Died on .nodes[4].uuid"
    assert result.nodes[4].name == """NLABP2010""", "Died on +.nodes[4].name"
    assert result.nodes[4].platform_info.node_type == """SF3010""", "Died on +.nodes[4].platform_info.node_type"
    assert result.nodes[4].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[4].platform_info.cpu_model"
    assert result.nodes[4].platform_info.node_memory_gb == 72, "Died on +.nodes[4].platform_info.node_memory_gb"
    assert result.nodes[4].platform_info.chassis_type == """R620""", "Died on +.nodes[4].platform_info.chassis_type"
    assert result.nodes[4].sipi == """Bond10G""", "Died on +.nodes[4].sipi"
    assert result.nodes[4].mipi == """Bond1G""", "Died on +.nodes[4].mipi"
    assert result.nodes[4].software_version == """9.0.0.1554""", "Died on +.nodes[4].software_version"
    assert result.nodes[4].cip == """10.117.58.103""", "Died on +.nodes[4].cip"
    assert result.nodes[4].fibre_channel_target_port_group is None, "Died on .nodes[4].fibre_channel_target_port_group"
    assert result.nodes[4].mip == """10.117.56.103""", "Died on +.nodes[4].mip"
    assert result.nodes[4].associated_fservice_id == 0, "Died on +.nodes[4].associated_fservice_id"
    assert result.nodes[4].associated_master_service_id == 3, "Died on +.nodes[4].associated_master_service_id"
    assert result.nodes[4].cipi == """Bond10G""", "Died on +.nodes[4].cipi"
    assert type(result.nodes[4].attributes) is dict, "Died on .nodes[4].attributes"
    assert result.nodes[3].sip == """10.117.58.102""", "Died on +.nodes[3].sip"
    assert result.nodes[3].node_id == 4, "Died on +.nodes[3].node_id"
    assert result.nodes[3].uuid == UUID("4C4C4544-0048-5A10-8057-C7C04F395931"), "Died on .nodes[3].uuid"
    assert result.nodes[3].name == """NLABP2006""", "Died on +.nodes[3].name"
    assert result.nodes[3].platform_info.node_type == """SF3010""", "Died on +.nodes[3].platform_info.node_type"
    assert result.nodes[3].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[3].platform_info.cpu_model"
    assert result.nodes[3].platform_info.node_memory_gb == 72, "Died on +.nodes[3].platform_info.node_memory_gb"
    assert result.nodes[3].platform_info.chassis_type == """R620""", "Died on +.nodes[3].platform_info.chassis_type"
    assert result.nodes[3].sipi == """Bond10G""", "Died on +.nodes[3].sipi"
    assert result.nodes[3].mipi == """Bond1G""", "Died on +.nodes[3].mipi"
    assert result.nodes[3].software_version == """9.0.0.1554""", "Died on +.nodes[3].software_version"
    assert result.nodes[3].cip == """10.117.58.102""", "Died on +.nodes[3].cip"
    assert result.nodes[3].fibre_channel_target_port_group is None, "Died on .nodes[3].fibre_channel_target_port_group"
    assert result.nodes[3].mip == """10.117.56.102""", "Died on +.nodes[3].mip"
    assert result.nodes[3].associated_fservice_id == 0, "Died on +.nodes[3].associated_fservice_id"
    assert result.nodes[3].associated_master_service_id == 4, "Died on +.nodes[3].associated_master_service_id"
    assert result.nodes[3].cipi == """Bond10G""", "Died on +.nodes[3].cipi"
    assert type(result.nodes[3].attributes) is dict, "Died on .nodes[3].attributes"
    assert result.nodes[2].sip == """10.117.58.100""", "Died on +.nodes[2].sip"
    assert result.nodes[2].node_id == 3, "Died on +.nodes[2].node_id"
    assert result.nodes[2].uuid == UUID("4C4C4544-0048-5810-8056-C7C04F395931"), "Died on .nodes[2].uuid"
    assert result.nodes[2].name == """NLABP2004""", "Died on +.nodes[2].name"
    assert result.nodes[2].platform_info.node_type == """SF3010""", "Died on +.nodes[2].platform_info.node_type"
    assert result.nodes[2].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[2].platform_info.cpu_model"
    assert result.nodes[2].platform_info.node_memory_gb == 72, "Died on +.nodes[2].platform_info.node_memory_gb"
    assert result.nodes[2].platform_info.chassis_type == """R620""", "Died on +.nodes[2].platform_info.chassis_type"
    assert result.nodes[2].sipi == """Bond10G""", "Died on +.nodes[2].sipi"
    assert result.nodes[2].mipi == """Bond1G""", "Died on +.nodes[2].mipi"
    assert result.nodes[2].software_version == """9.0.0.1554""", "Died on +.nodes[2].software_version"
    assert result.nodes[2].cip == """10.117.58.100""", "Died on +.nodes[2].cip"
    assert result.nodes[2].fibre_channel_target_port_group is None, "Died on .nodes[2].fibre_channel_target_port_group"
    assert result.nodes[2].mip == """10.117.56.100""", "Died on +.nodes[2].mip"
    assert result.nodes[2].associated_fservice_id == 0, "Died on +.nodes[2].associated_fservice_id"
    assert result.nodes[2].associated_master_service_id == 5, "Died on +.nodes[2].associated_master_service_id"
    assert result.nodes[2].cipi == """Bond10G""", "Died on +.nodes[2].cipi"
    assert type(result.nodes[2].attributes) is dict, "Died on .nodes[2].attributes"
    assert result.nodes[1].sip == """10.117.58.24""", "Died on +.nodes[1].sip"
    assert result.nodes[1].node_id == 2, "Died on +.nodes[1].node_id"
    assert result.nodes[1].uuid == UUID("4C4C4544-0039-5910-8034-C4C04F4A3032"), "Died on .nodes[1].uuid"
    assert result.nodes[1].name == """NLABP1802""", "Died on +.nodes[1].name"
    assert result.nodes[1].platform_info.node_type == """SF3010""", "Died on +.nodes[1].platform_info.node_type"
    assert result.nodes[1].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[1].platform_info.cpu_model"
    assert result.nodes[1].platform_info.node_memory_gb == 72, "Died on +.nodes[1].platform_info.node_memory_gb"
    assert result.nodes[1].platform_info.chassis_type == """R620""", "Died on +.nodes[1].platform_info.chassis_type"
    assert result.nodes[1].sipi == """Bond10G""", "Died on +.nodes[1].sipi"
    assert result.nodes[1].mipi == """Bond1G""", "Died on +.nodes[1].mipi"
    assert result.nodes[1].software_version == """9.0.0.1554""", "Died on +.nodes[1].software_version"
    assert result.nodes[1].cip == """10.117.58.24""", "Died on +.nodes[1].cip"
    assert result.nodes[1].fibre_channel_target_port_group is None, "Died on .nodes[1].fibre_channel_target_port_group"
    assert result.nodes[1].mip == """10.117.56.24""", "Died on +.nodes[1].mip"
    assert result.nodes[1].associated_fservice_id == 0, "Died on +.nodes[1].associated_fservice_id"
    assert result.nodes[1].associated_master_service_id == 2, "Died on +.nodes[1].associated_master_service_id"
    assert result.nodes[1].cipi == """Bond10G""", "Died on +.nodes[1].cipi"
    assert type(result.nodes[1].attributes) is dict, "Died on .nodes[1].attributes"
    assert result.nodes[0].sip == """10.117.58.6""", "Died on +.nodes[0].sip"
    assert result.nodes[0].node_id == 1, "Died on +.nodes[0].node_id"
    assert result.nodes[0].uuid == UUID("4C4C4544-0048-4410-8057-C7C04F395931"), "Died on .nodes[0].uuid"
    assert result.nodes[0].name == """NLABP2022""", "Died on +.nodes[0].name"
    assert result.nodes[0].platform_info.node_type == """SF3010""", "Died on +.nodes[0].platform_info.node_type"
    assert result.nodes[0].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[0].platform_info.cpu_model"
    assert result.nodes[0].platform_info.node_memory_gb == 72, "Died on +.nodes[0].platform_info.node_memory_gb"
    assert result.nodes[0].platform_info.chassis_type == """R620""", "Died on +.nodes[0].platform_info.chassis_type"
    assert result.nodes[0].sipi == """Bond10G""", "Died on +.nodes[0].sipi"
    assert result.nodes[0].mipi == """Bond1G""", "Died on +.nodes[0].mipi"
    assert result.nodes[0].software_version == """9.0.0.1554""", "Died on +.nodes[0].software_version"
    assert result.nodes[0].cip == """10.117.58.6""", "Died on +.nodes[0].cip"
    assert result.nodes[0].fibre_channel_target_port_group is None, "Died on .nodes[0].fibre_channel_target_port_group"
    assert result.nodes[0].mip == """10.117.56.6""", "Died on +.nodes[0].mip"
    assert result.nodes[0].associated_fservice_id == 0, "Died on +.nodes[0].associated_fservice_id"
    assert result.nodes[0].associated_master_service_id == 1, "Died on +.nodes[0].associated_master_service_id"
    assert result.nodes[0].cipi == """Bond10G""", "Died on +.nodes[0].cipi"
    assert type(result.nodes[0].attributes) is dict, "Died on .nodes[0].attributes"

def test_list_all_nodes_v9.0_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListAllNodes_v9.0_1)

    
    result = ef.list_all_nodes()
    assert result.nodes[4].sip == """10.117.58.138""", "Died on +.nodes[4].sip"
    assert result.nodes[4].node_id == 5, "Died on +.nodes[4].node_id"
    assert result.nodes[4].uuid == UUID("4C4C4544-0047-5410-8046-C3C04F464232"), "Died on .nodes[4].uuid"
    assert result.nodes[4].name == """NLABP1301""", "Died on +.nodes[4].name"
    assert result.nodes[4].platform_info.node_type == """SF9605""", "Died on +.nodes[4].platform_info.node_type"
    assert result.nodes[4].platform_info.platform_config_version == """9.1.0.30""", "Died on +.nodes[4].platform_info.platform_config_version"
    assert result.nodes[4].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHz""", "Died on +.nodes[4].platform_info.cpu_model"
    assert result.nodes[4].platform_info.node_memory_gb == 256, "Died on +.nodes[4].platform_info.node_memory_gb"
    assert result.nodes[4].platform_info.chassis_type == """R630""", "Died on +.nodes[4].platform_info.chassis_type"
    assert result.nodes[4].sipi == """Bond10G""", "Died on +.nodes[4].sipi"
    assert result.nodes[4].mipi == """Bond1G""", "Died on +.nodes[4].mipi"
    assert result.nodes[4].software_version == """9.1.0.30""", "Died on +.nodes[4].software_version"
    assert result.nodes[4].cip == """10.117.58.138""", "Died on +.nodes[4].cip"
    assert result.nodes[4].fibre_channel_target_port_group is None, "Died on .nodes[4].fibre_channel_target_port_group"
    assert result.nodes[4].mip == """10.117.56.138""", "Died on +.nodes[4].mip"
    assert result.nodes[4].associated_fservice_id == 0, "Died on +.nodes[4].associated_fservice_id"
    assert result.nodes[4].associated_master_service_id == 2, "Died on +.nodes[4].associated_master_service_id"
    assert result.nodes[4].cipi == """Bond10G""", "Died on +.nodes[4].cipi"
    assert type(result.nodes[4].attributes) is dict, "Died on .nodes[4].attributes"
    assert result.nodes[3].sip == """10.117.58.45""", "Died on +.nodes[3].sip"
    assert result.nodes[3].node_id == 4, "Died on +.nodes[3].node_id"
    assert result.nodes[3].uuid == UUID("4C4C4544-0052-3910-804E-B5C04F383432"), "Died on .nodes[3].uuid"
    assert result.nodes[3].name == """NLABP0916""", "Died on +.nodes[3].name"
    assert result.nodes[3].platform_info.node_type == """SF9605""", "Died on +.nodes[3].platform_info.node_type"
    assert result.nodes[3].platform_info.platform_config_version == """9.1.0.30""", "Died on +.nodes[3].platform_info.platform_config_version"
    assert result.nodes[3].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHz""", "Died on +.nodes[3].platform_info.cpu_model"
    assert result.nodes[3].platform_info.node_memory_gb == 256, "Died on +.nodes[3].platform_info.node_memory_gb"
    assert result.nodes[3].platform_info.chassis_type == """R630""", "Died on +.nodes[3].platform_info.chassis_type"
    assert result.nodes[3].sipi == """Bond10G""", "Died on +.nodes[3].sipi"
    assert result.nodes[3].mipi == """Bond1G""", "Died on +.nodes[3].mipi"
    assert result.nodes[3].software_version == """9.1.0.30""", "Died on +.nodes[3].software_version"
    assert result.nodes[3].cip == """10.117.58.45""", "Died on +.nodes[3].cip"
    assert result.nodes[3].fibre_channel_target_port_group is None, "Died on .nodes[3].fibre_channel_target_port_group"
    assert result.nodes[3].mip == """10.117.56.45""", "Died on +.nodes[3].mip"
    assert result.nodes[3].associated_fservice_id == 0, "Died on +.nodes[3].associated_fservice_id"
    assert result.nodes[3].associated_master_service_id == 3, "Died on +.nodes[3].associated_master_service_id"
    assert result.nodes[3].cipi == """Bond10G""", "Died on +.nodes[3].cipi"
    assert type(result.nodes[3].attributes) is dict, "Died on .nodes[3].attributes"
    assert result.nodes[2].sip == """10.117.58.18""", "Died on +.nodes[2].sip"
    assert result.nodes[2].node_id == 3, "Died on +.nodes[2].node_id"
    assert result.nodes[2].uuid == UUID("4C4C4544-0048-4E10-8057-C7C04F395931"), "Died on .nodes[2].uuid"
    assert result.nodes[2].name == """NLABP0907""", "Died on +.nodes[2].name"
    assert result.nodes[2].platform_info.node_type == """SF9605""", "Died on +.nodes[2].platform_info.node_type"
    assert result.nodes[2].platform_info.platform_config_version == """9.1.0.30""", "Died on +.nodes[2].platform_info.platform_config_version"
    assert result.nodes[2].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz""", "Died on +.nodes[2].platform_info.cpu_model"
    assert result.nodes[2].platform_info.node_memory_gb == 256, "Died on +.nodes[2].platform_info.node_memory_gb"
    assert result.nodes[2].platform_info.chassis_type == """R620""", "Died on +.nodes[2].platform_info.chassis_type"
    assert result.nodes[2].sipi == """Bond10G""", "Died on +.nodes[2].sipi"
    assert result.nodes[2].mipi == """Bond1G""", "Died on +.nodes[2].mipi"
    assert result.nodes[2].software_version == """9.1.0.30""", "Died on +.nodes[2].software_version"
    assert result.nodes[2].cip == """10.117.58.18""", "Died on +.nodes[2].cip"
    assert result.nodes[2].fibre_channel_target_port_group is None, "Died on .nodes[2].fibre_channel_target_port_group"
    assert result.nodes[2].mip == """10.117.56.18""", "Died on +.nodes[2].mip"
    assert result.nodes[2].associated_fservice_id == 0, "Died on +.nodes[2].associated_fservice_id"
    assert result.nodes[2].associated_master_service_id == 5, "Died on +.nodes[2].associated_master_service_id"
    assert result.nodes[2].cipi == """Bond10G""", "Died on +.nodes[2].cipi"
    assert type(result.nodes[2].attributes) is dict, "Died on .nodes[2].attributes"
    assert result.nodes[1].sip == """10.117.58.17""", "Died on +.nodes[1].sip"
    assert result.nodes[1].node_id == 2, "Died on +.nodes[1].node_id"
    assert result.nodes[1].uuid == UUID("4C4C4544-0048-4810-8058-C7C04F395931"), "Died on .nodes[1].uuid"
    assert result.nodes[1].name == """NLABP0906""", "Died on +.nodes[1].name"
    assert result.nodes[1].platform_info.node_type == """SF9605""", "Died on +.nodes[1].platform_info.node_type"
    assert result.nodes[1].platform_info.platform_config_version == """9.1.0.30""", "Died on +.nodes[1].platform_info.platform_config_version"
    assert result.nodes[1].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz""", "Died on +.nodes[1].platform_info.cpu_model"
    assert result.nodes[1].platform_info.node_memory_gb == 256, "Died on +.nodes[1].platform_info.node_memory_gb"
    assert result.nodes[1].platform_info.chassis_type == """R620""", "Died on +.nodes[1].platform_info.chassis_type"
    assert result.nodes[1].sipi == """Bond10G""", "Died on +.nodes[1].sipi"
    assert result.nodes[1].mipi == """Bond1G""", "Died on +.nodes[1].mipi"
    assert result.nodes[1].software_version == """9.1.0.30""", "Died on +.nodes[1].software_version"
    assert result.nodes[1].cip == """10.117.58.17""", "Died on +.nodes[1].cip"
    assert result.nodes[1].fibre_channel_target_port_group is None, "Died on .nodes[1].fibre_channel_target_port_group"
    assert result.nodes[1].mip == """10.117.56.17""", "Died on +.nodes[1].mip"
    assert result.nodes[1].associated_fservice_id == 0, "Died on +.nodes[1].associated_fservice_id"
    assert result.nodes[1].associated_master_service_id == 4, "Died on +.nodes[1].associated_master_service_id"
    assert result.nodes[1].cipi == """Bond10G""", "Died on +.nodes[1].cipi"
    assert type(result.nodes[1].attributes) is dict, "Died on .nodes[1].attributes"
    assert result.nodes[0].sip == """10.117.58.16""", "Died on +.nodes[0].sip"
    assert result.nodes[0].node_id == 1, "Died on +.nodes[0].node_id"
    assert result.nodes[0].uuid == UUID("4C4C4544-0048-3810-8058-C7C04F395931"), "Died on .nodes[0].uuid"
    assert result.nodes[0].name == """NLABP0905""", "Died on +.nodes[0].name"
    assert result.nodes[0].platform_info.node_type == """SF9605""", "Died on +.nodes[0].platform_info.node_type"
    assert result.nodes[0].platform_info.platform_config_version == """9.1.0.30""", "Died on +.nodes[0].platform_info.platform_config_version"
    assert result.nodes[0].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2620 v2 @ 2.10GHz""", "Died on +.nodes[0].platform_info.cpu_model"
    assert result.nodes[0].platform_info.node_memory_gb == 256, "Died on +.nodes[0].platform_info.node_memory_gb"
    assert result.nodes[0].platform_info.chassis_type == """R620""", "Died on +.nodes[0].platform_info.chassis_type"
    assert result.nodes[0].sipi == """Bond10G""", "Died on +.nodes[0].sipi"
    assert result.nodes[0].mipi == """Bond1G""", "Died on +.nodes[0].mipi"
    assert result.nodes[0].software_version == """9.1.0.30""", "Died on +.nodes[0].software_version"
    assert result.nodes[0].cip == """10.117.58.16""", "Died on +.nodes[0].cip"
    assert result.nodes[0].fibre_channel_target_port_group is None, "Died on .nodes[0].fibre_channel_target_port_group"
    assert result.nodes[0].mip == """10.117.56.16""", "Died on +.nodes[0].mip"
    assert result.nodes[0].associated_fservice_id == 0, "Died on +.nodes[0].associated_fservice_id"
    assert result.nodes[0].associated_master_service_id == 1, "Died on +.nodes[0].associated_master_service_id"
    assert result.nodes[0].cipi == """Bond10G""", "Died on +.nodes[0].cipi"
    assert type(result.nodes[0].attributes) is dict, "Died on .nodes[0].attributes"

def test_list_all_nodes_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListAllNodes_v9.1_0)

    
    result = ef.list_all_nodes()
    assert result.nodes[3].sip == """10.117.58.76""", "Died on +.nodes[3].sip"
    assert result.nodes[3].node_id == 4, "Died on +.nodes[3].node_id"
    assert result.nodes[3].uuid == UUID("4C4C4544-0039-4E10-8033-C4C04F4A3032"), "Died on .nodes[3].uuid"
    assert result.nodes[3].name == """NLABP1001""", "Died on +.nodes[3].name"
    assert result.nodes[3].platform_info.node_type == """SF3010""", "Died on +.nodes[3].platform_info.node_type"
    assert result.nodes[3].platform_info.platform_config_version == """9.1.0.28""", "Died on +.nodes[3].platform_info.platform_config_version"
    assert result.nodes[3].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[3].platform_info.cpu_model"
    assert result.nodes[3].platform_info.node_memory_gb == 72, "Died on +.nodes[3].platform_info.node_memory_gb"
    assert result.nodes[3].platform_info.chassis_type == """R620""", "Died on +.nodes[3].platform_info.chassis_type"
    assert result.nodes[3].sipi == """Bond10G""", "Died on +.nodes[3].sipi"
    assert result.nodes[3].mipi == """Bond1G""", "Died on +.nodes[3].mipi"
    assert result.nodes[3].software_version == """9.1.0.28""", "Died on +.nodes[3].software_version"
    assert result.nodes[3].cip == """10.117.58.76""", "Died on +.nodes[3].cip"
    assert result.nodes[3].fibre_channel_target_port_group is None, "Died on .nodes[3].fibre_channel_target_port_group"
    assert result.nodes[3].mip == """10.117.56.76""", "Died on +.nodes[3].mip"
    assert result.nodes[3].associated_fservice_id == 0, "Died on +.nodes[3].associated_fservice_id"
    assert result.nodes[3].associated_master_service_id == 2, "Died on +.nodes[3].associated_master_service_id"
    assert result.nodes[3].cipi == """Bond10G""", "Died on +.nodes[3].cipi"
    assert type(result.nodes[3].attributes) is dict, "Died on .nodes[3].attributes"
    assert result.nodes[2].sip == """10.117.58.75""", "Died on +.nodes[2].sip"
    assert result.nodes[2].node_id == 3, "Died on +.nodes[2].node_id"
    assert result.nodes[2].uuid == UUID("4C4C4544-0039-5810-8036-C4C04F4A3032"), "Died on .nodes[2].uuid"
    assert result.nodes[2].name == """NLABP2124""", "Died on +.nodes[2].name"
    assert result.nodes[2].platform_info.node_type == """SF3010""", "Died on +.nodes[2].platform_info.node_type"
    assert result.nodes[2].platform_info.platform_config_version == """9.1.0.28""", "Died on +.nodes[2].platform_info.platform_config_version"
    assert result.nodes[2].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[2].platform_info.cpu_model"
    assert result.nodes[2].platform_info.node_memory_gb == 72, "Died on +.nodes[2].platform_info.node_memory_gb"
    assert result.nodes[2].platform_info.chassis_type == """R620""", "Died on +.nodes[2].platform_info.chassis_type"
    assert result.nodes[2].sipi == """Bond10G""", "Died on +.nodes[2].sipi"
    assert result.nodes[2].mipi == """Bond1G""", "Died on +.nodes[2].mipi"
    assert result.nodes[2].software_version == """9.1.0.28""", "Died on +.nodes[2].software_version"
    assert result.nodes[2].cip == """10.117.58.75""", "Died on +.nodes[2].cip"
    assert result.nodes[2].fibre_channel_target_port_group is None, "Died on .nodes[2].fibre_channel_target_port_group"
    assert result.nodes[2].mip == """10.117.56.75""", "Died on +.nodes[2].mip"
    assert result.nodes[2].associated_fservice_id == 0, "Died on +.nodes[2].associated_fservice_id"
    assert result.nodes[2].associated_master_service_id == 4, "Died on +.nodes[2].associated_master_service_id"
    assert result.nodes[2].cipi == """Bond10G""", "Died on +.nodes[2].cipi"
    assert type(result.nodes[2].attributes) is dict, "Died on .nodes[2].attributes"
    assert result.nodes[1].sip == """10.117.58.74""", "Died on +.nodes[1].sip"
    assert result.nodes[1].node_id == 2, "Died on +.nodes[1].node_id"
    assert result.nodes[1].uuid == UUID("4C4C4544-0039-5910-8037-C4C04F4A3032"), "Died on .nodes[1].uuid"
    assert result.nodes[1].name == """NLABP2123""", "Died on +.nodes[1].name"
    assert result.nodes[1].platform_info.node_type == """SF3010""", "Died on +.nodes[1].platform_info.node_type"
    assert result.nodes[1].platform_info.platform_config_version == """9.1.0.28""", "Died on +.nodes[1].platform_info.platform_config_version"
    assert result.nodes[1].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[1].platform_info.cpu_model"
    assert result.nodes[1].platform_info.node_memory_gb == 72, "Died on +.nodes[1].platform_info.node_memory_gb"
    assert result.nodes[1].platform_info.chassis_type == """R620""", "Died on +.nodes[1].platform_info.chassis_type"
    assert result.nodes[1].sipi == """Bond10G""", "Died on +.nodes[1].sipi"
    assert result.nodes[1].mipi == """Bond1G""", "Died on +.nodes[1].mipi"
    assert result.nodes[1].software_version == """9.1.0.28""", "Died on +.nodes[1].software_version"
    assert result.nodes[1].cip == """10.117.58.74""", "Died on +.nodes[1].cip"
    assert result.nodes[1].fibre_channel_target_port_group is None, "Died on .nodes[1].fibre_channel_target_port_group"
    assert result.nodes[1].mip == """10.117.56.74""", "Died on +.nodes[1].mip"
    assert result.nodes[1].associated_fservice_id == 0, "Died on +.nodes[1].associated_fservice_id"
    assert result.nodes[1].associated_master_service_id == 3, "Died on +.nodes[1].associated_master_service_id"
    assert result.nodes[1].cipi == """Bond10G""", "Died on +.nodes[1].cipi"
    assert type(result.nodes[1].attributes) is dict, "Died on .nodes[1].attributes"
    assert result.nodes[0].sip == """10.117.58.69""", "Died on +.nodes[0].sip"
    assert result.nodes[0].node_id == 1, "Died on +.nodes[0].node_id"
    assert result.nodes[0].uuid == UUID("4C4C4544-0039-4710-8037-C4C04F4A3032"), "Died on .nodes[0].uuid"
    assert result.nodes[0].name == """NLABP2117""", "Died on +.nodes[0].name"
    assert result.nodes[0].platform_info.node_type == """SF3010""", "Died on +.nodes[0].platform_info.node_type"
    assert result.nodes[0].platform_info.platform_config_version == """9.1.0.28""", "Died on +.nodes[0].platform_info.platform_config_version"
    assert result.nodes[0].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[0].platform_info.cpu_model"
    assert result.nodes[0].platform_info.node_memory_gb == 72, "Died on +.nodes[0].platform_info.node_memory_gb"
    assert result.nodes[0].platform_info.chassis_type == """R620""", "Died on +.nodes[0].platform_info.chassis_type"
    assert result.nodes[0].sipi == """Bond10G""", "Died on +.nodes[0].sipi"
    assert result.nodes[0].mipi == """Bond1G""", "Died on +.nodes[0].mipi"
    assert result.nodes[0].software_version == """9.1.0.28""", "Died on +.nodes[0].software_version"
    assert result.nodes[0].cip == """10.117.58.69""", "Died on +.nodes[0].cip"
    assert result.nodes[0].fibre_channel_target_port_group is None, "Died on .nodes[0].fibre_channel_target_port_group"
    assert result.nodes[0].mip == """10.117.56.69""", "Died on +.nodes[0].mip"
    assert result.nodes[0].associated_fservice_id == 0, "Died on +.nodes[0].associated_fservice_id"
    assert result.nodes[0].associated_master_service_id == 1, "Died on +.nodes[0].associated_master_service_id"
    assert result.nodes[0].cipi == """Bond10G""", "Died on +.nodes[0].cipi"
    assert type(result.nodes[0].attributes) is dict, "Died on .nodes[0].attributes"

def test_list_all_nodes_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListAllNodes_v9.1_1)

    
    result = ef.list_all_nodes()
    assert result.pending_nodes[0].sip == """10.117.58.77""", "Died on +.pending_nodes[0].sip"
    assert result.pending_nodes[0].uuid == UUID("4C4C4544-0057-4710-8053-B2C04F4B3032"), "Died on .pending_nodes[0].uuid"
    assert result.pending_nodes[0].name == """NLABP1002""", "Died on +.pending_nodes[0].name"
    assert result.pending_nodes[0].sipi == """Bond10G""", "Died on +.pending_nodes[0].sipi"
    assert result.pending_nodes[0].assigned_node_id == 0, "Died on +.pending_nodes[0].assigned_node_id"
    assert result.pending_nodes[0].compatible == True, "Died on +.pending_nodes[0].compatible"
    assert result.pending_nodes[0].software_version == """9.1.0.28""", "Died on +.pending_nodes[0].software_version"
    assert result.pending_nodes[0].mipi == """Bond1G""", "Died on +.pending_nodes[0].mipi"
    assert result.pending_nodes[0].platform_info.node_type == """SF3010""", "Died on +.pending_nodes[0].platform_info.node_type"
    assert result.pending_nodes[0].platform_info.platform_config_version == """9.1.0.28""", "Died on +.pending_nodes[0].platform_info.platform_config_version"
    assert result.pending_nodes[0].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.pending_nodes[0].platform_info.cpu_model"
    assert result.pending_nodes[0].platform_info.node_memory_gb == 72, "Died on +.pending_nodes[0].platform_info.node_memory_gb"
    assert result.pending_nodes[0].platform_info.chassis_type == """R620""", "Died on +.pending_nodes[0].platform_info.chassis_type"
    assert result.pending_nodes[0].mip == """10.117.56.77""", "Died on +.pending_nodes[0].mip"
    assert result.pending_nodes[0].cip == """10.117.58.77""", "Died on +.pending_nodes[0].cip"
    assert result.pending_nodes[0].cipi == """Bond10G""", "Died on +.pending_nodes[0].cipi"
    assert result.pending_nodes[0].pending_node_id == 1, "Died on +.pending_nodes[0].pending_node_id"
    assert result.nodes[2].sip == """10.117.58.78""", "Died on +.nodes[2].sip"
    assert result.nodes[2].node_id == 4, "Died on +.nodes[2].node_id"
    assert result.nodes[2].uuid == UUID("4C4C4544-0030-4E10-8033-B7C04F4B3032"), "Died on .nodes[2].uuid"
    assert result.nodes[2].name == """NLABP1003""", "Died on +.nodes[2].name"
    assert result.nodes[2].platform_info.node_type == """SF3010""", "Died on +.nodes[2].platform_info.node_type"
    assert result.nodes[2].platform_info.platform_config_version == """9.1.0.28""", "Died on +.nodes[2].platform_info.platform_config_version"
    assert result.nodes[2].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[2].platform_info.cpu_model"
    assert result.nodes[2].platform_info.node_memory_gb == 72, "Died on +.nodes[2].platform_info.node_memory_gb"
    assert result.nodes[2].platform_info.chassis_type == """R620""", "Died on +.nodes[2].platform_info.chassis_type"
    assert result.nodes[2].sipi == """Bond10G""", "Died on +.nodes[2].sipi"
    assert result.nodes[2].mipi == """Bond1G""", "Died on +.nodes[2].mipi"
    assert result.nodes[2].software_version == """9.1.0.28""", "Died on +.nodes[2].software_version"
    assert result.nodes[2].cip == """10.117.58.78""", "Died on +.nodes[2].cip"
    assert result.nodes[2].fibre_channel_target_port_group is None, "Died on .nodes[2].fibre_channel_target_port_group"
    assert result.nodes[2].mip == """10.117.56.78""", "Died on +.nodes[2].mip"
    assert result.nodes[2].associated_fservice_id == 0, "Died on +.nodes[2].associated_fservice_id"
    assert result.nodes[2].associated_master_service_id == 2, "Died on +.nodes[2].associated_master_service_id"
    assert result.nodes[2].cipi == """Bond10G""", "Died on +.nodes[2].cipi"
    assert type(result.nodes[2].attributes) is dict, "Died on .nodes[2].attributes"
    assert result.nodes[1].sip == """10.117.58.76""", "Died on +.nodes[1].sip"
    assert result.nodes[1].node_id == 2, "Died on +.nodes[1].node_id"
    assert result.nodes[1].uuid == UUID("4C4C4544-0039-4E10-8033-C4C04F4A3032"), "Died on .nodes[1].uuid"
    assert result.nodes[1].name == """NLABP1001""", "Died on +.nodes[1].name"
    assert result.nodes[1].platform_info.node_type == """SF3010""", "Died on +.nodes[1].platform_info.node_type"
    assert result.nodes[1].platform_info.platform_config_version == """9.1.0.28""", "Died on +.nodes[1].platform_info.platform_config_version"
    assert result.nodes[1].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[1].platform_info.cpu_model"
    assert result.nodes[1].platform_info.node_memory_gb == 72, "Died on +.nodes[1].platform_info.node_memory_gb"
    assert result.nodes[1].platform_info.chassis_type == """R620""", "Died on +.nodes[1].platform_info.chassis_type"
    assert result.nodes[1].sipi == """Bond10G""", "Died on +.nodes[1].sipi"
    assert result.nodes[1].mipi == """Bond1G""", "Died on +.nodes[1].mipi"
    assert result.nodes[1].software_version == """9.1.0.28""", "Died on +.nodes[1].software_version"
    assert result.nodes[1].cip == """10.117.58.76""", "Died on +.nodes[1].cip"
    assert result.nodes[1].fibre_channel_target_port_group is None, "Died on .nodes[1].fibre_channel_target_port_group"
    assert result.nodes[1].mip == """10.117.56.76""", "Died on +.nodes[1].mip"
    assert result.nodes[1].associated_fservice_id == 0, "Died on +.nodes[1].associated_fservice_id"
    assert result.nodes[1].associated_master_service_id == 3, "Died on +.nodes[1].associated_master_service_id"
    assert result.nodes[1].cipi == """Bond10G""", "Died on +.nodes[1].cipi"
    assert type(result.nodes[1].attributes) is dict, "Died on .nodes[1].attributes"
    assert result.nodes[0].sip == """10.117.58.75""", "Died on +.nodes[0].sip"
    assert result.nodes[0].node_id == 1, "Died on +.nodes[0].node_id"
    assert result.nodes[0].uuid == UUID("4C4C4544-0039-5810-8036-C4C04F4A3032"), "Died on .nodes[0].uuid"
    assert result.nodes[0].name == """NLABP2124""", "Died on +.nodes[0].name"
    assert result.nodes[0].platform_info.node_type == """SF3010""", "Died on +.nodes[0].platform_info.node_type"
    assert result.nodes[0].platform_info.platform_config_version == """9.1.0.28""", "Died on +.nodes[0].platform_info.platform_config_version"
    assert result.nodes[0].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[0].platform_info.cpu_model"
    assert result.nodes[0].platform_info.node_memory_gb == 72, "Died on +.nodes[0].platform_info.node_memory_gb"
    assert result.nodes[0].platform_info.chassis_type == """R620""", "Died on +.nodes[0].platform_info.chassis_type"
    assert result.nodes[0].sipi == """Bond10G""", "Died on +.nodes[0].sipi"
    assert result.nodes[0].mipi == """Bond1G""", "Died on +.nodes[0].mipi"
    assert result.nodes[0].software_version == """9.1.0.28""", "Died on +.nodes[0].software_version"
    assert result.nodes[0].cip == """10.117.58.75""", "Died on +.nodes[0].cip"
    assert result.nodes[0].fibre_channel_target_port_group is None, "Died on .nodes[0].fibre_channel_target_port_group"
    assert result.nodes[0].mip == """10.117.56.75""", "Died on +.nodes[0].mip"
    assert result.nodes[0].associated_fservice_id == 0, "Died on +.nodes[0].associated_fservice_id"
    assert result.nodes[0].associated_master_service_id == 1, "Died on +.nodes[0].associated_master_service_id"
    assert result.nodes[0].cipi == """Bond10G""", "Died on +.nodes[0].cipi"
    assert type(result.nodes[0].attributes) is dict, "Died on .nodes[0].attributes"

def test_list_all_nodes_v9.1_2():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListAllNodes_v9.1_2)

    
    result = ef.list_all_nodes()
    assert result.nodes[2].sip == """10.117.58.133""", "Died on +.nodes[2].sip"
    assert result.nodes[2].node_id == 4, "Died on +.nodes[2].node_id"
    assert result.nodes[2].uuid == UUID("4C4C4544-0050-5810-8052-B7C04F395431"), "Died on .nodes[2].uuid"
    assert result.nodes[2].name == """NLABP0929""", "Died on +.nodes[2].name"
    assert result.nodes[2].platform_info.node_type == """SF6010""", "Died on +.nodes[2].platform_info.node_type"
    assert result.nodes[2].platform_info.platform_config_version == """9.1.0.34""", "Died on +.nodes[2].platform_info.platform_config_version"
    assert result.nodes[2].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[2].platform_info.cpu_model"
    assert result.nodes[2].platform_info.node_memory_gb == 144, "Died on +.nodes[2].platform_info.node_memory_gb"
    assert result.nodes[2].platform_info.chassis_type == """R620""", "Died on +.nodes[2].platform_info.chassis_type"
    assert result.nodes[2].sipi == """Bond10G""", "Died on +.nodes[2].sipi"
    assert result.nodes[2].mipi == """Bond1G""", "Died on +.nodes[2].mipi"
    assert result.nodes[2].software_version == """9.1.0.34""", "Died on +.nodes[2].software_version"
    assert result.nodes[2].cip == """10.117.58.133""", "Died on +.nodes[2].cip"
    assert result.nodes[2].fibre_channel_target_port_group is None, "Died on .nodes[2].fibre_channel_target_port_group"
    assert result.nodes[2].mip == """10.117.56.133""", "Died on +.nodes[2].mip"
    assert result.nodes[2].associated_fservice_id == 0, "Died on +.nodes[2].associated_fservice_id"
    assert result.nodes[2].associated_master_service_id == 2, "Died on +.nodes[2].associated_master_service_id"
    assert result.nodes[2].cipi == """Bond10G""", "Died on +.nodes[2].cipi"
    assert type(result.nodes[2].attributes) is dict, "Died on .nodes[2].attributes"
    assert result.nodes[1].sip == """10.117.58.132""", "Died on +.nodes[1].sip"
    assert result.nodes[1].node_id == 3, "Died on +.nodes[1].node_id"
    assert result.nodes[1].uuid == UUID("4C4C4544-0038-5210-8052-CAC04F335431"), "Died on .nodes[1].uuid"
    assert result.nodes[1].name == """NLABP0928""", "Died on +.nodes[1].name"
    assert result.nodes[1].platform_info.node_type == """SF6010""", "Died on +.nodes[1].platform_info.node_type"
    assert result.nodes[1].platform_info.platform_config_version == """9.1.0.34""", "Died on +.nodes[1].platform_info.platform_config_version"
    assert result.nodes[1].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[1].platform_info.cpu_model"
    assert result.nodes[1].platform_info.node_memory_gb == 144, "Died on +.nodes[1].platform_info.node_memory_gb"
    assert result.nodes[1].platform_info.chassis_type == """R620""", "Died on +.nodes[1].platform_info.chassis_type"
    assert result.nodes[1].sipi == """Bond10G""", "Died on +.nodes[1].sipi"
    assert result.nodes[1].mipi == """Bond1G""", "Died on +.nodes[1].mipi"
    assert result.nodes[1].software_version == """9.1.0.34""", "Died on +.nodes[1].software_version"
    assert result.nodes[1].cip == """10.117.58.132""", "Died on +.nodes[1].cip"
    assert result.nodes[1].fibre_channel_target_port_group is None, "Died on .nodes[1].fibre_channel_target_port_group"
    assert result.nodes[1].mip == """10.117.56.132""", "Died on +.nodes[1].mip"
    assert result.nodes[1].associated_fservice_id == 0, "Died on +.nodes[1].associated_fservice_id"
    assert result.nodes[1].associated_master_service_id == 5, "Died on +.nodes[1].associated_master_service_id"
    assert result.nodes[1].cipi == """Bond10G""", "Died on +.nodes[1].cipi"
    assert type(result.nodes[1].attributes) is dict, "Died on .nodes[1].attributes"
    assert result.nodes[0].sip == """10.117.58.131""", "Died on +.nodes[0].sip"
    assert result.nodes[0].node_id == 2, "Died on +.nodes[0].node_id"
    assert result.nodes[0].uuid == UUID("4C4C4544-004D-5310-8052-C7C04F335431"), "Died on .nodes[0].uuid"
    assert result.nodes[0].name == """NLABP0927""", "Died on +.nodes[0].name"
    assert result.nodes[0].platform_info.node_type == """SF6010""", "Died on +.nodes[0].platform_info.node_type"
    assert result.nodes[0].platform_info.platform_config_version == """9.1.0.34""", "Died on +.nodes[0].platform_info.platform_config_version"
    assert result.nodes[0].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.nodes[0].platform_info.cpu_model"
    assert result.nodes[0].platform_info.node_memory_gb == 144, "Died on +.nodes[0].platform_info.node_memory_gb"
    assert result.nodes[0].platform_info.chassis_type == """R620""", "Died on +.nodes[0].platform_info.chassis_type"
    assert result.nodes[0].sipi == """Bond10G""", "Died on +.nodes[0].sipi"
    assert result.nodes[0].mipi == """Bond1G""", "Died on +.nodes[0].mipi"
    assert result.nodes[0].software_version == """9.1.0.34""", "Died on +.nodes[0].software_version"
    assert result.nodes[0].cip == """10.117.58.131""", "Died on +.nodes[0].cip"
    assert result.nodes[0].fibre_channel_target_port_group is None, "Died on .nodes[0].fibre_channel_target_port_group"
    assert result.nodes[0].mip == """10.117.56.131""", "Died on +.nodes[0].mip"
    assert result.nodes[0].associated_fservice_id == 0, "Died on +.nodes[0].associated_fservice_id"
    assert result.nodes[0].associated_master_service_id == 4, "Died on +.nodes[0].associated_master_service_id"
    assert result.nodes[0].cipi == """Bond10G""", "Died on +.nodes[0].cipi"
    assert type(result.nodes[0].attributes) is dict, "Died on .nodes[0].attributes"
    assert result.pending_active_nodes[1].active_node_key == """hdivy03Kj7""", "Died on +.pending_active_nodes[1].active_node_key"
    assert result.pending_active_nodes[1].sip == """10.117.58.130""", "Died on +.pending_active_nodes[1].sip"
    assert result.pending_active_nodes[1].software_version == """9.1.0.34""", "Died on +.pending_active_nodes[1].software_version"
    assert result.pending_active_nodes[1].cip == """10.117.58.130""", "Died on +.pending_active_nodes[1].cip"
    assert result.pending_active_nodes[1].async_handle == 57, "Died on +.pending_active_nodes[1].async_handle"
    assert result.pending_active_nodes[1].mip == """10.117.56.130""", "Died on +.pending_active_nodes[1].mip"
    assert result.pending_active_nodes[1].platform_info.node_type == """SF6010""", "Died on +.pending_active_nodes[1].platform_info.node_type"
    assert result.pending_active_nodes[1].platform_info.platform_config_version == """9.1.0.34""", "Died on +.pending_active_nodes[1].platform_info.platform_config_version"
    assert result.pending_active_nodes[1].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.pending_active_nodes[1].platform_info.cpu_model"
    assert result.pending_active_nodes[1].platform_info.node_memory_gb == 144, "Died on +.pending_active_nodes[1].platform_info.node_memory_gb"
    assert result.pending_active_nodes[1].platform_info.chassis_type == """R620""", "Died on +.pending_active_nodes[1].platform_info.chassis_type"
    assert result.pending_active_nodes[1].assigned_node_id == 7, "Died on +.pending_active_nodes[1].assigned_node_id"
    assert result.pending_active_nodes[1].pending_node_id == 2, "Died on +.pending_active_nodes[1].pending_node_id"
    assert result.pending_active_nodes[0].active_node_key == """PUnD6a2EWM""", "Died on +.pending_active_nodes[0].active_node_key"
    assert result.pending_active_nodes[0].sip == """10.117.58.139""", "Died on +.pending_active_nodes[0].sip"
    assert result.pending_active_nodes[0].software_version == """9.1.0.34""", "Died on +.pending_active_nodes[0].software_version"
    assert result.pending_active_nodes[0].cip == """10.117.58.139""", "Died on +.pending_active_nodes[0].cip"
    assert result.pending_active_nodes[0].async_handle == 56, "Died on +.pending_active_nodes[0].async_handle"
    assert result.pending_active_nodes[0].mip == """10.117.56.139""", "Died on +.pending_active_nodes[0].mip"
    assert result.pending_active_nodes[0].platform_info.node_type == """SF6010""", "Died on +.pending_active_nodes[0].platform_info.node_type"
    assert result.pending_active_nodes[0].platform_info.platform_config_version == """9.1.0.34""", "Died on +.pending_active_nodes[0].platform_info.platform_config_version"
    assert result.pending_active_nodes[0].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.pending_active_nodes[0].platform_info.cpu_model"
    assert result.pending_active_nodes[0].platform_info.node_memory_gb == 144, "Died on +.pending_active_nodes[0].platform_info.node_memory_gb"
    assert result.pending_active_nodes[0].platform_info.chassis_type == """R620""", "Died on +.pending_active_nodes[0].platform_info.chassis_type"
    assert result.pending_active_nodes[0].assigned_node_id == 6, "Died on +.pending_active_nodes[0].assigned_node_id"
    assert result.pending_active_nodes[0].pending_node_id == 1, "Died on +.pending_active_nodes[0].pending_node_id"

def test_list_bulk_volume_jobs_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListBulkVolumeJobs_v9.1_0)

    
    result = ef.list_bulk_volume_jobs()
    assert result.bulk_volume_jobs[0].status == """running""", "Died on +.bulk_volume_jobs[0].status"
    assert result.bulk_volume_jobs[0].format == """native""", "Died on +.bulk_volume_jobs[0].format"
    assert result.bulk_volume_jobs[0].script == """bv_internal.py""", "Died on +.bulk_volume_jobs[0].script"
    assert result.bulk_volume_jobs[0].src_volume_id == 2, "Died on +.bulk_volume_jobs[0].src_volume_id"
    assert result.bulk_volume_jobs[0].create_time == """2016-12-30T17:59:17Z""", "Died on +.bulk_volume_jobs[0].create_time"
    assert result.bulk_volume_jobs[0].elapsed_time == 0, "Died on +.bulk_volume_jobs[0].elapsed_time"
    assert result.bulk_volume_jobs[0].remaining_time == 0, "Died on +.bulk_volume_jobs[0].remaining_time"
    assert result.bulk_volume_jobs[0].percent_complete == 0, "Died on +.bulk_volume_jobs[0].percent_complete"
    assert result.bulk_volume_jobs[0].key == """818168699e85ba6703c772183c9a478e""", "Died on +.bulk_volume_jobs[0].key"
    assert type(result.bulk_volume_jobs[0].attributes) is dict, "Died on .bulk_volume_jobs[0].attributes"
    assert result.bulk_volume_jobs[0].snapshot_id == 2, "Died on +.bulk_volume_jobs[0].snapshot_id"
    assert result.bulk_volume_jobs[0].type == """write""", "Died on +.bulk_volume_jobs[0].type"
    assert result.bulk_volume_jobs[0].bulk_volume_id == 4, "Died on +.bulk_volume_jobs[0].bulk_volume_id"

def test_list_bulk_volume_jobs_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListBulkVolumeJobs_v9.1_1)

    
    result = ef.list_bulk_volume_jobs()
    assert result.bulk_volume_jobs[0].status == """running""", "Died on +.bulk_volume_jobs[0].status"
    assert result.bulk_volume_jobs[0].format == """native""", "Died on +.bulk_volume_jobs[0].format"
    assert result.bulk_volume_jobs[0].script == """bv_internal.py""", "Died on +.bulk_volume_jobs[0].script"
    assert result.bulk_volume_jobs[0].src_volume_id == 1, "Died on +.bulk_volume_jobs[0].src_volume_id"
    assert result.bulk_volume_jobs[0].create_time == """2016-12-30T18:23:27Z""", "Died on +.bulk_volume_jobs[0].create_time"
    assert result.bulk_volume_jobs[0].elapsed_time == 0, "Died on +.bulk_volume_jobs[0].elapsed_time"
    assert result.bulk_volume_jobs[0].remaining_time == 0, "Died on +.bulk_volume_jobs[0].remaining_time"
    assert result.bulk_volume_jobs[0].percent_complete == 0, "Died on +.bulk_volume_jobs[0].percent_complete"
    assert result.bulk_volume_jobs[0].key == """4a1ac1320e692b1a7e349e83bee43ce3""", "Died on +.bulk_volume_jobs[0].key"
    assert type(result.bulk_volume_jobs[0].attributes) is dict, "Died on .bulk_volume_jobs[0].attributes"
    assert result.bulk_volume_jobs[0].type == """read""", "Died on +.bulk_volume_jobs[0].type"
    assert result.bulk_volume_jobs[0].bulk_volume_id == 7, "Died on +.bulk_volume_jobs[0].bulk_volume_id"

def test_list_cluster_faults_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListClusterFaults_v8.4_0)

    
    exceptions = True # exceptions
    best_practices = True # best_practices
    update = True # update
    fault_types = "" # fault_types
    result = ef.list_cluster_faults()
    assert result.faults[11].resolved == False, "Died on +.faults[11].resolved"
    assert result.faults[11].code == """driveAvailable""", "Died on +.faults[11].code"
    assert result.faults[11].node_hardware_fault_id == 0, "Died on +.faults[11].node_hardware_fault_id"
    assert result.faults[11].severity == """warning""", "Died on +.faults[11].severity"
    assert result.faults[11].type == """drive""", "Died on +.faults[11].type"
    assert result.faults[11].node_id == 4, "Died on +.faults[11].node_id"
    assert result.faults[11].drive_id == 0, "Died on +.faults[11].drive_id"
    assert result.faults[11].service_id == 0, "Died on +.faults[11].service_id"
    assert result.faults[11].details == """Node ID 4 has 1 available drive(s).""", "Died on +.faults[11].details"
    assert result.faults[11].date == """2017-01-16T05:32:49.942725Z""", "Died on +.faults[11].date"
    assert result.faults[11].data is None, "Died on .faults[11].data"
    assert result.faults[11].cluster_fault_id == 9, "Died on +.faults[11].cluster_fault_id"
    assert result.faults[10].resolved == False, "Died on +.faults[10].resolved"
    assert result.faults[10].code == """nodeHardwareFault""", "Died on +.faults[10].code"
    assert result.faults[10].node_hardware_fault_id == 4, "Died on +.faults[10].node_hardware_fault_id"
    assert result.faults[10].severity == """warning""", "Died on +.faults[10].severity"
    assert result.faults[10].type == """node""", "Died on +.faults[10].type"
    assert result.faults[10].node_id == 4, "Died on +.faults[10].node_id"
    assert result.faults[10].drive_id == 0, "Died on +.faults[10].drive_id"
    assert result.faults[10].service_id == 0, "Died on +.faults[10].service_id"
    assert result.faults[10].details == """MPTSAS_FIRMWARE_VERSION should be == 13.00.57.00 but is 20.00.08.00""", "Died on +.faults[10].details"
    assert result.faults[10].date == """2017-01-16T05:25:52.834270Z""", "Died on +.faults[10].date"
    assert result.faults[10].data is None, "Died on .faults[10].data"
    assert result.faults[10].cluster_fault_id == 8, "Died on +.faults[10].cluster_fault_id"
    assert result.faults[9].resolved == False, "Died on +.faults[9].resolved"
    assert result.faults[9].code == """nodeHardwareFault""", "Died on +.faults[9].code"
    assert result.faults[9].node_hardware_fault_id == 5, "Died on +.faults[9].node_hardware_fault_id"
    assert result.faults[9].severity == """warning""", "Died on +.faults[9].severity"
    assert result.faults[9].type == """node""", "Died on +.faults[9].type"
    assert result.faults[9].node_id == 4, "Died on +.faults[9].node_id"
    assert result.faults[9].drive_id == 0, "Died on +.faults[9].drive_id"
    assert result.faults[9].service_id == 0, "Died on +.faults[9].service_id"
    assert result.faults[9].details == """NVRAM_VENDOR should be !=  but is """, "Died on +.faults[9].details"
    assert result.faults[9].date == """2017-01-16T05:25:52.848020Z""", "Died on +.faults[9].date"
    assert result.faults[9].data is None, "Died on .faults[9].data"
    assert result.faults[9].cluster_fault_id == 7, "Died on +.faults[9].cluster_fault_id"
    assert result.faults[8].resolved == False, "Died on +.faults[8].resolved"
    assert result.faults[8].code == """nodeHardwareFault""", "Died on +.faults[8].code"
    assert result.faults[8].node_hardware_fault_id == 6, "Died on +.faults[8].node_hardware_fault_id"
    assert result.faults[8].severity == """warning""", "Died on +.faults[8].severity"
    assert result.faults[8].type == """node""", "Died on +.faults[8].type"
    assert result.faults[8].node_id == 5, "Died on +.faults[8].node_id"
    assert result.faults[8].drive_id == 0, "Died on +.faults[8].drive_id"
    assert result.faults[8].service_id == 0, "Died on +.faults[8].service_id"
    assert result.faults[8].details == """MPTSAS_FIRMWARE_VERSION should be == 13.00.57.00 but is 20.00.08.00""", "Died on +.faults[8].details"
    assert result.faults[8].date == """2017-01-16T05:25:54.362447Z""", "Died on +.faults[8].date"
    assert result.faults[8].data is None, "Died on .faults[8].data"
    assert result.faults[8].cluster_fault_id == 6, "Died on +.faults[8].cluster_fault_id"
    assert result.faults[7].resolved == False, "Died on +.faults[7].resolved"
    assert result.faults[7].code == """nodeHardwareFault""", "Died on +.faults[7].code"
    assert result.faults[7].node_hardware_fault_id == 7, "Died on +.faults[7].node_hardware_fault_id"
    assert result.faults[7].severity == """warning""", "Died on +.faults[7].severity"
    assert result.faults[7].type == """node""", "Died on +.faults[7].type"
    assert result.faults[7].node_id == 3, "Died on +.faults[7].node_id"
    assert result.faults[7].drive_id == 0, "Died on +.faults[7].drive_id"
    assert result.faults[7].service_id == 0, "Died on +.faults[7].service_id"
    assert result.faults[7].details == """MPTSAS_FIRMWARE_VERSION should be == 13.00.57.00 but is 20.00.08.00""", "Died on +.faults[7].details"
    assert result.faults[7].date == """2017-01-16T05:25:59.130050Z""", "Died on +.faults[7].date"
    assert result.faults[7].data is None, "Died on .faults[7].data"
    assert result.faults[7].cluster_fault_id == 5, "Died on +.faults[7].cluster_fault_id"
    assert result.faults[6].resolved == False, "Died on +.faults[6].resolved"
    assert result.faults[6].code == """nodeHardwareFault""", "Died on +.faults[6].code"
    assert result.faults[6].node_hardware_fault_id == 1, "Died on +.faults[6].node_hardware_fault_id"
    assert result.faults[6].severity == """error""", "Died on +.faults[6].severity"
    assert result.faults[6].type == """node""", "Died on +.faults[6].type"
    assert result.faults[6].node_id == 4, "Died on +.faults[6].node_id"
    assert result.faults[6].drive_id == 0, "Died on +.faults[6].drive_id"
    assert result.faults[6].service_id == 0, "Died on +.faults[6].service_id"
    assert result.faults[6].details == """NVRAM device error={No device found}""", "Died on +.faults[6].details"
    assert result.faults[6].date == """2017-01-16T05:25:39.916290Z""", "Died on +.faults[6].date"
    assert result.faults[6].data is None, "Died on .faults[6].data"
    assert result.faults[6].cluster_fault_id == 4, "Died on +.faults[6].cluster_fault_id"
    assert result.faults[5].resolved == False, "Died on +.faults[5].resolved"
    assert result.faults[5].code == """nodeHardwareFault""", "Died on +.faults[5].code"
    assert result.faults[5].node_hardware_fault_id == 2, "Died on +.faults[5].node_hardware_fault_id"
    assert result.faults[5].severity == """warning""", "Died on +.faults[5].severity"
    assert result.faults[5].type == """node""", "Died on +.faults[5].type"
    assert result.faults[5].node_id == 3, "Died on +.faults[5].node_id"
    assert result.faults[5].drive_id == 0, "Died on +.faults[5].drive_id"
    assert result.faults[5].service_id == 0, "Died on +.faults[5].service_id"
    assert result.faults[5].details == """NVRAM device warning={hardwareRevision: B05}""", "Died on +.faults[5].details"
    assert result.faults[5].date == """2017-01-16T05:25:46.039008Z""", "Died on +.faults[5].date"
    assert result.faults[5].data is None, "Died on .faults[5].data"
    assert result.faults[5].cluster_fault_id == 3, "Died on +.faults[5].cluster_fault_id"
    assert result.faults[4].resolved == False, "Died on +.faults[4].resolved"
    assert result.faults[4].code == """nodeHardwareFault""", "Died on +.faults[4].code"
    assert result.faults[4].node_hardware_fault_id == 3, "Died on +.faults[4].node_hardware_fault_id"
    assert result.faults[4].severity == """warning""", "Died on +.faults[4].severity"
    assert result.faults[4].type == """node""", "Died on +.faults[4].type"
    assert result.faults[4].node_id == 4, "Died on +.faults[4].node_id"
    assert result.faults[4].drive_id == 0, "Died on +.faults[4].drive_id"
    assert result.faults[4].service_id == 0, "Died on +.faults[4].service_id"
    assert result.faults[4].details == """LIFECYCLE_VERSION should be >= 2.02.01.01 but is """, "Died on +.faults[4].details"
    assert result.faults[4].date == """2017-01-16T05:25:52.822757Z""", "Died on +.faults[4].date"
    assert result.faults[4].data is None, "Died on .faults[4].data"
    assert result.faults[4].cluster_fault_id == 2, "Died on +.faults[4].cluster_fault_id"
    assert result.faults[3].resolved == True, "Died on +.faults[3].resolved"
    assert result.faults[3].code == """nodeHardwareFault""", "Died on +.faults[3].code"
    assert result.faults[3].node_hardware_fault_id == 8, "Died on +.faults[3].node_hardware_fault_id"
    assert result.faults[3].severity == """warning""", "Died on +.faults[3].severity"
    assert result.faults[3].resolved_date == """2017-01-16T05:37:27.924695Z""", "Died on +.faults[3].resolved_date"
    assert result.faults[3].type == """node""", "Died on +.faults[3].type"
    assert result.faults[3].node_id == 6, "Died on +.faults[3].node_id"
    assert result.faults[3].drive_id == 0, "Died on +.faults[3].drive_id"
    assert result.faults[3].service_id == 0, "Died on +.faults[3].service_id"
    assert result.faults[3].details == """Network interface Bond1G is down or cable is unplugged.""", "Died on +.faults[3].details"
    assert result.faults[3].date == """2017-01-16T05:35:45.769333Z""", "Died on +.faults[3].date"
    assert result.faults[3].data is None, "Died on .faults[3].data"
    assert result.faults[3].cluster_fault_id == 13, "Died on +.faults[3].cluster_fault_id"
    assert result.faults[2].resolved == True, "Died on +.faults[2].resolved"
    assert result.faults[2].code == """nodeHardwareFault""", "Died on +.faults[2].code"
    assert result.faults[2].node_hardware_fault_id == 9, "Died on +.faults[2].node_hardware_fault_id"
    assert result.faults[2].severity == """warning""", "Died on +.faults[2].severity"
    assert result.faults[2].resolved_date == """2017-01-16T05:37:27.921731Z""", "Died on +.faults[2].resolved_date"
    assert result.faults[2].type == """node""", "Died on +.faults[2].type"
    assert result.faults[2].node_id == 6, "Died on +.faults[2].node_id"
    assert result.faults[2].drive_id == 0, "Died on +.faults[2].drive_id"
    assert result.faults[2].service_id == 0, "Died on +.faults[2].service_id"
    assert result.faults[2].details == """Network interface eth2 is down or cable is unplugged.""", "Died on +.faults[2].details"
    assert result.faults[2].date == """2017-01-16T05:35:45.782068Z""", "Died on +.faults[2].date"
    assert result.faults[2].data is None, "Died on .faults[2].data"
    assert result.faults[2].cluster_fault_id == 12, "Died on +.faults[2].cluster_fault_id"
    assert result.faults[1].resolved == True, "Died on +.faults[1].resolved"
    assert result.faults[1].code == """nodeHardwareFault""", "Died on +.faults[1].code"
    assert result.faults[1].node_hardware_fault_id == 10, "Died on +.faults[1].node_hardware_fault_id"
    assert result.faults[1].severity == """warning""", "Died on +.faults[1].severity"
    assert result.faults[1].resolved_date == """2017-01-16T05:37:27.919703Z""", "Died on +.faults[1].resolved_date"
    assert result.faults[1].type == """node""", "Died on +.faults[1].type"
    assert result.faults[1].node_id == 6, "Died on +.faults[1].node_id"
    assert result.faults[1].drive_id == 0, "Died on +.faults[1].drive_id"
    assert result.faults[1].service_id == 0, "Died on +.faults[1].service_id"
    assert result.faults[1].details == """Network interface eth3 is down or cable is unplugged.""", "Died on +.faults[1].details"
    assert result.faults[1].date == """2017-01-16T05:35:45.794843Z""", "Died on +.faults[1].date"
    assert result.faults[1].data is None, "Died on .faults[1].data"
    assert result.faults[1].cluster_fault_id == 11, "Died on +.faults[1].cluster_fault_id"
    assert result.faults[0].resolved == True, "Died on +.faults[0].resolved"
    assert result.faults[0].code == """sliceServiceUnhealthy""", "Died on +.faults[0].code"
    assert result.faults[0].node_hardware_fault_id == 0, "Died on +.faults[0].node_hardware_fault_id"
    assert result.faults[0].severity == """warning""", "Died on +.faults[0].severity"
    assert result.faults[0].resolved_date == """2017-01-16T05:32:51.360932Z""", "Died on +.faults[0].resolved_date"
    assert result.faults[0].type == """service""", "Died on +.faults[0].type"
    assert result.faults[0].node_id == 4, "Died on +.faults[0].node_id"
    assert result.faults[0].drive_id == 21, "Died on +.faults[0].drive_id"
    assert result.faults[0].service_id == 67, "Died on +.faults[0].service_id"
    assert result.faults[0].details == """SolidFire Application cannot communicate with a metadata service.""", "Died on +.faults[0].details"
    assert result.faults[0].date == """2017-01-16T05:26:39.794307Z""", "Died on +.faults[0].date"
    assert result.faults[0].data is None, "Died on .faults[0].data"
    assert result.faults[0].cluster_fault_id == 1, "Died on +.faults[0].cluster_fault_id"

def test_list_cluster_faults_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListClusterFaults_v8.6_0)

    
    exceptions = True # exceptions
    best_practices = True # best_practices
    update = True # update
    fault_types = "" # fault_types
    result = ef.list_cluster_faults()
    assert result.faults[2].resolved == False, "Died on +.faults[2].resolved"
    assert result.faults[2].code == """nodeHardwareFault""", "Died on +.faults[2].code"
    assert result.faults[2].node_hardware_fault_id == 1, "Died on +.faults[2].node_hardware_fault_id"
    assert result.faults[2].severity == """warning""", "Died on +.faults[2].severity"
    assert result.faults[2].type == """node""", "Died on +.faults[2].type"
    assert result.faults[2].node_id == 5, "Died on +.faults[2].node_id"
    assert result.faults[2].drive_id == 0, "Died on +.faults[2].drive_id"
    assert result.faults[2].service_id == 0, "Died on +.faults[2].service_id"
    assert result.faults[2].details == """NVRAM device warning={excessiveCurrent (2x), hardwareRevision: B02}""", "Died on +.faults[2].details"
    assert result.faults[2].date == """2017-01-15T19:06:14.323204Z""", "Died on +.faults[2].date"
    assert result.faults[2].data is None, "Died on .faults[2].data"
    assert result.faults[2].cluster_fault_id == 3, "Died on +.faults[2].cluster_fault_id"
    assert result.faults[1].resolved == False, "Died on +.faults[1].resolved"
    assert result.faults[1].code == """nodeHardwareFault""", "Died on +.faults[1].code"
    assert result.faults[1].node_hardware_fault_id == 2, "Died on +.faults[1].node_hardware_fault_id"
    assert result.faults[1].severity == """warning""", "Died on +.faults[1].severity"
    assert result.faults[1].type == """node""", "Died on +.faults[1].type"
    assert result.faults[1].node_id == 3, "Died on +.faults[1].node_id"
    assert result.faults[1].drive_id == 0, "Died on +.faults[1].drive_id"
    assert result.faults[1].service_id == 0, "Died on +.faults[1].service_id"
    assert result.faults[1].details == """NVRAM device warning={excessiveCapacitorVoltage (1x)}""", "Died on +.faults[1].details"
    assert result.faults[1].date == """2017-01-15T19:06:14.876719Z""", "Died on +.faults[1].date"
    assert result.faults[1].data is None, "Died on .faults[1].data"
    assert result.faults[1].cluster_fault_id == 2, "Died on +.faults[1].cluster_fault_id"
    assert result.faults[0].resolved == False, "Died on +.faults[0].resolved"
    assert result.faults[0].code == """nodeHardwareFault""", "Died on +.faults[0].code"
    assert result.faults[0].node_hardware_fault_id == 3, "Died on +.faults[0].node_hardware_fault_id"
    assert result.faults[0].severity == """warning""", "Died on +.faults[0].severity"
    assert result.faults[0].type == """node""", "Died on +.faults[0].type"
    assert result.faults[0].node_id == 2, "Died on +.faults[0].node_id"
    assert result.faults[0].drive_id == 0, "Died on +.faults[0].drive_id"
    assert result.faults[0].service_id == 0, "Died on +.faults[0].service_id"
    assert result.faults[0].details == """NVRAM device warning={excessiveCapacitorVoltage (1x)}""", "Died on +.faults[0].details"
    assert result.faults[0].date == """2017-01-15T19:06:19.765086Z""", "Died on +.faults[0].date"
    assert result.faults[0].data is None, "Died on .faults[0].data"
    assert result.faults[0].cluster_fault_id == 1, "Died on +.faults[0].cluster_fault_id"

def test_list_cluster_faults_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListClusterFaults_v9.0_0)

    
    exceptions = True # exceptions
    best_practices = True # best_practices
    update = True # update
    fault_types = "" # fault_types
    result = ef.list_cluster_faults()
    assert result.faults[1].resolved == False, "Died on +.faults[1].resolved"
    assert result.faults[1].code == """nodeHardwareFault""", "Died on +.faults[1].code"
    assert result.faults[1].node_hardware_fault_id == 2, "Died on +.faults[1].node_hardware_fault_id"
    assert result.faults[1].severity == """warning""", "Died on +.faults[1].severity"
    assert result.faults[1].type == """node""", "Died on +.faults[1].type"
    assert result.faults[1].node_id == 5, "Died on +.faults[1].node_id"
    assert result.faults[1].drive_id == 0, "Died on +.faults[1].drive_id"
    assert result.faults[1].service_id == 0, "Died on +.faults[1].service_id"
    assert result.faults[1].details == """NVRAM device warning={excessiveCurrent (1x)}""", "Died on +.faults[1].details"
    assert result.faults[1].date == """2017-01-10T04:16:21.224342Z""", "Died on +.faults[1].date"
    assert result.faults[1].data is None, "Died on .faults[1].data"
    assert result.faults[1].cluster_fault_id == 2, "Died on +.faults[1].cluster_fault_id"
    assert result.faults[0].resolved == False, "Died on +.faults[0].resolved"
    assert result.faults[0].code == """nodeHardwareFault""", "Died on +.faults[0].code"
    assert result.faults[0].node_hardware_fault_id == 1, "Died on +.faults[0].node_hardware_fault_id"
    assert result.faults[0].severity == """warning""", "Died on +.faults[0].severity"
    assert result.faults[0].type == """node""", "Died on +.faults[0].type"
    assert result.faults[0].node_id == 1, "Died on +.faults[0].node_id"
    assert result.faults[0].drive_id == 0, "Died on +.faults[0].drive_id"
    assert result.faults[0].service_id == 0, "Died on +.faults[0].service_id"
    assert result.faults[0].details == """NVRAM device warning={hardwareRevision: B02}""", "Died on +.faults[0].details"
    assert result.faults[0].date == """2017-01-10T04:16:17.009159Z""", "Died on +.faults[0].date"
    assert result.faults[0].data is None, "Died on .faults[0].data"
    assert result.faults[0].cluster_fault_id == 1, "Died on +.faults[0].cluster_fault_id"

def test_list_cluster_faults_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListClusterFaults_v9.1_0)

    
    exceptions = True # exceptions
    best_practices = True # best_practices
    update = True # update
    fault_types = "" # fault_types
    result = ef.list_cluster_faults()
    assert result.faults[10].resolved == False, "Died on +.faults[10].resolved"
    assert result.faults[10].code == """nodeHardwareFault""", "Died on +.faults[10].code"
    assert result.faults[10].node_hardware_fault_id == 10, "Died on +.faults[10].node_hardware_fault_id"
    assert result.faults[10].severity == """warning""", "Died on +.faults[10].severity"
    assert result.faults[10].type == """node""", "Died on +.faults[10].type"
    assert result.faults[10].node_id == 3, "Died on +.faults[10].node_id"
    assert result.faults[10].drive_id == 20, "Died on +.faults[10].drive_id"
    assert result.faults[10].service_id == 0, "Died on +.faults[10].service_id"
    assert result.faults[10].details == """Drive should be using firmware version GXT1003Q, but is using unsupported version GXT5104Q.""", "Died on +.faults[10].details"
    assert result.faults[10].date == """2016-12-30T18:04:47.635310Z""", "Died on +.faults[10].date"
    assert result.faults[10].data is None, "Died on .faults[10].data"
    assert result.faults[10].cluster_fault_id == 11, "Died on +.faults[10].cluster_fault_id"
    assert result.faults[9].resolved == False, "Died on +.faults[9].resolved"
    assert result.faults[9].code == """nodeHardwareFault""", "Died on +.faults[9].code"
    assert result.faults[9].node_hardware_fault_id == 9, "Died on +.faults[9].node_hardware_fault_id"
    assert result.faults[9].severity == """warning""", "Died on +.faults[9].severity"
    assert result.faults[9].type == """node""", "Died on +.faults[9].type"
    assert result.faults[9].node_id == 3, "Died on +.faults[9].node_id"
    assert result.faults[9].drive_id == 19, "Died on +.faults[9].drive_id"
    assert result.faults[9].service_id == 0, "Died on +.faults[9].service_id"
    assert result.faults[9].details == """Drive should be using firmware version GXT1003Q, but is using unsupported version GXT5104Q.""", "Died on +.faults[9].details"
    assert result.faults[9].date == """2016-12-30T18:04:47.622777Z""", "Died on +.faults[9].date"
    assert result.faults[9].data is None, "Died on .faults[9].data"
    assert result.faults[9].cluster_fault_id == 10, "Died on +.faults[9].cluster_fault_id"
    assert result.faults[8].resolved == False, "Died on +.faults[8].resolved"
    assert result.faults[8].code == """nodeHardwareFault""", "Died on +.faults[8].code"
    assert result.faults[8].node_hardware_fault_id == 8, "Died on +.faults[8].node_hardware_fault_id"
    assert result.faults[8].severity == """warning""", "Died on +.faults[8].severity"
    assert result.faults[8].type == """node""", "Died on +.faults[8].type"
    assert result.faults[8].node_id == 3, "Died on +.faults[8].node_id"
    assert result.faults[8].drive_id == 18, "Died on +.faults[8].drive_id"
    assert result.faults[8].service_id == 0, "Died on +.faults[8].service_id"
    assert result.faults[8].details == """Drive should be using firmware version GXT1003Q, but is using unsupported version GXT5104Q.""", "Died on +.faults[8].details"
    assert result.faults[8].date == """2016-12-30T18:04:47.612889Z""", "Died on +.faults[8].date"
    assert result.faults[8].data is None, "Died on .faults[8].data"
    assert result.faults[8].cluster_fault_id == 9, "Died on +.faults[8].cluster_fault_id"
    assert result.faults[7].resolved == False, "Died on +.faults[7].resolved"
    assert result.faults[7].code == """nodeHardwareFault""", "Died on +.faults[7].code"
    assert result.faults[7].node_hardware_fault_id == 7, "Died on +.faults[7].node_hardware_fault_id"
    assert result.faults[7].severity == """warning""", "Died on +.faults[7].severity"
    assert result.faults[7].type == """node""", "Died on +.faults[7].type"
    assert result.faults[7].node_id == 3, "Died on +.faults[7].node_id"
    assert result.faults[7].drive_id == 17, "Died on +.faults[7].drive_id"
    assert result.faults[7].service_id == 0, "Died on +.faults[7].service_id"
    assert result.faults[7].details == """Drive should be using firmware version GXT1003Q, but is using unsupported version GXT5104Q.""", "Died on +.faults[7].details"
    assert result.faults[7].date == """2016-12-30T18:04:47.603135Z""", "Died on +.faults[7].date"
    assert result.faults[7].data is None, "Died on .faults[7].data"
    assert result.faults[7].cluster_fault_id == 8, "Died on +.faults[7].cluster_fault_id"
    assert result.faults[6].resolved == False, "Died on +.faults[6].resolved"
    assert result.faults[6].code == """nodeHardwareFault""", "Died on +.faults[6].code"
    assert result.faults[6].node_hardware_fault_id == 6, "Died on +.faults[6].node_hardware_fault_id"
    assert result.faults[6].severity == """warning""", "Died on +.faults[6].severity"
    assert result.faults[6].type == """node""", "Died on +.faults[6].type"
    assert result.faults[6].node_id == 3, "Died on +.faults[6].node_id"
    assert result.faults[6].drive_id == 16, "Died on +.faults[6].drive_id"
    assert result.faults[6].service_id == 0, "Died on +.faults[6].service_id"
    assert result.faults[6].details == """Drive should be using firmware version GXT1003Q, but is using unsupported version GXT5104Q.""", "Died on +.faults[6].details"
    assert result.faults[6].date == """2016-12-30T18:04:47.593497Z""", "Died on +.faults[6].date"
    assert result.faults[6].data is None, "Died on .faults[6].data"
    assert result.faults[6].cluster_fault_id == 7, "Died on +.faults[6].cluster_fault_id"
    assert result.faults[5].resolved == False, "Died on +.faults[5].resolved"
    assert result.faults[5].code == """nodeHardwareFault""", "Died on +.faults[5].code"
    assert result.faults[5].node_hardware_fault_id == 5, "Died on +.faults[5].node_hardware_fault_id"
    assert result.faults[5].severity == """warning""", "Died on +.faults[5].severity"
    assert result.faults[5].type == """node""", "Died on +.faults[5].type"
    assert result.faults[5].node_id == 3, "Died on +.faults[5].node_id"
    assert result.faults[5].drive_id == 15, "Died on +.faults[5].drive_id"
    assert result.faults[5].service_id == 0, "Died on +.faults[5].service_id"
    assert result.faults[5].details == """Drive should be using firmware version GXT1003Q, but is using unsupported version GXT5104Q.""", "Died on +.faults[5].details"
    assert result.faults[5].date == """2016-12-30T18:04:47.581183Z""", "Died on +.faults[5].date"
    assert result.faults[5].data is None, "Died on .faults[5].data"
    assert result.faults[5].cluster_fault_id == 6, "Died on +.faults[5].cluster_fault_id"
    assert result.faults[4].resolved == False, "Died on +.faults[4].resolved"
    assert result.faults[4].code == """nodeHardwareFault""", "Died on +.faults[4].code"
    assert result.faults[4].node_hardware_fault_id == 4, "Died on +.faults[4].node_hardware_fault_id"
    assert result.faults[4].severity == """warning""", "Died on +.faults[4].severity"
    assert result.faults[4].type == """node""", "Died on +.faults[4].type"
    assert result.faults[4].node_id == 3, "Died on +.faults[4].node_id"
    assert result.faults[4].drive_id == 14, "Died on +.faults[4].drive_id"
    assert result.faults[4].service_id == 0, "Died on +.faults[4].service_id"
    assert result.faults[4].details == """Drive should be using firmware version GXT1003Q, but is using unsupported version GXT5104Q.""", "Died on +.faults[4].details"
    assert result.faults[4].date == """2016-12-30T18:04:47.569148Z""", "Died on +.faults[4].date"
    assert result.faults[4].data is None, "Died on .faults[4].data"
    assert result.faults[4].cluster_fault_id == 5, "Died on +.faults[4].cluster_fault_id"
    assert result.faults[3].resolved == False, "Died on +.faults[3].resolved"
    assert result.faults[3].code == """nodeHardwareFault""", "Died on +.faults[3].code"
    assert result.faults[3].node_hardware_fault_id == 3, "Died on +.faults[3].node_hardware_fault_id"
    assert result.faults[3].severity == """warning""", "Died on +.faults[3].severity"
    assert result.faults[3].type == """node""", "Died on +.faults[3].type"
    assert result.faults[3].node_id == 3, "Died on +.faults[3].node_id"
    assert result.faults[3].drive_id == 13, "Died on +.faults[3].drive_id"
    assert result.faults[3].service_id == 0, "Died on +.faults[3].service_id"
    assert result.faults[3].details == """Drive should be using firmware version GXT1003Q, but is using unsupported version GXT5104Q.""", "Died on +.faults[3].details"
    assert result.faults[3].date == """2016-12-30T18:04:47.559230Z""", "Died on +.faults[3].date"
    assert result.faults[3].data is None, "Died on .faults[3].data"
    assert result.faults[3].cluster_fault_id == 4, "Died on +.faults[3].cluster_fault_id"
    assert result.faults[2].resolved == False, "Died on +.faults[2].resolved"
    assert result.faults[2].code == """nodeHardwareFault""", "Died on +.faults[2].code"
    assert result.faults[2].node_hardware_fault_id == 2, "Died on +.faults[2].node_hardware_fault_id"
    assert result.faults[2].severity == """warning""", "Died on +.faults[2].severity"
    assert result.faults[2].type == """node""", "Died on +.faults[2].type"
    assert result.faults[2].node_id == 3, "Died on +.faults[2].node_id"
    assert result.faults[2].drive_id == 12, "Died on +.faults[2].drive_id"
    assert result.faults[2].service_id == 0, "Died on +.faults[2].service_id"
    assert result.faults[2].details == """Drive should be using firmware version GXT1003Q, but is using unsupported version GXT5104Q.""", "Died on +.faults[2].details"
    assert result.faults[2].date == """2016-12-30T18:04:47.543031Z""", "Died on +.faults[2].date"
    assert result.faults[2].data is None, "Died on .faults[2].data"
    assert result.faults[2].cluster_fault_id == 3, "Died on +.faults[2].cluster_fault_id"
    assert result.faults[1].resolved == False, "Died on +.faults[1].resolved"
    assert result.faults[1].code == """nodeHardwareFault""", "Died on +.faults[1].code"
    assert result.faults[1].node_hardware_fault_id == 1, "Died on +.faults[1].node_hardware_fault_id"
    assert result.faults[1].severity == """warning""", "Died on +.faults[1].severity"
    assert result.faults[1].type == """node""", "Died on +.faults[1].type"
    assert result.faults[1].node_id == 3, "Died on +.faults[1].node_id"
    assert result.faults[1].drive_id == 11, "Died on +.faults[1].drive_id"
    assert result.faults[1].service_id == 0, "Died on +.faults[1].service_id"
    assert result.faults[1].details == """Drive should be using firmware version GXT1003Q, but is using unsupported version GXT5104Q.""", "Died on +.faults[1].details"
    assert result.faults[1].date == """2016-12-30T18:04:47.532006Z""", "Died on +.faults[1].date"
    assert result.faults[1].data is None, "Died on .faults[1].data"
    assert result.faults[1].cluster_fault_id == 2, "Died on +.faults[1].cluster_fault_id"
    assert result.faults[0].resolved == False, "Died on +.faults[0].resolved"
    assert result.faults[0].code == """nodeHardwareFault""", "Died on +.faults[0].code"
    assert result.faults[0].node_hardware_fault_id == 11, "Died on +.faults[0].node_hardware_fault_id"
    assert result.faults[0].severity == """warning""", "Died on +.faults[0].severity"
    assert result.faults[0].type == """node""", "Died on +.faults[0].type"
    assert result.faults[0].node_id == 5, "Died on +.faults[0].node_id"
    assert result.faults[0].drive_id == 0, "Died on +.faults[0].drive_id"
    assert result.faults[0].service_id == 0, "Died on +.faults[0].service_id"
    assert result.faults[0].details == """NVRAM device warning={hardwareRevision: B05}""", "Died on +.faults[0].details"
    assert result.faults[0].date == """2016-12-30T18:04:53.707300Z""", "Died on +.faults[0].date"
    assert result.faults[0].data is None, "Died on .faults[0].data"
    assert result.faults[0].cluster_fault_id == 1, "Died on +.faults[0].cluster_fault_id"

def test_list_cluster_faults_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListClusterFaults_v9.1_1)

    
    exceptions = True # exceptions
    best_practices = True # best_practices
    update = True # update
    fault_types = "" # fault_types
    result = ef.list_cluster_faults()

def test_list_cluster_faults_v9.1_10():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListClusterFaults_v9.1_10)

    
    exceptions = True # exceptions
    best_practices = True # best_practices
    update = True # update
    fault_types = "" # fault_types
    result = ef.list_cluster_faults()
    assert result.faults[1].resolved == False, "Died on +.faults[1].resolved"
    assert result.faults[1].code == """clusterIOPSAreOverProvisioned""", "Died on +.faults[1].code"
    assert result.faults[1].node_hardware_fault_id == 0, "Died on +.faults[1].node_hardware_fault_id"
    assert result.faults[1].severity == """warning""", "Died on +.faults[1].severity"
    assert result.faults[1].type == """cluster""", "Died on +.faults[1].type"
    assert result.faults[1].node_id == 0, "Died on +.faults[1].node_id"
    assert result.faults[1].drive_id == 0, "Died on +.faults[1].drive_id"
    assert result.faults[1].service_id == 0, "Died on +.faults[1].service_id"
    assert result.faults[1].details == """The sum of all minimum QoS IOPS (182000) is greater than the expected IOPS (150000) of the cluster. The minimum QoS can not be maintained for all volumes simultaneously in this condition. Adjust QoS settings on one or more volumes to not exceed available cluster IOPS.""", "Died on +.faults[1].details"
    assert result.faults[1].date == """2016-12-30T18:45:17.525460Z""", "Died on +.faults[1].date"
    assert result.faults[1].data is None, "Died on .faults[1].data"
    assert result.faults[1].cluster_fault_id == 24, "Died on +.faults[1].cluster_fault_id"

def test_list_cluster_faults_v9.1_2():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListClusterFaults_v9.1_2)

    
    exceptions = True # exceptions
    best_practices = True # best_practices
    update = True # update
    fault_types = "" # fault_types
    result = ef.list_cluster_faults()
    assert result.faults[4].resolved == False, "Died on +.faults[4].resolved"
    assert result.faults[4].code == """blockServiceTooFull""", "Died on +.faults[4].code"
    assert result.faults[4].node_hardware_fault_id == 0, "Died on +.faults[4].node_hardware_fault_id"
    assert result.faults[4].severity == """critical""", "Died on +.faults[4].severity"
    assert result.faults[4].type == """service""", "Died on +.faults[4].type"
    assert result.faults[4].node_id == 4, "Died on +.faults[4].node_id"
    assert result.faults[4].drive_id == 18, "Died on +.faults[4].drive_id"
    assert result.faults[4].service_id == 45, "Died on +.faults[4].service_id"
    assert result.faults[4].details == """A Block Service is using 97% of the available space and space is getting critically low. Reads and writes can become disabled if this condition persists. You should immediately delete and purge volumes and snapshots or add more nodes.""", "Died on +.faults[4].details"
    assert result.faults[4].date == """2016-12-30T18:39:30.330347Z""", "Died on +.faults[4].date"
    assert result.faults[4].data is None, "Died on .faults[4].data"
    assert result.faults[4].cluster_fault_id == 22, "Died on +.faults[4].cluster_fault_id"
    assert result.faults[3].resolved == False, "Died on +.faults[3].resolved"
    assert result.faults[3].code == """driveFailed""", "Died on +.faults[3].code"
    assert result.faults[3].node_hardware_fault_id == 0, "Died on +.faults[3].node_hardware_fault_id"
    assert result.faults[3].severity == """warning""", "Died on +.faults[3].severity"
    assert result.faults[3].type == """drive""", "Died on +.faults[3].type"
    assert result.faults[3].node_id == 3, "Died on +.faults[3].node_id"
    assert result.faults[3].drive_id == 0, "Died on +.faults[3].drive_id"
    assert result.faults[3].service_id == 0, "Died on +.faults[3].service_id"
    assert result.faults[3].details == """Node ID 3 has 10 failed drive(s).""", "Died on +.faults[3].details"
    assert result.faults[3].date == """2016-12-30T18:14:05.188879Z""", "Died on +.faults[3].date"
    assert result.faults[3].data is None, "Died on .faults[3].data"
    assert result.faults[3].cluster_fault_id == 20, "Died on +.faults[3].cluster_fault_id"
    assert result.faults[2].resolved == False, "Died on +.faults[2].resolved"
    assert result.faults[2].code == """nodeOffline""", "Died on +.faults[2].code"
    assert result.faults[2].node_hardware_fault_id == 0, "Died on +.faults[2].node_hardware_fault_id"
    assert result.faults[2].severity == """error""", "Died on +.faults[2].severity"
    assert result.faults[2].type == """node""", "Died on +.faults[2].type"
    assert result.faults[2].node_id == 3, "Died on +.faults[2].node_id"
    assert result.faults[2].drive_id == 0, "Died on +.faults[2].drive_id"
    assert result.faults[2].service_id == 0, "Died on +.faults[2].service_id"
    assert result.faults[2].details == """The SolidFire Application cannot communicate with node ID 3.""", "Died on +.faults[2].details"
    assert result.faults[2].date == """2016-12-30T18:13:12.987068Z""", "Died on +.faults[2].date"
    assert result.faults[2].data is None, "Died on .faults[2].data"
    assert result.faults[2].cluster_fault_id == 18, "Died on +.faults[2].cluster_fault_id"
    assert result.faults[1].resolved == False, "Died on +.faults[1].resolved"
    assert result.faults[1].code == """ensembleDegraded""", "Died on +.faults[1].code"
    assert result.faults[1].node_hardware_fault_id == 0, "Died on +.faults[1].node_hardware_fault_id"
    assert result.faults[1].severity == """error""", "Died on +.faults[1].severity"
    assert result.faults[1].type == """cluster""", "Died on +.faults[1].type"
    assert result.faults[1].node_id == 0, "Died on +.faults[1].node_id"
    assert result.faults[1].drive_id == 0, "Died on +.faults[1].drive_id"
    assert result.faults[1].service_id == 0, "Died on +.faults[1].service_id"
    assert result.faults[1].details == """Ensemble degraded: 1/3 database servers not connectable: {3:10.117.58.28}""", "Died on +.faults[1].details"
    assert result.faults[1].date == """2016-12-30T18:13:01.223449Z""", "Died on +.faults[1].date"
    assert result.faults[1].data is None, "Died on .faults[1].data"
    assert result.faults[1].cluster_fault_id == 6, "Died on +.faults[1].cluster_fault_id"

def test_list_cluster_faults_v9.1_3():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListClusterFaults_v9.1_3)

    
    exceptions = True # exceptions
    best_practices = True # best_practices
    update = True # update
    fault_types = "" # fault_types
    result = ef.list_cluster_faults()
    assert result.faults[2].resolved == False, "Died on +.faults[2].resolved"
    assert result.faults[2].code == """driveFailed""", "Died on +.faults[2].code"
    assert result.faults[2].node_hardware_fault_id == 0, "Died on +.faults[2].node_hardware_fault_id"
    assert result.faults[2].severity == """warning""", "Died on +.faults[2].severity"
    assert result.faults[2].type == """drive""", "Died on +.faults[2].type"
    assert result.faults[2].node_id == 3, "Died on +.faults[2].node_id"
    assert result.faults[2].drive_id == 0, "Died on +.faults[2].drive_id"
    assert result.faults[2].service_id == 0, "Died on +.faults[2].service_id"
    assert result.faults[2].details == """Node ID 3 has 4 failed drive(s).""", "Died on +.faults[2].details"
    assert result.faults[2].date == """2016-12-30T20:37:52.781171Z""", "Died on +.faults[2].date"
    assert result.faults[2].data is None, "Died on .faults[2].data"
    assert result.faults[2].cluster_fault_id == 37, "Died on +.faults[2].cluster_fault_id"
    assert result.faults[1].resolved == False, "Died on +.faults[1].resolved"
    assert result.faults[1].code == """clusterIOPSAreOverProvisioned""", "Died on +.faults[1].code"
    assert result.faults[1].node_hardware_fault_id == 0, "Died on +.faults[1].node_hardware_fault_id"
    assert result.faults[1].severity == """warning""", "Died on +.faults[1].severity"
    assert result.faults[1].type == """cluster""", "Died on +.faults[1].type"
    assert result.faults[1].node_id == 0, "Died on +.faults[1].node_id"
    assert result.faults[1].drive_id == 0, "Died on +.faults[1].drive_id"
    assert result.faults[1].service_id == 0, "Died on +.faults[1].service_id"
    assert result.faults[1].details == """The sum of all minimum QoS IOPS (182000) is greater than the expected IOPS (150000) of the cluster. The minimum QoS can not be maintained for all volumes simultaneously in this condition. Adjust QoS settings on one or more volumes to not exceed available cluster IOPS.""", "Died on +.faults[1].details"
    assert result.faults[1].date == """2016-12-30T18:45:17.525460Z""", "Died on +.faults[1].date"
    assert result.faults[1].data is None, "Died on .faults[1].data"
    assert result.faults[1].cluster_fault_id == 24, "Died on +.faults[1].cluster_fault_id"

def test_list_cluster_faults_v9.1_4():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListClusterFaults_v9.1_4)

    
    exceptions = True # exceptions
    best_practices = True # best_practices
    update = True # update
    fault_types = "" # fault_types
    result = ef.list_cluster_faults()
    assert result.faults[1].resolved == False, "Died on +.faults[1].resolved"
    assert result.faults[1].code == """clusterIOPSAreOverProvisioned""", "Died on +.faults[1].code"
    assert result.faults[1].node_hardware_fault_id == 0, "Died on +.faults[1].node_hardware_fault_id"
    assert result.faults[1].severity == """warning""", "Died on +.faults[1].severity"
    assert result.faults[1].type == """cluster""", "Died on +.faults[1].type"
    assert result.faults[1].node_id == 0, "Died on +.faults[1].node_id"
    assert result.faults[1].drive_id == 0, "Died on +.faults[1].drive_id"
    assert result.faults[1].service_id == 0, "Died on +.faults[1].service_id"
    assert result.faults[1].details == """The sum of all minimum QoS IOPS (182000) is greater than the expected IOPS (150000) of the cluster. The minimum QoS can not be maintained for all volumes simultaneously in this condition. Adjust QoS settings on one or more volumes to not exceed available cluster IOPS.""", "Died on +.faults[1].details"
    assert result.faults[1].date == """2016-12-30T18:45:17.525460Z""", "Died on +.faults[1].date"
    assert result.faults[1].data is None, "Died on .faults[1].data"
    assert result.faults[1].cluster_fault_id == 24, "Died on +.faults[1].cluster_fault_id"

def test_list_cluster_faults_v9.1_5():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListClusterFaults_v9.1_5)

    
    exceptions = True # exceptions
    best_practices = True # best_practices
    update = True # update
    fault_types = "" # fault_types
    result = ef.list_cluster_faults()
    assert result.faults[1].resolved == False, "Died on +.faults[1].resolved"
    assert result.faults[1].code == """clusterIOPSAreOverProvisioned""", "Died on +.faults[1].code"
    assert result.faults[1].node_hardware_fault_id == 0, "Died on +.faults[1].node_hardware_fault_id"
    assert result.faults[1].severity == """warning""", "Died on +.faults[1].severity"
    assert result.faults[1].type == """cluster""", "Died on +.faults[1].type"
    assert result.faults[1].node_id == 0, "Died on +.faults[1].node_id"
    assert result.faults[1].drive_id == 0, "Died on +.faults[1].drive_id"
    assert result.faults[1].service_id == 0, "Died on +.faults[1].service_id"
    assert result.faults[1].details == """The sum of all minimum QoS IOPS (182000) is greater than the expected IOPS (150000) of the cluster. The minimum QoS can not be maintained for all volumes simultaneously in this condition. Adjust QoS settings on one or more volumes to not exceed available cluster IOPS.""", "Died on +.faults[1].details"
    assert result.faults[1].date == """2016-12-30T18:45:17.525460Z""", "Died on +.faults[1].date"
    assert result.faults[1].data is None, "Died on .faults[1].data"
    assert result.faults[1].cluster_fault_id == 24, "Died on +.faults[1].cluster_fault_id"

def test_list_cluster_faults_v9.1_6():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListClusterFaults_v9.1_6)

    
    exceptions = True # exceptions
    best_practices = True # best_practices
    update = True # update
    fault_types = "" # fault_types
    result = ef.list_cluster_faults()

def test_list_cluster_faults_v9.1_7():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListClusterFaults_v9.1_7)

    
    exceptions = True # exceptions
    best_practices = True # best_practices
    update = True # update
    fault_types = "" # fault_types
    result = ef.list_cluster_faults()
    assert result.faults[1].resolved == False, "Died on +.faults[1].resolved"
    assert result.faults[1].code == """clusterIOPSAreOverProvisioned""", "Died on +.faults[1].code"
    assert result.faults[1].node_hardware_fault_id == 0, "Died on +.faults[1].node_hardware_fault_id"
    assert result.faults[1].severity == """warning""", "Died on +.faults[1].severity"
    assert result.faults[1].type == """cluster""", "Died on +.faults[1].type"
    assert result.faults[1].node_id == 0, "Died on +.faults[1].node_id"
    assert result.faults[1].drive_id == 0, "Died on +.faults[1].drive_id"
    assert result.faults[1].service_id == 0, "Died on +.faults[1].service_id"
    assert result.faults[1].details == """The sum of all minimum QoS IOPS (182000) is greater than the expected IOPS (150000) of the cluster. The minimum QoS can not be maintained for all volumes simultaneously in this condition. Adjust QoS settings on one or more volumes to not exceed available cluster IOPS.""", "Died on +.faults[1].details"
    assert result.faults[1].date == """2016-12-30T18:45:17.525460Z""", "Died on +.faults[1].date"
    assert result.faults[1].data is None, "Died on .faults[1].data"
    assert result.faults[1].cluster_fault_id == 24, "Died on +.faults[1].cluster_fault_id"

def test_list_cluster_faults_v9.1_8():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListClusterFaults_v9.1_8)

    
    exceptions = True # exceptions
    best_practices = True # best_practices
    update = True # update
    fault_types = "" # fault_types
    result = ef.list_cluster_faults()
    assert result.faults[1].resolved == False, "Died on +.faults[1].resolved"
    assert result.faults[1].code == """clusterIOPSAreOverProvisioned""", "Died on +.faults[1].code"
    assert result.faults[1].node_hardware_fault_id == 0, "Died on +.faults[1].node_hardware_fault_id"
    assert result.faults[1].severity == """warning""", "Died on +.faults[1].severity"
    assert result.faults[1].type == """cluster""", "Died on +.faults[1].type"
    assert result.faults[1].node_id == 0, "Died on +.faults[1].node_id"
    assert result.faults[1].drive_id == 0, "Died on +.faults[1].drive_id"
    assert result.faults[1].service_id == 0, "Died on +.faults[1].service_id"
    assert result.faults[1].details == """The sum of all minimum QoS IOPS (182000) is greater than the expected IOPS (150000) of the cluster. The minimum QoS can not be maintained for all volumes simultaneously in this condition. Adjust QoS settings on one or more volumes to not exceed available cluster IOPS.""", "Died on +.faults[1].details"
    assert result.faults[1].date == """2016-12-30T18:45:17.525460Z""", "Died on +.faults[1].date"
    assert result.faults[1].data is None, "Died on .faults[1].data"
    assert result.faults[1].cluster_fault_id == 24, "Died on +.faults[1].cluster_fault_id"

def test_list_cluster_faults_v9.1_9():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListClusterFaults_v9.1_9)

    
    exceptions = True # exceptions
    best_practices = True # best_practices
    update = True # update
    fault_types = "" # fault_types
    result = ef.list_cluster_faults()

def test_list_cluster_pairs_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListClusterPairs_v9.1_0)

    
    result = ef.list_cluster_pairs()
    assert result.cluster_pairs[0].status == """Connected""", "Died on +.cluster_pairs[0].status"
    assert result.cluster_pairs[0].cluster_pair_uuid == UUID("fbd397f6-4b66-4cc4-8862-6143b7e03ccc"), "Died on .cluster_pairs[0].cluster_pair_uuid"
    assert result.cluster_pairs[0].latency == 1, "Died on +.cluster_pairs[0].latency"
    assert result.cluster_pairs[0].cluster_name == """Cfv9vv8w2-YNRr-FOR-TEST-ONLY""", "Died on +.cluster_pairs[0].cluster_name"
    assert result.cluster_pairs[0].cluster_pair_id == 2, "Died on +.cluster_pairs[0].cluster_pair_id"
    assert result.cluster_pairs[0].version == """9.1.0.28""", "Died on +.cluster_pairs[0].version"
    assert result.cluster_pairs[0].mvip == """10.117.57.233""", "Died on +.cluster_pairs[0].mvip"

def test_list_deleted_volumes_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListDeletedVolumes_v8.4_0)

    
    result = ef.list_deleted_volumes()
    assert result.volumes[3].status == """deleted""", "Died on +.volumes[3].status"
    assert result.volumes[3].enable512e == False, "Died on +.volumes[3].enable512e"
    assert result.volumes[3].qos.burst_iops == 100, "Died on +.volumes[3].qos.burst_iops"
    assert result.volumes[3].qos.burst_time == 60, "Died on +.volumes[3].qos.burst_time"
    assert result.volumes[3].qos.min_iops == 100, "Died on +.volumes[3].qos.min_iops"
    assert result.volumes[3].qos.max_iops == 100, "Died on +.volumes[3].qos.max_iops"
    assert result.volumes[3].name == """suite-stage-2-QED--28""", "Died on +.volumes[3].name"
    assert result.volumes[3].scsi_naadevice_id == """6f47acc100000000667170330000001c""", "Died on +.volumes[3].scsi_naadevice_id"
    assert result.volumes[3].total_size == 268435456000, "Died on +.volumes[3].total_size"
    assert result.volumes[3].block_size == 4096, "Died on +.volumes[3].block_size"
    assert result.volumes[3].purge_time == """2017-01-14T12:27:01Z""", "Died on +.volumes[3].purge_time"
    assert result.volumes[3].scsi_euidevice_id == """667170330000001cf47acc0100000000""", "Died on +.volumes[3].scsi_euidevice_id"
    assert result.volumes[3].volume_id == 28, "Died on +.volumes[3].volume_id"
    assert result.volumes[3].access == """readWrite""", "Died on +.volumes[3].access"
    assert result.volumes[3].iqn == """iqn.2010-01.com.solidfire:fqp3.suite-stage-2-qed--28.28""", "Died on +.volumes[3].iqn"
    assert result.volumes[3].slice_count == 1, "Died on +.volumes[3].slice_count"
    assert type(result.volumes[3].attributes) is dict, "Died on .volumes[3].attributes"
    assert result.volumes[3].delete_time == """2017-01-14T04:27:01Z""", "Died on +.volumes[3].delete_time"
    assert result.volumes[3].create_time == """2017-01-14T04:00:13Z""", "Died on +.volumes[3].create_time"
    assert result.volumes[3].account_id == 1, "Died on +.volumes[3].account_id"
    assert result.volumes[2].status == """deleted""", "Died on +.volumes[2].status"
    assert result.volumes[2].enable512e == False, "Died on +.volumes[2].enable512e"
    assert result.volumes[2].qos.burst_iops == 100, "Died on +.volumes[2].qos.burst_iops"
    assert result.volumes[2].qos.burst_time == 60, "Died on +.volumes[2].qos.burst_time"
    assert result.volumes[2].qos.min_iops == 100, "Died on +.volumes[2].qos.min_iops"
    assert result.volumes[2].qos.max_iops == 100, "Died on +.volumes[2].qos.max_iops"
    assert result.volumes[2].name == """suite-stage-2-QED--27""", "Died on +.volumes[2].name"
    assert result.volumes[2].scsi_naadevice_id == """6f47acc100000000667170330000001b""", "Died on +.volumes[2].scsi_naadevice_id"
    assert result.volumes[2].total_size == 268435456000, "Died on +.volumes[2].total_size"
    assert result.volumes[2].block_size == 4096, "Died on +.volumes[2].block_size"
    assert result.volumes[2].purge_time == """2017-01-14T12:27:01Z""", "Died on +.volumes[2].purge_time"
    assert result.volumes[2].scsi_euidevice_id == """667170330000001bf47acc0100000000""", "Died on +.volumes[2].scsi_euidevice_id"
    assert result.volumes[2].volume_id == 27, "Died on +.volumes[2].volume_id"
    assert result.volumes[2].access == """readWrite""", "Died on +.volumes[2].access"
    assert result.volumes[2].iqn == """iqn.2010-01.com.solidfire:fqp3.suite-stage-2-qed--27.27""", "Died on +.volumes[2].iqn"
    assert result.volumes[2].slice_count == 1, "Died on +.volumes[2].slice_count"
    assert type(result.volumes[2].attributes) is dict, "Died on .volumes[2].attributes"
    assert result.volumes[2].delete_time == """2017-01-14T04:27:01Z""", "Died on +.volumes[2].delete_time"
    assert result.volumes[2].create_time == """2017-01-14T04:00:13Z""", "Died on +.volumes[2].create_time"
    assert result.volumes[2].account_id == 1, "Died on +.volumes[2].account_id"
    assert result.volumes[1].status == """deleted""", "Died on +.volumes[1].status"
    assert result.volumes[1].enable512e == False, "Died on +.volumes[1].enable512e"
    assert result.volumes[1].qos.burst_iops == 100, "Died on +.volumes[1].qos.burst_iops"
    assert result.volumes[1].qos.burst_time == 60, "Died on +.volumes[1].qos.burst_time"
    assert result.volumes[1].qos.min_iops == 100, "Died on +.volumes[1].qos.min_iops"
    assert result.volumes[1].qos.max_iops == 100, "Died on +.volumes[1].qos.max_iops"
    assert result.volumes[1].name == """suite-stage-2-QED--26""", "Died on +.volumes[1].name"
    assert result.volumes[1].scsi_naadevice_id == """6f47acc100000000667170330000001a""", "Died on +.volumes[1].scsi_naadevice_id"
    assert result.volumes[1].total_size == 268435456000, "Died on +.volumes[1].total_size"
    assert result.volumes[1].block_size == 4096, "Died on +.volumes[1].block_size"
    assert result.volumes[1].purge_time == """2017-01-14T12:27:01Z""", "Died on +.volumes[1].purge_time"
    assert result.volumes[1].scsi_euidevice_id == """667170330000001af47acc0100000000""", "Died on +.volumes[1].scsi_euidevice_id"
    assert result.volumes[1].volume_id == 26, "Died on +.volumes[1].volume_id"
    assert result.volumes[1].access == """readWrite""", "Died on +.volumes[1].access"
    assert result.volumes[1].iqn == """iqn.2010-01.com.solidfire:fqp3.suite-stage-2-qed--26.26""", "Died on +.volumes[1].iqn"
    assert result.volumes[1].slice_count == 1, "Died on +.volumes[1].slice_count"
    assert type(result.volumes[1].attributes) is dict, "Died on .volumes[1].attributes"
    assert result.volumes[1].delete_time == """2017-01-14T04:27:01Z""", "Died on +.volumes[1].delete_time"
    assert result.volumes[1].create_time == """2017-01-14T04:00:13Z""", "Died on +.volumes[1].create_time"
    assert result.volumes[1].account_id == 1, "Died on +.volumes[1].account_id"
    assert result.volumes[0].status == """deleted""", "Died on +.volumes[0].status"
    assert result.volumes[0].enable512e == False, "Died on +.volumes[0].enable512e"
    assert result.volumes[0].qos.burst_iops == 100, "Died on +.volumes[0].qos.burst_iops"
    assert result.volumes[0].qos.burst_time == 60, "Died on +.volumes[0].qos.burst_time"
    assert result.volumes[0].qos.min_iops == 100, "Died on +.volumes[0].qos.min_iops"
    assert result.volumes[0].qos.max_iops == 100, "Died on +.volumes[0].qos.max_iops"
    assert result.volumes[0].name == """suite-stage-2-QED--25""", "Died on +.volumes[0].name"
    assert result.volumes[0].scsi_naadevice_id == """6f47acc1000000006671703300000019""", "Died on +.volumes[0].scsi_naadevice_id"
    assert result.volumes[0].total_size == 268435456000, "Died on +.volumes[0].total_size"
    assert result.volumes[0].block_size == 4096, "Died on +.volumes[0].block_size"
    assert result.volumes[0].purge_time == """2017-01-14T12:27:01Z""", "Died on +.volumes[0].purge_time"
    assert result.volumes[0].scsi_euidevice_id == """6671703300000019f47acc0100000000""", "Died on +.volumes[0].scsi_euidevice_id"
    assert result.volumes[0].volume_id == 25, "Died on +.volumes[0].volume_id"
    assert result.volumes[0].access == """readWrite""", "Died on +.volumes[0].access"
    assert result.volumes[0].iqn == """iqn.2010-01.com.solidfire:fqp3.suite-stage-2-qed--25.25""", "Died on +.volumes[0].iqn"
    assert result.volumes[0].slice_count == 1, "Died on +.volumes[0].slice_count"
    assert type(result.volumes[0].attributes) is dict, "Died on .volumes[0].attributes"
    assert result.volumes[0].delete_time == """2017-01-14T04:27:01Z""", "Died on +.volumes[0].delete_time"
    assert result.volumes[0].create_time == """2017-01-14T04:00:13Z""", "Died on +.volumes[0].create_time"
    assert result.volumes[0].account_id == 1, "Died on +.volumes[0].account_id"

def test_list_deleted_volumes_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListDeletedVolumes_v9.1_0)

    
    result = ef.list_deleted_volumes()

def test_list_drives_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListDrives_v8.4_0)

    
    result = ef.list_drives()
    assert result.drives[39].status == """available""", "Died on +.drives[39].status"
    assert result.drives[39].slot == 7, "Died on +.drives[39].slot"
    assert result.drives[39].capacity == 960197124096, "Died on +.drives[39].capacity"
    assert result.drives[39].node_id == 1, "Died on +.drives[39].node_id"
    assert result.drives[39].drive_id == 8, "Died on +.drives[39].drive_id"
    assert type(result.drives[39].attributes) is dict, "Died on .drives[39].attributes"
    assert result.drives[39].serial == """scsi-SATA_SDLF1DAR-960G-1_20291698""", "Died on +.drives[39].serial"
    assert result.drives[39].type == """unknown""", "Died on +.drives[39].type"
    assert result.drives[38].status == """available""", "Died on +.drives[38].status"
    assert result.drives[38].slot == 8, "Died on +.drives[38].slot"
    assert result.drives[38].capacity == 960197124096, "Died on +.drives[38].capacity"
    assert result.drives[38].node_id == 1, "Died on +.drives[38].node_id"
    assert result.drives[38].drive_id == 9, "Died on +.drives[38].drive_id"
    assert type(result.drives[38].attributes) is dict, "Died on .drives[38].attributes"
    assert result.drives[38].serial == """scsi-SATA_SDLF1DAR-960G-1_202916B7""", "Died on +.drives[38].serial"
    assert result.drives[38].type == """unknown""", "Died on +.drives[38].type"
    assert result.drives[37].status == """available""", "Died on +.drives[37].status"
    assert result.drives[37].slot == 3, "Died on +.drives[37].slot"
    assert result.drives[37].capacity == 960197124096, "Died on +.drives[37].capacity"
    assert result.drives[37].node_id == 1, "Died on +.drives[37].node_id"
    assert result.drives[37].drive_id == 4, "Died on +.drives[37].drive_id"
    assert type(result.drives[37].attributes) is dict, "Died on .drives[37].attributes"
    assert result.drives[37].serial == """scsi-SATA_SDLF1DAR-960G-1_202916B2""", "Died on +.drives[37].serial"
    assert result.drives[37].type == """unknown""", "Died on +.drives[37].type"
    assert result.drives[36].status == """available""", "Died on +.drives[36].status"
    assert result.drives[36].slot == 0, "Died on +.drives[36].slot"
    assert result.drives[36].capacity == 960197124096, "Died on +.drives[36].capacity"
    assert result.drives[36].node_id == 4, "Died on +.drives[36].node_id"
    assert result.drives[36].drive_id == 31, "Died on +.drives[36].drive_id"
    assert type(result.drives[36].attributes) is dict, "Died on .drives[36].attributes"
    assert result.drives[36].serial == """scsi-SATA_SDLFNCAR-960G-1_000396F8""", "Died on +.drives[36].serial"
    assert result.drives[36].type == """unknown""", "Died on +.drives[36].type"
    assert result.drives[35].status == """available""", "Died on +.drives[35].status"
    assert result.drives[35].slot == 4, "Died on +.drives[35].slot"
    assert result.drives[35].capacity == 960197124096, "Died on +.drives[35].capacity"
    assert result.drives[35].node_id == 1, "Died on +.drives[35].node_id"
    assert result.drives[35].drive_id == 5, "Died on +.drives[35].drive_id"
    assert type(result.drives[35].attributes) is dict, "Died on .drives[35].attributes"
    assert result.drives[35].serial == """scsi-SATA_SDLFNCAR-960G-1_00056D20""", "Died on +.drives[35].serial"
    assert result.drives[35].type == """unknown""", "Died on +.drives[35].type"
    assert result.drives[34].status == """available""", "Died on +.drives[34].status"
    assert result.drives[34].slot == 1, "Died on +.drives[34].slot"
    assert result.drives[34].capacity == 960197124096, "Died on +.drives[34].capacity"
    assert result.drives[34].node_id == 4, "Died on +.drives[34].node_id"
    assert result.drives[34].drive_id == 32, "Died on +.drives[34].drive_id"
    assert type(result.drives[34].attributes) is dict, "Died on .drives[34].attributes"
    assert result.drives[34].serial == """scsi-SATA_SDLFNCAR-960G-1_0003A77F""", "Died on +.drives[34].serial"
    assert result.drives[34].type == """unknown""", "Died on +.drives[34].type"
    assert result.drives[33].status == """available""", "Died on +.drives[33].status"
    assert result.drives[33].slot == 5, "Died on +.drives[33].slot"
    assert result.drives[33].capacity == 960197124096, "Died on +.drives[33].capacity"
    assert result.drives[33].node_id == 1, "Died on +.drives[33].node_id"
    assert result.drives[33].drive_id == 6, "Died on +.drives[33].drive_id"
    assert type(result.drives[33].attributes) is dict, "Died on .drives[33].attributes"
    assert result.drives[33].serial == """scsi-SATA_SDLF1DAR-960G-1_202916CD""", "Died on +.drives[33].serial"
    assert result.drives[33].type == """unknown""", "Died on +.drives[33].type"
    assert result.drives[32].status == """available""", "Died on +.drives[32].status"
    assert result.drives[32].slot == 6, "Died on +.drives[32].slot"
    assert result.drives[32].capacity == 960197124096, "Died on +.drives[32].capacity"
    assert result.drives[32].node_id == 1, "Died on +.drives[32].node_id"
    assert result.drives[32].drive_id == 7, "Died on +.drives[32].drive_id"
    assert type(result.drives[32].attributes) is dict, "Died on .drives[32].attributes"
    assert result.drives[32].serial == """scsi-SATA_SDLF1DAR-960G-1_2029161E""", "Died on +.drives[32].serial"
    assert result.drives[32].type == """unknown""", "Died on +.drives[32].type"
    assert result.drives[31].status == """available""", "Died on +.drives[31].status"
    assert result.drives[31].slot == 9, "Died on +.drives[31].slot"
    assert result.drives[31].capacity == 960197124096, "Died on +.drives[31].capacity"
    assert result.drives[31].node_id == 3, "Died on +.drives[31].node_id"
    assert result.drives[31].drive_id == 30, "Died on +.drives[31].drive_id"
    assert type(result.drives[31].attributes) is dict, "Died on .drives[31].attributes"
    assert result.drives[31].serial == """scsi-SATA_SDLFNCAR-960G-1_00039561""", "Died on +.drives[31].serial"
    assert result.drives[31].type == """unknown""", "Died on +.drives[31].type"
    assert result.drives[30].status == """available""", "Died on +.drives[30].status"
    assert result.drives[30].slot == 0, "Died on +.drives[30].slot"
    assert result.drives[30].capacity == 960197124096, "Died on +.drives[30].capacity"
    assert result.drives[30].node_id == 1, "Died on +.drives[30].node_id"
    assert result.drives[30].drive_id == 1, "Died on +.drives[30].drive_id"
    assert type(result.drives[30].attributes) is dict, "Died on .drives[30].attributes"
    assert result.drives[30].serial == """scsi-SATA_SDLF1DAR-960G-1_202916CA""", "Died on +.drives[30].serial"
    assert result.drives[30].type == """unknown""", "Died on +.drives[30].type"
    assert result.drives[29].status == """available""", "Died on +.drives[29].status"
    assert result.drives[29].slot == 9, "Died on +.drives[29].slot"
    assert result.drives[29].capacity == 960197124096, "Died on +.drives[29].capacity"
    assert result.drives[29].node_id == 1, "Died on +.drives[29].node_id"
    assert result.drives[29].drive_id == 10, "Died on +.drives[29].drive_id"
    assert type(result.drives[29].attributes) is dict, "Died on .drives[29].attributes"
    assert result.drives[29].serial == """scsi-SATA_SDLF1DAR-960G-1_20291649""", "Died on +.drives[29].serial"
    assert result.drives[29].type == """unknown""", "Died on +.drives[29].type"
    assert result.drives[28].status == """available""", "Died on +.drives[28].status"
    assert result.drives[28].slot == 1, "Died on +.drives[28].slot"
    assert result.drives[28].capacity == 960197124096, "Died on +.drives[28].capacity"
    assert result.drives[28].node_id == 1, "Died on +.drives[28].node_id"
    assert result.drives[28].drive_id == 2, "Died on +.drives[28].drive_id"
    assert type(result.drives[28].attributes) is dict, "Died on .drives[28].attributes"
    assert result.drives[28].serial == """scsi-SATA_SDLF1DAR-960G-1_20291668""", "Died on +.drives[28].serial"
    assert result.drives[28].type == """unknown""", "Died on +.drives[28].type"
    assert result.drives[27].status == """available""", "Died on +.drives[27].status"
    assert result.drives[27].slot == 2, "Died on +.drives[27].slot"
    assert result.drives[27].capacity == 960197124096, "Died on +.drives[27].capacity"
    assert result.drives[27].node_id == 1, "Died on +.drives[27].node_id"
    assert result.drives[27].drive_id == 3, "Died on +.drives[27].drive_id"
    assert type(result.drives[27].attributes) is dict, "Died on .drives[27].attributes"
    assert result.drives[27].serial == """scsi-SATA_SDLF1DAR-960G-1_2029157F""", "Died on +.drives[27].serial"
    assert result.drives[27].type == """unknown""", "Died on +.drives[27].type"
    assert result.drives[26].status == """available""", "Died on +.drives[26].status"
    assert result.drives[26].slot == 8, "Died on +.drives[26].slot"
    assert result.drives[26].capacity == 960197124096, "Died on +.drives[26].capacity"
    assert result.drives[26].node_id == 3, "Died on +.drives[26].node_id"
    assert result.drives[26].drive_id == 29, "Died on +.drives[26].drive_id"
    assert type(result.drives[26].attributes) is dict, "Died on .drives[26].attributes"
    assert result.drives[26].serial == """scsi-SATA_SDLFNCAR-960G-1_00036478""", "Died on +.drives[26].serial"
    assert result.drives[26].type == """unknown""", "Died on +.drives[26].type"
    assert result.drives[25].status == """available""", "Died on +.drives[25].status"
    assert result.drives[25].slot == 7, "Died on +.drives[25].slot"
    assert result.drives[25].capacity == 960197124096, "Died on +.drives[25].capacity"
    assert result.drives[25].node_id == 3, "Died on +.drives[25].node_id"
    assert result.drives[25].drive_id == 28, "Died on +.drives[25].drive_id"
    assert type(result.drives[25].attributes) is dict, "Died on .drives[25].attributes"
    assert result.drives[25].serial == """scsi-SATA_SDLFNCAR-960G-1_00039FC7""", "Died on +.drives[25].serial"
    assert result.drives[25].type == """unknown""", "Died on +.drives[25].type"
    assert result.drives[24].status == """available""", "Died on +.drives[24].status"
    assert result.drives[24].slot == 6, "Died on +.drives[24].slot"
    assert result.drives[24].capacity == 960197124096, "Died on +.drives[24].capacity"
    assert result.drives[24].node_id == 3, "Died on +.drives[24].node_id"
    assert result.drives[24].drive_id == 27, "Died on +.drives[24].drive_id"
    assert type(result.drives[24].attributes) is dict, "Died on .drives[24].attributes"
    assert result.drives[24].serial == """scsi-SATA_SDLFNCAR-960G-1_0003965D""", "Died on +.drives[24].serial"
    assert result.drives[24].type == """unknown""", "Died on +.drives[24].type"
    assert result.drives[23].status == """available""", "Died on +.drives[23].status"
    assert result.drives[23].slot == 5, "Died on +.drives[23].slot"
    assert result.drives[23].capacity == 960197124096, "Died on +.drives[23].capacity"
    assert result.drives[23].node_id == 3, "Died on +.drives[23].node_id"
    assert result.drives[23].drive_id == 26, "Died on +.drives[23].drive_id"
    assert type(result.drives[23].attributes) is dict, "Died on .drives[23].attributes"
    assert result.drives[23].serial == """scsi-SATA_SDLFNCAR-960G-1_0003475F""", "Died on +.drives[23].serial"
    assert result.drives[23].type == """unknown""", "Died on +.drives[23].type"
    assert result.drives[22].status == """available""", "Died on +.drives[22].status"
    assert result.drives[22].slot == 4, "Died on +.drives[22].slot"
    assert result.drives[22].capacity == 960197124096, "Died on +.drives[22].capacity"
    assert result.drives[22].node_id == 3, "Died on +.drives[22].node_id"
    assert result.drives[22].drive_id == 25, "Died on +.drives[22].drive_id"
    assert type(result.drives[22].attributes) is dict, "Died on .drives[22].attributes"
    assert result.drives[22].serial == """scsi-SATA_SDLFNCAR-960G-1_00039F94""", "Died on +.drives[22].serial"
    assert result.drives[22].type == """unknown""", "Died on +.drives[22].type"
    assert result.drives[21].status == """available""", "Died on +.drives[21].status"
    assert result.drives[21].slot == 3, "Died on +.drives[21].slot"
    assert result.drives[21].capacity == 960197124096, "Died on +.drives[21].capacity"
    assert result.drives[21].node_id == 3, "Died on +.drives[21].node_id"
    assert result.drives[21].drive_id == 24, "Died on +.drives[21].drive_id"
    assert type(result.drives[21].attributes) is dict, "Died on .drives[21].attributes"
    assert result.drives[21].serial == """scsi-SATA_SDLFNCAR-960G-1_0003432E""", "Died on +.drives[21].serial"
    assert result.drives[21].type == """unknown""", "Died on +.drives[21].type"
    assert result.drives[20].status == """available""", "Died on +.drives[20].status"
    assert result.drives[20].slot == 2, "Died on +.drives[20].slot"
    assert result.drives[20].capacity == 960197124096, "Died on +.drives[20].capacity"
    assert result.drives[20].node_id == 3, "Died on +.drives[20].node_id"
    assert result.drives[20].drive_id == 23, "Died on +.drives[20].drive_id"
    assert type(result.drives[20].attributes) is dict, "Died on .drives[20].attributes"
    assert result.drives[20].serial == """scsi-SATA_SDLFNCAR-960G-1_0003A370""", "Died on +.drives[20].serial"
    assert result.drives[20].type == """unknown""", "Died on +.drives[20].type"
    assert result.drives[19].status == """available""", "Died on +.drives[19].status"
    assert result.drives[19].slot == 1, "Died on +.drives[19].slot"
    assert result.drives[19].capacity == 960197124096, "Died on +.drives[19].capacity"
    assert result.drives[19].node_id == 3, "Died on +.drives[19].node_id"
    assert result.drives[19].drive_id == 22, "Died on +.drives[19].drive_id"
    assert type(result.drives[19].attributes) is dict, "Died on .drives[19].attributes"
    assert result.drives[19].serial == """scsi-SATA_SDLFNCAR-960G-1_00039692""", "Died on +.drives[19].serial"
    assert result.drives[19].type == """unknown""", "Died on +.drives[19].type"
    assert result.drives[18].status == """available""", "Died on +.drives[18].status"
    assert result.drives[18].slot == 9, "Died on +.drives[18].slot"
    assert result.drives[18].capacity == 960197124096, "Died on +.drives[18].capacity"
    assert result.drives[18].node_id == 4, "Died on +.drives[18].node_id"
    assert result.drives[18].drive_id == 40, "Died on +.drives[18].drive_id"
    assert type(result.drives[18].attributes) is dict, "Died on .drives[18].attributes"
    assert result.drives[18].serial == """scsi-SATA_SDLFNCAR-960G-1_202BD227""", "Died on +.drives[18].serial"
    assert result.drives[18].type == """unknown""", "Died on +.drives[18].type"
    assert result.drives[17].status == """available""", "Died on +.drives[17].status"
    assert result.drives[17].slot == 9, "Died on +.drives[17].slot"
    assert result.drives[17].capacity == 960197124096, "Died on +.drives[17].capacity"
    assert result.drives[17].node_id == 2, "Died on +.drives[17].node_id"
    assert result.drives[17].drive_id == 20, "Died on +.drives[17].drive_id"
    assert type(result.drives[17].attributes) is dict, "Died on .drives[17].attributes"
    assert result.drives[17].serial == """scsi-SATA_SDLFNCAR-960G-1_0003A75C""", "Died on +.drives[17].serial"
    assert result.drives[17].type == """unknown""", "Died on +.drives[17].type"
    assert result.drives[16].status == """available""", "Died on +.drives[16].status"
    assert result.drives[16].slot == 0, "Died on +.drives[16].slot"
    assert result.drives[16].capacity == 960197124096, "Died on +.drives[16].capacity"
    assert result.drives[16].node_id == 3, "Died on +.drives[16].node_id"
    assert result.drives[16].drive_id == 21, "Died on +.drives[16].drive_id"
    assert type(result.drives[16].attributes) is dict, "Died on .drives[16].attributes"
    assert result.drives[16].serial == """scsi-SATA_SDLFNCAR-960G-1_000344BD""", "Died on +.drives[16].serial"
    assert result.drives[16].type == """unknown""", "Died on +.drives[16].type"
    assert result.drives[15].status == """available""", "Died on +.drives[15].status"
    assert result.drives[15].slot == 1, "Died on +.drives[15].slot"
    assert result.drives[15].capacity == 960197124096, "Died on +.drives[15].capacity"
    assert result.drives[15].node_id == 2, "Died on +.drives[15].node_id"
    assert result.drives[15].drive_id == 12, "Died on +.drives[15].drive_id"
    assert type(result.drives[15].attributes) is dict, "Died on .drives[15].attributes"
    assert result.drives[15].serial == """scsi-SATA_SDLFNCAR-960G-1_000360A7""", "Died on +.drives[15].serial"
    assert result.drives[15].type == """unknown""", "Died on +.drives[15].type"
    assert result.drives[14].status == """available""", "Died on +.drives[14].status"
    assert result.drives[14].slot == 7, "Died on +.drives[14].slot"
    assert result.drives[14].capacity == 960197124096, "Died on +.drives[14].capacity"
    assert result.drives[14].node_id == 4, "Died on +.drives[14].node_id"
    assert result.drives[14].drive_id == 38, "Died on +.drives[14].drive_id"
    assert type(result.drives[14].attributes) is dict, "Died on .drives[14].attributes"
    assert result.drives[14].serial == """scsi-SATA_SDLFNCAR-960G-1_000396FA""", "Died on +.drives[14].serial"
    assert result.drives[14].type == """unknown""", "Died on +.drives[14].type"
    assert result.drives[13].status == """available""", "Died on +.drives[13].status"
    assert result.drives[13].slot == 0, "Died on +.drives[13].slot"
    assert result.drives[13].capacity == 960197124096, "Died on +.drives[13].capacity"
    assert result.drives[13].node_id == 2, "Died on +.drives[13].node_id"
    assert result.drives[13].drive_id == 11, "Died on +.drives[13].drive_id"
    assert type(result.drives[13].attributes) is dict, "Died on .drives[13].attributes"
    assert result.drives[13].serial == """scsi-SATA_SDLFNCAR-960G-1_202BCB1A""", "Died on +.drives[13].serial"
    assert result.drives[13].type == """unknown""", "Died on +.drives[13].type"
    assert result.drives[12].status == """available""", "Died on +.drives[12].status"
    assert result.drives[12].slot == 6, "Died on +.drives[12].slot"
    assert result.drives[12].capacity == 960197124096, "Died on +.drives[12].capacity"
    assert result.drives[12].node_id == 4, "Died on +.drives[12].node_id"
    assert result.drives[12].drive_id == 37, "Died on +.drives[12].drive_id"
    assert type(result.drives[12].attributes) is dict, "Died on .drives[12].attributes"
    assert result.drives[12].serial == """scsi-SATA_SDLFNCAR-960G-1_00038523""", "Died on +.drives[12].serial"
    assert result.drives[12].type == """unknown""", "Died on +.drives[12].type"
    assert result.drives[11].status == """available""", "Died on +.drives[11].status"
    assert result.drives[11].slot == 3, "Died on +.drives[11].slot"
    assert result.drives[11].capacity == 960197124096, "Died on +.drives[11].capacity"
    assert result.drives[11].node_id == 2, "Died on +.drives[11].node_id"
    assert result.drives[11].drive_id == 14, "Died on +.drives[11].drive_id"
    assert type(result.drives[11].attributes) is dict, "Died on .drives[11].attributes"
    assert result.drives[11].serial == """scsi-SATA_SDLFNCAR-960G-1_000349B4""", "Died on +.drives[11].serial"
    assert result.drives[11].type == """unknown""", "Died on +.drives[11].type"
    assert result.drives[10].status == """available""", "Died on +.drives[10].status"
    assert result.drives[10].slot == 2, "Died on +.drives[10].slot"
    assert result.drives[10].capacity == 960197124096, "Died on +.drives[10].capacity"
    assert result.drives[10].node_id == 2, "Died on +.drives[10].node_id"
    assert result.drives[10].drive_id == 13, "Died on +.drives[10].drive_id"
    assert type(result.drives[10].attributes) is dict, "Died on .drives[10].attributes"
    assert result.drives[10].serial == """scsi-SATA_SDLFNCAR-960G-1_0003988B""", "Died on +.drives[10].serial"
    assert result.drives[10].type == """unknown""", "Died on +.drives[10].type"
    assert result.drives[9].status == """available""", "Died on +.drives[9].status"
    assert result.drives[9].slot == 8, "Died on +.drives[9].slot"
    assert result.drives[9].capacity == 960197124096, "Died on +.drives[9].capacity"
    assert result.drives[9].node_id == 4, "Died on +.drives[9].node_id"
    assert result.drives[9].drive_id == 39, "Died on +.drives[9].drive_id"
    assert type(result.drives[9].attributes) is dict, "Died on .drives[9].attributes"
    assert result.drives[9].serial == """scsi-SATA_SDLFNCAR-960G-1_000356B8""", "Died on +.drives[9].serial"
    assert result.drives[9].type == """unknown""", "Died on +.drives[9].type"
    assert result.drives[8].status == """available""", "Died on +.drives[8].status"
    assert result.drives[8].slot == 5, "Died on +.drives[8].slot"
    assert result.drives[8].capacity == 960197124096, "Died on +.drives[8].capacity"
    assert result.drives[8].node_id == 2, "Died on +.drives[8].node_id"
    assert result.drives[8].drive_id == 16, "Died on +.drives[8].drive_id"
    assert type(result.drives[8].attributes) is dict, "Died on .drives[8].attributes"
    assert result.drives[8].serial == """scsi-SATA_SDLFNCAR-960G-1_000344A9""", "Died on +.drives[8].serial"
    assert result.drives[8].type == """unknown""", "Died on +.drives[8].type"
    assert result.drives[7].status == """available""", "Died on +.drives[7].status"
    assert result.drives[7].slot == 3, "Died on +.drives[7].slot"
    assert result.drives[7].capacity == 960197124096, "Died on +.drives[7].capacity"
    assert result.drives[7].node_id == 4, "Died on +.drives[7].node_id"
    assert result.drives[7].drive_id == 34, "Died on +.drives[7].drive_id"
    assert type(result.drives[7].attributes) is dict, "Died on .drives[7].attributes"
    assert result.drives[7].serial == """scsi-SATA_SDLFNCAR-960G-1_202BD157""", "Died on +.drives[7].serial"
    assert result.drives[7].type == """unknown""", "Died on +.drives[7].type"
    assert result.drives[6].status == """available""", "Died on +.drives[6].status"
    assert result.drives[6].slot == 4, "Died on +.drives[6].slot"
    assert result.drives[6].capacity == 960197124096, "Died on +.drives[6].capacity"
    assert result.drives[6].node_id == 2, "Died on +.drives[6].node_id"
    assert result.drives[6].drive_id == 15, "Died on +.drives[6].drive_id"
    assert type(result.drives[6].attributes) is dict, "Died on .drives[6].attributes"
    assert result.drives[6].serial == """scsi-SATA_SDLFNCAR-960G-1_00035926""", "Died on +.drives[6].serial"
    assert result.drives[6].type == """unknown""", "Died on +.drives[6].type"
    assert result.drives[5].status == """available""", "Died on +.drives[5].status"
    assert result.drives[5].slot == 2, "Died on +.drives[5].slot"
    assert result.drives[5].capacity == 960197124096, "Died on +.drives[5].capacity"
    assert result.drives[5].node_id == 4, "Died on +.drives[5].node_id"
    assert result.drives[5].drive_id == 33, "Died on +.drives[5].drive_id"
    assert type(result.drives[5].attributes) is dict, "Died on .drives[5].attributes"
    assert result.drives[5].serial == """scsi-SATA_SDLFNCAR-960G-1_0003A863""", "Died on +.drives[5].serial"
    assert result.drives[5].type == """unknown""", "Died on +.drives[5].type"
    assert result.drives[4].status == """available""", "Died on +.drives[4].status"
    assert result.drives[4].slot == 7, "Died on +.drives[4].slot"
    assert result.drives[4].capacity == 960197124096, "Died on +.drives[4].capacity"
    assert result.drives[4].node_id == 2, "Died on +.drives[4].node_id"
    assert result.drives[4].drive_id == 18, "Died on +.drives[4].drive_id"
    assert type(result.drives[4].attributes) is dict, "Died on .drives[4].attributes"
    assert result.drives[4].serial == """scsi-SATA_SDLFNCAR-960G-1_00039472""", "Died on +.drives[4].serial"
    assert result.drives[4].type == """unknown""", "Died on +.drives[4].type"
    assert result.drives[3].status == """available""", "Died on +.drives[3].status"
    assert result.drives[3].slot == 5, "Died on +.drives[3].slot"
    assert result.drives[3].capacity == 960197124096, "Died on +.drives[3].capacity"
    assert result.drives[3].node_id == 4, "Died on +.drives[3].node_id"
    assert result.drives[3].drive_id == 36, "Died on +.drives[3].drive_id"
    assert type(result.drives[3].attributes) is dict, "Died on .drives[3].attributes"
    assert result.drives[3].serial == """scsi-SATA_SDLFNCAR-960G-1_00039F58""", "Died on +.drives[3].serial"
    assert result.drives[3].type == """unknown""", "Died on +.drives[3].type"
    assert result.drives[2].status == """available""", "Died on +.drives[2].status"
    assert result.drives[2].slot == 6, "Died on +.drives[2].slot"
    assert result.drives[2].capacity == 960197124096, "Died on +.drives[2].capacity"
    assert result.drives[2].node_id == 2, "Died on +.drives[2].node_id"
    assert result.drives[2].drive_id == 17, "Died on +.drives[2].drive_id"
    assert type(result.drives[2].attributes) is dict, "Died on .drives[2].attributes"
    assert result.drives[2].serial == """scsi-SATA_SDLFNCAR-960G-1_000398A3""", "Died on +.drives[2].serial"
    assert result.drives[2].type == """unknown""", "Died on +.drives[2].type"
    assert result.drives[1].status == """available""", "Died on +.drives[1].status"
    assert result.drives[1].slot == 4, "Died on +.drives[1].slot"
    assert result.drives[1].capacity == 960197124096, "Died on +.drives[1].capacity"
    assert result.drives[1].node_id == 4, "Died on +.drives[1].node_id"
    assert result.drives[1].drive_id == 35, "Died on +.drives[1].drive_id"
    assert type(result.drives[1].attributes) is dict, "Died on .drives[1].attributes"
    assert result.drives[1].serial == """scsi-SATA_SDLFNCAR-960G-1_00039F7F""", "Died on +.drives[1].serial"
    assert result.drives[1].type == """unknown""", "Died on +.drives[1].type"
    assert result.drives[0].status == """available""", "Died on +.drives[0].status"
    assert result.drives[0].slot == 8, "Died on +.drives[0].slot"
    assert result.drives[0].capacity == 960197124096, "Died on +.drives[0].capacity"
    assert result.drives[0].node_id == 2, "Died on +.drives[0].node_id"
    assert result.drives[0].drive_id == 19, "Died on +.drives[0].drive_id"
    assert type(result.drives[0].attributes) is dict, "Died on .drives[0].attributes"
    assert result.drives[0].serial == """scsi-SATA_SDLFNCAR-960G-1_000394C4""", "Died on +.drives[0].serial"
    assert result.drives[0].type == """unknown""", "Died on +.drives[0].type"

def test_list_drives_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListDrives_v8.6_0)

    
    result = ef.list_drives()
    assert result.drives[49].status == """available""", "Died on +.drives[49].status"
    assert result.drives[49].slot == 9, "Died on +.drives[49].slot"
    assert result.drives[49].capacity == 240057409536, "Died on +.drives[49].capacity"
    assert result.drives[49].node_id == 5, "Died on +.drives[49].node_id"
    assert result.drives[49].drive_id == 50, "Died on +.drives[49].drive_id"
    assert type(result.drives[49].attributes) is dict, "Died on .drives[49].attributes"
    assert result.drives[49].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NWAG600555""", "Died on +.drives[49].serial"
    assert result.drives[49].type == """unknown""", "Died on +.drives[49].type"
    assert result.drives[48].status == """available""", "Died on +.drives[48].status"
    assert result.drives[48].slot == 7, "Died on +.drives[48].slot"
    assert result.drives[48].capacity == 240057409536, "Died on +.drives[48].capacity"
    assert result.drives[48].node_id == 1, "Died on +.drives[48].node_id"
    assert result.drives[48].drive_id == 8, "Died on +.drives[48].drive_id"
    assert type(result.drives[48].attributes) is dict, "Died on .drives[48].attributes"
    assert result.drives[48].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF701968""", "Died on +.drives[48].serial"
    assert result.drives[48].type == """unknown""", "Died on +.drives[48].type"
    assert result.drives[47].status == """available""", "Died on +.drives[47].status"
    assert result.drives[47].slot == 8, "Died on +.drives[47].slot"
    assert result.drives[47].capacity == 240057409536, "Died on +.drives[47].capacity"
    assert result.drives[47].node_id == 1, "Died on +.drives[47].node_id"
    assert result.drives[47].drive_id == 9, "Died on +.drives[47].drive_id"
    assert type(result.drives[47].attributes) is dict, "Died on .drives[47].attributes"
    assert result.drives[47].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF701936""", "Died on +.drives[47].serial"
    assert result.drives[47].type == """unknown""", "Died on +.drives[47].type"
    assert result.drives[46].status == """available""", "Died on +.drives[46].status"
    assert result.drives[46].slot == 3, "Died on +.drives[46].slot"
    assert result.drives[46].capacity == 240057409536, "Died on +.drives[46].capacity"
    assert result.drives[46].node_id == 1, "Died on +.drives[46].node_id"
    assert result.drives[46].drive_id == 4, "Died on +.drives[46].drive_id"
    assert type(result.drives[46].attributes) is dict, "Died on .drives[46].attributes"
    assert result.drives[46].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF703620""", "Died on +.drives[46].serial"
    assert result.drives[46].type == """unknown""", "Died on +.drives[46].type"
    assert result.drives[45].status == """available""", "Died on +.drives[45].status"
    assert result.drives[45].slot == 0, "Died on +.drives[45].slot"
    assert result.drives[45].capacity == 240057409536, "Died on +.drives[45].capacity"
    assert result.drives[45].node_id == 2, "Died on +.drives[45].node_id"
    assert result.drives[45].drive_id == 31, "Died on +.drives[45].drive_id"
    assert type(result.drives[45].attributes) is dict, "Died on .drives[45].attributes"
    assert result.drives[45].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF702165""", "Died on +.drives[45].serial"
    assert result.drives[45].type == """unknown""", "Died on +.drives[45].type"
    assert result.drives[44].status == """available""", "Died on +.drives[44].status"
    assert result.drives[44].slot == 4, "Died on +.drives[44].slot"
    assert result.drives[44].capacity == 240057409536, "Died on +.drives[44].capacity"
    assert result.drives[44].node_id == 1, "Died on +.drives[44].node_id"
    assert result.drives[44].drive_id == 5, "Died on +.drives[44].drive_id"
    assert type(result.drives[44].attributes) is dict, "Died on .drives[44].attributes"
    assert result.drives[44].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF702034""", "Died on +.drives[44].serial"
    assert result.drives[44].type == """unknown""", "Died on +.drives[44].type"
    assert result.drives[43].status == """available""", "Died on +.drives[43].status"
    assert result.drives[43].slot == 1, "Died on +.drives[43].slot"
    assert result.drives[43].capacity == 240057409536, "Died on +.drives[43].capacity"
    assert result.drives[43].node_id == 2, "Died on +.drives[43].node_id"
    assert result.drives[43].drive_id == 32, "Died on +.drives[43].drive_id"
    assert type(result.drives[43].attributes) is dict, "Died on .drives[43].attributes"
    assert result.drives[43].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF703400""", "Died on +.drives[43].serial"
    assert result.drives[43].type == """unknown""", "Died on +.drives[43].type"
    assert result.drives[42].status == """available""", "Died on +.drives[42].status"
    assert result.drives[42].slot == 5, "Died on +.drives[42].slot"
    assert result.drives[42].capacity == 240057409536, "Died on +.drives[42].capacity"
    assert result.drives[42].node_id == 1, "Died on +.drives[42].node_id"
    assert result.drives[42].drive_id == 6, "Died on +.drives[42].drive_id"
    assert type(result.drives[42].attributes) is dict, "Died on .drives[42].attributes"
    assert result.drives[42].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF701967""", "Died on +.drives[42].serial"
    assert result.drives[42].type == """unknown""", "Died on +.drives[42].type"
    assert result.drives[41].status == """available""", "Died on +.drives[41].status"
    assert result.drives[41].slot == 6, "Died on +.drives[41].slot"
    assert result.drives[41].capacity == 240057409536, "Died on +.drives[41].capacity"
    assert result.drives[41].node_id == 1, "Died on +.drives[41].node_id"
    assert result.drives[41].drive_id == 7, "Died on +.drives[41].drive_id"
    assert type(result.drives[41].attributes) is dict, "Died on .drives[41].attributes"
    assert result.drives[41].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF701969""", "Died on +.drives[41].serial"
    assert result.drives[41].type == """unknown""", "Died on +.drives[41].type"
    assert result.drives[40].status == """available""", "Died on +.drives[40].status"
    assert result.drives[40].slot == 9, "Died on +.drives[40].slot"
    assert result.drives[40].capacity == 240057409536, "Died on +.drives[40].capacity"
    assert result.drives[40].node_id == 3, "Died on +.drives[40].node_id"
    assert result.drives[40].drive_id == 30, "Died on +.drives[40].drive_id"
    assert type(result.drives[40].attributes) is dict, "Died on .drives[40].attributes"
    assert result.drives[40].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF700775""", "Died on +.drives[40].serial"
    assert result.drives[40].type == """unknown""", "Died on +.drives[40].type"
    assert result.drives[39].status == """available""", "Died on +.drives[39].status"
    assert result.drives[39].slot == 0, "Died on +.drives[39].slot"
    assert result.drives[39].capacity == 240057409536, "Died on +.drives[39].capacity"
    assert result.drives[39].node_id == 1, "Died on +.drives[39].node_id"
    assert result.drives[39].drive_id == 1, "Died on +.drives[39].drive_id"
    assert type(result.drives[39].attributes) is dict, "Died on .drives[39].attributes"
    assert result.drives[39].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF703829""", "Died on +.drives[39].serial"
    assert result.drives[39].type == """unknown""", "Died on +.drives[39].type"
    assert result.drives[38].status == """available""", "Died on +.drives[38].status"
    assert result.drives[38].slot == 9, "Died on +.drives[38].slot"
    assert result.drives[38].capacity == 240057409536, "Died on +.drives[38].capacity"
    assert result.drives[38].node_id == 1, "Died on +.drives[38].node_id"
    assert result.drives[38].drive_id == 10, "Died on +.drives[38].drive_id"
    assert type(result.drives[38].attributes) is dict, "Died on .drives[38].attributes"
    assert result.drives[38].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF701937""", "Died on +.drives[38].serial"
    assert result.drives[38].type == """unknown""", "Died on +.drives[38].type"
    assert result.drives[37].status == """available""", "Died on +.drives[37].status"
    assert result.drives[37].slot == 1, "Died on +.drives[37].slot"
    assert result.drives[37].capacity == 240057409536, "Died on +.drives[37].capacity"
    assert result.drives[37].node_id == 1, "Died on +.drives[37].node_id"
    assert result.drives[37].drive_id == 2, "Died on +.drives[37].drive_id"
    assert type(result.drives[37].attributes) is dict, "Died on .drives[37].attributes"
    assert result.drives[37].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF703635""", "Died on +.drives[37].serial"
    assert result.drives[37].type == """unknown""", "Died on +.drives[37].type"
    assert result.drives[36].status == """available""", "Died on +.drives[36].status"
    assert result.drives[36].slot == 2, "Died on +.drives[36].slot"
    assert result.drives[36].capacity == 240057409536, "Died on +.drives[36].capacity"
    assert result.drives[36].node_id == 1, "Died on +.drives[36].node_id"
    assert result.drives[36].drive_id == 3, "Died on +.drives[36].drive_id"
    assert type(result.drives[36].attributes) is dict, "Died on .drives[36].attributes"
    assert result.drives[36].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF702025""", "Died on +.drives[36].serial"
    assert result.drives[36].type == """unknown""", "Died on +.drives[36].type"
    assert result.drives[35].status == """available""", "Died on +.drives[35].status"
    assert result.drives[35].slot == 8, "Died on +.drives[35].slot"
    assert result.drives[35].capacity == 240057409536, "Died on +.drives[35].capacity"
    assert result.drives[35].node_id == 3, "Died on +.drives[35].node_id"
    assert result.drives[35].drive_id == 29, "Died on +.drives[35].drive_id"
    assert type(result.drives[35].attributes) is dict, "Died on .drives[35].attributes"
    assert result.drives[35].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF700782""", "Died on +.drives[35].serial"
    assert result.drives[35].type == """unknown""", "Died on +.drives[35].type"
    assert result.drives[34].status == """available""", "Died on +.drives[34].status"
    assert result.drives[34].slot == 7, "Died on +.drives[34].slot"
    assert result.drives[34].capacity == 240057409536, "Died on +.drives[34].capacity"
    assert result.drives[34].node_id == 3, "Died on +.drives[34].node_id"
    assert result.drives[34].drive_id == 28, "Died on +.drives[34].drive_id"
    assert type(result.drives[34].attributes) is dict, "Died on .drives[34].attributes"
    assert result.drives[34].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF701015""", "Died on +.drives[34].serial"
    assert result.drives[34].type == """unknown""", "Died on +.drives[34].type"
    assert result.drives[33].status == """available""", "Died on +.drives[33].status"
    assert result.drives[33].slot == 6, "Died on +.drives[33].slot"
    assert result.drives[33].capacity == 240057409536, "Died on +.drives[33].capacity"
    assert result.drives[33].node_id == 3, "Died on +.drives[33].node_id"
    assert result.drives[33].drive_id == 27, "Died on +.drives[33].drive_id"
    assert type(result.drives[33].attributes) is dict, "Died on .drives[33].attributes"
    assert result.drives[33].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF701007""", "Died on +.drives[33].serial"
    assert result.drives[33].type == """unknown""", "Died on +.drives[33].type"
    assert result.drives[32].status == """available""", "Died on +.drives[32].status"
    assert result.drives[32].slot == 5, "Died on +.drives[32].slot"
    assert result.drives[32].capacity == 240057409536, "Died on +.drives[32].capacity"
    assert result.drives[32].node_id == 3, "Died on +.drives[32].node_id"
    assert result.drives[32].drive_id == 26, "Died on +.drives[32].drive_id"
    assert type(result.drives[32].attributes) is dict, "Died on .drives[32].attributes"
    assert result.drives[32].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF700765""", "Died on +.drives[32].serial"
    assert result.drives[32].type == """unknown""", "Died on +.drives[32].type"
    assert result.drives[31].status == """available""", "Died on +.drives[31].status"
    assert result.drives[31].slot == 4, "Died on +.drives[31].slot"
    assert result.drives[31].capacity == 240057409536, "Died on +.drives[31].capacity"
    assert result.drives[31].node_id == 3, "Died on +.drives[31].node_id"
    assert result.drives[31].drive_id == 25, "Died on +.drives[31].drive_id"
    assert type(result.drives[31].attributes) is dict, "Died on .drives[31].attributes"
    assert result.drives[31].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF700777""", "Died on +.drives[31].serial"
    assert result.drives[31].type == """unknown""", "Died on +.drives[31].type"
    assert result.drives[30].status == """available""", "Died on +.drives[30].status"
    assert result.drives[30].slot == 3, "Died on +.drives[30].slot"
    assert result.drives[30].capacity == 240057409536, "Died on +.drives[30].capacity"
    assert result.drives[30].node_id == 3, "Died on +.drives[30].node_id"
    assert result.drives[30].drive_id == 24, "Died on +.drives[30].drive_id"
    assert type(result.drives[30].attributes) is dict, "Died on .drives[30].attributes"
    assert result.drives[30].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF700766""", "Died on +.drives[30].serial"
    assert result.drives[30].type == """unknown""", "Died on +.drives[30].type"
    assert result.drives[29].status == """available""", "Died on +.drives[29].status"
    assert result.drives[29].slot == 2, "Died on +.drives[29].slot"
    assert result.drives[29].capacity == 240057409536, "Died on +.drives[29].capacity"
    assert result.drives[29].node_id == 3, "Died on +.drives[29].node_id"
    assert result.drives[29].drive_id == 23, "Died on +.drives[29].drive_id"
    assert type(result.drives[29].attributes) is dict, "Died on .drives[29].attributes"
    assert result.drives[29].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF700760""", "Died on +.drives[29].serial"
    assert result.drives[29].type == """unknown""", "Died on +.drives[29].type"
    assert result.drives[28].status == """available""", "Died on +.drives[28].status"
    assert result.drives[28].slot == 1, "Died on +.drives[28].slot"
    assert result.drives[28].capacity == 240057409536, "Died on +.drives[28].capacity"
    assert result.drives[28].node_id == 3, "Died on +.drives[28].node_id"
    assert result.drives[28].drive_id == 22, "Died on +.drives[28].drive_id"
    assert type(result.drives[28].attributes) is dict, "Died on .drives[28].attributes"
    assert result.drives[28].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF700771""", "Died on +.drives[28].serial"
    assert result.drives[28].type == """unknown""", "Died on +.drives[28].type"
    assert result.drives[27].status == """available""", "Died on +.drives[27].status"
    assert result.drives[27].slot == 5, "Died on +.drives[27].slot"
    assert result.drives[27].capacity == 240057409536, "Died on +.drives[27].capacity"
    assert result.drives[27].node_id == 5, "Died on +.drives[27].node_id"
    assert result.drives[27].drive_id == 46, "Died on +.drives[27].drive_id"
    assert type(result.drives[27].attributes) is dict, "Died on .drives[27].attributes"
    assert result.drives[27].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NWAG600406""", "Died on +.drives[27].serial"
    assert result.drives[27].type == """unknown""", "Died on +.drives[27].type"
    assert result.drives[26].status == """available""", "Died on +.drives[26].status"
    assert result.drives[26].slot == 6, "Died on +.drives[26].slot"
    assert result.drives[26].capacity == 240057409536, "Died on +.drives[26].capacity"
    assert result.drives[26].node_id == 5, "Died on +.drives[26].node_id"
    assert result.drives[26].drive_id == 47, "Died on +.drives[26].drive_id"
    assert type(result.drives[26].attributes) is dict, "Died on .drives[26].attributes"
    assert result.drives[26].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NWAG600409""", "Died on +.drives[26].serial"
    assert result.drives[26].type == """unknown""", "Died on +.drives[26].type"
    assert result.drives[25].status == """available""", "Died on +.drives[25].status"
    assert result.drives[25].slot == 3, "Died on +.drives[25].slot"
    assert result.drives[25].capacity == 240057409536, "Died on +.drives[25].capacity"
    assert result.drives[25].node_id == 5, "Died on +.drives[25].node_id"
    assert result.drives[25].drive_id == 44, "Died on +.drives[25].drive_id"
    assert type(result.drives[25].attributes) is dict, "Died on .drives[25].attributes"
    assert result.drives[25].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NWAG600553""", "Died on +.drives[25].serial"
    assert result.drives[25].type == """unknown""", "Died on +.drives[25].type"
    assert result.drives[24].status == """available""", "Died on +.drives[24].status"
    assert result.drives[24].slot == 4, "Died on +.drives[24].slot"
    assert result.drives[24].capacity == 240057409536, "Died on +.drives[24].capacity"
    assert result.drives[24].node_id == 5, "Died on +.drives[24].node_id"
    assert result.drives[24].drive_id == 45, "Died on +.drives[24].drive_id"
    assert type(result.drives[24].attributes) is dict, "Died on .drives[24].attributes"
    assert result.drives[24].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NWAG600626""", "Died on +.drives[24].serial"
    assert result.drives[24].type == """unknown""", "Died on +.drives[24].type"
    assert result.drives[23].status == """available""", "Died on +.drives[23].status"
    assert result.drives[23].slot == 7, "Died on +.drives[23].slot"
    assert result.drives[23].capacity == 240057409536, "Died on +.drives[23].capacity"
    assert result.drives[23].node_id == 5, "Died on +.drives[23].node_id"
    assert result.drives[23].drive_id == 48, "Died on +.drives[23].drive_id"
    assert type(result.drives[23].attributes) is dict, "Died on .drives[23].attributes"
    assert result.drives[23].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NWAG600615""", "Died on +.drives[23].serial"
    assert result.drives[23].type == """unknown""", "Died on +.drives[23].type"
    assert result.drives[22].status == """available""", "Died on +.drives[22].status"
    assert result.drives[22].slot == 8, "Died on +.drives[22].slot"
    assert result.drives[22].capacity == 240057409536, "Died on +.drives[22].capacity"
    assert result.drives[22].node_id == 5, "Died on +.drives[22].node_id"
    assert result.drives[22].drive_id == 49, "Died on +.drives[22].drive_id"
    assert type(result.drives[22].attributes) is dict, "Died on .drives[22].attributes"
    assert result.drives[22].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NWAG600554""", "Died on +.drives[22].serial"
    assert result.drives[22].type == """unknown""", "Died on +.drives[22].type"
    assert result.drives[21].status == """available""", "Died on +.drives[21].status"
    assert result.drives[21].slot == 9, "Died on +.drives[21].slot"
    assert result.drives[21].capacity == 240057409536, "Died on +.drives[21].capacity"
    assert result.drives[21].node_id == 2, "Died on +.drives[21].node_id"
    assert result.drives[21].drive_id == 40, "Died on +.drives[21].drive_id"
    assert type(result.drives[21].attributes) is dict, "Died on .drives[21].attributes"
    assert result.drives[21].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF701978""", "Died on +.drives[21].serial"
    assert result.drives[21].type == """unknown""", "Died on +.drives[21].type"
    assert result.drives[20].status == """available""", "Died on +.drives[20].status"
    assert result.drives[20].slot == 0, "Died on +.drives[20].slot"
    assert result.drives[20].capacity == 240057409536, "Died on +.drives[20].capacity"
    assert result.drives[20].node_id == 5, "Died on +.drives[20].node_id"
    assert result.drives[20].drive_id == 41, "Died on +.drives[20].drive_id"
    assert type(result.drives[20].attributes) is dict, "Died on .drives[20].attributes"
    assert result.drives[20].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NWAG600411""", "Died on +.drives[20].serial"
    assert result.drives[20].type == """unknown""", "Died on +.drives[20].type"
    assert result.drives[19].status == """available""", "Died on +.drives[19].status"
    assert result.drives[19].slot == 1, "Died on +.drives[19].slot"
    assert result.drives[19].capacity == 240057409536, "Died on +.drives[19].capacity"
    assert result.drives[19].node_id == 5, "Died on +.drives[19].node_id"
    assert result.drives[19].drive_id == 42, "Died on +.drives[19].drive_id"
    assert type(result.drives[19].attributes) is dict, "Died on .drives[19].attributes"
    assert result.drives[19].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NWAG600567""", "Died on +.drives[19].serial"
    assert result.drives[19].type == """unknown""", "Died on +.drives[19].type"
    assert result.drives[18].status == """available""", "Died on +.drives[18].status"
    assert result.drives[18].slot == 2, "Died on +.drives[18].slot"
    assert result.drives[18].capacity == 240057409536, "Died on +.drives[18].capacity"
    assert result.drives[18].node_id == 5, "Died on +.drives[18].node_id"
    assert result.drives[18].drive_id == 43, "Died on +.drives[18].drive_id"
    assert type(result.drives[18].attributes) is dict, "Died on .drives[18].attributes"
    assert result.drives[18].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NWAG600552""", "Died on +.drives[18].serial"
    assert result.drives[18].type == """unknown""", "Died on +.drives[18].type"
    assert result.drives[17].status == """available""", "Died on +.drives[17].status"
    assert result.drives[17].slot == 9, "Died on +.drives[17].slot"
    assert result.drives[17].capacity == 240057409536, "Died on +.drives[17].capacity"
    assert result.drives[17].node_id == 4, "Died on +.drives[17].node_id"
    assert result.drives[17].drive_id == 20, "Died on +.drives[17].drive_id"
    assert type(result.drives[17].attributes) is dict, "Died on .drives[17].attributes"
    assert result.drives[17].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF800266""", "Died on +.drives[17].serial"
    assert result.drives[17].type == """unknown""", "Died on +.drives[17].type"
    assert result.drives[16].status == """available""", "Died on +.drives[16].status"
    assert result.drives[16].slot == 0, "Died on +.drives[16].slot"
    assert result.drives[16].capacity == 240057409536, "Died on +.drives[16].capacity"
    assert result.drives[16].node_id == 3, "Died on +.drives[16].node_id"
    assert result.drives[16].drive_id == 21, "Died on +.drives[16].drive_id"
    assert type(result.drives[16].attributes) is dict, "Died on .drives[16].attributes"
    assert result.drives[16].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF700770""", "Died on +.drives[16].serial"
    assert result.drives[16].type == """unknown""", "Died on +.drives[16].type"
    assert result.drives[15].status == """available""", "Died on +.drives[15].status"
    assert result.drives[15].slot == 1, "Died on +.drives[15].slot"
    assert result.drives[15].capacity == 240057409536, "Died on +.drives[15].capacity"
    assert result.drives[15].node_id == 4, "Died on +.drives[15].node_id"
    assert result.drives[15].drive_id == 12, "Died on +.drives[15].drive_id"
    assert type(result.drives[15].attributes) is dict, "Died on .drives[15].attributes"
    assert result.drives[15].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF800162""", "Died on +.drives[15].serial"
    assert result.drives[15].type == """unknown""", "Died on +.drives[15].type"
    assert result.drives[14].status == """available""", "Died on +.drives[14].status"
    assert result.drives[14].slot == 7, "Died on +.drives[14].slot"
    assert result.drives[14].capacity == 240057409536, "Died on +.drives[14].capacity"
    assert result.drives[14].node_id == 2, "Died on +.drives[14].node_id"
    assert result.drives[14].drive_id == 38, "Died on +.drives[14].drive_id"
    assert type(result.drives[14].attributes) is dict, "Died on .drives[14].attributes"
    assert result.drives[14].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF702031""", "Died on +.drives[14].serial"
    assert result.drives[14].type == """unknown""", "Died on +.drives[14].type"
    assert result.drives[13].status == """available""", "Died on +.drives[13].status"
    assert result.drives[13].slot == 0, "Died on +.drives[13].slot"
    assert result.drives[13].capacity == 240057409536, "Died on +.drives[13].capacity"
    assert result.drives[13].node_id == 4, "Died on +.drives[13].node_id"
    assert result.drives[13].drive_id == 11, "Died on +.drives[13].drive_id"
    assert type(result.drives[13].attributes) is dict, "Died on .drives[13].attributes"
    assert result.drives[13].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF800265""", "Died on +.drives[13].serial"
    assert result.drives[13].type == """unknown""", "Died on +.drives[13].type"
    assert result.drives[12].status == """available""", "Died on +.drives[12].status"
    assert result.drives[12].slot == 6, "Died on +.drives[12].slot"
    assert result.drives[12].capacity == 240057409536, "Died on +.drives[12].capacity"
    assert result.drives[12].node_id == 2, "Died on +.drives[12].node_id"
    assert result.drives[12].drive_id == 37, "Died on +.drives[12].drive_id"
    assert type(result.drives[12].attributes) is dict, "Died on .drives[12].attributes"
    assert result.drives[12].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF702283""", "Died on +.drives[12].serial"
    assert result.drives[12].type == """unknown""", "Died on +.drives[12].type"
    assert result.drives[11].status == """available""", "Died on +.drives[11].status"
    assert result.drives[11].slot == 3, "Died on +.drives[11].slot"
    assert result.drives[11].capacity == 240057409536, "Died on +.drives[11].capacity"
    assert result.drives[11].node_id == 4, "Died on +.drives[11].node_id"
    assert result.drives[11].drive_id == 14, "Died on +.drives[11].drive_id"
    assert type(result.drives[11].attributes) is dict, "Died on .drives[11].attributes"
    assert result.drives[11].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF800115""", "Died on +.drives[11].serial"
    assert result.drives[11].type == """unknown""", "Died on +.drives[11].type"
    assert result.drives[10].status == """available""", "Died on +.drives[10].status"
    assert result.drives[10].slot == 2, "Died on +.drives[10].slot"
    assert result.drives[10].capacity == 240057409536, "Died on +.drives[10].capacity"
    assert result.drives[10].node_id == 4, "Died on +.drives[10].node_id"
    assert result.drives[10].drive_id == 13, "Died on +.drives[10].drive_id"
    assert type(result.drives[10].attributes) is dict, "Died on .drives[10].attributes"
    assert result.drives[10].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF800268""", "Died on +.drives[10].serial"
    assert result.drives[10].type == """unknown""", "Died on +.drives[10].type"
    assert result.drives[9].status == """available""", "Died on +.drives[9].status"
    assert result.drives[9].slot == 8, "Died on +.drives[9].slot"
    assert result.drives[9].capacity == 240057409536, "Died on +.drives[9].capacity"
    assert result.drives[9].node_id == 2, "Died on +.drives[9].node_id"
    assert result.drives[9].drive_id == 39, "Died on +.drives[9].drive_id"
    assert type(result.drives[9].attributes) is dict, "Died on .drives[9].attributes"
    assert result.drives[9].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF701976""", "Died on +.drives[9].serial"
    assert result.drives[9].type == """unknown""", "Died on +.drives[9].type"
    assert result.drives[8].status == """available""", "Died on +.drives[8].status"
    assert result.drives[8].slot == 5, "Died on +.drives[8].slot"
    assert result.drives[8].capacity == 240057409536, "Died on +.drives[8].capacity"
    assert result.drives[8].node_id == 4, "Died on +.drives[8].node_id"
    assert result.drives[8].drive_id == 16, "Died on +.drives[8].drive_id"
    assert type(result.drives[8].attributes) is dict, "Died on .drives[8].attributes"
    assert result.drives[8].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF800133""", "Died on +.drives[8].serial"
    assert result.drives[8].type == """unknown""", "Died on +.drives[8].type"
    assert result.drives[7].status == """available""", "Died on +.drives[7].status"
    assert result.drives[7].slot == 3, "Died on +.drives[7].slot"
    assert result.drives[7].capacity == 240057409536, "Died on +.drives[7].capacity"
    assert result.drives[7].node_id == 2, "Died on +.drives[7].node_id"
    assert result.drives[7].drive_id == 34, "Died on +.drives[7].drive_id"
    assert type(result.drives[7].attributes) is dict, "Died on .drives[7].attributes"
    assert result.drives[7].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF701943""", "Died on +.drives[7].serial"
    assert result.drives[7].type == """unknown""", "Died on +.drives[7].type"
    assert result.drives[6].status == """available""", "Died on +.drives[6].status"
    assert result.drives[6].slot == 4, "Died on +.drives[6].slot"
    assert result.drives[6].capacity == 240057409536, "Died on +.drives[6].capacity"
    assert result.drives[6].node_id == 4, "Died on +.drives[6].node_id"
    assert result.drives[6].drive_id == 15, "Died on +.drives[6].drive_id"
    assert type(result.drives[6].attributes) is dict, "Died on .drives[6].attributes"
    assert result.drives[6].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF800276""", "Died on +.drives[6].serial"
    assert result.drives[6].type == """unknown""", "Died on +.drives[6].type"
    assert result.drives[5].status == """available""", "Died on +.drives[5].status"
    assert result.drives[5].slot == 2, "Died on +.drives[5].slot"
    assert result.drives[5].capacity == 240057409536, "Died on +.drives[5].capacity"
    assert result.drives[5].node_id == 2, "Died on +.drives[5].node_id"
    assert result.drives[5].drive_id == 33, "Died on +.drives[5].drive_id"
    assert type(result.drives[5].attributes) is dict, "Died on .drives[5].attributes"
    assert result.drives[5].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF703611""", "Died on +.drives[5].serial"
    assert result.drives[5].type == """unknown""", "Died on +.drives[5].type"
    assert result.drives[4].status == """available""", "Died on +.drives[4].status"
    assert result.drives[4].slot == 7, "Died on +.drives[4].slot"
    assert result.drives[4].capacity == 240057409536, "Died on +.drives[4].capacity"
    assert result.drives[4].node_id == 4, "Died on +.drives[4].node_id"
    assert result.drives[4].drive_id == 18, "Died on +.drives[4].drive_id"
    assert type(result.drives[4].attributes) is dict, "Died on .drives[4].attributes"
    assert result.drives[4].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF800342""", "Died on +.drives[4].serial"
    assert result.drives[4].type == """unknown""", "Died on +.drives[4].type"
    assert result.drives[3].status == """available""", "Died on +.drives[3].status"
    assert result.drives[3].slot == 5, "Died on +.drives[3].slot"
    assert result.drives[3].capacity == 240057409536, "Died on +.drives[3].capacity"
    assert result.drives[3].node_id == 2, "Died on +.drives[3].node_id"
    assert result.drives[3].drive_id == 36, "Died on +.drives[3].drive_id"
    assert type(result.drives[3].attributes) is dict, "Died on .drives[3].attributes"
    assert result.drives[3].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF701971""", "Died on +.drives[3].serial"
    assert result.drives[3].type == """unknown""", "Died on +.drives[3].type"
    assert result.drives[2].status == """available""", "Died on +.drives[2].status"
    assert result.drives[2].slot == 6, "Died on +.drives[2].slot"
    assert result.drives[2].capacity == 240057409536, "Died on +.drives[2].capacity"
    assert result.drives[2].node_id == 4, "Died on +.drives[2].node_id"
    assert result.drives[2].drive_id == 17, "Died on +.drives[2].drive_id"
    assert type(result.drives[2].attributes) is dict, "Died on .drives[2].attributes"
    assert result.drives[2].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF800155""", "Died on +.drives[2].serial"
    assert result.drives[2].type == """unknown""", "Died on +.drives[2].type"
    assert result.drives[1].status == """available""", "Died on +.drives[1].status"
    assert result.drives[1].slot == 4, "Died on +.drives[1].slot"
    assert result.drives[1].capacity == 240057409536, "Died on +.drives[1].capacity"
    assert result.drives[1].node_id == 2, "Died on +.drives[1].node_id"
    assert result.drives[1].drive_id == 35, "Died on +.drives[1].drive_id"
    assert type(result.drives[1].attributes) is dict, "Died on .drives[1].attributes"
    assert result.drives[1].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF702295""", "Died on +.drives[1].serial"
    assert result.drives[1].type == """unknown""", "Died on +.drives[1].type"
    assert result.drives[0].status == """available""", "Died on +.drives[0].status"
    assert result.drives[0].slot == 8, "Died on +.drives[0].slot"
    assert result.drives[0].capacity == 240057409536, "Died on +.drives[0].capacity"
    assert result.drives[0].node_id == 4, "Died on +.drives[0].node_id"
    assert result.drives[0].drive_id == 19, "Died on +.drives[0].drive_id"
    assert type(result.drives[0].attributes) is dict, "Died on .drives[0].attributes"
    assert result.drives[0].serial == """scsi-SATA_SAMSUNG_MZ7GE24S1M9NYAF800269""", "Died on +.drives[0].serial"
    assert result.drives[0].type == """unknown""", "Died on +.drives[0].type"

def test_list_drives_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListDrives_v8.7_0)

    
    result = ef.list_drives()
    assert result.drives[49].status == """available""", "Died on +.drives[49].status"
    assert result.drives[49].slot == 9, "Died on +.drives[49].slot"
    assert result.drives[49].capacity == 960197124096, "Died on +.drives[49].capacity"
    assert result.drives[49].node_id == 5, "Died on +.drives[49].node_id"
    assert result.drives[49].drive_id == 50, "Died on +.drives[49].drive_id"
    assert type(result.drives[49].attributes) is dict, "Died on .drives[49].attributes"
    assert result.drives[49].serial == """scsi-SATA_SDLFNCAR-960G-1_00009AE1""", "Died on +.drives[49].serial"
    assert result.drives[49].type == """unknown""", "Died on +.drives[49].type"
    assert result.drives[48].status == """available""", "Died on +.drives[48].status"
    assert result.drives[48].slot == 7, "Died on +.drives[48].slot"
    assert result.drives[48].capacity == 960197124096, "Died on +.drives[48].capacity"
    assert result.drives[48].node_id == 1, "Died on +.drives[48].node_id"
    assert result.drives[48].drive_id == 8, "Died on +.drives[48].drive_id"
    assert type(result.drives[48].attributes) is dict, "Died on .drives[48].attributes"
    assert result.drives[48].serial == """scsi-SATA_SAMSUNG_MZ7LM96S2TZNX0HA00167""", "Died on +.drives[48].serial"
    assert result.drives[48].type == """unknown""", "Died on +.drives[48].type"
    assert result.drives[47].status == """available""", "Died on +.drives[47].status"
    assert result.drives[47].slot == 8, "Died on +.drives[47].slot"
    assert result.drives[47].capacity == 960197124096, "Died on +.drives[47].capacity"
    assert result.drives[47].node_id == 1, "Died on +.drives[47].node_id"
    assert result.drives[47].drive_id == 9, "Died on +.drives[47].drive_id"
    assert type(result.drives[47].attributes) is dict, "Died on .drives[47].attributes"
    assert result.drives[47].serial == """scsi-SATA_SAMSUNG_MZ7LM96S2TZNX0HA00157""", "Died on +.drives[47].serial"
    assert result.drives[47].type == """unknown""", "Died on +.drives[47].type"
    assert result.drives[46].status == """available""", "Died on +.drives[46].status"
    assert result.drives[46].slot == 3, "Died on +.drives[46].slot"
    assert result.drives[46].capacity == 960197124096, "Died on +.drives[46].capacity"
    assert result.drives[46].node_id == 1, "Died on +.drives[46].node_id"
    assert result.drives[46].drive_id == 4, "Died on +.drives[46].drive_id"
    assert type(result.drives[46].attributes) is dict, "Died on .drives[46].attributes"
    assert result.drives[46].serial == """scsi-SATA_SAMSUNG_MZ7LM96S2TZNX0HA00178""", "Died on +.drives[46].serial"
    assert result.drives[46].type == """unknown""", "Died on +.drives[46].type"
    assert result.drives[45].status == """available""", "Died on +.drives[45].status"
    assert result.drives[45].slot == 6, "Died on +.drives[45].slot"
    assert result.drives[45].capacity == 960197124096, "Died on +.drives[45].capacity"
    assert result.drives[45].node_id == 3, "Died on +.drives[45].node_id"
    assert result.drives[45].drive_id == 31, "Died on +.drives[45].drive_id"
    assert type(result.drives[45].attributes) is dict, "Died on .drives[45].attributes"
    assert result.drives[45].serial == """scsi-SATA_SAMSUNG_MZ7LM96S1YHNXAG801789""", "Died on +.drives[45].serial"
    assert result.drives[45].type == """unknown""", "Died on +.drives[45].type"
    assert result.drives[44].status == """available""", "Died on +.drives[44].status"
    assert result.drives[44].slot == 4, "Died on +.drives[44].slot"
    assert result.drives[44].capacity == 960197124096, "Died on +.drives[44].capacity"
    assert result.drives[44].node_id == 1, "Died on +.drives[44].node_id"
    assert result.drives[44].drive_id == 5, "Died on +.drives[44].drive_id"
    assert type(result.drives[44].attributes) is dict, "Died on .drives[44].attributes"
    assert result.drives[44].serial == """scsi-SATA_SAMSUNG_MZ7LM96S2TZNX0HA00179""", "Died on +.drives[44].serial"
    assert result.drives[44].type == """unknown""", "Died on +.drives[44].type"
    assert result.drives[43].status == """available""", "Died on +.drives[43].status"
    assert result.drives[43].slot == 4, "Died on +.drives[43].slot"
    assert result.drives[43].capacity == 960197124096, "Died on +.drives[43].capacity"
    assert result.drives[43].node_id == 4, "Died on +.drives[43].node_id"
    assert result.drives[43].drive_id == 32, "Died on +.drives[43].drive_id"
    assert type(result.drives[43].attributes) is dict, "Died on .drives[43].attributes"
    assert result.drives[43].serial == """scsi-SATA_SAMSUNG_MZ7LM96S1YHNYAG400305""", "Died on +.drives[43].serial"
    assert result.drives[43].type == """unknown""", "Died on +.drives[43].type"
    assert result.drives[42].status == """available""", "Died on +.drives[42].status"
    assert result.drives[42].slot == 5, "Died on +.drives[42].slot"
    assert result.drives[42].capacity == 960197124096, "Died on +.drives[42].capacity"
    assert result.drives[42].node_id == 1, "Died on +.drives[42].node_id"
    assert result.drives[42].drive_id == 6, "Died on +.drives[42].drive_id"
    assert type(result.drives[42].attributes) is dict, "Died on .drives[42].attributes"
    assert result.drives[42].serial == """scsi-SATA_SAMSUNG_MZ7LM96S2TZNX0HA00192""", "Died on +.drives[42].serial"
    assert result.drives[42].type == """unknown""", "Died on +.drives[42].type"
    assert result.drives[41].status == """available""", "Died on +.drives[41].status"
    assert result.drives[41].slot == 6, "Died on +.drives[41].slot"
    assert result.drives[41].capacity == 960197124096, "Died on +.drives[41].capacity"
    assert result.drives[41].node_id == 1, "Died on +.drives[41].node_id"
    assert result.drives[41].drive_id == 7, "Died on +.drives[41].drive_id"
    assert type(result.drives[41].attributes) is dict, "Died on .drives[41].attributes"
    assert result.drives[41].serial == """scsi-SATA_SAMSUNG_MZ7LM96S2TZNX0HA00163""", "Died on +.drives[41].serial"
    assert result.drives[41].type == """unknown""", "Died on +.drives[41].type"
    assert result.drives[40].status == """available""", "Died on +.drives[40].status"
    assert result.drives[40].slot == 3, "Died on +.drives[40].slot"
    assert result.drives[40].capacity == 960197124096, "Died on +.drives[40].capacity"
    assert result.drives[40].node_id == 4, "Died on +.drives[40].node_id"
    assert result.drives[40].drive_id == 30, "Died on +.drives[40].drive_id"
    assert type(result.drives[40].attributes) is dict, "Died on .drives[40].attributes"
    assert result.drives[40].serial == """scsi-SATA_SAMSUNG_MZ7LM96S1YHNYAG400275""", "Died on +.drives[40].serial"
    assert result.drives[40].type == """unknown""", "Died on +.drives[40].type"
    assert result.drives[39].status == """available""", "Died on +.drives[39].status"
    assert result.drives[39].slot == 0, "Died on +.drives[39].slot"
    assert result.drives[39].capacity == 960197124096, "Died on +.drives[39].capacity"
    assert result.drives[39].node_id == 1, "Died on +.drives[39].node_id"
    assert result.drives[39].drive_id == 1, "Died on +.drives[39].drive_id"
    assert type(result.drives[39].attributes) is dict, "Died on .drives[39].attributes"
    assert result.drives[39].serial == """scsi-SATA_SAMSUNG_MZ7LM96S2TZNX0HA00173""", "Died on +.drives[39].serial"
    assert result.drives[39].type == """unknown""", "Died on +.drives[39].type"
    assert result.drives[38].status == """available""", "Died on +.drives[38].status"
    assert result.drives[38].slot == 9, "Died on +.drives[38].slot"
    assert result.drives[38].capacity == 960197124096, "Died on +.drives[38].capacity"
    assert result.drives[38].node_id == 1, "Died on +.drives[38].node_id"
    assert result.drives[38].drive_id == 10, "Died on +.drives[38].drive_id"
    assert type(result.drives[38].attributes) is dict, "Died on .drives[38].attributes"
    assert result.drives[38].serial == """scsi-SATA_SAMSUNG_MZ7LM96S2TZNX0HA00164""", "Died on +.drives[38].serial"
    assert result.drives[38].type == """unknown""", "Died on +.drives[38].type"
    assert result.drives[37].status == """available""", "Died on +.drives[37].status"
    assert result.drives[37].slot == 1, "Died on +.drives[37].slot"
    assert result.drives[37].capacity == 960197124096, "Died on +.drives[37].capacity"
    assert result.drives[37].node_id == 1, "Died on +.drives[37].node_id"
    assert result.drives[37].drive_id == 2, "Died on +.drives[37].drive_id"
    assert type(result.drives[37].attributes) is dict, "Died on .drives[37].attributes"
    assert result.drives[37].serial == """scsi-SATA_SAMSUNG_MZ7LM96S2TZNX0HA00165""", "Died on +.drives[37].serial"
    assert result.drives[37].type == """unknown""", "Died on +.drives[37].type"
    assert result.drives[36].status == """available""", "Died on +.drives[36].status"
    assert result.drives[36].slot == 2, "Died on +.drives[36].slot"
    assert result.drives[36].capacity == 960197124096, "Died on +.drives[36].capacity"
    assert result.drives[36].node_id == 1, "Died on +.drives[36].node_id"
    assert result.drives[36].drive_id == 3, "Died on +.drives[36].drive_id"
    assert type(result.drives[36].attributes) is dict, "Died on .drives[36].attributes"
    assert result.drives[36].serial == """scsi-SATA_SAMSUNG_MZ7LM96S2TZNX0HA00180""", "Died on +.drives[36].serial"
    assert result.drives[36].type == """unknown""", "Died on +.drives[36].type"
    assert result.drives[35].status == """available""", "Died on +.drives[35].status"
    assert result.drives[35].slot == 5, "Died on +.drives[35].slot"
    assert result.drives[35].capacity == 960197124096, "Died on +.drives[35].capacity"
    assert result.drives[35].node_id == 3, "Died on +.drives[35].node_id"
    assert result.drives[35].drive_id == 29, "Died on +.drives[35].drive_id"
    assert type(result.drives[35].attributes) is dict, "Died on .drives[35].attributes"
    assert result.drives[35].serial == """scsi-SATA_SAMSUNG_MZ7LM96S2E3NXAGC00422""", "Died on +.drives[35].serial"
    assert result.drives[35].type == """unknown""", "Died on +.drives[35].type"
    assert result.drives[34].status == """available""", "Died on +.drives[34].status"
    assert result.drives[34].slot == 2, "Died on +.drives[34].slot"
    assert result.drives[34].capacity == 960197124096, "Died on +.drives[34].capacity"
    assert result.drives[34].node_id == 4, "Died on +.drives[34].node_id"
    assert result.drives[34].drive_id == 28, "Died on +.drives[34].drive_id"
    assert type(result.drives[34].attributes) is dict, "Died on .drives[34].attributes"
    assert result.drives[34].serial == """scsi-SATA_SAMSUNG_MZ7LM96S1YHNYAG400281""", "Died on +.drives[34].serial"
    assert result.drives[34].type == """unknown""", "Died on +.drives[34].type"
    assert result.drives[33].status == """available""", "Died on +.drives[33].status"
    assert result.drives[33].slot == 4, "Died on +.drives[33].slot"
    assert result.drives[33].capacity == 960197124096, "Died on +.drives[33].capacity"
    assert result.drives[33].node_id == 3, "Died on +.drives[33].node_id"
    assert result.drives[33].drive_id == 27, "Died on +.drives[33].drive_id"
    assert type(result.drives[33].attributes) is dict, "Died on .drives[33].attributes"
    assert result.drives[33].serial == """scsi-SATA_SAMSUNG_MZ7LM96S1YHNXAG801657""", "Died on +.drives[33].serial"
    assert result.drives[33].type == """unknown""", "Died on +.drives[33].type"
    assert result.drives[32].status == """available""", "Died on +.drives[32].status"
    assert result.drives[32].slot == 1, "Died on +.drives[32].slot"
    assert result.drives[32].capacity == 960197124096, "Died on +.drives[32].capacity"
    assert result.drives[32].node_id == 4, "Died on +.drives[32].node_id"
    assert result.drives[32].drive_id == 26, "Died on +.drives[32].drive_id"
    assert type(result.drives[32].attributes) is dict, "Died on .drives[32].attributes"
    assert result.drives[32].serial == """scsi-SATA_SAMSUNG_MZ7LM96S1YHNYAG400197""", "Died on +.drives[32].serial"
    assert result.drives[32].type == """unknown""", "Died on +.drives[32].type"
    assert result.drives[31].status == """available""", "Died on +.drives[31].status"
    assert result.drives[31].slot == 3, "Died on +.drives[31].slot"
    assert result.drives[31].capacity == 960197124096, "Died on +.drives[31].capacity"
    assert result.drives[31].node_id == 3, "Died on +.drives[31].node_id"
    assert result.drives[31].drive_id == 25, "Died on +.drives[31].drive_id"
    assert type(result.drives[31].attributes) is dict, "Died on .drives[31].attributes"
    assert result.drives[31].serial == """scsi-SATA_SAMSUNG_MZ7LM96S1YHNXAG801787""", "Died on +.drives[31].serial"
    assert result.drives[31].type == """unknown""", "Died on +.drives[31].type"
    assert result.drives[30].status == """available""", "Died on +.drives[30].status"
    assert result.drives[30].slot == 0, "Died on +.drives[30].slot"
    assert result.drives[30].capacity == 960197124096, "Died on +.drives[30].capacity"
    assert result.drives[30].node_id == 4, "Died on +.drives[30].node_id"
    assert result.drives[30].drive_id == 24, "Died on +.drives[30].drive_id"
    assert type(result.drives[30].attributes) is dict, "Died on .drives[30].attributes"
    assert result.drives[30].serial == """scsi-SATA_SDLFNCAR-960G-1_00056D1D""", "Died on +.drives[30].serial"
    assert result.drives[30].type == """unknown""", "Died on +.drives[30].type"
    assert result.drives[29].status == """available""", "Died on +.drives[29].status"
    assert result.drives[29].slot == 2, "Died on +.drives[29].slot"
    assert result.drives[29].capacity == 960197124096, "Died on +.drives[29].capacity"
    assert result.drives[29].node_id == 3, "Died on +.drives[29].node_id"
    assert result.drives[29].drive_id == 23, "Died on +.drives[29].drive_id"
    assert type(result.drives[29].attributes) is dict, "Died on .drives[29].attributes"
    assert result.drives[29].serial == """scsi-SATA_SAMSUNG_MZ7LM96S2E3NXAGC00482""", "Died on +.drives[29].serial"
    assert result.drives[29].type == """unknown""", "Died on +.drives[29].type"
    assert result.drives[28].status == """available""", "Died on +.drives[28].status"
    assert result.drives[28].slot == 1, "Died on +.drives[28].slot"
    assert result.drives[28].capacity == 960197124096, "Died on +.drives[28].capacity"
    assert result.drives[28].node_id == 3, "Died on +.drives[28].node_id"
    assert result.drives[28].drive_id == 22, "Died on +.drives[28].drive_id"
    assert type(result.drives[28].attributes) is dict, "Died on .drives[28].attributes"
    assert result.drives[28].serial == """scsi-SATA_SAMSUNG_MZ7LM96S2E3NXAGC00488""", "Died on +.drives[28].serial"
    assert result.drives[28].type == """unknown""", "Died on +.drives[28].type"
    assert result.drives[27].status == """available""", "Died on +.drives[27].status"
    assert result.drives[27].slot == 5, "Died on +.drives[27].slot"
    assert result.drives[27].capacity == 960197124096, "Died on +.drives[27].capacity"
    assert result.drives[27].node_id == 5, "Died on +.drives[27].node_id"
    assert result.drives[27].drive_id == 46, "Died on +.drives[27].drive_id"
    assert type(result.drives[27].attributes) is dict, "Died on .drives[27].attributes"
    assert result.drives[27].serial == """scsi-SATA_SDLFNCAR-960G-1_00009BE5""", "Died on +.drives[27].serial"
    assert result.drives[27].type == """unknown""", "Died on +.drives[27].type"
    assert result.drives[26].status == """available""", "Died on +.drives[26].status"
    assert result.drives[26].slot == 6, "Died on +.drives[26].slot"
    assert result.drives[26].capacity == 960197124096, "Died on +.drives[26].capacity"
    assert result.drives[26].node_id == 5, "Died on +.drives[26].node_id"
    assert result.drives[26].drive_id == 47, "Died on +.drives[26].drive_id"
    assert type(result.drives[26].attributes) is dict, "Died on .drives[26].attributes"
    assert result.drives[26].serial == """scsi-SATA_SDLFNCAR-960G-1_0000D688""", "Died on +.drives[26].serial"
    assert result.drives[26].type == """unknown""", "Died on +.drives[26].type"
    assert result.drives[25].status == """available""", "Died on +.drives[25].status"
    assert result.drives[25].slot == 3, "Died on +.drives[25].slot"
    assert result.drives[25].capacity == 960197124096, "Died on +.drives[25].capacity"
    assert result.drives[25].node_id == 5, "Died on +.drives[25].node_id"
    assert result.drives[25].drive_id == 44, "Died on +.drives[25].drive_id"
    assert type(result.drives[25].attributes) is dict, "Died on .drives[25].attributes"
    assert result.drives[25].serial == """scsi-SATA_SDLFNCAR-960G-1_0000D5B0""", "Died on +.drives[25].serial"
    assert result.drives[25].type == """unknown""", "Died on +.drives[25].type"
    assert result.drives[24].status == """available""", "Died on +.drives[24].status"
    assert result.drives[24].slot == 4, "Died on +.drives[24].slot"
    assert result.drives[24].capacity == 960197124096, "Died on +.drives[24].capacity"
    assert result.drives[24].node_id == 5, "Died on +.drives[24].node_id"
    assert result.drives[24].drive_id == 45, "Died on +.drives[24].drive_id"
    assert type(result.drives[24].attributes) is dict, "Died on .drives[24].attributes"
    assert result.drives[24].serial == """scsi-SATA_SDLFNCAR-960G-1_00009B57""", "Died on +.drives[24].serial"
    assert result.drives[24].type == """unknown""", "Died on +.drives[24].type"
    assert result.drives[23].status == """available""", "Died on +.drives[23].status"
    assert result.drives[23].slot == 7, "Died on +.drives[23].slot"
    assert result.drives[23].capacity == 960197124096, "Died on +.drives[23].capacity"
    assert result.drives[23].node_id == 5, "Died on +.drives[23].node_id"
    assert result.drives[23].drive_id == 48, "Died on +.drives[23].drive_id"
    assert type(result.drives[23].attributes) is dict, "Died on .drives[23].attributes"
    assert result.drives[23].serial == """scsi-SATA_SDLFNCAR-960G-1_0000D4BD""", "Died on +.drives[23].serial"
    assert result.drives[23].type == """unknown""", "Died on +.drives[23].type"
    assert result.drives[22].status == """available""", "Died on +.drives[22].status"
    assert result.drives[22].slot == 8, "Died on +.drives[22].slot"
    assert result.drives[22].capacity == 960197124096, "Died on +.drives[22].capacity"
    assert result.drives[22].node_id == 5, "Died on +.drives[22].node_id"
    assert result.drives[22].drive_id == 49, "Died on +.drives[22].drive_id"
    assert type(result.drives[22].attributes) is dict, "Died on .drives[22].attributes"
    assert result.drives[22].serial == """scsi-SATA_SDLFNCAR-960G-1_00009A3F""", "Died on +.drives[22].serial"
    assert result.drives[22].type == """unknown""", "Died on +.drives[22].type"
    assert result.drives[21].status == """available""", "Died on +.drives[21].status"
    assert result.drives[21].slot == 9, "Died on +.drives[21].slot"
    assert result.drives[21].capacity == 960197124096, "Died on +.drives[21].capacity"
    assert result.drives[21].node_id == 4, "Died on +.drives[21].node_id"
    assert result.drives[21].drive_id == 40, "Died on +.drives[21].drive_id"
    assert type(result.drives[21].attributes) is dict, "Died on .drives[21].attributes"
    assert result.drives[21].serial == """scsi-SATA_SAMSUNG_MZ7LM96S1YHNYAG400196""", "Died on +.drives[21].serial"
    assert result.drives[21].type == """unknown""", "Died on +.drives[21].type"
    assert result.drives[20].status == """available""", "Died on +.drives[20].status"
    assert result.drives[20].slot == 0, "Died on +.drives[20].slot"
    assert result.drives[20].capacity == 960197124096, "Died on +.drives[20].capacity"
    assert result.drives[20].node_id == 5, "Died on +.drives[20].node_id"
    assert result.drives[20].drive_id == 41, "Died on +.drives[20].drive_id"
    assert type(result.drives[20].attributes) is dict, "Died on .drives[20].attributes"
    assert result.drives[20].serial == """scsi-SATA_SDLFNCAR-960G-1_00056DA9""", "Died on +.drives[20].serial"
    assert result.drives[20].type == """unknown""", "Died on +.drives[20].type"
    assert result.drives[19].status == """available""", "Died on +.drives[19].status"
    assert result.drives[19].slot == 1, "Died on +.drives[19].slot"
    assert result.drives[19].capacity == 960197124096, "Died on +.drives[19].capacity"
    assert result.drives[19].node_id == 5, "Died on +.drives[19].node_id"
    assert result.drives[19].drive_id == 42, "Died on +.drives[19].drive_id"
    assert type(result.drives[19].attributes) is dict, "Died on .drives[19].attributes"
    assert result.drives[19].serial == """scsi-SATA_SDLFNCAR-960G-1_00015731""", "Died on +.drives[19].serial"
    assert result.drives[19].type == """unknown""", "Died on +.drives[19].type"
    assert result.drives[18].status == """available""", "Died on +.drives[18].status"
    assert result.drives[18].slot == 2, "Died on +.drives[18].slot"
    assert result.drives[18].capacity == 960197124096, "Died on +.drives[18].capacity"
    assert result.drives[18].node_id == 5, "Died on +.drives[18].node_id"
    assert result.drives[18].drive_id == 43, "Died on +.drives[18].drive_id"
    assert type(result.drives[18].attributes) is dict, "Died on .drives[18].attributes"
    assert result.drives[18].serial == """scsi-SATA_SDLFNCAR-960G-1_00056D8E""", "Died on +.drives[18].serial"
    assert result.drives[18].type == """unknown""", "Died on +.drives[18].type"
    assert result.drives[17].status == """available""", "Died on +.drives[17].status"
    assert result.drives[17].slot == 9, "Died on +.drives[17].slot"
    assert result.drives[17].capacity == 960197124096, "Died on +.drives[17].capacity"
    assert result.drives[17].node_id == 2, "Died on +.drives[17].node_id"
    assert result.drives[17].drive_id == 20, "Died on +.drives[17].drive_id"
    assert type(result.drives[17].attributes) is dict, "Died on .drives[17].attributes"
    assert result.drives[17].serial == """scsi-SATA_TOSHIBA_THNSF89_462S101BTN4V""", "Died on +.drives[17].serial"
    assert result.drives[17].type == """unknown""", "Died on +.drives[17].type"
    assert result.drives[16].status == """available""", "Died on +.drives[16].status"
    assert result.drives[16].slot == 0, "Died on +.drives[16].slot"
    assert result.drives[16].capacity == 960197124096, "Died on +.drives[16].capacity"
    assert result.drives[16].node_id == 3, "Died on +.drives[16].node_id"
    assert result.drives[16].drive_id == 21, "Died on +.drives[16].drive_id"
    assert type(result.drives[16].attributes) is dict, "Died on .drives[16].attributes"
    assert result.drives[16].serial == """scsi-SATA_SAMSUNG_MZ7LM96S2E3NXAGC00479""", "Died on +.drives[16].serial"
    assert result.drives[16].type == """unknown""", "Died on +.drives[16].type"
    assert result.drives[15].status == """available""", "Died on +.drives[15].status"
    assert result.drives[15].slot == 1, "Died on +.drives[15].slot"
    assert result.drives[15].capacity == 960197124096, "Died on +.drives[15].capacity"
    assert result.drives[15].node_id == 2, "Died on +.drives[15].node_id"
    assert result.drives[15].drive_id == 12, "Died on +.drives[15].drive_id"
    assert type(result.drives[15].attributes) is dict, "Died on .drives[15].attributes"
    assert result.drives[15].serial == """scsi-SATA_TOSHIBA_THNSF89_462S100LTN4V""", "Died on +.drives[15].serial"
    assert result.drives[15].type == """unknown""", "Died on +.drives[15].type"
    assert result.drives[14].status == """available""", "Died on +.drives[14].status"
    assert result.drives[14].slot == 7, "Died on +.drives[14].slot"
    assert result.drives[14].capacity == 960197124096, "Died on +.drives[14].capacity"
    assert result.drives[14].node_id == 4, "Died on +.drives[14].node_id"
    assert result.drives[14].drive_id == 38, "Died on +.drives[14].drive_id"
    assert type(result.drives[14].attributes) is dict, "Died on .drives[14].attributes"
    assert result.drives[14].serial == """scsi-SATA_SAMSUNG_MZ7LM96S1YHNYAG400193""", "Died on +.drives[14].serial"
    assert result.drives[14].type == """unknown""", "Died on +.drives[14].type"
    assert result.drives[13].status == """available""", "Died on +.drives[13].status"
    assert result.drives[13].slot == 0, "Died on +.drives[13].slot"
    assert result.drives[13].capacity == 960197124096, "Died on +.drives[13].capacity"
    assert result.drives[13].node_id == 2, "Died on +.drives[13].node_id"
    assert result.drives[13].drive_id == 11, "Died on +.drives[13].drive_id"
    assert type(result.drives[13].attributes) is dict, "Died on .drives[13].attributes"
    assert result.drives[13].serial == """scsi-SATA_TOSHIBA_THNSF89_462S101FTN4V""", "Died on +.drives[13].serial"
    assert result.drives[13].type == """unknown""", "Died on +.drives[13].type"
    assert result.drives[12].status == """available""", "Died on +.drives[12].status"
    assert result.drives[12].slot == 9, "Died on +.drives[12].slot"
    assert result.drives[12].capacity == 960197124096, "Died on +.drives[12].capacity"
    assert result.drives[12].node_id == 3, "Died on +.drives[12].node_id"
    assert result.drives[12].drive_id == 37, "Died on +.drives[12].drive_id"
    assert type(result.drives[12].attributes) is dict, "Died on .drives[12].attributes"
    assert result.drives[12].serial == """scsi-SATA_SAMSUNG_MZ7LM96S1YHNXAG801602""", "Died on +.drives[12].serial"
    assert result.drives[12].type == """unknown""", "Died on +.drives[12].type"
    assert result.drives[11].status == """available""", "Died on +.drives[11].status"
    assert result.drives[11].slot == 3, "Died on +.drives[11].slot"
    assert result.drives[11].capacity == 960197124096, "Died on +.drives[11].capacity"
    assert result.drives[11].node_id == 2, "Died on +.drives[11].node_id"
    assert result.drives[11].drive_id == 14, "Died on +.drives[11].drive_id"
    assert type(result.drives[11].attributes) is dict, "Died on .drives[11].attributes"
    assert result.drives[11].serial == """scsi-SATA_TOSHIBA_THNSF89_462S102LTN4V""", "Died on +.drives[11].serial"
    assert result.drives[11].type == """unknown""", "Died on +.drives[11].type"
    assert result.drives[10].status == """available""", "Died on +.drives[10].status"
    assert result.drives[10].slot == 2, "Died on +.drives[10].slot"
    assert result.drives[10].capacity == 960197124096, "Died on +.drives[10].capacity"
    assert result.drives[10].node_id == 2, "Died on +.drives[10].node_id"
    assert result.drives[10].drive_id == 13, "Died on +.drives[10].drive_id"
    assert type(result.drives[10].attributes) is dict, "Died on .drives[10].attributes"
    assert result.drives[10].serial == """scsi-SATA_TOSHIBA_THNSF89_462S100ZTN4V""", "Died on +.drives[10].serial"
    assert result.drives[10].type == """unknown""", "Died on +.drives[10].type"
    assert result.drives[9].status == """available""", "Died on +.drives[9].status"
    assert result.drives[9].slot == 8, "Died on +.drives[9].slot"
    assert result.drives[9].capacity == 960197124096, "Died on +.drives[9].capacity"
    assert result.drives[9].node_id == 4, "Died on +.drives[9].node_id"
    assert result.drives[9].drive_id == 39, "Died on +.drives[9].drive_id"
    assert type(result.drives[9].attributes) is dict, "Died on .drives[9].attributes"
    assert result.drives[9].serial == """scsi-SATA_SDLFNCAR-960G-1_00056D54""", "Died on +.drives[9].serial"
    assert result.drives[9].type == """unknown""", "Died on +.drives[9].type"
    assert result.drives[8].status == """available""", "Died on +.drives[8].status"
    assert result.drives[8].slot == 5, "Died on +.drives[8].slot"
    assert result.drives[8].capacity == 960197124096, "Died on +.drives[8].capacity"
    assert result.drives[8].node_id == 2, "Died on +.drives[8].node_id"
    assert result.drives[8].drive_id == 16, "Died on +.drives[8].drive_id"
    assert type(result.drives[8].attributes) is dict, "Died on .drives[8].attributes"
    assert result.drives[8].serial == """scsi-SATA_TOSHIBA_THNSF89_462S100ETN4V""", "Died on +.drives[8].serial"
    assert result.drives[8].type == """unknown""", "Died on +.drives[8].type"
    assert result.drives[7].status == """available""", "Died on +.drives[7].status"
    assert result.drives[7].slot == 5, "Died on +.drives[7].slot"
    assert result.drives[7].capacity == 960197124096, "Died on +.drives[7].capacity"
    assert result.drives[7].node_id == 4, "Died on +.drives[7].node_id"
    assert result.drives[7].drive_id == 34, "Died on +.drives[7].drive_id"
    assert type(result.drives[7].attributes) is dict, "Died on .drives[7].attributes"
    assert result.drives[7].serial == """scsi-SATA_SAMSUNG_MZ7LM96S1YHNYAG400282""", "Died on +.drives[7].serial"
    assert result.drives[7].type == """unknown""", "Died on +.drives[7].type"
    assert result.drives[6].status == """available""", "Died on +.drives[6].status"
    assert result.drives[6].slot == 4, "Died on +.drives[6].slot"
    assert result.drives[6].capacity == 960197124096, "Died on +.drives[6].capacity"
    assert result.drives[6].node_id == 2, "Died on +.drives[6].node_id"
    assert result.drives[6].drive_id == 15, "Died on +.drives[6].drive_id"
    assert type(result.drives[6].attributes) is dict, "Died on .drives[6].attributes"
    assert result.drives[6].serial == """scsi-SATA_TOSHIBA_THNSF89_462S101ZTN4V""", "Died on +.drives[6].serial"
    assert result.drives[6].type == """unknown""", "Died on +.drives[6].type"
    assert result.drives[5].status == """available""", "Died on +.drives[5].status"
    assert result.drives[5].slot == 7, "Died on +.drives[5].slot"
    assert result.drives[5].capacity == 960197124096, "Died on +.drives[5].capacity"
    assert result.drives[5].node_id == 3, "Died on +.drives[5].node_id"
    assert result.drives[5].drive_id == 33, "Died on +.drives[5].drive_id"
    assert type(result.drives[5].attributes) is dict, "Died on .drives[5].attributes"
    assert result.drives[5].serial == """scsi-SATA_SAMSUNG_MZ7LM96S2E3NXAGC00504""", "Died on +.drives[5].serial"
    assert result.drives[5].type == """unknown""", "Died on +.drives[5].type"
    assert result.drives[4].status == """available""", "Died on +.drives[4].status"
    assert result.drives[4].slot == 7, "Died on +.drives[4].slot"
    assert result.drives[4].capacity == 960197124096, "Died on +.drives[4].capacity"
    assert result.drives[4].node_id == 2, "Died on +.drives[4].node_id"
    assert result.drives[4].drive_id == 18, "Died on +.drives[4].drive_id"
    assert type(result.drives[4].attributes) is dict, "Died on .drives[4].attributes"
    assert result.drives[4].serial == """scsi-SATA_TOSHIBA_THNSF89_462S100WTN4V""", "Died on +.drives[4].serial"
    assert result.drives[4].type == """unknown""", "Died on +.drives[4].type"
    assert result.drives[3].status == """available""", "Died on +.drives[3].status"
    assert result.drives[3].slot == 6, "Died on +.drives[3].slot"
    assert result.drives[3].capacity == 960197124096, "Died on +.drives[3].capacity"
    assert result.drives[3].node_id == 4, "Died on +.drives[3].node_id"
    assert result.drives[3].drive_id == 36, "Died on +.drives[3].drive_id"
    assert type(result.drives[3].attributes) is dict, "Died on .drives[3].attributes"
    assert result.drives[3].serial == """scsi-SATA_SAMSUNG_MZ7LM96S1YHNYAG400298""", "Died on +.drives[3].serial"
    assert result.drives[3].type == """unknown""", "Died on +.drives[3].type"
    assert result.drives[2].status == """available""", "Died on +.drives[2].status"
    assert result.drives[2].slot == 6, "Died on +.drives[2].slot"
    assert result.drives[2].capacity == 960197124096, "Died on +.drives[2].capacity"
    assert result.drives[2].node_id == 2, "Died on +.drives[2].node_id"
    assert result.drives[2].drive_id == 17, "Died on +.drives[2].drive_id"
    assert type(result.drives[2].attributes) is dict, "Died on .drives[2].attributes"
    assert result.drives[2].serial == """scsi-SATA_TOSHIBA_THNSF89_462S101HTN4V""", "Died on +.drives[2].serial"
    assert result.drives[2].type == """unknown""", "Died on +.drives[2].type"
    assert result.drives[1].status == """available""", "Died on +.drives[1].status"
    assert result.drives[1].slot == 8, "Died on +.drives[1].slot"
    assert result.drives[1].capacity == 960197124096, "Died on +.drives[1].capacity"
    assert result.drives[1].node_id == 3, "Died on +.drives[1].node_id"
    assert result.drives[1].drive_id == 35, "Died on +.drives[1].drive_id"
    assert type(result.drives[1].attributes) is dict, "Died on .drives[1].attributes"
    assert result.drives[1].serial == """scsi-SATA_SAMSUNG_MZ7LM96S1YHNXAG801772""", "Died on +.drives[1].serial"
    assert result.drives[1].type == """unknown""", "Died on +.drives[1].type"
    assert result.drives[0].status == """available""", "Died on +.drives[0].status"
    assert result.drives[0].slot == 8, "Died on +.drives[0].slot"
    assert result.drives[0].capacity == 960197124096, "Died on +.drives[0].capacity"
    assert result.drives[0].node_id == 2, "Died on +.drives[0].node_id"
    assert result.drives[0].drive_id == 19, "Died on +.drives[0].drive_id"
    assert type(result.drives[0].attributes) is dict, "Died on .drives[0].attributes"
    assert result.drives[0].serial == """scsi-SATA_TOSHIBA_THNSF89_462S101MTN4V""", "Died on +.drives[0].serial"
    assert result.drives[0].type == """unknown""", "Died on +.drives[0].type"

def test_list_drives_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListDrives_v9.0_0)

    
    result = ef.list_drives()
    assert result.drives[54].status == """active""", "Died on +.drives[54].status"
    assert result.drives[54].slot == 8, "Died on +.drives[54].slot"
    assert result.drives[54].capacity == 300069052416, "Died on +.drives[54].capacity"
    assert result.drives[54].node_id == 4, "Died on +.drives[54].node_id"
    assert result.drives[54].drive_id == 43, "Died on +.drives[54].drive_id"
    assert type(result.drives[54].attributes) is dict, "Died on .drives[54].attributes"
    assert result.drives[54].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL33150A8K300PGN""", "Died on +.drives[54].serial"
    assert result.drives[54].type == """block""", "Died on +.drives[54].type"
    assert result.drives[53].status == """active""", "Died on +.drives[53].status"
    assert result.drives[53].slot == 7, "Died on +.drives[53].slot"
    assert result.drives[53].capacity == 300069052416, "Died on +.drives[53].capacity"
    assert result.drives[53].node_id == 4, "Died on +.drives[53].node_id"
    assert result.drives[53].drive_id == 42, "Died on +.drives[53].drive_id"
    assert type(result.drives[53].attributes) is dict, "Died on .drives[53].attributes"
    assert result.drives[53].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL331508EW300PGN""", "Died on +.drives[53].serial"
    assert result.drives[53].type == """block""", "Died on +.drives[53].type"
    assert result.drives[52].status == """active""", "Died on +.drives[52].status"
    assert result.drives[52].slot == 6, "Died on +.drives[52].slot"
    assert result.drives[52].capacity == 300069052416, "Died on +.drives[52].capacity"
    assert result.drives[52].node_id == 4, "Died on +.drives[52].node_id"
    assert result.drives[52].drive_id == 41, "Died on +.drives[52].drive_id"
    assert type(result.drives[52].attributes) is dict, "Died on .drives[52].attributes"
    assert result.drives[52].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3316027H300PGN""", "Died on +.drives[52].serial"
    assert result.drives[52].type == """block""", "Died on +.drives[52].type"
    assert result.drives[51].status == """active""", "Died on +.drives[51].status"
    assert result.drives[51].slot == 5, "Died on +.drives[51].slot"
    assert result.drives[51].capacity == 300069052416, "Died on +.drives[51].capacity"
    assert result.drives[51].node_id == 4, "Died on +.drives[51].node_id"
    assert result.drives[51].drive_id == 40, "Died on +.drives[51].drive_id"
    assert type(result.drives[51].attributes) is dict, "Died on .drives[51].attributes"
    assert result.drives[51].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3316028N300PGN""", "Died on +.drives[51].serial"
    assert result.drives[51].type == """block""", "Died on +.drives[51].type"
    assert result.drives[50].status == """active""", "Died on +.drives[50].status"
    assert result.drives[50].slot == 4, "Died on +.drives[50].slot"
    assert result.drives[50].capacity == 300069052416, "Died on +.drives[50].capacity"
    assert result.drives[50].node_id == 4, "Died on +.drives[50].node_id"
    assert result.drives[50].drive_id == 39, "Died on +.drives[50].drive_id"
    assert type(result.drives[50].attributes) is dict, "Died on .drives[50].attributes"
    assert result.drives[50].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL332003Y3300PGN""", "Died on +.drives[50].serial"
    assert result.drives[50].type == """block""", "Died on +.drives[50].type"
    assert result.drives[49].status == """active""", "Died on +.drives[49].status"
    assert result.drives[49].slot == 3, "Died on +.drives[49].slot"
    assert result.drives[49].capacity == 300069052416, "Died on +.drives[49].capacity"
    assert result.drives[49].node_id == 4, "Died on +.drives[49].node_id"
    assert result.drives[49].drive_id == 38, "Died on +.drives[49].drive_id"
    assert type(result.drives[49].attributes) is dict, "Died on .drives[49].attributes"
    assert result.drives[49].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL331607FQ300PGN""", "Died on +.drives[49].serial"
    assert result.drives[49].type == """block""", "Died on +.drives[49].type"
    assert result.drives[48].status == """active""", "Died on +.drives[48].status"
    assert result.drives[48].slot == 2, "Died on +.drives[48].slot"
    assert result.drives[48].capacity == 300069052416, "Died on +.drives[48].capacity"
    assert result.drives[48].node_id == 4, "Died on +.drives[48].node_id"
    assert result.drives[48].drive_id == 37, "Died on +.drives[48].drive_id"
    assert type(result.drives[48].attributes) is dict, "Died on .drives[48].attributes"
    assert result.drives[48].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL33160BS9300PGN""", "Died on +.drives[48].serial"
    assert result.drives[48].type == """block""", "Died on +.drives[48].type"
    assert result.drives[47].status == """active""", "Died on +.drives[47].status"
    assert result.drives[47].slot == 1, "Died on +.drives[47].slot"
    assert result.drives[47].capacity == 300069052416, "Died on +.drives[47].capacity"
    assert result.drives[47].node_id == 4, "Died on +.drives[47].node_id"
    assert result.drives[47].drive_id == 36, "Died on +.drives[47].drive_id"
    assert type(result.drives[47].attributes) is dict, "Died on .drives[47].attributes"
    assert result.drives[47].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL33160BQN300PGN""", "Died on +.drives[47].serial"
    assert result.drives[47].type == """block""", "Died on +.drives[47].type"
    assert result.drives[46].status == """active""", "Died on +.drives[46].status"
    assert result.drives[46].slot == 0, "Died on +.drives[46].slot"
    assert result.drives[46].capacity == 300069052416, "Died on +.drives[46].capacity"
    assert result.drives[46].node_id == 4, "Died on +.drives[46].node_id"
    assert result.drives[46].drive_id == 35, "Died on +.drives[46].drive_id"
    assert type(result.drives[46].attributes) is dict, "Died on .drives[46].attributes"
    assert result.drives[46].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL33160BSN300PGN""", "Died on +.drives[46].serial"
    assert result.drives[46].type == """block""", "Died on +.drives[46].type"
    assert result.drives[45].status == """active""", "Died on +.drives[45].status"
    assert result.drives[45].slot == -1, "Died on +.drives[45].slot"
    assert result.drives[45].capacity == 299988156416, "Died on +.drives[45].capacity"
    assert result.drives[45].node_id == 4, "Died on +.drives[45].node_id"
    assert result.drives[45].drive_id == 34, "Died on +.drives[45].drive_id"
    assert type(result.drives[45].attributes) is dict, "Died on .drives[45].attributes"
    assert result.drives[45].serial == """scsi-SATA_VRFSD3400GBCTMM203529282-part4""", "Died on +.drives[45].serial"
    assert result.drives[45].type == """volume""", "Died on +.drives[45].type"
    assert result.drives[44].status == """active""", "Died on +.drives[44].status"
    assert result.drives[44].slot == 9, "Died on +.drives[44].slot"
    assert result.drives[44].capacity == 300069052416, "Died on +.drives[44].capacity"
    assert result.drives[44].node_id == 5, "Died on +.drives[44].node_id"
    assert result.drives[44].drive_id == 33, "Died on +.drives[44].drive_id"
    assert type(result.drives[44].attributes) is dict, "Died on .drives[44].attributes"
    assert result.drives[44].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL33160DM4300PGN""", "Died on +.drives[44].serial"
    assert result.drives[44].type == """block""", "Died on +.drives[44].type"
    assert result.drives[43].status == """active""", "Died on +.drives[43].status"
    assert result.drives[43].slot == 8, "Died on +.drives[43].slot"
    assert result.drives[43].capacity == 300069052416, "Died on +.drives[43].capacity"
    assert result.drives[43].node_id == 5, "Died on +.drives[43].node_id"
    assert result.drives[43].drive_id == 32, "Died on +.drives[43].drive_id"
    assert type(result.drives[43].attributes) is dict, "Died on .drives[43].attributes"
    assert result.drives[43].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL33150BKN300PGN""", "Died on +.drives[43].serial"
    assert result.drives[43].type == """block""", "Died on +.drives[43].type"
    assert result.drives[42].status == """active""", "Died on +.drives[42].status"
    assert result.drives[42].slot == 7, "Died on +.drives[42].slot"
    assert result.drives[42].capacity == 300069052416, "Died on +.drives[42].capacity"
    assert result.drives[42].node_id == 5, "Died on +.drives[42].node_id"
    assert result.drives[42].drive_id == 31, "Died on +.drives[42].drive_id"
    assert type(result.drives[42].attributes) is dict, "Died on .drives[42].attributes"
    assert result.drives[42].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3320012B300PGN""", "Died on +.drives[42].serial"
    assert result.drives[42].type == """block""", "Died on +.drives[42].type"
    assert result.drives[41].status == """active""", "Died on +.drives[41].status"
    assert result.drives[41].slot == 6, "Died on +.drives[41].slot"
    assert result.drives[41].capacity == 300069052416, "Died on +.drives[41].capacity"
    assert result.drives[41].node_id == 5, "Died on +.drives[41].node_id"
    assert result.drives[41].drive_id == 30, "Died on +.drives[41].drive_id"
    assert type(result.drives[41].attributes) is dict, "Died on .drives[41].attributes"
    assert result.drives[41].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL332001D1300PGN""", "Died on +.drives[41].serial"
    assert result.drives[41].type == """block""", "Died on +.drives[41].type"
    assert result.drives[40].status == """active""", "Died on +.drives[40].status"
    assert result.drives[40].slot == 5, "Died on +.drives[40].slot"
    assert result.drives[40].capacity == 300069052416, "Died on +.drives[40].capacity"
    assert result.drives[40].node_id == 5, "Died on +.drives[40].node_id"
    assert result.drives[40].drive_id == 29, "Died on +.drives[40].drive_id"
    assert type(result.drives[40].attributes) is dict, "Died on .drives[40].attributes"
    assert result.drives[40].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3316055L300PGN""", "Died on +.drives[40].serial"
    assert result.drives[40].type == """block""", "Died on +.drives[40].type"
    assert result.drives[39].status == """active""", "Died on +.drives[39].status"
    assert result.drives[39].slot == 4, "Died on +.drives[39].slot"
    assert result.drives[39].capacity == 300069052416, "Died on +.drives[39].capacity"
    assert result.drives[39].node_id == 5, "Died on +.drives[39].node_id"
    assert result.drives[39].drive_id == 28, "Died on +.drives[39].drive_id"
    assert type(result.drives[39].attributes) is dict, "Died on .drives[39].attributes"
    assert result.drives[39].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL33150C2G300PGN""", "Died on +.drives[39].serial"
    assert result.drives[39].type == """block""", "Died on +.drives[39].type"
    assert result.drives[38].status == """active""", "Died on +.drives[38].status"
    assert result.drives[38].slot == 3, "Died on +.drives[38].slot"
    assert result.drives[38].capacity == 300069052416, "Died on +.drives[38].capacity"
    assert result.drives[38].node_id == 5, "Died on +.drives[38].node_id"
    assert result.drives[38].drive_id == 27, "Died on +.drives[38].drive_id"
    assert type(result.drives[38].attributes) is dict, "Died on .drives[38].attributes"
    assert result.drives[38].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL332000QX300PGN""", "Died on +.drives[38].serial"
    assert result.drives[38].type == """block""", "Died on +.drives[38].type"
    assert result.drives[37].status == """active""", "Died on +.drives[37].status"
    assert result.drives[37].slot == 2, "Died on +.drives[37].slot"
    assert result.drives[37].capacity == 300069052416, "Died on +.drives[37].capacity"
    assert result.drives[37].node_id == 5, "Died on +.drives[37].node_id"
    assert result.drives[37].drive_id == 26, "Died on +.drives[37].drive_id"
    assert type(result.drives[37].attributes) is dict, "Died on .drives[37].attributes"
    assert result.drives[37].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL331506AB300PGN""", "Died on +.drives[37].serial"
    assert result.drives[37].type == """block""", "Died on +.drives[37].type"
    assert result.drives[36].status == """active""", "Died on +.drives[36].status"
    assert result.drives[36].slot == 1, "Died on +.drives[36].slot"
    assert result.drives[36].capacity == 300069052416, "Died on +.drives[36].capacity"
    assert result.drives[36].node_id == 5, "Died on +.drives[36].node_id"
    assert result.drives[36].drive_id == 25, "Died on +.drives[36].drive_id"
    assert type(result.drives[36].attributes) is dict, "Died on .drives[36].attributes"
    assert result.drives[36].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL332001JB300PGN""", "Died on +.drives[36].serial"
    assert result.drives[36].type == """block""", "Died on +.drives[36].type"
    assert result.drives[35].status == """active""", "Died on +.drives[35].status"
    assert result.drives[35].slot == 0, "Died on +.drives[35].slot"
    assert result.drives[35].capacity == 300069052416, "Died on +.drives[35].capacity"
    assert result.drives[35].node_id == 5, "Died on +.drives[35].node_id"
    assert result.drives[35].drive_id == 24, "Died on +.drives[35].drive_id"
    assert type(result.drives[35].attributes) is dict, "Died on .drives[35].attributes"
    assert result.drives[35].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL332000PN300PGN""", "Died on +.drives[35].serial"
    assert result.drives[35].type == """block""", "Died on +.drives[35].type"
    assert result.drives[34].status == """active""", "Died on +.drives[34].status"
    assert result.drives[34].slot == -1, "Died on +.drives[34].slot"
    assert result.drives[34].capacity == 299988156416, "Died on +.drives[34].capacity"
    assert result.drives[34].node_id == 5, "Died on +.drives[34].node_id"
    assert result.drives[34].drive_id == 23, "Died on +.drives[34].drive_id"
    assert type(result.drives[34].attributes) is dict, "Died on .drives[34].attributes"
    assert result.drives[34].serial == """scsi-SATA_VRFSD3400GNCVMT205044008-part4""", "Died on +.drives[34].serial"
    assert result.drives[34].type == """volume""", "Died on +.drives[34].type"
    assert result.drives[33].status == """active""", "Died on +.drives[33].status"
    assert result.drives[33].slot == 9, "Died on +.drives[33].slot"
    assert result.drives[33].capacity == 300069052416, "Died on +.drives[33].capacity"
    assert result.drives[33].node_id == 2, "Died on +.drives[33].node_id"
    assert result.drives[33].drive_id == 22, "Died on +.drives[33].drive_id"
    assert type(result.drives[33].attributes) is dict, "Died on .drives[33].attributes"
    assert result.drives[33].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321500VA300PGN""", "Died on +.drives[33].serial"
    assert result.drives[33].type == """block""", "Died on +.drives[33].type"
    assert result.drives[32].status == """active""", "Died on +.drives[32].status"
    assert result.drives[32].slot == 8, "Died on +.drives[32].slot"
    assert result.drives[32].capacity == 300069052416, "Died on +.drives[32].capacity"
    assert result.drives[32].node_id == 2, "Died on +.drives[32].node_id"
    assert result.drives[32].drive_id == 21, "Died on +.drives[32].drive_id"
    assert type(result.drives[32].attributes) is dict, "Died on .drives[32].attributes"
    assert result.drives[32].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3215014K300PGN""", "Died on +.drives[32].serial"
    assert result.drives[32].type == """block""", "Died on +.drives[32].type"
    assert result.drives[31].status == """active""", "Died on +.drives[31].status"
    assert result.drives[31].slot == 7, "Died on +.drives[31].slot"
    assert result.drives[31].capacity == 300069052416, "Died on +.drives[31].capacity"
    assert result.drives[31].node_id == 2, "Died on +.drives[31].node_id"
    assert result.drives[31].drive_id == 20, "Died on +.drives[31].drive_id"
    assert type(result.drives[31].attributes) is dict, "Died on .drives[31].attributes"
    assert result.drives[31].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL32150104300PGN""", "Died on +.drives[31].serial"
    assert result.drives[31].type == """block""", "Died on +.drives[31].type"
    assert result.drives[30].status == """active""", "Died on +.drives[30].status"
    assert result.drives[30].slot == 7, "Died on +.drives[30].slot"
    assert result.drives[30].capacity == 300069052416, "Died on +.drives[30].capacity"
    assert result.drives[30].node_id == 1, "Died on +.drives[30].node_id"
    assert result.drives[30].drive_id == 9, "Died on +.drives[30].drive_id"
    assert type(result.drives[30].attributes) is dict, "Died on .drives[30].attributes"
    assert result.drives[30].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL33150235300PGN""", "Died on +.drives[30].serial"
    assert result.drives[30].type == """block""", "Died on +.drives[30].type"
    assert result.drives[29].status == """active""", "Died on +.drives[29].status"
    assert result.drives[29].slot == 6, "Died on +.drives[29].slot"
    assert result.drives[29].capacity == 300069052416, "Died on +.drives[29].capacity"
    assert result.drives[29].node_id == 1, "Died on +.drives[29].node_id"
    assert result.drives[29].drive_id == 8, "Died on +.drives[29].drive_id"
    assert type(result.drives[29].attributes) is dict, "Died on .drives[29].attributes"
    assert result.drives[29].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL33150B7G300PGN""", "Died on +.drives[29].serial"
    assert result.drives[29].type == """block""", "Died on +.drives[29].type"
    assert result.drives[28].status == """active""", "Died on +.drives[28].status"
    assert result.drives[28].slot == 5, "Died on +.drives[28].slot"
    assert result.drives[28].capacity == 300069052416, "Died on +.drives[28].capacity"
    assert result.drives[28].node_id == 1, "Died on +.drives[28].node_id"
    assert result.drives[28].drive_id == 7, "Died on +.drives[28].drive_id"
    assert type(result.drives[28].attributes) is dict, "Died on .drives[28].attributes"
    assert result.drives[28].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3315068Z300PGN""", "Died on +.drives[28].serial"
    assert result.drives[28].type == """block""", "Died on +.drives[28].type"
    assert result.drives[27].status == """active""", "Died on +.drives[27].status"
    assert result.drives[27].slot == 4, "Died on +.drives[27].slot"
    assert result.drives[27].capacity == 300069052416, "Died on +.drives[27].capacity"
    assert result.drives[27].node_id == 1, "Died on +.drives[27].node_id"
    assert result.drives[27].drive_id == 6, "Died on +.drives[27].drive_id"
    assert type(result.drives[27].attributes) is dict, "Died on .drives[27].attributes"
    assert result.drives[27].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL331500ZC300PGN""", "Died on +.drives[27].serial"
    assert result.drives[27].type == """block""", "Died on +.drives[27].type"
    assert result.drives[26].status == """active""", "Died on +.drives[26].status"
    assert result.drives[26].slot == 3, "Died on +.drives[26].slot"
    assert result.drives[26].capacity == 300069052416, "Died on +.drives[26].capacity"
    assert result.drives[26].node_id == 1, "Died on +.drives[26].node_id"
    assert result.drives[26].drive_id == 5, "Died on +.drives[26].drive_id"
    assert type(result.drives[26].attributes) is dict, "Died on .drives[26].attributes"
    assert result.drives[26].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3315014H300PGN""", "Died on +.drives[26].serial"
    assert result.drives[26].type == """block""", "Died on +.drives[26].type"
    assert result.drives[25].status == """active""", "Died on +.drives[25].status"
    assert result.drives[25].slot == 2, "Died on +.drives[25].slot"
    assert result.drives[25].capacity == 300069052416, "Died on +.drives[25].capacity"
    assert result.drives[25].node_id == 1, "Died on +.drives[25].node_id"
    assert result.drives[25].drive_id == 4, "Died on +.drives[25].drive_id"
    assert type(result.drives[25].attributes) is dict, "Died on .drives[25].attributes"
    assert result.drives[25].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3315015W300PGN""", "Died on +.drives[25].serial"
    assert result.drives[25].type == """block""", "Died on +.drives[25].type"
    assert result.drives[24].status == """active""", "Died on +.drives[24].status"
    assert result.drives[24].slot == 1, "Died on +.drives[24].slot"
    assert result.drives[24].capacity == 300069052416, "Died on +.drives[24].capacity"
    assert result.drives[24].node_id == 1, "Died on +.drives[24].node_id"
    assert result.drives[24].drive_id == 3, "Died on +.drives[24].drive_id"
    assert type(result.drives[24].attributes) is dict, "Died on .drives[24].attributes"
    assert result.drives[24].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL331600FF300PGN""", "Died on +.drives[24].serial"
    assert result.drives[24].type == """block""", "Died on +.drives[24].type"
    assert result.drives[23].status == """active""", "Died on +.drives[23].status"
    assert result.drives[23].slot == 0, "Died on +.drives[23].slot"
    assert result.drives[23].capacity == 300069052416, "Died on +.drives[23].capacity"
    assert result.drives[23].node_id == 1, "Died on +.drives[23].node_id"
    assert result.drives[23].drive_id == 2, "Died on +.drives[23].drive_id"
    assert type(result.drives[23].attributes) is dict, "Died on .drives[23].attributes"
    assert result.drives[23].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL33150BKW300PGN""", "Died on +.drives[23].serial"
    assert result.drives[23].type == """block""", "Died on +.drives[23].type"
    assert result.drives[22].status == """active""", "Died on +.drives[22].status"
    assert result.drives[22].slot == -1, "Died on +.drives[22].slot"
    assert result.drives[22].capacity == 299988156416, "Died on +.drives[22].capacity"
    assert result.drives[22].node_id == 1, "Died on +.drives[22].node_id"
    assert result.drives[22].drive_id == 1, "Died on +.drives[22].drive_id"
    assert type(result.drives[22].attributes) is dict, "Died on .drives[22].attributes"
    assert result.drives[22].serial == """scsi-SATA_VRFSD3400GBCTMM203298016-part4""", "Died on +.drives[22].serial"
    assert result.drives[22].type == """volume""", "Died on +.drives[22].type"
    assert result.drives[21].status == """active""", "Died on +.drives[21].status"
    assert result.drives[21].slot == 6, "Died on +.drives[21].slot"
    assert result.drives[21].capacity == 300069052416, "Died on +.drives[21].capacity"
    assert result.drives[21].node_id == 2, "Died on +.drives[21].node_id"
    assert result.drives[21].drive_id == 19, "Died on +.drives[21].drive_id"
    assert type(result.drives[21].attributes) is dict, "Died on .drives[21].attributes"
    assert result.drives[21].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321502U1300PGN""", "Died on +.drives[21].serial"
    assert result.drives[21].type == """block""", "Died on +.drives[21].type"
    assert result.drives[20].status == """active""", "Died on +.drives[20].status"
    assert result.drives[20].slot == 5, "Died on +.drives[20].slot"
    assert result.drives[20].capacity == 300069052416, "Died on +.drives[20].capacity"
    assert result.drives[20].node_id == 2, "Died on +.drives[20].node_id"
    assert result.drives[20].drive_id == 18, "Died on +.drives[20].drive_id"
    assert type(result.drives[20].attributes) is dict, "Died on .drives[20].attributes"
    assert result.drives[20].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321500Q0300PGN""", "Died on +.drives[20].serial"
    assert result.drives[20].type == """block""", "Died on +.drives[20].type"
    assert result.drives[19].status == """active""", "Died on +.drives[19].status"
    assert result.drives[19].slot == 4, "Died on +.drives[19].slot"
    assert result.drives[19].capacity == 300069052416, "Died on +.drives[19].capacity"
    assert result.drives[19].node_id == 2, "Died on +.drives[19].node_id"
    assert result.drives[19].drive_id == 17, "Died on +.drives[19].drive_id"
    assert type(result.drives[19].attributes) is dict, "Died on .drives[19].attributes"
    assert result.drives[19].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321503AR300PGN""", "Died on +.drives[19].serial"
    assert result.drives[19].type == """block""", "Died on +.drives[19].type"
    assert result.drives[18].status == """active""", "Died on +.drives[18].status"
    assert result.drives[18].slot == 3, "Died on +.drives[18].slot"
    assert result.drives[18].capacity == 300069052416, "Died on +.drives[18].capacity"
    assert result.drives[18].node_id == 2, "Died on +.drives[18].node_id"
    assert result.drives[18].drive_id == 16, "Died on +.drives[18].drive_id"
    assert type(result.drives[18].attributes) is dict, "Died on .drives[18].attributes"
    assert result.drives[18].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321500X7300PGN""", "Died on +.drives[18].serial"
    assert result.drives[18].type == """block""", "Died on +.drives[18].type"
    assert result.drives[17].status == """active""", "Died on +.drives[17].status"
    assert result.drives[17].slot == 2, "Died on +.drives[17].slot"
    assert result.drives[17].capacity == 300069052416, "Died on +.drives[17].capacity"
    assert result.drives[17].node_id == 2, "Died on +.drives[17].node_id"
    assert result.drives[17].drive_id == 15, "Died on +.drives[17].drive_id"
    assert type(result.drives[17].attributes) is dict, "Died on .drives[17].attributes"
    assert result.drives[17].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL311301S0300PGN""", "Died on +.drives[17].serial"
    assert result.drives[17].type == """block""", "Died on +.drives[17].type"
    assert result.drives[16].status == """active""", "Died on +.drives[16].status"
    assert result.drives[16].slot == 1, "Died on +.drives[16].slot"
    assert result.drives[16].capacity == 300069052416, "Died on +.drives[16].capacity"
    assert result.drives[16].node_id == 2, "Died on +.drives[16].node_id"
    assert result.drives[16].drive_id == 14, "Died on +.drives[16].drive_id"
    assert type(result.drives[16].attributes) is dict, "Died on .drives[16].attributes"
    assert result.drives[16].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321500JU300PGN""", "Died on +.drives[16].serial"
    assert result.drives[16].type == """block""", "Died on +.drives[16].type"
    assert result.drives[15].status == """active""", "Died on +.drives[15].status"
    assert result.drives[15].slot == 0, "Died on +.drives[15].slot"
    assert result.drives[15].capacity == 300069052416, "Died on +.drives[15].capacity"
    assert result.drives[15].node_id == 2, "Died on +.drives[15].node_id"
    assert result.drives[15].drive_id == 13, "Died on +.drives[15].drive_id"
    assert type(result.drives[15].attributes) is dict, "Died on .drives[15].attributes"
    assert result.drives[15].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321500L1300PGN""", "Died on +.drives[15].serial"
    assert result.drives[15].type == """block""", "Died on +.drives[15].type"
    assert result.drives[14].status == """active""", "Died on +.drives[14].status"
    assert result.drives[14].slot == -1, "Died on +.drives[14].slot"
    assert result.drives[14].capacity == 299988156416, "Died on +.drives[14].capacity"
    assert result.drives[14].node_id == 2, "Died on +.drives[14].node_id"
    assert result.drives[14].drive_id == 12, "Died on +.drives[14].drive_id"
    assert type(result.drives[14].attributes) is dict, "Died on .drives[14].attributes"
    assert result.drives[14].serial == """scsi-SATA_VRFSD3400GNCVMT205044035-part4""", "Died on +.drives[14].serial"
    assert result.drives[14].type == """volume""", "Died on +.drives[14].type"
    assert result.drives[13].status == """active""", "Died on +.drives[13].status"
    assert result.drives[13].slot == 9, "Died on +.drives[13].slot"
    assert result.drives[13].capacity == 300069052416, "Died on +.drives[13].capacity"
    assert result.drives[13].node_id == 3, "Died on +.drives[13].node_id"
    assert result.drives[13].drive_id == 55, "Died on +.drives[13].drive_id"
    assert type(result.drives[13].attributes) is dict, "Died on .drives[13].attributes"
    assert result.drives[13].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL331507KG300PGN""", "Died on +.drives[13].serial"
    assert result.drives[13].type == """block""", "Died on +.drives[13].type"
    assert result.drives[12].status == """active""", "Died on +.drives[12].status"
    assert result.drives[12].slot == 9, "Died on +.drives[12].slot"
    assert result.drives[12].capacity == 300069052416, "Died on +.drives[12].capacity"
    assert result.drives[12].node_id == 1, "Died on +.drives[12].node_id"
    assert result.drives[12].drive_id == 11, "Died on +.drives[12].drive_id"
    assert type(result.drives[12].attributes) is dict, "Died on .drives[12].attributes"
    assert result.drives[12].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL331500YZ300PGN""", "Died on +.drives[12].serial"
    assert result.drives[12].type == """block""", "Died on +.drives[12].type"
    assert result.drives[11].status == """active""", "Died on +.drives[11].status"
    assert result.drives[11].slot == 8, "Died on +.drives[11].slot"
    assert result.drives[11].capacity == 300069052416, "Died on +.drives[11].capacity"
    assert result.drives[11].node_id == 3, "Died on +.drives[11].node_id"
    assert result.drives[11].drive_id == 54, "Died on +.drives[11].drive_id"
    assert type(result.drives[11].attributes) is dict, "Died on .drives[11].attributes"
    assert result.drives[11].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL33160AX8300PGN""", "Died on +.drives[11].serial"
    assert result.drives[11].type == """block""", "Died on +.drives[11].type"
    assert result.drives[10].status == """active""", "Died on +.drives[10].status"
    assert result.drives[10].slot == 8, "Died on +.drives[10].slot"
    assert result.drives[10].capacity == 300069052416, "Died on +.drives[10].capacity"
    assert result.drives[10].node_id == 1, "Died on +.drives[10].node_id"
    assert result.drives[10].drive_id == 10, "Died on +.drives[10].drive_id"
    assert type(result.drives[10].attributes) is dict, "Died on .drives[10].attributes"
    assert result.drives[10].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL331600AD300PGN""", "Died on +.drives[10].serial"
    assert result.drives[10].type == """block""", "Died on +.drives[10].type"
    assert result.drives[9].status == """active""", "Died on +.drives[9].status"
    assert result.drives[9].slot == 7, "Died on +.drives[9].slot"
    assert result.drives[9].capacity == 300069052416, "Died on +.drives[9].capacity"
    assert result.drives[9].node_id == 3, "Died on +.drives[9].node_id"
    assert result.drives[9].drive_id == 53, "Died on +.drives[9].drive_id"
    assert type(result.drives[9].attributes) is dict, "Died on .drives[9].attributes"
    assert result.drives[9].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL33160CZ4300PGN""", "Died on +.drives[9].serial"
    assert result.drives[9].type == """block""", "Died on +.drives[9].type"
    assert result.drives[8].status == """active""", "Died on +.drives[8].status"
    assert result.drives[8].slot == 6, "Died on +.drives[8].slot"
    assert result.drives[8].capacity == 300069052416, "Died on +.drives[8].capacity"
    assert result.drives[8].node_id == 3, "Died on +.drives[8].node_id"
    assert result.drives[8].drive_id == 52, "Died on +.drives[8].drive_id"
    assert type(result.drives[8].attributes) is dict, "Died on .drives[8].attributes"
    assert result.drives[8].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL33160BXV300PGN""", "Died on +.drives[8].serial"
    assert result.drives[8].type == """block""", "Died on +.drives[8].type"
    assert result.drives[7].status == """active""", "Died on +.drives[7].status"
    assert result.drives[7].slot == 5, "Died on +.drives[7].slot"
    assert result.drives[7].capacity == 300069052416, "Died on +.drives[7].capacity"
    assert result.drives[7].node_id == 3, "Died on +.drives[7].node_id"
    assert result.drives[7].drive_id == 51, "Died on +.drives[7].drive_id"
    assert type(result.drives[7].attributes) is dict, "Died on .drives[7].attributes"
    assert result.drives[7].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL33150BAD300PGN""", "Died on +.drives[7].serial"
    assert result.drives[7].type == """block""", "Died on +.drives[7].type"
    assert result.drives[6].status == """active""", "Died on +.drives[6].status"
    assert result.drives[6].slot == 4, "Died on +.drives[6].slot"
    assert result.drives[6].capacity == 300069052416, "Died on +.drives[6].capacity"
    assert result.drives[6].node_id == 3, "Died on +.drives[6].node_id"
    assert result.drives[6].drive_id == 50, "Died on +.drives[6].drive_id"
    assert type(result.drives[6].attributes) is dict, "Died on .drives[6].attributes"
    assert result.drives[6].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL332001PQ300PGN""", "Died on +.drives[6].serial"
    assert result.drives[6].type == """block""", "Died on +.drives[6].type"
    assert result.drives[5].status == """active""", "Died on +.drives[5].status"
    assert result.drives[5].slot == 3, "Died on +.drives[5].slot"
    assert result.drives[5].capacity == 300069052416, "Died on +.drives[5].capacity"
    assert result.drives[5].node_id == 3, "Died on +.drives[5].node_id"
    assert result.drives[5].drive_id == 49, "Died on +.drives[5].drive_id"
    assert type(result.drives[5].attributes) is dict, "Died on .drives[5].attributes"
    assert result.drives[5].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL332001NT300PGN""", "Died on +.drives[5].serial"
    assert result.drives[5].type == """block""", "Died on +.drives[5].type"
    assert result.drives[4].status == """active""", "Died on +.drives[4].status"
    assert result.drives[4].slot == 2, "Died on +.drives[4].slot"
    assert result.drives[4].capacity == 300069052416, "Died on +.drives[4].capacity"
    assert result.drives[4].node_id == 3, "Died on +.drives[4].node_id"
    assert result.drives[4].drive_id == 48, "Died on +.drives[4].drive_id"
    assert type(result.drives[4].attributes) is dict, "Died on .drives[4].attributes"
    assert result.drives[4].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL33160C1E300PGN""", "Died on +.drives[4].serial"
    assert result.drives[4].type == """block""", "Died on +.drives[4].type"
    assert result.drives[3].status == """active""", "Died on +.drives[3].status"
    assert result.drives[3].slot == 1, "Died on +.drives[3].slot"
    assert result.drives[3].capacity == 300069052416, "Died on +.drives[3].capacity"
    assert result.drives[3].node_id == 3, "Died on +.drives[3].node_id"
    assert result.drives[3].drive_id == 47, "Died on +.drives[3].drive_id"
    assert type(result.drives[3].attributes) is dict, "Died on .drives[3].attributes"
    assert result.drives[3].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL331508DC300PGN""", "Died on +.drives[3].serial"
    assert result.drives[3].type == """block""", "Died on +.drives[3].type"
    assert result.drives[2].status == """active""", "Died on +.drives[2].status"
    assert result.drives[2].slot == 0, "Died on +.drives[2].slot"
    assert result.drives[2].capacity == 300069052416, "Died on +.drives[2].capacity"
    assert result.drives[2].node_id == 3, "Died on +.drives[2].node_id"
    assert result.drives[2].drive_id == 46, "Died on +.drives[2].drive_id"
    assert type(result.drives[2].attributes) is dict, "Died on .drives[2].attributes"
    assert result.drives[2].serial == """scsi-SATA_INTEL_SSDSA2CW3CVPR2055005J300EGN""", "Died on +.drives[2].serial"
    assert result.drives[2].type == """block""", "Died on +.drives[2].type"
    assert result.drives[1].status == """active""", "Died on +.drives[1].status"
    assert result.drives[1].slot == -1, "Died on +.drives[1].slot"
    assert result.drives[1].capacity == 299988156416, "Died on +.drives[1].capacity"
    assert result.drives[1].node_id == 3, "Died on +.drives[1].node_id"
    assert result.drives[1].drive_id == 45, "Died on +.drives[1].drive_id"
    assert type(result.drives[1].attributes) is dict, "Died on .drives[1].attributes"
    assert result.drives[1].serial == """scsi-SATA_VRFSD3400GBCTMM203297277-part4""", "Died on +.drives[1].serial"
    assert result.drives[1].type == """volume""", "Died on +.drives[1].type"
    assert result.drives[0].status == """active""", "Died on +.drives[0].status"
    assert result.drives[0].slot == 9, "Died on +.drives[0].slot"
    assert result.drives[0].capacity == 300069052416, "Died on +.drives[0].capacity"
    assert result.drives[0].node_id == 4, "Died on +.drives[0].node_id"
    assert result.drives[0].drive_id == 44, "Died on +.drives[0].drive_id"
    assert type(result.drives[0].attributes) is dict, "Died on .drives[0].attributes"
    assert result.drives[0].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL33160183300PGN""", "Died on +.drives[0].serial"
    assert result.drives[0].type == """block""", "Died on +.drives[0].type"

def test_list_drives_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListDrives_v9.1_0)

    
    result = ef.list_drives()
    assert result.drives[43].status == """active""", "Died on +.drives[43].status"
    assert result.drives[43].slot == 8, "Died on +.drives[43].slot"
    assert result.drives[43].capacity == 300069052416, "Died on +.drives[43].capacity"
    assert result.drives[43].node_id == 3, "Died on +.drives[43].node_id"
    assert result.drives[43].drive_id == 43, "Died on +.drives[43].drive_id"
    assert type(result.drives[43].attributes) is dict, "Died on .drives[43].attributes"
    assert result.drives[43].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3216000K300PGN""", "Died on +.drives[43].serial"
    assert result.drives[43].type == """block""", "Died on +.drives[43].type"
    assert result.drives[42].status == """active""", "Died on +.drives[42].status"
    assert result.drives[42].slot == 8, "Died on +.drives[42].slot"
    assert result.drives[42].capacity == 300069052416, "Died on +.drives[42].capacity"
    assert result.drives[42].node_id == 4, "Died on +.drives[42].node_id"
    assert result.drives[42].drive_id == 21, "Died on +.drives[42].drive_id"
    assert type(result.drives[42].attributes) is dict, "Died on .drives[42].attributes"
    assert result.drives[42].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3216008T300PGN""", "Died on +.drives[42].serial"
    assert result.drives[42].type == """block""", "Died on +.drives[42].type"
    assert result.drives[41].status == """active""", "Died on +.drives[41].status"
    assert result.drives[41].slot == 7, "Died on +.drives[41].slot"
    assert result.drives[41].capacity == 300069052416, "Died on +.drives[41].capacity"
    assert result.drives[41].node_id == 3, "Died on +.drives[41].node_id"
    assert result.drives[41].drive_id == 42, "Died on +.drives[41].drive_id"
    assert type(result.drives[41].attributes) is dict, "Died on .drives[41].attributes"
    assert result.drives[41].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321503B4300PGN""", "Died on +.drives[41].serial"
    assert result.drives[41].type == """block""", "Died on +.drives[41].type"
    assert result.drives[40].status == """active""", "Died on +.drives[40].status"
    assert result.drives[40].slot == 7, "Died on +.drives[40].slot"
    assert result.drives[40].capacity == 300069052416, "Died on +.drives[40].capacity"
    assert result.drives[40].node_id == 4, "Died on +.drives[40].node_id"
    assert result.drives[40].drive_id == 20, "Died on +.drives[40].drive_id"
    assert type(result.drives[40].attributes) is dict, "Died on .drives[40].attributes"
    assert result.drives[40].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321502UJ300PGN""", "Died on +.drives[40].serial"
    assert result.drives[40].type == """block""", "Died on +.drives[40].type"
    assert result.drives[39].status == """active""", "Died on +.drives[39].status"
    assert result.drives[39].slot == 6, "Died on +.drives[39].slot"
    assert result.drives[39].capacity == 300069052416, "Died on +.drives[39].capacity"
    assert result.drives[39].node_id == 3, "Died on +.drives[39].node_id"
    assert result.drives[39].drive_id == 41, "Died on +.drives[39].drive_id"
    assert type(result.drives[39].attributes) is dict, "Died on .drives[39].attributes"
    assert result.drives[39].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321600AL300PGN""", "Died on +.drives[39].serial"
    assert result.drives[39].type == """block""", "Died on +.drives[39].type"
    assert result.drives[38].status == """active""", "Died on +.drives[38].status"
    assert result.drives[38].slot == 5, "Died on +.drives[38].slot"
    assert result.drives[38].capacity == 300069052416, "Died on +.drives[38].capacity"
    assert result.drives[38].node_id == 3, "Died on +.drives[38].node_id"
    assert result.drives[38].drive_id == 40, "Died on +.drives[38].drive_id"
    assert type(result.drives[38].attributes) is dict, "Died on .drives[38].attributes"
    assert result.drives[38].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3216001N300PGN""", "Died on +.drives[38].serial"
    assert result.drives[38].type == """block""", "Died on +.drives[38].type"
    assert result.drives[37].status == """active""", "Died on +.drives[37].status"
    assert result.drives[37].slot == 7, "Died on +.drives[37].slot"
    assert result.drives[37].capacity == 300069052416, "Died on +.drives[37].capacity"
    assert result.drives[37].node_id == 1, "Died on +.drives[37].node_id"
    assert result.drives[37].drive_id == 9, "Died on +.drives[37].drive_id"
    assert type(result.drives[37].attributes) is dict, "Died on .drives[37].attributes"
    assert result.drives[37].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3215032Y300PGN""", "Died on +.drives[37].serial"
    assert result.drives[37].type == """block""", "Died on +.drives[37].type"
    assert result.drives[36].status == """active""", "Died on +.drives[36].status"
    assert result.drives[36].slot == 6, "Died on +.drives[36].slot"
    assert result.drives[36].capacity == 300069052416, "Died on +.drives[36].capacity"
    assert result.drives[36].node_id == 1, "Died on +.drives[36].node_id"
    assert result.drives[36].drive_id == 8, "Died on +.drives[36].drive_id"
    assert type(result.drives[36].attributes) is dict, "Died on .drives[36].attributes"
    assert result.drives[36].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321502V9300PGN""", "Died on +.drives[36].serial"
    assert result.drives[36].type == """block""", "Died on +.drives[36].type"
    assert result.drives[35].status == """active""", "Died on +.drives[35].status"
    assert result.drives[35].slot == 5, "Died on +.drives[35].slot"
    assert result.drives[35].capacity == 300069052416, "Died on +.drives[35].capacity"
    assert result.drives[35].node_id == 1, "Died on +.drives[35].node_id"
    assert result.drives[35].drive_id == 7, "Died on +.drives[35].drive_id"
    assert type(result.drives[35].attributes) is dict, "Died on .drives[35].attributes"
    assert result.drives[35].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321502V3300PGN""", "Died on +.drives[35].serial"
    assert result.drives[35].type == """block""", "Died on +.drives[35].type"
    assert result.drives[34].status == """active""", "Died on +.drives[34].status"
    assert result.drives[34].slot == 4, "Died on +.drives[34].slot"
    assert result.drives[34].capacity == 300069052416, "Died on +.drives[34].capacity"
    assert result.drives[34].node_id == 1, "Died on +.drives[34].node_id"
    assert result.drives[34].drive_id == 6, "Died on +.drives[34].drive_id"
    assert type(result.drives[34].attributes) is dict, "Died on .drives[34].attributes"
    assert result.drives[34].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL32150137300PGN""", "Died on +.drives[34].serial"
    assert result.drives[34].type == """block""", "Died on +.drives[34].type"
    assert result.drives[33].status == """active""", "Died on +.drives[33].status"
    assert result.drives[33].slot == 3, "Died on +.drives[33].slot"
    assert result.drives[33].capacity == 300069052416, "Died on +.drives[33].capacity"
    assert result.drives[33].node_id == 1, "Died on +.drives[33].node_id"
    assert result.drives[33].drive_id == 5, "Died on +.drives[33].drive_id"
    assert type(result.drives[33].attributes) is dict, "Died on .drives[33].attributes"
    assert result.drives[33].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321503AL300PGN""", "Died on +.drives[33].serial"
    assert result.drives[33].type == """block""", "Died on +.drives[33].type"
    assert result.drives[32].status == """active""", "Died on +.drives[32].status"
    assert result.drives[32].slot == 2, "Died on +.drives[32].slot"
    assert result.drives[32].capacity == 300069052416, "Died on +.drives[32].capacity"
    assert result.drives[32].node_id == 1, "Died on +.drives[32].node_id"
    assert result.drives[32].drive_id == 4, "Died on +.drives[32].drive_id"
    assert type(result.drives[32].attributes) is dict, "Died on .drives[32].attributes"
    assert result.drives[32].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321502TN300PGN""", "Died on +.drives[32].serial"
    assert result.drives[32].type == """block""", "Died on +.drives[32].type"
    assert result.drives[31].status == """active""", "Died on +.drives[31].status"
    assert result.drives[31].slot == 1, "Died on +.drives[31].slot"
    assert result.drives[31].capacity == 300069052416, "Died on +.drives[31].capacity"
    assert result.drives[31].node_id == 1, "Died on +.drives[31].node_id"
    assert result.drives[31].drive_id == 3, "Died on +.drives[31].drive_id"
    assert type(result.drives[31].attributes) is dict, "Died on .drives[31].attributes"
    assert result.drives[31].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321503CP300PGN""", "Died on +.drives[31].serial"
    assert result.drives[31].type == """block""", "Died on +.drives[31].type"
    assert result.drives[30].status == """active""", "Died on +.drives[30].status"
    assert result.drives[30].slot == 0, "Died on +.drives[30].slot"
    assert result.drives[30].capacity == 300069052416, "Died on +.drives[30].capacity"
    assert result.drives[30].node_id == 1, "Died on +.drives[30].node_id"
    assert result.drives[30].drive_id == 2, "Died on +.drives[30].drive_id"
    assert type(result.drives[30].attributes) is dict, "Died on .drives[30].attributes"
    assert result.drives[30].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321600AV300PGN""", "Died on +.drives[30].serial"
    assert result.drives[30].type == """block""", "Died on +.drives[30].type"
    assert result.drives[29].status == """active""", "Died on +.drives[29].status"
    assert result.drives[29].slot == -1, "Died on +.drives[29].slot"
    assert result.drives[29].capacity == 299988156416, "Died on +.drives[29].capacity"
    assert result.drives[29].node_id == 1, "Died on +.drives[29].node_id"
    assert result.drives[29].drive_id == 1, "Died on +.drives[29].drive_id"
    assert type(result.drives[29].attributes) is dict, "Died on .drives[29].attributes"
    assert result.drives[29].serial == """scsi-SATA_VRFSD3400GNCVMT205044033-part4""", "Died on +.drives[29].serial"
    assert result.drives[29].type == """volume""", "Died on +.drives[29].type"
    assert result.drives[28].status == """active""", "Died on +.drives[28].status"
    assert result.drives[28].slot == 6, "Died on +.drives[28].slot"
    assert result.drives[28].capacity == 300069052416, "Died on +.drives[28].capacity"
    assert result.drives[28].node_id == 4, "Died on +.drives[28].node_id"
    assert result.drives[28].drive_id == 19, "Died on +.drives[28].drive_id"
    assert type(result.drives[28].attributes) is dict, "Died on .drives[28].attributes"
    assert result.drives[28].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3215016J300PGN""", "Died on +.drives[28].serial"
    assert result.drives[28].type == """block""", "Died on +.drives[28].type"
    assert result.drives[27].status == """active""", "Died on +.drives[27].status"
    assert result.drives[27].slot == 5, "Died on +.drives[27].slot"
    assert result.drives[27].capacity == 300069052416, "Died on +.drives[27].capacity"
    assert result.drives[27].node_id == 4, "Died on +.drives[27].node_id"
    assert result.drives[27].drive_id == 18, "Died on +.drives[27].drive_id"
    assert type(result.drives[27].attributes) is dict, "Died on .drives[27].attributes"
    assert result.drives[27].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321500Y0300PGN""", "Died on +.drives[27].serial"
    assert result.drives[27].type == """block""", "Died on +.drives[27].type"
    assert result.drives[26].status == """active""", "Died on +.drives[26].status"
    assert result.drives[26].slot == 9, "Died on +.drives[26].slot"
    assert result.drives[26].capacity == 300069052416, "Died on +.drives[26].capacity"
    assert result.drives[26].node_id == 2, "Died on +.drives[26].node_id"
    assert result.drives[26].drive_id == 39, "Died on +.drives[26].drive_id"
    assert type(result.drives[26].attributes) is dict, "Died on .drives[26].attributes"
    assert result.drives[26].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321500QY300PGN""", "Died on +.drives[26].serial"
    assert result.drives[26].type == """block""", "Died on +.drives[26].type"
    assert result.drives[25].status == """active""", "Died on +.drives[25].status"
    assert result.drives[25].slot == 4, "Died on +.drives[25].slot"
    assert result.drives[25].capacity == 300069052416, "Died on +.drives[25].capacity"
    assert result.drives[25].node_id == 4, "Died on +.drives[25].node_id"
    assert result.drives[25].drive_id == 17, "Died on +.drives[25].drive_id"
    assert type(result.drives[25].attributes) is dict, "Died on .drives[25].attributes"
    assert result.drives[25].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL32150325300PGN""", "Died on +.drives[25].serial"
    assert result.drives[25].type == """block""", "Died on +.drives[25].type"
    assert result.drives[24].status == """active""", "Died on +.drives[24].status"
    assert result.drives[24].slot == 8, "Died on +.drives[24].slot"
    assert result.drives[24].capacity == 300069052416, "Died on +.drives[24].capacity"
    assert result.drives[24].node_id == 2, "Died on +.drives[24].node_id"
    assert result.drives[24].drive_id == 38, "Died on +.drives[24].drive_id"
    assert type(result.drives[24].attributes) is dict, "Died on .drives[24].attributes"
    assert result.drives[24].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321502ZE300PGN""", "Died on +.drives[24].serial"
    assert result.drives[24].type == """block""", "Died on +.drives[24].type"
    assert result.drives[23].status == """active""", "Died on +.drives[23].status"
    assert result.drives[23].slot == 3, "Died on +.drives[23].slot"
    assert result.drives[23].capacity == 300069052416, "Died on +.drives[23].capacity"
    assert result.drives[23].node_id == 4, "Died on +.drives[23].node_id"
    assert result.drives[23].drive_id == 16, "Died on +.drives[23].drive_id"
    assert type(result.drives[23].attributes) is dict, "Died on .drives[23].attributes"
    assert result.drives[23].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321502EC300PGN""", "Died on +.drives[23].serial"
    assert result.drives[23].type == """block""", "Died on +.drives[23].type"
    assert result.drives[22].status == """active""", "Died on +.drives[22].status"
    assert result.drives[22].slot == 7, "Died on +.drives[22].slot"
    assert result.drives[22].capacity == 300069052416, "Died on +.drives[22].capacity"
    assert result.drives[22].node_id == 2, "Died on +.drives[22].node_id"
    assert result.drives[22].drive_id == 37, "Died on +.drives[22].drive_id"
    assert type(result.drives[22].attributes) is dict, "Died on .drives[22].attributes"
    assert result.drives[22].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3215030D300PGN""", "Died on +.drives[22].serial"
    assert result.drives[22].type == """block""", "Died on +.drives[22].type"
    assert result.drives[21].status == """active""", "Died on +.drives[21].status"
    assert result.drives[21].slot == 2, "Died on +.drives[21].slot"
    assert result.drives[21].capacity == 300069052416, "Died on +.drives[21].capacity"
    assert result.drives[21].node_id == 4, "Died on +.drives[21].node_id"
    assert result.drives[21].drive_id == 15, "Died on +.drives[21].drive_id"
    assert type(result.drives[21].attributes) is dict, "Died on .drives[21].attributes"
    assert result.drives[21].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321502U2300PGN""", "Died on +.drives[21].serial"
    assert result.drives[21].type == """block""", "Died on +.drives[21].type"
    assert result.drives[20].status == """active""", "Died on +.drives[20].status"
    assert result.drives[20].slot == 6, "Died on +.drives[20].slot"
    assert result.drives[20].capacity == 300069052416, "Died on +.drives[20].capacity"
    assert result.drives[20].node_id == 2, "Died on +.drives[20].node_id"
    assert result.drives[20].drive_id == 36, "Died on +.drives[20].drive_id"
    assert type(result.drives[20].attributes) is dict, "Died on .drives[20].attributes"
    assert result.drives[20].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321503J1300PGN""", "Died on +.drives[20].serial"
    assert result.drives[20].type == """block""", "Died on +.drives[20].type"
    assert result.drives[19].status == """active""", "Died on +.drives[19].status"
    assert result.drives[19].slot == 1, "Died on +.drives[19].slot"
    assert result.drives[19].capacity == 300069052416, "Died on +.drives[19].capacity"
    assert result.drives[19].node_id == 4, "Died on +.drives[19].node_id"
    assert result.drives[19].drive_id == 14, "Died on +.drives[19].drive_id"
    assert type(result.drives[19].attributes) is dict, "Died on .drives[19].attributes"
    assert result.drives[19].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL337505S2300PGN""", "Died on +.drives[19].serial"
    assert result.drives[19].type == """block""", "Died on +.drives[19].type"
    assert result.drives[18].status == """active""", "Died on +.drives[18].status"
    assert result.drives[18].slot == 5, "Died on +.drives[18].slot"
    assert result.drives[18].capacity == 300069052416, "Died on +.drives[18].capacity"
    assert result.drives[18].node_id == 2, "Died on +.drives[18].node_id"
    assert result.drives[18].drive_id == 35, "Died on +.drives[18].drive_id"
    assert type(result.drives[18].attributes) is dict, "Died on .drives[18].attributes"
    assert result.drives[18].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3215034E300PGN""", "Died on +.drives[18].serial"
    assert result.drives[18].type == """block""", "Died on +.drives[18].type"
    assert result.drives[17].status == """active""", "Died on +.drives[17].status"
    assert result.drives[17].slot == 0, "Died on +.drives[17].slot"
    assert result.drives[17].capacity == 300069052416, "Died on +.drives[17].capacity"
    assert result.drives[17].node_id == 4, "Died on +.drives[17].node_id"
    assert result.drives[17].drive_id == 13, "Died on +.drives[17].drive_id"
    assert type(result.drives[17].attributes) is dict, "Died on .drives[17].attributes"
    assert result.drives[17].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL32150156300PGN""", "Died on +.drives[17].serial"
    assert result.drives[17].type == """block""", "Died on +.drives[17].type"
    assert result.drives[16].status == """active""", "Died on +.drives[16].status"
    assert result.drives[16].slot == 4, "Died on +.drives[16].slot"
    assert result.drives[16].capacity == 300069052416, "Died on +.drives[16].capacity"
    assert result.drives[16].node_id == 3, "Died on +.drives[16].node_id"
    assert result.drives[16].drive_id == 34, "Died on +.drives[16].drive_id"
    assert type(result.drives[16].attributes) is dict, "Died on .drives[16].attributes"
    assert result.drives[16].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321503HW300PGN""", "Died on +.drives[16].serial"
    assert result.drives[16].type == """block""", "Died on +.drives[16].type"
    assert result.drives[15].status == """active""", "Died on +.drives[15].status"
    assert result.drives[15].slot == -1, "Died on +.drives[15].slot"
    assert result.drives[15].capacity == 299988156416, "Died on +.drives[15].capacity"
    assert result.drives[15].node_id == 4, "Died on +.drives[15].node_id"
    assert result.drives[15].drive_id == 12, "Died on +.drives[15].drive_id"
    assert type(result.drives[15].attributes) is dict, "Died on .drives[15].attributes"
    assert result.drives[15].serial == """scsi-SATA_VRFSD3400GNCVMT205044057-part4""", "Died on +.drives[15].serial"
    assert result.drives[15].type == """volume""", "Died on +.drives[15].type"
    assert result.drives[14].status == """active""", "Died on +.drives[14].status"
    assert result.drives[14].slot == 4, "Died on +.drives[14].slot"
    assert result.drives[14].capacity == 300069052416, "Died on +.drives[14].capacity"
    assert result.drives[14].node_id == 2, "Died on +.drives[14].node_id"
    assert result.drives[14].drive_id == 33, "Died on +.drives[14].drive_id"
    assert type(result.drives[14].attributes) is dict, "Died on .drives[14].attributes"
    assert result.drives[14].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3215010L300PGN""", "Died on +.drives[14].serial"
    assert result.drives[14].type == """block""", "Died on +.drives[14].type"
    assert result.drives[13].status == """active""", "Died on +.drives[13].status"
    assert result.drives[13].slot == 9, "Died on +.drives[13].slot"
    assert result.drives[13].capacity == 300069052416, "Died on +.drives[13].capacity"
    assert result.drives[13].node_id == 1, "Died on +.drives[13].node_id"
    assert result.drives[13].drive_id == 11, "Died on +.drives[13].drive_id"
    assert type(result.drives[13].attributes) is dict, "Died on .drives[13].attributes"
    assert result.drives[13].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321503D8300PGN""", "Died on +.drives[13].serial"
    assert result.drives[13].type == """block""", "Died on +.drives[13].type"
    assert result.drives[12].status == """active""", "Died on +.drives[12].status"
    assert result.drives[12].slot == 3, "Died on +.drives[12].slot"
    assert result.drives[12].capacity == 300069052416, "Died on +.drives[12].capacity"
    assert result.drives[12].node_id == 3, "Died on +.drives[12].node_id"
    assert result.drives[12].drive_id == 32, "Died on +.drives[12].drive_id"
    assert type(result.drives[12].attributes) is dict, "Died on .drives[12].attributes"
    assert result.drives[12].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321502Y4300PGN""", "Died on +.drives[12].serial"
    assert result.drives[12].type == """block""", "Died on +.drives[12].type"
    assert result.drives[11].status == """active""", "Died on +.drives[11].status"
    assert result.drives[11].slot == 8, "Died on +.drives[11].slot"
    assert result.drives[11].capacity == 300069052416, "Died on +.drives[11].capacity"
    assert result.drives[11].node_id == 1, "Died on +.drives[11].node_id"
    assert result.drives[11].drive_id == 10, "Died on +.drives[11].drive_id"
    assert type(result.drives[11].attributes) is dict, "Died on .drives[11].attributes"
    assert result.drives[11].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321503HY300PGN""", "Died on +.drives[11].serial"
    assert result.drives[11].type == """block""", "Died on +.drives[11].type"
    assert result.drives[10].status == """active""", "Died on +.drives[10].status"
    assert result.drives[10].slot == 3, "Died on +.drives[10].slot"
    assert result.drives[10].capacity == 300069052416, "Died on +.drives[10].capacity"
    assert result.drives[10].node_id == 2, "Died on +.drives[10].node_id"
    assert result.drives[10].drive_id == 31, "Died on +.drives[10].drive_id"
    assert type(result.drives[10].attributes) is dict, "Died on .drives[10].attributes"
    assert result.drives[10].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3215033Q300PGN""", "Died on +.drives[10].serial"
    assert result.drives[10].type == """block""", "Died on +.drives[10].type"
    assert result.drives[9].status == """active""", "Died on +.drives[9].status"
    assert result.drives[9].slot == 2, "Died on +.drives[9].slot"
    assert result.drives[9].capacity == 300069052416, "Died on +.drives[9].capacity"
    assert result.drives[9].node_id == 3, "Died on +.drives[9].node_id"
    assert result.drives[9].drive_id == 30, "Died on +.drives[9].drive_id"
    assert type(result.drives[9].attributes) is dict, "Died on .drives[9].attributes"
    assert result.drives[9].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321503JQ300PGN""", "Died on +.drives[9].serial"
    assert result.drives[9].type == """block""", "Died on +.drives[9].type"
    assert result.drives[8].status == """active""", "Died on +.drives[8].status"
    assert result.drives[8].slot == 2, "Died on +.drives[8].slot"
    assert result.drives[8].capacity == 300069052416, "Died on +.drives[8].capacity"
    assert result.drives[8].node_id == 2, "Died on +.drives[8].node_id"
    assert result.drives[8].drive_id == 29, "Died on +.drives[8].drive_id"
    assert type(result.drives[8].attributes) is dict, "Died on .drives[8].attributes"
    assert result.drives[8].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL32150386300PGN""", "Died on +.drives[8].serial"
    assert result.drives[8].type == """block""", "Died on +.drives[8].type"
    assert result.drives[7].status == """active""", "Died on +.drives[7].status"
    assert result.drives[7].slot == 1, "Died on +.drives[7].slot"
    assert result.drives[7].capacity == 300069052416, "Died on +.drives[7].capacity"
    assert result.drives[7].node_id == 3, "Died on +.drives[7].node_id"
    assert result.drives[7].drive_id == 28, "Died on +.drives[7].drive_id"
    assert type(result.drives[7].attributes) is dict, "Died on .drives[7].attributes"
    assert result.drives[7].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3215037B300PGN""", "Died on +.drives[7].serial"
    assert result.drives[7].type == """block""", "Died on +.drives[7].type"
    assert result.drives[6].status == """active""", "Died on +.drives[6].status"
    assert result.drives[6].slot == 0, "Died on +.drives[6].slot"
    assert result.drives[6].capacity == 300069052416, "Died on +.drives[6].capacity"
    assert result.drives[6].node_id == 3, "Died on +.drives[6].node_id"
    assert result.drives[6].drive_id == 27, "Died on +.drives[6].drive_id"
    assert type(result.drives[6].attributes) is dict, "Died on .drives[6].attributes"
    assert result.drives[6].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321503AS300PGN""", "Died on +.drives[6].serial"
    assert result.drives[6].type == """block""", "Died on +.drives[6].type"
    assert result.drives[5].status == """active""", "Died on +.drives[5].status"
    assert result.drives[5].slot == -1, "Died on +.drives[5].slot"
    assert result.drives[5].capacity == 299988156416, "Died on +.drives[5].capacity"
    assert result.drives[5].node_id == 3, "Died on +.drives[5].node_id"
    assert result.drives[5].drive_id == 26, "Died on +.drives[5].drive_id"
    assert type(result.drives[5].attributes) is dict, "Died on .drives[5].attributes"
    assert result.drives[5].serial == """scsi-SATA_VRFSD3400GNCVMT205044032-part4""", "Died on +.drives[5].serial"
    assert result.drives[5].type == """volume""", "Died on +.drives[5].type"
    assert result.drives[4].status == """active""", "Died on +.drives[4].status"
    assert result.drives[4].slot == 1, "Died on +.drives[4].slot"
    assert result.drives[4].capacity == 300069052416, "Died on +.drives[4].capacity"
    assert result.drives[4].node_id == 2, "Died on +.drives[4].node_id"
    assert result.drives[4].drive_id == 25, "Died on +.drives[4].drive_id"
    assert type(result.drives[4].attributes) is dict, "Died on .drives[4].attributes"
    assert result.drives[4].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL32160084300PGN""", "Died on +.drives[4].serial"
    assert result.drives[4].type == """block""", "Died on +.drives[4].type"
    assert result.drives[3].status == """active""", "Died on +.drives[3].status"
    assert result.drives[3].slot == 0, "Died on +.drives[3].slot"
    assert result.drives[3].capacity == 300069052416, "Died on +.drives[3].capacity"
    assert result.drives[3].node_id == 2, "Died on +.drives[3].node_id"
    assert result.drives[3].drive_id == 24, "Died on +.drives[3].drive_id"
    assert type(result.drives[3].attributes) is dict, "Died on .drives[3].attributes"
    assert result.drives[3].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL321502YJ300PGN""", "Died on +.drives[3].serial"
    assert result.drives[3].type == """block""", "Died on +.drives[3].type"
    assert result.drives[2].status == """active""", "Died on +.drives[2].status"
    assert result.drives[2].slot == -1, "Died on +.drives[2].slot"
    assert result.drives[2].capacity == 299988156416, "Died on +.drives[2].capacity"
    assert result.drives[2].node_id == 2, "Died on +.drives[2].node_id"
    assert result.drives[2].drive_id == 23, "Died on +.drives[2].drive_id"
    assert type(result.drives[2].attributes) is dict, "Died on .drives[2].attributes"
    assert result.drives[2].serial == """scsi-SATA_VRFSD3400GNCVMT204862670-part4""", "Died on +.drives[2].serial"
    assert result.drives[2].type == """volume""", "Died on +.drives[2].type"
    assert result.drives[1].status == """active""", "Died on +.drives[1].status"
    assert result.drives[1].slot == 9, "Died on +.drives[1].slot"
    assert result.drives[1].capacity == 300069052416, "Died on +.drives[1].capacity"
    assert result.drives[1].node_id == 3, "Died on +.drives[1].node_id"
    assert result.drives[1].drive_id == 44, "Died on +.drives[1].drive_id"
    assert type(result.drives[1].attributes) is dict, "Died on .drives[1].attributes"
    assert result.drives[1].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL3216000J300PGN""", "Died on +.drives[1].serial"
    assert result.drives[1].type == """block""", "Died on +.drives[1].type"
    assert result.drives[0].status == """active""", "Died on +.drives[0].status"
    assert result.drives[0].slot == 9, "Died on +.drives[0].slot"
    assert result.drives[0].capacity == 300069052416, "Died on +.drives[0].capacity"
    assert result.drives[0].node_id == 4, "Died on +.drives[0].node_id"
    assert result.drives[0].drive_id == 22, "Died on +.drives[0].drive_id"
    assert type(result.drives[0].attributes) is dict, "Died on .drives[0].attributes"
    assert result.drives[0].serial == """scsi-SATA_INTEL_SSDSC2BB3BTWL32150131300PGN""", "Died on +.drives[0].serial"
    assert result.drives[0].type == """block""", "Died on +.drives[0].type"

def test_list_node_fibre_channel_port_info_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListNodeFibreChannelPortInfo_v9.1_0)

    
    result = ef.list_node_fibre_channel_port_info()

def test_list_pending_nodes_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListPendingNodes_v9.1_0)

    
    result = ef.list_pending_nodes()
    assert result.pending_nodes[0].sip == """10.117.58.77""", "Died on +.pending_nodes[0].sip"
    assert result.pending_nodes[0].uuid == UUID("4C4C4544-0057-4710-8053-B2C04F4B3032"), "Died on .pending_nodes[0].uuid"
    assert result.pending_nodes[0].name == """NLABP1002""", "Died on +.pending_nodes[0].name"
    assert result.pending_nodes[0].sipi == """Bond10G""", "Died on +.pending_nodes[0].sipi"
    assert result.pending_nodes[0].assigned_node_id == 0, "Died on +.pending_nodes[0].assigned_node_id"
    assert result.pending_nodes[0].compatible == True, "Died on +.pending_nodes[0].compatible"
    assert result.pending_nodes[0].software_version == """9.1.0.28""", "Died on +.pending_nodes[0].software_version"
    assert result.pending_nodes[0].mipi == """Bond1G""", "Died on +.pending_nodes[0].mipi"
    assert result.pending_nodes[0].platform_info.node_type == """SF3010""", "Died on +.pending_nodes[0].platform_info.node_type"
    assert result.pending_nodes[0].platform_info.platform_config_version == """9.1.0.28""", "Died on +.pending_nodes[0].platform_info.platform_config_version"
    assert result.pending_nodes[0].platform_info.cpu_model == """Intel(R) Xeon(R) CPU E5-2640 0 @ 2.50GHz""", "Died on +.pending_nodes[0].platform_info.cpu_model"
    assert result.pending_nodes[0].platform_info.node_memory_gb == 72, "Died on +.pending_nodes[0].platform_info.node_memory_gb"
    assert result.pending_nodes[0].platform_info.chassis_type == """R620""", "Died on +.pending_nodes[0].platform_info.chassis_type"
    assert result.pending_nodes[0].mip == """10.117.56.77""", "Died on +.pending_nodes[0].mip"
    assert result.pending_nodes[0].cip == """10.117.58.77""", "Died on +.pending_nodes[0].cip"
    assert result.pending_nodes[0].cipi == """Bond10G""", "Died on +.pending_nodes[0].cipi"
    assert result.pending_nodes[0].pending_node_id == 2, "Died on +.pending_nodes[0].pending_node_id"

def test_list_snapshots_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListSnapshots_v9.1_0)

    
    volume_id = 42 # volume_id
    result = ef.list_snapshots()
    assert result.snapshots[0].status == """done""", "Died on +.snapshots[0].status"
    assert result.snapshots[0].name == """2016-12-30T17:39:49Z""", "Died on +.snapshots[0].name"
    assert result.snapshots[0].total_size == 1000341504, "Died on +.snapshots[0].total_size"
    assert result.snapshots[0].snapshot_uuid == UUID("057fafbc-c694-4f64-b6e2-953e19b391f0"), "Died on .snapshots[0].snapshot_uuid"
    assert result.snapshots[0].expiration_reason == """None""", "Died on +.snapshots[0].expiration_reason"
    assert result.snapshots[0].enable_remote_replication == False, "Died on +.snapshots[0].enable_remote_replication"
    assert result.snapshots[0].volume_id == 1, "Died on +.snapshots[0].volume_id"
    assert result.snapshots[0].create_time == """2016-12-30T17:39:49Z""", "Died on +.snapshots[0].create_time"
    assert result.snapshots[0].group_snapshot_uuid == UUID("00000000-0000-0000-0000-000000000000"), "Died on .snapshots[0].group_snapshot_uuid"
    assert type(result.snapshots[0].attributes) is dict, "Died on .snapshots[0].attributes"
    assert result.snapshots[0].snapshot_id == 4, "Died on +.snapshots[0].snapshot_id"
    assert result.snapshots[0].expiration_time is None, "Died on .snapshots[0].expiration_time"
    assert result.snapshots[0].checksum == """0xac880d347e45d6f0""", "Died on +.snapshots[0].checksum"
    assert result.snapshots[0].group_id == 0, "Died on +.snapshots[0].group_id"
    assert result.snapshots[0].virtual_volume_id is None, "Died on .snapshots[0].virtual_volume_id"

def test_list_snapshots_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListSnapshots_v9.1_1)

    
    volume_id = 42 # volume_id
    result = ef.list_snapshots()
    assert result.snapshots[4].status == """done""", "Died on +.snapshots[4].status"
    assert result.snapshots[4].name == """2017-01-14T23:52:02Z""", "Died on +.snapshots[4].name"
    assert result.snapshots[4].total_size == 500000882688, "Died on +.snapshots[4].total_size"
    assert result.snapshots[4].snapshot_uuid == UUID("b718a2d1-eaae-410f-9c2b-76d6e423aa81"), "Died on .snapshots[4].snapshot_uuid"
    assert result.snapshots[4].remote_statuses[0].volume_pair_uuid == UUID("88a7a08d-3d2e-438a-acc3-b1d1d87ca9d4"), "Died on .snapshots[4].remote_statuses[0].volume_pair_uuid"
    assert result.snapshots[4].remote_statuses[0].remote_status == """Syncing""", "Died on +.snapshots[4].remote_statuses[0].remote_status"
    assert result.snapshots[4].expiration_reason == """None""", "Died on +.snapshots[4].expiration_reason"
    assert result.snapshots[4].enable_remote_replication == True, "Died on +.snapshots[4].enable_remote_replication"
    assert result.snapshots[4].volume_id == 5, "Died on +.snapshots[4].volume_id"
    assert result.snapshots[4].create_time == """2017-01-14T23:52:02Z""", "Died on +.snapshots[4].create_time"
    assert result.snapshots[4].group_snapshot_uuid == UUID("00000000-0000-0000-0000-000000000000"), "Died on .snapshots[4].group_snapshot_uuid"
    assert type(result.snapshots[4].attributes) is dict, "Died on .snapshots[4].attributes"
    assert result.snapshots[4].snapshot_id == 10, "Died on +.snapshots[4].snapshot_id"
    assert result.snapshots[4].expiration_time is None, "Died on .snapshots[4].expiration_time"
    assert result.snapshots[4].checksum == """0x5acf6844477f30d6""", "Died on +.snapshots[4].checksum"
    assert result.snapshots[4].group_id == 0, "Died on +.snapshots[4].group_id"
    assert result.snapshots[4].virtual_volume_id is None, "Died on .snapshots[4].virtual_volume_id"
    assert result.snapshots[3].status == """done""", "Died on +.snapshots[3].status"
    assert result.snapshots[3].name == """2017-01-14T23:52:02Z""", "Died on +.snapshots[3].name"
    assert result.snapshots[3].total_size == 500000882688, "Died on +.snapshots[3].total_size"
    assert result.snapshots[3].snapshot_uuid == UUID("ca4d49ee-351e-4ae9-b6d8-0c41b7092160"), "Died on .snapshots[3].snapshot_uuid"
    assert result.snapshots[3].remote_statuses[0].volume_pair_uuid == UUID("e7a69aaf-3f23-4f3a-b023-68da92eb31df"), "Died on .snapshots[3].remote_statuses[0].volume_pair_uuid"
    assert result.snapshots[3].remote_statuses[0].remote_status == """Syncing""", "Died on +.snapshots[3].remote_statuses[0].remote_status"
    assert result.snapshots[3].expiration_reason == """None""", "Died on +.snapshots[3].expiration_reason"
    assert result.snapshots[3].enable_remote_replication == True, "Died on +.snapshots[3].enable_remote_replication"
    assert result.snapshots[3].volume_id == 4, "Died on +.snapshots[3].volume_id"
    assert result.snapshots[3].create_time == """2017-01-14T23:52:02Z""", "Died on +.snapshots[3].create_time"
    assert result.snapshots[3].group_snapshot_uuid == UUID("00000000-0000-0000-0000-000000000000"), "Died on .snapshots[3].group_snapshot_uuid"
    assert type(result.snapshots[3].attributes) is dict, "Died on .snapshots[3].attributes"
    assert result.snapshots[3].snapshot_id == 9, "Died on +.snapshots[3].snapshot_id"
    assert result.snapshots[3].expiration_time is None, "Died on .snapshots[3].expiration_time"
    assert result.snapshots[3].checksum == """0xdf78c5f4a14b4d45""", "Died on +.snapshots[3].checksum"
    assert result.snapshots[3].group_id == 0, "Died on +.snapshots[3].group_id"
    assert result.snapshots[3].virtual_volume_id is None, "Died on .snapshots[3].virtual_volume_id"
    assert result.snapshots[2].status == """done""", "Died on +.snapshots[2].status"
    assert result.snapshots[2].name == """2017-01-14T23:52:02Z""", "Died on +.snapshots[2].name"
    assert result.snapshots[2].total_size == 500000882688, "Died on +.snapshots[2].total_size"
    assert result.snapshots[2].snapshot_uuid == UUID("dc31232c-4db0-4118-9ce7-ae7bfcb4e1c1"), "Died on .snapshots[2].snapshot_uuid"
    assert result.snapshots[2].remote_statuses[0].volume_pair_uuid == UUID("b1fd1fb1-f20f-4497-b9ec-0d6ef7f97829"), "Died on .snapshots[2].remote_statuses[0].volume_pair_uuid"
    assert result.snapshots[2].remote_statuses[0].remote_status == """Syncing""", "Died on +.snapshots[2].remote_statuses[0].remote_status"
    assert result.snapshots[2].expiration_reason == """None""", "Died on +.snapshots[2].expiration_reason"
    assert result.snapshots[2].enable_remote_replication == True, "Died on +.snapshots[2].enable_remote_replication"
    assert result.snapshots[2].volume_id == 3, "Died on +.snapshots[2].volume_id"
    assert result.snapshots[2].create_time == """2017-01-14T23:52:02Z""", "Died on +.snapshots[2].create_time"
    assert result.snapshots[2].group_snapshot_uuid == UUID("00000000-0000-0000-0000-000000000000"), "Died on .snapshots[2].group_snapshot_uuid"
    assert type(result.snapshots[2].attributes) is dict, "Died on .snapshots[2].attributes"
    assert result.snapshots[2].snapshot_id == 8, "Died on +.snapshots[2].snapshot_id"
    assert result.snapshots[2].expiration_time is None, "Died on .snapshots[2].expiration_time"
    assert result.snapshots[2].checksum == """0x42e9d715be205840""", "Died on +.snapshots[2].checksum"
    assert result.snapshots[2].group_id == 0, "Died on +.snapshots[2].group_id"
    assert result.snapshots[2].virtual_volume_id is None, "Died on .snapshots[2].virtual_volume_id"
    assert result.snapshots[1].status == """done""", "Died on +.snapshots[1].status"
    assert result.snapshots[1].name == """2017-01-14T23:52:01Z""", "Died on +.snapshots[1].name"
    assert result.snapshots[1].total_size == 500000882688, "Died on +.snapshots[1].total_size"
    assert result.snapshots[1].snapshot_uuid == UUID("fc2fedfd-5a45-4009-b720-6667fec1cfe4"), "Died on .snapshots[1].snapshot_uuid"
    assert result.snapshots[1].remote_statuses[0].volume_pair_uuid == UUID("78cbabb7-38cf-4896-ba96-287926c63ba9"), "Died on .snapshots[1].remote_statuses[0].volume_pair_uuid"
    assert result.snapshots[1].remote_statuses[0].remote_status == """Syncing""", "Died on +.snapshots[1].remote_statuses[0].remote_status"
    assert result.snapshots[1].expiration_reason == """None""", "Died on +.snapshots[1].expiration_reason"
    assert result.snapshots[1].enable_remote_replication == True, "Died on +.snapshots[1].enable_remote_replication"
    assert result.snapshots[1].volume_id == 2, "Died on +.snapshots[1].volume_id"
    assert result.snapshots[1].create_time == """2017-01-14T23:52:01Z""", "Died on +.snapshots[1].create_time"
    assert result.snapshots[1].group_snapshot_uuid == UUID("00000000-0000-0000-0000-000000000000"), "Died on .snapshots[1].group_snapshot_uuid"
    assert type(result.snapshots[1].attributes) is dict, "Died on .snapshots[1].attributes"
    assert result.snapshots[1].snapshot_id == 7, "Died on +.snapshots[1].snapshot_id"
    assert result.snapshots[1].expiration_time is None, "Died on .snapshots[1].expiration_time"
    assert result.snapshots[1].checksum == """0xe85501d33efb58ae""", "Died on +.snapshots[1].checksum"
    assert result.snapshots[1].group_id == 0, "Died on +.snapshots[1].group_id"
    assert result.snapshots[1].virtual_volume_id is None, "Died on .snapshots[1].virtual_volume_id"
    assert result.snapshots[0].status == """done""", "Died on +.snapshots[0].status"
    assert result.snapshots[0].name == """2017-01-14T23:52:01Z""", "Died on +.snapshots[0].name"
    assert result.snapshots[0].total_size == 500000882688, "Died on +.snapshots[0].total_size"
    assert result.snapshots[0].snapshot_uuid == UUID("77700657-227e-4d11-9b1a-1502616091c1"), "Died on .snapshots[0].snapshot_uuid"
    assert result.snapshots[0].remote_statuses[0].volume_pair_uuid == UUID("0ac37a8a-e5f9-4d03-90e4-71c8937872fd"), "Died on .snapshots[0].remote_statuses[0].volume_pair_uuid"
    assert result.snapshots[0].remote_statuses[0].remote_status == """Syncing""", "Died on +.snapshots[0].remote_statuses[0].remote_status"
    assert result.snapshots[0].expiration_reason == """None""", "Died on +.snapshots[0].expiration_reason"
    assert result.snapshots[0].enable_remote_replication == True, "Died on +.snapshots[0].enable_remote_replication"
    assert result.snapshots[0].volume_id == 1, "Died on +.snapshots[0].volume_id"
    assert result.snapshots[0].create_time == """2017-01-14T23:52:01Z""", "Died on +.snapshots[0].create_time"
    assert result.snapshots[0].group_snapshot_uuid == UUID("00000000-0000-0000-0000-000000000000"), "Died on .snapshots[0].group_snapshot_uuid"
    assert type(result.snapshots[0].attributes) is dict, "Died on .snapshots[0].attributes"
    assert result.snapshots[0].snapshot_id == 6, "Died on +.snapshots[0].snapshot_id"
    assert result.snapshots[0].expiration_time is None, "Died on .snapshots[0].expiration_time"
    assert result.snapshots[0].checksum == """0x84d533f038835ae2""", "Died on +.snapshots[0].checksum"
    assert result.snapshots[0].group_id == 0, "Died on +.snapshots[0].group_id"
    assert result.snapshots[0].virtual_volume_id is None, "Died on .snapshots[0].virtual_volume_id"

def test_list_volume_access_groups_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListVolumeAccessGroups_v9.1_0)

    
    start_volume_access_group_id = 42 # start_volume_access_group_id
    limit = 42 # limit
    result = ef.list_volume_access_groups()
    assert result.volume_access_groups[4].name == """temporary-clone-vag""", "Died on +.volume_access_groups[4].name"
    assert result.volume_access_groups[4].initiator_ids[0] == 23, "Died on +.volume_access_groups[4].initiator_ids[0]"
    assert result.volume_access_groups[4].initiators[0] == """iqn.2010-01.net.solidfire.eng:rclt1v0003""", "Died on +.volume_access_groups[4].initiators[0]"
    assert type(result.volume_access_groups[4].attributes) is dict, "Died on .volume_access_groups[4].attributes"
    assert result.volume_access_groups[4].volume_access_group_id == 22, "Died on +.volume_access_groups[4].volume_access_group_id"
    assert result.volume_access_groups[3].name == """clone-suite-volume-set-2""", "Died on +.volume_access_groups[3].name"
    assert result.volume_access_groups[3].volumes[1] == 26, "Died on +.volume_access_groups[3].volumes[1]"
    assert result.volume_access_groups[3].volumes[0] == 25, "Died on +.volume_access_groups[3].volumes[0]"
    assert type(result.volume_access_groups[3].attributes) is dict, "Died on .volume_access_groups[3].attributes"
    assert result.volume_access_groups[3].volume_access_group_id == 4, "Died on +.volume_access_groups[3].volume_access_group_id"
    assert result.volume_access_groups[2].name == """clone-suite-volume-set-1""", "Died on +.volume_access_groups[2].name"
    assert result.volume_access_groups[2].volumes[7] == 24, "Died on +.volume_access_groups[2].volumes[7]"
    assert result.volume_access_groups[2].volumes[6] == 23, "Died on +.volume_access_groups[2].volumes[6]"
    assert result.volume_access_groups[2].volumes[5] == 22, "Died on +.volume_access_groups[2].volumes[5]"
    assert result.volume_access_groups[2].volumes[4] == 21, "Died on +.volume_access_groups[2].volumes[4]"
    assert result.volume_access_groups[2].volumes[3] == 20, "Died on +.volume_access_groups[2].volumes[3]"
    assert result.volume_access_groups[2].volumes[2] == 19, "Died on +.volume_access_groups[2].volumes[2]"
    assert result.volume_access_groups[2].volumes[1] == 18, "Died on +.volume_access_groups[2].volumes[1]"
    assert result.volume_access_groups[2].volumes[0] == 17, "Died on +.volume_access_groups[2].volumes[0]"
    assert type(result.volume_access_groups[2].attributes) is dict, "Died on .volume_access_groups[2].attributes"
    assert result.volume_access_groups[2].volume_access_group_id == 3, "Died on +.volume_access_groups[2].volume_access_group_id"
    assert result.volume_access_groups[1].name == """clone-suite-volume-set-0""", "Died on +.volume_access_groups[1].name"
    assert result.volume_access_groups[1].volumes[7] == 16, "Died on +.volume_access_groups[1].volumes[7]"
    assert result.volume_access_groups[1].volumes[6] == 15, "Died on +.volume_access_groups[1].volumes[6]"
    assert result.volume_access_groups[1].volumes[5] == 14, "Died on +.volume_access_groups[1].volumes[5]"
    assert result.volume_access_groups[1].volumes[4] == 13, "Died on +.volume_access_groups[1].volumes[4]"
    assert result.volume_access_groups[1].volumes[3] == 4, "Died on +.volume_access_groups[1].volumes[3]"
    assert result.volume_access_groups[1].volumes[2] == 3, "Died on +.volume_access_groups[1].volumes[2]"
    assert result.volume_access_groups[1].volumes[1] == 2, "Died on +.volume_access_groups[1].volumes[1]"
    assert result.volume_access_groups[1].volumes[0] == 1, "Died on +.volume_access_groups[1].volumes[0]"
    assert type(result.volume_access_groups[1].attributes) is dict, "Died on .volume_access_groups[1].attributes"
    assert result.volume_access_groups[1].volume_access_group_id == 2, "Died on +.volume_access_groups[1].volume_access_group_id"
    assert result.volume_access_groups[0].name == """clone-suite-bystanders""", "Died on +.volume_access_groups[0].name"
    assert result.volume_access_groups[0].initiator_ids[0] == 1, "Died on +.volume_access_groups[0].initiator_ids[0]"
    assert result.volume_access_groups[0].volumes[7] == 12, "Died on +.volume_access_groups[0].volumes[7]"
    assert result.volume_access_groups[0].volumes[6] == 11, "Died on +.volume_access_groups[0].volumes[6]"
    assert result.volume_access_groups[0].volumes[5] == 10, "Died on +.volume_access_groups[0].volumes[5]"
    assert result.volume_access_groups[0].volumes[4] == 9, "Died on +.volume_access_groups[0].volumes[4]"
    assert result.volume_access_groups[0].volumes[3] == 8, "Died on +.volume_access_groups[0].volumes[3]"
    assert result.volume_access_groups[0].volumes[2] == 7, "Died on +.volume_access_groups[0].volumes[2]"
    assert result.volume_access_groups[0].volumes[1] == 6, "Died on +.volume_access_groups[0].volumes[1]"
    assert result.volume_access_groups[0].volumes[0] == 5, "Died on +.volume_access_groups[0].volumes[0]"
    assert result.volume_access_groups[0].initiators[0] == """iqn.2010-01.net.solidfire.eng:rclt1v0002""", "Died on +.volume_access_groups[0].initiators[0]"
    assert type(result.volume_access_groups[0].attributes) is dict, "Died on .volume_access_groups[0].attributes"
    assert result.volume_access_groups[0].volume_access_group_id == 1, "Died on +.volume_access_groups[0].volume_access_group_id"

def test_list_volumes_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListVolumes_v8.4_0)

    
    start_volume_id = 42 # start_volume_id
    limit = 42 # limit
    volume_status = "" # volume_status
    accounts = 42 # accounts
    is_paired = True # is_paired
    volume_ids = 42 # volume_ids
    result = ef.list_volumes()

def test_list_volumes_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListVolumes_v8.7_0)

    
    start_volume_id = 42 # start_volume_id
    limit = 42 # limit
    volume_status = "" # volume_status
    accounts = 42 # accounts
    is_paired = True # is_paired
    volume_ids = 42 # volume_ids
    result = ef.list_volumes()

def test_list_volumes_for_account_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListVolumesForAccount_v9.1_0)

    
    account_id = 42 # account_id
    start_volume_id = 42 # start_volume_id
    limit = 42 # limit
    result = ef.list_volumes_for_account(account_id,)

def test_list_volumes_for_account_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListVolumesForAccount_v9.1_1)

    
    account_id = 42 # account_id
    start_volume_id = 42 # start_volume_id
    limit = 42 # limit
    result = ef.list_volumes_for_account(account_id,)
    assert result.volumes[9].status == """active""", "Died on +.volumes[9].status"
    assert result.volumes[9].enable512e == False, "Died on +.volumes[9].enable512e"
    assert result.volumes[9].qos.burst_iops == 15000, "Died on +.volumes[9].qos.burst_iops"
    assert result.volumes[9].qos.burst_time == 60, "Died on +.volumes[9].qos.burst_time"
    assert result.volumes[9].qos.min_iops == 100, "Died on +.volumes[9].qos.min_iops"
    assert result.volumes[9].qos.max_iops == 1500, "Died on +.volumes[9].qos.max_iops"
    assert result.volumes[9].name == """bystander-10""", "Died on +.volumes[9].name"
    assert result.volumes[9].scsi_naadevice_id == """6f47acc1000000006d63696b0000000a""", "Died on +.volumes[9].scsi_naadevice_id"
    assert result.volumes[9].total_size == 176000335872, "Died on +.volumes[9].total_size"
    assert result.volumes[9].block_size == 4096, "Died on +.volumes[9].block_size"
    assert result.volumes[9].scsi_euidevice_id == """6d63696b0000000af47acc0100000000""", "Died on +.volumes[9].scsi_euidevice_id"
    assert result.volumes[9].volume_id == 10, "Died on +.volumes[9].volume_id"
    assert result.volumes[9].access == """readWrite""", "Died on +.volumes[9].access"
    assert result.volumes[9].iqn == """iqn.2010-01.com.solidfire:mcik.bystander-10.10""", "Died on +.volumes[9].iqn"
    assert result.volumes[9].slice_count == 1, "Died on +.volumes[9].slice_count"
    assert type(result.volumes[9].attributes) is dict, "Died on .volumes[9].attributes"
    assert result.volumes[9].account_id == 1, "Died on +.volumes[9].account_id"
    assert result.volumes[9].create_time == """2017-01-03T22:55:37Z""", "Died on +.volumes[9].create_time"
    assert result.volumes[9].virtual_volume_id is None, "Died on .volumes[9].virtual_volume_id"
    assert result.volumes[8].status == """active""", "Died on +.volumes[8].status"
    assert result.volumes[8].enable512e == False, "Died on +.volumes[8].enable512e"
    assert result.volumes[8].qos.burst_iops == 15000, "Died on +.volumes[8].qos.burst_iops"
    assert result.volumes[8].qos.burst_time == 60, "Died on +.volumes[8].qos.burst_time"
    assert result.volumes[8].qos.min_iops == 100, "Died on +.volumes[8].qos.min_iops"
    assert result.volumes[8].qos.max_iops == 1500, "Died on +.volumes[8].qos.max_iops"
    assert result.volumes[8].name == """bystander-9""", "Died on +.volumes[8].name"
    assert result.volumes[8].scsi_naadevice_id == """6f47acc1000000006d63696b00000009""", "Died on +.volumes[8].scsi_naadevice_id"
    assert result.volumes[8].total_size == 176000335872, "Died on +.volumes[8].total_size"
    assert result.volumes[8].block_size == 4096, "Died on +.volumes[8].block_size"
    assert result.volumes[8].scsi_euidevice_id == """6d63696b00000009f47acc0100000000""", "Died on +.volumes[8].scsi_euidevice_id"
    assert result.volumes[8].volume_id == 9, "Died on +.volumes[8].volume_id"
    assert result.volumes[8].access == """readWrite""", "Died on +.volumes[8].access"
    assert result.volumes[8].iqn == """iqn.2010-01.com.solidfire:mcik.bystander-9.9""", "Died on +.volumes[8].iqn"
    assert result.volumes[8].slice_count == 1, "Died on +.volumes[8].slice_count"
    assert type(result.volumes[8].attributes) is dict, "Died on .volumes[8].attributes"
    assert result.volumes[8].account_id == 1, "Died on +.volumes[8].account_id"
    assert result.volumes[8].create_time == """2017-01-03T22:55:37Z""", "Died on +.volumes[8].create_time"
    assert result.volumes[8].virtual_volume_id is None, "Died on .volumes[8].virtual_volume_id"
    assert result.volumes[7].status == """active""", "Died on +.volumes[7].status"
    assert result.volumes[7].enable512e == False, "Died on +.volumes[7].enable512e"
    assert result.volumes[7].qos.burst_iops == 15000, "Died on +.volumes[7].qos.burst_iops"
    assert result.volumes[7].qos.burst_time == 60, "Died on +.volumes[7].qos.burst_time"
    assert result.volumes[7].qos.min_iops == 100, "Died on +.volumes[7].qos.min_iops"
    assert result.volumes[7].qos.max_iops == 1500, "Died on +.volumes[7].qos.max_iops"
    assert result.volumes[7].name == """bystander-8""", "Died on +.volumes[7].name"
    assert result.volumes[7].scsi_naadevice_id == """6f47acc1000000006d63696b00000008""", "Died on +.volumes[7].scsi_naadevice_id"
    assert result.volumes[7].total_size == 176000335872, "Died on +.volumes[7].total_size"
    assert result.volumes[7].block_size == 4096, "Died on +.volumes[7].block_size"
    assert result.volumes[7].scsi_euidevice_id == """6d63696b00000008f47acc0100000000""", "Died on +.volumes[7].scsi_euidevice_id"
    assert result.volumes[7].volume_id == 8, "Died on +.volumes[7].volume_id"
    assert result.volumes[7].access == """readWrite""", "Died on +.volumes[7].access"
    assert result.volumes[7].iqn == """iqn.2010-01.com.solidfire:mcik.bystander-8.8""", "Died on +.volumes[7].iqn"
    assert result.volumes[7].slice_count == 1, "Died on +.volumes[7].slice_count"
    assert type(result.volumes[7].attributes) is dict, "Died on .volumes[7].attributes"
    assert result.volumes[7].account_id == 1, "Died on +.volumes[7].account_id"
    assert result.volumes[7].create_time == """2017-01-03T22:55:36Z""", "Died on +.volumes[7].create_time"
    assert result.volumes[7].virtual_volume_id is None, "Died on .volumes[7].virtual_volume_id"
    assert result.volumes[6].status == """active""", "Died on +.volumes[6].status"
    assert result.volumes[6].enable512e == False, "Died on +.volumes[6].enable512e"
    assert result.volumes[6].qos.burst_iops == 15000, "Died on +.volumes[6].qos.burst_iops"
    assert result.volumes[6].qos.burst_time == 60, "Died on +.volumes[6].qos.burst_time"
    assert result.volumes[6].qos.min_iops == 100, "Died on +.volumes[6].qos.min_iops"
    assert result.volumes[6].qos.max_iops == 1500, "Died on +.volumes[6].qos.max_iops"
    assert result.volumes[6].name == """bystander-7""", "Died on +.volumes[6].name"
    assert result.volumes[6].scsi_naadevice_id == """6f47acc1000000006d63696b00000007""", "Died on +.volumes[6].scsi_naadevice_id"
    assert result.volumes[6].total_size == 176000335872, "Died on +.volumes[6].total_size"
    assert result.volumes[6].block_size == 4096, "Died on +.volumes[6].block_size"
    assert result.volumes[6].scsi_euidevice_id == """6d63696b00000007f47acc0100000000""", "Died on +.volumes[6].scsi_euidevice_id"
    assert result.volumes[6].volume_id == 7, "Died on +.volumes[6].volume_id"
    assert result.volumes[6].access == """readWrite""", "Died on +.volumes[6].access"
    assert result.volumes[6].iqn == """iqn.2010-01.com.solidfire:mcik.bystander-7.7""", "Died on +.volumes[6].iqn"
    assert result.volumes[6].slice_count == 1, "Died on +.volumes[6].slice_count"
    assert type(result.volumes[6].attributes) is dict, "Died on .volumes[6].attributes"
    assert result.volumes[6].account_id == 1, "Died on +.volumes[6].account_id"
    assert result.volumes[6].create_time == """2017-01-03T22:55:36Z""", "Died on +.volumes[6].create_time"
    assert result.volumes[6].virtual_volume_id is None, "Died on .volumes[6].virtual_volume_id"
    assert result.volumes[5].status == """active""", "Died on +.volumes[5].status"
    assert result.volumes[5].enable512e == False, "Died on +.volumes[5].enable512e"
    assert result.volumes[5].qos.burst_iops == 15000, "Died on +.volumes[5].qos.burst_iops"
    assert result.volumes[5].qos.burst_time == 60, "Died on +.volumes[5].qos.burst_time"
    assert result.volumes[5].qos.min_iops == 100, "Died on +.volumes[5].qos.min_iops"
    assert result.volumes[5].qos.max_iops == 1500, "Died on +.volumes[5].qos.max_iops"
    assert result.volumes[5].name == """bystander-6""", "Died on +.volumes[5].name"
    assert result.volumes[5].scsi_naadevice_id == """6f47acc1000000006d63696b00000006""", "Died on +.volumes[5].scsi_naadevice_id"
    assert result.volumes[5].total_size == 176000335872, "Died on +.volumes[5].total_size"
    assert result.volumes[5].block_size == 4096, "Died on +.volumes[5].block_size"
    assert result.volumes[5].scsi_euidevice_id == """6d63696b00000006f47acc0100000000""", "Died on +.volumes[5].scsi_euidevice_id"
    assert result.volumes[5].volume_id == 6, "Died on +.volumes[5].volume_id"
    assert result.volumes[5].access == """readWrite""", "Died on +.volumes[5].access"
    assert result.volumes[5].iqn == """iqn.2010-01.com.solidfire:mcik.bystander-6.6""", "Died on +.volumes[5].iqn"
    assert result.volumes[5].slice_count == 1, "Died on +.volumes[5].slice_count"
    assert type(result.volumes[5].attributes) is dict, "Died on .volumes[5].attributes"
    assert result.volumes[5].account_id == 1, "Died on +.volumes[5].account_id"
    assert result.volumes[5].create_time == """2017-01-03T22:55:36Z""", "Died on +.volumes[5].create_time"
    assert result.volumes[5].virtual_volume_id is None, "Died on .volumes[5].virtual_volume_id"
    assert result.volumes[4].status == """active""", "Died on +.volumes[4].status"
    assert result.volumes[4].enable512e == False, "Died on +.volumes[4].enable512e"
    assert result.volumes[4].qos.burst_iops == 15000, "Died on +.volumes[4].qos.burst_iops"
    assert result.volumes[4].qos.burst_time == 60, "Died on +.volumes[4].qos.burst_time"
    assert result.volumes[4].qos.min_iops == 100, "Died on +.volumes[4].qos.min_iops"
    assert result.volumes[4].qos.max_iops == 1500, "Died on +.volumes[4].qos.max_iops"
    assert result.volumes[4].name == """bystander-5""", "Died on +.volumes[4].name"
    assert result.volumes[4].scsi_naadevice_id == """6f47acc1000000006d63696b00000005""", "Died on +.volumes[4].scsi_naadevice_id"
    assert result.volumes[4].total_size == 176000335872, "Died on +.volumes[4].total_size"
    assert result.volumes[4].block_size == 4096, "Died on +.volumes[4].block_size"
    assert result.volumes[4].scsi_euidevice_id == """6d63696b00000005f47acc0100000000""", "Died on +.volumes[4].scsi_euidevice_id"
    assert result.volumes[4].volume_id == 5, "Died on +.volumes[4].volume_id"
    assert result.volumes[4].access == """readWrite""", "Died on +.volumes[4].access"
    assert result.volumes[4].iqn == """iqn.2010-01.com.solidfire:mcik.bystander-5.5""", "Died on +.volumes[4].iqn"
    assert result.volumes[4].slice_count == 1, "Died on +.volumes[4].slice_count"
    assert type(result.volumes[4].attributes) is dict, "Died on .volumes[4].attributes"
    assert result.volumes[4].account_id == 1, "Died on +.volumes[4].account_id"
    assert result.volumes[4].create_time == """2017-01-03T22:55:36Z""", "Died on +.volumes[4].create_time"
    assert result.volumes[4].virtual_volume_id is None, "Died on .volumes[4].virtual_volume_id"
    assert result.volumes[3].status == """active""", "Died on +.volumes[3].status"
    assert result.volumes[3].enable512e == False, "Died on +.volumes[3].enable512e"
    assert result.volumes[3].qos.burst_iops == 15000, "Died on +.volumes[3].qos.burst_iops"
    assert result.volumes[3].qos.burst_time == 60, "Died on +.volumes[3].qos.burst_time"
    assert result.volumes[3].qos.min_iops == 100, "Died on +.volumes[3].qos.min_iops"
    assert result.volumes[3].qos.max_iops == 1500, "Died on +.volumes[3].qos.max_iops"
    assert result.volumes[3].name == """bystander-4""", "Died on +.volumes[3].name"
    assert result.volumes[3].scsi_naadevice_id == """6f47acc1000000006d63696b00000004""", "Died on +.volumes[3].scsi_naadevice_id"
    assert result.volumes[3].total_size == 176000335872, "Died on +.volumes[3].total_size"
    assert result.volumes[3].block_size == 4096, "Died on +.volumes[3].block_size"
    assert result.volumes[3].scsi_euidevice_id == """6d63696b00000004f47acc0100000000""", "Died on +.volumes[3].scsi_euidevice_id"
    assert result.volumes[3].volume_id == 4, "Died on +.volumes[3].volume_id"
    assert result.volumes[3].access == """readWrite""", "Died on +.volumes[3].access"
    assert result.volumes[3].iqn == """iqn.2010-01.com.solidfire:mcik.bystander-4.4""", "Died on +.volumes[3].iqn"
    assert result.volumes[3].slice_count == 1, "Died on +.volumes[3].slice_count"
    assert type(result.volumes[3].attributes) is dict, "Died on .volumes[3].attributes"
    assert result.volumes[3].account_id == 1, "Died on +.volumes[3].account_id"
    assert result.volumes[3].create_time == """2017-01-03T22:55:36Z""", "Died on +.volumes[3].create_time"
    assert result.volumes[3].virtual_volume_id is None, "Died on .volumes[3].virtual_volume_id"
    assert result.volumes[2].status == """active""", "Died on +.volumes[2].status"
    assert result.volumes[2].enable512e == False, "Died on +.volumes[2].enable512e"
    assert result.volumes[2].qos.burst_iops == 15000, "Died on +.volumes[2].qos.burst_iops"
    assert result.volumes[2].qos.burst_time == 60, "Died on +.volumes[2].qos.burst_time"
    assert result.volumes[2].qos.min_iops == 100, "Died on +.volumes[2].qos.min_iops"
    assert result.volumes[2].qos.max_iops == 1500, "Died on +.volumes[2].qos.max_iops"
    assert result.volumes[2].name == """bystander-3""", "Died on +.volumes[2].name"
    assert result.volumes[2].scsi_naadevice_id == """6f47acc1000000006d63696b00000003""", "Died on +.volumes[2].scsi_naadevice_id"
    assert result.volumes[2].total_size == 176000335872, "Died on +.volumes[2].total_size"
    assert result.volumes[2].block_size == 4096, "Died on +.volumes[2].block_size"
    assert result.volumes[2].scsi_euidevice_id == """6d63696b00000003f47acc0100000000""", "Died on +.volumes[2].scsi_euidevice_id"
    assert result.volumes[2].volume_id == 3, "Died on +.volumes[2].volume_id"
    assert result.volumes[2].access == """readWrite""", "Died on +.volumes[2].access"
    assert result.volumes[2].iqn == """iqn.2010-01.com.solidfire:mcik.bystander-3.3""", "Died on +.volumes[2].iqn"
    assert result.volumes[2].slice_count == 1, "Died on +.volumes[2].slice_count"
    assert type(result.volumes[2].attributes) is dict, "Died on .volumes[2].attributes"
    assert result.volumes[2].account_id == 1, "Died on +.volumes[2].account_id"
    assert result.volumes[2].create_time == """2017-01-03T22:55:36Z""", "Died on +.volumes[2].create_time"
    assert result.volumes[2].virtual_volume_id is None, "Died on .volumes[2].virtual_volume_id"
    assert result.volumes[1].status == """active""", "Died on +.volumes[1].status"
    assert result.volumes[1].enable512e == False, "Died on +.volumes[1].enable512e"
    assert result.volumes[1].qos.burst_iops == 15000, "Died on +.volumes[1].qos.burst_iops"
    assert result.volumes[1].qos.burst_time == 60, "Died on +.volumes[1].qos.burst_time"
    assert result.volumes[1].qos.min_iops == 100, "Died on +.volumes[1].qos.min_iops"
    assert result.volumes[1].qos.max_iops == 1500, "Died on +.volumes[1].qos.max_iops"
    assert result.volumes[1].name == """bystander-2""", "Died on +.volumes[1].name"
    assert result.volumes[1].scsi_naadevice_id == """6f47acc1000000006d63696b00000002""", "Died on +.volumes[1].scsi_naadevice_id"
    assert result.volumes[1].total_size == 176000335872, "Died on +.volumes[1].total_size"
    assert result.volumes[1].block_size == 4096, "Died on +.volumes[1].block_size"
    assert result.volumes[1].scsi_euidevice_id == """6d63696b00000002f47acc0100000000""", "Died on +.volumes[1].scsi_euidevice_id"
    assert result.volumes[1].volume_id == 2, "Died on +.volumes[1].volume_id"
    assert result.volumes[1].access == """readWrite""", "Died on +.volumes[1].access"
    assert result.volumes[1].iqn == """iqn.2010-01.com.solidfire:mcik.bystander-2.2""", "Died on +.volumes[1].iqn"
    assert result.volumes[1].slice_count == 1, "Died on +.volumes[1].slice_count"
    assert type(result.volumes[1].attributes) is dict, "Died on .volumes[1].attributes"
    assert result.volumes[1].account_id == 1, "Died on +.volumes[1].account_id"
    assert result.volumes[1].create_time == """2017-01-03T22:55:36Z""", "Died on +.volumes[1].create_time"
    assert result.volumes[1].virtual_volume_id is None, "Died on .volumes[1].virtual_volume_id"
    assert result.volumes[0].status == """active""", "Died on +.volumes[0].status"
    assert result.volumes[0].enable512e == False, "Died on +.volumes[0].enable512e"
    assert result.volumes[0].qos.burst_iops == 15000, "Died on +.volumes[0].qos.burst_iops"
    assert result.volumes[0].qos.burst_time == 60, "Died on +.volumes[0].qos.burst_time"
    assert result.volumes[0].qos.min_iops == 100, "Died on +.volumes[0].qos.min_iops"
    assert result.volumes[0].qos.max_iops == 1500, "Died on +.volumes[0].qos.max_iops"
    assert result.volumes[0].name == """bystander-1""", "Died on +.volumes[0].name"
    assert result.volumes[0].scsi_naadevice_id == """6f47acc1000000006d63696b00000001""", "Died on +.volumes[0].scsi_naadevice_id"
    assert result.volumes[0].total_size == 176000335872, "Died on +.volumes[0].total_size"
    assert result.volumes[0].block_size == 4096, "Died on +.volumes[0].block_size"
    assert result.volumes[0].scsi_euidevice_id == """6d63696b00000001f47acc0100000000""", "Died on +.volumes[0].scsi_euidevice_id"
    assert result.volumes[0].volume_id == 1, "Died on +.volumes[0].volume_id"
    assert result.volumes[0].access == """readWrite""", "Died on +.volumes[0].access"
    assert result.volumes[0].iqn == """iqn.2010-01.com.solidfire:mcik.bystander-1.1""", "Died on +.volumes[0].iqn"
    assert result.volumes[0].slice_count == 1, "Died on +.volumes[0].slice_count"
    assert type(result.volumes[0].attributes) is dict, "Died on .volumes[0].attributes"
    assert result.volumes[0].account_id == 1, "Died on +.volumes[0].account_id"
    assert result.volumes[0].create_time == """2017-01-03T22:55:36Z""", "Died on +.volumes[0].create_time"
    assert result.volumes[0].virtual_volume_id is None, "Died on .volumes[0].virtual_volume_id"

def test_list_volumes_for_account_v9.1_2():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ListVolumesForAccount_v9.1_2)

    
    account_id = 42 # account_id
    start_volume_id = 42 # start_volume_id
    limit = 42 # limit
    result = ef.list_volumes_for_account(account_id,)
    assert result.volumes[199].status == """active""", "Died on +.volumes[199].status"
    assert result.volumes[199].enable512e == False, "Died on +.volumes[199].enable512e"
    assert result.volumes[199].qos.burst_iops == 15000, "Died on +.volumes[199].qos.burst_iops"
    assert result.volumes[199].qos.burst_time == 60, "Died on +.volumes[199].qos.burst_time"
    assert result.volumes[199].qos.min_iops == 100, "Died on +.volumes[199].qos.min_iops"
    assert result.volumes[199].qos.max_iops == 15000, "Died on +.volumes[199].qos.max_iops"
    assert result.volumes[199].name == """snapshots-source-200""", "Died on +.volumes[199].name"
    assert result.volumes[199].volume_access_groups[0] == 4, "Died on +.volumes[199].volume_access_groups[0]"
    assert result.volumes[199].scsi_naadevice_id == """6f47acc1000000006d696434000002bc""", "Died on +.volumes[199].scsi_naadevice_id"
    assert result.volumes[199].total_size == 5000658944, "Died on +.volumes[199].total_size"
    assert result.volumes[199].block_size == 4096, "Died on +.volumes[199].block_size"
    assert result.volumes[199].scsi_euidevice_id == """6d696434000002bcf47acc0100000000""", "Died on +.volumes[199].scsi_euidevice_id"
    assert result.volumes[199].volume_id == 700, "Died on +.volumes[199].volume_id"
    assert result.volumes[199].access == """readWrite""", "Died on +.volumes[199].access"
    assert result.volumes[199].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-200.700""", "Died on +.volumes[199].iqn"
    assert result.volumes[199].slice_count == 1, "Died on +.volumes[199].slice_count"
    assert type(result.volumes[199].attributes) is dict, "Died on .volumes[199].attributes"
    assert result.volumes[199].volume_pairs[0].volume_pair_uuid == UUID("d7fe9f6e-4094-43ae-a5c0-23acdaa526ab"), "Died on .volumes[199].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[199].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[199].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[199].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[199].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[199].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[199].volume_pairs[0].remote_replication.state"
    assert result.volumes[199].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[199].volume_pairs[0].remote_replication.mode"
    assert result.volumes[199].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[199].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[199].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[199].volume_pairs[0].cluster_pair_id"
    assert result.volumes[199].volume_pairs[0].remote_volume_id == 1200, "Died on +.volumes[199].volume_pairs[0].remote_volume_id"
    assert result.volumes[199].volume_pairs[0].remote_volume_name == """snap-target-200""", "Died on +.volumes[199].volume_pairs[0].remote_volume_name"
    assert result.volumes[199].volume_pairs[0].remote_slice_id == 1200, "Died on +.volumes[199].volume_pairs[0].remote_slice_id"
    assert result.volumes[199].account_id == 4, "Died on +.volumes[199].account_id"
    assert result.volumes[199].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[199].create_time"
    assert result.volumes[199].virtual_volume_id is None, "Died on .volumes[199].virtual_volume_id"
    assert result.volumes[198].status == """active""", "Died on +.volumes[198].status"
    assert result.volumes[198].enable512e == False, "Died on +.volumes[198].enable512e"
    assert result.volumes[198].qos.burst_iops == 15000, "Died on +.volumes[198].qos.burst_iops"
    assert result.volumes[198].qos.burst_time == 60, "Died on +.volumes[198].qos.burst_time"
    assert result.volumes[198].qos.min_iops == 100, "Died on +.volumes[198].qos.min_iops"
    assert result.volumes[198].qos.max_iops == 15000, "Died on +.volumes[198].qos.max_iops"
    assert result.volumes[198].name == """snapshots-source-199""", "Died on +.volumes[198].name"
    assert result.volumes[198].volume_access_groups[0] == 4, "Died on +.volumes[198].volume_access_groups[0]"
    assert result.volumes[198].scsi_naadevice_id == """6f47acc1000000006d696434000002bb""", "Died on +.volumes[198].scsi_naadevice_id"
    assert result.volumes[198].total_size == 5000658944, "Died on +.volumes[198].total_size"
    assert result.volumes[198].block_size == 4096, "Died on +.volumes[198].block_size"
    assert result.volumes[198].scsi_euidevice_id == """6d696434000002bbf47acc0100000000""", "Died on +.volumes[198].scsi_euidevice_id"
    assert result.volumes[198].volume_id == 699, "Died on +.volumes[198].volume_id"
    assert result.volumes[198].access == """readWrite""", "Died on +.volumes[198].access"
    assert result.volumes[198].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-199.699""", "Died on +.volumes[198].iqn"
    assert result.volumes[198].slice_count == 1, "Died on +.volumes[198].slice_count"
    assert type(result.volumes[198].attributes) is dict, "Died on .volumes[198].attributes"
    assert result.volumes[198].volume_pairs[0].volume_pair_uuid == UUID("58daf555-6ebd-4169-9c4b-b20b5e5a054c"), "Died on .volumes[198].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[198].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[198].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[198].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[198].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[198].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[198].volume_pairs[0].remote_replication.state"
    assert result.volumes[198].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[198].volume_pairs[0].remote_replication.mode"
    assert result.volumes[198].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[198].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[198].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[198].volume_pairs[0].cluster_pair_id"
    assert result.volumes[198].volume_pairs[0].remote_volume_id == 1199, "Died on +.volumes[198].volume_pairs[0].remote_volume_id"
    assert result.volumes[198].volume_pairs[0].remote_volume_name == """snap-target-199""", "Died on +.volumes[198].volume_pairs[0].remote_volume_name"
    assert result.volumes[198].volume_pairs[0].remote_slice_id == 1199, "Died on +.volumes[198].volume_pairs[0].remote_slice_id"
    assert result.volumes[198].account_id == 4, "Died on +.volumes[198].account_id"
    assert result.volumes[198].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[198].create_time"
    assert result.volumes[198].virtual_volume_id is None, "Died on .volumes[198].virtual_volume_id"
    assert result.volumes[197].status == """active""", "Died on +.volumes[197].status"
    assert result.volumes[197].enable512e == False, "Died on +.volumes[197].enable512e"
    assert result.volumes[197].qos.burst_iops == 15000, "Died on +.volumes[197].qos.burst_iops"
    assert result.volumes[197].qos.burst_time == 60, "Died on +.volumes[197].qos.burst_time"
    assert result.volumes[197].qos.min_iops == 100, "Died on +.volumes[197].qos.min_iops"
    assert result.volumes[197].qos.max_iops == 15000, "Died on +.volumes[197].qos.max_iops"
    assert result.volumes[197].name == """snapshots-source-198""", "Died on +.volumes[197].name"
    assert result.volumes[197].volume_access_groups[0] == 4, "Died on +.volumes[197].volume_access_groups[0]"
    assert result.volumes[197].scsi_naadevice_id == """6f47acc1000000006d696434000002ba""", "Died on +.volumes[197].scsi_naadevice_id"
    assert result.volumes[197].total_size == 5000658944, "Died on +.volumes[197].total_size"
    assert result.volumes[197].block_size == 4096, "Died on +.volumes[197].block_size"
    assert result.volumes[197].scsi_euidevice_id == """6d696434000002baf47acc0100000000""", "Died on +.volumes[197].scsi_euidevice_id"
    assert result.volumes[197].volume_id == 698, "Died on +.volumes[197].volume_id"
    assert result.volumes[197].access == """readWrite""", "Died on +.volumes[197].access"
    assert result.volumes[197].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-198.698""", "Died on +.volumes[197].iqn"
    assert result.volumes[197].slice_count == 1, "Died on +.volumes[197].slice_count"
    assert type(result.volumes[197].attributes) is dict, "Died on .volumes[197].attributes"
    assert result.volumes[197].volume_pairs[0].volume_pair_uuid == UUID("2e6444a3-ea7d-4113-b362-39878ec2b95c"), "Died on .volumes[197].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[197].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[197].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[197].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[197].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[197].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[197].volume_pairs[0].remote_replication.state"
    assert result.volumes[197].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[197].volume_pairs[0].remote_replication.mode"
    assert result.volumes[197].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[197].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[197].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[197].volume_pairs[0].cluster_pair_id"
    assert result.volumes[197].volume_pairs[0].remote_volume_id == 1198, "Died on +.volumes[197].volume_pairs[0].remote_volume_id"
    assert result.volumes[197].volume_pairs[0].remote_volume_name == """snap-target-198""", "Died on +.volumes[197].volume_pairs[0].remote_volume_name"
    assert result.volumes[197].volume_pairs[0].remote_slice_id == 1198, "Died on +.volumes[197].volume_pairs[0].remote_slice_id"
    assert result.volumes[197].account_id == 4, "Died on +.volumes[197].account_id"
    assert result.volumes[197].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[197].create_time"
    assert result.volumes[197].virtual_volume_id is None, "Died on .volumes[197].virtual_volume_id"
    assert result.volumes[196].status == """active""", "Died on +.volumes[196].status"
    assert result.volumes[196].enable512e == False, "Died on +.volumes[196].enable512e"
    assert result.volumes[196].qos.burst_iops == 15000, "Died on +.volumes[196].qos.burst_iops"
    assert result.volumes[196].qos.burst_time == 60, "Died on +.volumes[196].qos.burst_time"
    assert result.volumes[196].qos.min_iops == 100, "Died on +.volumes[196].qos.min_iops"
    assert result.volumes[196].qos.max_iops == 15000, "Died on +.volumes[196].qos.max_iops"
    assert result.volumes[196].name == """snapshots-source-197""", "Died on +.volumes[196].name"
    assert result.volumes[196].volume_access_groups[0] == 4, "Died on +.volumes[196].volume_access_groups[0]"
    assert result.volumes[196].scsi_naadevice_id == """6f47acc1000000006d696434000002b9""", "Died on +.volumes[196].scsi_naadevice_id"
    assert result.volumes[196].total_size == 5000658944, "Died on +.volumes[196].total_size"
    assert result.volumes[196].block_size == 4096, "Died on +.volumes[196].block_size"
    assert result.volumes[196].scsi_euidevice_id == """6d696434000002b9f47acc0100000000""", "Died on +.volumes[196].scsi_euidevice_id"
    assert result.volumes[196].volume_id == 697, "Died on +.volumes[196].volume_id"
    assert result.volumes[196].access == """readWrite""", "Died on +.volumes[196].access"
    assert result.volumes[196].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-197.697""", "Died on +.volumes[196].iqn"
    assert result.volumes[196].slice_count == 1, "Died on +.volumes[196].slice_count"
    assert type(result.volumes[196].attributes) is dict, "Died on .volumes[196].attributes"
    assert result.volumes[196].volume_pairs[0].volume_pair_uuid == UUID("a60efafb-af05-4f9e-93cf-2aaf83e25e82"), "Died on .volumes[196].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[196].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[196].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[196].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[196].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[196].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[196].volume_pairs[0].remote_replication.state"
    assert result.volumes[196].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[196].volume_pairs[0].remote_replication.mode"
    assert result.volumes[196].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[196].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[196].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[196].volume_pairs[0].cluster_pair_id"
    assert result.volumes[196].volume_pairs[0].remote_volume_id == 1197, "Died on +.volumes[196].volume_pairs[0].remote_volume_id"
    assert result.volumes[196].volume_pairs[0].remote_volume_name == """snap-target-197""", "Died on +.volumes[196].volume_pairs[0].remote_volume_name"
    assert result.volumes[196].volume_pairs[0].remote_slice_id == 1197, "Died on +.volumes[196].volume_pairs[0].remote_slice_id"
    assert result.volumes[196].account_id == 4, "Died on +.volumes[196].account_id"
    assert result.volumes[196].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[196].create_time"
    assert result.volumes[196].virtual_volume_id is None, "Died on .volumes[196].virtual_volume_id"
    assert result.volumes[195].status == """active""", "Died on +.volumes[195].status"
    assert result.volumes[195].enable512e == False, "Died on +.volumes[195].enable512e"
    assert result.volumes[195].qos.burst_iops == 15000, "Died on +.volumes[195].qos.burst_iops"
    assert result.volumes[195].qos.burst_time == 60, "Died on +.volumes[195].qos.burst_time"
    assert result.volumes[195].qos.min_iops == 100, "Died on +.volumes[195].qos.min_iops"
    assert result.volumes[195].qos.max_iops == 15000, "Died on +.volumes[195].qos.max_iops"
    assert result.volumes[195].name == """snapshots-source-196""", "Died on +.volumes[195].name"
    assert result.volumes[195].volume_access_groups[0] == 4, "Died on +.volumes[195].volume_access_groups[0]"
    assert result.volumes[195].scsi_naadevice_id == """6f47acc1000000006d696434000002b8""", "Died on +.volumes[195].scsi_naadevice_id"
    assert result.volumes[195].total_size == 5000658944, "Died on +.volumes[195].total_size"
    assert result.volumes[195].block_size == 4096, "Died on +.volumes[195].block_size"
    assert result.volumes[195].scsi_euidevice_id == """6d696434000002b8f47acc0100000000""", "Died on +.volumes[195].scsi_euidevice_id"
    assert result.volumes[195].volume_id == 696, "Died on +.volumes[195].volume_id"
    assert result.volumes[195].access == """readWrite""", "Died on +.volumes[195].access"
    assert result.volumes[195].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-196.696""", "Died on +.volumes[195].iqn"
    assert result.volumes[195].slice_count == 1, "Died on +.volumes[195].slice_count"
    assert type(result.volumes[195].attributes) is dict, "Died on .volumes[195].attributes"
    assert result.volumes[195].volume_pairs[0].volume_pair_uuid == UUID("66ba8f40-be24-488f-a473-0972976060b0"), "Died on .volumes[195].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[195].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[195].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[195].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[195].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[195].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[195].volume_pairs[0].remote_replication.state"
    assert result.volumes[195].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[195].volume_pairs[0].remote_replication.mode"
    assert result.volumes[195].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[195].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[195].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[195].volume_pairs[0].cluster_pair_id"
    assert result.volumes[195].volume_pairs[0].remote_volume_id == 1196, "Died on +.volumes[195].volume_pairs[0].remote_volume_id"
    assert result.volumes[195].volume_pairs[0].remote_volume_name == """snap-target-196""", "Died on +.volumes[195].volume_pairs[0].remote_volume_name"
    assert result.volumes[195].volume_pairs[0].remote_slice_id == 1196, "Died on +.volumes[195].volume_pairs[0].remote_slice_id"
    assert result.volumes[195].account_id == 4, "Died on +.volumes[195].account_id"
    assert result.volumes[195].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[195].create_time"
    assert result.volumes[195].virtual_volume_id is None, "Died on .volumes[195].virtual_volume_id"
    assert result.volumes[194].status == """active""", "Died on +.volumes[194].status"
    assert result.volumes[194].enable512e == False, "Died on +.volumes[194].enable512e"
    assert result.volumes[194].qos.burst_iops == 15000, "Died on +.volumes[194].qos.burst_iops"
    assert result.volumes[194].qos.burst_time == 60, "Died on +.volumes[194].qos.burst_time"
    assert result.volumes[194].qos.min_iops == 100, "Died on +.volumes[194].qos.min_iops"
    assert result.volumes[194].qos.max_iops == 15000, "Died on +.volumes[194].qos.max_iops"
    assert result.volumes[194].name == """snapshots-source-195""", "Died on +.volumes[194].name"
    assert result.volumes[194].volume_access_groups[0] == 4, "Died on +.volumes[194].volume_access_groups[0]"
    assert result.volumes[194].scsi_naadevice_id == """6f47acc1000000006d696434000002b7""", "Died on +.volumes[194].scsi_naadevice_id"
    assert result.volumes[194].total_size == 5000658944, "Died on +.volumes[194].total_size"
    assert result.volumes[194].block_size == 4096, "Died on +.volumes[194].block_size"
    assert result.volumes[194].scsi_euidevice_id == """6d696434000002b7f47acc0100000000""", "Died on +.volumes[194].scsi_euidevice_id"
    assert result.volumes[194].volume_id == 695, "Died on +.volumes[194].volume_id"
    assert result.volumes[194].access == """readWrite""", "Died on +.volumes[194].access"
    assert result.volumes[194].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-195.695""", "Died on +.volumes[194].iqn"
    assert result.volumes[194].slice_count == 1, "Died on +.volumes[194].slice_count"
    assert type(result.volumes[194].attributes) is dict, "Died on .volumes[194].attributes"
    assert result.volumes[194].volume_pairs[0].volume_pair_uuid == UUID("33385add-6e57-4015-99fa-4cc40ed95ed0"), "Died on .volumes[194].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[194].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[194].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[194].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[194].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[194].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[194].volume_pairs[0].remote_replication.state"
    assert result.volumes[194].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[194].volume_pairs[0].remote_replication.mode"
    assert result.volumes[194].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[194].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[194].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[194].volume_pairs[0].cluster_pair_id"
    assert result.volumes[194].volume_pairs[0].remote_volume_id == 1195, "Died on +.volumes[194].volume_pairs[0].remote_volume_id"
    assert result.volumes[194].volume_pairs[0].remote_volume_name == """snap-target-195""", "Died on +.volumes[194].volume_pairs[0].remote_volume_name"
    assert result.volumes[194].volume_pairs[0].remote_slice_id == 1195, "Died on +.volumes[194].volume_pairs[0].remote_slice_id"
    assert result.volumes[194].account_id == 4, "Died on +.volumes[194].account_id"
    assert result.volumes[194].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[194].create_time"
    assert result.volumes[194].virtual_volume_id is None, "Died on .volumes[194].virtual_volume_id"
    assert result.volumes[193].status == """active""", "Died on +.volumes[193].status"
    assert result.volumes[193].enable512e == False, "Died on +.volumes[193].enable512e"
    assert result.volumes[193].qos.burst_iops == 15000, "Died on +.volumes[193].qos.burst_iops"
    assert result.volumes[193].qos.burst_time == 60, "Died on +.volumes[193].qos.burst_time"
    assert result.volumes[193].qos.min_iops == 100, "Died on +.volumes[193].qos.min_iops"
    assert result.volumes[193].qos.max_iops == 15000, "Died on +.volumes[193].qos.max_iops"
    assert result.volumes[193].name == """snapshots-source-194""", "Died on +.volumes[193].name"
    assert result.volumes[193].volume_access_groups[0] == 4, "Died on +.volumes[193].volume_access_groups[0]"
    assert result.volumes[193].scsi_naadevice_id == """6f47acc1000000006d696434000002b6""", "Died on +.volumes[193].scsi_naadevice_id"
    assert result.volumes[193].total_size == 5000658944, "Died on +.volumes[193].total_size"
    assert result.volumes[193].block_size == 4096, "Died on +.volumes[193].block_size"
    assert result.volumes[193].scsi_euidevice_id == """6d696434000002b6f47acc0100000000""", "Died on +.volumes[193].scsi_euidevice_id"
    assert result.volumes[193].volume_id == 694, "Died on +.volumes[193].volume_id"
    assert result.volumes[193].access == """readWrite""", "Died on +.volumes[193].access"
    assert result.volumes[193].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-194.694""", "Died on +.volumes[193].iqn"
    assert result.volumes[193].slice_count == 1, "Died on +.volumes[193].slice_count"
    assert type(result.volumes[193].attributes) is dict, "Died on .volumes[193].attributes"
    assert result.volumes[193].volume_pairs[0].volume_pair_uuid == UUID("8d87620c-15f1-4b99-ac61-075db6e4b8b4"), "Died on .volumes[193].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[193].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[193].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[193].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[193].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[193].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[193].volume_pairs[0].remote_replication.state"
    assert result.volumes[193].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[193].volume_pairs[0].remote_replication.mode"
    assert result.volumes[193].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[193].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[193].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[193].volume_pairs[0].cluster_pair_id"
    assert result.volumes[193].volume_pairs[0].remote_volume_id == 1194, "Died on +.volumes[193].volume_pairs[0].remote_volume_id"
    assert result.volumes[193].volume_pairs[0].remote_volume_name == """snap-target-194""", "Died on +.volumes[193].volume_pairs[0].remote_volume_name"
    assert result.volumes[193].volume_pairs[0].remote_slice_id == 1194, "Died on +.volumes[193].volume_pairs[0].remote_slice_id"
    assert result.volumes[193].account_id == 4, "Died on +.volumes[193].account_id"
    assert result.volumes[193].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[193].create_time"
    assert result.volumes[193].virtual_volume_id is None, "Died on .volumes[193].virtual_volume_id"
    assert result.volumes[192].status == """active""", "Died on +.volumes[192].status"
    assert result.volumes[192].enable512e == False, "Died on +.volumes[192].enable512e"
    assert result.volumes[192].qos.burst_iops == 15000, "Died on +.volumes[192].qos.burst_iops"
    assert result.volumes[192].qos.burst_time == 60, "Died on +.volumes[192].qos.burst_time"
    assert result.volumes[192].qos.min_iops == 100, "Died on +.volumes[192].qos.min_iops"
    assert result.volumes[192].qos.max_iops == 15000, "Died on +.volumes[192].qos.max_iops"
    assert result.volumes[192].name == """snapshots-source-193""", "Died on +.volumes[192].name"
    assert result.volumes[192].volume_access_groups[0] == 4, "Died on +.volumes[192].volume_access_groups[0]"
    assert result.volumes[192].scsi_naadevice_id == """6f47acc1000000006d696434000002b5""", "Died on +.volumes[192].scsi_naadevice_id"
    assert result.volumes[192].total_size == 5000658944, "Died on +.volumes[192].total_size"
    assert result.volumes[192].block_size == 4096, "Died on +.volumes[192].block_size"
    assert result.volumes[192].scsi_euidevice_id == """6d696434000002b5f47acc0100000000""", "Died on +.volumes[192].scsi_euidevice_id"
    assert result.volumes[192].volume_id == 693, "Died on +.volumes[192].volume_id"
    assert result.volumes[192].access == """readWrite""", "Died on +.volumes[192].access"
    assert result.volumes[192].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-193.693""", "Died on +.volumes[192].iqn"
    assert result.volumes[192].slice_count == 1, "Died on +.volumes[192].slice_count"
    assert type(result.volumes[192].attributes) is dict, "Died on .volumes[192].attributes"
    assert result.volumes[192].volume_pairs[0].volume_pair_uuid == UUID("82f7f975-bebd-4e94-9f5c-05b3bdb84cfc"), "Died on .volumes[192].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[192].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[192].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[192].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[192].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[192].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[192].volume_pairs[0].remote_replication.state"
    assert result.volumes[192].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[192].volume_pairs[0].remote_replication.mode"
    assert result.volumes[192].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[192].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[192].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[192].volume_pairs[0].cluster_pair_id"
    assert result.volumes[192].volume_pairs[0].remote_volume_id == 1193, "Died on +.volumes[192].volume_pairs[0].remote_volume_id"
    assert result.volumes[192].volume_pairs[0].remote_volume_name == """snap-target-193""", "Died on +.volumes[192].volume_pairs[0].remote_volume_name"
    assert result.volumes[192].volume_pairs[0].remote_slice_id == 1193, "Died on +.volumes[192].volume_pairs[0].remote_slice_id"
    assert result.volumes[192].account_id == 4, "Died on +.volumes[192].account_id"
    assert result.volumes[192].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[192].create_time"
    assert result.volumes[192].virtual_volume_id is None, "Died on .volumes[192].virtual_volume_id"
    assert result.volumes[191].status == """active""", "Died on +.volumes[191].status"
    assert result.volumes[191].enable512e == False, "Died on +.volumes[191].enable512e"
    assert result.volumes[191].qos.burst_iops == 15000, "Died on +.volumes[191].qos.burst_iops"
    assert result.volumes[191].qos.burst_time == 60, "Died on +.volumes[191].qos.burst_time"
    assert result.volumes[191].qos.min_iops == 100, "Died on +.volumes[191].qos.min_iops"
    assert result.volumes[191].qos.max_iops == 15000, "Died on +.volumes[191].qos.max_iops"
    assert result.volumes[191].name == """snapshots-source-192""", "Died on +.volumes[191].name"
    assert result.volumes[191].volume_access_groups[0] == 4, "Died on +.volumes[191].volume_access_groups[0]"
    assert result.volumes[191].scsi_naadevice_id == """6f47acc1000000006d696434000002b4""", "Died on +.volumes[191].scsi_naadevice_id"
    assert result.volumes[191].total_size == 5000658944, "Died on +.volumes[191].total_size"
    assert result.volumes[191].block_size == 4096, "Died on +.volumes[191].block_size"
    assert result.volumes[191].scsi_euidevice_id == """6d696434000002b4f47acc0100000000""", "Died on +.volumes[191].scsi_euidevice_id"
    assert result.volumes[191].volume_id == 692, "Died on +.volumes[191].volume_id"
    assert result.volumes[191].access == """readWrite""", "Died on +.volumes[191].access"
    assert result.volumes[191].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-192.692""", "Died on +.volumes[191].iqn"
    assert result.volumes[191].slice_count == 1, "Died on +.volumes[191].slice_count"
    assert type(result.volumes[191].attributes) is dict, "Died on .volumes[191].attributes"
    assert result.volumes[191].volume_pairs[0].volume_pair_uuid == UUID("32f0b8cd-c07d-4838-a178-e00bc28638d9"), "Died on .volumes[191].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[191].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[191].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[191].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[191].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[191].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[191].volume_pairs[0].remote_replication.state"
    assert result.volumes[191].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[191].volume_pairs[0].remote_replication.mode"
    assert result.volumes[191].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[191].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[191].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[191].volume_pairs[0].cluster_pair_id"
    assert result.volumes[191].volume_pairs[0].remote_volume_id == 1192, "Died on +.volumes[191].volume_pairs[0].remote_volume_id"
    assert result.volumes[191].volume_pairs[0].remote_volume_name == """snap-target-192""", "Died on +.volumes[191].volume_pairs[0].remote_volume_name"
    assert result.volumes[191].volume_pairs[0].remote_slice_id == 1192, "Died on +.volumes[191].volume_pairs[0].remote_slice_id"
    assert result.volumes[191].account_id == 4, "Died on +.volumes[191].account_id"
    assert result.volumes[191].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[191].create_time"
    assert result.volumes[191].virtual_volume_id is None, "Died on .volumes[191].virtual_volume_id"
    assert result.volumes[190].status == """active""", "Died on +.volumes[190].status"
    assert result.volumes[190].enable512e == False, "Died on +.volumes[190].enable512e"
    assert result.volumes[190].qos.burst_iops == 15000, "Died on +.volumes[190].qos.burst_iops"
    assert result.volumes[190].qos.burst_time == 60, "Died on +.volumes[190].qos.burst_time"
    assert result.volumes[190].qos.min_iops == 100, "Died on +.volumes[190].qos.min_iops"
    assert result.volumes[190].qos.max_iops == 15000, "Died on +.volumes[190].qos.max_iops"
    assert result.volumes[190].name == """snapshots-source-191""", "Died on +.volumes[190].name"
    assert result.volumes[190].volume_access_groups[0] == 4, "Died on +.volumes[190].volume_access_groups[0]"
    assert result.volumes[190].scsi_naadevice_id == """6f47acc1000000006d696434000002b3""", "Died on +.volumes[190].scsi_naadevice_id"
    assert result.volumes[190].total_size == 5000658944, "Died on +.volumes[190].total_size"
    assert result.volumes[190].block_size == 4096, "Died on +.volumes[190].block_size"
    assert result.volumes[190].scsi_euidevice_id == """6d696434000002b3f47acc0100000000""", "Died on +.volumes[190].scsi_euidevice_id"
    assert result.volumes[190].volume_id == 691, "Died on +.volumes[190].volume_id"
    assert result.volumes[190].access == """readWrite""", "Died on +.volumes[190].access"
    assert result.volumes[190].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-191.691""", "Died on +.volumes[190].iqn"
    assert result.volumes[190].slice_count == 1, "Died on +.volumes[190].slice_count"
    assert type(result.volumes[190].attributes) is dict, "Died on .volumes[190].attributes"
    assert result.volumes[190].volume_pairs[0].volume_pair_uuid == UUID("387d76ac-64a1-459d-ae89-c3d669033054"), "Died on .volumes[190].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[190].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[190].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[190].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[190].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[190].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[190].volume_pairs[0].remote_replication.state"
    assert result.volumes[190].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[190].volume_pairs[0].remote_replication.mode"
    assert result.volumes[190].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[190].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[190].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[190].volume_pairs[0].cluster_pair_id"
    assert result.volumes[190].volume_pairs[0].remote_volume_id == 1191, "Died on +.volumes[190].volume_pairs[0].remote_volume_id"
    assert result.volumes[190].volume_pairs[0].remote_volume_name == """snap-target-191""", "Died on +.volumes[190].volume_pairs[0].remote_volume_name"
    assert result.volumes[190].volume_pairs[0].remote_slice_id == 1191, "Died on +.volumes[190].volume_pairs[0].remote_slice_id"
    assert result.volumes[190].account_id == 4, "Died on +.volumes[190].account_id"
    assert result.volumes[190].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[190].create_time"
    assert result.volumes[190].virtual_volume_id is None, "Died on .volumes[190].virtual_volume_id"
    assert result.volumes[189].status == """active""", "Died on +.volumes[189].status"
    assert result.volumes[189].enable512e == False, "Died on +.volumes[189].enable512e"
    assert result.volumes[189].qos.burst_iops == 15000, "Died on +.volumes[189].qos.burst_iops"
    assert result.volumes[189].qos.burst_time == 60, "Died on +.volumes[189].qos.burst_time"
    assert result.volumes[189].qos.min_iops == 100, "Died on +.volumes[189].qos.min_iops"
    assert result.volumes[189].qos.max_iops == 15000, "Died on +.volumes[189].qos.max_iops"
    assert result.volumes[189].name == """snapshots-source-190""", "Died on +.volumes[189].name"
    assert result.volumes[189].volume_access_groups[0] == 4, "Died on +.volumes[189].volume_access_groups[0]"
    assert result.volumes[189].scsi_naadevice_id == """6f47acc1000000006d696434000002b2""", "Died on +.volumes[189].scsi_naadevice_id"
    assert result.volumes[189].total_size == 5000658944, "Died on +.volumes[189].total_size"
    assert result.volumes[189].block_size == 4096, "Died on +.volumes[189].block_size"
    assert result.volumes[189].scsi_euidevice_id == """6d696434000002b2f47acc0100000000""", "Died on +.volumes[189].scsi_euidevice_id"
    assert result.volumes[189].volume_id == 690, "Died on +.volumes[189].volume_id"
    assert result.volumes[189].access == """readWrite""", "Died on +.volumes[189].access"
    assert result.volumes[189].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-190.690""", "Died on +.volumes[189].iqn"
    assert result.volumes[189].slice_count == 1, "Died on +.volumes[189].slice_count"
    assert type(result.volumes[189].attributes) is dict, "Died on .volumes[189].attributes"
    assert result.volumes[189].volume_pairs[0].volume_pair_uuid == UUID("55ca3681-bf4b-4f01-8d66-4ae543cbc726"), "Died on .volumes[189].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[189].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[189].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[189].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[189].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[189].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[189].volume_pairs[0].remote_replication.state"
    assert result.volumes[189].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[189].volume_pairs[0].remote_replication.mode"
    assert result.volumes[189].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[189].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[189].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[189].volume_pairs[0].cluster_pair_id"
    assert result.volumes[189].volume_pairs[0].remote_volume_id == 1190, "Died on +.volumes[189].volume_pairs[0].remote_volume_id"
    assert result.volumes[189].volume_pairs[0].remote_volume_name == """snap-target-190""", "Died on +.volumes[189].volume_pairs[0].remote_volume_name"
    assert result.volumes[189].volume_pairs[0].remote_slice_id == 1190, "Died on +.volumes[189].volume_pairs[0].remote_slice_id"
    assert result.volumes[189].account_id == 4, "Died on +.volumes[189].account_id"
    assert result.volumes[189].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[189].create_time"
    assert result.volumes[189].virtual_volume_id is None, "Died on .volumes[189].virtual_volume_id"
    assert result.volumes[188].status == """active""", "Died on +.volumes[188].status"
    assert result.volumes[188].enable512e == False, "Died on +.volumes[188].enable512e"
    assert result.volumes[188].qos.burst_iops == 15000, "Died on +.volumes[188].qos.burst_iops"
    assert result.volumes[188].qos.burst_time == 60, "Died on +.volumes[188].qos.burst_time"
    assert result.volumes[188].qos.min_iops == 100, "Died on +.volumes[188].qos.min_iops"
    assert result.volumes[188].qos.max_iops == 15000, "Died on +.volumes[188].qos.max_iops"
    assert result.volumes[188].name == """snapshots-source-189""", "Died on +.volumes[188].name"
    assert result.volumes[188].volume_access_groups[0] == 4, "Died on +.volumes[188].volume_access_groups[0]"
    assert result.volumes[188].scsi_naadevice_id == """6f47acc1000000006d696434000002b1""", "Died on +.volumes[188].scsi_naadevice_id"
    assert result.volumes[188].total_size == 5000658944, "Died on +.volumes[188].total_size"
    assert result.volumes[188].block_size == 4096, "Died on +.volumes[188].block_size"
    assert result.volumes[188].scsi_euidevice_id == """6d696434000002b1f47acc0100000000""", "Died on +.volumes[188].scsi_euidevice_id"
    assert result.volumes[188].volume_id == 689, "Died on +.volumes[188].volume_id"
    assert result.volumes[188].access == """readWrite""", "Died on +.volumes[188].access"
    assert result.volumes[188].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-189.689""", "Died on +.volumes[188].iqn"
    assert result.volumes[188].slice_count == 1, "Died on +.volumes[188].slice_count"
    assert type(result.volumes[188].attributes) is dict, "Died on .volumes[188].attributes"
    assert result.volumes[188].volume_pairs[0].volume_pair_uuid == UUID("8386df93-160b-40e5-927e-423856f95ba9"), "Died on .volumes[188].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[188].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[188].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[188].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[188].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[188].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[188].volume_pairs[0].remote_replication.state"
    assert result.volumes[188].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[188].volume_pairs[0].remote_replication.mode"
    assert result.volumes[188].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[188].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[188].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[188].volume_pairs[0].cluster_pair_id"
    assert result.volumes[188].volume_pairs[0].remote_volume_id == 1189, "Died on +.volumes[188].volume_pairs[0].remote_volume_id"
    assert result.volumes[188].volume_pairs[0].remote_volume_name == """snap-target-189""", "Died on +.volumes[188].volume_pairs[0].remote_volume_name"
    assert result.volumes[188].volume_pairs[0].remote_slice_id == 1189, "Died on +.volumes[188].volume_pairs[0].remote_slice_id"
    assert result.volumes[188].account_id == 4, "Died on +.volumes[188].account_id"
    assert result.volumes[188].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[188].create_time"
    assert result.volumes[188].virtual_volume_id is None, "Died on .volumes[188].virtual_volume_id"
    assert result.volumes[187].status == """active""", "Died on +.volumes[187].status"
    assert result.volumes[187].enable512e == False, "Died on +.volumes[187].enable512e"
    assert result.volumes[187].qos.burst_iops == 15000, "Died on +.volumes[187].qos.burst_iops"
    assert result.volumes[187].qos.burst_time == 60, "Died on +.volumes[187].qos.burst_time"
    assert result.volumes[187].qos.min_iops == 100, "Died on +.volumes[187].qos.min_iops"
    assert result.volumes[187].qos.max_iops == 15000, "Died on +.volumes[187].qos.max_iops"
    assert result.volumes[187].name == """snapshots-source-188""", "Died on +.volumes[187].name"
    assert result.volumes[187].volume_access_groups[0] == 4, "Died on +.volumes[187].volume_access_groups[0]"
    assert result.volumes[187].scsi_naadevice_id == """6f47acc1000000006d696434000002b0""", "Died on +.volumes[187].scsi_naadevice_id"
    assert result.volumes[187].total_size == 5000658944, "Died on +.volumes[187].total_size"
    assert result.volumes[187].block_size == 4096, "Died on +.volumes[187].block_size"
    assert result.volumes[187].scsi_euidevice_id == """6d696434000002b0f47acc0100000000""", "Died on +.volumes[187].scsi_euidevice_id"
    assert result.volumes[187].volume_id == 688, "Died on +.volumes[187].volume_id"
    assert result.volumes[187].access == """readWrite""", "Died on +.volumes[187].access"
    assert result.volumes[187].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-188.688""", "Died on +.volumes[187].iqn"
    assert result.volumes[187].slice_count == 1, "Died on +.volumes[187].slice_count"
    assert type(result.volumes[187].attributes) is dict, "Died on .volumes[187].attributes"
    assert result.volumes[187].volume_pairs[0].volume_pair_uuid == UUID("f022ecc3-8b0d-43d8-b2fb-8ccf04ead49a"), "Died on .volumes[187].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[187].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[187].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[187].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[187].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[187].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[187].volume_pairs[0].remote_replication.state"
    assert result.volumes[187].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[187].volume_pairs[0].remote_replication.mode"
    assert result.volumes[187].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[187].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[187].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[187].volume_pairs[0].cluster_pair_id"
    assert result.volumes[187].volume_pairs[0].remote_volume_id == 1188, "Died on +.volumes[187].volume_pairs[0].remote_volume_id"
    assert result.volumes[187].volume_pairs[0].remote_volume_name == """snap-target-188""", "Died on +.volumes[187].volume_pairs[0].remote_volume_name"
    assert result.volumes[187].volume_pairs[0].remote_slice_id == 1188, "Died on +.volumes[187].volume_pairs[0].remote_slice_id"
    assert result.volumes[187].account_id == 4, "Died on +.volumes[187].account_id"
    assert result.volumes[187].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[187].create_time"
    assert result.volumes[187].virtual_volume_id is None, "Died on .volumes[187].virtual_volume_id"
    assert result.volumes[186].status == """active""", "Died on +.volumes[186].status"
    assert result.volumes[186].enable512e == False, "Died on +.volumes[186].enable512e"
    assert result.volumes[186].qos.burst_iops == 15000, "Died on +.volumes[186].qos.burst_iops"
    assert result.volumes[186].qos.burst_time == 60, "Died on +.volumes[186].qos.burst_time"
    assert result.volumes[186].qos.min_iops == 100, "Died on +.volumes[186].qos.min_iops"
    assert result.volumes[186].qos.max_iops == 15000, "Died on +.volumes[186].qos.max_iops"
    assert result.volumes[186].name == """snapshots-source-187""", "Died on +.volumes[186].name"
    assert result.volumes[186].volume_access_groups[0] == 4, "Died on +.volumes[186].volume_access_groups[0]"
    assert result.volumes[186].scsi_naadevice_id == """6f47acc1000000006d696434000002af""", "Died on +.volumes[186].scsi_naadevice_id"
    assert result.volumes[186].total_size == 5000658944, "Died on +.volumes[186].total_size"
    assert result.volumes[186].block_size == 4096, "Died on +.volumes[186].block_size"
    assert result.volumes[186].scsi_euidevice_id == """6d696434000002aff47acc0100000000""", "Died on +.volumes[186].scsi_euidevice_id"
    assert result.volumes[186].volume_id == 687, "Died on +.volumes[186].volume_id"
    assert result.volumes[186].access == """readWrite""", "Died on +.volumes[186].access"
    assert result.volumes[186].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-187.687""", "Died on +.volumes[186].iqn"
    assert result.volumes[186].slice_count == 1, "Died on +.volumes[186].slice_count"
    assert type(result.volumes[186].attributes) is dict, "Died on .volumes[186].attributes"
    assert result.volumes[186].volume_pairs[0].volume_pair_uuid == UUID("bc851708-f542-493e-9a6f-ef0eddd19573"), "Died on .volumes[186].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[186].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[186].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[186].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[186].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[186].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[186].volume_pairs[0].remote_replication.state"
    assert result.volumes[186].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[186].volume_pairs[0].remote_replication.mode"
    assert result.volumes[186].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[186].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[186].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[186].volume_pairs[0].cluster_pair_id"
    assert result.volumes[186].volume_pairs[0].remote_volume_id == 1187, "Died on +.volumes[186].volume_pairs[0].remote_volume_id"
    assert result.volumes[186].volume_pairs[0].remote_volume_name == """snap-target-187""", "Died on +.volumes[186].volume_pairs[0].remote_volume_name"
    assert result.volumes[186].volume_pairs[0].remote_slice_id == 1187, "Died on +.volumes[186].volume_pairs[0].remote_slice_id"
    assert result.volumes[186].account_id == 4, "Died on +.volumes[186].account_id"
    assert result.volumes[186].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[186].create_time"
    assert result.volumes[186].virtual_volume_id is None, "Died on .volumes[186].virtual_volume_id"
    assert result.volumes[185].status == """active""", "Died on +.volumes[185].status"
    assert result.volumes[185].enable512e == False, "Died on +.volumes[185].enable512e"
    assert result.volumes[185].qos.burst_iops == 15000, "Died on +.volumes[185].qos.burst_iops"
    assert result.volumes[185].qos.burst_time == 60, "Died on +.volumes[185].qos.burst_time"
    assert result.volumes[185].qos.min_iops == 100, "Died on +.volumes[185].qos.min_iops"
    assert result.volumes[185].qos.max_iops == 15000, "Died on +.volumes[185].qos.max_iops"
    assert result.volumes[185].name == """snapshots-source-186""", "Died on +.volumes[185].name"
    assert result.volumes[185].volume_access_groups[0] == 4, "Died on +.volumes[185].volume_access_groups[0]"
    assert result.volumes[185].scsi_naadevice_id == """6f47acc1000000006d696434000002ae""", "Died on +.volumes[185].scsi_naadevice_id"
    assert result.volumes[185].total_size == 5000658944, "Died on +.volumes[185].total_size"
    assert result.volumes[185].block_size == 4096, "Died on +.volumes[185].block_size"
    assert result.volumes[185].scsi_euidevice_id == """6d696434000002aef47acc0100000000""", "Died on +.volumes[185].scsi_euidevice_id"
    assert result.volumes[185].volume_id == 686, "Died on +.volumes[185].volume_id"
    assert result.volumes[185].access == """readWrite""", "Died on +.volumes[185].access"
    assert result.volumes[185].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-186.686""", "Died on +.volumes[185].iqn"
    assert result.volumes[185].slice_count == 1, "Died on +.volumes[185].slice_count"
    assert type(result.volumes[185].attributes) is dict, "Died on .volumes[185].attributes"
    assert result.volumes[185].volume_pairs[0].volume_pair_uuid == UUID("6fc6f4a2-f556-4d66-b213-be9213dddfe6"), "Died on .volumes[185].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[185].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[185].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[185].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[185].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[185].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[185].volume_pairs[0].remote_replication.state"
    assert result.volumes[185].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[185].volume_pairs[0].remote_replication.mode"
    assert result.volumes[185].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[185].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[185].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[185].volume_pairs[0].cluster_pair_id"
    assert result.volumes[185].volume_pairs[0].remote_volume_id == 1186, "Died on +.volumes[185].volume_pairs[0].remote_volume_id"
    assert result.volumes[185].volume_pairs[0].remote_volume_name == """snap-target-186""", "Died on +.volumes[185].volume_pairs[0].remote_volume_name"
    assert result.volumes[185].volume_pairs[0].remote_slice_id == 1186, "Died on +.volumes[185].volume_pairs[0].remote_slice_id"
    assert result.volumes[185].account_id == 4, "Died on +.volumes[185].account_id"
    assert result.volumes[185].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[185].create_time"
    assert result.volumes[185].virtual_volume_id is None, "Died on .volumes[185].virtual_volume_id"
    assert result.volumes[184].status == """active""", "Died on +.volumes[184].status"
    assert result.volumes[184].enable512e == False, "Died on +.volumes[184].enable512e"
    assert result.volumes[184].qos.burst_iops == 15000, "Died on +.volumes[184].qos.burst_iops"
    assert result.volumes[184].qos.burst_time == 60, "Died on +.volumes[184].qos.burst_time"
    assert result.volumes[184].qos.min_iops == 100, "Died on +.volumes[184].qos.min_iops"
    assert result.volumes[184].qos.max_iops == 15000, "Died on +.volumes[184].qos.max_iops"
    assert result.volumes[184].name == """snapshots-source-185""", "Died on +.volumes[184].name"
    assert result.volumes[184].volume_access_groups[0] == 4, "Died on +.volumes[184].volume_access_groups[0]"
    assert result.volumes[184].scsi_naadevice_id == """6f47acc1000000006d696434000002ad""", "Died on +.volumes[184].scsi_naadevice_id"
    assert result.volumes[184].total_size == 5000658944, "Died on +.volumes[184].total_size"
    assert result.volumes[184].block_size == 4096, "Died on +.volumes[184].block_size"
    assert result.volumes[184].scsi_euidevice_id == """6d696434000002adf47acc0100000000""", "Died on +.volumes[184].scsi_euidevice_id"
    assert result.volumes[184].volume_id == 685, "Died on +.volumes[184].volume_id"
    assert result.volumes[184].access == """readWrite""", "Died on +.volumes[184].access"
    assert result.volumes[184].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-185.685""", "Died on +.volumes[184].iqn"
    assert result.volumes[184].slice_count == 1, "Died on +.volumes[184].slice_count"
    assert type(result.volumes[184].attributes) is dict, "Died on .volumes[184].attributes"
    assert result.volumes[184].volume_pairs[0].volume_pair_uuid == UUID("df0afa37-f2ce-4382-bdbb-aa09d47055da"), "Died on .volumes[184].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[184].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[184].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[184].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[184].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[184].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[184].volume_pairs[0].remote_replication.state"
    assert result.volumes[184].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[184].volume_pairs[0].remote_replication.mode"
    assert result.volumes[184].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[184].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[184].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[184].volume_pairs[0].cluster_pair_id"
    assert result.volumes[184].volume_pairs[0].remote_volume_id == 1185, "Died on +.volumes[184].volume_pairs[0].remote_volume_id"
    assert result.volumes[184].volume_pairs[0].remote_volume_name == """snap-target-185""", "Died on +.volumes[184].volume_pairs[0].remote_volume_name"
    assert result.volumes[184].volume_pairs[0].remote_slice_id == 1185, "Died on +.volumes[184].volume_pairs[0].remote_slice_id"
    assert result.volumes[184].account_id == 4, "Died on +.volumes[184].account_id"
    assert result.volumes[184].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[184].create_time"
    assert result.volumes[184].virtual_volume_id is None, "Died on .volumes[184].virtual_volume_id"
    assert result.volumes[183].status == """active""", "Died on +.volumes[183].status"
    assert result.volumes[183].enable512e == False, "Died on +.volumes[183].enable512e"
    assert result.volumes[183].qos.burst_iops == 15000, "Died on +.volumes[183].qos.burst_iops"
    assert result.volumes[183].qos.burst_time == 60, "Died on +.volumes[183].qos.burst_time"
    assert result.volumes[183].qos.min_iops == 100, "Died on +.volumes[183].qos.min_iops"
    assert result.volumes[183].qos.max_iops == 15000, "Died on +.volumes[183].qos.max_iops"
    assert result.volumes[183].name == """snapshots-source-184""", "Died on +.volumes[183].name"
    assert result.volumes[183].volume_access_groups[0] == 4, "Died on +.volumes[183].volume_access_groups[0]"
    assert result.volumes[183].scsi_naadevice_id == """6f47acc1000000006d696434000002ac""", "Died on +.volumes[183].scsi_naadevice_id"
    assert result.volumes[183].total_size == 5000658944, "Died on +.volumes[183].total_size"
    assert result.volumes[183].block_size == 4096, "Died on +.volumes[183].block_size"
    assert result.volumes[183].scsi_euidevice_id == """6d696434000002acf47acc0100000000""", "Died on +.volumes[183].scsi_euidevice_id"
    assert result.volumes[183].volume_id == 684, "Died on +.volumes[183].volume_id"
    assert result.volumes[183].access == """readWrite""", "Died on +.volumes[183].access"
    assert result.volumes[183].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-184.684""", "Died on +.volumes[183].iqn"
    assert result.volumes[183].slice_count == 1, "Died on +.volumes[183].slice_count"
    assert type(result.volumes[183].attributes) is dict, "Died on .volumes[183].attributes"
    assert result.volumes[183].volume_pairs[0].volume_pair_uuid == UUID("55683b6f-f95a-442b-841c-48bb8f0b9e3b"), "Died on .volumes[183].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[183].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[183].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[183].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[183].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[183].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[183].volume_pairs[0].remote_replication.state"
    assert result.volumes[183].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[183].volume_pairs[0].remote_replication.mode"
    assert result.volumes[183].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[183].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[183].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[183].volume_pairs[0].cluster_pair_id"
    assert result.volumes[183].volume_pairs[0].remote_volume_id == 1184, "Died on +.volumes[183].volume_pairs[0].remote_volume_id"
    assert result.volumes[183].volume_pairs[0].remote_volume_name == """snap-target-184""", "Died on +.volumes[183].volume_pairs[0].remote_volume_name"
    assert result.volumes[183].volume_pairs[0].remote_slice_id == 1184, "Died on +.volumes[183].volume_pairs[0].remote_slice_id"
    assert result.volumes[183].account_id == 4, "Died on +.volumes[183].account_id"
    assert result.volumes[183].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[183].create_time"
    assert result.volumes[183].virtual_volume_id is None, "Died on .volumes[183].virtual_volume_id"
    assert result.volumes[182].status == """active""", "Died on +.volumes[182].status"
    assert result.volumes[182].enable512e == False, "Died on +.volumes[182].enable512e"
    assert result.volumes[182].qos.burst_iops == 15000, "Died on +.volumes[182].qos.burst_iops"
    assert result.volumes[182].qos.burst_time == 60, "Died on +.volumes[182].qos.burst_time"
    assert result.volumes[182].qos.min_iops == 100, "Died on +.volumes[182].qos.min_iops"
    assert result.volumes[182].qos.max_iops == 15000, "Died on +.volumes[182].qos.max_iops"
    assert result.volumes[182].name == """snapshots-source-183""", "Died on +.volumes[182].name"
    assert result.volumes[182].volume_access_groups[0] == 4, "Died on +.volumes[182].volume_access_groups[0]"
    assert result.volumes[182].scsi_naadevice_id == """6f47acc1000000006d696434000002ab""", "Died on +.volumes[182].scsi_naadevice_id"
    assert result.volumes[182].total_size == 5000658944, "Died on +.volumes[182].total_size"
    assert result.volumes[182].block_size == 4096, "Died on +.volumes[182].block_size"
    assert result.volumes[182].scsi_euidevice_id == """6d696434000002abf47acc0100000000""", "Died on +.volumes[182].scsi_euidevice_id"
    assert result.volumes[182].volume_id == 683, "Died on +.volumes[182].volume_id"
    assert result.volumes[182].access == """readWrite""", "Died on +.volumes[182].access"
    assert result.volumes[182].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-183.683""", "Died on +.volumes[182].iqn"
    assert result.volumes[182].slice_count == 1, "Died on +.volumes[182].slice_count"
    assert type(result.volumes[182].attributes) is dict, "Died on .volumes[182].attributes"
    assert result.volumes[182].volume_pairs[0].volume_pair_uuid == UUID("9090a8b3-cd3f-4b56-a985-070fbd04fb10"), "Died on .volumes[182].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[182].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[182].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[182].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[182].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[182].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[182].volume_pairs[0].remote_replication.state"
    assert result.volumes[182].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[182].volume_pairs[0].remote_replication.mode"
    assert result.volumes[182].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[182].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[182].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[182].volume_pairs[0].cluster_pair_id"
    assert result.volumes[182].volume_pairs[0].remote_volume_id == 1183, "Died on +.volumes[182].volume_pairs[0].remote_volume_id"
    assert result.volumes[182].volume_pairs[0].remote_volume_name == """snap-target-183""", "Died on +.volumes[182].volume_pairs[0].remote_volume_name"
    assert result.volumes[182].volume_pairs[0].remote_slice_id == 1183, "Died on +.volumes[182].volume_pairs[0].remote_slice_id"
    assert result.volumes[182].account_id == 4, "Died on +.volumes[182].account_id"
    assert result.volumes[182].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[182].create_time"
    assert result.volumes[182].virtual_volume_id is None, "Died on .volumes[182].virtual_volume_id"
    assert result.volumes[181].status == """active""", "Died on +.volumes[181].status"
    assert result.volumes[181].enable512e == False, "Died on +.volumes[181].enable512e"
    assert result.volumes[181].qos.burst_iops == 15000, "Died on +.volumes[181].qos.burst_iops"
    assert result.volumes[181].qos.burst_time == 60, "Died on +.volumes[181].qos.burst_time"
    assert result.volumes[181].qos.min_iops == 100, "Died on +.volumes[181].qos.min_iops"
    assert result.volumes[181].qos.max_iops == 15000, "Died on +.volumes[181].qos.max_iops"
    assert result.volumes[181].name == """snapshots-source-182""", "Died on +.volumes[181].name"
    assert result.volumes[181].volume_access_groups[0] == 4, "Died on +.volumes[181].volume_access_groups[0]"
    assert result.volumes[181].scsi_naadevice_id == """6f47acc1000000006d696434000002aa""", "Died on +.volumes[181].scsi_naadevice_id"
    assert result.volumes[181].total_size == 5000658944, "Died on +.volumes[181].total_size"
    assert result.volumes[181].block_size == 4096, "Died on +.volumes[181].block_size"
    assert result.volumes[181].scsi_euidevice_id == """6d696434000002aaf47acc0100000000""", "Died on +.volumes[181].scsi_euidevice_id"
    assert result.volumes[181].volume_id == 682, "Died on +.volumes[181].volume_id"
    assert result.volumes[181].access == """readWrite""", "Died on +.volumes[181].access"
    assert result.volumes[181].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-182.682""", "Died on +.volumes[181].iqn"
    assert result.volumes[181].slice_count == 1, "Died on +.volumes[181].slice_count"
    assert type(result.volumes[181].attributes) is dict, "Died on .volumes[181].attributes"
    assert result.volumes[181].volume_pairs[0].volume_pair_uuid == UUID("bb57a34b-73f9-4fe8-a745-7e4e7b177a01"), "Died on .volumes[181].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[181].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[181].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[181].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[181].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[181].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[181].volume_pairs[0].remote_replication.state"
    assert result.volumes[181].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[181].volume_pairs[0].remote_replication.mode"
    assert result.volumes[181].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[181].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[181].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[181].volume_pairs[0].cluster_pair_id"
    assert result.volumes[181].volume_pairs[0].remote_volume_id == 1182, "Died on +.volumes[181].volume_pairs[0].remote_volume_id"
    assert result.volumes[181].volume_pairs[0].remote_volume_name == """snap-target-182""", "Died on +.volumes[181].volume_pairs[0].remote_volume_name"
    assert result.volumes[181].volume_pairs[0].remote_slice_id == 1182, "Died on +.volumes[181].volume_pairs[0].remote_slice_id"
    assert result.volumes[181].account_id == 4, "Died on +.volumes[181].account_id"
    assert result.volumes[181].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[181].create_time"
    assert result.volumes[181].virtual_volume_id is None, "Died on .volumes[181].virtual_volume_id"
    assert result.volumes[180].status == """active""", "Died on +.volumes[180].status"
    assert result.volumes[180].enable512e == False, "Died on +.volumes[180].enable512e"
    assert result.volumes[180].qos.burst_iops == 15000, "Died on +.volumes[180].qos.burst_iops"
    assert result.volumes[180].qos.burst_time == 60, "Died on +.volumes[180].qos.burst_time"
    assert result.volumes[180].qos.min_iops == 100, "Died on +.volumes[180].qos.min_iops"
    assert result.volumes[180].qos.max_iops == 15000, "Died on +.volumes[180].qos.max_iops"
    assert result.volumes[180].name == """snapshots-source-181""", "Died on +.volumes[180].name"
    assert result.volumes[180].volume_access_groups[0] == 4, "Died on +.volumes[180].volume_access_groups[0]"
    assert result.volumes[180].scsi_naadevice_id == """6f47acc1000000006d696434000002a9""", "Died on +.volumes[180].scsi_naadevice_id"
    assert result.volumes[180].total_size == 5000658944, "Died on +.volumes[180].total_size"
    assert result.volumes[180].block_size == 4096, "Died on +.volumes[180].block_size"
    assert result.volumes[180].scsi_euidevice_id == """6d696434000002a9f47acc0100000000""", "Died on +.volumes[180].scsi_euidevice_id"
    assert result.volumes[180].volume_id == 681, "Died on +.volumes[180].volume_id"
    assert result.volumes[180].access == """readWrite""", "Died on +.volumes[180].access"
    assert result.volumes[180].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-181.681""", "Died on +.volumes[180].iqn"
    assert result.volumes[180].slice_count == 1, "Died on +.volumes[180].slice_count"
    assert type(result.volumes[180].attributes) is dict, "Died on .volumes[180].attributes"
    assert result.volumes[180].volume_pairs[0].volume_pair_uuid == UUID("8fd1e765-f613-4979-a709-3923d1682d7e"), "Died on .volumes[180].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[180].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[180].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[180].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[180].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[180].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[180].volume_pairs[0].remote_replication.state"
    assert result.volumes[180].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[180].volume_pairs[0].remote_replication.mode"
    assert result.volumes[180].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[180].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[180].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[180].volume_pairs[0].cluster_pair_id"
    assert result.volumes[180].volume_pairs[0].remote_volume_id == 1181, "Died on +.volumes[180].volume_pairs[0].remote_volume_id"
    assert result.volumes[180].volume_pairs[0].remote_volume_name == """snap-target-181""", "Died on +.volumes[180].volume_pairs[0].remote_volume_name"
    assert result.volumes[180].volume_pairs[0].remote_slice_id == 1181, "Died on +.volumes[180].volume_pairs[0].remote_slice_id"
    assert result.volumes[180].account_id == 4, "Died on +.volumes[180].account_id"
    assert result.volumes[180].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[180].create_time"
    assert result.volumes[180].virtual_volume_id is None, "Died on .volumes[180].virtual_volume_id"
    assert result.volumes[179].status == """active""", "Died on +.volumes[179].status"
    assert result.volumes[179].enable512e == False, "Died on +.volumes[179].enable512e"
    assert result.volumes[179].qos.burst_iops == 15000, "Died on +.volumes[179].qos.burst_iops"
    assert result.volumes[179].qos.burst_time == 60, "Died on +.volumes[179].qos.burst_time"
    assert result.volumes[179].qos.min_iops == 100, "Died on +.volumes[179].qos.min_iops"
    assert result.volumes[179].qos.max_iops == 15000, "Died on +.volumes[179].qos.max_iops"
    assert result.volumes[179].name == """snapshots-source-180""", "Died on +.volumes[179].name"
    assert result.volumes[179].volume_access_groups[0] == 4, "Died on +.volumes[179].volume_access_groups[0]"
    assert result.volumes[179].scsi_naadevice_id == """6f47acc1000000006d696434000002a8""", "Died on +.volumes[179].scsi_naadevice_id"
    assert result.volumes[179].total_size == 5000658944, "Died on +.volumes[179].total_size"
    assert result.volumes[179].block_size == 4096, "Died on +.volumes[179].block_size"
    assert result.volumes[179].scsi_euidevice_id == """6d696434000002a8f47acc0100000000""", "Died on +.volumes[179].scsi_euidevice_id"
    assert result.volumes[179].volume_id == 680, "Died on +.volumes[179].volume_id"
    assert result.volumes[179].access == """readWrite""", "Died on +.volumes[179].access"
    assert result.volumes[179].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-180.680""", "Died on +.volumes[179].iqn"
    assert result.volumes[179].slice_count == 1, "Died on +.volumes[179].slice_count"
    assert type(result.volumes[179].attributes) is dict, "Died on .volumes[179].attributes"
    assert result.volumes[179].volume_pairs[0].volume_pair_uuid == UUID("f731c66e-29b6-482c-8c71-5541143e7650"), "Died on .volumes[179].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[179].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[179].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[179].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[179].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[179].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[179].volume_pairs[0].remote_replication.state"
    assert result.volumes[179].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[179].volume_pairs[0].remote_replication.mode"
    assert result.volumes[179].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[179].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[179].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[179].volume_pairs[0].cluster_pair_id"
    assert result.volumes[179].volume_pairs[0].remote_volume_id == 1180, "Died on +.volumes[179].volume_pairs[0].remote_volume_id"
    assert result.volumes[179].volume_pairs[0].remote_volume_name == """snap-target-180""", "Died on +.volumes[179].volume_pairs[0].remote_volume_name"
    assert result.volumes[179].volume_pairs[0].remote_slice_id == 1180, "Died on +.volumes[179].volume_pairs[0].remote_slice_id"
    assert result.volumes[179].account_id == 4, "Died on +.volumes[179].account_id"
    assert result.volumes[179].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[179].create_time"
    assert result.volumes[179].virtual_volume_id is None, "Died on .volumes[179].virtual_volume_id"
    assert result.volumes[178].status == """active""", "Died on +.volumes[178].status"
    assert result.volumes[178].enable512e == False, "Died on +.volumes[178].enable512e"
    assert result.volumes[178].qos.burst_iops == 15000, "Died on +.volumes[178].qos.burst_iops"
    assert result.volumes[178].qos.burst_time == 60, "Died on +.volumes[178].qos.burst_time"
    assert result.volumes[178].qos.min_iops == 100, "Died on +.volumes[178].qos.min_iops"
    assert result.volumes[178].qos.max_iops == 15000, "Died on +.volumes[178].qos.max_iops"
    assert result.volumes[178].name == """snapshots-source-179""", "Died on +.volumes[178].name"
    assert result.volumes[178].volume_access_groups[0] == 4, "Died on +.volumes[178].volume_access_groups[0]"
    assert result.volumes[178].scsi_naadevice_id == """6f47acc1000000006d696434000002a7""", "Died on +.volumes[178].scsi_naadevice_id"
    assert result.volumes[178].total_size == 5000658944, "Died on +.volumes[178].total_size"
    assert result.volumes[178].block_size == 4096, "Died on +.volumes[178].block_size"
    assert result.volumes[178].scsi_euidevice_id == """6d696434000002a7f47acc0100000000""", "Died on +.volumes[178].scsi_euidevice_id"
    assert result.volumes[178].volume_id == 679, "Died on +.volumes[178].volume_id"
    assert result.volumes[178].access == """readWrite""", "Died on +.volumes[178].access"
    assert result.volumes[178].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-179.679""", "Died on +.volumes[178].iqn"
    assert result.volumes[178].slice_count == 1, "Died on +.volumes[178].slice_count"
    assert type(result.volumes[178].attributes) is dict, "Died on .volumes[178].attributes"
    assert result.volumes[178].volume_pairs[0].volume_pair_uuid == UUID("45fe3754-7310-465d-b5c1-04271983b407"), "Died on .volumes[178].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[178].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[178].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[178].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[178].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[178].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[178].volume_pairs[0].remote_replication.state"
    assert result.volumes[178].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[178].volume_pairs[0].remote_replication.mode"
    assert result.volumes[178].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[178].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[178].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[178].volume_pairs[0].cluster_pair_id"
    assert result.volumes[178].volume_pairs[0].remote_volume_id == 1179, "Died on +.volumes[178].volume_pairs[0].remote_volume_id"
    assert result.volumes[178].volume_pairs[0].remote_volume_name == """snap-target-179""", "Died on +.volumes[178].volume_pairs[0].remote_volume_name"
    assert result.volumes[178].volume_pairs[0].remote_slice_id == 1179, "Died on +.volumes[178].volume_pairs[0].remote_slice_id"
    assert result.volumes[178].account_id == 4, "Died on +.volumes[178].account_id"
    assert result.volumes[178].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[178].create_time"
    assert result.volumes[178].virtual_volume_id is None, "Died on .volumes[178].virtual_volume_id"
    assert result.volumes[177].status == """active""", "Died on +.volumes[177].status"
    assert result.volumes[177].enable512e == False, "Died on +.volumes[177].enable512e"
    assert result.volumes[177].qos.burst_iops == 15000, "Died on +.volumes[177].qos.burst_iops"
    assert result.volumes[177].qos.burst_time == 60, "Died on +.volumes[177].qos.burst_time"
    assert result.volumes[177].qos.min_iops == 100, "Died on +.volumes[177].qos.min_iops"
    assert result.volumes[177].qos.max_iops == 15000, "Died on +.volumes[177].qos.max_iops"
    assert result.volumes[177].name == """snapshots-source-178""", "Died on +.volumes[177].name"
    assert result.volumes[177].volume_access_groups[0] == 4, "Died on +.volumes[177].volume_access_groups[0]"
    assert result.volumes[177].scsi_naadevice_id == """6f47acc1000000006d696434000002a6""", "Died on +.volumes[177].scsi_naadevice_id"
    assert result.volumes[177].total_size == 5000658944, "Died on +.volumes[177].total_size"
    assert result.volumes[177].block_size == 4096, "Died on +.volumes[177].block_size"
    assert result.volumes[177].scsi_euidevice_id == """6d696434000002a6f47acc0100000000""", "Died on +.volumes[177].scsi_euidevice_id"
    assert result.volumes[177].volume_id == 678, "Died on +.volumes[177].volume_id"
    assert result.volumes[177].access == """readWrite""", "Died on +.volumes[177].access"
    assert result.volumes[177].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-178.678""", "Died on +.volumes[177].iqn"
    assert result.volumes[177].slice_count == 1, "Died on +.volumes[177].slice_count"
    assert type(result.volumes[177].attributes) is dict, "Died on .volumes[177].attributes"
    assert result.volumes[177].volume_pairs[0].volume_pair_uuid == UUID("e3ecd55e-64df-421f-950a-db8505333ead"), "Died on .volumes[177].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[177].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[177].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[177].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[177].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[177].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[177].volume_pairs[0].remote_replication.state"
    assert result.volumes[177].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[177].volume_pairs[0].remote_replication.mode"
    assert result.volumes[177].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[177].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[177].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[177].volume_pairs[0].cluster_pair_id"
    assert result.volumes[177].volume_pairs[0].remote_volume_id == 1178, "Died on +.volumes[177].volume_pairs[0].remote_volume_id"
    assert result.volumes[177].volume_pairs[0].remote_volume_name == """snap-target-178""", "Died on +.volumes[177].volume_pairs[0].remote_volume_name"
    assert result.volumes[177].volume_pairs[0].remote_slice_id == 1178, "Died on +.volumes[177].volume_pairs[0].remote_slice_id"
    assert result.volumes[177].account_id == 4, "Died on +.volumes[177].account_id"
    assert result.volumes[177].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[177].create_time"
    assert result.volumes[177].virtual_volume_id is None, "Died on .volumes[177].virtual_volume_id"
    assert result.volumes[176].status == """active""", "Died on +.volumes[176].status"
    assert result.volumes[176].enable512e == False, "Died on +.volumes[176].enable512e"
    assert result.volumes[176].qos.burst_iops == 15000, "Died on +.volumes[176].qos.burst_iops"
    assert result.volumes[176].qos.burst_time == 60, "Died on +.volumes[176].qos.burst_time"
    assert result.volumes[176].qos.min_iops == 100, "Died on +.volumes[176].qos.min_iops"
    assert result.volumes[176].qos.max_iops == 15000, "Died on +.volumes[176].qos.max_iops"
    assert result.volumes[176].name == """snapshots-source-177""", "Died on +.volumes[176].name"
    assert result.volumes[176].volume_access_groups[0] == 4, "Died on +.volumes[176].volume_access_groups[0]"
    assert result.volumes[176].scsi_naadevice_id == """6f47acc1000000006d696434000002a5""", "Died on +.volumes[176].scsi_naadevice_id"
    assert result.volumes[176].total_size == 5000658944, "Died on +.volumes[176].total_size"
    assert result.volumes[176].block_size == 4096, "Died on +.volumes[176].block_size"
    assert result.volumes[176].scsi_euidevice_id == """6d696434000002a5f47acc0100000000""", "Died on +.volumes[176].scsi_euidevice_id"
    assert result.volumes[176].volume_id == 677, "Died on +.volumes[176].volume_id"
    assert result.volumes[176].access == """readWrite""", "Died on +.volumes[176].access"
    assert result.volumes[176].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-177.677""", "Died on +.volumes[176].iqn"
    assert result.volumes[176].slice_count == 1, "Died on +.volumes[176].slice_count"
    assert type(result.volumes[176].attributes) is dict, "Died on .volumes[176].attributes"
    assert result.volumes[176].volume_pairs[0].volume_pair_uuid == UUID("78123fd5-4673-4ef3-a511-417f7a822fe1"), "Died on .volumes[176].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[176].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[176].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[176].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[176].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[176].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[176].volume_pairs[0].remote_replication.state"
    assert result.volumes[176].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[176].volume_pairs[0].remote_replication.mode"
    assert result.volumes[176].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[176].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[176].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[176].volume_pairs[0].cluster_pair_id"
    assert result.volumes[176].volume_pairs[0].remote_volume_id == 1177, "Died on +.volumes[176].volume_pairs[0].remote_volume_id"
    assert result.volumes[176].volume_pairs[0].remote_volume_name == """snap-target-177""", "Died on +.volumes[176].volume_pairs[0].remote_volume_name"
    assert result.volumes[176].volume_pairs[0].remote_slice_id == 1177, "Died on +.volumes[176].volume_pairs[0].remote_slice_id"
    assert result.volumes[176].account_id == 4, "Died on +.volumes[176].account_id"
    assert result.volumes[176].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[176].create_time"
    assert result.volumes[176].virtual_volume_id is None, "Died on .volumes[176].virtual_volume_id"
    assert result.volumes[175].status == """active""", "Died on +.volumes[175].status"
    assert result.volumes[175].enable512e == False, "Died on +.volumes[175].enable512e"
    assert result.volumes[175].qos.burst_iops == 15000, "Died on +.volumes[175].qos.burst_iops"
    assert result.volumes[175].qos.burst_time == 60, "Died on +.volumes[175].qos.burst_time"
    assert result.volumes[175].qos.min_iops == 100, "Died on +.volumes[175].qos.min_iops"
    assert result.volumes[175].qos.max_iops == 15000, "Died on +.volumes[175].qos.max_iops"
    assert result.volumes[175].name == """snapshots-source-176""", "Died on +.volumes[175].name"
    assert result.volumes[175].volume_access_groups[0] == 4, "Died on +.volumes[175].volume_access_groups[0]"
    assert result.volumes[175].scsi_naadevice_id == """6f47acc1000000006d696434000002a4""", "Died on +.volumes[175].scsi_naadevice_id"
    assert result.volumes[175].total_size == 5000658944, "Died on +.volumes[175].total_size"
    assert result.volumes[175].block_size == 4096, "Died on +.volumes[175].block_size"
    assert result.volumes[175].scsi_euidevice_id == """6d696434000002a4f47acc0100000000""", "Died on +.volumes[175].scsi_euidevice_id"
    assert result.volumes[175].volume_id == 676, "Died on +.volumes[175].volume_id"
    assert result.volumes[175].access == """readWrite""", "Died on +.volumes[175].access"
    assert result.volumes[175].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-176.676""", "Died on +.volumes[175].iqn"
    assert result.volumes[175].slice_count == 1, "Died on +.volumes[175].slice_count"
    assert type(result.volumes[175].attributes) is dict, "Died on .volumes[175].attributes"
    assert result.volumes[175].volume_pairs[0].volume_pair_uuid == UUID("ac0215ba-278f-44b7-a640-756107e35d6a"), "Died on .volumes[175].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[175].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[175].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[175].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[175].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[175].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[175].volume_pairs[0].remote_replication.state"
    assert result.volumes[175].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[175].volume_pairs[0].remote_replication.mode"
    assert result.volumes[175].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[175].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[175].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[175].volume_pairs[0].cluster_pair_id"
    assert result.volumes[175].volume_pairs[0].remote_volume_id == 1176, "Died on +.volumes[175].volume_pairs[0].remote_volume_id"
    assert result.volumes[175].volume_pairs[0].remote_volume_name == """snap-target-176""", "Died on +.volumes[175].volume_pairs[0].remote_volume_name"
    assert result.volumes[175].volume_pairs[0].remote_slice_id == 1176, "Died on +.volumes[175].volume_pairs[0].remote_slice_id"
    assert result.volumes[175].account_id == 4, "Died on +.volumes[175].account_id"
    assert result.volumes[175].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[175].create_time"
    assert result.volumes[175].virtual_volume_id is None, "Died on .volumes[175].virtual_volume_id"
    assert result.volumes[174].status == """active""", "Died on +.volumes[174].status"
    assert result.volumes[174].enable512e == False, "Died on +.volumes[174].enable512e"
    assert result.volumes[174].qos.burst_iops == 15000, "Died on +.volumes[174].qos.burst_iops"
    assert result.volumes[174].qos.burst_time == 60, "Died on +.volumes[174].qos.burst_time"
    assert result.volumes[174].qos.min_iops == 100, "Died on +.volumes[174].qos.min_iops"
    assert result.volumes[174].qos.max_iops == 15000, "Died on +.volumes[174].qos.max_iops"
    assert result.volumes[174].name == """snapshots-source-175""", "Died on +.volumes[174].name"
    assert result.volumes[174].volume_access_groups[0] == 4, "Died on +.volumes[174].volume_access_groups[0]"
    assert result.volumes[174].scsi_naadevice_id == """6f47acc1000000006d696434000002a3""", "Died on +.volumes[174].scsi_naadevice_id"
    assert result.volumes[174].total_size == 5000658944, "Died on +.volumes[174].total_size"
    assert result.volumes[174].block_size == 4096, "Died on +.volumes[174].block_size"
    assert result.volumes[174].scsi_euidevice_id == """6d696434000002a3f47acc0100000000""", "Died on +.volumes[174].scsi_euidevice_id"
    assert result.volumes[174].volume_id == 675, "Died on +.volumes[174].volume_id"
    assert result.volumes[174].access == """readWrite""", "Died on +.volumes[174].access"
    assert result.volumes[174].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-175.675""", "Died on +.volumes[174].iqn"
    assert result.volumes[174].slice_count == 1, "Died on +.volumes[174].slice_count"
    assert type(result.volumes[174].attributes) is dict, "Died on .volumes[174].attributes"
    assert result.volumes[174].volume_pairs[0].volume_pair_uuid == UUID("7f127db5-77ca-4f31-9930-f1e0fbd4298b"), "Died on .volumes[174].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[174].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[174].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[174].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[174].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[174].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[174].volume_pairs[0].remote_replication.state"
    assert result.volumes[174].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[174].volume_pairs[0].remote_replication.mode"
    assert result.volumes[174].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[174].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[174].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[174].volume_pairs[0].cluster_pair_id"
    assert result.volumes[174].volume_pairs[0].remote_volume_id == 1175, "Died on +.volumes[174].volume_pairs[0].remote_volume_id"
    assert result.volumes[174].volume_pairs[0].remote_volume_name == """snap-target-175""", "Died on +.volumes[174].volume_pairs[0].remote_volume_name"
    assert result.volumes[174].volume_pairs[0].remote_slice_id == 1175, "Died on +.volumes[174].volume_pairs[0].remote_slice_id"
    assert result.volumes[174].account_id == 4, "Died on +.volumes[174].account_id"
    assert result.volumes[174].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[174].create_time"
    assert result.volumes[174].virtual_volume_id is None, "Died on .volumes[174].virtual_volume_id"
    assert result.volumes[173].status == """active""", "Died on +.volumes[173].status"
    assert result.volumes[173].enable512e == False, "Died on +.volumes[173].enable512e"
    assert result.volumes[173].qos.burst_iops == 15000, "Died on +.volumes[173].qos.burst_iops"
    assert result.volumes[173].qos.burst_time == 60, "Died on +.volumes[173].qos.burst_time"
    assert result.volumes[173].qos.min_iops == 100, "Died on +.volumes[173].qos.min_iops"
    assert result.volumes[173].qos.max_iops == 15000, "Died on +.volumes[173].qos.max_iops"
    assert result.volumes[173].name == """snapshots-source-174""", "Died on +.volumes[173].name"
    assert result.volumes[173].volume_access_groups[0] == 4, "Died on +.volumes[173].volume_access_groups[0]"
    assert result.volumes[173].scsi_naadevice_id == """6f47acc1000000006d696434000002a2""", "Died on +.volumes[173].scsi_naadevice_id"
    assert result.volumes[173].total_size == 5000658944, "Died on +.volumes[173].total_size"
    assert result.volumes[173].block_size == 4096, "Died on +.volumes[173].block_size"
    assert result.volumes[173].scsi_euidevice_id == """6d696434000002a2f47acc0100000000""", "Died on +.volumes[173].scsi_euidevice_id"
    assert result.volumes[173].volume_id == 674, "Died on +.volumes[173].volume_id"
    assert result.volumes[173].access == """readWrite""", "Died on +.volumes[173].access"
    assert result.volumes[173].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-174.674""", "Died on +.volumes[173].iqn"
    assert result.volumes[173].slice_count == 1, "Died on +.volumes[173].slice_count"
    assert type(result.volumes[173].attributes) is dict, "Died on .volumes[173].attributes"
    assert result.volumes[173].volume_pairs[0].volume_pair_uuid == UUID("4bc5c519-b27c-4bf1-8356-06460076ce0d"), "Died on .volumes[173].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[173].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[173].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[173].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[173].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[173].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[173].volume_pairs[0].remote_replication.state"
    assert result.volumes[173].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[173].volume_pairs[0].remote_replication.mode"
    assert result.volumes[173].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[173].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[173].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[173].volume_pairs[0].cluster_pair_id"
    assert result.volumes[173].volume_pairs[0].remote_volume_id == 1174, "Died on +.volumes[173].volume_pairs[0].remote_volume_id"
    assert result.volumes[173].volume_pairs[0].remote_volume_name == """snap-target-174""", "Died on +.volumes[173].volume_pairs[0].remote_volume_name"
    assert result.volumes[173].volume_pairs[0].remote_slice_id == 1174, "Died on +.volumes[173].volume_pairs[0].remote_slice_id"
    assert result.volumes[173].account_id == 4, "Died on +.volumes[173].account_id"
    assert result.volumes[173].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[173].create_time"
    assert result.volumes[173].virtual_volume_id is None, "Died on .volumes[173].virtual_volume_id"
    assert result.volumes[172].status == """active""", "Died on +.volumes[172].status"
    assert result.volumes[172].enable512e == False, "Died on +.volumes[172].enable512e"
    assert result.volumes[172].qos.burst_iops == 15000, "Died on +.volumes[172].qos.burst_iops"
    assert result.volumes[172].qos.burst_time == 60, "Died on +.volumes[172].qos.burst_time"
    assert result.volumes[172].qos.min_iops == 100, "Died on +.volumes[172].qos.min_iops"
    assert result.volumes[172].qos.max_iops == 15000, "Died on +.volumes[172].qos.max_iops"
    assert result.volumes[172].name == """snapshots-source-173""", "Died on +.volumes[172].name"
    assert result.volumes[172].volume_access_groups[0] == 4, "Died on +.volumes[172].volume_access_groups[0]"
    assert result.volumes[172].scsi_naadevice_id == """6f47acc1000000006d696434000002a1""", "Died on +.volumes[172].scsi_naadevice_id"
    assert result.volumes[172].total_size == 5000658944, "Died on +.volumes[172].total_size"
    assert result.volumes[172].block_size == 4096, "Died on +.volumes[172].block_size"
    assert result.volumes[172].scsi_euidevice_id == """6d696434000002a1f47acc0100000000""", "Died on +.volumes[172].scsi_euidevice_id"
    assert result.volumes[172].volume_id == 673, "Died on +.volumes[172].volume_id"
    assert result.volumes[172].access == """readWrite""", "Died on +.volumes[172].access"
    assert result.volumes[172].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-173.673""", "Died on +.volumes[172].iqn"
    assert result.volumes[172].slice_count == 1, "Died on +.volumes[172].slice_count"
    assert type(result.volumes[172].attributes) is dict, "Died on .volumes[172].attributes"
    assert result.volumes[172].volume_pairs[0].volume_pair_uuid == UUID("df5597c8-0c75-4d97-b478-bb657d17d59b"), "Died on .volumes[172].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[172].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[172].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[172].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[172].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[172].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[172].volume_pairs[0].remote_replication.state"
    assert result.volumes[172].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[172].volume_pairs[0].remote_replication.mode"
    assert result.volumes[172].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[172].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[172].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[172].volume_pairs[0].cluster_pair_id"
    assert result.volumes[172].volume_pairs[0].remote_volume_id == 1173, "Died on +.volumes[172].volume_pairs[0].remote_volume_id"
    assert result.volumes[172].volume_pairs[0].remote_volume_name == """snap-target-173""", "Died on +.volumes[172].volume_pairs[0].remote_volume_name"
    assert result.volumes[172].volume_pairs[0].remote_slice_id == 1173, "Died on +.volumes[172].volume_pairs[0].remote_slice_id"
    assert result.volumes[172].account_id == 4, "Died on +.volumes[172].account_id"
    assert result.volumes[172].create_time == """2016-12-30T18:07:08Z""", "Died on +.volumes[172].create_time"
    assert result.volumes[172].virtual_volume_id is None, "Died on .volumes[172].virtual_volume_id"
    assert result.volumes[171].status == """active""", "Died on +.volumes[171].status"
    assert result.volumes[171].enable512e == False, "Died on +.volumes[171].enable512e"
    assert result.volumes[171].qos.burst_iops == 15000, "Died on +.volumes[171].qos.burst_iops"
    assert result.volumes[171].qos.burst_time == 60, "Died on +.volumes[171].qos.burst_time"
    assert result.volumes[171].qos.min_iops == 100, "Died on +.volumes[171].qos.min_iops"
    assert result.volumes[171].qos.max_iops == 15000, "Died on +.volumes[171].qos.max_iops"
    assert result.volumes[171].name == """snapshots-source-172""", "Died on +.volumes[171].name"
    assert result.volumes[171].volume_access_groups[0] == 4, "Died on +.volumes[171].volume_access_groups[0]"
    assert result.volumes[171].scsi_naadevice_id == """6f47acc1000000006d696434000002a0""", "Died on +.volumes[171].scsi_naadevice_id"
    assert result.volumes[171].total_size == 5000658944, "Died on +.volumes[171].total_size"
    assert result.volumes[171].block_size == 4096, "Died on +.volumes[171].block_size"
    assert result.volumes[171].scsi_euidevice_id == """6d696434000002a0f47acc0100000000""", "Died on +.volumes[171].scsi_euidevice_id"
    assert result.volumes[171].volume_id == 672, "Died on +.volumes[171].volume_id"
    assert result.volumes[171].access == """readWrite""", "Died on +.volumes[171].access"
    assert result.volumes[171].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-172.672""", "Died on +.volumes[171].iqn"
    assert result.volumes[171].slice_count == 1, "Died on +.volumes[171].slice_count"
    assert type(result.volumes[171].attributes) is dict, "Died on .volumes[171].attributes"
    assert result.volumes[171].volume_pairs[0].volume_pair_uuid == UUID("648bbbcc-a28d-4490-befb-53aac4b3002a"), "Died on .volumes[171].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[171].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[171].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[171].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[171].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[171].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[171].volume_pairs[0].remote_replication.state"
    assert result.volumes[171].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[171].volume_pairs[0].remote_replication.mode"
    assert result.volumes[171].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[171].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[171].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[171].volume_pairs[0].cluster_pair_id"
    assert result.volumes[171].volume_pairs[0].remote_volume_id == 1172, "Died on +.volumes[171].volume_pairs[0].remote_volume_id"
    assert result.volumes[171].volume_pairs[0].remote_volume_name == """snap-target-172""", "Died on +.volumes[171].volume_pairs[0].remote_volume_name"
    assert result.volumes[171].volume_pairs[0].remote_slice_id == 1172, "Died on +.volumes[171].volume_pairs[0].remote_slice_id"
    assert result.volumes[171].account_id == 4, "Died on +.volumes[171].account_id"
    assert result.volumes[171].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[171].create_time"
    assert result.volumes[171].virtual_volume_id is None, "Died on .volumes[171].virtual_volume_id"
    assert result.volumes[170].status == """active""", "Died on +.volumes[170].status"
    assert result.volumes[170].enable512e == False, "Died on +.volumes[170].enable512e"
    assert result.volumes[170].qos.burst_iops == 15000, "Died on +.volumes[170].qos.burst_iops"
    assert result.volumes[170].qos.burst_time == 60, "Died on +.volumes[170].qos.burst_time"
    assert result.volumes[170].qos.min_iops == 100, "Died on +.volumes[170].qos.min_iops"
    assert result.volumes[170].qos.max_iops == 15000, "Died on +.volumes[170].qos.max_iops"
    assert result.volumes[170].name == """snapshots-source-171""", "Died on +.volumes[170].name"
    assert result.volumes[170].volume_access_groups[0] == 4, "Died on +.volumes[170].volume_access_groups[0]"
    assert result.volumes[170].scsi_naadevice_id == """6f47acc1000000006d6964340000029f""", "Died on +.volumes[170].scsi_naadevice_id"
    assert result.volumes[170].total_size == 5000658944, "Died on +.volumes[170].total_size"
    assert result.volumes[170].block_size == 4096, "Died on +.volumes[170].block_size"
    assert result.volumes[170].scsi_euidevice_id == """6d6964340000029ff47acc0100000000""", "Died on +.volumes[170].scsi_euidevice_id"
    assert result.volumes[170].volume_id == 671, "Died on +.volumes[170].volume_id"
    assert result.volumes[170].access == """readWrite""", "Died on +.volumes[170].access"
    assert result.volumes[170].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-171.671""", "Died on +.volumes[170].iqn"
    assert result.volumes[170].slice_count == 1, "Died on +.volumes[170].slice_count"
    assert type(result.volumes[170].attributes) is dict, "Died on .volumes[170].attributes"
    assert result.volumes[170].volume_pairs[0].volume_pair_uuid == UUID("d78d9f84-143c-49a4-bb22-2539c239f74e"), "Died on .volumes[170].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[170].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[170].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[170].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[170].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[170].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[170].volume_pairs[0].remote_replication.state"
    assert result.volumes[170].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[170].volume_pairs[0].remote_replication.mode"
    assert result.volumes[170].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[170].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[170].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[170].volume_pairs[0].cluster_pair_id"
    assert result.volumes[170].volume_pairs[0].remote_volume_id == 1171, "Died on +.volumes[170].volume_pairs[0].remote_volume_id"
    assert result.volumes[170].volume_pairs[0].remote_volume_name == """snap-target-171""", "Died on +.volumes[170].volume_pairs[0].remote_volume_name"
    assert result.volumes[170].volume_pairs[0].remote_slice_id == 1171, "Died on +.volumes[170].volume_pairs[0].remote_slice_id"
    assert result.volumes[170].account_id == 4, "Died on +.volumes[170].account_id"
    assert result.volumes[170].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[170].create_time"
    assert result.volumes[170].virtual_volume_id is None, "Died on .volumes[170].virtual_volume_id"
    assert result.volumes[169].status == """active""", "Died on +.volumes[169].status"
    assert result.volumes[169].enable512e == False, "Died on +.volumes[169].enable512e"
    assert result.volumes[169].qos.burst_iops == 15000, "Died on +.volumes[169].qos.burst_iops"
    assert result.volumes[169].qos.burst_time == 60, "Died on +.volumes[169].qos.burst_time"
    assert result.volumes[169].qos.min_iops == 100, "Died on +.volumes[169].qos.min_iops"
    assert result.volumes[169].qos.max_iops == 15000, "Died on +.volumes[169].qos.max_iops"
    assert result.volumes[169].name == """snapshots-source-170""", "Died on +.volumes[169].name"
    assert result.volumes[169].volume_access_groups[0] == 4, "Died on +.volumes[169].volume_access_groups[0]"
    assert result.volumes[169].scsi_naadevice_id == """6f47acc1000000006d6964340000029e""", "Died on +.volumes[169].scsi_naadevice_id"
    assert result.volumes[169].total_size == 5000658944, "Died on +.volumes[169].total_size"
    assert result.volumes[169].block_size == 4096, "Died on +.volumes[169].block_size"
    assert result.volumes[169].scsi_euidevice_id == """6d6964340000029ef47acc0100000000""", "Died on +.volumes[169].scsi_euidevice_id"
    assert result.volumes[169].volume_id == 670, "Died on +.volumes[169].volume_id"
    assert result.volumes[169].access == """readWrite""", "Died on +.volumes[169].access"
    assert result.volumes[169].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-170.670""", "Died on +.volumes[169].iqn"
    assert result.volumes[169].slice_count == 1, "Died on +.volumes[169].slice_count"
    assert type(result.volumes[169].attributes) is dict, "Died on .volumes[169].attributes"
    assert result.volumes[169].volume_pairs[0].volume_pair_uuid == UUID("d8f04462-6b68-47ff-b2d4-a6e3e3f80ba8"), "Died on .volumes[169].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[169].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[169].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[169].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[169].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[169].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[169].volume_pairs[0].remote_replication.state"
    assert result.volumes[169].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[169].volume_pairs[0].remote_replication.mode"
    assert result.volumes[169].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[169].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[169].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[169].volume_pairs[0].cluster_pair_id"
    assert result.volumes[169].volume_pairs[0].remote_volume_id == 1170, "Died on +.volumes[169].volume_pairs[0].remote_volume_id"
    assert result.volumes[169].volume_pairs[0].remote_volume_name == """snap-target-170""", "Died on +.volumes[169].volume_pairs[0].remote_volume_name"
    assert result.volumes[169].volume_pairs[0].remote_slice_id == 1170, "Died on +.volumes[169].volume_pairs[0].remote_slice_id"
    assert result.volumes[169].account_id == 4, "Died on +.volumes[169].account_id"
    assert result.volumes[169].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[169].create_time"
    assert result.volumes[169].virtual_volume_id is None, "Died on .volumes[169].virtual_volume_id"
    assert result.volumes[168].status == """active""", "Died on +.volumes[168].status"
    assert result.volumes[168].enable512e == False, "Died on +.volumes[168].enable512e"
    assert result.volumes[168].qos.burst_iops == 15000, "Died on +.volumes[168].qos.burst_iops"
    assert result.volumes[168].qos.burst_time == 60, "Died on +.volumes[168].qos.burst_time"
    assert result.volumes[168].qos.min_iops == 100, "Died on +.volumes[168].qos.min_iops"
    assert result.volumes[168].qos.max_iops == 15000, "Died on +.volumes[168].qos.max_iops"
    assert result.volumes[168].name == """snapshots-source-169""", "Died on +.volumes[168].name"
    assert result.volumes[168].volume_access_groups[0] == 4, "Died on +.volumes[168].volume_access_groups[0]"
    assert result.volumes[168].scsi_naadevice_id == """6f47acc1000000006d6964340000029d""", "Died on +.volumes[168].scsi_naadevice_id"
    assert result.volumes[168].total_size == 5000658944, "Died on +.volumes[168].total_size"
    assert result.volumes[168].block_size == 4096, "Died on +.volumes[168].block_size"
    assert result.volumes[168].scsi_euidevice_id == """6d6964340000029df47acc0100000000""", "Died on +.volumes[168].scsi_euidevice_id"
    assert result.volumes[168].volume_id == 669, "Died on +.volumes[168].volume_id"
    assert result.volumes[168].access == """readWrite""", "Died on +.volumes[168].access"
    assert result.volumes[168].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-169.669""", "Died on +.volumes[168].iqn"
    assert result.volumes[168].slice_count == 1, "Died on +.volumes[168].slice_count"
    assert type(result.volumes[168].attributes) is dict, "Died on .volumes[168].attributes"
    assert result.volumes[168].volume_pairs[0].volume_pair_uuid == UUID("fe57dbca-984e-4947-9567-82a43412c939"), "Died on .volumes[168].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[168].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[168].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[168].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[168].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[168].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[168].volume_pairs[0].remote_replication.state"
    assert result.volumes[168].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[168].volume_pairs[0].remote_replication.mode"
    assert result.volumes[168].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[168].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[168].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[168].volume_pairs[0].cluster_pair_id"
    assert result.volumes[168].volume_pairs[0].remote_volume_id == 1169, "Died on +.volumes[168].volume_pairs[0].remote_volume_id"
    assert result.volumes[168].volume_pairs[0].remote_volume_name == """snap-target-169""", "Died on +.volumes[168].volume_pairs[0].remote_volume_name"
    assert result.volumes[168].volume_pairs[0].remote_slice_id == 1169, "Died on +.volumes[168].volume_pairs[0].remote_slice_id"
    assert result.volumes[168].account_id == 4, "Died on +.volumes[168].account_id"
    assert result.volumes[168].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[168].create_time"
    assert result.volumes[168].virtual_volume_id is None, "Died on .volumes[168].virtual_volume_id"
    assert result.volumes[167].status == """active""", "Died on +.volumes[167].status"
    assert result.volumes[167].enable512e == False, "Died on +.volumes[167].enable512e"
    assert result.volumes[167].qos.burst_iops == 15000, "Died on +.volumes[167].qos.burst_iops"
    assert result.volumes[167].qos.burst_time == 60, "Died on +.volumes[167].qos.burst_time"
    assert result.volumes[167].qos.min_iops == 100, "Died on +.volumes[167].qos.min_iops"
    assert result.volumes[167].qos.max_iops == 15000, "Died on +.volumes[167].qos.max_iops"
    assert result.volumes[167].name == """snapshots-source-168""", "Died on +.volumes[167].name"
    assert result.volumes[167].volume_access_groups[0] == 4, "Died on +.volumes[167].volume_access_groups[0]"
    assert result.volumes[167].scsi_naadevice_id == """6f47acc1000000006d6964340000029c""", "Died on +.volumes[167].scsi_naadevice_id"
    assert result.volumes[167].total_size == 5000658944, "Died on +.volumes[167].total_size"
    assert result.volumes[167].block_size == 4096, "Died on +.volumes[167].block_size"
    assert result.volumes[167].scsi_euidevice_id == """6d6964340000029cf47acc0100000000""", "Died on +.volumes[167].scsi_euidevice_id"
    assert result.volumes[167].volume_id == 668, "Died on +.volumes[167].volume_id"
    assert result.volumes[167].access == """readWrite""", "Died on +.volumes[167].access"
    assert result.volumes[167].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-168.668""", "Died on +.volumes[167].iqn"
    assert result.volumes[167].slice_count == 1, "Died on +.volumes[167].slice_count"
    assert type(result.volumes[167].attributes) is dict, "Died on .volumes[167].attributes"
    assert result.volumes[167].volume_pairs[0].volume_pair_uuid == UUID("0943acef-1c9c-429a-a25e-3f2be8f8ec4d"), "Died on .volumes[167].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[167].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[167].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[167].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[167].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[167].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[167].volume_pairs[0].remote_replication.state"
    assert result.volumes[167].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[167].volume_pairs[0].remote_replication.mode"
    assert result.volumes[167].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[167].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[167].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[167].volume_pairs[0].cluster_pair_id"
    assert result.volumes[167].volume_pairs[0].remote_volume_id == 1168, "Died on +.volumes[167].volume_pairs[0].remote_volume_id"
    assert result.volumes[167].volume_pairs[0].remote_volume_name == """snap-target-168""", "Died on +.volumes[167].volume_pairs[0].remote_volume_name"
    assert result.volumes[167].volume_pairs[0].remote_slice_id == 1168, "Died on +.volumes[167].volume_pairs[0].remote_slice_id"
    assert result.volumes[167].account_id == 4, "Died on +.volumes[167].account_id"
    assert result.volumes[167].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[167].create_time"
    assert result.volumes[167].virtual_volume_id is None, "Died on .volumes[167].virtual_volume_id"
    assert result.volumes[166].status == """active""", "Died on +.volumes[166].status"
    assert result.volumes[166].enable512e == False, "Died on +.volumes[166].enable512e"
    assert result.volumes[166].qos.burst_iops == 15000, "Died on +.volumes[166].qos.burst_iops"
    assert result.volumes[166].qos.burst_time == 60, "Died on +.volumes[166].qos.burst_time"
    assert result.volumes[166].qos.min_iops == 100, "Died on +.volumes[166].qos.min_iops"
    assert result.volumes[166].qos.max_iops == 15000, "Died on +.volumes[166].qos.max_iops"
    assert result.volumes[166].name == """snapshots-source-167""", "Died on +.volumes[166].name"
    assert result.volumes[166].volume_access_groups[0] == 4, "Died on +.volumes[166].volume_access_groups[0]"
    assert result.volumes[166].scsi_naadevice_id == """6f47acc1000000006d6964340000029b""", "Died on +.volumes[166].scsi_naadevice_id"
    assert result.volumes[166].total_size == 5000658944, "Died on +.volumes[166].total_size"
    assert result.volumes[166].block_size == 4096, "Died on +.volumes[166].block_size"
    assert result.volumes[166].scsi_euidevice_id == """6d6964340000029bf47acc0100000000""", "Died on +.volumes[166].scsi_euidevice_id"
    assert result.volumes[166].volume_id == 667, "Died on +.volumes[166].volume_id"
    assert result.volumes[166].access == """readWrite""", "Died on +.volumes[166].access"
    assert result.volumes[166].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-167.667""", "Died on +.volumes[166].iqn"
    assert result.volumes[166].slice_count == 1, "Died on +.volumes[166].slice_count"
    assert type(result.volumes[166].attributes) is dict, "Died on .volumes[166].attributes"
    assert result.volumes[166].volume_pairs[0].volume_pair_uuid == UUID("7bfeb91b-4235-46b9-8b8a-b14cca710084"), "Died on .volumes[166].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[166].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[166].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[166].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[166].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[166].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[166].volume_pairs[0].remote_replication.state"
    assert result.volumes[166].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[166].volume_pairs[0].remote_replication.mode"
    assert result.volumes[166].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[166].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[166].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[166].volume_pairs[0].cluster_pair_id"
    assert result.volumes[166].volume_pairs[0].remote_volume_id == 1167, "Died on +.volumes[166].volume_pairs[0].remote_volume_id"
    assert result.volumes[166].volume_pairs[0].remote_volume_name == """snap-target-167""", "Died on +.volumes[166].volume_pairs[0].remote_volume_name"
    assert result.volumes[166].volume_pairs[0].remote_slice_id == 1167, "Died on +.volumes[166].volume_pairs[0].remote_slice_id"
    assert result.volumes[166].account_id == 4, "Died on +.volumes[166].account_id"
    assert result.volumes[166].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[166].create_time"
    assert result.volumes[166].virtual_volume_id is None, "Died on .volumes[166].virtual_volume_id"
    assert result.volumes[165].status == """active""", "Died on +.volumes[165].status"
    assert result.volumes[165].enable512e == False, "Died on +.volumes[165].enable512e"
    assert result.volumes[165].qos.burst_iops == 15000, "Died on +.volumes[165].qos.burst_iops"
    assert result.volumes[165].qos.burst_time == 60, "Died on +.volumes[165].qos.burst_time"
    assert result.volumes[165].qos.min_iops == 100, "Died on +.volumes[165].qos.min_iops"
    assert result.volumes[165].qos.max_iops == 15000, "Died on +.volumes[165].qos.max_iops"
    assert result.volumes[165].name == """snapshots-source-166""", "Died on +.volumes[165].name"
    assert result.volumes[165].volume_access_groups[0] == 4, "Died on +.volumes[165].volume_access_groups[0]"
    assert result.volumes[165].scsi_naadevice_id == """6f47acc1000000006d6964340000029a""", "Died on +.volumes[165].scsi_naadevice_id"
    assert result.volumes[165].total_size == 5000658944, "Died on +.volumes[165].total_size"
    assert result.volumes[165].block_size == 4096, "Died on +.volumes[165].block_size"
    assert result.volumes[165].scsi_euidevice_id == """6d6964340000029af47acc0100000000""", "Died on +.volumes[165].scsi_euidevice_id"
    assert result.volumes[165].volume_id == 666, "Died on +.volumes[165].volume_id"
    assert result.volumes[165].access == """readWrite""", "Died on +.volumes[165].access"
    assert result.volumes[165].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-166.666""", "Died on +.volumes[165].iqn"
    assert result.volumes[165].slice_count == 1, "Died on +.volumes[165].slice_count"
    assert type(result.volumes[165].attributes) is dict, "Died on .volumes[165].attributes"
    assert result.volumes[165].volume_pairs[0].volume_pair_uuid == UUID("07e37e8c-191b-4f16-9bb9-44f38da9bc96"), "Died on .volumes[165].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[165].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[165].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[165].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[165].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[165].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[165].volume_pairs[0].remote_replication.state"
    assert result.volumes[165].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[165].volume_pairs[0].remote_replication.mode"
    assert result.volumes[165].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[165].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[165].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[165].volume_pairs[0].cluster_pair_id"
    assert result.volumes[165].volume_pairs[0].remote_volume_id == 1166, "Died on +.volumes[165].volume_pairs[0].remote_volume_id"
    assert result.volumes[165].volume_pairs[0].remote_volume_name == """snap-target-166""", "Died on +.volumes[165].volume_pairs[0].remote_volume_name"
    assert result.volumes[165].volume_pairs[0].remote_slice_id == 1166, "Died on +.volumes[165].volume_pairs[0].remote_slice_id"
    assert result.volumes[165].account_id == 4, "Died on +.volumes[165].account_id"
    assert result.volumes[165].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[165].create_time"
    assert result.volumes[165].virtual_volume_id is None, "Died on .volumes[165].virtual_volume_id"
    assert result.volumes[164].status == """active""", "Died on +.volumes[164].status"
    assert result.volumes[164].enable512e == False, "Died on +.volumes[164].enable512e"
    assert result.volumes[164].qos.burst_iops == 15000, "Died on +.volumes[164].qos.burst_iops"
    assert result.volumes[164].qos.burst_time == 60, "Died on +.volumes[164].qos.burst_time"
    assert result.volumes[164].qos.min_iops == 100, "Died on +.volumes[164].qos.min_iops"
    assert result.volumes[164].qos.max_iops == 15000, "Died on +.volumes[164].qos.max_iops"
    assert result.volumes[164].name == """snapshots-source-165""", "Died on +.volumes[164].name"
    assert result.volumes[164].volume_access_groups[0] == 4, "Died on +.volumes[164].volume_access_groups[0]"
    assert result.volumes[164].scsi_naadevice_id == """6f47acc1000000006d69643400000299""", "Died on +.volumes[164].scsi_naadevice_id"
    assert result.volumes[164].total_size == 5000658944, "Died on +.volumes[164].total_size"
    assert result.volumes[164].block_size == 4096, "Died on +.volumes[164].block_size"
    assert result.volumes[164].scsi_euidevice_id == """6d69643400000299f47acc0100000000""", "Died on +.volumes[164].scsi_euidevice_id"
    assert result.volumes[164].volume_id == 665, "Died on +.volumes[164].volume_id"
    assert result.volumes[164].access == """readWrite""", "Died on +.volumes[164].access"
    assert result.volumes[164].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-165.665""", "Died on +.volumes[164].iqn"
    assert result.volumes[164].slice_count == 1, "Died on +.volumes[164].slice_count"
    assert type(result.volumes[164].attributes) is dict, "Died on .volumes[164].attributes"
    assert result.volumes[164].volume_pairs[0].volume_pair_uuid == UUID("ab22af96-dd06-4864-a777-19a87b6a8518"), "Died on .volumes[164].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[164].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[164].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[164].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[164].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[164].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[164].volume_pairs[0].remote_replication.state"
    assert result.volumes[164].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[164].volume_pairs[0].remote_replication.mode"
    assert result.volumes[164].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[164].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[164].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[164].volume_pairs[0].cluster_pair_id"
    assert result.volumes[164].volume_pairs[0].remote_volume_id == 1165, "Died on +.volumes[164].volume_pairs[0].remote_volume_id"
    assert result.volumes[164].volume_pairs[0].remote_volume_name == """snap-target-165""", "Died on +.volumes[164].volume_pairs[0].remote_volume_name"
    assert result.volumes[164].volume_pairs[0].remote_slice_id == 1165, "Died on +.volumes[164].volume_pairs[0].remote_slice_id"
    assert result.volumes[164].account_id == 4, "Died on +.volumes[164].account_id"
    assert result.volumes[164].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[164].create_time"
    assert result.volumes[164].virtual_volume_id is None, "Died on .volumes[164].virtual_volume_id"
    assert result.volumes[163].status == """active""", "Died on +.volumes[163].status"
    assert result.volumes[163].enable512e == False, "Died on +.volumes[163].enable512e"
    assert result.volumes[163].qos.burst_iops == 15000, "Died on +.volumes[163].qos.burst_iops"
    assert result.volumes[163].qos.burst_time == 60, "Died on +.volumes[163].qos.burst_time"
    assert result.volumes[163].qos.min_iops == 100, "Died on +.volumes[163].qos.min_iops"
    assert result.volumes[163].qos.max_iops == 15000, "Died on +.volumes[163].qos.max_iops"
    assert result.volumes[163].name == """snapshots-source-164""", "Died on +.volumes[163].name"
    assert result.volumes[163].volume_access_groups[0] == 4, "Died on +.volumes[163].volume_access_groups[0]"
    assert result.volumes[163].scsi_naadevice_id == """6f47acc1000000006d69643400000298""", "Died on +.volumes[163].scsi_naadevice_id"
    assert result.volumes[163].total_size == 5000658944, "Died on +.volumes[163].total_size"
    assert result.volumes[163].block_size == 4096, "Died on +.volumes[163].block_size"
    assert result.volumes[163].scsi_euidevice_id == """6d69643400000298f47acc0100000000""", "Died on +.volumes[163].scsi_euidevice_id"
    assert result.volumes[163].volume_id == 664, "Died on +.volumes[163].volume_id"
    assert result.volumes[163].access == """readWrite""", "Died on +.volumes[163].access"
    assert result.volumes[163].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-164.664""", "Died on +.volumes[163].iqn"
    assert result.volumes[163].slice_count == 1, "Died on +.volumes[163].slice_count"
    assert type(result.volumes[163].attributes) is dict, "Died on .volumes[163].attributes"
    assert result.volumes[163].volume_pairs[0].volume_pair_uuid == UUID("1d6285ed-cefd-4aae-9302-a38b05bb55cc"), "Died on .volumes[163].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[163].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[163].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[163].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[163].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[163].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[163].volume_pairs[0].remote_replication.state"
    assert result.volumes[163].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[163].volume_pairs[0].remote_replication.mode"
    assert result.volumes[163].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[163].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[163].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[163].volume_pairs[0].cluster_pair_id"
    assert result.volumes[163].volume_pairs[0].remote_volume_id == 1164, "Died on +.volumes[163].volume_pairs[0].remote_volume_id"
    assert result.volumes[163].volume_pairs[0].remote_volume_name == """snap-target-164""", "Died on +.volumes[163].volume_pairs[0].remote_volume_name"
    assert result.volumes[163].volume_pairs[0].remote_slice_id == 1164, "Died on +.volumes[163].volume_pairs[0].remote_slice_id"
    assert result.volumes[163].account_id == 4, "Died on +.volumes[163].account_id"
    assert result.volumes[163].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[163].create_time"
    assert result.volumes[163].virtual_volume_id is None, "Died on .volumes[163].virtual_volume_id"
    assert result.volumes[162].status == """active""", "Died on +.volumes[162].status"
    assert result.volumes[162].enable512e == False, "Died on +.volumes[162].enable512e"
    assert result.volumes[162].qos.burst_iops == 15000, "Died on +.volumes[162].qos.burst_iops"
    assert result.volumes[162].qos.burst_time == 60, "Died on +.volumes[162].qos.burst_time"
    assert result.volumes[162].qos.min_iops == 100, "Died on +.volumes[162].qos.min_iops"
    assert result.volumes[162].qos.max_iops == 15000, "Died on +.volumes[162].qos.max_iops"
    assert result.volumes[162].name == """snapshots-source-163""", "Died on +.volumes[162].name"
    assert result.volumes[162].volume_access_groups[0] == 4, "Died on +.volumes[162].volume_access_groups[0]"
    assert result.volumes[162].scsi_naadevice_id == """6f47acc1000000006d69643400000297""", "Died on +.volumes[162].scsi_naadevice_id"
    assert result.volumes[162].total_size == 5000658944, "Died on +.volumes[162].total_size"
    assert result.volumes[162].block_size == 4096, "Died on +.volumes[162].block_size"
    assert result.volumes[162].scsi_euidevice_id == """6d69643400000297f47acc0100000000""", "Died on +.volumes[162].scsi_euidevice_id"
    assert result.volumes[162].volume_id == 663, "Died on +.volumes[162].volume_id"
    assert result.volumes[162].access == """readWrite""", "Died on +.volumes[162].access"
    assert result.volumes[162].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-163.663""", "Died on +.volumes[162].iqn"
    assert result.volumes[162].slice_count == 1, "Died on +.volumes[162].slice_count"
    assert type(result.volumes[162].attributes) is dict, "Died on .volumes[162].attributes"
    assert result.volumes[162].volume_pairs[0].volume_pair_uuid == UUID("bc2aa8a0-4c38-45e4-8dc8-1d7bebc4b7e5"), "Died on .volumes[162].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[162].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[162].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[162].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[162].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[162].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[162].volume_pairs[0].remote_replication.state"
    assert result.volumes[162].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[162].volume_pairs[0].remote_replication.mode"
    assert result.volumes[162].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[162].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[162].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[162].volume_pairs[0].cluster_pair_id"
    assert result.volumes[162].volume_pairs[0].remote_volume_id == 1163, "Died on +.volumes[162].volume_pairs[0].remote_volume_id"
    assert result.volumes[162].volume_pairs[0].remote_volume_name == """snap-target-163""", "Died on +.volumes[162].volume_pairs[0].remote_volume_name"
    assert result.volumes[162].volume_pairs[0].remote_slice_id == 1163, "Died on +.volumes[162].volume_pairs[0].remote_slice_id"
    assert result.volumes[162].account_id == 4, "Died on +.volumes[162].account_id"
    assert result.volumes[162].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[162].create_time"
    assert result.volumes[162].virtual_volume_id is None, "Died on .volumes[162].virtual_volume_id"
    assert result.volumes[161].status == """active""", "Died on +.volumes[161].status"
    assert result.volumes[161].enable512e == False, "Died on +.volumes[161].enable512e"
    assert result.volumes[161].qos.burst_iops == 15000, "Died on +.volumes[161].qos.burst_iops"
    assert result.volumes[161].qos.burst_time == 60, "Died on +.volumes[161].qos.burst_time"
    assert result.volumes[161].qos.min_iops == 100, "Died on +.volumes[161].qos.min_iops"
    assert result.volumes[161].qos.max_iops == 15000, "Died on +.volumes[161].qos.max_iops"
    assert result.volumes[161].name == """snapshots-source-162""", "Died on +.volumes[161].name"
    assert result.volumes[161].volume_access_groups[0] == 4, "Died on +.volumes[161].volume_access_groups[0]"
    assert result.volumes[161].scsi_naadevice_id == """6f47acc1000000006d69643400000296""", "Died on +.volumes[161].scsi_naadevice_id"
    assert result.volumes[161].total_size == 5000658944, "Died on +.volumes[161].total_size"
    assert result.volumes[161].block_size == 4096, "Died on +.volumes[161].block_size"
    assert result.volumes[161].scsi_euidevice_id == """6d69643400000296f47acc0100000000""", "Died on +.volumes[161].scsi_euidevice_id"
    assert result.volumes[161].volume_id == 662, "Died on +.volumes[161].volume_id"
    assert result.volumes[161].access == """readWrite""", "Died on +.volumes[161].access"
    assert result.volumes[161].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-162.662""", "Died on +.volumes[161].iqn"
    assert result.volumes[161].slice_count == 1, "Died on +.volumes[161].slice_count"
    assert type(result.volumes[161].attributes) is dict, "Died on .volumes[161].attributes"
    assert result.volumes[161].volume_pairs[0].volume_pair_uuid == UUID("7cecd9b9-9a98-4fc6-919e-10a48c0de27b"), "Died on .volumes[161].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[161].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[161].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[161].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[161].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[161].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[161].volume_pairs[0].remote_replication.state"
    assert result.volumes[161].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[161].volume_pairs[0].remote_replication.mode"
    assert result.volumes[161].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[161].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[161].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[161].volume_pairs[0].cluster_pair_id"
    assert result.volumes[161].volume_pairs[0].remote_volume_id == 1162, "Died on +.volumes[161].volume_pairs[0].remote_volume_id"
    assert result.volumes[161].volume_pairs[0].remote_volume_name == """snap-target-162""", "Died on +.volumes[161].volume_pairs[0].remote_volume_name"
    assert result.volumes[161].volume_pairs[0].remote_slice_id == 1162, "Died on +.volumes[161].volume_pairs[0].remote_slice_id"
    assert result.volumes[161].account_id == 4, "Died on +.volumes[161].account_id"
    assert result.volumes[161].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[161].create_time"
    assert result.volumes[161].virtual_volume_id is None, "Died on .volumes[161].virtual_volume_id"
    assert result.volumes[160].status == """active""", "Died on +.volumes[160].status"
    assert result.volumes[160].enable512e == False, "Died on +.volumes[160].enable512e"
    assert result.volumes[160].qos.burst_iops == 15000, "Died on +.volumes[160].qos.burst_iops"
    assert result.volumes[160].qos.burst_time == 60, "Died on +.volumes[160].qos.burst_time"
    assert result.volumes[160].qos.min_iops == 100, "Died on +.volumes[160].qos.min_iops"
    assert result.volumes[160].qos.max_iops == 15000, "Died on +.volumes[160].qos.max_iops"
    assert result.volumes[160].name == """snapshots-source-161""", "Died on +.volumes[160].name"
    assert result.volumes[160].volume_access_groups[0] == 4, "Died on +.volumes[160].volume_access_groups[0]"
    assert result.volumes[160].scsi_naadevice_id == """6f47acc1000000006d69643400000295""", "Died on +.volumes[160].scsi_naadevice_id"
    assert result.volumes[160].total_size == 5000658944, "Died on +.volumes[160].total_size"
    assert result.volumes[160].block_size == 4096, "Died on +.volumes[160].block_size"
    assert result.volumes[160].scsi_euidevice_id == """6d69643400000295f47acc0100000000""", "Died on +.volumes[160].scsi_euidevice_id"
    assert result.volumes[160].volume_id == 661, "Died on +.volumes[160].volume_id"
    assert result.volumes[160].access == """readWrite""", "Died on +.volumes[160].access"
    assert result.volumes[160].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-161.661""", "Died on +.volumes[160].iqn"
    assert result.volumes[160].slice_count == 1, "Died on +.volumes[160].slice_count"
    assert type(result.volumes[160].attributes) is dict, "Died on .volumes[160].attributes"
    assert result.volumes[160].volume_pairs[0].volume_pair_uuid == UUID("3708275e-e262-4724-b573-bf14286324b5"), "Died on .volumes[160].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[160].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[160].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[160].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[160].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[160].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[160].volume_pairs[0].remote_replication.state"
    assert result.volumes[160].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[160].volume_pairs[0].remote_replication.mode"
    assert result.volumes[160].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[160].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[160].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[160].volume_pairs[0].cluster_pair_id"
    assert result.volumes[160].volume_pairs[0].remote_volume_id == 1161, "Died on +.volumes[160].volume_pairs[0].remote_volume_id"
    assert result.volumes[160].volume_pairs[0].remote_volume_name == """snap-target-161""", "Died on +.volumes[160].volume_pairs[0].remote_volume_name"
    assert result.volumes[160].volume_pairs[0].remote_slice_id == 1161, "Died on +.volumes[160].volume_pairs[0].remote_slice_id"
    assert result.volumes[160].account_id == 4, "Died on +.volumes[160].account_id"
    assert result.volumes[160].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[160].create_time"
    assert result.volumes[160].virtual_volume_id is None, "Died on .volumes[160].virtual_volume_id"
    assert result.volumes[159].status == """active""", "Died on +.volumes[159].status"
    assert result.volumes[159].enable512e == False, "Died on +.volumes[159].enable512e"
    assert result.volumes[159].qos.burst_iops == 15000, "Died on +.volumes[159].qos.burst_iops"
    assert result.volumes[159].qos.burst_time == 60, "Died on +.volumes[159].qos.burst_time"
    assert result.volumes[159].qos.min_iops == 100, "Died on +.volumes[159].qos.min_iops"
    assert result.volumes[159].qos.max_iops == 15000, "Died on +.volumes[159].qos.max_iops"
    assert result.volumes[159].name == """snapshots-source-160""", "Died on +.volumes[159].name"
    assert result.volumes[159].volume_access_groups[0] == 4, "Died on +.volumes[159].volume_access_groups[0]"
    assert result.volumes[159].scsi_naadevice_id == """6f47acc1000000006d69643400000294""", "Died on +.volumes[159].scsi_naadevice_id"
    assert result.volumes[159].total_size == 5000658944, "Died on +.volumes[159].total_size"
    assert result.volumes[159].block_size == 4096, "Died on +.volumes[159].block_size"
    assert result.volumes[159].scsi_euidevice_id == """6d69643400000294f47acc0100000000""", "Died on +.volumes[159].scsi_euidevice_id"
    assert result.volumes[159].volume_id == 660, "Died on +.volumes[159].volume_id"
    assert result.volumes[159].access == """readWrite""", "Died on +.volumes[159].access"
    assert result.volumes[159].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-160.660""", "Died on +.volumes[159].iqn"
    assert result.volumes[159].slice_count == 1, "Died on +.volumes[159].slice_count"
    assert type(result.volumes[159].attributes) is dict, "Died on .volumes[159].attributes"
    assert result.volumes[159].volume_pairs[0].volume_pair_uuid == UUID("e92544c1-cb3a-4dd6-a0fb-d4ffad9a6f19"), "Died on .volumes[159].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[159].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[159].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[159].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[159].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[159].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[159].volume_pairs[0].remote_replication.state"
    assert result.volumes[159].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[159].volume_pairs[0].remote_replication.mode"
    assert result.volumes[159].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[159].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[159].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[159].volume_pairs[0].cluster_pair_id"
    assert result.volumes[159].volume_pairs[0].remote_volume_id == 1160, "Died on +.volumes[159].volume_pairs[0].remote_volume_id"
    assert result.volumes[159].volume_pairs[0].remote_volume_name == """snap-target-160""", "Died on +.volumes[159].volume_pairs[0].remote_volume_name"
    assert result.volumes[159].volume_pairs[0].remote_slice_id == 1160, "Died on +.volumes[159].volume_pairs[0].remote_slice_id"
    assert result.volumes[159].account_id == 4, "Died on +.volumes[159].account_id"
    assert result.volumes[159].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[159].create_time"
    assert result.volumes[159].virtual_volume_id is None, "Died on .volumes[159].virtual_volume_id"
    assert result.volumes[158].status == """active""", "Died on +.volumes[158].status"
    assert result.volumes[158].enable512e == False, "Died on +.volumes[158].enable512e"
    assert result.volumes[158].qos.burst_iops == 15000, "Died on +.volumes[158].qos.burst_iops"
    assert result.volumes[158].qos.burst_time == 60, "Died on +.volumes[158].qos.burst_time"
    assert result.volumes[158].qos.min_iops == 100, "Died on +.volumes[158].qos.min_iops"
    assert result.volumes[158].qos.max_iops == 15000, "Died on +.volumes[158].qos.max_iops"
    assert result.volumes[158].name == """snapshots-source-159""", "Died on +.volumes[158].name"
    assert result.volumes[158].volume_access_groups[0] == 4, "Died on +.volumes[158].volume_access_groups[0]"
    assert result.volumes[158].scsi_naadevice_id == """6f47acc1000000006d69643400000293""", "Died on +.volumes[158].scsi_naadevice_id"
    assert result.volumes[158].total_size == 5000658944, "Died on +.volumes[158].total_size"
    assert result.volumes[158].block_size == 4096, "Died on +.volumes[158].block_size"
    assert result.volumes[158].scsi_euidevice_id == """6d69643400000293f47acc0100000000""", "Died on +.volumes[158].scsi_euidevice_id"
    assert result.volumes[158].volume_id == 659, "Died on +.volumes[158].volume_id"
    assert result.volumes[158].access == """readWrite""", "Died on +.volumes[158].access"
    assert result.volumes[158].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-159.659""", "Died on +.volumes[158].iqn"
    assert result.volumes[158].slice_count == 1, "Died on +.volumes[158].slice_count"
    assert type(result.volumes[158].attributes) is dict, "Died on .volumes[158].attributes"
    assert result.volumes[158].volume_pairs[0].volume_pair_uuid == UUID("7a4c467d-3b5e-4ece-98d1-4dca486e88ae"), "Died on .volumes[158].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[158].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[158].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[158].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[158].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[158].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[158].volume_pairs[0].remote_replication.state"
    assert result.volumes[158].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[158].volume_pairs[0].remote_replication.mode"
    assert result.volumes[158].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[158].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[158].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[158].volume_pairs[0].cluster_pair_id"
    assert result.volumes[158].volume_pairs[0].remote_volume_id == 1159, "Died on +.volumes[158].volume_pairs[0].remote_volume_id"
    assert result.volumes[158].volume_pairs[0].remote_volume_name == """snap-target-159""", "Died on +.volumes[158].volume_pairs[0].remote_volume_name"
    assert result.volumes[158].volume_pairs[0].remote_slice_id == 1159, "Died on +.volumes[158].volume_pairs[0].remote_slice_id"
    assert result.volumes[158].account_id == 4, "Died on +.volumes[158].account_id"
    assert result.volumes[158].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[158].create_time"
    assert result.volumes[158].virtual_volume_id is None, "Died on .volumes[158].virtual_volume_id"
    assert result.volumes[157].status == """active""", "Died on +.volumes[157].status"
    assert result.volumes[157].enable512e == False, "Died on +.volumes[157].enable512e"
    assert result.volumes[157].qos.burst_iops == 15000, "Died on +.volumes[157].qos.burst_iops"
    assert result.volumes[157].qos.burst_time == 60, "Died on +.volumes[157].qos.burst_time"
    assert result.volumes[157].qos.min_iops == 100, "Died on +.volumes[157].qos.min_iops"
    assert result.volumes[157].qos.max_iops == 15000, "Died on +.volumes[157].qos.max_iops"
    assert result.volumes[157].name == """snapshots-source-158""", "Died on +.volumes[157].name"
    assert result.volumes[157].volume_access_groups[0] == 4, "Died on +.volumes[157].volume_access_groups[0]"
    assert result.volumes[157].scsi_naadevice_id == """6f47acc1000000006d69643400000292""", "Died on +.volumes[157].scsi_naadevice_id"
    assert result.volumes[157].total_size == 5000658944, "Died on +.volumes[157].total_size"
    assert result.volumes[157].block_size == 4096, "Died on +.volumes[157].block_size"
    assert result.volumes[157].scsi_euidevice_id == """6d69643400000292f47acc0100000000""", "Died on +.volumes[157].scsi_euidevice_id"
    assert result.volumes[157].volume_id == 658, "Died on +.volumes[157].volume_id"
    assert result.volumes[157].access == """readWrite""", "Died on +.volumes[157].access"
    assert result.volumes[157].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-158.658""", "Died on +.volumes[157].iqn"
    assert result.volumes[157].slice_count == 1, "Died on +.volumes[157].slice_count"
    assert type(result.volumes[157].attributes) is dict, "Died on .volumes[157].attributes"
    assert result.volumes[157].volume_pairs[0].volume_pair_uuid == UUID("394c5b4f-88f8-4167-9bb6-a5f1678fc617"), "Died on .volumes[157].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[157].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[157].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[157].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[157].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[157].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[157].volume_pairs[0].remote_replication.state"
    assert result.volumes[157].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[157].volume_pairs[0].remote_replication.mode"
    assert result.volumes[157].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[157].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[157].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[157].volume_pairs[0].cluster_pair_id"
    assert result.volumes[157].volume_pairs[0].remote_volume_id == 1158, "Died on +.volumes[157].volume_pairs[0].remote_volume_id"
    assert result.volumes[157].volume_pairs[0].remote_volume_name == """snap-target-158""", "Died on +.volumes[157].volume_pairs[0].remote_volume_name"
    assert result.volumes[157].volume_pairs[0].remote_slice_id == 1158, "Died on +.volumes[157].volume_pairs[0].remote_slice_id"
    assert result.volumes[157].account_id == 4, "Died on +.volumes[157].account_id"
    assert result.volumes[157].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[157].create_time"
    assert result.volumes[157].virtual_volume_id is None, "Died on .volumes[157].virtual_volume_id"
    assert result.volumes[156].status == """active""", "Died on +.volumes[156].status"
    assert result.volumes[156].enable512e == False, "Died on +.volumes[156].enable512e"
    assert result.volumes[156].qos.burst_iops == 15000, "Died on +.volumes[156].qos.burst_iops"
    assert result.volumes[156].qos.burst_time == 60, "Died on +.volumes[156].qos.burst_time"
    assert result.volumes[156].qos.min_iops == 100, "Died on +.volumes[156].qos.min_iops"
    assert result.volumes[156].qos.max_iops == 15000, "Died on +.volumes[156].qos.max_iops"
    assert result.volumes[156].name == """snapshots-source-157""", "Died on +.volumes[156].name"
    assert result.volumes[156].volume_access_groups[0] == 4, "Died on +.volumes[156].volume_access_groups[0]"
    assert result.volumes[156].scsi_naadevice_id == """6f47acc1000000006d69643400000291""", "Died on +.volumes[156].scsi_naadevice_id"
    assert result.volumes[156].total_size == 5000658944, "Died on +.volumes[156].total_size"
    assert result.volumes[156].block_size == 4096, "Died on +.volumes[156].block_size"
    assert result.volumes[156].scsi_euidevice_id == """6d69643400000291f47acc0100000000""", "Died on +.volumes[156].scsi_euidevice_id"
    assert result.volumes[156].volume_id == 657, "Died on +.volumes[156].volume_id"
    assert result.volumes[156].access == """readWrite""", "Died on +.volumes[156].access"
    assert result.volumes[156].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-157.657""", "Died on +.volumes[156].iqn"
    assert result.volumes[156].slice_count == 1, "Died on +.volumes[156].slice_count"
    assert type(result.volumes[156].attributes) is dict, "Died on .volumes[156].attributes"
    assert result.volumes[156].volume_pairs[0].volume_pair_uuid == UUID("c116fde4-1b04-4c93-a051-76353861a4b8"), "Died on .volumes[156].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[156].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[156].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[156].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[156].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[156].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[156].volume_pairs[0].remote_replication.state"
    assert result.volumes[156].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[156].volume_pairs[0].remote_replication.mode"
    assert result.volumes[156].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[156].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[156].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[156].volume_pairs[0].cluster_pair_id"
    assert result.volumes[156].volume_pairs[0].remote_volume_id == 1157, "Died on +.volumes[156].volume_pairs[0].remote_volume_id"
    assert result.volumes[156].volume_pairs[0].remote_volume_name == """snap-target-157""", "Died on +.volumes[156].volume_pairs[0].remote_volume_name"
    assert result.volumes[156].volume_pairs[0].remote_slice_id == 1157, "Died on +.volumes[156].volume_pairs[0].remote_slice_id"
    assert result.volumes[156].account_id == 4, "Died on +.volumes[156].account_id"
    assert result.volumes[156].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[156].create_time"
    assert result.volumes[156].virtual_volume_id is None, "Died on .volumes[156].virtual_volume_id"
    assert result.volumes[155].status == """active""", "Died on +.volumes[155].status"
    assert result.volumes[155].enable512e == False, "Died on +.volumes[155].enable512e"
    assert result.volumes[155].qos.burst_iops == 15000, "Died on +.volumes[155].qos.burst_iops"
    assert result.volumes[155].qos.burst_time == 60, "Died on +.volumes[155].qos.burst_time"
    assert result.volumes[155].qos.min_iops == 100, "Died on +.volumes[155].qos.min_iops"
    assert result.volumes[155].qos.max_iops == 15000, "Died on +.volumes[155].qos.max_iops"
    assert result.volumes[155].name == """snapshots-source-156""", "Died on +.volumes[155].name"
    assert result.volumes[155].volume_access_groups[0] == 4, "Died on +.volumes[155].volume_access_groups[0]"
    assert result.volumes[155].scsi_naadevice_id == """6f47acc1000000006d69643400000290""", "Died on +.volumes[155].scsi_naadevice_id"
    assert result.volumes[155].total_size == 5000658944, "Died on +.volumes[155].total_size"
    assert result.volumes[155].block_size == 4096, "Died on +.volumes[155].block_size"
    assert result.volumes[155].scsi_euidevice_id == """6d69643400000290f47acc0100000000""", "Died on +.volumes[155].scsi_euidevice_id"
    assert result.volumes[155].volume_id == 656, "Died on +.volumes[155].volume_id"
    assert result.volumes[155].access == """readWrite""", "Died on +.volumes[155].access"
    assert result.volumes[155].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-156.656""", "Died on +.volumes[155].iqn"
    assert result.volumes[155].slice_count == 1, "Died on +.volumes[155].slice_count"
    assert type(result.volumes[155].attributes) is dict, "Died on .volumes[155].attributes"
    assert result.volumes[155].volume_pairs[0].volume_pair_uuid == UUID("cc1da78d-f204-4cde-876d-0d86e5295a69"), "Died on .volumes[155].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[155].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[155].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[155].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[155].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[155].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[155].volume_pairs[0].remote_replication.state"
    assert result.volumes[155].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[155].volume_pairs[0].remote_replication.mode"
    assert result.volumes[155].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[155].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[155].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[155].volume_pairs[0].cluster_pair_id"
    assert result.volumes[155].volume_pairs[0].remote_volume_id == 1156, "Died on +.volumes[155].volume_pairs[0].remote_volume_id"
    assert result.volumes[155].volume_pairs[0].remote_volume_name == """snap-target-156""", "Died on +.volumes[155].volume_pairs[0].remote_volume_name"
    assert result.volumes[155].volume_pairs[0].remote_slice_id == 1156, "Died on +.volumes[155].volume_pairs[0].remote_slice_id"
    assert result.volumes[155].account_id == 4, "Died on +.volumes[155].account_id"
    assert result.volumes[155].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[155].create_time"
    assert result.volumes[155].virtual_volume_id is None, "Died on .volumes[155].virtual_volume_id"
    assert result.volumes[154].status == """active""", "Died on +.volumes[154].status"
    assert result.volumes[154].enable512e == False, "Died on +.volumes[154].enable512e"
    assert result.volumes[154].qos.burst_iops == 15000, "Died on +.volumes[154].qos.burst_iops"
    assert result.volumes[154].qos.burst_time == 60, "Died on +.volumes[154].qos.burst_time"
    assert result.volumes[154].qos.min_iops == 100, "Died on +.volumes[154].qos.min_iops"
    assert result.volumes[154].qos.max_iops == 15000, "Died on +.volumes[154].qos.max_iops"
    assert result.volumes[154].name == """snapshots-source-155""", "Died on +.volumes[154].name"
    assert result.volumes[154].volume_access_groups[0] == 4, "Died on +.volumes[154].volume_access_groups[0]"
    assert result.volumes[154].scsi_naadevice_id == """6f47acc1000000006d6964340000028f""", "Died on +.volumes[154].scsi_naadevice_id"
    assert result.volumes[154].total_size == 5000658944, "Died on +.volumes[154].total_size"
    assert result.volumes[154].block_size == 4096, "Died on +.volumes[154].block_size"
    assert result.volumes[154].scsi_euidevice_id == """6d6964340000028ff47acc0100000000""", "Died on +.volumes[154].scsi_euidevice_id"
    assert result.volumes[154].volume_id == 655, "Died on +.volumes[154].volume_id"
    assert result.volumes[154].access == """readWrite""", "Died on +.volumes[154].access"
    assert result.volumes[154].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-155.655""", "Died on +.volumes[154].iqn"
    assert result.volumes[154].slice_count == 1, "Died on +.volumes[154].slice_count"
    assert type(result.volumes[154].attributes) is dict, "Died on .volumes[154].attributes"
    assert result.volumes[154].volume_pairs[0].volume_pair_uuid == UUID("7d7c0eff-03c4-4d06-af5f-794b668d7fca"), "Died on .volumes[154].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[154].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[154].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[154].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[154].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[154].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[154].volume_pairs[0].remote_replication.state"
    assert result.volumes[154].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[154].volume_pairs[0].remote_replication.mode"
    assert result.volumes[154].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[154].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[154].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[154].volume_pairs[0].cluster_pair_id"
    assert result.volumes[154].volume_pairs[0].remote_volume_id == 1155, "Died on +.volumes[154].volume_pairs[0].remote_volume_id"
    assert result.volumes[154].volume_pairs[0].remote_volume_name == """snap-target-155""", "Died on +.volumes[154].volume_pairs[0].remote_volume_name"
    assert result.volumes[154].volume_pairs[0].remote_slice_id == 1155, "Died on +.volumes[154].volume_pairs[0].remote_slice_id"
    assert result.volumes[154].account_id == 4, "Died on +.volumes[154].account_id"
    assert result.volumes[154].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[154].create_time"
    assert result.volumes[154].virtual_volume_id is None, "Died on .volumes[154].virtual_volume_id"
    assert result.volumes[153].status == """active""", "Died on +.volumes[153].status"
    assert result.volumes[153].enable512e == False, "Died on +.volumes[153].enable512e"
    assert result.volumes[153].qos.burst_iops == 15000, "Died on +.volumes[153].qos.burst_iops"
    assert result.volumes[153].qos.burst_time == 60, "Died on +.volumes[153].qos.burst_time"
    assert result.volumes[153].qos.min_iops == 100, "Died on +.volumes[153].qos.min_iops"
    assert result.volumes[153].qos.max_iops == 15000, "Died on +.volumes[153].qos.max_iops"
    assert result.volumes[153].name == """snapshots-source-154""", "Died on +.volumes[153].name"
    assert result.volumes[153].volume_access_groups[0] == 4, "Died on +.volumes[153].volume_access_groups[0]"
    assert result.volumes[153].scsi_naadevice_id == """6f47acc1000000006d6964340000028e""", "Died on +.volumes[153].scsi_naadevice_id"
    assert result.volumes[153].total_size == 5000658944, "Died on +.volumes[153].total_size"
    assert result.volumes[153].block_size == 4096, "Died on +.volumes[153].block_size"
    assert result.volumes[153].scsi_euidevice_id == """6d6964340000028ef47acc0100000000""", "Died on +.volumes[153].scsi_euidevice_id"
    assert result.volumes[153].volume_id == 654, "Died on +.volumes[153].volume_id"
    assert result.volumes[153].access == """readWrite""", "Died on +.volumes[153].access"
    assert result.volumes[153].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-154.654""", "Died on +.volumes[153].iqn"
    assert result.volumes[153].slice_count == 1, "Died on +.volumes[153].slice_count"
    assert type(result.volumes[153].attributes) is dict, "Died on .volumes[153].attributes"
    assert result.volumes[153].volume_pairs[0].volume_pair_uuid == UUID("9716c8c8-1b90-4283-85ed-fdeba7e6712b"), "Died on .volumes[153].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[153].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[153].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[153].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[153].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[153].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[153].volume_pairs[0].remote_replication.state"
    assert result.volumes[153].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[153].volume_pairs[0].remote_replication.mode"
    assert result.volumes[153].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[153].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[153].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[153].volume_pairs[0].cluster_pair_id"
    assert result.volumes[153].volume_pairs[0].remote_volume_id == 1154, "Died on +.volumes[153].volume_pairs[0].remote_volume_id"
    assert result.volumes[153].volume_pairs[0].remote_volume_name == """snap-target-154""", "Died on +.volumes[153].volume_pairs[0].remote_volume_name"
    assert result.volumes[153].volume_pairs[0].remote_slice_id == 1154, "Died on +.volumes[153].volume_pairs[0].remote_slice_id"
    assert result.volumes[153].account_id == 4, "Died on +.volumes[153].account_id"
    assert result.volumes[153].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[153].create_time"
    assert result.volumes[153].virtual_volume_id is None, "Died on .volumes[153].virtual_volume_id"
    assert result.volumes[152].status == """active""", "Died on +.volumes[152].status"
    assert result.volumes[152].enable512e == False, "Died on +.volumes[152].enable512e"
    assert result.volumes[152].qos.burst_iops == 15000, "Died on +.volumes[152].qos.burst_iops"
    assert result.volumes[152].qos.burst_time == 60, "Died on +.volumes[152].qos.burst_time"
    assert result.volumes[152].qos.min_iops == 100, "Died on +.volumes[152].qos.min_iops"
    assert result.volumes[152].qos.max_iops == 15000, "Died on +.volumes[152].qos.max_iops"
    assert result.volumes[152].name == """snapshots-source-153""", "Died on +.volumes[152].name"
    assert result.volumes[152].volume_access_groups[0] == 4, "Died on +.volumes[152].volume_access_groups[0]"
    assert result.volumes[152].scsi_naadevice_id == """6f47acc1000000006d6964340000028d""", "Died on +.volumes[152].scsi_naadevice_id"
    assert result.volumes[152].total_size == 5000658944, "Died on +.volumes[152].total_size"
    assert result.volumes[152].block_size == 4096, "Died on +.volumes[152].block_size"
    assert result.volumes[152].scsi_euidevice_id == """6d6964340000028df47acc0100000000""", "Died on +.volumes[152].scsi_euidevice_id"
    assert result.volumes[152].volume_id == 653, "Died on +.volumes[152].volume_id"
    assert result.volumes[152].access == """readWrite""", "Died on +.volumes[152].access"
    assert result.volumes[152].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-153.653""", "Died on +.volumes[152].iqn"
    assert result.volumes[152].slice_count == 1, "Died on +.volumes[152].slice_count"
    assert type(result.volumes[152].attributes) is dict, "Died on .volumes[152].attributes"
    assert result.volumes[152].volume_pairs[0].volume_pair_uuid == UUID("bfc7c560-81e2-41ca-ac3d-0eb714060a5a"), "Died on .volumes[152].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[152].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[152].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[152].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[152].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[152].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[152].volume_pairs[0].remote_replication.state"
    assert result.volumes[152].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[152].volume_pairs[0].remote_replication.mode"
    assert result.volumes[152].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[152].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[152].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[152].volume_pairs[0].cluster_pair_id"
    assert result.volumes[152].volume_pairs[0].remote_volume_id == 1153, "Died on +.volumes[152].volume_pairs[0].remote_volume_id"
    assert result.volumes[152].volume_pairs[0].remote_volume_name == """snap-target-153""", "Died on +.volumes[152].volume_pairs[0].remote_volume_name"
    assert result.volumes[152].volume_pairs[0].remote_slice_id == 1153, "Died on +.volumes[152].volume_pairs[0].remote_slice_id"
    assert result.volumes[152].account_id == 4, "Died on +.volumes[152].account_id"
    assert result.volumes[152].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[152].create_time"
    assert result.volumes[152].virtual_volume_id is None, "Died on .volumes[152].virtual_volume_id"
    assert result.volumes[151].status == """active""", "Died on +.volumes[151].status"
    assert result.volumes[151].enable512e == False, "Died on +.volumes[151].enable512e"
    assert result.volumes[151].qos.burst_iops == 15000, "Died on +.volumes[151].qos.burst_iops"
    assert result.volumes[151].qos.burst_time == 60, "Died on +.volumes[151].qos.burst_time"
    assert result.volumes[151].qos.min_iops == 100, "Died on +.volumes[151].qos.min_iops"
    assert result.volumes[151].qos.max_iops == 15000, "Died on +.volumes[151].qos.max_iops"
    assert result.volumes[151].name == """snapshots-source-152""", "Died on +.volumes[151].name"
    assert result.volumes[151].volume_access_groups[0] == 4, "Died on +.volumes[151].volume_access_groups[0]"
    assert result.volumes[151].scsi_naadevice_id == """6f47acc1000000006d6964340000028c""", "Died on +.volumes[151].scsi_naadevice_id"
    assert result.volumes[151].total_size == 5000658944, "Died on +.volumes[151].total_size"
    assert result.volumes[151].block_size == 4096, "Died on +.volumes[151].block_size"
    assert result.volumes[151].scsi_euidevice_id == """6d6964340000028cf47acc0100000000""", "Died on +.volumes[151].scsi_euidevice_id"
    assert result.volumes[151].volume_id == 652, "Died on +.volumes[151].volume_id"
    assert result.volumes[151].access == """readWrite""", "Died on +.volumes[151].access"
    assert result.volumes[151].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-152.652""", "Died on +.volumes[151].iqn"
    assert result.volumes[151].slice_count == 1, "Died on +.volumes[151].slice_count"
    assert type(result.volumes[151].attributes) is dict, "Died on .volumes[151].attributes"
    assert result.volumes[151].volume_pairs[0].volume_pair_uuid == UUID("8c80ed04-ea27-4d3e-ac5d-5d8ca5645eaf"), "Died on .volumes[151].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[151].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[151].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[151].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[151].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[151].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[151].volume_pairs[0].remote_replication.state"
    assert result.volumes[151].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[151].volume_pairs[0].remote_replication.mode"
    assert result.volumes[151].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[151].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[151].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[151].volume_pairs[0].cluster_pair_id"
    assert result.volumes[151].volume_pairs[0].remote_volume_id == 1152, "Died on +.volumes[151].volume_pairs[0].remote_volume_id"
    assert result.volumes[151].volume_pairs[0].remote_volume_name == """snap-target-152""", "Died on +.volumes[151].volume_pairs[0].remote_volume_name"
    assert result.volumes[151].volume_pairs[0].remote_slice_id == 1152, "Died on +.volumes[151].volume_pairs[0].remote_slice_id"
    assert result.volumes[151].account_id == 4, "Died on +.volumes[151].account_id"
    assert result.volumes[151].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[151].create_time"
    assert result.volumes[151].virtual_volume_id is None, "Died on .volumes[151].virtual_volume_id"
    assert result.volumes[150].status == """active""", "Died on +.volumes[150].status"
    assert result.volumes[150].enable512e == False, "Died on +.volumes[150].enable512e"
    assert result.volumes[150].qos.burst_iops == 15000, "Died on +.volumes[150].qos.burst_iops"
    assert result.volumes[150].qos.burst_time == 60, "Died on +.volumes[150].qos.burst_time"
    assert result.volumes[150].qos.min_iops == 100, "Died on +.volumes[150].qos.min_iops"
    assert result.volumes[150].qos.max_iops == 15000, "Died on +.volumes[150].qos.max_iops"
    assert result.volumes[150].name == """snapshots-source-151""", "Died on +.volumes[150].name"
    assert result.volumes[150].volume_access_groups[0] == 4, "Died on +.volumes[150].volume_access_groups[0]"
    assert result.volumes[150].scsi_naadevice_id == """6f47acc1000000006d6964340000028b""", "Died on +.volumes[150].scsi_naadevice_id"
    assert result.volumes[150].total_size == 5000658944, "Died on +.volumes[150].total_size"
    assert result.volumes[150].block_size == 4096, "Died on +.volumes[150].block_size"
    assert result.volumes[150].scsi_euidevice_id == """6d6964340000028bf47acc0100000000""", "Died on +.volumes[150].scsi_euidevice_id"
    assert result.volumes[150].volume_id == 651, "Died on +.volumes[150].volume_id"
    assert result.volumes[150].access == """readWrite""", "Died on +.volumes[150].access"
    assert result.volumes[150].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-151.651""", "Died on +.volumes[150].iqn"
    assert result.volumes[150].slice_count == 1, "Died on +.volumes[150].slice_count"
    assert type(result.volumes[150].attributes) is dict, "Died on .volumes[150].attributes"
    assert result.volumes[150].volume_pairs[0].volume_pair_uuid == UUID("e41223b2-ae40-4e1c-b48f-4dccadfe83cb"), "Died on .volumes[150].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[150].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[150].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[150].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[150].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[150].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[150].volume_pairs[0].remote_replication.state"
    assert result.volumes[150].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[150].volume_pairs[0].remote_replication.mode"
    assert result.volumes[150].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[150].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[150].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[150].volume_pairs[0].cluster_pair_id"
    assert result.volumes[150].volume_pairs[0].remote_volume_id == 1151, "Died on +.volumes[150].volume_pairs[0].remote_volume_id"
    assert result.volumes[150].volume_pairs[0].remote_volume_name == """snap-target-151""", "Died on +.volumes[150].volume_pairs[0].remote_volume_name"
    assert result.volumes[150].volume_pairs[0].remote_slice_id == 1151, "Died on +.volumes[150].volume_pairs[0].remote_slice_id"
    assert result.volumes[150].account_id == 4, "Died on +.volumes[150].account_id"
    assert result.volumes[150].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[150].create_time"
    assert result.volumes[150].virtual_volume_id is None, "Died on .volumes[150].virtual_volume_id"
    assert result.volumes[149].status == """active""", "Died on +.volumes[149].status"
    assert result.volumes[149].enable512e == False, "Died on +.volumes[149].enable512e"
    assert result.volumes[149].qos.burst_iops == 15000, "Died on +.volumes[149].qos.burst_iops"
    assert result.volumes[149].qos.burst_time == 60, "Died on +.volumes[149].qos.burst_time"
    assert result.volumes[149].qos.min_iops == 100, "Died on +.volumes[149].qos.min_iops"
    assert result.volumes[149].qos.max_iops == 15000, "Died on +.volumes[149].qos.max_iops"
    assert result.volumes[149].name == """snapshots-source-150""", "Died on +.volumes[149].name"
    assert result.volumes[149].volume_access_groups[0] == 4, "Died on +.volumes[149].volume_access_groups[0]"
    assert result.volumes[149].scsi_naadevice_id == """6f47acc1000000006d6964340000028a""", "Died on +.volumes[149].scsi_naadevice_id"
    assert result.volumes[149].total_size == 5000658944, "Died on +.volumes[149].total_size"
    assert result.volumes[149].block_size == 4096, "Died on +.volumes[149].block_size"
    assert result.volumes[149].scsi_euidevice_id == """6d6964340000028af47acc0100000000""", "Died on +.volumes[149].scsi_euidevice_id"
    assert result.volumes[149].volume_id == 650, "Died on +.volumes[149].volume_id"
    assert result.volumes[149].access == """readWrite""", "Died on +.volumes[149].access"
    assert result.volumes[149].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-150.650""", "Died on +.volumes[149].iqn"
    assert result.volumes[149].slice_count == 1, "Died on +.volumes[149].slice_count"
    assert type(result.volumes[149].attributes) is dict, "Died on .volumes[149].attributes"
    assert result.volumes[149].volume_pairs[0].volume_pair_uuid == UUID("dc417b3f-4ae3-4ecf-96d2-2e36d7d037e7"), "Died on .volumes[149].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[149].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[149].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[149].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[149].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[149].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[149].volume_pairs[0].remote_replication.state"
    assert result.volumes[149].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[149].volume_pairs[0].remote_replication.mode"
    assert result.volumes[149].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[149].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[149].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[149].volume_pairs[0].cluster_pair_id"
    assert result.volumes[149].volume_pairs[0].remote_volume_id == 1150, "Died on +.volumes[149].volume_pairs[0].remote_volume_id"
    assert result.volumes[149].volume_pairs[0].remote_volume_name == """snap-target-150""", "Died on +.volumes[149].volume_pairs[0].remote_volume_name"
    assert result.volumes[149].volume_pairs[0].remote_slice_id == 1150, "Died on +.volumes[149].volume_pairs[0].remote_slice_id"
    assert result.volumes[149].account_id == 4, "Died on +.volumes[149].account_id"
    assert result.volumes[149].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[149].create_time"
    assert result.volumes[149].virtual_volume_id is None, "Died on .volumes[149].virtual_volume_id"
    assert result.volumes[148].status == """active""", "Died on +.volumes[148].status"
    assert result.volumes[148].enable512e == False, "Died on +.volumes[148].enable512e"
    assert result.volumes[148].qos.burst_iops == 15000, "Died on +.volumes[148].qos.burst_iops"
    assert result.volumes[148].qos.burst_time == 60, "Died on +.volumes[148].qos.burst_time"
    assert result.volumes[148].qos.min_iops == 100, "Died on +.volumes[148].qos.min_iops"
    assert result.volumes[148].qos.max_iops == 15000, "Died on +.volumes[148].qos.max_iops"
    assert result.volumes[148].name == """snapshots-source-149""", "Died on +.volumes[148].name"
    assert result.volumes[148].volume_access_groups[0] == 4, "Died on +.volumes[148].volume_access_groups[0]"
    assert result.volumes[148].scsi_naadevice_id == """6f47acc1000000006d69643400000289""", "Died on +.volumes[148].scsi_naadevice_id"
    assert result.volumes[148].total_size == 5000658944, "Died on +.volumes[148].total_size"
    assert result.volumes[148].block_size == 4096, "Died on +.volumes[148].block_size"
    assert result.volumes[148].scsi_euidevice_id == """6d69643400000289f47acc0100000000""", "Died on +.volumes[148].scsi_euidevice_id"
    assert result.volumes[148].volume_id == 649, "Died on +.volumes[148].volume_id"
    assert result.volumes[148].access == """readWrite""", "Died on +.volumes[148].access"
    assert result.volumes[148].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-149.649""", "Died on +.volumes[148].iqn"
    assert result.volumes[148].slice_count == 1, "Died on +.volumes[148].slice_count"
    assert type(result.volumes[148].attributes) is dict, "Died on .volumes[148].attributes"
    assert result.volumes[148].volume_pairs[0].volume_pair_uuid == UUID("87789ada-10b8-4858-aae2-ebd1726fa178"), "Died on .volumes[148].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[148].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[148].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[148].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[148].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[148].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[148].volume_pairs[0].remote_replication.state"
    assert result.volumes[148].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[148].volume_pairs[0].remote_replication.mode"
    assert result.volumes[148].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[148].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[148].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[148].volume_pairs[0].cluster_pair_id"
    assert result.volumes[148].volume_pairs[0].remote_volume_id == 1149, "Died on +.volumes[148].volume_pairs[0].remote_volume_id"
    assert result.volumes[148].volume_pairs[0].remote_volume_name == """snap-target-149""", "Died on +.volumes[148].volume_pairs[0].remote_volume_name"
    assert result.volumes[148].volume_pairs[0].remote_slice_id == 1149, "Died on +.volumes[148].volume_pairs[0].remote_slice_id"
    assert result.volumes[148].account_id == 4, "Died on +.volumes[148].account_id"
    assert result.volumes[148].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[148].create_time"
    assert result.volumes[148].virtual_volume_id is None, "Died on .volumes[148].virtual_volume_id"
    assert result.volumes[147].status == """active""", "Died on +.volumes[147].status"
    assert result.volumes[147].enable512e == False, "Died on +.volumes[147].enable512e"
    assert result.volumes[147].qos.burst_iops == 15000, "Died on +.volumes[147].qos.burst_iops"
    assert result.volumes[147].qos.burst_time == 60, "Died on +.volumes[147].qos.burst_time"
    assert result.volumes[147].qos.min_iops == 100, "Died on +.volumes[147].qos.min_iops"
    assert result.volumes[147].qos.max_iops == 15000, "Died on +.volumes[147].qos.max_iops"
    assert result.volumes[147].name == """snapshots-source-148""", "Died on +.volumes[147].name"
    assert result.volumes[147].volume_access_groups[0] == 4, "Died on +.volumes[147].volume_access_groups[0]"
    assert result.volumes[147].scsi_naadevice_id == """6f47acc1000000006d69643400000288""", "Died on +.volumes[147].scsi_naadevice_id"
    assert result.volumes[147].total_size == 5000658944, "Died on +.volumes[147].total_size"
    assert result.volumes[147].block_size == 4096, "Died on +.volumes[147].block_size"
    assert result.volumes[147].scsi_euidevice_id == """6d69643400000288f47acc0100000000""", "Died on +.volumes[147].scsi_euidevice_id"
    assert result.volumes[147].volume_id == 648, "Died on +.volumes[147].volume_id"
    assert result.volumes[147].access == """readWrite""", "Died on +.volumes[147].access"
    assert result.volumes[147].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-148.648""", "Died on +.volumes[147].iqn"
    assert result.volumes[147].slice_count == 1, "Died on +.volumes[147].slice_count"
    assert type(result.volumes[147].attributes) is dict, "Died on .volumes[147].attributes"
    assert result.volumes[147].volume_pairs[0].volume_pair_uuid == UUID("cffa9957-4c7c-4bd4-9d33-0b928fd2b486"), "Died on .volumes[147].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[147].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[147].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[147].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[147].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[147].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[147].volume_pairs[0].remote_replication.state"
    assert result.volumes[147].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[147].volume_pairs[0].remote_replication.mode"
    assert result.volumes[147].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[147].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[147].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[147].volume_pairs[0].cluster_pair_id"
    assert result.volumes[147].volume_pairs[0].remote_volume_id == 1148, "Died on +.volumes[147].volume_pairs[0].remote_volume_id"
    assert result.volumes[147].volume_pairs[0].remote_volume_name == """snap-target-148""", "Died on +.volumes[147].volume_pairs[0].remote_volume_name"
    assert result.volumes[147].volume_pairs[0].remote_slice_id == 1148, "Died on +.volumes[147].volume_pairs[0].remote_slice_id"
    assert result.volumes[147].account_id == 4, "Died on +.volumes[147].account_id"
    assert result.volumes[147].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[147].create_time"
    assert result.volumes[147].virtual_volume_id is None, "Died on .volumes[147].virtual_volume_id"
    assert result.volumes[146].status == """active""", "Died on +.volumes[146].status"
    assert result.volumes[146].enable512e == False, "Died on +.volumes[146].enable512e"
    assert result.volumes[146].qos.burst_iops == 15000, "Died on +.volumes[146].qos.burst_iops"
    assert result.volumes[146].qos.burst_time == 60, "Died on +.volumes[146].qos.burst_time"
    assert result.volumes[146].qos.min_iops == 100, "Died on +.volumes[146].qos.min_iops"
    assert result.volumes[146].qos.max_iops == 15000, "Died on +.volumes[146].qos.max_iops"
    assert result.volumes[146].name == """snapshots-source-147""", "Died on +.volumes[146].name"
    assert result.volumes[146].volume_access_groups[0] == 4, "Died on +.volumes[146].volume_access_groups[0]"
    assert result.volumes[146].scsi_naadevice_id == """6f47acc1000000006d69643400000287""", "Died on +.volumes[146].scsi_naadevice_id"
    assert result.volumes[146].total_size == 5000658944, "Died on +.volumes[146].total_size"
    assert result.volumes[146].block_size == 4096, "Died on +.volumes[146].block_size"
    assert result.volumes[146].scsi_euidevice_id == """6d69643400000287f47acc0100000000""", "Died on +.volumes[146].scsi_euidevice_id"
    assert result.volumes[146].volume_id == 647, "Died on +.volumes[146].volume_id"
    assert result.volumes[146].access == """readWrite""", "Died on +.volumes[146].access"
    assert result.volumes[146].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-147.647""", "Died on +.volumes[146].iqn"
    assert result.volumes[146].slice_count == 1, "Died on +.volumes[146].slice_count"
    assert type(result.volumes[146].attributes) is dict, "Died on .volumes[146].attributes"
    assert result.volumes[146].volume_pairs[0].volume_pair_uuid == UUID("3b8bfb04-e935-438d-ab9d-c23bd983a52c"), "Died on .volumes[146].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[146].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[146].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[146].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[146].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[146].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[146].volume_pairs[0].remote_replication.state"
    assert result.volumes[146].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[146].volume_pairs[0].remote_replication.mode"
    assert result.volumes[146].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[146].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[146].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[146].volume_pairs[0].cluster_pair_id"
    assert result.volumes[146].volume_pairs[0].remote_volume_id == 1147, "Died on +.volumes[146].volume_pairs[0].remote_volume_id"
    assert result.volumes[146].volume_pairs[0].remote_volume_name == """snap-target-147""", "Died on +.volumes[146].volume_pairs[0].remote_volume_name"
    assert result.volumes[146].volume_pairs[0].remote_slice_id == 1147, "Died on +.volumes[146].volume_pairs[0].remote_slice_id"
    assert result.volumes[146].account_id == 4, "Died on +.volumes[146].account_id"
    assert result.volumes[146].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[146].create_time"
    assert result.volumes[146].virtual_volume_id is None, "Died on .volumes[146].virtual_volume_id"
    assert result.volumes[145].status == """active""", "Died on +.volumes[145].status"
    assert result.volumes[145].enable512e == False, "Died on +.volumes[145].enable512e"
    assert result.volumes[145].qos.burst_iops == 15000, "Died on +.volumes[145].qos.burst_iops"
    assert result.volumes[145].qos.burst_time == 60, "Died on +.volumes[145].qos.burst_time"
    assert result.volumes[145].qos.min_iops == 100, "Died on +.volumes[145].qos.min_iops"
    assert result.volumes[145].qos.max_iops == 15000, "Died on +.volumes[145].qos.max_iops"
    assert result.volumes[145].name == """snapshots-source-146""", "Died on +.volumes[145].name"
    assert result.volumes[145].volume_access_groups[0] == 4, "Died on +.volumes[145].volume_access_groups[0]"
    assert result.volumes[145].scsi_naadevice_id == """6f47acc1000000006d69643400000286""", "Died on +.volumes[145].scsi_naadevice_id"
    assert result.volumes[145].total_size == 5000658944, "Died on +.volumes[145].total_size"
    assert result.volumes[145].block_size == 4096, "Died on +.volumes[145].block_size"
    assert result.volumes[145].scsi_euidevice_id == """6d69643400000286f47acc0100000000""", "Died on +.volumes[145].scsi_euidevice_id"
    assert result.volumes[145].volume_id == 646, "Died on +.volumes[145].volume_id"
    assert result.volumes[145].access == """readWrite""", "Died on +.volumes[145].access"
    assert result.volumes[145].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-146.646""", "Died on +.volumes[145].iqn"
    assert result.volumes[145].slice_count == 1, "Died on +.volumes[145].slice_count"
    assert type(result.volumes[145].attributes) is dict, "Died on .volumes[145].attributes"
    assert result.volumes[145].volume_pairs[0].volume_pair_uuid == UUID("4c8e4420-02df-4e95-b343-4d82689bac92"), "Died on .volumes[145].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[145].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[145].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[145].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[145].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[145].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[145].volume_pairs[0].remote_replication.state"
    assert result.volumes[145].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[145].volume_pairs[0].remote_replication.mode"
    assert result.volumes[145].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[145].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[145].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[145].volume_pairs[0].cluster_pair_id"
    assert result.volumes[145].volume_pairs[0].remote_volume_id == 1146, "Died on +.volumes[145].volume_pairs[0].remote_volume_id"
    assert result.volumes[145].volume_pairs[0].remote_volume_name == """snap-target-146""", "Died on +.volumes[145].volume_pairs[0].remote_volume_name"
    assert result.volumes[145].volume_pairs[0].remote_slice_id == 1146, "Died on +.volumes[145].volume_pairs[0].remote_slice_id"
    assert result.volumes[145].account_id == 4, "Died on +.volumes[145].account_id"
    assert result.volumes[145].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[145].create_time"
    assert result.volumes[145].virtual_volume_id is None, "Died on .volumes[145].virtual_volume_id"
    assert result.volumes[144].status == """active""", "Died on +.volumes[144].status"
    assert result.volumes[144].enable512e == False, "Died on +.volumes[144].enable512e"
    assert result.volumes[144].qos.burst_iops == 15000, "Died on +.volumes[144].qos.burst_iops"
    assert result.volumes[144].qos.burst_time == 60, "Died on +.volumes[144].qos.burst_time"
    assert result.volumes[144].qos.min_iops == 100, "Died on +.volumes[144].qos.min_iops"
    assert result.volumes[144].qos.max_iops == 15000, "Died on +.volumes[144].qos.max_iops"
    assert result.volumes[144].name == """snapshots-source-145""", "Died on +.volumes[144].name"
    assert result.volumes[144].volume_access_groups[0] == 4, "Died on +.volumes[144].volume_access_groups[0]"
    assert result.volumes[144].scsi_naadevice_id == """6f47acc1000000006d69643400000285""", "Died on +.volumes[144].scsi_naadevice_id"
    assert result.volumes[144].total_size == 5000658944, "Died on +.volumes[144].total_size"
    assert result.volumes[144].block_size == 4096, "Died on +.volumes[144].block_size"
    assert result.volumes[144].scsi_euidevice_id == """6d69643400000285f47acc0100000000""", "Died on +.volumes[144].scsi_euidevice_id"
    assert result.volumes[144].volume_id == 645, "Died on +.volumes[144].volume_id"
    assert result.volumes[144].access == """readWrite""", "Died on +.volumes[144].access"
    assert result.volumes[144].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-145.645""", "Died on +.volumes[144].iqn"
    assert result.volumes[144].slice_count == 1, "Died on +.volumes[144].slice_count"
    assert type(result.volumes[144].attributes) is dict, "Died on .volumes[144].attributes"
    assert result.volumes[144].volume_pairs[0].volume_pair_uuid == UUID("012da69f-b47d-4c38-a96b-be3d53b57883"), "Died on .volumes[144].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[144].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[144].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[144].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[144].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[144].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[144].volume_pairs[0].remote_replication.state"
    assert result.volumes[144].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[144].volume_pairs[0].remote_replication.mode"
    assert result.volumes[144].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[144].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[144].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[144].volume_pairs[0].cluster_pair_id"
    assert result.volumes[144].volume_pairs[0].remote_volume_id == 1145, "Died on +.volumes[144].volume_pairs[0].remote_volume_id"
    assert result.volumes[144].volume_pairs[0].remote_volume_name == """snap-target-145""", "Died on +.volumes[144].volume_pairs[0].remote_volume_name"
    assert result.volumes[144].volume_pairs[0].remote_slice_id == 1145, "Died on +.volumes[144].volume_pairs[0].remote_slice_id"
    assert result.volumes[144].account_id == 4, "Died on +.volumes[144].account_id"
    assert result.volumes[144].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[144].create_time"
    assert result.volumes[144].virtual_volume_id is None, "Died on .volumes[144].virtual_volume_id"
    assert result.volumes[143].status == """active""", "Died on +.volumes[143].status"
    assert result.volumes[143].enable512e == False, "Died on +.volumes[143].enable512e"
    assert result.volumes[143].qos.burst_iops == 15000, "Died on +.volumes[143].qos.burst_iops"
    assert result.volumes[143].qos.burst_time == 60, "Died on +.volumes[143].qos.burst_time"
    assert result.volumes[143].qos.min_iops == 100, "Died on +.volumes[143].qos.min_iops"
    assert result.volumes[143].qos.max_iops == 15000, "Died on +.volumes[143].qos.max_iops"
    assert result.volumes[143].name == """snapshots-source-144""", "Died on +.volumes[143].name"
    assert result.volumes[143].volume_access_groups[0] == 4, "Died on +.volumes[143].volume_access_groups[0]"
    assert result.volumes[143].scsi_naadevice_id == """6f47acc1000000006d69643400000284""", "Died on +.volumes[143].scsi_naadevice_id"
    assert result.volumes[143].total_size == 5000658944, "Died on +.volumes[143].total_size"
    assert result.volumes[143].block_size == 4096, "Died on +.volumes[143].block_size"
    assert result.volumes[143].scsi_euidevice_id == """6d69643400000284f47acc0100000000""", "Died on +.volumes[143].scsi_euidevice_id"
    assert result.volumes[143].volume_id == 644, "Died on +.volumes[143].volume_id"
    assert result.volumes[143].access == """readWrite""", "Died on +.volumes[143].access"
    assert result.volumes[143].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-144.644""", "Died on +.volumes[143].iqn"
    assert result.volumes[143].slice_count == 1, "Died on +.volumes[143].slice_count"
    assert type(result.volumes[143].attributes) is dict, "Died on .volumes[143].attributes"
    assert result.volumes[143].volume_pairs[0].volume_pair_uuid == UUID("dd450cb2-e848-4321-8d9d-b5d3f9593dad"), "Died on .volumes[143].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[143].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[143].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[143].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[143].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[143].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[143].volume_pairs[0].remote_replication.state"
    assert result.volumes[143].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[143].volume_pairs[0].remote_replication.mode"
    assert result.volumes[143].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[143].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[143].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[143].volume_pairs[0].cluster_pair_id"
    assert result.volumes[143].volume_pairs[0].remote_volume_id == 1144, "Died on +.volumes[143].volume_pairs[0].remote_volume_id"
    assert result.volumes[143].volume_pairs[0].remote_volume_name == """snap-target-144""", "Died on +.volumes[143].volume_pairs[0].remote_volume_name"
    assert result.volumes[143].volume_pairs[0].remote_slice_id == 1144, "Died on +.volumes[143].volume_pairs[0].remote_slice_id"
    assert result.volumes[143].account_id == 4, "Died on +.volumes[143].account_id"
    assert result.volumes[143].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[143].create_time"
    assert result.volumes[143].virtual_volume_id is None, "Died on .volumes[143].virtual_volume_id"
    assert result.volumes[142].status == """active""", "Died on +.volumes[142].status"
    assert result.volumes[142].enable512e == False, "Died on +.volumes[142].enable512e"
    assert result.volumes[142].qos.burst_iops == 15000, "Died on +.volumes[142].qos.burst_iops"
    assert result.volumes[142].qos.burst_time == 60, "Died on +.volumes[142].qos.burst_time"
    assert result.volumes[142].qos.min_iops == 100, "Died on +.volumes[142].qos.min_iops"
    assert result.volumes[142].qos.max_iops == 15000, "Died on +.volumes[142].qos.max_iops"
    assert result.volumes[142].name == """snapshots-source-143""", "Died on +.volumes[142].name"
    assert result.volumes[142].volume_access_groups[0] == 4, "Died on +.volumes[142].volume_access_groups[0]"
    assert result.volumes[142].scsi_naadevice_id == """6f47acc1000000006d69643400000283""", "Died on +.volumes[142].scsi_naadevice_id"
    assert result.volumes[142].total_size == 5000658944, "Died on +.volumes[142].total_size"
    assert result.volumes[142].block_size == 4096, "Died on +.volumes[142].block_size"
    assert result.volumes[142].scsi_euidevice_id == """6d69643400000283f47acc0100000000""", "Died on +.volumes[142].scsi_euidevice_id"
    assert result.volumes[142].volume_id == 643, "Died on +.volumes[142].volume_id"
    assert result.volumes[142].access == """readWrite""", "Died on +.volumes[142].access"
    assert result.volumes[142].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-143.643""", "Died on +.volumes[142].iqn"
    assert result.volumes[142].slice_count == 1, "Died on +.volumes[142].slice_count"
    assert type(result.volumes[142].attributes) is dict, "Died on .volumes[142].attributes"
    assert result.volumes[142].volume_pairs[0].volume_pair_uuid == UUID("a7c249f7-8678-4a18-9ccc-e2acfe452b66"), "Died on .volumes[142].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[142].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[142].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[142].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[142].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[142].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[142].volume_pairs[0].remote_replication.state"
    assert result.volumes[142].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[142].volume_pairs[0].remote_replication.mode"
    assert result.volumes[142].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[142].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[142].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[142].volume_pairs[0].cluster_pair_id"
    assert result.volumes[142].volume_pairs[0].remote_volume_id == 1143, "Died on +.volumes[142].volume_pairs[0].remote_volume_id"
    assert result.volumes[142].volume_pairs[0].remote_volume_name == """snap-target-143""", "Died on +.volumes[142].volume_pairs[0].remote_volume_name"
    assert result.volumes[142].volume_pairs[0].remote_slice_id == 1143, "Died on +.volumes[142].volume_pairs[0].remote_slice_id"
    assert result.volumes[142].account_id == 4, "Died on +.volumes[142].account_id"
    assert result.volumes[142].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[142].create_time"
    assert result.volumes[142].virtual_volume_id is None, "Died on .volumes[142].virtual_volume_id"
    assert result.volumes[141].status == """active""", "Died on +.volumes[141].status"
    assert result.volumes[141].enable512e == False, "Died on +.volumes[141].enable512e"
    assert result.volumes[141].qos.burst_iops == 15000, "Died on +.volumes[141].qos.burst_iops"
    assert result.volumes[141].qos.burst_time == 60, "Died on +.volumes[141].qos.burst_time"
    assert result.volumes[141].qos.min_iops == 100, "Died on +.volumes[141].qos.min_iops"
    assert result.volumes[141].qos.max_iops == 15000, "Died on +.volumes[141].qos.max_iops"
    assert result.volumes[141].name == """snapshots-source-142""", "Died on +.volumes[141].name"
    assert result.volumes[141].volume_access_groups[0] == 4, "Died on +.volumes[141].volume_access_groups[0]"
    assert result.volumes[141].scsi_naadevice_id == """6f47acc1000000006d69643400000282""", "Died on +.volumes[141].scsi_naadevice_id"
    assert result.volumes[141].total_size == 5000658944, "Died on +.volumes[141].total_size"
    assert result.volumes[141].block_size == 4096, "Died on +.volumes[141].block_size"
    assert result.volumes[141].scsi_euidevice_id == """6d69643400000282f47acc0100000000""", "Died on +.volumes[141].scsi_euidevice_id"
    assert result.volumes[141].volume_id == 642, "Died on +.volumes[141].volume_id"
    assert result.volumes[141].access == """readWrite""", "Died on +.volumes[141].access"
    assert result.volumes[141].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-142.642""", "Died on +.volumes[141].iqn"
    assert result.volumes[141].slice_count == 1, "Died on +.volumes[141].slice_count"
    assert type(result.volumes[141].attributes) is dict, "Died on .volumes[141].attributes"
    assert result.volumes[141].volume_pairs[0].volume_pair_uuid == UUID("f2e4384b-9cc1-4cf1-97fa-33b4a7bfb63a"), "Died on .volumes[141].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[141].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[141].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[141].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[141].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[141].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[141].volume_pairs[0].remote_replication.state"
    assert result.volumes[141].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[141].volume_pairs[0].remote_replication.mode"
    assert result.volumes[141].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[141].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[141].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[141].volume_pairs[0].cluster_pair_id"
    assert result.volumes[141].volume_pairs[0].remote_volume_id == 1142, "Died on +.volumes[141].volume_pairs[0].remote_volume_id"
    assert result.volumes[141].volume_pairs[0].remote_volume_name == """snap-target-142""", "Died on +.volumes[141].volume_pairs[0].remote_volume_name"
    assert result.volumes[141].volume_pairs[0].remote_slice_id == 1142, "Died on +.volumes[141].volume_pairs[0].remote_slice_id"
    assert result.volumes[141].account_id == 4, "Died on +.volumes[141].account_id"
    assert result.volumes[141].create_time == """2016-12-30T18:07:07Z""", "Died on +.volumes[141].create_time"
    assert result.volumes[141].virtual_volume_id is None, "Died on .volumes[141].virtual_volume_id"
    assert result.volumes[140].status == """active""", "Died on +.volumes[140].status"
    assert result.volumes[140].enable512e == False, "Died on +.volumes[140].enable512e"
    assert result.volumes[140].qos.burst_iops == 15000, "Died on +.volumes[140].qos.burst_iops"
    assert result.volumes[140].qos.burst_time == 60, "Died on +.volumes[140].qos.burst_time"
    assert result.volumes[140].qos.min_iops == 100, "Died on +.volumes[140].qos.min_iops"
    assert result.volumes[140].qos.max_iops == 15000, "Died on +.volumes[140].qos.max_iops"
    assert result.volumes[140].name == """snapshots-source-141""", "Died on +.volumes[140].name"
    assert result.volumes[140].volume_access_groups[0] == 4, "Died on +.volumes[140].volume_access_groups[0]"
    assert result.volumes[140].scsi_naadevice_id == """6f47acc1000000006d69643400000281""", "Died on +.volumes[140].scsi_naadevice_id"
    assert result.volumes[140].total_size == 5000658944, "Died on +.volumes[140].total_size"
    assert result.volumes[140].block_size == 4096, "Died on +.volumes[140].block_size"
    assert result.volumes[140].scsi_euidevice_id == """6d69643400000281f47acc0100000000""", "Died on +.volumes[140].scsi_euidevice_id"
    assert result.volumes[140].volume_id == 641, "Died on +.volumes[140].volume_id"
    assert result.volumes[140].access == """readWrite""", "Died on +.volumes[140].access"
    assert result.volumes[140].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-141.641""", "Died on +.volumes[140].iqn"
    assert result.volumes[140].slice_count == 1, "Died on +.volumes[140].slice_count"
    assert type(result.volumes[140].attributes) is dict, "Died on .volumes[140].attributes"
    assert result.volumes[140].volume_pairs[0].volume_pair_uuid == UUID("f1f18964-eaa6-45a0-942b-d89d26e13aa0"), "Died on .volumes[140].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[140].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[140].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[140].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[140].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[140].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[140].volume_pairs[0].remote_replication.state"
    assert result.volumes[140].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[140].volume_pairs[0].remote_replication.mode"
    assert result.volumes[140].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[140].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[140].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[140].volume_pairs[0].cluster_pair_id"
    assert result.volumes[140].volume_pairs[0].remote_volume_id == 1141, "Died on +.volumes[140].volume_pairs[0].remote_volume_id"
    assert result.volumes[140].volume_pairs[0].remote_volume_name == """snap-target-141""", "Died on +.volumes[140].volume_pairs[0].remote_volume_name"
    assert result.volumes[140].volume_pairs[0].remote_slice_id == 1141, "Died on +.volumes[140].volume_pairs[0].remote_slice_id"
    assert result.volumes[140].account_id == 4, "Died on +.volumes[140].account_id"
    assert result.volumes[140].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[140].create_time"
    assert result.volumes[140].virtual_volume_id is None, "Died on .volumes[140].virtual_volume_id"
    assert result.volumes[139].status == """active""", "Died on +.volumes[139].status"
    assert result.volumes[139].enable512e == False, "Died on +.volumes[139].enable512e"
    assert result.volumes[139].qos.burst_iops == 15000, "Died on +.volumes[139].qos.burst_iops"
    assert result.volumes[139].qos.burst_time == 60, "Died on +.volumes[139].qos.burst_time"
    assert result.volumes[139].qos.min_iops == 100, "Died on +.volumes[139].qos.min_iops"
    assert result.volumes[139].qos.max_iops == 15000, "Died on +.volumes[139].qos.max_iops"
    assert result.volumes[139].name == """snapshots-source-140""", "Died on +.volumes[139].name"
    assert result.volumes[139].volume_access_groups[0] == 4, "Died on +.volumes[139].volume_access_groups[0]"
    assert result.volumes[139].scsi_naadevice_id == """6f47acc1000000006d69643400000280""", "Died on +.volumes[139].scsi_naadevice_id"
    assert result.volumes[139].total_size == 5000658944, "Died on +.volumes[139].total_size"
    assert result.volumes[139].block_size == 4096, "Died on +.volumes[139].block_size"
    assert result.volumes[139].scsi_euidevice_id == """6d69643400000280f47acc0100000000""", "Died on +.volumes[139].scsi_euidevice_id"
    assert result.volumes[139].volume_id == 640, "Died on +.volumes[139].volume_id"
    assert result.volumes[139].access == """readWrite""", "Died on +.volumes[139].access"
    assert result.volumes[139].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-140.640""", "Died on +.volumes[139].iqn"
    assert result.volumes[139].slice_count == 1, "Died on +.volumes[139].slice_count"
    assert type(result.volumes[139].attributes) is dict, "Died on .volumes[139].attributes"
    assert result.volumes[139].volume_pairs[0].volume_pair_uuid == UUID("bb79029d-bab5-401c-96de-12ed3e6dbcf5"), "Died on .volumes[139].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[139].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[139].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[139].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[139].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[139].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[139].volume_pairs[0].remote_replication.state"
    assert result.volumes[139].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[139].volume_pairs[0].remote_replication.mode"
    assert result.volumes[139].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[139].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[139].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[139].volume_pairs[0].cluster_pair_id"
    assert result.volumes[139].volume_pairs[0].remote_volume_id == 1140, "Died on +.volumes[139].volume_pairs[0].remote_volume_id"
    assert result.volumes[139].volume_pairs[0].remote_volume_name == """snap-target-140""", "Died on +.volumes[139].volume_pairs[0].remote_volume_name"
    assert result.volumes[139].volume_pairs[0].remote_slice_id == 1140, "Died on +.volumes[139].volume_pairs[0].remote_slice_id"
    assert result.volumes[139].account_id == 4, "Died on +.volumes[139].account_id"
    assert result.volumes[139].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[139].create_time"
    assert result.volumes[139].virtual_volume_id is None, "Died on .volumes[139].virtual_volume_id"
    assert result.volumes[138].status == """active""", "Died on +.volumes[138].status"
    assert result.volumes[138].enable512e == False, "Died on +.volumes[138].enable512e"
    assert result.volumes[138].qos.burst_iops == 15000, "Died on +.volumes[138].qos.burst_iops"
    assert result.volumes[138].qos.burst_time == 60, "Died on +.volumes[138].qos.burst_time"
    assert result.volumes[138].qos.min_iops == 100, "Died on +.volumes[138].qos.min_iops"
    assert result.volumes[138].qos.max_iops == 15000, "Died on +.volumes[138].qos.max_iops"
    assert result.volumes[138].name == """snapshots-source-139""", "Died on +.volumes[138].name"
    assert result.volumes[138].volume_access_groups[0] == 4, "Died on +.volumes[138].volume_access_groups[0]"
    assert result.volumes[138].scsi_naadevice_id == """6f47acc1000000006d6964340000027f""", "Died on +.volumes[138].scsi_naadevice_id"
    assert result.volumes[138].total_size == 5000658944, "Died on +.volumes[138].total_size"
    assert result.volumes[138].block_size == 4096, "Died on +.volumes[138].block_size"
    assert result.volumes[138].scsi_euidevice_id == """6d6964340000027ff47acc0100000000""", "Died on +.volumes[138].scsi_euidevice_id"
    assert result.volumes[138].volume_id == 639, "Died on +.volumes[138].volume_id"
    assert result.volumes[138].access == """readWrite""", "Died on +.volumes[138].access"
    assert result.volumes[138].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-139.639""", "Died on +.volumes[138].iqn"
    assert result.volumes[138].slice_count == 1, "Died on +.volumes[138].slice_count"
    assert type(result.volumes[138].attributes) is dict, "Died on .volumes[138].attributes"
    assert result.volumes[138].volume_pairs[0].volume_pair_uuid == UUID("750a00de-355a-4e57-83ab-742b59bb1751"), "Died on .volumes[138].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[138].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[138].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[138].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[138].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[138].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[138].volume_pairs[0].remote_replication.state"
    assert result.volumes[138].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[138].volume_pairs[0].remote_replication.mode"
    assert result.volumes[138].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[138].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[138].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[138].volume_pairs[0].cluster_pair_id"
    assert result.volumes[138].volume_pairs[0].remote_volume_id == 1139, "Died on +.volumes[138].volume_pairs[0].remote_volume_id"
    assert result.volumes[138].volume_pairs[0].remote_volume_name == """snap-target-139""", "Died on +.volumes[138].volume_pairs[0].remote_volume_name"
    assert result.volumes[138].volume_pairs[0].remote_slice_id == 1139, "Died on +.volumes[138].volume_pairs[0].remote_slice_id"
    assert result.volumes[138].account_id == 4, "Died on +.volumes[138].account_id"
    assert result.volumes[138].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[138].create_time"
    assert result.volumes[138].virtual_volume_id is None, "Died on .volumes[138].virtual_volume_id"
    assert result.volumes[137].status == """active""", "Died on +.volumes[137].status"
    assert result.volumes[137].enable512e == False, "Died on +.volumes[137].enable512e"
    assert result.volumes[137].qos.burst_iops == 15000, "Died on +.volumes[137].qos.burst_iops"
    assert result.volumes[137].qos.burst_time == 60, "Died on +.volumes[137].qos.burst_time"
    assert result.volumes[137].qos.min_iops == 100, "Died on +.volumes[137].qos.min_iops"
    assert result.volumes[137].qos.max_iops == 15000, "Died on +.volumes[137].qos.max_iops"
    assert result.volumes[137].name == """snapshots-source-138""", "Died on +.volumes[137].name"
    assert result.volumes[137].volume_access_groups[0] == 4, "Died on +.volumes[137].volume_access_groups[0]"
    assert result.volumes[137].scsi_naadevice_id == """6f47acc1000000006d6964340000027e""", "Died on +.volumes[137].scsi_naadevice_id"
    assert result.volumes[137].total_size == 5000658944, "Died on +.volumes[137].total_size"
    assert result.volumes[137].block_size == 4096, "Died on +.volumes[137].block_size"
    assert result.volumes[137].scsi_euidevice_id == """6d6964340000027ef47acc0100000000""", "Died on +.volumes[137].scsi_euidevice_id"
    assert result.volumes[137].volume_id == 638, "Died on +.volumes[137].volume_id"
    assert result.volumes[137].access == """readWrite""", "Died on +.volumes[137].access"
    assert result.volumes[137].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-138.638""", "Died on +.volumes[137].iqn"
    assert result.volumes[137].slice_count == 1, "Died on +.volumes[137].slice_count"
    assert type(result.volumes[137].attributes) is dict, "Died on .volumes[137].attributes"
    assert result.volumes[137].volume_pairs[0].volume_pair_uuid == UUID("fe4ee5a6-cafb-42c0-9010-851e5a900bb0"), "Died on .volumes[137].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[137].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[137].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[137].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[137].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[137].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[137].volume_pairs[0].remote_replication.state"
    assert result.volumes[137].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[137].volume_pairs[0].remote_replication.mode"
    assert result.volumes[137].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[137].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[137].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[137].volume_pairs[0].cluster_pair_id"
    assert result.volumes[137].volume_pairs[0].remote_volume_id == 1138, "Died on +.volumes[137].volume_pairs[0].remote_volume_id"
    assert result.volumes[137].volume_pairs[0].remote_volume_name == """snap-target-138""", "Died on +.volumes[137].volume_pairs[0].remote_volume_name"
    assert result.volumes[137].volume_pairs[0].remote_slice_id == 1138, "Died on +.volumes[137].volume_pairs[0].remote_slice_id"
    assert result.volumes[137].account_id == 4, "Died on +.volumes[137].account_id"
    assert result.volumes[137].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[137].create_time"
    assert result.volumes[137].virtual_volume_id is None, "Died on .volumes[137].virtual_volume_id"
    assert result.volumes[136].status == """active""", "Died on +.volumes[136].status"
    assert result.volumes[136].enable512e == False, "Died on +.volumes[136].enable512e"
    assert result.volumes[136].qos.burst_iops == 15000, "Died on +.volumes[136].qos.burst_iops"
    assert result.volumes[136].qos.burst_time == 60, "Died on +.volumes[136].qos.burst_time"
    assert result.volumes[136].qos.min_iops == 100, "Died on +.volumes[136].qos.min_iops"
    assert result.volumes[136].qos.max_iops == 15000, "Died on +.volumes[136].qos.max_iops"
    assert result.volumes[136].name == """snapshots-source-137""", "Died on +.volumes[136].name"
    assert result.volumes[136].volume_access_groups[0] == 4, "Died on +.volumes[136].volume_access_groups[0]"
    assert result.volumes[136].scsi_naadevice_id == """6f47acc1000000006d6964340000027d""", "Died on +.volumes[136].scsi_naadevice_id"
    assert result.volumes[136].total_size == 5000658944, "Died on +.volumes[136].total_size"
    assert result.volumes[136].block_size == 4096, "Died on +.volumes[136].block_size"
    assert result.volumes[136].scsi_euidevice_id == """6d6964340000027df47acc0100000000""", "Died on +.volumes[136].scsi_euidevice_id"
    assert result.volumes[136].volume_id == 637, "Died on +.volumes[136].volume_id"
    assert result.volumes[136].access == """readWrite""", "Died on +.volumes[136].access"
    assert result.volumes[136].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-137.637""", "Died on +.volumes[136].iqn"
    assert result.volumes[136].slice_count == 1, "Died on +.volumes[136].slice_count"
    assert type(result.volumes[136].attributes) is dict, "Died on .volumes[136].attributes"
    assert result.volumes[136].volume_pairs[0].volume_pair_uuid == UUID("c90e7e1b-7601-4ad2-82fa-5a04c11704e6"), "Died on .volumes[136].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[136].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[136].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[136].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[136].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[136].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[136].volume_pairs[0].remote_replication.state"
    assert result.volumes[136].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[136].volume_pairs[0].remote_replication.mode"
    assert result.volumes[136].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[136].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[136].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[136].volume_pairs[0].cluster_pair_id"
    assert result.volumes[136].volume_pairs[0].remote_volume_id == 1137, "Died on +.volumes[136].volume_pairs[0].remote_volume_id"
    assert result.volumes[136].volume_pairs[0].remote_volume_name == """snap-target-137""", "Died on +.volumes[136].volume_pairs[0].remote_volume_name"
    assert result.volumes[136].volume_pairs[0].remote_slice_id == 1137, "Died on +.volumes[136].volume_pairs[0].remote_slice_id"
    assert result.volumes[136].account_id == 4, "Died on +.volumes[136].account_id"
    assert result.volumes[136].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[136].create_time"
    assert result.volumes[136].virtual_volume_id is None, "Died on .volumes[136].virtual_volume_id"
    assert result.volumes[135].status == """active""", "Died on +.volumes[135].status"
    assert result.volumes[135].enable512e == False, "Died on +.volumes[135].enable512e"
    assert result.volumes[135].qos.burst_iops == 15000, "Died on +.volumes[135].qos.burst_iops"
    assert result.volumes[135].qos.burst_time == 60, "Died on +.volumes[135].qos.burst_time"
    assert result.volumes[135].qos.min_iops == 100, "Died on +.volumes[135].qos.min_iops"
    assert result.volumes[135].qos.max_iops == 15000, "Died on +.volumes[135].qos.max_iops"
    assert result.volumes[135].name == """snapshots-source-136""", "Died on +.volumes[135].name"
    assert result.volumes[135].volume_access_groups[0] == 4, "Died on +.volumes[135].volume_access_groups[0]"
    assert result.volumes[135].scsi_naadevice_id == """6f47acc1000000006d6964340000027c""", "Died on +.volumes[135].scsi_naadevice_id"
    assert result.volumes[135].total_size == 5000658944, "Died on +.volumes[135].total_size"
    assert result.volumes[135].block_size == 4096, "Died on +.volumes[135].block_size"
    assert result.volumes[135].scsi_euidevice_id == """6d6964340000027cf47acc0100000000""", "Died on +.volumes[135].scsi_euidevice_id"
    assert result.volumes[135].volume_id == 636, "Died on +.volumes[135].volume_id"
    assert result.volumes[135].access == """readWrite""", "Died on +.volumes[135].access"
    assert result.volumes[135].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-136.636""", "Died on +.volumes[135].iqn"
    assert result.volumes[135].slice_count == 1, "Died on +.volumes[135].slice_count"
    assert type(result.volumes[135].attributes) is dict, "Died on .volumes[135].attributes"
    assert result.volumes[135].volume_pairs[0].volume_pair_uuid == UUID("4e9d7625-bee4-4862-8952-f7a617725db5"), "Died on .volumes[135].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[135].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[135].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[135].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[135].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[135].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[135].volume_pairs[0].remote_replication.state"
    assert result.volumes[135].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[135].volume_pairs[0].remote_replication.mode"
    assert result.volumes[135].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[135].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[135].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[135].volume_pairs[0].cluster_pair_id"
    assert result.volumes[135].volume_pairs[0].remote_volume_id == 1136, "Died on +.volumes[135].volume_pairs[0].remote_volume_id"
    assert result.volumes[135].volume_pairs[0].remote_volume_name == """snap-target-136""", "Died on +.volumes[135].volume_pairs[0].remote_volume_name"
    assert result.volumes[135].volume_pairs[0].remote_slice_id == 1136, "Died on +.volumes[135].volume_pairs[0].remote_slice_id"
    assert result.volumes[135].account_id == 4, "Died on +.volumes[135].account_id"
    assert result.volumes[135].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[135].create_time"
    assert result.volumes[135].virtual_volume_id is None, "Died on .volumes[135].virtual_volume_id"
    assert result.volumes[134].status == """active""", "Died on +.volumes[134].status"
    assert result.volumes[134].enable512e == False, "Died on +.volumes[134].enable512e"
    assert result.volumes[134].qos.burst_iops == 15000, "Died on +.volumes[134].qos.burst_iops"
    assert result.volumes[134].qos.burst_time == 60, "Died on +.volumes[134].qos.burst_time"
    assert result.volumes[134].qos.min_iops == 100, "Died on +.volumes[134].qos.min_iops"
    assert result.volumes[134].qos.max_iops == 15000, "Died on +.volumes[134].qos.max_iops"
    assert result.volumes[134].name == """snapshots-source-135""", "Died on +.volumes[134].name"
    assert result.volumes[134].volume_access_groups[0] == 4, "Died on +.volumes[134].volume_access_groups[0]"
    assert result.volumes[134].scsi_naadevice_id == """6f47acc1000000006d6964340000027b""", "Died on +.volumes[134].scsi_naadevice_id"
    assert result.volumes[134].total_size == 5000658944, "Died on +.volumes[134].total_size"
    assert result.volumes[134].block_size == 4096, "Died on +.volumes[134].block_size"
    assert result.volumes[134].scsi_euidevice_id == """6d6964340000027bf47acc0100000000""", "Died on +.volumes[134].scsi_euidevice_id"
    assert result.volumes[134].volume_id == 635, "Died on +.volumes[134].volume_id"
    assert result.volumes[134].access == """readWrite""", "Died on +.volumes[134].access"
    assert result.volumes[134].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-135.635""", "Died on +.volumes[134].iqn"
    assert result.volumes[134].slice_count == 1, "Died on +.volumes[134].slice_count"
    assert type(result.volumes[134].attributes) is dict, "Died on .volumes[134].attributes"
    assert result.volumes[134].volume_pairs[0].volume_pair_uuid == UUID("ea777fc5-0342-4281-9b4e-d420d09a9a77"), "Died on .volumes[134].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[134].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[134].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[134].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[134].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[134].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[134].volume_pairs[0].remote_replication.state"
    assert result.volumes[134].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[134].volume_pairs[0].remote_replication.mode"
    assert result.volumes[134].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[134].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[134].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[134].volume_pairs[0].cluster_pair_id"
    assert result.volumes[134].volume_pairs[0].remote_volume_id == 1135, "Died on +.volumes[134].volume_pairs[0].remote_volume_id"
    assert result.volumes[134].volume_pairs[0].remote_volume_name == """snap-target-135""", "Died on +.volumes[134].volume_pairs[0].remote_volume_name"
    assert result.volumes[134].volume_pairs[0].remote_slice_id == 1135, "Died on +.volumes[134].volume_pairs[0].remote_slice_id"
    assert result.volumes[134].account_id == 4, "Died on +.volumes[134].account_id"
    assert result.volumes[134].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[134].create_time"
    assert result.volumes[134].virtual_volume_id is None, "Died on .volumes[134].virtual_volume_id"
    assert result.volumes[133].status == """active""", "Died on +.volumes[133].status"
    assert result.volumes[133].enable512e == False, "Died on +.volumes[133].enable512e"
    assert result.volumes[133].qos.burst_iops == 15000, "Died on +.volumes[133].qos.burst_iops"
    assert result.volumes[133].qos.burst_time == 60, "Died on +.volumes[133].qos.burst_time"
    assert result.volumes[133].qos.min_iops == 100, "Died on +.volumes[133].qos.min_iops"
    assert result.volumes[133].qos.max_iops == 15000, "Died on +.volumes[133].qos.max_iops"
    assert result.volumes[133].name == """snapshots-source-134""", "Died on +.volumes[133].name"
    assert result.volumes[133].volume_access_groups[0] == 4, "Died on +.volumes[133].volume_access_groups[0]"
    assert result.volumes[133].scsi_naadevice_id == """6f47acc1000000006d6964340000027a""", "Died on +.volumes[133].scsi_naadevice_id"
    assert result.volumes[133].total_size == 5000658944, "Died on +.volumes[133].total_size"
    assert result.volumes[133].block_size == 4096, "Died on +.volumes[133].block_size"
    assert result.volumes[133].scsi_euidevice_id == """6d6964340000027af47acc0100000000""", "Died on +.volumes[133].scsi_euidevice_id"
    assert result.volumes[133].volume_id == 634, "Died on +.volumes[133].volume_id"
    assert result.volumes[133].access == """readWrite""", "Died on +.volumes[133].access"
    assert result.volumes[133].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-134.634""", "Died on +.volumes[133].iqn"
    assert result.volumes[133].slice_count == 1, "Died on +.volumes[133].slice_count"
    assert type(result.volumes[133].attributes) is dict, "Died on .volumes[133].attributes"
    assert result.volumes[133].volume_pairs[0].volume_pair_uuid == UUID("8ec41bbd-b850-4df0-992f-cababc300607"), "Died on .volumes[133].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[133].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[133].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[133].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[133].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[133].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[133].volume_pairs[0].remote_replication.state"
    assert result.volumes[133].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[133].volume_pairs[0].remote_replication.mode"
    assert result.volumes[133].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[133].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[133].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[133].volume_pairs[0].cluster_pair_id"
    assert result.volumes[133].volume_pairs[0].remote_volume_id == 1134, "Died on +.volumes[133].volume_pairs[0].remote_volume_id"
    assert result.volumes[133].volume_pairs[0].remote_volume_name == """snap-target-134""", "Died on +.volumes[133].volume_pairs[0].remote_volume_name"
    assert result.volumes[133].volume_pairs[0].remote_slice_id == 1134, "Died on +.volumes[133].volume_pairs[0].remote_slice_id"
    assert result.volumes[133].account_id == 4, "Died on +.volumes[133].account_id"
    assert result.volumes[133].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[133].create_time"
    assert result.volumes[133].virtual_volume_id is None, "Died on .volumes[133].virtual_volume_id"
    assert result.volumes[132].status == """active""", "Died on +.volumes[132].status"
    assert result.volumes[132].enable512e == False, "Died on +.volumes[132].enable512e"
    assert result.volumes[132].qos.burst_iops == 15000, "Died on +.volumes[132].qos.burst_iops"
    assert result.volumes[132].qos.burst_time == 60, "Died on +.volumes[132].qos.burst_time"
    assert result.volumes[132].qos.min_iops == 100, "Died on +.volumes[132].qos.min_iops"
    assert result.volumes[132].qos.max_iops == 15000, "Died on +.volumes[132].qos.max_iops"
    assert result.volumes[132].name == """snapshots-source-133""", "Died on +.volumes[132].name"
    assert result.volumes[132].volume_access_groups[0] == 4, "Died on +.volumes[132].volume_access_groups[0]"
    assert result.volumes[132].scsi_naadevice_id == """6f47acc1000000006d69643400000279""", "Died on +.volumes[132].scsi_naadevice_id"
    assert result.volumes[132].total_size == 5000658944, "Died on +.volumes[132].total_size"
    assert result.volumes[132].block_size == 4096, "Died on +.volumes[132].block_size"
    assert result.volumes[132].scsi_euidevice_id == """6d69643400000279f47acc0100000000""", "Died on +.volumes[132].scsi_euidevice_id"
    assert result.volumes[132].volume_id == 633, "Died on +.volumes[132].volume_id"
    assert result.volumes[132].access == """readWrite""", "Died on +.volumes[132].access"
    assert result.volumes[132].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-133.633""", "Died on +.volumes[132].iqn"
    assert result.volumes[132].slice_count == 1, "Died on +.volumes[132].slice_count"
    assert type(result.volumes[132].attributes) is dict, "Died on .volumes[132].attributes"
    assert result.volumes[132].volume_pairs[0].volume_pair_uuid == UUID("e3e594ac-2ee1-45d7-8709-851a0f81816e"), "Died on .volumes[132].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[132].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[132].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[132].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[132].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[132].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[132].volume_pairs[0].remote_replication.state"
    assert result.volumes[132].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[132].volume_pairs[0].remote_replication.mode"
    assert result.volumes[132].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[132].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[132].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[132].volume_pairs[0].cluster_pair_id"
    assert result.volumes[132].volume_pairs[0].remote_volume_id == 1133, "Died on +.volumes[132].volume_pairs[0].remote_volume_id"
    assert result.volumes[132].volume_pairs[0].remote_volume_name == """snap-target-133""", "Died on +.volumes[132].volume_pairs[0].remote_volume_name"
    assert result.volumes[132].volume_pairs[0].remote_slice_id == 1133, "Died on +.volumes[132].volume_pairs[0].remote_slice_id"
    assert result.volumes[132].account_id == 4, "Died on +.volumes[132].account_id"
    assert result.volumes[132].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[132].create_time"
    assert result.volumes[132].virtual_volume_id is None, "Died on .volumes[132].virtual_volume_id"
    assert result.volumes[131].status == """active""", "Died on +.volumes[131].status"
    assert result.volumes[131].enable512e == False, "Died on +.volumes[131].enable512e"
    assert result.volumes[131].qos.burst_iops == 15000, "Died on +.volumes[131].qos.burst_iops"
    assert result.volumes[131].qos.burst_time == 60, "Died on +.volumes[131].qos.burst_time"
    assert result.volumes[131].qos.min_iops == 100, "Died on +.volumes[131].qos.min_iops"
    assert result.volumes[131].qos.max_iops == 15000, "Died on +.volumes[131].qos.max_iops"
    assert result.volumes[131].name == """snapshots-source-132""", "Died on +.volumes[131].name"
    assert result.volumes[131].volume_access_groups[0] == 4, "Died on +.volumes[131].volume_access_groups[0]"
    assert result.volumes[131].scsi_naadevice_id == """6f47acc1000000006d69643400000278""", "Died on +.volumes[131].scsi_naadevice_id"
    assert result.volumes[131].total_size == 5000658944, "Died on +.volumes[131].total_size"
    assert result.volumes[131].block_size == 4096, "Died on +.volumes[131].block_size"
    assert result.volumes[131].scsi_euidevice_id == """6d69643400000278f47acc0100000000""", "Died on +.volumes[131].scsi_euidevice_id"
    assert result.volumes[131].volume_id == 632, "Died on +.volumes[131].volume_id"
    assert result.volumes[131].access == """readWrite""", "Died on +.volumes[131].access"
    assert result.volumes[131].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-132.632""", "Died on +.volumes[131].iqn"
    assert result.volumes[131].slice_count == 1, "Died on +.volumes[131].slice_count"
    assert type(result.volumes[131].attributes) is dict, "Died on .volumes[131].attributes"
    assert result.volumes[131].volume_pairs[0].volume_pair_uuid == UUID("391132f6-8a2c-4dce-a088-cfe9edbfd474"), "Died on .volumes[131].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[131].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[131].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[131].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[131].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[131].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[131].volume_pairs[0].remote_replication.state"
    assert result.volumes[131].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[131].volume_pairs[0].remote_replication.mode"
    assert result.volumes[131].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[131].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[131].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[131].volume_pairs[0].cluster_pair_id"
    assert result.volumes[131].volume_pairs[0].remote_volume_id == 1132, "Died on +.volumes[131].volume_pairs[0].remote_volume_id"
    assert result.volumes[131].volume_pairs[0].remote_volume_name == """snap-target-132""", "Died on +.volumes[131].volume_pairs[0].remote_volume_name"
    assert result.volumes[131].volume_pairs[0].remote_slice_id == 1132, "Died on +.volumes[131].volume_pairs[0].remote_slice_id"
    assert result.volumes[131].account_id == 4, "Died on +.volumes[131].account_id"
    assert result.volumes[131].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[131].create_time"
    assert result.volumes[131].virtual_volume_id is None, "Died on .volumes[131].virtual_volume_id"
    assert result.volumes[130].status == """active""", "Died on +.volumes[130].status"
    assert result.volumes[130].enable512e == False, "Died on +.volumes[130].enable512e"
    assert result.volumes[130].qos.burst_iops == 15000, "Died on +.volumes[130].qos.burst_iops"
    assert result.volumes[130].qos.burst_time == 60, "Died on +.volumes[130].qos.burst_time"
    assert result.volumes[130].qos.min_iops == 100, "Died on +.volumes[130].qos.min_iops"
    assert result.volumes[130].qos.max_iops == 15000, "Died on +.volumes[130].qos.max_iops"
    assert result.volumes[130].name == """snapshots-source-131""", "Died on +.volumes[130].name"
    assert result.volumes[130].volume_access_groups[0] == 4, "Died on +.volumes[130].volume_access_groups[0]"
    assert result.volumes[130].scsi_naadevice_id == """6f47acc1000000006d69643400000277""", "Died on +.volumes[130].scsi_naadevice_id"
    assert result.volumes[130].total_size == 5000658944, "Died on +.volumes[130].total_size"
    assert result.volumes[130].block_size == 4096, "Died on +.volumes[130].block_size"
    assert result.volumes[130].scsi_euidevice_id == """6d69643400000277f47acc0100000000""", "Died on +.volumes[130].scsi_euidevice_id"
    assert result.volumes[130].volume_id == 631, "Died on +.volumes[130].volume_id"
    assert result.volumes[130].access == """readWrite""", "Died on +.volumes[130].access"
    assert result.volumes[130].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-131.631""", "Died on +.volumes[130].iqn"
    assert result.volumes[130].slice_count == 1, "Died on +.volumes[130].slice_count"
    assert type(result.volumes[130].attributes) is dict, "Died on .volumes[130].attributes"
    assert result.volumes[130].volume_pairs[0].volume_pair_uuid == UUID("ed7ae2f6-bf39-4ed1-bc2e-8c16d07dc0ed"), "Died on .volumes[130].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[130].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[130].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[130].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[130].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[130].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[130].volume_pairs[0].remote_replication.state"
    assert result.volumes[130].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[130].volume_pairs[0].remote_replication.mode"
    assert result.volumes[130].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[130].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[130].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[130].volume_pairs[0].cluster_pair_id"
    assert result.volumes[130].volume_pairs[0].remote_volume_id == 1131, "Died on +.volumes[130].volume_pairs[0].remote_volume_id"
    assert result.volumes[130].volume_pairs[0].remote_volume_name == """snap-target-131""", "Died on +.volumes[130].volume_pairs[0].remote_volume_name"
    assert result.volumes[130].volume_pairs[0].remote_slice_id == 1131, "Died on +.volumes[130].volume_pairs[0].remote_slice_id"
    assert result.volumes[130].account_id == 4, "Died on +.volumes[130].account_id"
    assert result.volumes[130].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[130].create_time"
    assert result.volumes[130].virtual_volume_id is None, "Died on .volumes[130].virtual_volume_id"
    assert result.volumes[129].status == """active""", "Died on +.volumes[129].status"
    assert result.volumes[129].enable512e == False, "Died on +.volumes[129].enable512e"
    assert result.volumes[129].qos.burst_iops == 15000, "Died on +.volumes[129].qos.burst_iops"
    assert result.volumes[129].qos.burst_time == 60, "Died on +.volumes[129].qos.burst_time"
    assert result.volumes[129].qos.min_iops == 100, "Died on +.volumes[129].qos.min_iops"
    assert result.volumes[129].qos.max_iops == 15000, "Died on +.volumes[129].qos.max_iops"
    assert result.volumes[129].name == """snapshots-source-130""", "Died on +.volumes[129].name"
    assert result.volumes[129].volume_access_groups[0] == 4, "Died on +.volumes[129].volume_access_groups[0]"
    assert result.volumes[129].scsi_naadevice_id == """6f47acc1000000006d69643400000276""", "Died on +.volumes[129].scsi_naadevice_id"
    assert result.volumes[129].total_size == 5000658944, "Died on +.volumes[129].total_size"
    assert result.volumes[129].block_size == 4096, "Died on +.volumes[129].block_size"
    assert result.volumes[129].scsi_euidevice_id == """6d69643400000276f47acc0100000000""", "Died on +.volumes[129].scsi_euidevice_id"
    assert result.volumes[129].volume_id == 630, "Died on +.volumes[129].volume_id"
    assert result.volumes[129].access == """readWrite""", "Died on +.volumes[129].access"
    assert result.volumes[129].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-130.630""", "Died on +.volumes[129].iqn"
    assert result.volumes[129].slice_count == 1, "Died on +.volumes[129].slice_count"
    assert type(result.volumes[129].attributes) is dict, "Died on .volumes[129].attributes"
    assert result.volumes[129].volume_pairs[0].volume_pair_uuid == UUID("1b710890-faaa-4511-9936-4d0c5005f37d"), "Died on .volumes[129].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[129].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[129].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[129].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[129].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[129].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[129].volume_pairs[0].remote_replication.state"
    assert result.volumes[129].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[129].volume_pairs[0].remote_replication.mode"
    assert result.volumes[129].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[129].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[129].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[129].volume_pairs[0].cluster_pair_id"
    assert result.volumes[129].volume_pairs[0].remote_volume_id == 1130, "Died on +.volumes[129].volume_pairs[0].remote_volume_id"
    assert result.volumes[129].volume_pairs[0].remote_volume_name == """snap-target-130""", "Died on +.volumes[129].volume_pairs[0].remote_volume_name"
    assert result.volumes[129].volume_pairs[0].remote_slice_id == 1130, "Died on +.volumes[129].volume_pairs[0].remote_slice_id"
    assert result.volumes[129].account_id == 4, "Died on +.volumes[129].account_id"
    assert result.volumes[129].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[129].create_time"
    assert result.volumes[129].virtual_volume_id is None, "Died on .volumes[129].virtual_volume_id"
    assert result.volumes[128].status == """active""", "Died on +.volumes[128].status"
    assert result.volumes[128].enable512e == False, "Died on +.volumes[128].enable512e"
    assert result.volumes[128].qos.burst_iops == 15000, "Died on +.volumes[128].qos.burst_iops"
    assert result.volumes[128].qos.burst_time == 60, "Died on +.volumes[128].qos.burst_time"
    assert result.volumes[128].qos.min_iops == 100, "Died on +.volumes[128].qos.min_iops"
    assert result.volumes[128].qos.max_iops == 15000, "Died on +.volumes[128].qos.max_iops"
    assert result.volumes[128].name == """snapshots-source-129""", "Died on +.volumes[128].name"
    assert result.volumes[128].volume_access_groups[0] == 4, "Died on +.volumes[128].volume_access_groups[0]"
    assert result.volumes[128].scsi_naadevice_id == """6f47acc1000000006d69643400000275""", "Died on +.volumes[128].scsi_naadevice_id"
    assert result.volumes[128].total_size == 5000658944, "Died on +.volumes[128].total_size"
    assert result.volumes[128].block_size == 4096, "Died on +.volumes[128].block_size"
    assert result.volumes[128].scsi_euidevice_id == """6d69643400000275f47acc0100000000""", "Died on +.volumes[128].scsi_euidevice_id"
    assert result.volumes[128].volume_id == 629, "Died on +.volumes[128].volume_id"
    assert result.volumes[128].access == """readWrite""", "Died on +.volumes[128].access"
    assert result.volumes[128].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-129.629""", "Died on +.volumes[128].iqn"
    assert result.volumes[128].slice_count == 1, "Died on +.volumes[128].slice_count"
    assert type(result.volumes[128].attributes) is dict, "Died on .volumes[128].attributes"
    assert result.volumes[128].volume_pairs[0].volume_pair_uuid == UUID("9fa6f552-4fd1-4d61-ae60-d8b93155f1c6"), "Died on .volumes[128].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[128].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[128].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[128].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[128].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[128].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[128].volume_pairs[0].remote_replication.state"
    assert result.volumes[128].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[128].volume_pairs[0].remote_replication.mode"
    assert result.volumes[128].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[128].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[128].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[128].volume_pairs[0].cluster_pair_id"
    assert result.volumes[128].volume_pairs[0].remote_volume_id == 1129, "Died on +.volumes[128].volume_pairs[0].remote_volume_id"
    assert result.volumes[128].volume_pairs[0].remote_volume_name == """snap-target-129""", "Died on +.volumes[128].volume_pairs[0].remote_volume_name"
    assert result.volumes[128].volume_pairs[0].remote_slice_id == 1129, "Died on +.volumes[128].volume_pairs[0].remote_slice_id"
    assert result.volumes[128].account_id == 4, "Died on +.volumes[128].account_id"
    assert result.volumes[128].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[128].create_time"
    assert result.volumes[128].virtual_volume_id is None, "Died on .volumes[128].virtual_volume_id"
    assert result.volumes[127].status == """active""", "Died on +.volumes[127].status"
    assert result.volumes[127].enable512e == False, "Died on +.volumes[127].enable512e"
    assert result.volumes[127].qos.burst_iops == 15000, "Died on +.volumes[127].qos.burst_iops"
    assert result.volumes[127].qos.burst_time == 60, "Died on +.volumes[127].qos.burst_time"
    assert result.volumes[127].qos.min_iops == 100, "Died on +.volumes[127].qos.min_iops"
    assert result.volumes[127].qos.max_iops == 15000, "Died on +.volumes[127].qos.max_iops"
    assert result.volumes[127].name == """snapshots-source-128""", "Died on +.volumes[127].name"
    assert result.volumes[127].volume_access_groups[0] == 4, "Died on +.volumes[127].volume_access_groups[0]"
    assert result.volumes[127].scsi_naadevice_id == """6f47acc1000000006d69643400000274""", "Died on +.volumes[127].scsi_naadevice_id"
    assert result.volumes[127].total_size == 5000658944, "Died on +.volumes[127].total_size"
    assert result.volumes[127].block_size == 4096, "Died on +.volumes[127].block_size"
    assert result.volumes[127].scsi_euidevice_id == """6d69643400000274f47acc0100000000""", "Died on +.volumes[127].scsi_euidevice_id"
    assert result.volumes[127].volume_id == 628, "Died on +.volumes[127].volume_id"
    assert result.volumes[127].access == """readWrite""", "Died on +.volumes[127].access"
    assert result.volumes[127].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-128.628""", "Died on +.volumes[127].iqn"
    assert result.volumes[127].slice_count == 1, "Died on +.volumes[127].slice_count"
    assert type(result.volumes[127].attributes) is dict, "Died on .volumes[127].attributes"
    assert result.volumes[127].volume_pairs[0].volume_pair_uuid == UUID("ae7357c0-647b-4a7e-882a-0dba66444201"), "Died on .volumes[127].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[127].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[127].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[127].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[127].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[127].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[127].volume_pairs[0].remote_replication.state"
    assert result.volumes[127].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[127].volume_pairs[0].remote_replication.mode"
    assert result.volumes[127].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[127].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[127].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[127].volume_pairs[0].cluster_pair_id"
    assert result.volumes[127].volume_pairs[0].remote_volume_id == 1128, "Died on +.volumes[127].volume_pairs[0].remote_volume_id"
    assert result.volumes[127].volume_pairs[0].remote_volume_name == """snap-target-128""", "Died on +.volumes[127].volume_pairs[0].remote_volume_name"
    assert result.volumes[127].volume_pairs[0].remote_slice_id == 1128, "Died on +.volumes[127].volume_pairs[0].remote_slice_id"
    assert result.volumes[127].account_id == 4, "Died on +.volumes[127].account_id"
    assert result.volumes[127].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[127].create_time"
    assert result.volumes[127].virtual_volume_id is None, "Died on .volumes[127].virtual_volume_id"
    assert result.volumes[126].status == """active""", "Died on +.volumes[126].status"
    assert result.volumes[126].enable512e == False, "Died on +.volumes[126].enable512e"
    assert result.volumes[126].qos.burst_iops == 15000, "Died on +.volumes[126].qos.burst_iops"
    assert result.volumes[126].qos.burst_time == 60, "Died on +.volumes[126].qos.burst_time"
    assert result.volumes[126].qos.min_iops == 100, "Died on +.volumes[126].qos.min_iops"
    assert result.volumes[126].qos.max_iops == 15000, "Died on +.volumes[126].qos.max_iops"
    assert result.volumes[126].name == """snapshots-source-127""", "Died on +.volumes[126].name"
    assert result.volumes[126].volume_access_groups[0] == 4, "Died on +.volumes[126].volume_access_groups[0]"
    assert result.volumes[126].scsi_naadevice_id == """6f47acc1000000006d69643400000273""", "Died on +.volumes[126].scsi_naadevice_id"
    assert result.volumes[126].total_size == 5000658944, "Died on +.volumes[126].total_size"
    assert result.volumes[126].block_size == 4096, "Died on +.volumes[126].block_size"
    assert result.volumes[126].scsi_euidevice_id == """6d69643400000273f47acc0100000000""", "Died on +.volumes[126].scsi_euidevice_id"
    assert result.volumes[126].volume_id == 627, "Died on +.volumes[126].volume_id"
    assert result.volumes[126].access == """readWrite""", "Died on +.volumes[126].access"
    assert result.volumes[126].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-127.627""", "Died on +.volumes[126].iqn"
    assert result.volumes[126].slice_count == 1, "Died on +.volumes[126].slice_count"
    assert type(result.volumes[126].attributes) is dict, "Died on .volumes[126].attributes"
    assert result.volumes[126].volume_pairs[0].volume_pair_uuid == UUID("d6a4b190-ec48-4bc9-ab1c-36c685a99c95"), "Died on .volumes[126].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[126].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[126].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[126].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[126].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[126].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[126].volume_pairs[0].remote_replication.state"
    assert result.volumes[126].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[126].volume_pairs[0].remote_replication.mode"
    assert result.volumes[126].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[126].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[126].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[126].volume_pairs[0].cluster_pair_id"
    assert result.volumes[126].volume_pairs[0].remote_volume_id == 1127, "Died on +.volumes[126].volume_pairs[0].remote_volume_id"
    assert result.volumes[126].volume_pairs[0].remote_volume_name == """snap-target-127""", "Died on +.volumes[126].volume_pairs[0].remote_volume_name"
    assert result.volumes[126].volume_pairs[0].remote_slice_id == 1127, "Died on +.volumes[126].volume_pairs[0].remote_slice_id"
    assert result.volumes[126].account_id == 4, "Died on +.volumes[126].account_id"
    assert result.volumes[126].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[126].create_time"
    assert result.volumes[126].virtual_volume_id is None, "Died on .volumes[126].virtual_volume_id"
    assert result.volumes[125].status == """active""", "Died on +.volumes[125].status"
    assert result.volumes[125].enable512e == False, "Died on +.volumes[125].enable512e"
    assert result.volumes[125].qos.burst_iops == 15000, "Died on +.volumes[125].qos.burst_iops"
    assert result.volumes[125].qos.burst_time == 60, "Died on +.volumes[125].qos.burst_time"
    assert result.volumes[125].qos.min_iops == 100, "Died on +.volumes[125].qos.min_iops"
    assert result.volumes[125].qos.max_iops == 15000, "Died on +.volumes[125].qos.max_iops"
    assert result.volumes[125].name == """snapshots-source-126""", "Died on +.volumes[125].name"
    assert result.volumes[125].volume_access_groups[0] == 4, "Died on +.volumes[125].volume_access_groups[0]"
    assert result.volumes[125].scsi_naadevice_id == """6f47acc1000000006d69643400000272""", "Died on +.volumes[125].scsi_naadevice_id"
    assert result.volumes[125].total_size == 5000658944, "Died on +.volumes[125].total_size"
    assert result.volumes[125].block_size == 4096, "Died on +.volumes[125].block_size"
    assert result.volumes[125].scsi_euidevice_id == """6d69643400000272f47acc0100000000""", "Died on +.volumes[125].scsi_euidevice_id"
    assert result.volumes[125].volume_id == 626, "Died on +.volumes[125].volume_id"
    assert result.volumes[125].access == """readWrite""", "Died on +.volumes[125].access"
    assert result.volumes[125].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-126.626""", "Died on +.volumes[125].iqn"
    assert result.volumes[125].slice_count == 1, "Died on +.volumes[125].slice_count"
    assert type(result.volumes[125].attributes) is dict, "Died on .volumes[125].attributes"
    assert result.volumes[125].volume_pairs[0].volume_pair_uuid == UUID("41e579fe-862c-4bf3-936b-775c2e7a0ed5"), "Died on .volumes[125].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[125].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[125].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[125].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[125].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[125].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[125].volume_pairs[0].remote_replication.state"
    assert result.volumes[125].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[125].volume_pairs[0].remote_replication.mode"
    assert result.volumes[125].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[125].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[125].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[125].volume_pairs[0].cluster_pair_id"
    assert result.volumes[125].volume_pairs[0].remote_volume_id == 1126, "Died on +.volumes[125].volume_pairs[0].remote_volume_id"
    assert result.volumes[125].volume_pairs[0].remote_volume_name == """snap-target-126""", "Died on +.volumes[125].volume_pairs[0].remote_volume_name"
    assert result.volumes[125].volume_pairs[0].remote_slice_id == 1126, "Died on +.volumes[125].volume_pairs[0].remote_slice_id"
    assert result.volumes[125].account_id == 4, "Died on +.volumes[125].account_id"
    assert result.volumes[125].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[125].create_time"
    assert result.volumes[125].virtual_volume_id is None, "Died on .volumes[125].virtual_volume_id"
    assert result.volumes[124].status == """active""", "Died on +.volumes[124].status"
    assert result.volumes[124].enable512e == False, "Died on +.volumes[124].enable512e"
    assert result.volumes[124].qos.burst_iops == 15000, "Died on +.volumes[124].qos.burst_iops"
    assert result.volumes[124].qos.burst_time == 60, "Died on +.volumes[124].qos.burst_time"
    assert result.volumes[124].qos.min_iops == 100, "Died on +.volumes[124].qos.min_iops"
    assert result.volumes[124].qos.max_iops == 15000, "Died on +.volumes[124].qos.max_iops"
    assert result.volumes[124].name == """snapshots-source-125""", "Died on +.volumes[124].name"
    assert result.volumes[124].volume_access_groups[0] == 4, "Died on +.volumes[124].volume_access_groups[0]"
    assert result.volumes[124].scsi_naadevice_id == """6f47acc1000000006d69643400000271""", "Died on +.volumes[124].scsi_naadevice_id"
    assert result.volumes[124].total_size == 5000658944, "Died on +.volumes[124].total_size"
    assert result.volumes[124].block_size == 4096, "Died on +.volumes[124].block_size"
    assert result.volumes[124].scsi_euidevice_id == """6d69643400000271f47acc0100000000""", "Died on +.volumes[124].scsi_euidevice_id"
    assert result.volumes[124].volume_id == 625, "Died on +.volumes[124].volume_id"
    assert result.volumes[124].access == """readWrite""", "Died on +.volumes[124].access"
    assert result.volumes[124].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-125.625""", "Died on +.volumes[124].iqn"
    assert result.volumes[124].slice_count == 1, "Died on +.volumes[124].slice_count"
    assert type(result.volumes[124].attributes) is dict, "Died on .volumes[124].attributes"
    assert result.volumes[124].volume_pairs[0].volume_pair_uuid == UUID("775b71a9-badd-4e31-92e1-5eadfd27536e"), "Died on .volumes[124].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[124].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[124].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[124].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[124].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[124].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[124].volume_pairs[0].remote_replication.state"
    assert result.volumes[124].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[124].volume_pairs[0].remote_replication.mode"
    assert result.volumes[124].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[124].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[124].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[124].volume_pairs[0].cluster_pair_id"
    assert result.volumes[124].volume_pairs[0].remote_volume_id == 1125, "Died on +.volumes[124].volume_pairs[0].remote_volume_id"
    assert result.volumes[124].volume_pairs[0].remote_volume_name == """snap-target-125""", "Died on +.volumes[124].volume_pairs[0].remote_volume_name"
    assert result.volumes[124].volume_pairs[0].remote_slice_id == 1125, "Died on +.volumes[124].volume_pairs[0].remote_slice_id"
    assert result.volumes[124].account_id == 4, "Died on +.volumes[124].account_id"
    assert result.volumes[124].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[124].create_time"
    assert result.volumes[124].virtual_volume_id is None, "Died on .volumes[124].virtual_volume_id"
    assert result.volumes[123].status == """active""", "Died on +.volumes[123].status"
    assert result.volumes[123].enable512e == False, "Died on +.volumes[123].enable512e"
    assert result.volumes[123].qos.burst_iops == 15000, "Died on +.volumes[123].qos.burst_iops"
    assert result.volumes[123].qos.burst_time == 60, "Died on +.volumes[123].qos.burst_time"
    assert result.volumes[123].qos.min_iops == 100, "Died on +.volumes[123].qos.min_iops"
    assert result.volumes[123].qos.max_iops == 15000, "Died on +.volumes[123].qos.max_iops"
    assert result.volumes[123].name == """snapshots-source-124""", "Died on +.volumes[123].name"
    assert result.volumes[123].volume_access_groups[0] == 4, "Died on +.volumes[123].volume_access_groups[0]"
    assert result.volumes[123].scsi_naadevice_id == """6f47acc1000000006d69643400000270""", "Died on +.volumes[123].scsi_naadevice_id"
    assert result.volumes[123].total_size == 5000658944, "Died on +.volumes[123].total_size"
    assert result.volumes[123].block_size == 4096, "Died on +.volumes[123].block_size"
    assert result.volumes[123].scsi_euidevice_id == """6d69643400000270f47acc0100000000""", "Died on +.volumes[123].scsi_euidevice_id"
    assert result.volumes[123].volume_id == 624, "Died on +.volumes[123].volume_id"
    assert result.volumes[123].access == """readWrite""", "Died on +.volumes[123].access"
    assert result.volumes[123].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-124.624""", "Died on +.volumes[123].iqn"
    assert result.volumes[123].slice_count == 1, "Died on +.volumes[123].slice_count"
    assert type(result.volumes[123].attributes) is dict, "Died on .volumes[123].attributes"
    assert result.volumes[123].volume_pairs[0].volume_pair_uuid == UUID("be578cc8-4fb3-4766-a14f-825267fa21b4"), "Died on .volumes[123].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[123].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[123].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[123].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[123].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[123].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[123].volume_pairs[0].remote_replication.state"
    assert result.volumes[123].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[123].volume_pairs[0].remote_replication.mode"
    assert result.volumes[123].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[123].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[123].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[123].volume_pairs[0].cluster_pair_id"
    assert result.volumes[123].volume_pairs[0].remote_volume_id == 1124, "Died on +.volumes[123].volume_pairs[0].remote_volume_id"
    assert result.volumes[123].volume_pairs[0].remote_volume_name == """snap-target-124""", "Died on +.volumes[123].volume_pairs[0].remote_volume_name"
    assert result.volumes[123].volume_pairs[0].remote_slice_id == 1124, "Died on +.volumes[123].volume_pairs[0].remote_slice_id"
    assert result.volumes[123].account_id == 4, "Died on +.volumes[123].account_id"
    assert result.volumes[123].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[123].create_time"
    assert result.volumes[123].virtual_volume_id is None, "Died on .volumes[123].virtual_volume_id"
    assert result.volumes[122].status == """active""", "Died on +.volumes[122].status"
    assert result.volumes[122].enable512e == False, "Died on +.volumes[122].enable512e"
    assert result.volumes[122].qos.burst_iops == 15000, "Died on +.volumes[122].qos.burst_iops"
    assert result.volumes[122].qos.burst_time == 60, "Died on +.volumes[122].qos.burst_time"
    assert result.volumes[122].qos.min_iops == 100, "Died on +.volumes[122].qos.min_iops"
    assert result.volumes[122].qos.max_iops == 15000, "Died on +.volumes[122].qos.max_iops"
    assert result.volumes[122].name == """snapshots-source-123""", "Died on +.volumes[122].name"
    assert result.volumes[122].volume_access_groups[0] == 4, "Died on +.volumes[122].volume_access_groups[0]"
    assert result.volumes[122].scsi_naadevice_id == """6f47acc1000000006d6964340000026f""", "Died on +.volumes[122].scsi_naadevice_id"
    assert result.volumes[122].total_size == 5000658944, "Died on +.volumes[122].total_size"
    assert result.volumes[122].block_size == 4096, "Died on +.volumes[122].block_size"
    assert result.volumes[122].scsi_euidevice_id == """6d6964340000026ff47acc0100000000""", "Died on +.volumes[122].scsi_euidevice_id"
    assert result.volumes[122].volume_id == 623, "Died on +.volumes[122].volume_id"
    assert result.volumes[122].access == """readWrite""", "Died on +.volumes[122].access"
    assert result.volumes[122].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-123.623""", "Died on +.volumes[122].iqn"
    assert result.volumes[122].slice_count == 1, "Died on +.volumes[122].slice_count"
    assert type(result.volumes[122].attributes) is dict, "Died on .volumes[122].attributes"
    assert result.volumes[122].volume_pairs[0].volume_pair_uuid == UUID("469f0e70-04df-452b-90db-0c2a92a175b9"), "Died on .volumes[122].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[122].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[122].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[122].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[122].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[122].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[122].volume_pairs[0].remote_replication.state"
    assert result.volumes[122].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[122].volume_pairs[0].remote_replication.mode"
    assert result.volumes[122].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[122].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[122].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[122].volume_pairs[0].cluster_pair_id"
    assert result.volumes[122].volume_pairs[0].remote_volume_id == 1123, "Died on +.volumes[122].volume_pairs[0].remote_volume_id"
    assert result.volumes[122].volume_pairs[0].remote_volume_name == """snap-target-123""", "Died on +.volumes[122].volume_pairs[0].remote_volume_name"
    assert result.volumes[122].volume_pairs[0].remote_slice_id == 1123, "Died on +.volumes[122].volume_pairs[0].remote_slice_id"
    assert result.volumes[122].account_id == 4, "Died on +.volumes[122].account_id"
    assert result.volumes[122].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[122].create_time"
    assert result.volumes[122].virtual_volume_id is None, "Died on .volumes[122].virtual_volume_id"
    assert result.volumes[121].status == """active""", "Died on +.volumes[121].status"
    assert result.volumes[121].enable512e == False, "Died on +.volumes[121].enable512e"
    assert result.volumes[121].qos.burst_iops == 15000, "Died on +.volumes[121].qos.burst_iops"
    assert result.volumes[121].qos.burst_time == 60, "Died on +.volumes[121].qos.burst_time"
    assert result.volumes[121].qos.min_iops == 100, "Died on +.volumes[121].qos.min_iops"
    assert result.volumes[121].qos.max_iops == 15000, "Died on +.volumes[121].qos.max_iops"
    assert result.volumes[121].name == """snapshots-source-122""", "Died on +.volumes[121].name"
    assert result.volumes[121].volume_access_groups[0] == 4, "Died on +.volumes[121].volume_access_groups[0]"
    assert result.volumes[121].scsi_naadevice_id == """6f47acc1000000006d6964340000026e""", "Died on +.volumes[121].scsi_naadevice_id"
    assert result.volumes[121].total_size == 5000658944, "Died on +.volumes[121].total_size"
    assert result.volumes[121].block_size == 4096, "Died on +.volumes[121].block_size"
    assert result.volumes[121].scsi_euidevice_id == """6d6964340000026ef47acc0100000000""", "Died on +.volumes[121].scsi_euidevice_id"
    assert result.volumes[121].volume_id == 622, "Died on +.volumes[121].volume_id"
    assert result.volumes[121].access == """readWrite""", "Died on +.volumes[121].access"
    assert result.volumes[121].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-122.622""", "Died on +.volumes[121].iqn"
    assert result.volumes[121].slice_count == 1, "Died on +.volumes[121].slice_count"
    assert type(result.volumes[121].attributes) is dict, "Died on .volumes[121].attributes"
    assert result.volumes[121].volume_pairs[0].volume_pair_uuid == UUID("858ca429-fd78-4c98-8bef-0be5f3738d29"), "Died on .volumes[121].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[121].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[121].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[121].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[121].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[121].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[121].volume_pairs[0].remote_replication.state"
    assert result.volumes[121].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[121].volume_pairs[0].remote_replication.mode"
    assert result.volumes[121].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[121].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[121].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[121].volume_pairs[0].cluster_pair_id"
    assert result.volumes[121].volume_pairs[0].remote_volume_id == 1122, "Died on +.volumes[121].volume_pairs[0].remote_volume_id"
    assert result.volumes[121].volume_pairs[0].remote_volume_name == """snap-target-122""", "Died on +.volumes[121].volume_pairs[0].remote_volume_name"
    assert result.volumes[121].volume_pairs[0].remote_slice_id == 1122, "Died on +.volumes[121].volume_pairs[0].remote_slice_id"
    assert result.volumes[121].account_id == 4, "Died on +.volumes[121].account_id"
    assert result.volumes[121].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[121].create_time"
    assert result.volumes[121].virtual_volume_id is None, "Died on .volumes[121].virtual_volume_id"
    assert result.volumes[120].status == """active""", "Died on +.volumes[120].status"
    assert result.volumes[120].enable512e == False, "Died on +.volumes[120].enable512e"
    assert result.volumes[120].qos.burst_iops == 15000, "Died on +.volumes[120].qos.burst_iops"
    assert result.volumes[120].qos.burst_time == 60, "Died on +.volumes[120].qos.burst_time"
    assert result.volumes[120].qos.min_iops == 100, "Died on +.volumes[120].qos.min_iops"
    assert result.volumes[120].qos.max_iops == 15000, "Died on +.volumes[120].qos.max_iops"
    assert result.volumes[120].name == """snapshots-source-121""", "Died on +.volumes[120].name"
    assert result.volumes[120].volume_access_groups[0] == 4, "Died on +.volumes[120].volume_access_groups[0]"
    assert result.volumes[120].scsi_naadevice_id == """6f47acc1000000006d6964340000026d""", "Died on +.volumes[120].scsi_naadevice_id"
    assert result.volumes[120].total_size == 5000658944, "Died on +.volumes[120].total_size"
    assert result.volumes[120].block_size == 4096, "Died on +.volumes[120].block_size"
    assert result.volumes[120].scsi_euidevice_id == """6d6964340000026df47acc0100000000""", "Died on +.volumes[120].scsi_euidevice_id"
    assert result.volumes[120].volume_id == 621, "Died on +.volumes[120].volume_id"
    assert result.volumes[120].access == """readWrite""", "Died on +.volumes[120].access"
    assert result.volumes[120].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-121.621""", "Died on +.volumes[120].iqn"
    assert result.volumes[120].slice_count == 1, "Died on +.volumes[120].slice_count"
    assert type(result.volumes[120].attributes) is dict, "Died on .volumes[120].attributes"
    assert result.volumes[120].volume_pairs[0].volume_pair_uuid == UUID("ac5e8092-cbfd-4d6f-a008-f646ec064b47"), "Died on .volumes[120].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[120].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[120].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[120].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[120].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[120].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[120].volume_pairs[0].remote_replication.state"
    assert result.volumes[120].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[120].volume_pairs[0].remote_replication.mode"
    assert result.volumes[120].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[120].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[120].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[120].volume_pairs[0].cluster_pair_id"
    assert result.volumes[120].volume_pairs[0].remote_volume_id == 1121, "Died on +.volumes[120].volume_pairs[0].remote_volume_id"
    assert result.volumes[120].volume_pairs[0].remote_volume_name == """snap-target-121""", "Died on +.volumes[120].volume_pairs[0].remote_volume_name"
    assert result.volumes[120].volume_pairs[0].remote_slice_id == 1121, "Died on +.volumes[120].volume_pairs[0].remote_slice_id"
    assert result.volumes[120].account_id == 4, "Died on +.volumes[120].account_id"
    assert result.volumes[120].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[120].create_time"
    assert result.volumes[120].virtual_volume_id is None, "Died on .volumes[120].virtual_volume_id"
    assert result.volumes[119].status == """active""", "Died on +.volumes[119].status"
    assert result.volumes[119].enable512e == False, "Died on +.volumes[119].enable512e"
    assert result.volumes[119].qos.burst_iops == 15000, "Died on +.volumes[119].qos.burst_iops"
    assert result.volumes[119].qos.burst_time == 60, "Died on +.volumes[119].qos.burst_time"
    assert result.volumes[119].qos.min_iops == 100, "Died on +.volumes[119].qos.min_iops"
    assert result.volumes[119].qos.max_iops == 15000, "Died on +.volumes[119].qos.max_iops"
    assert result.volumes[119].name == """snapshots-source-120""", "Died on +.volumes[119].name"
    assert result.volumes[119].volume_access_groups[0] == 4, "Died on +.volumes[119].volume_access_groups[0]"
    assert result.volumes[119].scsi_naadevice_id == """6f47acc1000000006d6964340000026c""", "Died on +.volumes[119].scsi_naadevice_id"
    assert result.volumes[119].total_size == 5000658944, "Died on +.volumes[119].total_size"
    assert result.volumes[119].block_size == 4096, "Died on +.volumes[119].block_size"
    assert result.volumes[119].scsi_euidevice_id == """6d6964340000026cf47acc0100000000""", "Died on +.volumes[119].scsi_euidevice_id"
    assert result.volumes[119].volume_id == 620, "Died on +.volumes[119].volume_id"
    assert result.volumes[119].access == """readWrite""", "Died on +.volumes[119].access"
    assert result.volumes[119].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-120.620""", "Died on +.volumes[119].iqn"
    assert result.volumes[119].slice_count == 1, "Died on +.volumes[119].slice_count"
    assert type(result.volumes[119].attributes) is dict, "Died on .volumes[119].attributes"
    assert result.volumes[119].volume_pairs[0].volume_pair_uuid == UUID("a7094537-21b4-454b-92a5-2596f4f3a66a"), "Died on .volumes[119].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[119].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[119].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[119].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[119].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[119].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[119].volume_pairs[0].remote_replication.state"
    assert result.volumes[119].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[119].volume_pairs[0].remote_replication.mode"
    assert result.volumes[119].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[119].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[119].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[119].volume_pairs[0].cluster_pair_id"
    assert result.volumes[119].volume_pairs[0].remote_volume_id == 1120, "Died on +.volumes[119].volume_pairs[0].remote_volume_id"
    assert result.volumes[119].volume_pairs[0].remote_volume_name == """snap-target-120""", "Died on +.volumes[119].volume_pairs[0].remote_volume_name"
    assert result.volumes[119].volume_pairs[0].remote_slice_id == 1120, "Died on +.volumes[119].volume_pairs[0].remote_slice_id"
    assert result.volumes[119].account_id == 4, "Died on +.volumes[119].account_id"
    assert result.volumes[119].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[119].create_time"
    assert result.volumes[119].virtual_volume_id is None, "Died on .volumes[119].virtual_volume_id"
    assert result.volumes[118].status == """active""", "Died on +.volumes[118].status"
    assert result.volumes[118].enable512e == False, "Died on +.volumes[118].enable512e"
    assert result.volumes[118].qos.burst_iops == 15000, "Died on +.volumes[118].qos.burst_iops"
    assert result.volumes[118].qos.burst_time == 60, "Died on +.volumes[118].qos.burst_time"
    assert result.volumes[118].qos.min_iops == 100, "Died on +.volumes[118].qos.min_iops"
    assert result.volumes[118].qos.max_iops == 15000, "Died on +.volumes[118].qos.max_iops"
    assert result.volumes[118].name == """snapshots-source-119""", "Died on +.volumes[118].name"
    assert result.volumes[118].volume_access_groups[0] == 4, "Died on +.volumes[118].volume_access_groups[0]"
    assert result.volumes[118].scsi_naadevice_id == """6f47acc1000000006d6964340000026b""", "Died on +.volumes[118].scsi_naadevice_id"
    assert result.volumes[118].total_size == 5000658944, "Died on +.volumes[118].total_size"
    assert result.volumes[118].block_size == 4096, "Died on +.volumes[118].block_size"
    assert result.volumes[118].scsi_euidevice_id == """6d6964340000026bf47acc0100000000""", "Died on +.volumes[118].scsi_euidevice_id"
    assert result.volumes[118].volume_id == 619, "Died on +.volumes[118].volume_id"
    assert result.volumes[118].access == """readWrite""", "Died on +.volumes[118].access"
    assert result.volumes[118].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-119.619""", "Died on +.volumes[118].iqn"
    assert result.volumes[118].slice_count == 1, "Died on +.volumes[118].slice_count"
    assert type(result.volumes[118].attributes) is dict, "Died on .volumes[118].attributes"
    assert result.volumes[118].volume_pairs[0].volume_pair_uuid == UUID("47c9d074-ee97-4ebf-b5d1-3746c083550d"), "Died on .volumes[118].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[118].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[118].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[118].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[118].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[118].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[118].volume_pairs[0].remote_replication.state"
    assert result.volumes[118].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[118].volume_pairs[0].remote_replication.mode"
    assert result.volumes[118].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[118].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[118].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[118].volume_pairs[0].cluster_pair_id"
    assert result.volumes[118].volume_pairs[0].remote_volume_id == 1119, "Died on +.volumes[118].volume_pairs[0].remote_volume_id"
    assert result.volumes[118].volume_pairs[0].remote_volume_name == """snap-target-119""", "Died on +.volumes[118].volume_pairs[0].remote_volume_name"
    assert result.volumes[118].volume_pairs[0].remote_slice_id == 1119, "Died on +.volumes[118].volume_pairs[0].remote_slice_id"
    assert result.volumes[118].account_id == 4, "Died on +.volumes[118].account_id"
    assert result.volumes[118].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[118].create_time"
    assert result.volumes[118].virtual_volume_id is None, "Died on .volumes[118].virtual_volume_id"
    assert result.volumes[117].status == """active""", "Died on +.volumes[117].status"
    assert result.volumes[117].enable512e == False, "Died on +.volumes[117].enable512e"
    assert result.volumes[117].qos.burst_iops == 15000, "Died on +.volumes[117].qos.burst_iops"
    assert result.volumes[117].qos.burst_time == 60, "Died on +.volumes[117].qos.burst_time"
    assert result.volumes[117].qos.min_iops == 100, "Died on +.volumes[117].qos.min_iops"
    assert result.volumes[117].qos.max_iops == 15000, "Died on +.volumes[117].qos.max_iops"
    assert result.volumes[117].name == """snapshots-source-118""", "Died on +.volumes[117].name"
    assert result.volumes[117].volume_access_groups[0] == 4, "Died on +.volumes[117].volume_access_groups[0]"
    assert result.volumes[117].scsi_naadevice_id == """6f47acc1000000006d6964340000026a""", "Died on +.volumes[117].scsi_naadevice_id"
    assert result.volumes[117].total_size == 5000658944, "Died on +.volumes[117].total_size"
    assert result.volumes[117].block_size == 4096, "Died on +.volumes[117].block_size"
    assert result.volumes[117].scsi_euidevice_id == """6d6964340000026af47acc0100000000""", "Died on +.volumes[117].scsi_euidevice_id"
    assert result.volumes[117].volume_id == 618, "Died on +.volumes[117].volume_id"
    assert result.volumes[117].access == """readWrite""", "Died on +.volumes[117].access"
    assert result.volumes[117].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-118.618""", "Died on +.volumes[117].iqn"
    assert result.volumes[117].slice_count == 1, "Died on +.volumes[117].slice_count"
    assert type(result.volumes[117].attributes) is dict, "Died on .volumes[117].attributes"
    assert result.volumes[117].volume_pairs[0].volume_pair_uuid == UUID("8e20834f-a305-407b-92ed-da86ab99afb5"), "Died on .volumes[117].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[117].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[117].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[117].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[117].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[117].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[117].volume_pairs[0].remote_replication.state"
    assert result.volumes[117].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[117].volume_pairs[0].remote_replication.mode"
    assert result.volumes[117].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[117].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[117].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[117].volume_pairs[0].cluster_pair_id"
    assert result.volumes[117].volume_pairs[0].remote_volume_id == 1118, "Died on +.volumes[117].volume_pairs[0].remote_volume_id"
    assert result.volumes[117].volume_pairs[0].remote_volume_name == """snap-target-118""", "Died on +.volumes[117].volume_pairs[0].remote_volume_name"
    assert result.volumes[117].volume_pairs[0].remote_slice_id == 1118, "Died on +.volumes[117].volume_pairs[0].remote_slice_id"
    assert result.volumes[117].account_id == 4, "Died on +.volumes[117].account_id"
    assert result.volumes[117].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[117].create_time"
    assert result.volumes[117].virtual_volume_id is None, "Died on .volumes[117].virtual_volume_id"
    assert result.volumes[116].status == """active""", "Died on +.volumes[116].status"
    assert result.volumes[116].enable512e == False, "Died on +.volumes[116].enable512e"
    assert result.volumes[116].qos.burst_iops == 15000, "Died on +.volumes[116].qos.burst_iops"
    assert result.volumes[116].qos.burst_time == 60, "Died on +.volumes[116].qos.burst_time"
    assert result.volumes[116].qos.min_iops == 100, "Died on +.volumes[116].qos.min_iops"
    assert result.volumes[116].qos.max_iops == 15000, "Died on +.volumes[116].qos.max_iops"
    assert result.volumes[116].name == """snapshots-source-117""", "Died on +.volumes[116].name"
    assert result.volumes[116].volume_access_groups[0] == 4, "Died on +.volumes[116].volume_access_groups[0]"
    assert result.volumes[116].scsi_naadevice_id == """6f47acc1000000006d69643400000269""", "Died on +.volumes[116].scsi_naadevice_id"
    assert result.volumes[116].total_size == 5000658944, "Died on +.volumes[116].total_size"
    assert result.volumes[116].block_size == 4096, "Died on +.volumes[116].block_size"
    assert result.volumes[116].scsi_euidevice_id == """6d69643400000269f47acc0100000000""", "Died on +.volumes[116].scsi_euidevice_id"
    assert result.volumes[116].volume_id == 617, "Died on +.volumes[116].volume_id"
    assert result.volumes[116].access == """readWrite""", "Died on +.volumes[116].access"
    assert result.volumes[116].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-117.617""", "Died on +.volumes[116].iqn"
    assert result.volumes[116].slice_count == 1, "Died on +.volumes[116].slice_count"
    assert type(result.volumes[116].attributes) is dict, "Died on .volumes[116].attributes"
    assert result.volumes[116].volume_pairs[0].volume_pair_uuid == UUID("4b9d217d-f20f-4779-8fbc-69b58a38fc91"), "Died on .volumes[116].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[116].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[116].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[116].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[116].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[116].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[116].volume_pairs[0].remote_replication.state"
    assert result.volumes[116].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[116].volume_pairs[0].remote_replication.mode"
    assert result.volumes[116].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[116].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[116].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[116].volume_pairs[0].cluster_pair_id"
    assert result.volumes[116].volume_pairs[0].remote_volume_id == 1117, "Died on +.volumes[116].volume_pairs[0].remote_volume_id"
    assert result.volumes[116].volume_pairs[0].remote_volume_name == """snap-target-117""", "Died on +.volumes[116].volume_pairs[0].remote_volume_name"
    assert result.volumes[116].volume_pairs[0].remote_slice_id == 1117, "Died on +.volumes[116].volume_pairs[0].remote_slice_id"
    assert result.volumes[116].account_id == 4, "Died on +.volumes[116].account_id"
    assert result.volumes[116].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[116].create_time"
    assert result.volumes[116].virtual_volume_id is None, "Died on .volumes[116].virtual_volume_id"
    assert result.volumes[115].status == """active""", "Died on +.volumes[115].status"
    assert result.volumes[115].enable512e == False, "Died on +.volumes[115].enable512e"
    assert result.volumes[115].qos.burst_iops == 15000, "Died on +.volumes[115].qos.burst_iops"
    assert result.volumes[115].qos.burst_time == 60, "Died on +.volumes[115].qos.burst_time"
    assert result.volumes[115].qos.min_iops == 100, "Died on +.volumes[115].qos.min_iops"
    assert result.volumes[115].qos.max_iops == 15000, "Died on +.volumes[115].qos.max_iops"
    assert result.volumes[115].name == """snapshots-source-116""", "Died on +.volumes[115].name"
    assert result.volumes[115].volume_access_groups[0] == 4, "Died on +.volumes[115].volume_access_groups[0]"
    assert result.volumes[115].scsi_naadevice_id == """6f47acc1000000006d69643400000268""", "Died on +.volumes[115].scsi_naadevice_id"
    assert result.volumes[115].total_size == 5000658944, "Died on +.volumes[115].total_size"
    assert result.volumes[115].block_size == 4096, "Died on +.volumes[115].block_size"
    assert result.volumes[115].scsi_euidevice_id == """6d69643400000268f47acc0100000000""", "Died on +.volumes[115].scsi_euidevice_id"
    assert result.volumes[115].volume_id == 616, "Died on +.volumes[115].volume_id"
    assert result.volumes[115].access == """readWrite""", "Died on +.volumes[115].access"
    assert result.volumes[115].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-116.616""", "Died on +.volumes[115].iqn"
    assert result.volumes[115].slice_count == 1, "Died on +.volumes[115].slice_count"
    assert type(result.volumes[115].attributes) is dict, "Died on .volumes[115].attributes"
    assert result.volumes[115].volume_pairs[0].volume_pair_uuid == UUID("3f3d2737-8576-48d6-8312-8a41329f3ac9"), "Died on .volumes[115].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[115].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[115].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[115].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[115].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[115].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[115].volume_pairs[0].remote_replication.state"
    assert result.volumes[115].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[115].volume_pairs[0].remote_replication.mode"
    assert result.volumes[115].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[115].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[115].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[115].volume_pairs[0].cluster_pair_id"
    assert result.volumes[115].volume_pairs[0].remote_volume_id == 1116, "Died on +.volumes[115].volume_pairs[0].remote_volume_id"
    assert result.volumes[115].volume_pairs[0].remote_volume_name == """snap-target-116""", "Died on +.volumes[115].volume_pairs[0].remote_volume_name"
    assert result.volumes[115].volume_pairs[0].remote_slice_id == 1116, "Died on +.volumes[115].volume_pairs[0].remote_slice_id"
    assert result.volumes[115].account_id == 4, "Died on +.volumes[115].account_id"
    assert result.volumes[115].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[115].create_time"
    assert result.volumes[115].virtual_volume_id is None, "Died on .volumes[115].virtual_volume_id"
    assert result.volumes[114].status == """active""", "Died on +.volumes[114].status"
    assert result.volumes[114].enable512e == False, "Died on +.volumes[114].enable512e"
    assert result.volumes[114].qos.burst_iops == 15000, "Died on +.volumes[114].qos.burst_iops"
    assert result.volumes[114].qos.burst_time == 60, "Died on +.volumes[114].qos.burst_time"
    assert result.volumes[114].qos.min_iops == 100, "Died on +.volumes[114].qos.min_iops"
    assert result.volumes[114].qos.max_iops == 15000, "Died on +.volumes[114].qos.max_iops"
    assert result.volumes[114].name == """snapshots-source-115""", "Died on +.volumes[114].name"
    assert result.volumes[114].volume_access_groups[0] == 4, "Died on +.volumes[114].volume_access_groups[0]"
    assert result.volumes[114].scsi_naadevice_id == """6f47acc1000000006d69643400000267""", "Died on +.volumes[114].scsi_naadevice_id"
    assert result.volumes[114].total_size == 5000658944, "Died on +.volumes[114].total_size"
    assert result.volumes[114].block_size == 4096, "Died on +.volumes[114].block_size"
    assert result.volumes[114].scsi_euidevice_id == """6d69643400000267f47acc0100000000""", "Died on +.volumes[114].scsi_euidevice_id"
    assert result.volumes[114].volume_id == 615, "Died on +.volumes[114].volume_id"
    assert result.volumes[114].access == """readWrite""", "Died on +.volumes[114].access"
    assert result.volumes[114].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-115.615""", "Died on +.volumes[114].iqn"
    assert result.volumes[114].slice_count == 1, "Died on +.volumes[114].slice_count"
    assert type(result.volumes[114].attributes) is dict, "Died on .volumes[114].attributes"
    assert result.volumes[114].volume_pairs[0].volume_pair_uuid == UUID("1990f3dd-79cb-4058-9ca6-3de33d6c9c96"), "Died on .volumes[114].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[114].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[114].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[114].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[114].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[114].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[114].volume_pairs[0].remote_replication.state"
    assert result.volumes[114].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[114].volume_pairs[0].remote_replication.mode"
    assert result.volumes[114].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[114].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[114].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[114].volume_pairs[0].cluster_pair_id"
    assert result.volumes[114].volume_pairs[0].remote_volume_id == 1115, "Died on +.volumes[114].volume_pairs[0].remote_volume_id"
    assert result.volumes[114].volume_pairs[0].remote_volume_name == """snap-target-115""", "Died on +.volumes[114].volume_pairs[0].remote_volume_name"
    assert result.volumes[114].volume_pairs[0].remote_slice_id == 1115, "Died on +.volumes[114].volume_pairs[0].remote_slice_id"
    assert result.volumes[114].account_id == 4, "Died on +.volumes[114].account_id"
    assert result.volumes[114].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[114].create_time"
    assert result.volumes[114].virtual_volume_id is None, "Died on .volumes[114].virtual_volume_id"
    assert result.volumes[113].status == """active""", "Died on +.volumes[113].status"
    assert result.volumes[113].enable512e == False, "Died on +.volumes[113].enable512e"
    assert result.volumes[113].qos.burst_iops == 15000, "Died on +.volumes[113].qos.burst_iops"
    assert result.volumes[113].qos.burst_time == 60, "Died on +.volumes[113].qos.burst_time"
    assert result.volumes[113].qos.min_iops == 100, "Died on +.volumes[113].qos.min_iops"
    assert result.volumes[113].qos.max_iops == 15000, "Died on +.volumes[113].qos.max_iops"
    assert result.volumes[113].name == """snapshots-source-114""", "Died on +.volumes[113].name"
    assert result.volumes[113].volume_access_groups[0] == 4, "Died on +.volumes[113].volume_access_groups[0]"
    assert result.volumes[113].scsi_naadevice_id == """6f47acc1000000006d69643400000266""", "Died on +.volumes[113].scsi_naadevice_id"
    assert result.volumes[113].total_size == 5000658944, "Died on +.volumes[113].total_size"
    assert result.volumes[113].block_size == 4096, "Died on +.volumes[113].block_size"
    assert result.volumes[113].scsi_euidevice_id == """6d69643400000266f47acc0100000000""", "Died on +.volumes[113].scsi_euidevice_id"
    assert result.volumes[113].volume_id == 614, "Died on +.volumes[113].volume_id"
    assert result.volumes[113].access == """readWrite""", "Died on +.volumes[113].access"
    assert result.volumes[113].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-114.614""", "Died on +.volumes[113].iqn"
    assert result.volumes[113].slice_count == 1, "Died on +.volumes[113].slice_count"
    assert type(result.volumes[113].attributes) is dict, "Died on .volumes[113].attributes"
    assert result.volumes[113].volume_pairs[0].volume_pair_uuid == UUID("a8c2b30b-a838-4435-8e9a-5ca5389255a1"), "Died on .volumes[113].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[113].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[113].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[113].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[113].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[113].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[113].volume_pairs[0].remote_replication.state"
    assert result.volumes[113].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[113].volume_pairs[0].remote_replication.mode"
    assert result.volumes[113].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[113].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[113].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[113].volume_pairs[0].cluster_pair_id"
    assert result.volumes[113].volume_pairs[0].remote_volume_id == 1114, "Died on +.volumes[113].volume_pairs[0].remote_volume_id"
    assert result.volumes[113].volume_pairs[0].remote_volume_name == """snap-target-114""", "Died on +.volumes[113].volume_pairs[0].remote_volume_name"
    assert result.volumes[113].volume_pairs[0].remote_slice_id == 1114, "Died on +.volumes[113].volume_pairs[0].remote_slice_id"
    assert result.volumes[113].account_id == 4, "Died on +.volumes[113].account_id"
    assert result.volumes[113].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[113].create_time"
    assert result.volumes[113].virtual_volume_id is None, "Died on .volumes[113].virtual_volume_id"
    assert result.volumes[112].status == """active""", "Died on +.volumes[112].status"
    assert result.volumes[112].enable512e == False, "Died on +.volumes[112].enable512e"
    assert result.volumes[112].qos.burst_iops == 15000, "Died on +.volumes[112].qos.burst_iops"
    assert result.volumes[112].qos.burst_time == 60, "Died on +.volumes[112].qos.burst_time"
    assert result.volumes[112].qos.min_iops == 100, "Died on +.volumes[112].qos.min_iops"
    assert result.volumes[112].qos.max_iops == 15000, "Died on +.volumes[112].qos.max_iops"
    assert result.volumes[112].name == """snapshots-source-113""", "Died on +.volumes[112].name"
    assert result.volumes[112].volume_access_groups[0] == 4, "Died on +.volumes[112].volume_access_groups[0]"
    assert result.volumes[112].scsi_naadevice_id == """6f47acc1000000006d69643400000265""", "Died on +.volumes[112].scsi_naadevice_id"
    assert result.volumes[112].total_size == 5000658944, "Died on +.volumes[112].total_size"
    assert result.volumes[112].block_size == 4096, "Died on +.volumes[112].block_size"
    assert result.volumes[112].scsi_euidevice_id == """6d69643400000265f47acc0100000000""", "Died on +.volumes[112].scsi_euidevice_id"
    assert result.volumes[112].volume_id == 613, "Died on +.volumes[112].volume_id"
    assert result.volumes[112].access == """readWrite""", "Died on +.volumes[112].access"
    assert result.volumes[112].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-113.613""", "Died on +.volumes[112].iqn"
    assert result.volumes[112].slice_count == 1, "Died on +.volumes[112].slice_count"
    assert type(result.volumes[112].attributes) is dict, "Died on .volumes[112].attributes"
    assert result.volumes[112].volume_pairs[0].volume_pair_uuid == UUID("4d8a596b-07ad-4019-ba1e-5d1ff22e4526"), "Died on .volumes[112].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[112].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[112].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[112].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[112].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[112].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[112].volume_pairs[0].remote_replication.state"
    assert result.volumes[112].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[112].volume_pairs[0].remote_replication.mode"
    assert result.volumes[112].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[112].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[112].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[112].volume_pairs[0].cluster_pair_id"
    assert result.volumes[112].volume_pairs[0].remote_volume_id == 1113, "Died on +.volumes[112].volume_pairs[0].remote_volume_id"
    assert result.volumes[112].volume_pairs[0].remote_volume_name == """snap-target-113""", "Died on +.volumes[112].volume_pairs[0].remote_volume_name"
    assert result.volumes[112].volume_pairs[0].remote_slice_id == 1113, "Died on +.volumes[112].volume_pairs[0].remote_slice_id"
    assert result.volumes[112].account_id == 4, "Died on +.volumes[112].account_id"
    assert result.volumes[112].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[112].create_time"
    assert result.volumes[112].virtual_volume_id is None, "Died on .volumes[112].virtual_volume_id"
    assert result.volumes[111].status == """active""", "Died on +.volumes[111].status"
    assert result.volumes[111].enable512e == False, "Died on +.volumes[111].enable512e"
    assert result.volumes[111].qos.burst_iops == 15000, "Died on +.volumes[111].qos.burst_iops"
    assert result.volumes[111].qos.burst_time == 60, "Died on +.volumes[111].qos.burst_time"
    assert result.volumes[111].qos.min_iops == 100, "Died on +.volumes[111].qos.min_iops"
    assert result.volumes[111].qos.max_iops == 15000, "Died on +.volumes[111].qos.max_iops"
    assert result.volumes[111].name == """snapshots-source-112""", "Died on +.volumes[111].name"
    assert result.volumes[111].volume_access_groups[0] == 4, "Died on +.volumes[111].volume_access_groups[0]"
    assert result.volumes[111].scsi_naadevice_id == """6f47acc1000000006d69643400000264""", "Died on +.volumes[111].scsi_naadevice_id"
    assert result.volumes[111].total_size == 5000658944, "Died on +.volumes[111].total_size"
    assert result.volumes[111].block_size == 4096, "Died on +.volumes[111].block_size"
    assert result.volumes[111].scsi_euidevice_id == """6d69643400000264f47acc0100000000""", "Died on +.volumes[111].scsi_euidevice_id"
    assert result.volumes[111].volume_id == 612, "Died on +.volumes[111].volume_id"
    assert result.volumes[111].access == """readWrite""", "Died on +.volumes[111].access"
    assert result.volumes[111].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-112.612""", "Died on +.volumes[111].iqn"
    assert result.volumes[111].slice_count == 1, "Died on +.volumes[111].slice_count"
    assert type(result.volumes[111].attributes) is dict, "Died on .volumes[111].attributes"
    assert result.volumes[111].volume_pairs[0].volume_pair_uuid == UUID("bab625dd-5c45-476d-8334-3a30392dc1dc"), "Died on .volumes[111].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[111].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[111].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[111].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[111].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[111].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[111].volume_pairs[0].remote_replication.state"
    assert result.volumes[111].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[111].volume_pairs[0].remote_replication.mode"
    assert result.volumes[111].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[111].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[111].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[111].volume_pairs[0].cluster_pair_id"
    assert result.volumes[111].volume_pairs[0].remote_volume_id == 1112, "Died on +.volumes[111].volume_pairs[0].remote_volume_id"
    assert result.volumes[111].volume_pairs[0].remote_volume_name == """snap-target-112""", "Died on +.volumes[111].volume_pairs[0].remote_volume_name"
    assert result.volumes[111].volume_pairs[0].remote_slice_id == 1112, "Died on +.volumes[111].volume_pairs[0].remote_slice_id"
    assert result.volumes[111].account_id == 4, "Died on +.volumes[111].account_id"
    assert result.volumes[111].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[111].create_time"
    assert result.volumes[111].virtual_volume_id is None, "Died on .volumes[111].virtual_volume_id"
    assert result.volumes[110].status == """active""", "Died on +.volumes[110].status"
    assert result.volumes[110].enable512e == False, "Died on +.volumes[110].enable512e"
    assert result.volumes[110].qos.burst_iops == 15000, "Died on +.volumes[110].qos.burst_iops"
    assert result.volumes[110].qos.burst_time == 60, "Died on +.volumes[110].qos.burst_time"
    assert result.volumes[110].qos.min_iops == 100, "Died on +.volumes[110].qos.min_iops"
    assert result.volumes[110].qos.max_iops == 15000, "Died on +.volumes[110].qos.max_iops"
    assert result.volumes[110].name == """snapshots-source-111""", "Died on +.volumes[110].name"
    assert result.volumes[110].volume_access_groups[0] == 4, "Died on +.volumes[110].volume_access_groups[0]"
    assert result.volumes[110].scsi_naadevice_id == """6f47acc1000000006d69643400000263""", "Died on +.volumes[110].scsi_naadevice_id"
    assert result.volumes[110].total_size == 5000658944, "Died on +.volumes[110].total_size"
    assert result.volumes[110].block_size == 4096, "Died on +.volumes[110].block_size"
    assert result.volumes[110].scsi_euidevice_id == """6d69643400000263f47acc0100000000""", "Died on +.volumes[110].scsi_euidevice_id"
    assert result.volumes[110].volume_id == 611, "Died on +.volumes[110].volume_id"
    assert result.volumes[110].access == """readWrite""", "Died on +.volumes[110].access"
    assert result.volumes[110].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-111.611""", "Died on +.volumes[110].iqn"
    assert result.volumes[110].slice_count == 1, "Died on +.volumes[110].slice_count"
    assert type(result.volumes[110].attributes) is dict, "Died on .volumes[110].attributes"
    assert result.volumes[110].volume_pairs[0].volume_pair_uuid == UUID("2d77371f-fd8a-4229-8f81-ec2d0676d32b"), "Died on .volumes[110].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[110].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[110].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[110].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[110].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[110].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[110].volume_pairs[0].remote_replication.state"
    assert result.volumes[110].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[110].volume_pairs[0].remote_replication.mode"
    assert result.volumes[110].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[110].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[110].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[110].volume_pairs[0].cluster_pair_id"
    assert result.volumes[110].volume_pairs[0].remote_volume_id == 1111, "Died on +.volumes[110].volume_pairs[0].remote_volume_id"
    assert result.volumes[110].volume_pairs[0].remote_volume_name == """snap-target-111""", "Died on +.volumes[110].volume_pairs[0].remote_volume_name"
    assert result.volumes[110].volume_pairs[0].remote_slice_id == 1111, "Died on +.volumes[110].volume_pairs[0].remote_slice_id"
    assert result.volumes[110].account_id == 4, "Died on +.volumes[110].account_id"
    assert result.volumes[110].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[110].create_time"
    assert result.volumes[110].virtual_volume_id is None, "Died on .volumes[110].virtual_volume_id"
    assert result.volumes[109].status == """active""", "Died on +.volumes[109].status"
    assert result.volumes[109].enable512e == False, "Died on +.volumes[109].enable512e"
    assert result.volumes[109].qos.burst_iops == 15000, "Died on +.volumes[109].qos.burst_iops"
    assert result.volumes[109].qos.burst_time == 60, "Died on +.volumes[109].qos.burst_time"
    assert result.volumes[109].qos.min_iops == 100, "Died on +.volumes[109].qos.min_iops"
    assert result.volumes[109].qos.max_iops == 15000, "Died on +.volumes[109].qos.max_iops"
    assert result.volumes[109].name == """snapshots-source-110""", "Died on +.volumes[109].name"
    assert result.volumes[109].volume_access_groups[0] == 4, "Died on +.volumes[109].volume_access_groups[0]"
    assert result.volumes[109].scsi_naadevice_id == """6f47acc1000000006d69643400000262""", "Died on +.volumes[109].scsi_naadevice_id"
    assert result.volumes[109].total_size == 5000658944, "Died on +.volumes[109].total_size"
    assert result.volumes[109].block_size == 4096, "Died on +.volumes[109].block_size"
    assert result.volumes[109].scsi_euidevice_id == """6d69643400000262f47acc0100000000""", "Died on +.volumes[109].scsi_euidevice_id"
    assert result.volumes[109].volume_id == 610, "Died on +.volumes[109].volume_id"
    assert result.volumes[109].access == """readWrite""", "Died on +.volumes[109].access"
    assert result.volumes[109].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-110.610""", "Died on +.volumes[109].iqn"
    assert result.volumes[109].slice_count == 1, "Died on +.volumes[109].slice_count"
    assert type(result.volumes[109].attributes) is dict, "Died on .volumes[109].attributes"
    assert result.volumes[109].volume_pairs[0].volume_pair_uuid == UUID("2e1c4231-9c38-424c-b6b3-289278ee7b60"), "Died on .volumes[109].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[109].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[109].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[109].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[109].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[109].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[109].volume_pairs[0].remote_replication.state"
    assert result.volumes[109].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[109].volume_pairs[0].remote_replication.mode"
    assert result.volumes[109].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[109].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[109].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[109].volume_pairs[0].cluster_pair_id"
    assert result.volumes[109].volume_pairs[0].remote_volume_id == 1110, "Died on +.volumes[109].volume_pairs[0].remote_volume_id"
    assert result.volumes[109].volume_pairs[0].remote_volume_name == """snap-target-110""", "Died on +.volumes[109].volume_pairs[0].remote_volume_name"
    assert result.volumes[109].volume_pairs[0].remote_slice_id == 1110, "Died on +.volumes[109].volume_pairs[0].remote_slice_id"
    assert result.volumes[109].account_id == 4, "Died on +.volumes[109].account_id"
    assert result.volumes[109].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[109].create_time"
    assert result.volumes[109].virtual_volume_id is None, "Died on .volumes[109].virtual_volume_id"
    assert result.volumes[108].status == """active""", "Died on +.volumes[108].status"
    assert result.volumes[108].enable512e == False, "Died on +.volumes[108].enable512e"
    assert result.volumes[108].qos.burst_iops == 15000, "Died on +.volumes[108].qos.burst_iops"
    assert result.volumes[108].qos.burst_time == 60, "Died on +.volumes[108].qos.burst_time"
    assert result.volumes[108].qos.min_iops == 100, "Died on +.volumes[108].qos.min_iops"
    assert result.volumes[108].qos.max_iops == 15000, "Died on +.volumes[108].qos.max_iops"
    assert result.volumes[108].name == """snapshots-source-109""", "Died on +.volumes[108].name"
    assert result.volumes[108].volume_access_groups[0] == 4, "Died on +.volumes[108].volume_access_groups[0]"
    assert result.volumes[108].scsi_naadevice_id == """6f47acc1000000006d69643400000261""", "Died on +.volumes[108].scsi_naadevice_id"
    assert result.volumes[108].total_size == 5000658944, "Died on +.volumes[108].total_size"
    assert result.volumes[108].block_size == 4096, "Died on +.volumes[108].block_size"
    assert result.volumes[108].scsi_euidevice_id == """6d69643400000261f47acc0100000000""", "Died on +.volumes[108].scsi_euidevice_id"
    assert result.volumes[108].volume_id == 609, "Died on +.volumes[108].volume_id"
    assert result.volumes[108].access == """readWrite""", "Died on +.volumes[108].access"
    assert result.volumes[108].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-109.609""", "Died on +.volumes[108].iqn"
    assert result.volumes[108].slice_count == 1, "Died on +.volumes[108].slice_count"
    assert type(result.volumes[108].attributes) is dict, "Died on .volumes[108].attributes"
    assert result.volumes[108].volume_pairs[0].volume_pair_uuid == UUID("72e8760c-56fe-47ae-80fa-485697a4b03e"), "Died on .volumes[108].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[108].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[108].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[108].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[108].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[108].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[108].volume_pairs[0].remote_replication.state"
    assert result.volumes[108].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[108].volume_pairs[0].remote_replication.mode"
    assert result.volumes[108].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[108].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[108].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[108].volume_pairs[0].cluster_pair_id"
    assert result.volumes[108].volume_pairs[0].remote_volume_id == 1109, "Died on +.volumes[108].volume_pairs[0].remote_volume_id"
    assert result.volumes[108].volume_pairs[0].remote_volume_name == """snap-target-109""", "Died on +.volumes[108].volume_pairs[0].remote_volume_name"
    assert result.volumes[108].volume_pairs[0].remote_slice_id == 1109, "Died on +.volumes[108].volume_pairs[0].remote_slice_id"
    assert result.volumes[108].account_id == 4, "Died on +.volumes[108].account_id"
    assert result.volumes[108].create_time == """2016-12-30T18:07:06Z""", "Died on +.volumes[108].create_time"
    assert result.volumes[108].virtual_volume_id is None, "Died on .volumes[108].virtual_volume_id"
    assert result.volumes[107].status == """active""", "Died on +.volumes[107].status"
    assert result.volumes[107].enable512e == False, "Died on +.volumes[107].enable512e"
    assert result.volumes[107].qos.burst_iops == 15000, "Died on +.volumes[107].qos.burst_iops"
    assert result.volumes[107].qos.burst_time == 60, "Died on +.volumes[107].qos.burst_time"
    assert result.volumes[107].qos.min_iops == 100, "Died on +.volumes[107].qos.min_iops"
    assert result.volumes[107].qos.max_iops == 15000, "Died on +.volumes[107].qos.max_iops"
    assert result.volumes[107].name == """snapshots-source-108""", "Died on +.volumes[107].name"
    assert result.volumes[107].volume_access_groups[0] == 4, "Died on +.volumes[107].volume_access_groups[0]"
    assert result.volumes[107].scsi_naadevice_id == """6f47acc1000000006d69643400000260""", "Died on +.volumes[107].scsi_naadevice_id"
    assert result.volumes[107].total_size == 5000658944, "Died on +.volumes[107].total_size"
    assert result.volumes[107].block_size == 4096, "Died on +.volumes[107].block_size"
    assert result.volumes[107].scsi_euidevice_id == """6d69643400000260f47acc0100000000""", "Died on +.volumes[107].scsi_euidevice_id"
    assert result.volumes[107].volume_id == 608, "Died on +.volumes[107].volume_id"
    assert result.volumes[107].access == """readWrite""", "Died on +.volumes[107].access"
    assert result.volumes[107].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-108.608""", "Died on +.volumes[107].iqn"
    assert result.volumes[107].slice_count == 1, "Died on +.volumes[107].slice_count"
    assert type(result.volumes[107].attributes) is dict, "Died on .volumes[107].attributes"
    assert result.volumes[107].volume_pairs[0].volume_pair_uuid == UUID("a46ed6f8-3785-4c26-aae1-20c669db6cc9"), "Died on .volumes[107].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[107].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[107].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[107].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[107].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[107].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[107].volume_pairs[0].remote_replication.state"
    assert result.volumes[107].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[107].volume_pairs[0].remote_replication.mode"
    assert result.volumes[107].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[107].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[107].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[107].volume_pairs[0].cluster_pair_id"
    assert result.volumes[107].volume_pairs[0].remote_volume_id == 1108, "Died on +.volumes[107].volume_pairs[0].remote_volume_id"
    assert result.volumes[107].volume_pairs[0].remote_volume_name == """snap-target-108""", "Died on +.volumes[107].volume_pairs[0].remote_volume_name"
    assert result.volumes[107].volume_pairs[0].remote_slice_id == 1108, "Died on +.volumes[107].volume_pairs[0].remote_slice_id"
    assert result.volumes[107].account_id == 4, "Died on +.volumes[107].account_id"
    assert result.volumes[107].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[107].create_time"
    assert result.volumes[107].virtual_volume_id is None, "Died on .volumes[107].virtual_volume_id"
    assert result.volumes[106].status == """active""", "Died on +.volumes[106].status"
    assert result.volumes[106].enable512e == False, "Died on +.volumes[106].enable512e"
    assert result.volumes[106].qos.burst_iops == 15000, "Died on +.volumes[106].qos.burst_iops"
    assert result.volumes[106].qos.burst_time == 60, "Died on +.volumes[106].qos.burst_time"
    assert result.volumes[106].qos.min_iops == 100, "Died on +.volumes[106].qos.min_iops"
    assert result.volumes[106].qos.max_iops == 15000, "Died on +.volumes[106].qos.max_iops"
    assert result.volumes[106].name == """snapshots-source-107""", "Died on +.volumes[106].name"
    assert result.volumes[106].volume_access_groups[0] == 4, "Died on +.volumes[106].volume_access_groups[0]"
    assert result.volumes[106].scsi_naadevice_id == """6f47acc1000000006d6964340000025f""", "Died on +.volumes[106].scsi_naadevice_id"
    assert result.volumes[106].total_size == 5000658944, "Died on +.volumes[106].total_size"
    assert result.volumes[106].block_size == 4096, "Died on +.volumes[106].block_size"
    assert result.volumes[106].scsi_euidevice_id == """6d6964340000025ff47acc0100000000""", "Died on +.volumes[106].scsi_euidevice_id"
    assert result.volumes[106].volume_id == 607, "Died on +.volumes[106].volume_id"
    assert result.volumes[106].access == """readWrite""", "Died on +.volumes[106].access"
    assert result.volumes[106].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-107.607""", "Died on +.volumes[106].iqn"
    assert result.volumes[106].slice_count == 1, "Died on +.volumes[106].slice_count"
    assert type(result.volumes[106].attributes) is dict, "Died on .volumes[106].attributes"
    assert result.volumes[106].volume_pairs[0].volume_pair_uuid == UUID("bd0f83ce-f1c3-454e-932f-60f829339d6b"), "Died on .volumes[106].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[106].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[106].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[106].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[106].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[106].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[106].volume_pairs[0].remote_replication.state"
    assert result.volumes[106].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[106].volume_pairs[0].remote_replication.mode"
    assert result.volumes[106].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[106].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[106].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[106].volume_pairs[0].cluster_pair_id"
    assert result.volumes[106].volume_pairs[0].remote_volume_id == 1107, "Died on +.volumes[106].volume_pairs[0].remote_volume_id"
    assert result.volumes[106].volume_pairs[0].remote_volume_name == """snap-target-107""", "Died on +.volumes[106].volume_pairs[0].remote_volume_name"
    assert result.volumes[106].volume_pairs[0].remote_slice_id == 1107, "Died on +.volumes[106].volume_pairs[0].remote_slice_id"
    assert result.volumes[106].account_id == 4, "Died on +.volumes[106].account_id"
    assert result.volumes[106].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[106].create_time"
    assert result.volumes[106].virtual_volume_id is None, "Died on .volumes[106].virtual_volume_id"
    assert result.volumes[105].status == """active""", "Died on +.volumes[105].status"
    assert result.volumes[105].enable512e == False, "Died on +.volumes[105].enable512e"
    assert result.volumes[105].qos.burst_iops == 15000, "Died on +.volumes[105].qos.burst_iops"
    assert result.volumes[105].qos.burst_time == 60, "Died on +.volumes[105].qos.burst_time"
    assert result.volumes[105].qos.min_iops == 100, "Died on +.volumes[105].qos.min_iops"
    assert result.volumes[105].qos.max_iops == 15000, "Died on +.volumes[105].qos.max_iops"
    assert result.volumes[105].name == """snapshots-source-106""", "Died on +.volumes[105].name"
    assert result.volumes[105].volume_access_groups[0] == 4, "Died on +.volumes[105].volume_access_groups[0]"
    assert result.volumes[105].scsi_naadevice_id == """6f47acc1000000006d6964340000025e""", "Died on +.volumes[105].scsi_naadevice_id"
    assert result.volumes[105].total_size == 5000658944, "Died on +.volumes[105].total_size"
    assert result.volumes[105].block_size == 4096, "Died on +.volumes[105].block_size"
    assert result.volumes[105].scsi_euidevice_id == """6d6964340000025ef47acc0100000000""", "Died on +.volumes[105].scsi_euidevice_id"
    assert result.volumes[105].volume_id == 606, "Died on +.volumes[105].volume_id"
    assert result.volumes[105].access == """readWrite""", "Died on +.volumes[105].access"
    assert result.volumes[105].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-106.606""", "Died on +.volumes[105].iqn"
    assert result.volumes[105].slice_count == 1, "Died on +.volumes[105].slice_count"
    assert type(result.volumes[105].attributes) is dict, "Died on .volumes[105].attributes"
    assert result.volumes[105].volume_pairs[0].volume_pair_uuid == UUID("f0ba9378-53f7-4fd9-b9bc-d3d2d0a17578"), "Died on .volumes[105].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[105].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[105].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[105].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[105].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[105].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[105].volume_pairs[0].remote_replication.state"
    assert result.volumes[105].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[105].volume_pairs[0].remote_replication.mode"
    assert result.volumes[105].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[105].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[105].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[105].volume_pairs[0].cluster_pair_id"
    assert result.volumes[105].volume_pairs[0].remote_volume_id == 1106, "Died on +.volumes[105].volume_pairs[0].remote_volume_id"
    assert result.volumes[105].volume_pairs[0].remote_volume_name == """snap-target-106""", "Died on +.volumes[105].volume_pairs[0].remote_volume_name"
    assert result.volumes[105].volume_pairs[0].remote_slice_id == 1106, "Died on +.volumes[105].volume_pairs[0].remote_slice_id"
    assert result.volumes[105].account_id == 4, "Died on +.volumes[105].account_id"
    assert result.volumes[105].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[105].create_time"
    assert result.volumes[105].virtual_volume_id is None, "Died on .volumes[105].virtual_volume_id"
    assert result.volumes[104].status == """active""", "Died on +.volumes[104].status"
    assert result.volumes[104].enable512e == False, "Died on +.volumes[104].enable512e"
    assert result.volumes[104].qos.burst_iops == 15000, "Died on +.volumes[104].qos.burst_iops"
    assert result.volumes[104].qos.burst_time == 60, "Died on +.volumes[104].qos.burst_time"
    assert result.volumes[104].qos.min_iops == 100, "Died on +.volumes[104].qos.min_iops"
    assert result.volumes[104].qos.max_iops == 15000, "Died on +.volumes[104].qos.max_iops"
    assert result.volumes[104].name == """snapshots-source-105""", "Died on +.volumes[104].name"
    assert result.volumes[104].volume_access_groups[0] == 4, "Died on +.volumes[104].volume_access_groups[0]"
    assert result.volumes[104].scsi_naadevice_id == """6f47acc1000000006d6964340000025d""", "Died on +.volumes[104].scsi_naadevice_id"
    assert result.volumes[104].total_size == 5000658944, "Died on +.volumes[104].total_size"
    assert result.volumes[104].block_size == 4096, "Died on +.volumes[104].block_size"
    assert result.volumes[104].scsi_euidevice_id == """6d6964340000025df47acc0100000000""", "Died on +.volumes[104].scsi_euidevice_id"
    assert result.volumes[104].volume_id == 605, "Died on +.volumes[104].volume_id"
    assert result.volumes[104].access == """readWrite""", "Died on +.volumes[104].access"
    assert result.volumes[104].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-105.605""", "Died on +.volumes[104].iqn"
    assert result.volumes[104].slice_count == 1, "Died on +.volumes[104].slice_count"
    assert type(result.volumes[104].attributes) is dict, "Died on .volumes[104].attributes"
    assert result.volumes[104].volume_pairs[0].volume_pair_uuid == UUID("d93b7640-e840-4118-8755-f238eca8eab0"), "Died on .volumes[104].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[104].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[104].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[104].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[104].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[104].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[104].volume_pairs[0].remote_replication.state"
    assert result.volumes[104].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[104].volume_pairs[0].remote_replication.mode"
    assert result.volumes[104].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[104].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[104].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[104].volume_pairs[0].cluster_pair_id"
    assert result.volumes[104].volume_pairs[0].remote_volume_id == 1105, "Died on +.volumes[104].volume_pairs[0].remote_volume_id"
    assert result.volumes[104].volume_pairs[0].remote_volume_name == """snap-target-105""", "Died on +.volumes[104].volume_pairs[0].remote_volume_name"
    assert result.volumes[104].volume_pairs[0].remote_slice_id == 1105, "Died on +.volumes[104].volume_pairs[0].remote_slice_id"
    assert result.volumes[104].account_id == 4, "Died on +.volumes[104].account_id"
    assert result.volumes[104].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[104].create_time"
    assert result.volumes[104].virtual_volume_id is None, "Died on .volumes[104].virtual_volume_id"
    assert result.volumes[103].status == """active""", "Died on +.volumes[103].status"
    assert result.volumes[103].enable512e == False, "Died on +.volumes[103].enable512e"
    assert result.volumes[103].qos.burst_iops == 15000, "Died on +.volumes[103].qos.burst_iops"
    assert result.volumes[103].qos.burst_time == 60, "Died on +.volumes[103].qos.burst_time"
    assert result.volumes[103].qos.min_iops == 100, "Died on +.volumes[103].qos.min_iops"
    assert result.volumes[103].qos.max_iops == 15000, "Died on +.volumes[103].qos.max_iops"
    assert result.volumes[103].name == """snapshots-source-104""", "Died on +.volumes[103].name"
    assert result.volumes[103].volume_access_groups[0] == 4, "Died on +.volumes[103].volume_access_groups[0]"
    assert result.volumes[103].scsi_naadevice_id == """6f47acc1000000006d6964340000025c""", "Died on +.volumes[103].scsi_naadevice_id"
    assert result.volumes[103].total_size == 5000658944, "Died on +.volumes[103].total_size"
    assert result.volumes[103].block_size == 4096, "Died on +.volumes[103].block_size"
    assert result.volumes[103].scsi_euidevice_id == """6d6964340000025cf47acc0100000000""", "Died on +.volumes[103].scsi_euidevice_id"
    assert result.volumes[103].volume_id == 604, "Died on +.volumes[103].volume_id"
    assert result.volumes[103].access == """readWrite""", "Died on +.volumes[103].access"
    assert result.volumes[103].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-104.604""", "Died on +.volumes[103].iqn"
    assert result.volumes[103].slice_count == 1, "Died on +.volumes[103].slice_count"
    assert type(result.volumes[103].attributes) is dict, "Died on .volumes[103].attributes"
    assert result.volumes[103].volume_pairs[0].volume_pair_uuid == UUID("21dcb5a2-fc59-4d01-8c95-72f342e1f946"), "Died on .volumes[103].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[103].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[103].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[103].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[103].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[103].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[103].volume_pairs[0].remote_replication.state"
    assert result.volumes[103].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[103].volume_pairs[0].remote_replication.mode"
    assert result.volumes[103].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[103].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[103].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[103].volume_pairs[0].cluster_pair_id"
    assert result.volumes[103].volume_pairs[0].remote_volume_id == 1104, "Died on +.volumes[103].volume_pairs[0].remote_volume_id"
    assert result.volumes[103].volume_pairs[0].remote_volume_name == """snap-target-104""", "Died on +.volumes[103].volume_pairs[0].remote_volume_name"
    assert result.volumes[103].volume_pairs[0].remote_slice_id == 1104, "Died on +.volumes[103].volume_pairs[0].remote_slice_id"
    assert result.volumes[103].account_id == 4, "Died on +.volumes[103].account_id"
    assert result.volumes[103].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[103].create_time"
    assert result.volumes[103].virtual_volume_id is None, "Died on .volumes[103].virtual_volume_id"
    assert result.volumes[102].status == """active""", "Died on +.volumes[102].status"
    assert result.volumes[102].enable512e == False, "Died on +.volumes[102].enable512e"
    assert result.volumes[102].qos.burst_iops == 15000, "Died on +.volumes[102].qos.burst_iops"
    assert result.volumes[102].qos.burst_time == 60, "Died on +.volumes[102].qos.burst_time"
    assert result.volumes[102].qos.min_iops == 100, "Died on +.volumes[102].qos.min_iops"
    assert result.volumes[102].qos.max_iops == 15000, "Died on +.volumes[102].qos.max_iops"
    assert result.volumes[102].name == """snapshots-source-103""", "Died on +.volumes[102].name"
    assert result.volumes[102].volume_access_groups[0] == 4, "Died on +.volumes[102].volume_access_groups[0]"
    assert result.volumes[102].scsi_naadevice_id == """6f47acc1000000006d6964340000025b""", "Died on +.volumes[102].scsi_naadevice_id"
    assert result.volumes[102].total_size == 5000658944, "Died on +.volumes[102].total_size"
    assert result.volumes[102].block_size == 4096, "Died on +.volumes[102].block_size"
    assert result.volumes[102].scsi_euidevice_id == """6d6964340000025bf47acc0100000000""", "Died on +.volumes[102].scsi_euidevice_id"
    assert result.volumes[102].volume_id == 603, "Died on +.volumes[102].volume_id"
    assert result.volumes[102].access == """readWrite""", "Died on +.volumes[102].access"
    assert result.volumes[102].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-103.603""", "Died on +.volumes[102].iqn"
    assert result.volumes[102].slice_count == 1, "Died on +.volumes[102].slice_count"
    assert type(result.volumes[102].attributes) is dict, "Died on .volumes[102].attributes"
    assert result.volumes[102].volume_pairs[0].volume_pair_uuid == UUID("ec68131b-5eeb-41b7-b59a-3ae1ad247474"), "Died on .volumes[102].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[102].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[102].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[102].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[102].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[102].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[102].volume_pairs[0].remote_replication.state"
    assert result.volumes[102].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[102].volume_pairs[0].remote_replication.mode"
    assert result.volumes[102].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[102].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[102].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[102].volume_pairs[0].cluster_pair_id"
    assert result.volumes[102].volume_pairs[0].remote_volume_id == 1103, "Died on +.volumes[102].volume_pairs[0].remote_volume_id"
    assert result.volumes[102].volume_pairs[0].remote_volume_name == """snap-target-103""", "Died on +.volumes[102].volume_pairs[0].remote_volume_name"
    assert result.volumes[102].volume_pairs[0].remote_slice_id == 1103, "Died on +.volumes[102].volume_pairs[0].remote_slice_id"
    assert result.volumes[102].account_id == 4, "Died on +.volumes[102].account_id"
    assert result.volumes[102].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[102].create_time"
    assert result.volumes[102].virtual_volume_id is None, "Died on .volumes[102].virtual_volume_id"
    assert result.volumes[101].status == """active""", "Died on +.volumes[101].status"
    assert result.volumes[101].enable512e == False, "Died on +.volumes[101].enable512e"
    assert result.volumes[101].qos.burst_iops == 15000, "Died on +.volumes[101].qos.burst_iops"
    assert result.volumes[101].qos.burst_time == 60, "Died on +.volumes[101].qos.burst_time"
    assert result.volumes[101].qos.min_iops == 100, "Died on +.volumes[101].qos.min_iops"
    assert result.volumes[101].qos.max_iops == 15000, "Died on +.volumes[101].qos.max_iops"
    assert result.volumes[101].name == """snapshots-source-102""", "Died on +.volumes[101].name"
    assert result.volumes[101].volume_access_groups[0] == 4, "Died on +.volumes[101].volume_access_groups[0]"
    assert result.volumes[101].scsi_naadevice_id == """6f47acc1000000006d6964340000025a""", "Died on +.volumes[101].scsi_naadevice_id"
    assert result.volumes[101].total_size == 5000658944, "Died on +.volumes[101].total_size"
    assert result.volumes[101].block_size == 4096, "Died on +.volumes[101].block_size"
    assert result.volumes[101].scsi_euidevice_id == """6d6964340000025af47acc0100000000""", "Died on +.volumes[101].scsi_euidevice_id"
    assert result.volumes[101].volume_id == 602, "Died on +.volumes[101].volume_id"
    assert result.volumes[101].access == """readWrite""", "Died on +.volumes[101].access"
    assert result.volumes[101].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-102.602""", "Died on +.volumes[101].iqn"
    assert result.volumes[101].slice_count == 1, "Died on +.volumes[101].slice_count"
    assert type(result.volumes[101].attributes) is dict, "Died on .volumes[101].attributes"
    assert result.volumes[101].volume_pairs[0].volume_pair_uuid == UUID("5d8c60d9-7e74-4853-b39b-3fa770491dbb"), "Died on .volumes[101].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[101].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[101].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[101].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[101].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[101].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[101].volume_pairs[0].remote_replication.state"
    assert result.volumes[101].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[101].volume_pairs[0].remote_replication.mode"
    assert result.volumes[101].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[101].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[101].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[101].volume_pairs[0].cluster_pair_id"
    assert result.volumes[101].volume_pairs[0].remote_volume_id == 1102, "Died on +.volumes[101].volume_pairs[0].remote_volume_id"
    assert result.volumes[101].volume_pairs[0].remote_volume_name == """snap-target-102""", "Died on +.volumes[101].volume_pairs[0].remote_volume_name"
    assert result.volumes[101].volume_pairs[0].remote_slice_id == 1102, "Died on +.volumes[101].volume_pairs[0].remote_slice_id"
    assert result.volumes[101].account_id == 4, "Died on +.volumes[101].account_id"
    assert result.volumes[101].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[101].create_time"
    assert result.volumes[101].virtual_volume_id is None, "Died on .volumes[101].virtual_volume_id"
    assert result.volumes[100].status == """active""", "Died on +.volumes[100].status"
    assert result.volumes[100].enable512e == False, "Died on +.volumes[100].enable512e"
    assert result.volumes[100].qos.burst_iops == 15000, "Died on +.volumes[100].qos.burst_iops"
    assert result.volumes[100].qos.burst_time == 60, "Died on +.volumes[100].qos.burst_time"
    assert result.volumes[100].qos.min_iops == 100, "Died on +.volumes[100].qos.min_iops"
    assert result.volumes[100].qos.max_iops == 15000, "Died on +.volumes[100].qos.max_iops"
    assert result.volumes[100].name == """snapshots-source-101""", "Died on +.volumes[100].name"
    assert result.volumes[100].volume_access_groups[0] == 4, "Died on +.volumes[100].volume_access_groups[0]"
    assert result.volumes[100].scsi_naadevice_id == """6f47acc1000000006d69643400000259""", "Died on +.volumes[100].scsi_naadevice_id"
    assert result.volumes[100].total_size == 5000658944, "Died on +.volumes[100].total_size"
    assert result.volumes[100].block_size == 4096, "Died on +.volumes[100].block_size"
    assert result.volumes[100].scsi_euidevice_id == """6d69643400000259f47acc0100000000""", "Died on +.volumes[100].scsi_euidevice_id"
    assert result.volumes[100].volume_id == 601, "Died on +.volumes[100].volume_id"
    assert result.volumes[100].access == """readWrite""", "Died on +.volumes[100].access"
    assert result.volumes[100].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-101.601""", "Died on +.volumes[100].iqn"
    assert result.volumes[100].slice_count == 1, "Died on +.volumes[100].slice_count"
    assert type(result.volumes[100].attributes) is dict, "Died on .volumes[100].attributes"
    assert result.volumes[100].volume_pairs[0].volume_pair_uuid == UUID("8c91b01b-976a-49db-9d48-ec1553391708"), "Died on .volumes[100].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[100].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[100].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[100].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[100].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[100].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[100].volume_pairs[0].remote_replication.state"
    assert result.volumes[100].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[100].volume_pairs[0].remote_replication.mode"
    assert result.volumes[100].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[100].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[100].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[100].volume_pairs[0].cluster_pair_id"
    assert result.volumes[100].volume_pairs[0].remote_volume_id == 1101, "Died on +.volumes[100].volume_pairs[0].remote_volume_id"
    assert result.volumes[100].volume_pairs[0].remote_volume_name == """snap-target-101""", "Died on +.volumes[100].volume_pairs[0].remote_volume_name"
    assert result.volumes[100].volume_pairs[0].remote_slice_id == 1101, "Died on +.volumes[100].volume_pairs[0].remote_slice_id"
    assert result.volumes[100].account_id == 4, "Died on +.volumes[100].account_id"
    assert result.volumes[100].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[100].create_time"
    assert result.volumes[100].virtual_volume_id is None, "Died on .volumes[100].virtual_volume_id"
    assert result.volumes[99].status == """active""", "Died on +.volumes[99].status"
    assert result.volumes[99].enable512e == False, "Died on +.volumes[99].enable512e"
    assert result.volumes[99].qos.burst_iops == 15000, "Died on +.volumes[99].qos.burst_iops"
    assert result.volumes[99].qos.burst_time == 60, "Died on +.volumes[99].qos.burst_time"
    assert result.volumes[99].qos.min_iops == 100, "Died on +.volumes[99].qos.min_iops"
    assert result.volumes[99].qos.max_iops == 15000, "Died on +.volumes[99].qos.max_iops"
    assert result.volumes[99].name == """snapshots-source-100""", "Died on +.volumes[99].name"
    assert result.volumes[99].volume_access_groups[0] == 4, "Died on +.volumes[99].volume_access_groups[0]"
    assert result.volumes[99].scsi_naadevice_id == """6f47acc1000000006d69643400000258""", "Died on +.volumes[99].scsi_naadevice_id"
    assert result.volumes[99].total_size == 5000658944, "Died on +.volumes[99].total_size"
    assert result.volumes[99].block_size == 4096, "Died on +.volumes[99].block_size"
    assert result.volumes[99].scsi_euidevice_id == """6d69643400000258f47acc0100000000""", "Died on +.volumes[99].scsi_euidevice_id"
    assert result.volumes[99].volume_id == 600, "Died on +.volumes[99].volume_id"
    assert result.volumes[99].access == """readWrite""", "Died on +.volumes[99].access"
    assert result.volumes[99].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-100.600""", "Died on +.volumes[99].iqn"
    assert result.volumes[99].slice_count == 1, "Died on +.volumes[99].slice_count"
    assert type(result.volumes[99].attributes) is dict, "Died on .volumes[99].attributes"
    assert result.volumes[99].volume_pairs[0].volume_pair_uuid == UUID("8b60b1ed-1198-4535-9d5f-d5db03a09aa5"), "Died on .volumes[99].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[99].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[99].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[99].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[99].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[99].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[99].volume_pairs[0].remote_replication.state"
    assert result.volumes[99].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[99].volume_pairs[0].remote_replication.mode"
    assert result.volumes[99].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[99].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[99].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[99].volume_pairs[0].cluster_pair_id"
    assert result.volumes[99].volume_pairs[0].remote_volume_id == 1100, "Died on +.volumes[99].volume_pairs[0].remote_volume_id"
    assert result.volumes[99].volume_pairs[0].remote_volume_name == """snap-target-100""", "Died on +.volumes[99].volume_pairs[0].remote_volume_name"
    assert result.volumes[99].volume_pairs[0].remote_slice_id == 1100, "Died on +.volumes[99].volume_pairs[0].remote_slice_id"
    assert result.volumes[99].account_id == 4, "Died on +.volumes[99].account_id"
    assert result.volumes[99].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[99].create_time"
    assert result.volumes[99].virtual_volume_id is None, "Died on .volumes[99].virtual_volume_id"
    assert result.volumes[98].status == """active""", "Died on +.volumes[98].status"
    assert result.volumes[98].enable512e == False, "Died on +.volumes[98].enable512e"
    assert result.volumes[98].qos.burst_iops == 15000, "Died on +.volumes[98].qos.burst_iops"
    assert result.volumes[98].qos.burst_time == 60, "Died on +.volumes[98].qos.burst_time"
    assert result.volumes[98].qos.min_iops == 100, "Died on +.volumes[98].qos.min_iops"
    assert result.volumes[98].qos.max_iops == 15000, "Died on +.volumes[98].qos.max_iops"
    assert result.volumes[98].name == """snapshots-source-99""", "Died on +.volumes[98].name"
    assert result.volumes[98].volume_access_groups[0] == 4, "Died on +.volumes[98].volume_access_groups[0]"
    assert result.volumes[98].scsi_naadevice_id == """6f47acc1000000006d69643400000257""", "Died on +.volumes[98].scsi_naadevice_id"
    assert result.volumes[98].total_size == 5000658944, "Died on +.volumes[98].total_size"
    assert result.volumes[98].block_size == 4096, "Died on +.volumes[98].block_size"
    assert result.volumes[98].scsi_euidevice_id == """6d69643400000257f47acc0100000000""", "Died on +.volumes[98].scsi_euidevice_id"
    assert result.volumes[98].volume_id == 599, "Died on +.volumes[98].volume_id"
    assert result.volumes[98].access == """readWrite""", "Died on +.volumes[98].access"
    assert result.volumes[98].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-99.599""", "Died on +.volumes[98].iqn"
    assert result.volumes[98].slice_count == 1, "Died on +.volumes[98].slice_count"
    assert type(result.volumes[98].attributes) is dict, "Died on .volumes[98].attributes"
    assert result.volumes[98].volume_pairs[0].volume_pair_uuid == UUID("c38be23f-41ee-4dd8-aa43-4e4a16634990"), "Died on .volumes[98].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[98].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[98].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[98].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[98].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[98].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[98].volume_pairs[0].remote_replication.state"
    assert result.volumes[98].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[98].volume_pairs[0].remote_replication.mode"
    assert result.volumes[98].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[98].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[98].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[98].volume_pairs[0].cluster_pair_id"
    assert result.volumes[98].volume_pairs[0].remote_volume_id == 1099, "Died on +.volumes[98].volume_pairs[0].remote_volume_id"
    assert result.volumes[98].volume_pairs[0].remote_volume_name == """snap-target-99""", "Died on +.volumes[98].volume_pairs[0].remote_volume_name"
    assert result.volumes[98].volume_pairs[0].remote_slice_id == 1099, "Died on +.volumes[98].volume_pairs[0].remote_slice_id"
    assert result.volumes[98].account_id == 4, "Died on +.volumes[98].account_id"
    assert result.volumes[98].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[98].create_time"
    assert result.volumes[98].virtual_volume_id is None, "Died on .volumes[98].virtual_volume_id"
    assert result.volumes[97].status == """active""", "Died on +.volumes[97].status"
    assert result.volumes[97].enable512e == False, "Died on +.volumes[97].enable512e"
    assert result.volumes[97].qos.burst_iops == 15000, "Died on +.volumes[97].qos.burst_iops"
    assert result.volumes[97].qos.burst_time == 60, "Died on +.volumes[97].qos.burst_time"
    assert result.volumes[97].qos.min_iops == 100, "Died on +.volumes[97].qos.min_iops"
    assert result.volumes[97].qos.max_iops == 15000, "Died on +.volumes[97].qos.max_iops"
    assert result.volumes[97].name == """snapshots-source-98""", "Died on +.volumes[97].name"
    assert result.volumes[97].volume_access_groups[0] == 4, "Died on +.volumes[97].volume_access_groups[0]"
    assert result.volumes[97].scsi_naadevice_id == """6f47acc1000000006d69643400000256""", "Died on +.volumes[97].scsi_naadevice_id"
    assert result.volumes[97].total_size == 5000658944, "Died on +.volumes[97].total_size"
    assert result.volumes[97].block_size == 4096, "Died on +.volumes[97].block_size"
    assert result.volumes[97].scsi_euidevice_id == """6d69643400000256f47acc0100000000""", "Died on +.volumes[97].scsi_euidevice_id"
    assert result.volumes[97].volume_id == 598, "Died on +.volumes[97].volume_id"
    assert result.volumes[97].access == """readWrite""", "Died on +.volumes[97].access"
    assert result.volumes[97].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-98.598""", "Died on +.volumes[97].iqn"
    assert result.volumes[97].slice_count == 1, "Died on +.volumes[97].slice_count"
    assert type(result.volumes[97].attributes) is dict, "Died on .volumes[97].attributes"
    assert result.volumes[97].volume_pairs[0].volume_pair_uuid == UUID("60aba093-1c94-4a13-9cef-b90fd6b52327"), "Died on .volumes[97].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[97].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[97].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[97].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[97].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[97].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[97].volume_pairs[0].remote_replication.state"
    assert result.volumes[97].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[97].volume_pairs[0].remote_replication.mode"
    assert result.volumes[97].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[97].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[97].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[97].volume_pairs[0].cluster_pair_id"
    assert result.volumes[97].volume_pairs[0].remote_volume_id == 1098, "Died on +.volumes[97].volume_pairs[0].remote_volume_id"
    assert result.volumes[97].volume_pairs[0].remote_volume_name == """snap-target-98""", "Died on +.volumes[97].volume_pairs[0].remote_volume_name"
    assert result.volumes[97].volume_pairs[0].remote_slice_id == 1098, "Died on +.volumes[97].volume_pairs[0].remote_slice_id"
    assert result.volumes[97].account_id == 4, "Died on +.volumes[97].account_id"
    assert result.volumes[97].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[97].create_time"
    assert result.volumes[97].virtual_volume_id is None, "Died on .volumes[97].virtual_volume_id"
    assert result.volumes[96].status == """active""", "Died on +.volumes[96].status"
    assert result.volumes[96].enable512e == False, "Died on +.volumes[96].enable512e"
    assert result.volumes[96].qos.burst_iops == 15000, "Died on +.volumes[96].qos.burst_iops"
    assert result.volumes[96].qos.burst_time == 60, "Died on +.volumes[96].qos.burst_time"
    assert result.volumes[96].qos.min_iops == 100, "Died on +.volumes[96].qos.min_iops"
    assert result.volumes[96].qos.max_iops == 15000, "Died on +.volumes[96].qos.max_iops"
    assert result.volumes[96].name == """snapshots-source-97""", "Died on +.volumes[96].name"
    assert result.volumes[96].volume_access_groups[0] == 4, "Died on +.volumes[96].volume_access_groups[0]"
    assert result.volumes[96].scsi_naadevice_id == """6f47acc1000000006d69643400000255""", "Died on +.volumes[96].scsi_naadevice_id"
    assert result.volumes[96].total_size == 5000658944, "Died on +.volumes[96].total_size"
    assert result.volumes[96].block_size == 4096, "Died on +.volumes[96].block_size"
    assert result.volumes[96].scsi_euidevice_id == """6d69643400000255f47acc0100000000""", "Died on +.volumes[96].scsi_euidevice_id"
    assert result.volumes[96].volume_id == 597, "Died on +.volumes[96].volume_id"
    assert result.volumes[96].access == """readWrite""", "Died on +.volumes[96].access"
    assert result.volumes[96].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-97.597""", "Died on +.volumes[96].iqn"
    assert result.volumes[96].slice_count == 1, "Died on +.volumes[96].slice_count"
    assert type(result.volumes[96].attributes) is dict, "Died on .volumes[96].attributes"
    assert result.volumes[96].volume_pairs[0].volume_pair_uuid == UUID("8b280f7e-86d1-43c0-8126-b42cb04303d8"), "Died on .volumes[96].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[96].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[96].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[96].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[96].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[96].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[96].volume_pairs[0].remote_replication.state"
    assert result.volumes[96].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[96].volume_pairs[0].remote_replication.mode"
    assert result.volumes[96].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[96].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[96].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[96].volume_pairs[0].cluster_pair_id"
    assert result.volumes[96].volume_pairs[0].remote_volume_id == 1097, "Died on +.volumes[96].volume_pairs[0].remote_volume_id"
    assert result.volumes[96].volume_pairs[0].remote_volume_name == """snap-target-97""", "Died on +.volumes[96].volume_pairs[0].remote_volume_name"
    assert result.volumes[96].volume_pairs[0].remote_slice_id == 1097, "Died on +.volumes[96].volume_pairs[0].remote_slice_id"
    assert result.volumes[96].account_id == 4, "Died on +.volumes[96].account_id"
    assert result.volumes[96].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[96].create_time"
    assert result.volumes[96].virtual_volume_id is None, "Died on .volumes[96].virtual_volume_id"
    assert result.volumes[95].status == """active""", "Died on +.volumes[95].status"
    assert result.volumes[95].enable512e == False, "Died on +.volumes[95].enable512e"
    assert result.volumes[95].qos.burst_iops == 15000, "Died on +.volumes[95].qos.burst_iops"
    assert result.volumes[95].qos.burst_time == 60, "Died on +.volumes[95].qos.burst_time"
    assert result.volumes[95].qos.min_iops == 100, "Died on +.volumes[95].qos.min_iops"
    assert result.volumes[95].qos.max_iops == 15000, "Died on +.volumes[95].qos.max_iops"
    assert result.volumes[95].name == """snapshots-source-96""", "Died on +.volumes[95].name"
    assert result.volumes[95].volume_access_groups[0] == 4, "Died on +.volumes[95].volume_access_groups[0]"
    assert result.volumes[95].scsi_naadevice_id == """6f47acc1000000006d69643400000254""", "Died on +.volumes[95].scsi_naadevice_id"
    assert result.volumes[95].total_size == 5000658944, "Died on +.volumes[95].total_size"
    assert result.volumes[95].block_size == 4096, "Died on +.volumes[95].block_size"
    assert result.volumes[95].scsi_euidevice_id == """6d69643400000254f47acc0100000000""", "Died on +.volumes[95].scsi_euidevice_id"
    assert result.volumes[95].volume_id == 596, "Died on +.volumes[95].volume_id"
    assert result.volumes[95].access == """readWrite""", "Died on +.volumes[95].access"
    assert result.volumes[95].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-96.596""", "Died on +.volumes[95].iqn"
    assert result.volumes[95].slice_count == 1, "Died on +.volumes[95].slice_count"
    assert type(result.volumes[95].attributes) is dict, "Died on .volumes[95].attributes"
    assert result.volumes[95].volume_pairs[0].volume_pair_uuid == UUID("32aeb9b9-b531-45e4-8d7e-6e845c7799bf"), "Died on .volumes[95].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[95].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[95].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[95].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[95].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[95].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[95].volume_pairs[0].remote_replication.state"
    assert result.volumes[95].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[95].volume_pairs[0].remote_replication.mode"
    assert result.volumes[95].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[95].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[95].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[95].volume_pairs[0].cluster_pair_id"
    assert result.volumes[95].volume_pairs[0].remote_volume_id == 1096, "Died on +.volumes[95].volume_pairs[0].remote_volume_id"
    assert result.volumes[95].volume_pairs[0].remote_volume_name == """snap-target-96""", "Died on +.volumes[95].volume_pairs[0].remote_volume_name"
    assert result.volumes[95].volume_pairs[0].remote_slice_id == 1096, "Died on +.volumes[95].volume_pairs[0].remote_slice_id"
    assert result.volumes[95].account_id == 4, "Died on +.volumes[95].account_id"
    assert result.volumes[95].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[95].create_time"
    assert result.volumes[95].virtual_volume_id is None, "Died on .volumes[95].virtual_volume_id"
    assert result.volumes[94].status == """active""", "Died on +.volumes[94].status"
    assert result.volumes[94].enable512e == False, "Died on +.volumes[94].enable512e"
    assert result.volumes[94].qos.burst_iops == 15000, "Died on +.volumes[94].qos.burst_iops"
    assert result.volumes[94].qos.burst_time == 60, "Died on +.volumes[94].qos.burst_time"
    assert result.volumes[94].qos.min_iops == 100, "Died on +.volumes[94].qos.min_iops"
    assert result.volumes[94].qos.max_iops == 15000, "Died on +.volumes[94].qos.max_iops"
    assert result.volumes[94].name == """snapshots-source-95""", "Died on +.volumes[94].name"
    assert result.volumes[94].volume_access_groups[0] == 4, "Died on +.volumes[94].volume_access_groups[0]"
    assert result.volumes[94].scsi_naadevice_id == """6f47acc1000000006d69643400000253""", "Died on +.volumes[94].scsi_naadevice_id"
    assert result.volumes[94].total_size == 5000658944, "Died on +.volumes[94].total_size"
    assert result.volumes[94].block_size == 4096, "Died on +.volumes[94].block_size"
    assert result.volumes[94].scsi_euidevice_id == """6d69643400000253f47acc0100000000""", "Died on +.volumes[94].scsi_euidevice_id"
    assert result.volumes[94].volume_id == 595, "Died on +.volumes[94].volume_id"
    assert result.volumes[94].access == """readWrite""", "Died on +.volumes[94].access"
    assert result.volumes[94].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-95.595""", "Died on +.volumes[94].iqn"
    assert result.volumes[94].slice_count == 1, "Died on +.volumes[94].slice_count"
    assert type(result.volumes[94].attributes) is dict, "Died on .volumes[94].attributes"
    assert result.volumes[94].volume_pairs[0].volume_pair_uuid == UUID("11cd1818-a0cc-4ecd-8072-db6c9a2d08c8"), "Died on .volumes[94].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[94].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[94].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[94].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[94].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[94].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[94].volume_pairs[0].remote_replication.state"
    assert result.volumes[94].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[94].volume_pairs[0].remote_replication.mode"
    assert result.volumes[94].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[94].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[94].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[94].volume_pairs[0].cluster_pair_id"
    assert result.volumes[94].volume_pairs[0].remote_volume_id == 1095, "Died on +.volumes[94].volume_pairs[0].remote_volume_id"
    assert result.volumes[94].volume_pairs[0].remote_volume_name == """snap-target-95""", "Died on +.volumes[94].volume_pairs[0].remote_volume_name"
    assert result.volumes[94].volume_pairs[0].remote_slice_id == 1095, "Died on +.volumes[94].volume_pairs[0].remote_slice_id"
    assert result.volumes[94].account_id == 4, "Died on +.volumes[94].account_id"
    assert result.volumes[94].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[94].create_time"
    assert result.volumes[94].virtual_volume_id is None, "Died on .volumes[94].virtual_volume_id"
    assert result.volumes[93].status == """active""", "Died on +.volumes[93].status"
    assert result.volumes[93].enable512e == False, "Died on +.volumes[93].enable512e"
    assert result.volumes[93].qos.burst_iops == 15000, "Died on +.volumes[93].qos.burst_iops"
    assert result.volumes[93].qos.burst_time == 60, "Died on +.volumes[93].qos.burst_time"
    assert result.volumes[93].qos.min_iops == 100, "Died on +.volumes[93].qos.min_iops"
    assert result.volumes[93].qos.max_iops == 15000, "Died on +.volumes[93].qos.max_iops"
    assert result.volumes[93].name == """snapshots-source-94""", "Died on +.volumes[93].name"
    assert result.volumes[93].volume_access_groups[0] == 4, "Died on +.volumes[93].volume_access_groups[0]"
    assert result.volumes[93].scsi_naadevice_id == """6f47acc1000000006d69643400000252""", "Died on +.volumes[93].scsi_naadevice_id"
    assert result.volumes[93].total_size == 5000658944, "Died on +.volumes[93].total_size"
    assert result.volumes[93].block_size == 4096, "Died on +.volumes[93].block_size"
    assert result.volumes[93].scsi_euidevice_id == """6d69643400000252f47acc0100000000""", "Died on +.volumes[93].scsi_euidevice_id"
    assert result.volumes[93].volume_id == 594, "Died on +.volumes[93].volume_id"
    assert result.volumes[93].access == """readWrite""", "Died on +.volumes[93].access"
    assert result.volumes[93].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-94.594""", "Died on +.volumes[93].iqn"
    assert result.volumes[93].slice_count == 1, "Died on +.volumes[93].slice_count"
    assert type(result.volumes[93].attributes) is dict, "Died on .volumes[93].attributes"
    assert result.volumes[93].volume_pairs[0].volume_pair_uuid == UUID("9caf7775-cd5b-4890-8213-c983dcc646da"), "Died on .volumes[93].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[93].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[93].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[93].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[93].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[93].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[93].volume_pairs[0].remote_replication.state"
    assert result.volumes[93].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[93].volume_pairs[0].remote_replication.mode"
    assert result.volumes[93].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[93].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[93].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[93].volume_pairs[0].cluster_pair_id"
    assert result.volumes[93].volume_pairs[0].remote_volume_id == 1094, "Died on +.volumes[93].volume_pairs[0].remote_volume_id"
    assert result.volumes[93].volume_pairs[0].remote_volume_name == """snap-target-94""", "Died on +.volumes[93].volume_pairs[0].remote_volume_name"
    assert result.volumes[93].volume_pairs[0].remote_slice_id == 1094, "Died on +.volumes[93].volume_pairs[0].remote_slice_id"
    assert result.volumes[93].account_id == 4, "Died on +.volumes[93].account_id"
    assert result.volumes[93].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[93].create_time"
    assert result.volumes[93].virtual_volume_id is None, "Died on .volumes[93].virtual_volume_id"
    assert result.volumes[92].status == """active""", "Died on +.volumes[92].status"
    assert result.volumes[92].enable512e == False, "Died on +.volumes[92].enable512e"
    assert result.volumes[92].qos.burst_iops == 15000, "Died on +.volumes[92].qos.burst_iops"
    assert result.volumes[92].qos.burst_time == 60, "Died on +.volumes[92].qos.burst_time"
    assert result.volumes[92].qos.min_iops == 100, "Died on +.volumes[92].qos.min_iops"
    assert result.volumes[92].qos.max_iops == 15000, "Died on +.volumes[92].qos.max_iops"
    assert result.volumes[92].name == """snapshots-source-93""", "Died on +.volumes[92].name"
    assert result.volumes[92].volume_access_groups[0] == 4, "Died on +.volumes[92].volume_access_groups[0]"
    assert result.volumes[92].scsi_naadevice_id == """6f47acc1000000006d69643400000251""", "Died on +.volumes[92].scsi_naadevice_id"
    assert result.volumes[92].total_size == 5000658944, "Died on +.volumes[92].total_size"
    assert result.volumes[92].block_size == 4096, "Died on +.volumes[92].block_size"
    assert result.volumes[92].scsi_euidevice_id == """6d69643400000251f47acc0100000000""", "Died on +.volumes[92].scsi_euidevice_id"
    assert result.volumes[92].volume_id == 593, "Died on +.volumes[92].volume_id"
    assert result.volumes[92].access == """readWrite""", "Died on +.volumes[92].access"
    assert result.volumes[92].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-93.593""", "Died on +.volumes[92].iqn"
    assert result.volumes[92].slice_count == 1, "Died on +.volumes[92].slice_count"
    assert type(result.volumes[92].attributes) is dict, "Died on .volumes[92].attributes"
    assert result.volumes[92].volume_pairs[0].volume_pair_uuid == UUID("1ff6bd53-3ebf-4602-9d19-a2aef976409a"), "Died on .volumes[92].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[92].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[92].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[92].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[92].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[92].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[92].volume_pairs[0].remote_replication.state"
    assert result.volumes[92].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[92].volume_pairs[0].remote_replication.mode"
    assert result.volumes[92].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[92].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[92].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[92].volume_pairs[0].cluster_pair_id"
    assert result.volumes[92].volume_pairs[0].remote_volume_id == 1093, "Died on +.volumes[92].volume_pairs[0].remote_volume_id"
    assert result.volumes[92].volume_pairs[0].remote_volume_name == """snap-target-93""", "Died on +.volumes[92].volume_pairs[0].remote_volume_name"
    assert result.volumes[92].volume_pairs[0].remote_slice_id == 1093, "Died on +.volumes[92].volume_pairs[0].remote_slice_id"
    assert result.volumes[92].account_id == 4, "Died on +.volumes[92].account_id"
    assert result.volumes[92].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[92].create_time"
    assert result.volumes[92].virtual_volume_id is None, "Died on .volumes[92].virtual_volume_id"
    assert result.volumes[91].status == """active""", "Died on +.volumes[91].status"
    assert result.volumes[91].enable512e == False, "Died on +.volumes[91].enable512e"
    assert result.volumes[91].qos.burst_iops == 15000, "Died on +.volumes[91].qos.burst_iops"
    assert result.volumes[91].qos.burst_time == 60, "Died on +.volumes[91].qos.burst_time"
    assert result.volumes[91].qos.min_iops == 100, "Died on +.volumes[91].qos.min_iops"
    assert result.volumes[91].qos.max_iops == 15000, "Died on +.volumes[91].qos.max_iops"
    assert result.volumes[91].name == """snapshots-source-92""", "Died on +.volumes[91].name"
    assert result.volumes[91].volume_access_groups[0] == 4, "Died on +.volumes[91].volume_access_groups[0]"
    assert result.volumes[91].scsi_naadevice_id == """6f47acc1000000006d69643400000250""", "Died on +.volumes[91].scsi_naadevice_id"
    assert result.volumes[91].total_size == 5000658944, "Died on +.volumes[91].total_size"
    assert result.volumes[91].block_size == 4096, "Died on +.volumes[91].block_size"
    assert result.volumes[91].scsi_euidevice_id == """6d69643400000250f47acc0100000000""", "Died on +.volumes[91].scsi_euidevice_id"
    assert result.volumes[91].volume_id == 592, "Died on +.volumes[91].volume_id"
    assert result.volumes[91].access == """readWrite""", "Died on +.volumes[91].access"
    assert result.volumes[91].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-92.592""", "Died on +.volumes[91].iqn"
    assert result.volumes[91].slice_count == 1, "Died on +.volumes[91].slice_count"
    assert type(result.volumes[91].attributes) is dict, "Died on .volumes[91].attributes"
    assert result.volumes[91].volume_pairs[0].volume_pair_uuid == UUID("53e8cca2-2aac-437f-83ac-2dcda5589dd4"), "Died on .volumes[91].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[91].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[91].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[91].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[91].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[91].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[91].volume_pairs[0].remote_replication.state"
    assert result.volumes[91].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[91].volume_pairs[0].remote_replication.mode"
    assert result.volumes[91].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[91].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[91].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[91].volume_pairs[0].cluster_pair_id"
    assert result.volumes[91].volume_pairs[0].remote_volume_id == 1092, "Died on +.volumes[91].volume_pairs[0].remote_volume_id"
    assert result.volumes[91].volume_pairs[0].remote_volume_name == """snap-target-92""", "Died on +.volumes[91].volume_pairs[0].remote_volume_name"
    assert result.volumes[91].volume_pairs[0].remote_slice_id == 1092, "Died on +.volumes[91].volume_pairs[0].remote_slice_id"
    assert result.volumes[91].account_id == 4, "Died on +.volumes[91].account_id"
    assert result.volumes[91].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[91].create_time"
    assert result.volumes[91].virtual_volume_id is None, "Died on .volumes[91].virtual_volume_id"
    assert result.volumes[90].status == """active""", "Died on +.volumes[90].status"
    assert result.volumes[90].enable512e == False, "Died on +.volumes[90].enable512e"
    assert result.volumes[90].qos.burst_iops == 15000, "Died on +.volumes[90].qos.burst_iops"
    assert result.volumes[90].qos.burst_time == 60, "Died on +.volumes[90].qos.burst_time"
    assert result.volumes[90].qos.min_iops == 100, "Died on +.volumes[90].qos.min_iops"
    assert result.volumes[90].qos.max_iops == 15000, "Died on +.volumes[90].qos.max_iops"
    assert result.volumes[90].name == """snapshots-source-91""", "Died on +.volumes[90].name"
    assert result.volumes[90].volume_access_groups[0] == 4, "Died on +.volumes[90].volume_access_groups[0]"
    assert result.volumes[90].scsi_naadevice_id == """6f47acc1000000006d6964340000024f""", "Died on +.volumes[90].scsi_naadevice_id"
    assert result.volumes[90].total_size == 5000658944, "Died on +.volumes[90].total_size"
    assert result.volumes[90].block_size == 4096, "Died on +.volumes[90].block_size"
    assert result.volumes[90].scsi_euidevice_id == """6d6964340000024ff47acc0100000000""", "Died on +.volumes[90].scsi_euidevice_id"
    assert result.volumes[90].volume_id == 591, "Died on +.volumes[90].volume_id"
    assert result.volumes[90].access == """readWrite""", "Died on +.volumes[90].access"
    assert result.volumes[90].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-91.591""", "Died on +.volumes[90].iqn"
    assert result.volumes[90].slice_count == 1, "Died on +.volumes[90].slice_count"
    assert type(result.volumes[90].attributes) is dict, "Died on .volumes[90].attributes"
    assert result.volumes[90].volume_pairs[0].volume_pair_uuid == UUID("142e5e3c-714c-4734-8e6a-46127c3e4f82"), "Died on .volumes[90].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[90].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[90].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[90].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[90].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[90].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[90].volume_pairs[0].remote_replication.state"
    assert result.volumes[90].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[90].volume_pairs[0].remote_replication.mode"
    assert result.volumes[90].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[90].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[90].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[90].volume_pairs[0].cluster_pair_id"
    assert result.volumes[90].volume_pairs[0].remote_volume_id == 1091, "Died on +.volumes[90].volume_pairs[0].remote_volume_id"
    assert result.volumes[90].volume_pairs[0].remote_volume_name == """snap-target-91""", "Died on +.volumes[90].volume_pairs[0].remote_volume_name"
    assert result.volumes[90].volume_pairs[0].remote_slice_id == 1091, "Died on +.volumes[90].volume_pairs[0].remote_slice_id"
    assert result.volumes[90].account_id == 4, "Died on +.volumes[90].account_id"
    assert result.volumes[90].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[90].create_time"
    assert result.volumes[90].virtual_volume_id is None, "Died on .volumes[90].virtual_volume_id"
    assert result.volumes[89].status == """active""", "Died on +.volumes[89].status"
    assert result.volumes[89].enable512e == False, "Died on +.volumes[89].enable512e"
    assert result.volumes[89].qos.burst_iops == 15000, "Died on +.volumes[89].qos.burst_iops"
    assert result.volumes[89].qos.burst_time == 60, "Died on +.volumes[89].qos.burst_time"
    assert result.volumes[89].qos.min_iops == 100, "Died on +.volumes[89].qos.min_iops"
    assert result.volumes[89].qos.max_iops == 15000, "Died on +.volumes[89].qos.max_iops"
    assert result.volumes[89].name == """snapshots-source-90""", "Died on +.volumes[89].name"
    assert result.volumes[89].volume_access_groups[0] == 4, "Died on +.volumes[89].volume_access_groups[0]"
    assert result.volumes[89].scsi_naadevice_id == """6f47acc1000000006d6964340000024e""", "Died on +.volumes[89].scsi_naadevice_id"
    assert result.volumes[89].total_size == 5000658944, "Died on +.volumes[89].total_size"
    assert result.volumes[89].block_size == 4096, "Died on +.volumes[89].block_size"
    assert result.volumes[89].scsi_euidevice_id == """6d6964340000024ef47acc0100000000""", "Died on +.volumes[89].scsi_euidevice_id"
    assert result.volumes[89].volume_id == 590, "Died on +.volumes[89].volume_id"
    assert result.volumes[89].access == """readWrite""", "Died on +.volumes[89].access"
    assert result.volumes[89].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-90.590""", "Died on +.volumes[89].iqn"
    assert result.volumes[89].slice_count == 1, "Died on +.volumes[89].slice_count"
    assert type(result.volumes[89].attributes) is dict, "Died on .volumes[89].attributes"
    assert result.volumes[89].volume_pairs[0].volume_pair_uuid == UUID("c1129f6e-97b0-492a-851b-944a6b964585"), "Died on .volumes[89].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[89].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[89].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[89].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[89].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[89].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[89].volume_pairs[0].remote_replication.state"
    assert result.volumes[89].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[89].volume_pairs[0].remote_replication.mode"
    assert result.volumes[89].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[89].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[89].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[89].volume_pairs[0].cluster_pair_id"
    assert result.volumes[89].volume_pairs[0].remote_volume_id == 1090, "Died on +.volumes[89].volume_pairs[0].remote_volume_id"
    assert result.volumes[89].volume_pairs[0].remote_volume_name == """snap-target-90""", "Died on +.volumes[89].volume_pairs[0].remote_volume_name"
    assert result.volumes[89].volume_pairs[0].remote_slice_id == 1090, "Died on +.volumes[89].volume_pairs[0].remote_slice_id"
    assert result.volumes[89].account_id == 4, "Died on +.volumes[89].account_id"
    assert result.volumes[89].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[89].create_time"
    assert result.volumes[89].virtual_volume_id is None, "Died on .volumes[89].virtual_volume_id"
    assert result.volumes[88].status == """active""", "Died on +.volumes[88].status"
    assert result.volumes[88].enable512e == False, "Died on +.volumes[88].enable512e"
    assert result.volumes[88].qos.burst_iops == 15000, "Died on +.volumes[88].qos.burst_iops"
    assert result.volumes[88].qos.burst_time == 60, "Died on +.volumes[88].qos.burst_time"
    assert result.volumes[88].qos.min_iops == 100, "Died on +.volumes[88].qos.min_iops"
    assert result.volumes[88].qos.max_iops == 15000, "Died on +.volumes[88].qos.max_iops"
    assert result.volumes[88].name == """snapshots-source-89""", "Died on +.volumes[88].name"
    assert result.volumes[88].volume_access_groups[0] == 4, "Died on +.volumes[88].volume_access_groups[0]"
    assert result.volumes[88].scsi_naadevice_id == """6f47acc1000000006d6964340000024d""", "Died on +.volumes[88].scsi_naadevice_id"
    assert result.volumes[88].total_size == 5000658944, "Died on +.volumes[88].total_size"
    assert result.volumes[88].block_size == 4096, "Died on +.volumes[88].block_size"
    assert result.volumes[88].scsi_euidevice_id == """6d6964340000024df47acc0100000000""", "Died on +.volumes[88].scsi_euidevice_id"
    assert result.volumes[88].volume_id == 589, "Died on +.volumes[88].volume_id"
    assert result.volumes[88].access == """readWrite""", "Died on +.volumes[88].access"
    assert result.volumes[88].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-89.589""", "Died on +.volumes[88].iqn"
    assert result.volumes[88].slice_count == 1, "Died on +.volumes[88].slice_count"
    assert type(result.volumes[88].attributes) is dict, "Died on .volumes[88].attributes"
    assert result.volumes[88].volume_pairs[0].volume_pair_uuid == UUID("bbb2e181-640e-4e48-ba31-60cfba59fe61"), "Died on .volumes[88].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[88].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[88].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[88].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[88].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[88].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[88].volume_pairs[0].remote_replication.state"
    assert result.volumes[88].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[88].volume_pairs[0].remote_replication.mode"
    assert result.volumes[88].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[88].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[88].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[88].volume_pairs[0].cluster_pair_id"
    assert result.volumes[88].volume_pairs[0].remote_volume_id == 1089, "Died on +.volumes[88].volume_pairs[0].remote_volume_id"
    assert result.volumes[88].volume_pairs[0].remote_volume_name == """snap-target-89""", "Died on +.volumes[88].volume_pairs[0].remote_volume_name"
    assert result.volumes[88].volume_pairs[0].remote_slice_id == 1089, "Died on +.volumes[88].volume_pairs[0].remote_slice_id"
    assert result.volumes[88].account_id == 4, "Died on +.volumes[88].account_id"
    assert result.volumes[88].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[88].create_time"
    assert result.volumes[88].virtual_volume_id is None, "Died on .volumes[88].virtual_volume_id"
    assert result.volumes[87].status == """active""", "Died on +.volumes[87].status"
    assert result.volumes[87].enable512e == False, "Died on +.volumes[87].enable512e"
    assert result.volumes[87].qos.burst_iops == 15000, "Died on +.volumes[87].qos.burst_iops"
    assert result.volumes[87].qos.burst_time == 60, "Died on +.volumes[87].qos.burst_time"
    assert result.volumes[87].qos.min_iops == 100, "Died on +.volumes[87].qos.min_iops"
    assert result.volumes[87].qos.max_iops == 15000, "Died on +.volumes[87].qos.max_iops"
    assert result.volumes[87].name == """snapshots-source-88""", "Died on +.volumes[87].name"
    assert result.volumes[87].volume_access_groups[0] == 4, "Died on +.volumes[87].volume_access_groups[0]"
    assert result.volumes[87].scsi_naadevice_id == """6f47acc1000000006d6964340000024c""", "Died on +.volumes[87].scsi_naadevice_id"
    assert result.volumes[87].total_size == 5000658944, "Died on +.volumes[87].total_size"
    assert result.volumes[87].block_size == 4096, "Died on +.volumes[87].block_size"
    assert result.volumes[87].scsi_euidevice_id == """6d6964340000024cf47acc0100000000""", "Died on +.volumes[87].scsi_euidevice_id"
    assert result.volumes[87].volume_id == 588, "Died on +.volumes[87].volume_id"
    assert result.volumes[87].access == """readWrite""", "Died on +.volumes[87].access"
    assert result.volumes[87].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-88.588""", "Died on +.volumes[87].iqn"
    assert result.volumes[87].slice_count == 1, "Died on +.volumes[87].slice_count"
    assert type(result.volumes[87].attributes) is dict, "Died on .volumes[87].attributes"
    assert result.volumes[87].volume_pairs[0].volume_pair_uuid == UUID("149ac36c-9cdb-4e7f-a2c6-ffbc9a76f8e7"), "Died on .volumes[87].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[87].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[87].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[87].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[87].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[87].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[87].volume_pairs[0].remote_replication.state"
    assert result.volumes[87].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[87].volume_pairs[0].remote_replication.mode"
    assert result.volumes[87].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[87].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[87].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[87].volume_pairs[0].cluster_pair_id"
    assert result.volumes[87].volume_pairs[0].remote_volume_id == 1088, "Died on +.volumes[87].volume_pairs[0].remote_volume_id"
    assert result.volumes[87].volume_pairs[0].remote_volume_name == """snap-target-88""", "Died on +.volumes[87].volume_pairs[0].remote_volume_name"
    assert result.volumes[87].volume_pairs[0].remote_slice_id == 1088, "Died on +.volumes[87].volume_pairs[0].remote_slice_id"
    assert result.volumes[87].account_id == 4, "Died on +.volumes[87].account_id"
    assert result.volumes[87].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[87].create_time"
    assert result.volumes[87].virtual_volume_id is None, "Died on .volumes[87].virtual_volume_id"
    assert result.volumes[86].status == """active""", "Died on +.volumes[86].status"
    assert result.volumes[86].enable512e == False, "Died on +.volumes[86].enable512e"
    assert result.volumes[86].qos.burst_iops == 15000, "Died on +.volumes[86].qos.burst_iops"
    assert result.volumes[86].qos.burst_time == 60, "Died on +.volumes[86].qos.burst_time"
    assert result.volumes[86].qos.min_iops == 100, "Died on +.volumes[86].qos.min_iops"
    assert result.volumes[86].qos.max_iops == 15000, "Died on +.volumes[86].qos.max_iops"
    assert result.volumes[86].name == """snapshots-source-87""", "Died on +.volumes[86].name"
    assert result.volumes[86].volume_access_groups[0] == 4, "Died on +.volumes[86].volume_access_groups[0]"
    assert result.volumes[86].scsi_naadevice_id == """6f47acc1000000006d6964340000024b""", "Died on +.volumes[86].scsi_naadevice_id"
    assert result.volumes[86].total_size == 5000658944, "Died on +.volumes[86].total_size"
    assert result.volumes[86].block_size == 4096, "Died on +.volumes[86].block_size"
    assert result.volumes[86].scsi_euidevice_id == """6d6964340000024bf47acc0100000000""", "Died on +.volumes[86].scsi_euidevice_id"
    assert result.volumes[86].volume_id == 587, "Died on +.volumes[86].volume_id"
    assert result.volumes[86].access == """readWrite""", "Died on +.volumes[86].access"
    assert result.volumes[86].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-87.587""", "Died on +.volumes[86].iqn"
    assert result.volumes[86].slice_count == 1, "Died on +.volumes[86].slice_count"
    assert type(result.volumes[86].attributes) is dict, "Died on .volumes[86].attributes"
    assert result.volumes[86].volume_pairs[0].volume_pair_uuid == UUID("85d55714-267d-49a9-a94c-6915b36783ae"), "Died on .volumes[86].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[86].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[86].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[86].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[86].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[86].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[86].volume_pairs[0].remote_replication.state"
    assert result.volumes[86].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[86].volume_pairs[0].remote_replication.mode"
    assert result.volumes[86].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[86].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[86].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[86].volume_pairs[0].cluster_pair_id"
    assert result.volumes[86].volume_pairs[0].remote_volume_id == 1087, "Died on +.volumes[86].volume_pairs[0].remote_volume_id"
    assert result.volumes[86].volume_pairs[0].remote_volume_name == """snap-target-87""", "Died on +.volumes[86].volume_pairs[0].remote_volume_name"
    assert result.volumes[86].volume_pairs[0].remote_slice_id == 1087, "Died on +.volumes[86].volume_pairs[0].remote_slice_id"
    assert result.volumes[86].account_id == 4, "Died on +.volumes[86].account_id"
    assert result.volumes[86].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[86].create_time"
    assert result.volumes[86].virtual_volume_id is None, "Died on .volumes[86].virtual_volume_id"
    assert result.volumes[85].status == """active""", "Died on +.volumes[85].status"
    assert result.volumes[85].enable512e == False, "Died on +.volumes[85].enable512e"
    assert result.volumes[85].qos.burst_iops == 15000, "Died on +.volumes[85].qos.burst_iops"
    assert result.volumes[85].qos.burst_time == 60, "Died on +.volumes[85].qos.burst_time"
    assert result.volumes[85].qos.min_iops == 100, "Died on +.volumes[85].qos.min_iops"
    assert result.volumes[85].qos.max_iops == 15000, "Died on +.volumes[85].qos.max_iops"
    assert result.volumes[85].name == """snapshots-source-86""", "Died on +.volumes[85].name"
    assert result.volumes[85].volume_access_groups[0] == 4, "Died on +.volumes[85].volume_access_groups[0]"
    assert result.volumes[85].scsi_naadevice_id == """6f47acc1000000006d6964340000024a""", "Died on +.volumes[85].scsi_naadevice_id"
    assert result.volumes[85].total_size == 5000658944, "Died on +.volumes[85].total_size"
    assert result.volumes[85].block_size == 4096, "Died on +.volumes[85].block_size"
    assert result.volumes[85].scsi_euidevice_id == """6d6964340000024af47acc0100000000""", "Died on +.volumes[85].scsi_euidevice_id"
    assert result.volumes[85].volume_id == 586, "Died on +.volumes[85].volume_id"
    assert result.volumes[85].access == """readWrite""", "Died on +.volumes[85].access"
    assert result.volumes[85].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-86.586""", "Died on +.volumes[85].iqn"
    assert result.volumes[85].slice_count == 1, "Died on +.volumes[85].slice_count"
    assert type(result.volumes[85].attributes) is dict, "Died on .volumes[85].attributes"
    assert result.volumes[85].volume_pairs[0].volume_pair_uuid == UUID("92c4e83f-316b-457d-8236-be9f485396f8"), "Died on .volumes[85].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[85].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[85].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[85].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[85].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[85].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[85].volume_pairs[0].remote_replication.state"
    assert result.volumes[85].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[85].volume_pairs[0].remote_replication.mode"
    assert result.volumes[85].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[85].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[85].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[85].volume_pairs[0].cluster_pair_id"
    assert result.volumes[85].volume_pairs[0].remote_volume_id == 1086, "Died on +.volumes[85].volume_pairs[0].remote_volume_id"
    assert result.volumes[85].volume_pairs[0].remote_volume_name == """snap-target-86""", "Died on +.volumes[85].volume_pairs[0].remote_volume_name"
    assert result.volumes[85].volume_pairs[0].remote_slice_id == 1086, "Died on +.volumes[85].volume_pairs[0].remote_slice_id"
    assert result.volumes[85].account_id == 4, "Died on +.volumes[85].account_id"
    assert result.volumes[85].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[85].create_time"
    assert result.volumes[85].virtual_volume_id is None, "Died on .volumes[85].virtual_volume_id"
    assert result.volumes[84].status == """active""", "Died on +.volumes[84].status"
    assert result.volumes[84].enable512e == False, "Died on +.volumes[84].enable512e"
    assert result.volumes[84].qos.burst_iops == 15000, "Died on +.volumes[84].qos.burst_iops"
    assert result.volumes[84].qos.burst_time == 60, "Died on +.volumes[84].qos.burst_time"
    assert result.volumes[84].qos.min_iops == 100, "Died on +.volumes[84].qos.min_iops"
    assert result.volumes[84].qos.max_iops == 15000, "Died on +.volumes[84].qos.max_iops"
    assert result.volumes[84].name == """snapshots-source-85""", "Died on +.volumes[84].name"
    assert result.volumes[84].volume_access_groups[0] == 4, "Died on +.volumes[84].volume_access_groups[0]"
    assert result.volumes[84].scsi_naadevice_id == """6f47acc1000000006d69643400000249""", "Died on +.volumes[84].scsi_naadevice_id"
    assert result.volumes[84].total_size == 5000658944, "Died on +.volumes[84].total_size"
    assert result.volumes[84].block_size == 4096, "Died on +.volumes[84].block_size"
    assert result.volumes[84].scsi_euidevice_id == """6d69643400000249f47acc0100000000""", "Died on +.volumes[84].scsi_euidevice_id"
    assert result.volumes[84].volume_id == 585, "Died on +.volumes[84].volume_id"
    assert result.volumes[84].access == """readWrite""", "Died on +.volumes[84].access"
    assert result.volumes[84].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-85.585""", "Died on +.volumes[84].iqn"
    assert result.volumes[84].slice_count == 1, "Died on +.volumes[84].slice_count"
    assert type(result.volumes[84].attributes) is dict, "Died on .volumes[84].attributes"
    assert result.volumes[84].volume_pairs[0].volume_pair_uuid == UUID("a73cea85-3b96-4e2a-b56e-b7aa168eb81e"), "Died on .volumes[84].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[84].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[84].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[84].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[84].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[84].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[84].volume_pairs[0].remote_replication.state"
    assert result.volumes[84].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[84].volume_pairs[0].remote_replication.mode"
    assert result.volumes[84].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[84].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[84].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[84].volume_pairs[0].cluster_pair_id"
    assert result.volumes[84].volume_pairs[0].remote_volume_id == 1085, "Died on +.volumes[84].volume_pairs[0].remote_volume_id"
    assert result.volumes[84].volume_pairs[0].remote_volume_name == """snap-target-85""", "Died on +.volumes[84].volume_pairs[0].remote_volume_name"
    assert result.volumes[84].volume_pairs[0].remote_slice_id == 1085, "Died on +.volumes[84].volume_pairs[0].remote_slice_id"
    assert result.volumes[84].account_id == 4, "Died on +.volumes[84].account_id"
    assert result.volumes[84].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[84].create_time"
    assert result.volumes[84].virtual_volume_id is None, "Died on .volumes[84].virtual_volume_id"
    assert result.volumes[83].status == """active""", "Died on +.volumes[83].status"
    assert result.volumes[83].enable512e == False, "Died on +.volumes[83].enable512e"
    assert result.volumes[83].qos.burst_iops == 15000, "Died on +.volumes[83].qos.burst_iops"
    assert result.volumes[83].qos.burst_time == 60, "Died on +.volumes[83].qos.burst_time"
    assert result.volumes[83].qos.min_iops == 100, "Died on +.volumes[83].qos.min_iops"
    assert result.volumes[83].qos.max_iops == 15000, "Died on +.volumes[83].qos.max_iops"
    assert result.volumes[83].name == """snapshots-source-84""", "Died on +.volumes[83].name"
    assert result.volumes[83].volume_access_groups[0] == 4, "Died on +.volumes[83].volume_access_groups[0]"
    assert result.volumes[83].scsi_naadevice_id == """6f47acc1000000006d69643400000248""", "Died on +.volumes[83].scsi_naadevice_id"
    assert result.volumes[83].total_size == 5000658944, "Died on +.volumes[83].total_size"
    assert result.volumes[83].block_size == 4096, "Died on +.volumes[83].block_size"
    assert result.volumes[83].scsi_euidevice_id == """6d69643400000248f47acc0100000000""", "Died on +.volumes[83].scsi_euidevice_id"
    assert result.volumes[83].volume_id == 584, "Died on +.volumes[83].volume_id"
    assert result.volumes[83].access == """readWrite""", "Died on +.volumes[83].access"
    assert result.volumes[83].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-84.584""", "Died on +.volumes[83].iqn"
    assert result.volumes[83].slice_count == 1, "Died on +.volumes[83].slice_count"
    assert type(result.volumes[83].attributes) is dict, "Died on .volumes[83].attributes"
    assert result.volumes[83].volume_pairs[0].volume_pair_uuid == UUID("713e8d50-3d5e-41cf-b91d-eb2a136c0dec"), "Died on .volumes[83].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[83].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[83].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[83].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[83].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[83].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[83].volume_pairs[0].remote_replication.state"
    assert result.volumes[83].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[83].volume_pairs[0].remote_replication.mode"
    assert result.volumes[83].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[83].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[83].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[83].volume_pairs[0].cluster_pair_id"
    assert result.volumes[83].volume_pairs[0].remote_volume_id == 1084, "Died on +.volumes[83].volume_pairs[0].remote_volume_id"
    assert result.volumes[83].volume_pairs[0].remote_volume_name == """snap-target-84""", "Died on +.volumes[83].volume_pairs[0].remote_volume_name"
    assert result.volumes[83].volume_pairs[0].remote_slice_id == 1084, "Died on +.volumes[83].volume_pairs[0].remote_slice_id"
    assert result.volumes[83].account_id == 4, "Died on +.volumes[83].account_id"
    assert result.volumes[83].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[83].create_time"
    assert result.volumes[83].virtual_volume_id is None, "Died on .volumes[83].virtual_volume_id"
    assert result.volumes[82].status == """active""", "Died on +.volumes[82].status"
    assert result.volumes[82].enable512e == False, "Died on +.volumes[82].enable512e"
    assert result.volumes[82].qos.burst_iops == 15000, "Died on +.volumes[82].qos.burst_iops"
    assert result.volumes[82].qos.burst_time == 60, "Died on +.volumes[82].qos.burst_time"
    assert result.volumes[82].qos.min_iops == 100, "Died on +.volumes[82].qos.min_iops"
    assert result.volumes[82].qos.max_iops == 15000, "Died on +.volumes[82].qos.max_iops"
    assert result.volumes[82].name == """snapshots-source-83""", "Died on +.volumes[82].name"
    assert result.volumes[82].volume_access_groups[0] == 4, "Died on +.volumes[82].volume_access_groups[0]"
    assert result.volumes[82].scsi_naadevice_id == """6f47acc1000000006d69643400000247""", "Died on +.volumes[82].scsi_naadevice_id"
    assert result.volumes[82].total_size == 5000658944, "Died on +.volumes[82].total_size"
    assert result.volumes[82].block_size == 4096, "Died on +.volumes[82].block_size"
    assert result.volumes[82].scsi_euidevice_id == """6d69643400000247f47acc0100000000""", "Died on +.volumes[82].scsi_euidevice_id"
    assert result.volumes[82].volume_id == 583, "Died on +.volumes[82].volume_id"
    assert result.volumes[82].access == """readWrite""", "Died on +.volumes[82].access"
    assert result.volumes[82].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-83.583""", "Died on +.volumes[82].iqn"
    assert result.volumes[82].slice_count == 1, "Died on +.volumes[82].slice_count"
    assert type(result.volumes[82].attributes) is dict, "Died on .volumes[82].attributes"
    assert result.volumes[82].volume_pairs[0].volume_pair_uuid == UUID("7a2ce68d-e8bc-4e75-87ae-007080571c67"), "Died on .volumes[82].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[82].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[82].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[82].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[82].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[82].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[82].volume_pairs[0].remote_replication.state"
    assert result.volumes[82].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[82].volume_pairs[0].remote_replication.mode"
    assert result.volumes[82].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[82].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[82].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[82].volume_pairs[0].cluster_pair_id"
    assert result.volumes[82].volume_pairs[0].remote_volume_id == 1083, "Died on +.volumes[82].volume_pairs[0].remote_volume_id"
    assert result.volumes[82].volume_pairs[0].remote_volume_name == """snap-target-83""", "Died on +.volumes[82].volume_pairs[0].remote_volume_name"
    assert result.volumes[82].volume_pairs[0].remote_slice_id == 1083, "Died on +.volumes[82].volume_pairs[0].remote_slice_id"
    assert result.volumes[82].account_id == 4, "Died on +.volumes[82].account_id"
    assert result.volumes[82].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[82].create_time"
    assert result.volumes[82].virtual_volume_id is None, "Died on .volumes[82].virtual_volume_id"
    assert result.volumes[81].status == """active""", "Died on +.volumes[81].status"
    assert result.volumes[81].enable512e == False, "Died on +.volumes[81].enable512e"
    assert result.volumes[81].qos.burst_iops == 15000, "Died on +.volumes[81].qos.burst_iops"
    assert result.volumes[81].qos.burst_time == 60, "Died on +.volumes[81].qos.burst_time"
    assert result.volumes[81].qos.min_iops == 100, "Died on +.volumes[81].qos.min_iops"
    assert result.volumes[81].qos.max_iops == 15000, "Died on +.volumes[81].qos.max_iops"
    assert result.volumes[81].name == """snapshots-source-82""", "Died on +.volumes[81].name"
    assert result.volumes[81].volume_access_groups[0] == 4, "Died on +.volumes[81].volume_access_groups[0]"
    assert result.volumes[81].scsi_naadevice_id == """6f47acc1000000006d69643400000246""", "Died on +.volumes[81].scsi_naadevice_id"
    assert result.volumes[81].total_size == 5000658944, "Died on +.volumes[81].total_size"
    assert result.volumes[81].block_size == 4096, "Died on +.volumes[81].block_size"
    assert result.volumes[81].scsi_euidevice_id == """6d69643400000246f47acc0100000000""", "Died on +.volumes[81].scsi_euidevice_id"
    assert result.volumes[81].volume_id == 582, "Died on +.volumes[81].volume_id"
    assert result.volumes[81].access == """readWrite""", "Died on +.volumes[81].access"
    assert result.volumes[81].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-82.582""", "Died on +.volumes[81].iqn"
    assert result.volumes[81].slice_count == 1, "Died on +.volumes[81].slice_count"
    assert type(result.volumes[81].attributes) is dict, "Died on .volumes[81].attributes"
    assert result.volumes[81].volume_pairs[0].volume_pair_uuid == UUID("3c5e5815-8547-40ae-8a5d-ab5d9f516fca"), "Died on .volumes[81].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[81].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[81].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[81].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[81].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[81].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[81].volume_pairs[0].remote_replication.state"
    assert result.volumes[81].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[81].volume_pairs[0].remote_replication.mode"
    assert result.volumes[81].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[81].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[81].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[81].volume_pairs[0].cluster_pair_id"
    assert result.volumes[81].volume_pairs[0].remote_volume_id == 1082, "Died on +.volumes[81].volume_pairs[0].remote_volume_id"
    assert result.volumes[81].volume_pairs[0].remote_volume_name == """snap-target-82""", "Died on +.volumes[81].volume_pairs[0].remote_volume_name"
    assert result.volumes[81].volume_pairs[0].remote_slice_id == 1082, "Died on +.volumes[81].volume_pairs[0].remote_slice_id"
    assert result.volumes[81].account_id == 4, "Died on +.volumes[81].account_id"
    assert result.volumes[81].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[81].create_time"
    assert result.volumes[81].virtual_volume_id is None, "Died on .volumes[81].virtual_volume_id"
    assert result.volumes[80].status == """active""", "Died on +.volumes[80].status"
    assert result.volumes[80].enable512e == False, "Died on +.volumes[80].enable512e"
    assert result.volumes[80].qos.burst_iops == 15000, "Died on +.volumes[80].qos.burst_iops"
    assert result.volumes[80].qos.burst_time == 60, "Died on +.volumes[80].qos.burst_time"
    assert result.volumes[80].qos.min_iops == 100, "Died on +.volumes[80].qos.min_iops"
    assert result.volumes[80].qos.max_iops == 15000, "Died on +.volumes[80].qos.max_iops"
    assert result.volumes[80].name == """snapshots-source-81""", "Died on +.volumes[80].name"
    assert result.volumes[80].volume_access_groups[0] == 4, "Died on +.volumes[80].volume_access_groups[0]"
    assert result.volumes[80].scsi_naadevice_id == """6f47acc1000000006d69643400000245""", "Died on +.volumes[80].scsi_naadevice_id"
    assert result.volumes[80].total_size == 5000658944, "Died on +.volumes[80].total_size"
    assert result.volumes[80].block_size == 4096, "Died on +.volumes[80].block_size"
    assert result.volumes[80].scsi_euidevice_id == """6d69643400000245f47acc0100000000""", "Died on +.volumes[80].scsi_euidevice_id"
    assert result.volumes[80].volume_id == 581, "Died on +.volumes[80].volume_id"
    assert result.volumes[80].access == """readWrite""", "Died on +.volumes[80].access"
    assert result.volumes[80].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-81.581""", "Died on +.volumes[80].iqn"
    assert result.volumes[80].slice_count == 1, "Died on +.volumes[80].slice_count"
    assert type(result.volumes[80].attributes) is dict, "Died on .volumes[80].attributes"
    assert result.volumes[80].volume_pairs[0].volume_pair_uuid == UUID("05540442-8806-41a7-aa63-65a946e9f736"), "Died on .volumes[80].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[80].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[80].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[80].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[80].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[80].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[80].volume_pairs[0].remote_replication.state"
    assert result.volumes[80].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[80].volume_pairs[0].remote_replication.mode"
    assert result.volumes[80].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[80].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[80].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[80].volume_pairs[0].cluster_pair_id"
    assert result.volumes[80].volume_pairs[0].remote_volume_id == 1081, "Died on +.volumes[80].volume_pairs[0].remote_volume_id"
    assert result.volumes[80].volume_pairs[0].remote_volume_name == """snap-target-81""", "Died on +.volumes[80].volume_pairs[0].remote_volume_name"
    assert result.volumes[80].volume_pairs[0].remote_slice_id == 1081, "Died on +.volumes[80].volume_pairs[0].remote_slice_id"
    assert result.volumes[80].account_id == 4, "Died on +.volumes[80].account_id"
    assert result.volumes[80].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[80].create_time"
    assert result.volumes[80].virtual_volume_id is None, "Died on .volumes[80].virtual_volume_id"
    assert result.volumes[79].status == """active""", "Died on +.volumes[79].status"
    assert result.volumes[79].enable512e == False, "Died on +.volumes[79].enable512e"
    assert result.volumes[79].qos.burst_iops == 15000, "Died on +.volumes[79].qos.burst_iops"
    assert result.volumes[79].qos.burst_time == 60, "Died on +.volumes[79].qos.burst_time"
    assert result.volumes[79].qos.min_iops == 100, "Died on +.volumes[79].qos.min_iops"
    assert result.volumes[79].qos.max_iops == 15000, "Died on +.volumes[79].qos.max_iops"
    assert result.volumes[79].name == """snapshots-source-80""", "Died on +.volumes[79].name"
    assert result.volumes[79].volume_access_groups[0] == 4, "Died on +.volumes[79].volume_access_groups[0]"
    assert result.volumes[79].scsi_naadevice_id == """6f47acc1000000006d69643400000244""", "Died on +.volumes[79].scsi_naadevice_id"
    assert result.volumes[79].total_size == 5000658944, "Died on +.volumes[79].total_size"
    assert result.volumes[79].block_size == 4096, "Died on +.volumes[79].block_size"
    assert result.volumes[79].scsi_euidevice_id == """6d69643400000244f47acc0100000000""", "Died on +.volumes[79].scsi_euidevice_id"
    assert result.volumes[79].volume_id == 580, "Died on +.volumes[79].volume_id"
    assert result.volumes[79].access == """readWrite""", "Died on +.volumes[79].access"
    assert result.volumes[79].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-80.580""", "Died on +.volumes[79].iqn"
    assert result.volumes[79].slice_count == 1, "Died on +.volumes[79].slice_count"
    assert type(result.volumes[79].attributes) is dict, "Died on .volumes[79].attributes"
    assert result.volumes[79].volume_pairs[0].volume_pair_uuid == UUID("4f4c34db-6336-446e-a5e6-354660d50650"), "Died on .volumes[79].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[79].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[79].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[79].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[79].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[79].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[79].volume_pairs[0].remote_replication.state"
    assert result.volumes[79].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[79].volume_pairs[0].remote_replication.mode"
    assert result.volumes[79].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[79].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[79].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[79].volume_pairs[0].cluster_pair_id"
    assert result.volumes[79].volume_pairs[0].remote_volume_id == 1080, "Died on +.volumes[79].volume_pairs[0].remote_volume_id"
    assert result.volumes[79].volume_pairs[0].remote_volume_name == """snap-target-80""", "Died on +.volumes[79].volume_pairs[0].remote_volume_name"
    assert result.volumes[79].volume_pairs[0].remote_slice_id == 1080, "Died on +.volumes[79].volume_pairs[0].remote_slice_id"
    assert result.volumes[79].account_id == 4, "Died on +.volumes[79].account_id"
    assert result.volumes[79].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[79].create_time"
    assert result.volumes[79].virtual_volume_id is None, "Died on .volumes[79].virtual_volume_id"
    assert result.volumes[78].status == """active""", "Died on +.volumes[78].status"
    assert result.volumes[78].enable512e == False, "Died on +.volumes[78].enable512e"
    assert result.volumes[78].qos.burst_iops == 15000, "Died on +.volumes[78].qos.burst_iops"
    assert result.volumes[78].qos.burst_time == 60, "Died on +.volumes[78].qos.burst_time"
    assert result.volumes[78].qos.min_iops == 100, "Died on +.volumes[78].qos.min_iops"
    assert result.volumes[78].qos.max_iops == 15000, "Died on +.volumes[78].qos.max_iops"
    assert result.volumes[78].name == """snapshots-source-79""", "Died on +.volumes[78].name"
    assert result.volumes[78].volume_access_groups[0] == 4, "Died on +.volumes[78].volume_access_groups[0]"
    assert result.volumes[78].scsi_naadevice_id == """6f47acc1000000006d69643400000243""", "Died on +.volumes[78].scsi_naadevice_id"
    assert result.volumes[78].total_size == 5000658944, "Died on +.volumes[78].total_size"
    assert result.volumes[78].block_size == 4096, "Died on +.volumes[78].block_size"
    assert result.volumes[78].scsi_euidevice_id == """6d69643400000243f47acc0100000000""", "Died on +.volumes[78].scsi_euidevice_id"
    assert result.volumes[78].volume_id == 579, "Died on +.volumes[78].volume_id"
    assert result.volumes[78].access == """readWrite""", "Died on +.volumes[78].access"
    assert result.volumes[78].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-79.579""", "Died on +.volumes[78].iqn"
    assert result.volumes[78].slice_count == 1, "Died on +.volumes[78].slice_count"
    assert type(result.volumes[78].attributes) is dict, "Died on .volumes[78].attributes"
    assert result.volumes[78].volume_pairs[0].volume_pair_uuid == UUID("b215c6b6-b068-4996-88c8-1dfd2cc0d4d6"), "Died on .volumes[78].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[78].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[78].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[78].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[78].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[78].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[78].volume_pairs[0].remote_replication.state"
    assert result.volumes[78].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[78].volume_pairs[0].remote_replication.mode"
    assert result.volumes[78].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[78].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[78].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[78].volume_pairs[0].cluster_pair_id"
    assert result.volumes[78].volume_pairs[0].remote_volume_id == 1079, "Died on +.volumes[78].volume_pairs[0].remote_volume_id"
    assert result.volumes[78].volume_pairs[0].remote_volume_name == """snap-target-79""", "Died on +.volumes[78].volume_pairs[0].remote_volume_name"
    assert result.volumes[78].volume_pairs[0].remote_slice_id == 1079, "Died on +.volumes[78].volume_pairs[0].remote_slice_id"
    assert result.volumes[78].account_id == 4, "Died on +.volumes[78].account_id"
    assert result.volumes[78].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[78].create_time"
    assert result.volumes[78].virtual_volume_id is None, "Died on .volumes[78].virtual_volume_id"
    assert result.volumes[77].status == """active""", "Died on +.volumes[77].status"
    assert result.volumes[77].enable512e == False, "Died on +.volumes[77].enable512e"
    assert result.volumes[77].qos.burst_iops == 15000, "Died on +.volumes[77].qos.burst_iops"
    assert result.volumes[77].qos.burst_time == 60, "Died on +.volumes[77].qos.burst_time"
    assert result.volumes[77].qos.min_iops == 100, "Died on +.volumes[77].qos.min_iops"
    assert result.volumes[77].qos.max_iops == 15000, "Died on +.volumes[77].qos.max_iops"
    assert result.volumes[77].name == """snapshots-source-78""", "Died on +.volumes[77].name"
    assert result.volumes[77].volume_access_groups[0] == 4, "Died on +.volumes[77].volume_access_groups[0]"
    assert result.volumes[77].scsi_naadevice_id == """6f47acc1000000006d69643400000242""", "Died on +.volumes[77].scsi_naadevice_id"
    assert result.volumes[77].total_size == 5000658944, "Died on +.volumes[77].total_size"
    assert result.volumes[77].block_size == 4096, "Died on +.volumes[77].block_size"
    assert result.volumes[77].scsi_euidevice_id == """6d69643400000242f47acc0100000000""", "Died on +.volumes[77].scsi_euidevice_id"
    assert result.volumes[77].volume_id == 578, "Died on +.volumes[77].volume_id"
    assert result.volumes[77].access == """readWrite""", "Died on +.volumes[77].access"
    assert result.volumes[77].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-78.578""", "Died on +.volumes[77].iqn"
    assert result.volumes[77].slice_count == 1, "Died on +.volumes[77].slice_count"
    assert type(result.volumes[77].attributes) is dict, "Died on .volumes[77].attributes"
    assert result.volumes[77].volume_pairs[0].volume_pair_uuid == UUID("ea31eeea-5475-47e8-9770-6623da441f54"), "Died on .volumes[77].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[77].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[77].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[77].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[77].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[77].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[77].volume_pairs[0].remote_replication.state"
    assert result.volumes[77].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[77].volume_pairs[0].remote_replication.mode"
    assert result.volumes[77].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[77].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[77].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[77].volume_pairs[0].cluster_pair_id"
    assert result.volumes[77].volume_pairs[0].remote_volume_id == 1078, "Died on +.volumes[77].volume_pairs[0].remote_volume_id"
    assert result.volumes[77].volume_pairs[0].remote_volume_name == """snap-target-78""", "Died on +.volumes[77].volume_pairs[0].remote_volume_name"
    assert result.volumes[77].volume_pairs[0].remote_slice_id == 1078, "Died on +.volumes[77].volume_pairs[0].remote_slice_id"
    assert result.volumes[77].account_id == 4, "Died on +.volumes[77].account_id"
    assert result.volumes[77].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[77].create_time"
    assert result.volumes[77].virtual_volume_id is None, "Died on .volumes[77].virtual_volume_id"
    assert result.volumes[76].status == """active""", "Died on +.volumes[76].status"
    assert result.volumes[76].enable512e == False, "Died on +.volumes[76].enable512e"
    assert result.volumes[76].qos.burst_iops == 15000, "Died on +.volumes[76].qos.burst_iops"
    assert result.volumes[76].qos.burst_time == 60, "Died on +.volumes[76].qos.burst_time"
    assert result.volumes[76].qos.min_iops == 100, "Died on +.volumes[76].qos.min_iops"
    assert result.volumes[76].qos.max_iops == 15000, "Died on +.volumes[76].qos.max_iops"
    assert result.volumes[76].name == """snapshots-source-77""", "Died on +.volumes[76].name"
    assert result.volumes[76].volume_access_groups[0] == 4, "Died on +.volumes[76].volume_access_groups[0]"
    assert result.volumes[76].scsi_naadevice_id == """6f47acc1000000006d69643400000241""", "Died on +.volumes[76].scsi_naadevice_id"
    assert result.volumes[76].total_size == 5000658944, "Died on +.volumes[76].total_size"
    assert result.volumes[76].block_size == 4096, "Died on +.volumes[76].block_size"
    assert result.volumes[76].scsi_euidevice_id == """6d69643400000241f47acc0100000000""", "Died on +.volumes[76].scsi_euidevice_id"
    assert result.volumes[76].volume_id == 577, "Died on +.volumes[76].volume_id"
    assert result.volumes[76].access == """readWrite""", "Died on +.volumes[76].access"
    assert result.volumes[76].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-77.577""", "Died on +.volumes[76].iqn"
    assert result.volumes[76].slice_count == 1, "Died on +.volumes[76].slice_count"
    assert type(result.volumes[76].attributes) is dict, "Died on .volumes[76].attributes"
    assert result.volumes[76].volume_pairs[0].volume_pair_uuid == UUID("8cceabdc-887f-41eb-9641-61434542a786"), "Died on .volumes[76].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[76].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[76].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[76].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[76].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[76].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[76].volume_pairs[0].remote_replication.state"
    assert result.volumes[76].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[76].volume_pairs[0].remote_replication.mode"
    assert result.volumes[76].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[76].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[76].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[76].volume_pairs[0].cluster_pair_id"
    assert result.volumes[76].volume_pairs[0].remote_volume_id == 1077, "Died on +.volumes[76].volume_pairs[0].remote_volume_id"
    assert result.volumes[76].volume_pairs[0].remote_volume_name == """snap-target-77""", "Died on +.volumes[76].volume_pairs[0].remote_volume_name"
    assert result.volumes[76].volume_pairs[0].remote_slice_id == 1077, "Died on +.volumes[76].volume_pairs[0].remote_slice_id"
    assert result.volumes[76].account_id == 4, "Died on +.volumes[76].account_id"
    assert result.volumes[76].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[76].create_time"
    assert result.volumes[76].virtual_volume_id is None, "Died on .volumes[76].virtual_volume_id"
    assert result.volumes[75].status == """active""", "Died on +.volumes[75].status"
    assert result.volumes[75].enable512e == False, "Died on +.volumes[75].enable512e"
    assert result.volumes[75].qos.burst_iops == 15000, "Died on +.volumes[75].qos.burst_iops"
    assert result.volumes[75].qos.burst_time == 60, "Died on +.volumes[75].qos.burst_time"
    assert result.volumes[75].qos.min_iops == 100, "Died on +.volumes[75].qos.min_iops"
    assert result.volumes[75].qos.max_iops == 15000, "Died on +.volumes[75].qos.max_iops"
    assert result.volumes[75].name == """snapshots-source-76""", "Died on +.volumes[75].name"
    assert result.volumes[75].volume_access_groups[0] == 4, "Died on +.volumes[75].volume_access_groups[0]"
    assert result.volumes[75].scsi_naadevice_id == """6f47acc1000000006d69643400000240""", "Died on +.volumes[75].scsi_naadevice_id"
    assert result.volumes[75].total_size == 5000658944, "Died on +.volumes[75].total_size"
    assert result.volumes[75].block_size == 4096, "Died on +.volumes[75].block_size"
    assert result.volumes[75].scsi_euidevice_id == """6d69643400000240f47acc0100000000""", "Died on +.volumes[75].scsi_euidevice_id"
    assert result.volumes[75].volume_id == 576, "Died on +.volumes[75].volume_id"
    assert result.volumes[75].access == """readWrite""", "Died on +.volumes[75].access"
    assert result.volumes[75].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-76.576""", "Died on +.volumes[75].iqn"
    assert result.volumes[75].slice_count == 1, "Died on +.volumes[75].slice_count"
    assert type(result.volumes[75].attributes) is dict, "Died on .volumes[75].attributes"
    assert result.volumes[75].volume_pairs[0].volume_pair_uuid == UUID("b82bb6e1-4dd0-4958-90c2-b320d45d5bd5"), "Died on .volumes[75].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[75].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[75].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[75].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[75].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[75].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[75].volume_pairs[0].remote_replication.state"
    assert result.volumes[75].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[75].volume_pairs[0].remote_replication.mode"
    assert result.volumes[75].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[75].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[75].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[75].volume_pairs[0].cluster_pair_id"
    assert result.volumes[75].volume_pairs[0].remote_volume_id == 1076, "Died on +.volumes[75].volume_pairs[0].remote_volume_id"
    assert result.volumes[75].volume_pairs[0].remote_volume_name == """snap-target-76""", "Died on +.volumes[75].volume_pairs[0].remote_volume_name"
    assert result.volumes[75].volume_pairs[0].remote_slice_id == 1076, "Died on +.volumes[75].volume_pairs[0].remote_slice_id"
    assert result.volumes[75].account_id == 4, "Died on +.volumes[75].account_id"
    assert result.volumes[75].create_time == """2016-12-30T18:07:05Z""", "Died on +.volumes[75].create_time"
    assert result.volumes[75].virtual_volume_id is None, "Died on .volumes[75].virtual_volume_id"
    assert result.volumes[74].status == """active""", "Died on +.volumes[74].status"
    assert result.volumes[74].enable512e == False, "Died on +.volumes[74].enable512e"
    assert result.volumes[74].qos.burst_iops == 15000, "Died on +.volumes[74].qos.burst_iops"
    assert result.volumes[74].qos.burst_time == 60, "Died on +.volumes[74].qos.burst_time"
    assert result.volumes[74].qos.min_iops == 100, "Died on +.volumes[74].qos.min_iops"
    assert result.volumes[74].qos.max_iops == 15000, "Died on +.volumes[74].qos.max_iops"
    assert result.volumes[74].name == """snapshots-source-75""", "Died on +.volumes[74].name"
    assert result.volumes[74].volume_access_groups[0] == 4, "Died on +.volumes[74].volume_access_groups[0]"
    assert result.volumes[74].scsi_naadevice_id == """6f47acc1000000006d6964340000023f""", "Died on +.volumes[74].scsi_naadevice_id"
    assert result.volumes[74].total_size == 5000658944, "Died on +.volumes[74].total_size"
    assert result.volumes[74].block_size == 4096, "Died on +.volumes[74].block_size"
    assert result.volumes[74].scsi_euidevice_id == """6d6964340000023ff47acc0100000000""", "Died on +.volumes[74].scsi_euidevice_id"
    assert result.volumes[74].volume_id == 575, "Died on +.volumes[74].volume_id"
    assert result.volumes[74].access == """readWrite""", "Died on +.volumes[74].access"
    assert result.volumes[74].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-75.575""", "Died on +.volumes[74].iqn"
    assert result.volumes[74].slice_count == 1, "Died on +.volumes[74].slice_count"
    assert type(result.volumes[74].attributes) is dict, "Died on .volumes[74].attributes"
    assert result.volumes[74].volume_pairs[0].volume_pair_uuid == UUID("fa65bcf6-8542-41b3-937d-e57cdb43bed1"), "Died on .volumes[74].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[74].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[74].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[74].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[74].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[74].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[74].volume_pairs[0].remote_replication.state"
    assert result.volumes[74].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[74].volume_pairs[0].remote_replication.mode"
    assert result.volumes[74].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[74].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[74].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[74].volume_pairs[0].cluster_pair_id"
    assert result.volumes[74].volume_pairs[0].remote_volume_id == 1075, "Died on +.volumes[74].volume_pairs[0].remote_volume_id"
    assert result.volumes[74].volume_pairs[0].remote_volume_name == """snap-target-75""", "Died on +.volumes[74].volume_pairs[0].remote_volume_name"
    assert result.volumes[74].volume_pairs[0].remote_slice_id == 1075, "Died on +.volumes[74].volume_pairs[0].remote_slice_id"
    assert result.volumes[74].account_id == 4, "Died on +.volumes[74].account_id"
    assert result.volumes[74].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[74].create_time"
    assert result.volumes[74].virtual_volume_id is None, "Died on .volumes[74].virtual_volume_id"
    assert result.volumes[73].status == """active""", "Died on +.volumes[73].status"
    assert result.volumes[73].enable512e == False, "Died on +.volumes[73].enable512e"
    assert result.volumes[73].qos.burst_iops == 15000, "Died on +.volumes[73].qos.burst_iops"
    assert result.volumes[73].qos.burst_time == 60, "Died on +.volumes[73].qos.burst_time"
    assert result.volumes[73].qos.min_iops == 100, "Died on +.volumes[73].qos.min_iops"
    assert result.volumes[73].qos.max_iops == 15000, "Died on +.volumes[73].qos.max_iops"
    assert result.volumes[73].name == """snapshots-source-74""", "Died on +.volumes[73].name"
    assert result.volumes[73].volume_access_groups[0] == 4, "Died on +.volumes[73].volume_access_groups[0]"
    assert result.volumes[73].scsi_naadevice_id == """6f47acc1000000006d6964340000023e""", "Died on +.volumes[73].scsi_naadevice_id"
    assert result.volumes[73].total_size == 5000658944, "Died on +.volumes[73].total_size"
    assert result.volumes[73].block_size == 4096, "Died on +.volumes[73].block_size"
    assert result.volumes[73].scsi_euidevice_id == """6d6964340000023ef47acc0100000000""", "Died on +.volumes[73].scsi_euidevice_id"
    assert result.volumes[73].volume_id == 574, "Died on +.volumes[73].volume_id"
    assert result.volumes[73].access == """readWrite""", "Died on +.volumes[73].access"
    assert result.volumes[73].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-74.574""", "Died on +.volumes[73].iqn"
    assert result.volumes[73].slice_count == 1, "Died on +.volumes[73].slice_count"
    assert type(result.volumes[73].attributes) is dict, "Died on .volumes[73].attributes"
    assert result.volumes[73].volume_pairs[0].volume_pair_uuid == UUID("6e5b3fe5-43cd-44f1-9e71-6cb654701373"), "Died on .volumes[73].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[73].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[73].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[73].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[73].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[73].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[73].volume_pairs[0].remote_replication.state"
    assert result.volumes[73].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[73].volume_pairs[0].remote_replication.mode"
    assert result.volumes[73].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[73].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[73].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[73].volume_pairs[0].cluster_pair_id"
    assert result.volumes[73].volume_pairs[0].remote_volume_id == 1074, "Died on +.volumes[73].volume_pairs[0].remote_volume_id"
    assert result.volumes[73].volume_pairs[0].remote_volume_name == """snap-target-74""", "Died on +.volumes[73].volume_pairs[0].remote_volume_name"
    assert result.volumes[73].volume_pairs[0].remote_slice_id == 1074, "Died on +.volumes[73].volume_pairs[0].remote_slice_id"
    assert result.volumes[73].account_id == 4, "Died on +.volumes[73].account_id"
    assert result.volumes[73].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[73].create_time"
    assert result.volumes[73].virtual_volume_id is None, "Died on .volumes[73].virtual_volume_id"
    assert result.volumes[72].status == """active""", "Died on +.volumes[72].status"
    assert result.volumes[72].enable512e == False, "Died on +.volumes[72].enable512e"
    assert result.volumes[72].qos.burst_iops == 15000, "Died on +.volumes[72].qos.burst_iops"
    assert result.volumes[72].qos.burst_time == 60, "Died on +.volumes[72].qos.burst_time"
    assert result.volumes[72].qos.min_iops == 100, "Died on +.volumes[72].qos.min_iops"
    assert result.volumes[72].qos.max_iops == 15000, "Died on +.volumes[72].qos.max_iops"
    assert result.volumes[72].name == """snapshots-source-73""", "Died on +.volumes[72].name"
    assert result.volumes[72].volume_access_groups[0] == 4, "Died on +.volumes[72].volume_access_groups[0]"
    assert result.volumes[72].scsi_naadevice_id == """6f47acc1000000006d6964340000023d""", "Died on +.volumes[72].scsi_naadevice_id"
    assert result.volumes[72].total_size == 5000658944, "Died on +.volumes[72].total_size"
    assert result.volumes[72].block_size == 4096, "Died on +.volumes[72].block_size"
    assert result.volumes[72].scsi_euidevice_id == """6d6964340000023df47acc0100000000""", "Died on +.volumes[72].scsi_euidevice_id"
    assert result.volumes[72].volume_id == 573, "Died on +.volumes[72].volume_id"
    assert result.volumes[72].access == """readWrite""", "Died on +.volumes[72].access"
    assert result.volumes[72].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-73.573""", "Died on +.volumes[72].iqn"
    assert result.volumes[72].slice_count == 1, "Died on +.volumes[72].slice_count"
    assert type(result.volumes[72].attributes) is dict, "Died on .volumes[72].attributes"
    assert result.volumes[72].volume_pairs[0].volume_pair_uuid == UUID("b9523da5-9ff6-4b0f-bb20-5049b4b93df9"), "Died on .volumes[72].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[72].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[72].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[72].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[72].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[72].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[72].volume_pairs[0].remote_replication.state"
    assert result.volumes[72].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[72].volume_pairs[0].remote_replication.mode"
    assert result.volumes[72].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[72].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[72].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[72].volume_pairs[0].cluster_pair_id"
    assert result.volumes[72].volume_pairs[0].remote_volume_id == 1073, "Died on +.volumes[72].volume_pairs[0].remote_volume_id"
    assert result.volumes[72].volume_pairs[0].remote_volume_name == """snap-target-73""", "Died on +.volumes[72].volume_pairs[0].remote_volume_name"
    assert result.volumes[72].volume_pairs[0].remote_slice_id == 1073, "Died on +.volumes[72].volume_pairs[0].remote_slice_id"
    assert result.volumes[72].account_id == 4, "Died on +.volumes[72].account_id"
    assert result.volumes[72].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[72].create_time"
    assert result.volumes[72].virtual_volume_id is None, "Died on .volumes[72].virtual_volume_id"
    assert result.volumes[71].status == """active""", "Died on +.volumes[71].status"
    assert result.volumes[71].enable512e == False, "Died on +.volumes[71].enable512e"
    assert result.volumes[71].qos.burst_iops == 15000, "Died on +.volumes[71].qos.burst_iops"
    assert result.volumes[71].qos.burst_time == 60, "Died on +.volumes[71].qos.burst_time"
    assert result.volumes[71].qos.min_iops == 100, "Died on +.volumes[71].qos.min_iops"
    assert result.volumes[71].qos.max_iops == 15000, "Died on +.volumes[71].qos.max_iops"
    assert result.volumes[71].name == """snapshots-source-72""", "Died on +.volumes[71].name"
    assert result.volumes[71].volume_access_groups[0] == 4, "Died on +.volumes[71].volume_access_groups[0]"
    assert result.volumes[71].scsi_naadevice_id == """6f47acc1000000006d6964340000023c""", "Died on +.volumes[71].scsi_naadevice_id"
    assert result.volumes[71].total_size == 5000658944, "Died on +.volumes[71].total_size"
    assert result.volumes[71].block_size == 4096, "Died on +.volumes[71].block_size"
    assert result.volumes[71].scsi_euidevice_id == """6d6964340000023cf47acc0100000000""", "Died on +.volumes[71].scsi_euidevice_id"
    assert result.volumes[71].volume_id == 572, "Died on +.volumes[71].volume_id"
    assert result.volumes[71].access == """readWrite""", "Died on +.volumes[71].access"
    assert result.volumes[71].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-72.572""", "Died on +.volumes[71].iqn"
    assert result.volumes[71].slice_count == 1, "Died on +.volumes[71].slice_count"
    assert type(result.volumes[71].attributes) is dict, "Died on .volumes[71].attributes"
    assert result.volumes[71].volume_pairs[0].volume_pair_uuid == UUID("14197fd9-38b0-4dd6-b7ca-772573dce586"), "Died on .volumes[71].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[71].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[71].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[71].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[71].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[71].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[71].volume_pairs[0].remote_replication.state"
    assert result.volumes[71].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[71].volume_pairs[0].remote_replication.mode"
    assert result.volumes[71].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[71].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[71].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[71].volume_pairs[0].cluster_pair_id"
    assert result.volumes[71].volume_pairs[0].remote_volume_id == 1072, "Died on +.volumes[71].volume_pairs[0].remote_volume_id"
    assert result.volumes[71].volume_pairs[0].remote_volume_name == """snap-target-72""", "Died on +.volumes[71].volume_pairs[0].remote_volume_name"
    assert result.volumes[71].volume_pairs[0].remote_slice_id == 1072, "Died on +.volumes[71].volume_pairs[0].remote_slice_id"
    assert result.volumes[71].account_id == 4, "Died on +.volumes[71].account_id"
    assert result.volumes[71].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[71].create_time"
    assert result.volumes[71].virtual_volume_id is None, "Died on .volumes[71].virtual_volume_id"
    assert result.volumes[70].status == """active""", "Died on +.volumes[70].status"
    assert result.volumes[70].enable512e == False, "Died on +.volumes[70].enable512e"
    assert result.volumes[70].qos.burst_iops == 15000, "Died on +.volumes[70].qos.burst_iops"
    assert result.volumes[70].qos.burst_time == 60, "Died on +.volumes[70].qos.burst_time"
    assert result.volumes[70].qos.min_iops == 100, "Died on +.volumes[70].qos.min_iops"
    assert result.volumes[70].qos.max_iops == 15000, "Died on +.volumes[70].qos.max_iops"
    assert result.volumes[70].name == """snapshots-source-71""", "Died on +.volumes[70].name"
    assert result.volumes[70].volume_access_groups[0] == 4, "Died on +.volumes[70].volume_access_groups[0]"
    assert result.volumes[70].scsi_naadevice_id == """6f47acc1000000006d6964340000023b""", "Died on +.volumes[70].scsi_naadevice_id"
    assert result.volumes[70].total_size == 5000658944, "Died on +.volumes[70].total_size"
    assert result.volumes[70].block_size == 4096, "Died on +.volumes[70].block_size"
    assert result.volumes[70].scsi_euidevice_id == """6d6964340000023bf47acc0100000000""", "Died on +.volumes[70].scsi_euidevice_id"
    assert result.volumes[70].volume_id == 571, "Died on +.volumes[70].volume_id"
    assert result.volumes[70].access == """readWrite""", "Died on +.volumes[70].access"
    assert result.volumes[70].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-71.571""", "Died on +.volumes[70].iqn"
    assert result.volumes[70].slice_count == 1, "Died on +.volumes[70].slice_count"
    assert type(result.volumes[70].attributes) is dict, "Died on .volumes[70].attributes"
    assert result.volumes[70].volume_pairs[0].volume_pair_uuid == UUID("0506cbad-3f60-4485-bd84-31da90a5f3fb"), "Died on .volumes[70].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[70].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[70].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[70].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[70].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[70].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[70].volume_pairs[0].remote_replication.state"
    assert result.volumes[70].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[70].volume_pairs[0].remote_replication.mode"
    assert result.volumes[70].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[70].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[70].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[70].volume_pairs[0].cluster_pair_id"
    assert result.volumes[70].volume_pairs[0].remote_volume_id == 1071, "Died on +.volumes[70].volume_pairs[0].remote_volume_id"
    assert result.volumes[70].volume_pairs[0].remote_volume_name == """snap-target-71""", "Died on +.volumes[70].volume_pairs[0].remote_volume_name"
    assert result.volumes[70].volume_pairs[0].remote_slice_id == 1071, "Died on +.volumes[70].volume_pairs[0].remote_slice_id"
    assert result.volumes[70].account_id == 4, "Died on +.volumes[70].account_id"
    assert result.volumes[70].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[70].create_time"
    assert result.volumes[70].virtual_volume_id is None, "Died on .volumes[70].virtual_volume_id"
    assert result.volumes[69].status == """active""", "Died on +.volumes[69].status"
    assert result.volumes[69].enable512e == False, "Died on +.volumes[69].enable512e"
    assert result.volumes[69].qos.burst_iops == 15000, "Died on +.volumes[69].qos.burst_iops"
    assert result.volumes[69].qos.burst_time == 60, "Died on +.volumes[69].qos.burst_time"
    assert result.volumes[69].qos.min_iops == 100, "Died on +.volumes[69].qos.min_iops"
    assert result.volumes[69].qos.max_iops == 15000, "Died on +.volumes[69].qos.max_iops"
    assert result.volumes[69].name == """snapshots-source-70""", "Died on +.volumes[69].name"
    assert result.volumes[69].volume_access_groups[0] == 4, "Died on +.volumes[69].volume_access_groups[0]"
    assert result.volumes[69].scsi_naadevice_id == """6f47acc1000000006d6964340000023a""", "Died on +.volumes[69].scsi_naadevice_id"
    assert result.volumes[69].total_size == 5000658944, "Died on +.volumes[69].total_size"
    assert result.volumes[69].block_size == 4096, "Died on +.volumes[69].block_size"
    assert result.volumes[69].scsi_euidevice_id == """6d6964340000023af47acc0100000000""", "Died on +.volumes[69].scsi_euidevice_id"
    assert result.volumes[69].volume_id == 570, "Died on +.volumes[69].volume_id"
    assert result.volumes[69].access == """readWrite""", "Died on +.volumes[69].access"
    assert result.volumes[69].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-70.570""", "Died on +.volumes[69].iqn"
    assert result.volumes[69].slice_count == 1, "Died on +.volumes[69].slice_count"
    assert type(result.volumes[69].attributes) is dict, "Died on .volumes[69].attributes"
    assert result.volumes[69].volume_pairs[0].volume_pair_uuid == UUID("51af4b49-c731-4324-a7bc-bf5dbb673cac"), "Died on .volumes[69].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[69].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[69].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[69].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[69].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[69].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[69].volume_pairs[0].remote_replication.state"
    assert result.volumes[69].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[69].volume_pairs[0].remote_replication.mode"
    assert result.volumes[69].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[69].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[69].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[69].volume_pairs[0].cluster_pair_id"
    assert result.volumes[69].volume_pairs[0].remote_volume_id == 1070, "Died on +.volumes[69].volume_pairs[0].remote_volume_id"
    assert result.volumes[69].volume_pairs[0].remote_volume_name == """snap-target-70""", "Died on +.volumes[69].volume_pairs[0].remote_volume_name"
    assert result.volumes[69].volume_pairs[0].remote_slice_id == 1070, "Died on +.volumes[69].volume_pairs[0].remote_slice_id"
    assert result.volumes[69].account_id == 4, "Died on +.volumes[69].account_id"
    assert result.volumes[69].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[69].create_time"
    assert result.volumes[69].virtual_volume_id is None, "Died on .volumes[69].virtual_volume_id"
    assert result.volumes[68].status == """active""", "Died on +.volumes[68].status"
    assert result.volumes[68].enable512e == False, "Died on +.volumes[68].enable512e"
    assert result.volumes[68].qos.burst_iops == 15000, "Died on +.volumes[68].qos.burst_iops"
    assert result.volumes[68].qos.burst_time == 60, "Died on +.volumes[68].qos.burst_time"
    assert result.volumes[68].qos.min_iops == 100, "Died on +.volumes[68].qos.min_iops"
    assert result.volumes[68].qos.max_iops == 15000, "Died on +.volumes[68].qos.max_iops"
    assert result.volumes[68].name == """snapshots-source-69""", "Died on +.volumes[68].name"
    assert result.volumes[68].volume_access_groups[0] == 4, "Died on +.volumes[68].volume_access_groups[0]"
    assert result.volumes[68].scsi_naadevice_id == """6f47acc1000000006d69643400000239""", "Died on +.volumes[68].scsi_naadevice_id"
    assert result.volumes[68].total_size == 5000658944, "Died on +.volumes[68].total_size"
    assert result.volumes[68].block_size == 4096, "Died on +.volumes[68].block_size"
    assert result.volumes[68].scsi_euidevice_id == """6d69643400000239f47acc0100000000""", "Died on +.volumes[68].scsi_euidevice_id"
    assert result.volumes[68].volume_id == 569, "Died on +.volumes[68].volume_id"
    assert result.volumes[68].access == """readWrite""", "Died on +.volumes[68].access"
    assert result.volumes[68].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-69.569""", "Died on +.volumes[68].iqn"
    assert result.volumes[68].slice_count == 1, "Died on +.volumes[68].slice_count"
    assert type(result.volumes[68].attributes) is dict, "Died on .volumes[68].attributes"
    assert result.volumes[68].volume_pairs[0].volume_pair_uuid == UUID("ab2d4310-b91d-4af4-815b-7bb6699802e4"), "Died on .volumes[68].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[68].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[68].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[68].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[68].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[68].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[68].volume_pairs[0].remote_replication.state"
    assert result.volumes[68].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[68].volume_pairs[0].remote_replication.mode"
    assert result.volumes[68].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[68].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[68].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[68].volume_pairs[0].cluster_pair_id"
    assert result.volumes[68].volume_pairs[0].remote_volume_id == 1069, "Died on +.volumes[68].volume_pairs[0].remote_volume_id"
    assert result.volumes[68].volume_pairs[0].remote_volume_name == """snap-target-69""", "Died on +.volumes[68].volume_pairs[0].remote_volume_name"
    assert result.volumes[68].volume_pairs[0].remote_slice_id == 1069, "Died on +.volumes[68].volume_pairs[0].remote_slice_id"
    assert result.volumes[68].account_id == 4, "Died on +.volumes[68].account_id"
    assert result.volumes[68].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[68].create_time"
    assert result.volumes[68].virtual_volume_id is None, "Died on .volumes[68].virtual_volume_id"
    assert result.volumes[67].status == """active""", "Died on +.volumes[67].status"
    assert result.volumes[67].enable512e == False, "Died on +.volumes[67].enable512e"
    assert result.volumes[67].qos.burst_iops == 15000, "Died on +.volumes[67].qos.burst_iops"
    assert result.volumes[67].qos.burst_time == 60, "Died on +.volumes[67].qos.burst_time"
    assert result.volumes[67].qos.min_iops == 100, "Died on +.volumes[67].qos.min_iops"
    assert result.volumes[67].qos.max_iops == 15000, "Died on +.volumes[67].qos.max_iops"
    assert result.volumes[67].name == """snapshots-source-68""", "Died on +.volumes[67].name"
    assert result.volumes[67].volume_access_groups[0] == 4, "Died on +.volumes[67].volume_access_groups[0]"
    assert result.volumes[67].scsi_naadevice_id == """6f47acc1000000006d69643400000238""", "Died on +.volumes[67].scsi_naadevice_id"
    assert result.volumes[67].total_size == 5000658944, "Died on +.volumes[67].total_size"
    assert result.volumes[67].block_size == 4096, "Died on +.volumes[67].block_size"
    assert result.volumes[67].scsi_euidevice_id == """6d69643400000238f47acc0100000000""", "Died on +.volumes[67].scsi_euidevice_id"
    assert result.volumes[67].volume_id == 568, "Died on +.volumes[67].volume_id"
    assert result.volumes[67].access == """readWrite""", "Died on +.volumes[67].access"
    assert result.volumes[67].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-68.568""", "Died on +.volumes[67].iqn"
    assert result.volumes[67].slice_count == 1, "Died on +.volumes[67].slice_count"
    assert type(result.volumes[67].attributes) is dict, "Died on .volumes[67].attributes"
    assert result.volumes[67].volume_pairs[0].volume_pair_uuid == UUID("69b3525a-bb33-47a6-ad0d-e54354b87319"), "Died on .volumes[67].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[67].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[67].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[67].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[67].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[67].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[67].volume_pairs[0].remote_replication.state"
    assert result.volumes[67].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[67].volume_pairs[0].remote_replication.mode"
    assert result.volumes[67].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[67].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[67].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[67].volume_pairs[0].cluster_pair_id"
    assert result.volumes[67].volume_pairs[0].remote_volume_id == 1068, "Died on +.volumes[67].volume_pairs[0].remote_volume_id"
    assert result.volumes[67].volume_pairs[0].remote_volume_name == """snap-target-68""", "Died on +.volumes[67].volume_pairs[0].remote_volume_name"
    assert result.volumes[67].volume_pairs[0].remote_slice_id == 1068, "Died on +.volumes[67].volume_pairs[0].remote_slice_id"
    assert result.volumes[67].account_id == 4, "Died on +.volumes[67].account_id"
    assert result.volumes[67].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[67].create_time"
    assert result.volumes[67].virtual_volume_id is None, "Died on .volumes[67].virtual_volume_id"
    assert result.volumes[66].status == """active""", "Died on +.volumes[66].status"
    assert result.volumes[66].enable512e == False, "Died on +.volumes[66].enable512e"
    assert result.volumes[66].qos.burst_iops == 15000, "Died on +.volumes[66].qos.burst_iops"
    assert result.volumes[66].qos.burst_time == 60, "Died on +.volumes[66].qos.burst_time"
    assert result.volumes[66].qos.min_iops == 100, "Died on +.volumes[66].qos.min_iops"
    assert result.volumes[66].qos.max_iops == 15000, "Died on +.volumes[66].qos.max_iops"
    assert result.volumes[66].name == """snapshots-source-67""", "Died on +.volumes[66].name"
    assert result.volumes[66].volume_access_groups[0] == 4, "Died on +.volumes[66].volume_access_groups[0]"
    assert result.volumes[66].scsi_naadevice_id == """6f47acc1000000006d69643400000237""", "Died on +.volumes[66].scsi_naadevice_id"
    assert result.volumes[66].total_size == 5000658944, "Died on +.volumes[66].total_size"
    assert result.volumes[66].block_size == 4096, "Died on +.volumes[66].block_size"
    assert result.volumes[66].scsi_euidevice_id == """6d69643400000237f47acc0100000000""", "Died on +.volumes[66].scsi_euidevice_id"
    assert result.volumes[66].volume_id == 567, "Died on +.volumes[66].volume_id"
    assert result.volumes[66].access == """readWrite""", "Died on +.volumes[66].access"
    assert result.volumes[66].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-67.567""", "Died on +.volumes[66].iqn"
    assert result.volumes[66].slice_count == 1, "Died on +.volumes[66].slice_count"
    assert type(result.volumes[66].attributes) is dict, "Died on .volumes[66].attributes"
    assert result.volumes[66].volume_pairs[0].volume_pair_uuid == UUID("aa3e75fa-c8ba-470d-810b-20eb68e56350"), "Died on .volumes[66].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[66].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[66].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[66].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[66].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[66].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[66].volume_pairs[0].remote_replication.state"
    assert result.volumes[66].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[66].volume_pairs[0].remote_replication.mode"
    assert result.volumes[66].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[66].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[66].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[66].volume_pairs[0].cluster_pair_id"
    assert result.volumes[66].volume_pairs[0].remote_volume_id == 1067, "Died on +.volumes[66].volume_pairs[0].remote_volume_id"
    assert result.volumes[66].volume_pairs[0].remote_volume_name == """snap-target-67""", "Died on +.volumes[66].volume_pairs[0].remote_volume_name"
    assert result.volumes[66].volume_pairs[0].remote_slice_id == 1067, "Died on +.volumes[66].volume_pairs[0].remote_slice_id"
    assert result.volumes[66].account_id == 4, "Died on +.volumes[66].account_id"
    assert result.volumes[66].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[66].create_time"
    assert result.volumes[66].virtual_volume_id is None, "Died on .volumes[66].virtual_volume_id"
    assert result.volumes[65].status == """active""", "Died on +.volumes[65].status"
    assert result.volumes[65].enable512e == False, "Died on +.volumes[65].enable512e"
    assert result.volumes[65].qos.burst_iops == 15000, "Died on +.volumes[65].qos.burst_iops"
    assert result.volumes[65].qos.burst_time == 60, "Died on +.volumes[65].qos.burst_time"
    assert result.volumes[65].qos.min_iops == 100, "Died on +.volumes[65].qos.min_iops"
    assert result.volumes[65].qos.max_iops == 15000, "Died on +.volumes[65].qos.max_iops"
    assert result.volumes[65].name == """snapshots-source-66""", "Died on +.volumes[65].name"
    assert result.volumes[65].volume_access_groups[0] == 4, "Died on +.volumes[65].volume_access_groups[0]"
    assert result.volumes[65].scsi_naadevice_id == """6f47acc1000000006d69643400000236""", "Died on +.volumes[65].scsi_naadevice_id"
    assert result.volumes[65].total_size == 5000658944, "Died on +.volumes[65].total_size"
    assert result.volumes[65].block_size == 4096, "Died on +.volumes[65].block_size"
    assert result.volumes[65].scsi_euidevice_id == """6d69643400000236f47acc0100000000""", "Died on +.volumes[65].scsi_euidevice_id"
    assert result.volumes[65].volume_id == 566, "Died on +.volumes[65].volume_id"
    assert result.volumes[65].access == """readWrite""", "Died on +.volumes[65].access"
    assert result.volumes[65].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-66.566""", "Died on +.volumes[65].iqn"
    assert result.volumes[65].slice_count == 1, "Died on +.volumes[65].slice_count"
    assert type(result.volumes[65].attributes) is dict, "Died on .volumes[65].attributes"
    assert result.volumes[65].volume_pairs[0].volume_pair_uuid == UUID("ccc819c2-785d-4605-b742-e3dd3bba5450"), "Died on .volumes[65].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[65].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[65].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[65].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[65].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[65].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[65].volume_pairs[0].remote_replication.state"
    assert result.volumes[65].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[65].volume_pairs[0].remote_replication.mode"
    assert result.volumes[65].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[65].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[65].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[65].volume_pairs[0].cluster_pair_id"
    assert result.volumes[65].volume_pairs[0].remote_volume_id == 1066, "Died on +.volumes[65].volume_pairs[0].remote_volume_id"
    assert result.volumes[65].volume_pairs[0].remote_volume_name == """snap-target-66""", "Died on +.volumes[65].volume_pairs[0].remote_volume_name"
    assert result.volumes[65].volume_pairs[0].remote_slice_id == 1066, "Died on +.volumes[65].volume_pairs[0].remote_slice_id"
    assert result.volumes[65].account_id == 4, "Died on +.volumes[65].account_id"
    assert result.volumes[65].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[65].create_time"
    assert result.volumes[65].virtual_volume_id is None, "Died on .volumes[65].virtual_volume_id"
    assert result.volumes[64].status == """active""", "Died on +.volumes[64].status"
    assert result.volumes[64].enable512e == False, "Died on +.volumes[64].enable512e"
    assert result.volumes[64].qos.burst_iops == 15000, "Died on +.volumes[64].qos.burst_iops"
    assert result.volumes[64].qos.burst_time == 60, "Died on +.volumes[64].qos.burst_time"
    assert result.volumes[64].qos.min_iops == 100, "Died on +.volumes[64].qos.min_iops"
    assert result.volumes[64].qos.max_iops == 15000, "Died on +.volumes[64].qos.max_iops"
    assert result.volumes[64].name == """snapshots-source-65""", "Died on +.volumes[64].name"
    assert result.volumes[64].volume_access_groups[0] == 4, "Died on +.volumes[64].volume_access_groups[0]"
    assert result.volumes[64].scsi_naadevice_id == """6f47acc1000000006d69643400000235""", "Died on +.volumes[64].scsi_naadevice_id"
    assert result.volumes[64].total_size == 5000658944, "Died on +.volumes[64].total_size"
    assert result.volumes[64].block_size == 4096, "Died on +.volumes[64].block_size"
    assert result.volumes[64].scsi_euidevice_id == """6d69643400000235f47acc0100000000""", "Died on +.volumes[64].scsi_euidevice_id"
    assert result.volumes[64].volume_id == 565, "Died on +.volumes[64].volume_id"
    assert result.volumes[64].access == """readWrite""", "Died on +.volumes[64].access"
    assert result.volumes[64].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-65.565""", "Died on +.volumes[64].iqn"
    assert result.volumes[64].slice_count == 1, "Died on +.volumes[64].slice_count"
    assert type(result.volumes[64].attributes) is dict, "Died on .volumes[64].attributes"
    assert result.volumes[64].volume_pairs[0].volume_pair_uuid == UUID("e5428138-39e9-402c-a0b6-2b597aedc696"), "Died on .volumes[64].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[64].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[64].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[64].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[64].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[64].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[64].volume_pairs[0].remote_replication.state"
    assert result.volumes[64].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[64].volume_pairs[0].remote_replication.mode"
    assert result.volumes[64].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[64].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[64].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[64].volume_pairs[0].cluster_pair_id"
    assert result.volumes[64].volume_pairs[0].remote_volume_id == 1065, "Died on +.volumes[64].volume_pairs[0].remote_volume_id"
    assert result.volumes[64].volume_pairs[0].remote_volume_name == """snap-target-65""", "Died on +.volumes[64].volume_pairs[0].remote_volume_name"
    assert result.volumes[64].volume_pairs[0].remote_slice_id == 1065, "Died on +.volumes[64].volume_pairs[0].remote_slice_id"
    assert result.volumes[64].account_id == 4, "Died on +.volumes[64].account_id"
    assert result.volumes[64].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[64].create_time"
    assert result.volumes[64].virtual_volume_id is None, "Died on .volumes[64].virtual_volume_id"
    assert result.volumes[63].status == """active""", "Died on +.volumes[63].status"
    assert result.volumes[63].enable512e == False, "Died on +.volumes[63].enable512e"
    assert result.volumes[63].qos.burst_iops == 15000, "Died on +.volumes[63].qos.burst_iops"
    assert result.volumes[63].qos.burst_time == 60, "Died on +.volumes[63].qos.burst_time"
    assert result.volumes[63].qos.min_iops == 100, "Died on +.volumes[63].qos.min_iops"
    assert result.volumes[63].qos.max_iops == 15000, "Died on +.volumes[63].qos.max_iops"
    assert result.volumes[63].name == """snapshots-source-64""", "Died on +.volumes[63].name"
    assert result.volumes[63].volume_access_groups[0] == 4, "Died on +.volumes[63].volume_access_groups[0]"
    assert result.volumes[63].scsi_naadevice_id == """6f47acc1000000006d69643400000234""", "Died on +.volumes[63].scsi_naadevice_id"
    assert result.volumes[63].total_size == 5000658944, "Died on +.volumes[63].total_size"
    assert result.volumes[63].block_size == 4096, "Died on +.volumes[63].block_size"
    assert result.volumes[63].scsi_euidevice_id == """6d69643400000234f47acc0100000000""", "Died on +.volumes[63].scsi_euidevice_id"
    assert result.volumes[63].volume_id == 564, "Died on +.volumes[63].volume_id"
    assert result.volumes[63].access == """readWrite""", "Died on +.volumes[63].access"
    assert result.volumes[63].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-64.564""", "Died on +.volumes[63].iqn"
    assert result.volumes[63].slice_count == 1, "Died on +.volumes[63].slice_count"
    assert type(result.volumes[63].attributes) is dict, "Died on .volumes[63].attributes"
    assert result.volumes[63].volume_pairs[0].volume_pair_uuid == UUID("9b0f95dd-d4cd-40e3-b497-b183f3d28f93"), "Died on .volumes[63].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[63].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[63].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[63].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[63].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[63].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[63].volume_pairs[0].remote_replication.state"
    assert result.volumes[63].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[63].volume_pairs[0].remote_replication.mode"
    assert result.volumes[63].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[63].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[63].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[63].volume_pairs[0].cluster_pair_id"
    assert result.volumes[63].volume_pairs[0].remote_volume_id == 1064, "Died on +.volumes[63].volume_pairs[0].remote_volume_id"
    assert result.volumes[63].volume_pairs[0].remote_volume_name == """snap-target-64""", "Died on +.volumes[63].volume_pairs[0].remote_volume_name"
    assert result.volumes[63].volume_pairs[0].remote_slice_id == 1064, "Died on +.volumes[63].volume_pairs[0].remote_slice_id"
    assert result.volumes[63].account_id == 4, "Died on +.volumes[63].account_id"
    assert result.volumes[63].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[63].create_time"
    assert result.volumes[63].virtual_volume_id is None, "Died on .volumes[63].virtual_volume_id"
    assert result.volumes[62].status == """active""", "Died on +.volumes[62].status"
    assert result.volumes[62].enable512e == False, "Died on +.volumes[62].enable512e"
    assert result.volumes[62].qos.burst_iops == 15000, "Died on +.volumes[62].qos.burst_iops"
    assert result.volumes[62].qos.burst_time == 60, "Died on +.volumes[62].qos.burst_time"
    assert result.volumes[62].qos.min_iops == 100, "Died on +.volumes[62].qos.min_iops"
    assert result.volumes[62].qos.max_iops == 15000, "Died on +.volumes[62].qos.max_iops"
    assert result.volumes[62].name == """snapshots-source-63""", "Died on +.volumes[62].name"
    assert result.volumes[62].volume_access_groups[0] == 4, "Died on +.volumes[62].volume_access_groups[0]"
    assert result.volumes[62].scsi_naadevice_id == """6f47acc1000000006d69643400000233""", "Died on +.volumes[62].scsi_naadevice_id"
    assert result.volumes[62].total_size == 5000658944, "Died on +.volumes[62].total_size"
    assert result.volumes[62].block_size == 4096, "Died on +.volumes[62].block_size"
    assert result.volumes[62].scsi_euidevice_id == """6d69643400000233f47acc0100000000""", "Died on +.volumes[62].scsi_euidevice_id"
    assert result.volumes[62].volume_id == 563, "Died on +.volumes[62].volume_id"
    assert result.volumes[62].access == """readWrite""", "Died on +.volumes[62].access"
    assert result.volumes[62].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-63.563""", "Died on +.volumes[62].iqn"
    assert result.volumes[62].slice_count == 1, "Died on +.volumes[62].slice_count"
    assert type(result.volumes[62].attributes) is dict, "Died on .volumes[62].attributes"
    assert result.volumes[62].volume_pairs[0].volume_pair_uuid == UUID("72f3f609-fdaa-49a1-93af-c5f1ccc2e492"), "Died on .volumes[62].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[62].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[62].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[62].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[62].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[62].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[62].volume_pairs[0].remote_replication.state"
    assert result.volumes[62].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[62].volume_pairs[0].remote_replication.mode"
    assert result.volumes[62].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[62].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[62].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[62].volume_pairs[0].cluster_pair_id"
    assert result.volumes[62].volume_pairs[0].remote_volume_id == 1063, "Died on +.volumes[62].volume_pairs[0].remote_volume_id"
    assert result.volumes[62].volume_pairs[0].remote_volume_name == """snap-target-63""", "Died on +.volumes[62].volume_pairs[0].remote_volume_name"
    assert result.volumes[62].volume_pairs[0].remote_slice_id == 1063, "Died on +.volumes[62].volume_pairs[0].remote_slice_id"
    assert result.volumes[62].account_id == 4, "Died on +.volumes[62].account_id"
    assert result.volumes[62].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[62].create_time"
    assert result.volumes[62].virtual_volume_id is None, "Died on .volumes[62].virtual_volume_id"
    assert result.volumes[61].status == """active""", "Died on +.volumes[61].status"
    assert result.volumes[61].enable512e == False, "Died on +.volumes[61].enable512e"
    assert result.volumes[61].qos.burst_iops == 15000, "Died on +.volumes[61].qos.burst_iops"
    assert result.volumes[61].qos.burst_time == 60, "Died on +.volumes[61].qos.burst_time"
    assert result.volumes[61].qos.min_iops == 100, "Died on +.volumes[61].qos.min_iops"
    assert result.volumes[61].qos.max_iops == 15000, "Died on +.volumes[61].qos.max_iops"
    assert result.volumes[61].name == """snapshots-source-62""", "Died on +.volumes[61].name"
    assert result.volumes[61].volume_access_groups[0] == 4, "Died on +.volumes[61].volume_access_groups[0]"
    assert result.volumes[61].scsi_naadevice_id == """6f47acc1000000006d69643400000232""", "Died on +.volumes[61].scsi_naadevice_id"
    assert result.volumes[61].total_size == 5000658944, "Died on +.volumes[61].total_size"
    assert result.volumes[61].block_size == 4096, "Died on +.volumes[61].block_size"
    assert result.volumes[61].scsi_euidevice_id == """6d69643400000232f47acc0100000000""", "Died on +.volumes[61].scsi_euidevice_id"
    assert result.volumes[61].volume_id == 562, "Died on +.volumes[61].volume_id"
    assert result.volumes[61].access == """readWrite""", "Died on +.volumes[61].access"
    assert result.volumes[61].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-62.562""", "Died on +.volumes[61].iqn"
    assert result.volumes[61].slice_count == 1, "Died on +.volumes[61].slice_count"
    assert type(result.volumes[61].attributes) is dict, "Died on .volumes[61].attributes"
    assert result.volumes[61].volume_pairs[0].volume_pair_uuid == UUID("8ba7a4d8-d99c-419f-9f9f-235943288683"), "Died on .volumes[61].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[61].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[61].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[61].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[61].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[61].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[61].volume_pairs[0].remote_replication.state"
    assert result.volumes[61].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[61].volume_pairs[0].remote_replication.mode"
    assert result.volumes[61].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[61].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[61].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[61].volume_pairs[0].cluster_pair_id"
    assert result.volumes[61].volume_pairs[0].remote_volume_id == 1062, "Died on +.volumes[61].volume_pairs[0].remote_volume_id"
    assert result.volumes[61].volume_pairs[0].remote_volume_name == """snap-target-62""", "Died on +.volumes[61].volume_pairs[0].remote_volume_name"
    assert result.volumes[61].volume_pairs[0].remote_slice_id == 1062, "Died on +.volumes[61].volume_pairs[0].remote_slice_id"
    assert result.volumes[61].account_id == 4, "Died on +.volumes[61].account_id"
    assert result.volumes[61].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[61].create_time"
    assert result.volumes[61].virtual_volume_id is None, "Died on .volumes[61].virtual_volume_id"
    assert result.volumes[60].status == """active""", "Died on +.volumes[60].status"
    assert result.volumes[60].enable512e == False, "Died on +.volumes[60].enable512e"
    assert result.volumes[60].qos.burst_iops == 15000, "Died on +.volumes[60].qos.burst_iops"
    assert result.volumes[60].qos.burst_time == 60, "Died on +.volumes[60].qos.burst_time"
    assert result.volumes[60].qos.min_iops == 100, "Died on +.volumes[60].qos.min_iops"
    assert result.volumes[60].qos.max_iops == 15000, "Died on +.volumes[60].qos.max_iops"
    assert result.volumes[60].name == """snapshots-source-61""", "Died on +.volumes[60].name"
    assert result.volumes[60].volume_access_groups[0] == 4, "Died on +.volumes[60].volume_access_groups[0]"
    assert result.volumes[60].scsi_naadevice_id == """6f47acc1000000006d69643400000231""", "Died on +.volumes[60].scsi_naadevice_id"
    assert result.volumes[60].total_size == 5000658944, "Died on +.volumes[60].total_size"
    assert result.volumes[60].block_size == 4096, "Died on +.volumes[60].block_size"
    assert result.volumes[60].scsi_euidevice_id == """6d69643400000231f47acc0100000000""", "Died on +.volumes[60].scsi_euidevice_id"
    assert result.volumes[60].volume_id == 561, "Died on +.volumes[60].volume_id"
    assert result.volumes[60].access == """readWrite""", "Died on +.volumes[60].access"
    assert result.volumes[60].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-61.561""", "Died on +.volumes[60].iqn"
    assert result.volumes[60].slice_count == 1, "Died on +.volumes[60].slice_count"
    assert type(result.volumes[60].attributes) is dict, "Died on .volumes[60].attributes"
    assert result.volumes[60].volume_pairs[0].volume_pair_uuid == UUID("f58403f0-42ea-42d6-aa15-d930d2ef714c"), "Died on .volumes[60].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[60].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[60].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[60].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[60].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[60].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[60].volume_pairs[0].remote_replication.state"
    assert result.volumes[60].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[60].volume_pairs[0].remote_replication.mode"
    assert result.volumes[60].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[60].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[60].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[60].volume_pairs[0].cluster_pair_id"
    assert result.volumes[60].volume_pairs[0].remote_volume_id == 1061, "Died on +.volumes[60].volume_pairs[0].remote_volume_id"
    assert result.volumes[60].volume_pairs[0].remote_volume_name == """snap-target-61""", "Died on +.volumes[60].volume_pairs[0].remote_volume_name"
    assert result.volumes[60].volume_pairs[0].remote_slice_id == 1061, "Died on +.volumes[60].volume_pairs[0].remote_slice_id"
    assert result.volumes[60].account_id == 4, "Died on +.volumes[60].account_id"
    assert result.volumes[60].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[60].create_time"
    assert result.volumes[60].virtual_volume_id is None, "Died on .volumes[60].virtual_volume_id"
    assert result.volumes[59].status == """active""", "Died on +.volumes[59].status"
    assert result.volumes[59].enable512e == False, "Died on +.volumes[59].enable512e"
    assert result.volumes[59].qos.burst_iops == 15000, "Died on +.volumes[59].qos.burst_iops"
    assert result.volumes[59].qos.burst_time == 60, "Died on +.volumes[59].qos.burst_time"
    assert result.volumes[59].qos.min_iops == 100, "Died on +.volumes[59].qos.min_iops"
    assert result.volumes[59].qos.max_iops == 15000, "Died on +.volumes[59].qos.max_iops"
    assert result.volumes[59].name == """snapshots-source-60""", "Died on +.volumes[59].name"
    assert result.volumes[59].volume_access_groups[0] == 4, "Died on +.volumes[59].volume_access_groups[0]"
    assert result.volumes[59].scsi_naadevice_id == """6f47acc1000000006d69643400000230""", "Died on +.volumes[59].scsi_naadevice_id"
    assert result.volumes[59].total_size == 5000658944, "Died on +.volumes[59].total_size"
    assert result.volumes[59].block_size == 4096, "Died on +.volumes[59].block_size"
    assert result.volumes[59].scsi_euidevice_id == """6d69643400000230f47acc0100000000""", "Died on +.volumes[59].scsi_euidevice_id"
    assert result.volumes[59].volume_id == 560, "Died on +.volumes[59].volume_id"
    assert result.volumes[59].access == """readWrite""", "Died on +.volumes[59].access"
    assert result.volumes[59].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-60.560""", "Died on +.volumes[59].iqn"
    assert result.volumes[59].slice_count == 1, "Died on +.volumes[59].slice_count"
    assert type(result.volumes[59].attributes) is dict, "Died on .volumes[59].attributes"
    assert result.volumes[59].volume_pairs[0].volume_pair_uuid == UUID("6d5e64fc-b5d6-4150-88c0-a287bd3c6cb9"), "Died on .volumes[59].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[59].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[59].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[59].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[59].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[59].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[59].volume_pairs[0].remote_replication.state"
    assert result.volumes[59].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[59].volume_pairs[0].remote_replication.mode"
    assert result.volumes[59].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[59].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[59].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[59].volume_pairs[0].cluster_pair_id"
    assert result.volumes[59].volume_pairs[0].remote_volume_id == 1060, "Died on +.volumes[59].volume_pairs[0].remote_volume_id"
    assert result.volumes[59].volume_pairs[0].remote_volume_name == """snap-target-60""", "Died on +.volumes[59].volume_pairs[0].remote_volume_name"
    assert result.volumes[59].volume_pairs[0].remote_slice_id == 1060, "Died on +.volumes[59].volume_pairs[0].remote_slice_id"
    assert result.volumes[59].account_id == 4, "Died on +.volumes[59].account_id"
    assert result.volumes[59].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[59].create_time"
    assert result.volumes[59].virtual_volume_id is None, "Died on .volumes[59].virtual_volume_id"
    assert result.volumes[58].status == """active""", "Died on +.volumes[58].status"
    assert result.volumes[58].enable512e == False, "Died on +.volumes[58].enable512e"
    assert result.volumes[58].qos.burst_iops == 15000, "Died on +.volumes[58].qos.burst_iops"
    assert result.volumes[58].qos.burst_time == 60, "Died on +.volumes[58].qos.burst_time"
    assert result.volumes[58].qos.min_iops == 100, "Died on +.volumes[58].qos.min_iops"
    assert result.volumes[58].qos.max_iops == 15000, "Died on +.volumes[58].qos.max_iops"
    assert result.volumes[58].name == """snapshots-source-59""", "Died on +.volumes[58].name"
    assert result.volumes[58].volume_access_groups[0] == 4, "Died on +.volumes[58].volume_access_groups[0]"
    assert result.volumes[58].scsi_naadevice_id == """6f47acc1000000006d6964340000022f""", "Died on +.volumes[58].scsi_naadevice_id"
    assert result.volumes[58].total_size == 5000658944, "Died on +.volumes[58].total_size"
    assert result.volumes[58].block_size == 4096, "Died on +.volumes[58].block_size"
    assert result.volumes[58].scsi_euidevice_id == """6d6964340000022ff47acc0100000000""", "Died on +.volumes[58].scsi_euidevice_id"
    assert result.volumes[58].volume_id == 559, "Died on +.volumes[58].volume_id"
    assert result.volumes[58].access == """readWrite""", "Died on +.volumes[58].access"
    assert result.volumes[58].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-59.559""", "Died on +.volumes[58].iqn"
    assert result.volumes[58].slice_count == 1, "Died on +.volumes[58].slice_count"
    assert type(result.volumes[58].attributes) is dict, "Died on .volumes[58].attributes"
    assert result.volumes[58].volume_pairs[0].volume_pair_uuid == UUID("2a3628c1-5895-4561-a45f-78d4392c610a"), "Died on .volumes[58].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[58].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[58].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[58].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[58].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[58].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[58].volume_pairs[0].remote_replication.state"
    assert result.volumes[58].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[58].volume_pairs[0].remote_replication.mode"
    assert result.volumes[58].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[58].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[58].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[58].volume_pairs[0].cluster_pair_id"
    assert result.volumes[58].volume_pairs[0].remote_volume_id == 1059, "Died on +.volumes[58].volume_pairs[0].remote_volume_id"
    assert result.volumes[58].volume_pairs[0].remote_volume_name == """snap-target-59""", "Died on +.volumes[58].volume_pairs[0].remote_volume_name"
    assert result.volumes[58].volume_pairs[0].remote_slice_id == 1059, "Died on +.volumes[58].volume_pairs[0].remote_slice_id"
    assert result.volumes[58].account_id == 4, "Died on +.volumes[58].account_id"
    assert result.volumes[58].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[58].create_time"
    assert result.volumes[58].virtual_volume_id is None, "Died on .volumes[58].virtual_volume_id"
    assert result.volumes[57].status == """active""", "Died on +.volumes[57].status"
    assert result.volumes[57].enable512e == False, "Died on +.volumes[57].enable512e"
    assert result.volumes[57].qos.burst_iops == 15000, "Died on +.volumes[57].qos.burst_iops"
    assert result.volumes[57].qos.burst_time == 60, "Died on +.volumes[57].qos.burst_time"
    assert result.volumes[57].qos.min_iops == 100, "Died on +.volumes[57].qos.min_iops"
    assert result.volumes[57].qos.max_iops == 15000, "Died on +.volumes[57].qos.max_iops"
    assert result.volumes[57].name == """snapshots-source-58""", "Died on +.volumes[57].name"
    assert result.volumes[57].volume_access_groups[0] == 4, "Died on +.volumes[57].volume_access_groups[0]"
    assert result.volumes[57].scsi_naadevice_id == """6f47acc1000000006d6964340000022e""", "Died on +.volumes[57].scsi_naadevice_id"
    assert result.volumes[57].total_size == 5000658944, "Died on +.volumes[57].total_size"
    assert result.volumes[57].block_size == 4096, "Died on +.volumes[57].block_size"
    assert result.volumes[57].scsi_euidevice_id == """6d6964340000022ef47acc0100000000""", "Died on +.volumes[57].scsi_euidevice_id"
    assert result.volumes[57].volume_id == 558, "Died on +.volumes[57].volume_id"
    assert result.volumes[57].access == """readWrite""", "Died on +.volumes[57].access"
    assert result.volumes[57].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-58.558""", "Died on +.volumes[57].iqn"
    assert result.volumes[57].slice_count == 1, "Died on +.volumes[57].slice_count"
    assert type(result.volumes[57].attributes) is dict, "Died on .volumes[57].attributes"
    assert result.volumes[57].volume_pairs[0].volume_pair_uuid == UUID("992eefb6-bd47-4eba-a8dd-638c6cb25eb3"), "Died on .volumes[57].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[57].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[57].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[57].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[57].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[57].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[57].volume_pairs[0].remote_replication.state"
    assert result.volumes[57].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[57].volume_pairs[0].remote_replication.mode"
    assert result.volumes[57].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[57].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[57].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[57].volume_pairs[0].cluster_pair_id"
    assert result.volumes[57].volume_pairs[0].remote_volume_id == 1058, "Died on +.volumes[57].volume_pairs[0].remote_volume_id"
    assert result.volumes[57].volume_pairs[0].remote_volume_name == """snap-target-58""", "Died on +.volumes[57].volume_pairs[0].remote_volume_name"
    assert result.volumes[57].volume_pairs[0].remote_slice_id == 1058, "Died on +.volumes[57].volume_pairs[0].remote_slice_id"
    assert result.volumes[57].account_id == 4, "Died on +.volumes[57].account_id"
    assert result.volumes[57].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[57].create_time"
    assert result.volumes[57].virtual_volume_id is None, "Died on .volumes[57].virtual_volume_id"
    assert result.volumes[56].status == """active""", "Died on +.volumes[56].status"
    assert result.volumes[56].enable512e == False, "Died on +.volumes[56].enable512e"
    assert result.volumes[56].qos.burst_iops == 15000, "Died on +.volumes[56].qos.burst_iops"
    assert result.volumes[56].qos.burst_time == 60, "Died on +.volumes[56].qos.burst_time"
    assert result.volumes[56].qos.min_iops == 100, "Died on +.volumes[56].qos.min_iops"
    assert result.volumes[56].qos.max_iops == 15000, "Died on +.volumes[56].qos.max_iops"
    assert result.volumes[56].name == """snapshots-source-57""", "Died on +.volumes[56].name"
    assert result.volumes[56].volume_access_groups[0] == 4, "Died on +.volumes[56].volume_access_groups[0]"
    assert result.volumes[56].scsi_naadevice_id == """6f47acc1000000006d6964340000022d""", "Died on +.volumes[56].scsi_naadevice_id"
    assert result.volumes[56].total_size == 5000658944, "Died on +.volumes[56].total_size"
    assert result.volumes[56].block_size == 4096, "Died on +.volumes[56].block_size"
    assert result.volumes[56].scsi_euidevice_id == """6d6964340000022df47acc0100000000""", "Died on +.volumes[56].scsi_euidevice_id"
    assert result.volumes[56].volume_id == 557, "Died on +.volumes[56].volume_id"
    assert result.volumes[56].access == """readWrite""", "Died on +.volumes[56].access"
    assert result.volumes[56].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-57.557""", "Died on +.volumes[56].iqn"
    assert result.volumes[56].slice_count == 1, "Died on +.volumes[56].slice_count"
    assert type(result.volumes[56].attributes) is dict, "Died on .volumes[56].attributes"
    assert result.volumes[56].volume_pairs[0].volume_pair_uuid == UUID("923ee3bd-536e-411d-8049-8788bd2f448a"), "Died on .volumes[56].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[56].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[56].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[56].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[56].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[56].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[56].volume_pairs[0].remote_replication.state"
    assert result.volumes[56].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[56].volume_pairs[0].remote_replication.mode"
    assert result.volumes[56].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[56].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[56].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[56].volume_pairs[0].cluster_pair_id"
    assert result.volumes[56].volume_pairs[0].remote_volume_id == 1057, "Died on +.volumes[56].volume_pairs[0].remote_volume_id"
    assert result.volumes[56].volume_pairs[0].remote_volume_name == """snap-target-57""", "Died on +.volumes[56].volume_pairs[0].remote_volume_name"
    assert result.volumes[56].volume_pairs[0].remote_slice_id == 1057, "Died on +.volumes[56].volume_pairs[0].remote_slice_id"
    assert result.volumes[56].account_id == 4, "Died on +.volumes[56].account_id"
    assert result.volumes[56].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[56].create_time"
    assert result.volumes[56].virtual_volume_id is None, "Died on .volumes[56].virtual_volume_id"
    assert result.volumes[55].status == """active""", "Died on +.volumes[55].status"
    assert result.volumes[55].enable512e == False, "Died on +.volumes[55].enable512e"
    assert result.volumes[55].qos.burst_iops == 15000, "Died on +.volumes[55].qos.burst_iops"
    assert result.volumes[55].qos.burst_time == 60, "Died on +.volumes[55].qos.burst_time"
    assert result.volumes[55].qos.min_iops == 100, "Died on +.volumes[55].qos.min_iops"
    assert result.volumes[55].qos.max_iops == 15000, "Died on +.volumes[55].qos.max_iops"
    assert result.volumes[55].name == """snapshots-source-56""", "Died on +.volumes[55].name"
    assert result.volumes[55].volume_access_groups[0] == 4, "Died on +.volumes[55].volume_access_groups[0]"
    assert result.volumes[55].scsi_naadevice_id == """6f47acc1000000006d6964340000022c""", "Died on +.volumes[55].scsi_naadevice_id"
    assert result.volumes[55].total_size == 5000658944, "Died on +.volumes[55].total_size"
    assert result.volumes[55].block_size == 4096, "Died on +.volumes[55].block_size"
    assert result.volumes[55].scsi_euidevice_id == """6d6964340000022cf47acc0100000000""", "Died on +.volumes[55].scsi_euidevice_id"
    assert result.volumes[55].volume_id == 556, "Died on +.volumes[55].volume_id"
    assert result.volumes[55].access == """readWrite""", "Died on +.volumes[55].access"
    assert result.volumes[55].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-56.556""", "Died on +.volumes[55].iqn"
    assert result.volumes[55].slice_count == 1, "Died on +.volumes[55].slice_count"
    assert type(result.volumes[55].attributes) is dict, "Died on .volumes[55].attributes"
    assert result.volumes[55].volume_pairs[0].volume_pair_uuid == UUID("dc75c0e8-abe5-4956-a24f-bf3343c7af41"), "Died on .volumes[55].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[55].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[55].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[55].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[55].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[55].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[55].volume_pairs[0].remote_replication.state"
    assert result.volumes[55].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[55].volume_pairs[0].remote_replication.mode"
    assert result.volumes[55].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[55].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[55].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[55].volume_pairs[0].cluster_pair_id"
    assert result.volumes[55].volume_pairs[0].remote_volume_id == 1056, "Died on +.volumes[55].volume_pairs[0].remote_volume_id"
    assert result.volumes[55].volume_pairs[0].remote_volume_name == """snap-target-56""", "Died on +.volumes[55].volume_pairs[0].remote_volume_name"
    assert result.volumes[55].volume_pairs[0].remote_slice_id == 1056, "Died on +.volumes[55].volume_pairs[0].remote_slice_id"
    assert result.volumes[55].account_id == 4, "Died on +.volumes[55].account_id"
    assert result.volumes[55].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[55].create_time"
    assert result.volumes[55].virtual_volume_id is None, "Died on .volumes[55].virtual_volume_id"
    assert result.volumes[54].status == """active""", "Died on +.volumes[54].status"
    assert result.volumes[54].enable512e == False, "Died on +.volumes[54].enable512e"
    assert result.volumes[54].qos.burst_iops == 15000, "Died on +.volumes[54].qos.burst_iops"
    assert result.volumes[54].qos.burst_time == 60, "Died on +.volumes[54].qos.burst_time"
    assert result.volumes[54].qos.min_iops == 100, "Died on +.volumes[54].qos.min_iops"
    assert result.volumes[54].qos.max_iops == 15000, "Died on +.volumes[54].qos.max_iops"
    assert result.volumes[54].name == """snapshots-source-55""", "Died on +.volumes[54].name"
    assert result.volumes[54].volume_access_groups[0] == 4, "Died on +.volumes[54].volume_access_groups[0]"
    assert result.volumes[54].scsi_naadevice_id == """6f47acc1000000006d6964340000022b""", "Died on +.volumes[54].scsi_naadevice_id"
    assert result.volumes[54].total_size == 5000658944, "Died on +.volumes[54].total_size"
    assert result.volumes[54].block_size == 4096, "Died on +.volumes[54].block_size"
    assert result.volumes[54].scsi_euidevice_id == """6d6964340000022bf47acc0100000000""", "Died on +.volumes[54].scsi_euidevice_id"
    assert result.volumes[54].volume_id == 555, "Died on +.volumes[54].volume_id"
    assert result.volumes[54].access == """readWrite""", "Died on +.volumes[54].access"
    assert result.volumes[54].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-55.555""", "Died on +.volumes[54].iqn"
    assert result.volumes[54].slice_count == 1, "Died on +.volumes[54].slice_count"
    assert type(result.volumes[54].attributes) is dict, "Died on .volumes[54].attributes"
    assert result.volumes[54].volume_pairs[0].volume_pair_uuid == UUID("e3ba9aa0-85fa-47ac-8ab3-380bf954ab3b"), "Died on .volumes[54].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[54].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[54].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[54].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[54].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[54].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[54].volume_pairs[0].remote_replication.state"
    assert result.volumes[54].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[54].volume_pairs[0].remote_replication.mode"
    assert result.volumes[54].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[54].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[54].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[54].volume_pairs[0].cluster_pair_id"
    assert result.volumes[54].volume_pairs[0].remote_volume_id == 1055, "Died on +.volumes[54].volume_pairs[0].remote_volume_id"
    assert result.volumes[54].volume_pairs[0].remote_volume_name == """snap-target-55""", "Died on +.volumes[54].volume_pairs[0].remote_volume_name"
    assert result.volumes[54].volume_pairs[0].remote_slice_id == 1055, "Died on +.volumes[54].volume_pairs[0].remote_slice_id"
    assert result.volumes[54].account_id == 4, "Died on +.volumes[54].account_id"
    assert result.volumes[54].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[54].create_time"
    assert result.volumes[54].virtual_volume_id is None, "Died on .volumes[54].virtual_volume_id"
    assert result.volumes[53].status == """active""", "Died on +.volumes[53].status"
    assert result.volumes[53].enable512e == False, "Died on +.volumes[53].enable512e"
    assert result.volumes[53].qos.burst_iops == 15000, "Died on +.volumes[53].qos.burst_iops"
    assert result.volumes[53].qos.burst_time == 60, "Died on +.volumes[53].qos.burst_time"
    assert result.volumes[53].qos.min_iops == 100, "Died on +.volumes[53].qos.min_iops"
    assert result.volumes[53].qos.max_iops == 15000, "Died on +.volumes[53].qos.max_iops"
    assert result.volumes[53].name == """snapshots-source-54""", "Died on +.volumes[53].name"
    assert result.volumes[53].volume_access_groups[0] == 4, "Died on +.volumes[53].volume_access_groups[0]"
    assert result.volumes[53].scsi_naadevice_id == """6f47acc1000000006d6964340000022a""", "Died on +.volumes[53].scsi_naadevice_id"
    assert result.volumes[53].total_size == 5000658944, "Died on +.volumes[53].total_size"
    assert result.volumes[53].block_size == 4096, "Died on +.volumes[53].block_size"
    assert result.volumes[53].scsi_euidevice_id == """6d6964340000022af47acc0100000000""", "Died on +.volumes[53].scsi_euidevice_id"
    assert result.volumes[53].volume_id == 554, "Died on +.volumes[53].volume_id"
    assert result.volumes[53].access == """readWrite""", "Died on +.volumes[53].access"
    assert result.volumes[53].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-54.554""", "Died on +.volumes[53].iqn"
    assert result.volumes[53].slice_count == 1, "Died on +.volumes[53].slice_count"
    assert type(result.volumes[53].attributes) is dict, "Died on .volumes[53].attributes"
    assert result.volumes[53].volume_pairs[0].volume_pair_uuid == UUID("f2e25c6e-bed9-460e-93b0-9f388f06a3e0"), "Died on .volumes[53].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[53].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[53].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[53].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[53].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[53].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[53].volume_pairs[0].remote_replication.state"
    assert result.volumes[53].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[53].volume_pairs[0].remote_replication.mode"
    assert result.volumes[53].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[53].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[53].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[53].volume_pairs[0].cluster_pair_id"
    assert result.volumes[53].volume_pairs[0].remote_volume_id == 1054, "Died on +.volumes[53].volume_pairs[0].remote_volume_id"
    assert result.volumes[53].volume_pairs[0].remote_volume_name == """snap-target-54""", "Died on +.volumes[53].volume_pairs[0].remote_volume_name"
    assert result.volumes[53].volume_pairs[0].remote_slice_id == 1054, "Died on +.volumes[53].volume_pairs[0].remote_slice_id"
    assert result.volumes[53].account_id == 4, "Died on +.volumes[53].account_id"
    assert result.volumes[53].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[53].create_time"
    assert result.volumes[53].virtual_volume_id is None, "Died on .volumes[53].virtual_volume_id"
    assert result.volumes[52].status == """active""", "Died on +.volumes[52].status"
    assert result.volumes[52].enable512e == False, "Died on +.volumes[52].enable512e"
    assert result.volumes[52].qos.burst_iops == 15000, "Died on +.volumes[52].qos.burst_iops"
    assert result.volumes[52].qos.burst_time == 60, "Died on +.volumes[52].qos.burst_time"
    assert result.volumes[52].qos.min_iops == 100, "Died on +.volumes[52].qos.min_iops"
    assert result.volumes[52].qos.max_iops == 15000, "Died on +.volumes[52].qos.max_iops"
    assert result.volumes[52].name == """snapshots-source-53""", "Died on +.volumes[52].name"
    assert result.volumes[52].volume_access_groups[0] == 4, "Died on +.volumes[52].volume_access_groups[0]"
    assert result.volumes[52].scsi_naadevice_id == """6f47acc1000000006d69643400000229""", "Died on +.volumes[52].scsi_naadevice_id"
    assert result.volumes[52].total_size == 5000658944, "Died on +.volumes[52].total_size"
    assert result.volumes[52].block_size == 4096, "Died on +.volumes[52].block_size"
    assert result.volumes[52].scsi_euidevice_id == """6d69643400000229f47acc0100000000""", "Died on +.volumes[52].scsi_euidevice_id"
    assert result.volumes[52].volume_id == 553, "Died on +.volumes[52].volume_id"
    assert result.volumes[52].access == """readWrite""", "Died on +.volumes[52].access"
    assert result.volumes[52].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-53.553""", "Died on +.volumes[52].iqn"
    assert result.volumes[52].slice_count == 1, "Died on +.volumes[52].slice_count"
    assert type(result.volumes[52].attributes) is dict, "Died on .volumes[52].attributes"
    assert result.volumes[52].volume_pairs[0].volume_pair_uuid == UUID("c7012b1b-997d-4cf1-8b10-51c3519bf2a8"), "Died on .volumes[52].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[52].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[52].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[52].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[52].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[52].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[52].volume_pairs[0].remote_replication.state"
    assert result.volumes[52].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[52].volume_pairs[0].remote_replication.mode"
    assert result.volumes[52].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[52].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[52].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[52].volume_pairs[0].cluster_pair_id"
    assert result.volumes[52].volume_pairs[0].remote_volume_id == 1053, "Died on +.volumes[52].volume_pairs[0].remote_volume_id"
    assert result.volumes[52].volume_pairs[0].remote_volume_name == """snap-target-53""", "Died on +.volumes[52].volume_pairs[0].remote_volume_name"
    assert result.volumes[52].volume_pairs[0].remote_slice_id == 1053, "Died on +.volumes[52].volume_pairs[0].remote_slice_id"
    assert result.volumes[52].account_id == 4, "Died on +.volumes[52].account_id"
    assert result.volumes[52].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[52].create_time"
    assert result.volumes[52].virtual_volume_id is None, "Died on .volumes[52].virtual_volume_id"
    assert result.volumes[51].status == """active""", "Died on +.volumes[51].status"
    assert result.volumes[51].enable512e == False, "Died on +.volumes[51].enable512e"
    assert result.volumes[51].qos.burst_iops == 15000, "Died on +.volumes[51].qos.burst_iops"
    assert result.volumes[51].qos.burst_time == 60, "Died on +.volumes[51].qos.burst_time"
    assert result.volumes[51].qos.min_iops == 100, "Died on +.volumes[51].qos.min_iops"
    assert result.volumes[51].qos.max_iops == 15000, "Died on +.volumes[51].qos.max_iops"
    assert result.volumes[51].name == """snapshots-source-52""", "Died on +.volumes[51].name"
    assert result.volumes[51].volume_access_groups[0] == 4, "Died on +.volumes[51].volume_access_groups[0]"
    assert result.volumes[51].scsi_naadevice_id == """6f47acc1000000006d69643400000228""", "Died on +.volumes[51].scsi_naadevice_id"
    assert result.volumes[51].total_size == 5000658944, "Died on +.volumes[51].total_size"
    assert result.volumes[51].block_size == 4096, "Died on +.volumes[51].block_size"
    assert result.volumes[51].scsi_euidevice_id == """6d69643400000228f47acc0100000000""", "Died on +.volumes[51].scsi_euidevice_id"
    assert result.volumes[51].volume_id == 552, "Died on +.volumes[51].volume_id"
    assert result.volumes[51].access == """readWrite""", "Died on +.volumes[51].access"
    assert result.volumes[51].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-52.552""", "Died on +.volumes[51].iqn"
    assert result.volumes[51].slice_count == 1, "Died on +.volumes[51].slice_count"
    assert type(result.volumes[51].attributes) is dict, "Died on .volumes[51].attributes"
    assert result.volumes[51].volume_pairs[0].volume_pair_uuid == UUID("0d4a718f-8d31-4ff7-a3c5-f359cd154592"), "Died on .volumes[51].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[51].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[51].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[51].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[51].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[51].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[51].volume_pairs[0].remote_replication.state"
    assert result.volumes[51].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[51].volume_pairs[0].remote_replication.mode"
    assert result.volumes[51].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[51].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[51].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[51].volume_pairs[0].cluster_pair_id"
    assert result.volumes[51].volume_pairs[0].remote_volume_id == 1052, "Died on +.volumes[51].volume_pairs[0].remote_volume_id"
    assert result.volumes[51].volume_pairs[0].remote_volume_name == """snap-target-52""", "Died on +.volumes[51].volume_pairs[0].remote_volume_name"
    assert result.volumes[51].volume_pairs[0].remote_slice_id == 1052, "Died on +.volumes[51].volume_pairs[0].remote_slice_id"
    assert result.volumes[51].account_id == 4, "Died on +.volumes[51].account_id"
    assert result.volumes[51].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[51].create_time"
    assert result.volumes[51].virtual_volume_id is None, "Died on .volumes[51].virtual_volume_id"
    assert result.volumes[50].status == """active""", "Died on +.volumes[50].status"
    assert result.volumes[50].enable512e == False, "Died on +.volumes[50].enable512e"
    assert result.volumes[50].qos.burst_iops == 15000, "Died on +.volumes[50].qos.burst_iops"
    assert result.volumes[50].qos.burst_time == 60, "Died on +.volumes[50].qos.burst_time"
    assert result.volumes[50].qos.min_iops == 100, "Died on +.volumes[50].qos.min_iops"
    assert result.volumes[50].qos.max_iops == 15000, "Died on +.volumes[50].qos.max_iops"
    assert result.volumes[50].name == """snapshots-source-51""", "Died on +.volumes[50].name"
    assert result.volumes[50].volume_access_groups[0] == 4, "Died on +.volumes[50].volume_access_groups[0]"
    assert result.volumes[50].scsi_naadevice_id == """6f47acc1000000006d69643400000227""", "Died on +.volumes[50].scsi_naadevice_id"
    assert result.volumes[50].total_size == 5000658944, "Died on +.volumes[50].total_size"
    assert result.volumes[50].block_size == 4096, "Died on +.volumes[50].block_size"
    assert result.volumes[50].scsi_euidevice_id == """6d69643400000227f47acc0100000000""", "Died on +.volumes[50].scsi_euidevice_id"
    assert result.volumes[50].volume_id == 551, "Died on +.volumes[50].volume_id"
    assert result.volumes[50].access == """readWrite""", "Died on +.volumes[50].access"
    assert result.volumes[50].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-51.551""", "Died on +.volumes[50].iqn"
    assert result.volumes[50].slice_count == 1, "Died on +.volumes[50].slice_count"
    assert type(result.volumes[50].attributes) is dict, "Died on .volumes[50].attributes"
    assert result.volumes[50].volume_pairs[0].volume_pair_uuid == UUID("4a6b2d5b-a258-4737-bcc1-ae5f7256d150"), "Died on .volumes[50].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[50].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[50].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[50].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[50].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[50].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[50].volume_pairs[0].remote_replication.state"
    assert result.volumes[50].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[50].volume_pairs[0].remote_replication.mode"
    assert result.volumes[50].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[50].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[50].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[50].volume_pairs[0].cluster_pair_id"
    assert result.volumes[50].volume_pairs[0].remote_volume_id == 1051, "Died on +.volumes[50].volume_pairs[0].remote_volume_id"
    assert result.volumes[50].volume_pairs[0].remote_volume_name == """snap-target-51""", "Died on +.volumes[50].volume_pairs[0].remote_volume_name"
    assert result.volumes[50].volume_pairs[0].remote_slice_id == 1051, "Died on +.volumes[50].volume_pairs[0].remote_slice_id"
    assert result.volumes[50].account_id == 4, "Died on +.volumes[50].account_id"
    assert result.volumes[50].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[50].create_time"
    assert result.volumes[50].virtual_volume_id is None, "Died on .volumes[50].virtual_volume_id"
    assert result.volumes[49].status == """active""", "Died on +.volumes[49].status"
    assert result.volumes[49].enable512e == False, "Died on +.volumes[49].enable512e"
    assert result.volumes[49].qos.burst_iops == 15000, "Died on +.volumes[49].qos.burst_iops"
    assert result.volumes[49].qos.burst_time == 60, "Died on +.volumes[49].qos.burst_time"
    assert result.volumes[49].qos.min_iops == 100, "Died on +.volumes[49].qos.min_iops"
    assert result.volumes[49].qos.max_iops == 15000, "Died on +.volumes[49].qos.max_iops"
    assert result.volumes[49].name == """snapshots-source-50""", "Died on +.volumes[49].name"
    assert result.volumes[49].volume_access_groups[0] == 4, "Died on +.volumes[49].volume_access_groups[0]"
    assert result.volumes[49].scsi_naadevice_id == """6f47acc1000000006d69643400000226""", "Died on +.volumes[49].scsi_naadevice_id"
    assert result.volumes[49].total_size == 5000658944, "Died on +.volumes[49].total_size"
    assert result.volumes[49].block_size == 4096, "Died on +.volumes[49].block_size"
    assert result.volumes[49].scsi_euidevice_id == """6d69643400000226f47acc0100000000""", "Died on +.volumes[49].scsi_euidevice_id"
    assert result.volumes[49].volume_id == 550, "Died on +.volumes[49].volume_id"
    assert result.volumes[49].access == """readWrite""", "Died on +.volumes[49].access"
    assert result.volumes[49].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-50.550""", "Died on +.volumes[49].iqn"
    assert result.volumes[49].slice_count == 1, "Died on +.volumes[49].slice_count"
    assert type(result.volumes[49].attributes) is dict, "Died on .volumes[49].attributes"
    assert result.volumes[49].volume_pairs[0].volume_pair_uuid == UUID("92b7315e-635f-4947-a9bd-0e02ac0b5fd8"), "Died on .volumes[49].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[49].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[49].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[49].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[49].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[49].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[49].volume_pairs[0].remote_replication.state"
    assert result.volumes[49].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[49].volume_pairs[0].remote_replication.mode"
    assert result.volumes[49].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[49].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[49].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[49].volume_pairs[0].cluster_pair_id"
    assert result.volumes[49].volume_pairs[0].remote_volume_id == 1050, "Died on +.volumes[49].volume_pairs[0].remote_volume_id"
    assert result.volumes[49].volume_pairs[0].remote_volume_name == """snap-target-50""", "Died on +.volumes[49].volume_pairs[0].remote_volume_name"
    assert result.volumes[49].volume_pairs[0].remote_slice_id == 1050, "Died on +.volumes[49].volume_pairs[0].remote_slice_id"
    assert result.volumes[49].account_id == 4, "Died on +.volumes[49].account_id"
    assert result.volumes[49].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[49].create_time"
    assert result.volumes[49].virtual_volume_id is None, "Died on .volumes[49].virtual_volume_id"
    assert result.volumes[48].status == """active""", "Died on +.volumes[48].status"
    assert result.volumes[48].enable512e == False, "Died on +.volumes[48].enable512e"
    assert result.volumes[48].qos.burst_iops == 15000, "Died on +.volumes[48].qos.burst_iops"
    assert result.volumes[48].qos.burst_time == 60, "Died on +.volumes[48].qos.burst_time"
    assert result.volumes[48].qos.min_iops == 100, "Died on +.volumes[48].qos.min_iops"
    assert result.volumes[48].qos.max_iops == 15000, "Died on +.volumes[48].qos.max_iops"
    assert result.volumes[48].name == """snapshots-source-49""", "Died on +.volumes[48].name"
    assert result.volumes[48].volume_access_groups[0] == 4, "Died on +.volumes[48].volume_access_groups[0]"
    assert result.volumes[48].scsi_naadevice_id == """6f47acc1000000006d69643400000225""", "Died on +.volumes[48].scsi_naadevice_id"
    assert result.volumes[48].total_size == 5000658944, "Died on +.volumes[48].total_size"
    assert result.volumes[48].block_size == 4096, "Died on +.volumes[48].block_size"
    assert result.volumes[48].scsi_euidevice_id == """6d69643400000225f47acc0100000000""", "Died on +.volumes[48].scsi_euidevice_id"
    assert result.volumes[48].volume_id == 549, "Died on +.volumes[48].volume_id"
    assert result.volumes[48].access == """readWrite""", "Died on +.volumes[48].access"
    assert result.volumes[48].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-49.549""", "Died on +.volumes[48].iqn"
    assert result.volumes[48].slice_count == 1, "Died on +.volumes[48].slice_count"
    assert type(result.volumes[48].attributes) is dict, "Died on .volumes[48].attributes"
    assert result.volumes[48].volume_pairs[0].volume_pair_uuid == UUID("f78534f4-2b77-4bb2-a472-e60446c54e88"), "Died on .volumes[48].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[48].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[48].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[48].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[48].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[48].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[48].volume_pairs[0].remote_replication.state"
    assert result.volumes[48].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[48].volume_pairs[0].remote_replication.mode"
    assert result.volumes[48].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[48].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[48].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[48].volume_pairs[0].cluster_pair_id"
    assert result.volumes[48].volume_pairs[0].remote_volume_id == 1049, "Died on +.volumes[48].volume_pairs[0].remote_volume_id"
    assert result.volumes[48].volume_pairs[0].remote_volume_name == """snap-target-49""", "Died on +.volumes[48].volume_pairs[0].remote_volume_name"
    assert result.volumes[48].volume_pairs[0].remote_slice_id == 1049, "Died on +.volumes[48].volume_pairs[0].remote_slice_id"
    assert result.volumes[48].account_id == 4, "Died on +.volumes[48].account_id"
    assert result.volumes[48].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[48].create_time"
    assert result.volumes[48].virtual_volume_id is None, "Died on .volumes[48].virtual_volume_id"
    assert result.volumes[47].status == """active""", "Died on +.volumes[47].status"
    assert result.volumes[47].enable512e == False, "Died on +.volumes[47].enable512e"
    assert result.volumes[47].qos.burst_iops == 15000, "Died on +.volumes[47].qos.burst_iops"
    assert result.volumes[47].qos.burst_time == 60, "Died on +.volumes[47].qos.burst_time"
    assert result.volumes[47].qos.min_iops == 100, "Died on +.volumes[47].qos.min_iops"
    assert result.volumes[47].qos.max_iops == 15000, "Died on +.volumes[47].qos.max_iops"
    assert result.volumes[47].name == """snapshots-source-48""", "Died on +.volumes[47].name"
    assert result.volumes[47].volume_access_groups[0] == 4, "Died on +.volumes[47].volume_access_groups[0]"
    assert result.volumes[47].scsi_naadevice_id == """6f47acc1000000006d69643400000224""", "Died on +.volumes[47].scsi_naadevice_id"
    assert result.volumes[47].total_size == 5000658944, "Died on +.volumes[47].total_size"
    assert result.volumes[47].block_size == 4096, "Died on +.volumes[47].block_size"
    assert result.volumes[47].scsi_euidevice_id == """6d69643400000224f47acc0100000000""", "Died on +.volumes[47].scsi_euidevice_id"
    assert result.volumes[47].volume_id == 548, "Died on +.volumes[47].volume_id"
    assert result.volumes[47].access == """readWrite""", "Died on +.volumes[47].access"
    assert result.volumes[47].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-48.548""", "Died on +.volumes[47].iqn"
    assert result.volumes[47].slice_count == 1, "Died on +.volumes[47].slice_count"
    assert type(result.volumes[47].attributes) is dict, "Died on .volumes[47].attributes"
    assert result.volumes[47].volume_pairs[0].volume_pair_uuid == UUID("76980ec5-83b4-44f9-89c1-36a3d4285906"), "Died on .volumes[47].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[47].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[47].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[47].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[47].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[47].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[47].volume_pairs[0].remote_replication.state"
    assert result.volumes[47].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[47].volume_pairs[0].remote_replication.mode"
    assert result.volumes[47].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[47].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[47].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[47].volume_pairs[0].cluster_pair_id"
    assert result.volumes[47].volume_pairs[0].remote_volume_id == 1048, "Died on +.volumes[47].volume_pairs[0].remote_volume_id"
    assert result.volumes[47].volume_pairs[0].remote_volume_name == """snap-target-48""", "Died on +.volumes[47].volume_pairs[0].remote_volume_name"
    assert result.volumes[47].volume_pairs[0].remote_slice_id == 1048, "Died on +.volumes[47].volume_pairs[0].remote_slice_id"
    assert result.volumes[47].account_id == 4, "Died on +.volumes[47].account_id"
    assert result.volumes[47].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[47].create_time"
    assert result.volumes[47].virtual_volume_id is None, "Died on .volumes[47].virtual_volume_id"
    assert result.volumes[46].status == """active""", "Died on +.volumes[46].status"
    assert result.volumes[46].enable512e == False, "Died on +.volumes[46].enable512e"
    assert result.volumes[46].qos.burst_iops == 15000, "Died on +.volumes[46].qos.burst_iops"
    assert result.volumes[46].qos.burst_time == 60, "Died on +.volumes[46].qos.burst_time"
    assert result.volumes[46].qos.min_iops == 100, "Died on +.volumes[46].qos.min_iops"
    assert result.volumes[46].qos.max_iops == 15000, "Died on +.volumes[46].qos.max_iops"
    assert result.volumes[46].name == """snapshots-source-47""", "Died on +.volumes[46].name"
    assert result.volumes[46].volume_access_groups[0] == 4, "Died on +.volumes[46].volume_access_groups[0]"
    assert result.volumes[46].scsi_naadevice_id == """6f47acc1000000006d69643400000223""", "Died on +.volumes[46].scsi_naadevice_id"
    assert result.volumes[46].total_size == 5000658944, "Died on +.volumes[46].total_size"
    assert result.volumes[46].block_size == 4096, "Died on +.volumes[46].block_size"
    assert result.volumes[46].scsi_euidevice_id == """6d69643400000223f47acc0100000000""", "Died on +.volumes[46].scsi_euidevice_id"
    assert result.volumes[46].volume_id == 547, "Died on +.volumes[46].volume_id"
    assert result.volumes[46].access == """readWrite""", "Died on +.volumes[46].access"
    assert result.volumes[46].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-47.547""", "Died on +.volumes[46].iqn"
    assert result.volumes[46].slice_count == 1, "Died on +.volumes[46].slice_count"
    assert type(result.volumes[46].attributes) is dict, "Died on .volumes[46].attributes"
    assert result.volumes[46].volume_pairs[0].volume_pair_uuid == UUID("9c8a48ed-63f7-4c35-9b6f-6f3519908b4a"), "Died on .volumes[46].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[46].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[46].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[46].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[46].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[46].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[46].volume_pairs[0].remote_replication.state"
    assert result.volumes[46].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[46].volume_pairs[0].remote_replication.mode"
    assert result.volumes[46].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[46].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[46].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[46].volume_pairs[0].cluster_pair_id"
    assert result.volumes[46].volume_pairs[0].remote_volume_id == 1047, "Died on +.volumes[46].volume_pairs[0].remote_volume_id"
    assert result.volumes[46].volume_pairs[0].remote_volume_name == """snap-target-47""", "Died on +.volumes[46].volume_pairs[0].remote_volume_name"
    assert result.volumes[46].volume_pairs[0].remote_slice_id == 1047, "Died on +.volumes[46].volume_pairs[0].remote_slice_id"
    assert result.volumes[46].account_id == 4, "Died on +.volumes[46].account_id"
    assert result.volumes[46].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[46].create_time"
    assert result.volumes[46].virtual_volume_id is None, "Died on .volumes[46].virtual_volume_id"
    assert result.volumes[45].status == """active""", "Died on +.volumes[45].status"
    assert result.volumes[45].enable512e == False, "Died on +.volumes[45].enable512e"
    assert result.volumes[45].qos.burst_iops == 15000, "Died on +.volumes[45].qos.burst_iops"
    assert result.volumes[45].qos.burst_time == 60, "Died on +.volumes[45].qos.burst_time"
    assert result.volumes[45].qos.min_iops == 100, "Died on +.volumes[45].qos.min_iops"
    assert result.volumes[45].qos.max_iops == 15000, "Died on +.volumes[45].qos.max_iops"
    assert result.volumes[45].name == """snapshots-source-46""", "Died on +.volumes[45].name"
    assert result.volumes[45].volume_access_groups[0] == 4, "Died on +.volumes[45].volume_access_groups[0]"
    assert result.volumes[45].scsi_naadevice_id == """6f47acc1000000006d69643400000222""", "Died on +.volumes[45].scsi_naadevice_id"
    assert result.volumes[45].total_size == 5000658944, "Died on +.volumes[45].total_size"
    assert result.volumes[45].block_size == 4096, "Died on +.volumes[45].block_size"
    assert result.volumes[45].scsi_euidevice_id == """6d69643400000222f47acc0100000000""", "Died on +.volumes[45].scsi_euidevice_id"
    assert result.volumes[45].volume_id == 546, "Died on +.volumes[45].volume_id"
    assert result.volumes[45].access == """readWrite""", "Died on +.volumes[45].access"
    assert result.volumes[45].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-46.546""", "Died on +.volumes[45].iqn"
    assert result.volumes[45].slice_count == 1, "Died on +.volumes[45].slice_count"
    assert type(result.volumes[45].attributes) is dict, "Died on .volumes[45].attributes"
    assert result.volumes[45].volume_pairs[0].volume_pair_uuid == UUID("53107794-04c1-4d87-88e0-93bc2673dc7e"), "Died on .volumes[45].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[45].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[45].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[45].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[45].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[45].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[45].volume_pairs[0].remote_replication.state"
    assert result.volumes[45].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[45].volume_pairs[0].remote_replication.mode"
    assert result.volumes[45].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[45].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[45].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[45].volume_pairs[0].cluster_pair_id"
    assert result.volumes[45].volume_pairs[0].remote_volume_id == 1046, "Died on +.volumes[45].volume_pairs[0].remote_volume_id"
    assert result.volumes[45].volume_pairs[0].remote_volume_name == """snap-target-46""", "Died on +.volumes[45].volume_pairs[0].remote_volume_name"
    assert result.volumes[45].volume_pairs[0].remote_slice_id == 1046, "Died on +.volumes[45].volume_pairs[0].remote_slice_id"
    assert result.volumes[45].account_id == 4, "Died on +.volumes[45].account_id"
    assert result.volumes[45].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[45].create_time"
    assert result.volumes[45].virtual_volume_id is None, "Died on .volumes[45].virtual_volume_id"
    assert result.volumes[44].status == """active""", "Died on +.volumes[44].status"
    assert result.volumes[44].enable512e == False, "Died on +.volumes[44].enable512e"
    assert result.volumes[44].qos.burst_iops == 15000, "Died on +.volumes[44].qos.burst_iops"
    assert result.volumes[44].qos.burst_time == 60, "Died on +.volumes[44].qos.burst_time"
    assert result.volumes[44].qos.min_iops == 100, "Died on +.volumes[44].qos.min_iops"
    assert result.volumes[44].qos.max_iops == 15000, "Died on +.volumes[44].qos.max_iops"
    assert result.volumes[44].name == """snapshots-source-45""", "Died on +.volumes[44].name"
    assert result.volumes[44].volume_access_groups[0] == 4, "Died on +.volumes[44].volume_access_groups[0]"
    assert result.volumes[44].scsi_naadevice_id == """6f47acc1000000006d69643400000221""", "Died on +.volumes[44].scsi_naadevice_id"
    assert result.volumes[44].total_size == 5000658944, "Died on +.volumes[44].total_size"
    assert result.volumes[44].block_size == 4096, "Died on +.volumes[44].block_size"
    assert result.volumes[44].scsi_euidevice_id == """6d69643400000221f47acc0100000000""", "Died on +.volumes[44].scsi_euidevice_id"
    assert result.volumes[44].volume_id == 545, "Died on +.volumes[44].volume_id"
    assert result.volumes[44].access == """readWrite""", "Died on +.volumes[44].access"
    assert result.volumes[44].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-45.545""", "Died on +.volumes[44].iqn"
    assert result.volumes[44].slice_count == 1, "Died on +.volumes[44].slice_count"
    assert type(result.volumes[44].attributes) is dict, "Died on .volumes[44].attributes"
    assert result.volumes[44].volume_pairs[0].volume_pair_uuid == UUID("dde4ea3e-f809-4f39-bd33-1adfe7a8123b"), "Died on .volumes[44].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[44].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[44].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[44].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[44].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[44].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[44].volume_pairs[0].remote_replication.state"
    assert result.volumes[44].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[44].volume_pairs[0].remote_replication.mode"
    assert result.volumes[44].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[44].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[44].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[44].volume_pairs[0].cluster_pair_id"
    assert result.volumes[44].volume_pairs[0].remote_volume_id == 1045, "Died on +.volumes[44].volume_pairs[0].remote_volume_id"
    assert result.volumes[44].volume_pairs[0].remote_volume_name == """snap-target-45""", "Died on +.volumes[44].volume_pairs[0].remote_volume_name"
    assert result.volumes[44].volume_pairs[0].remote_slice_id == 1045, "Died on +.volumes[44].volume_pairs[0].remote_slice_id"
    assert result.volumes[44].account_id == 4, "Died on +.volumes[44].account_id"
    assert result.volumes[44].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[44].create_time"
    assert result.volumes[44].virtual_volume_id is None, "Died on .volumes[44].virtual_volume_id"
    assert result.volumes[43].status == """active""", "Died on +.volumes[43].status"
    assert result.volumes[43].enable512e == False, "Died on +.volumes[43].enable512e"
    assert result.volumes[43].qos.burst_iops == 15000, "Died on +.volumes[43].qos.burst_iops"
    assert result.volumes[43].qos.burst_time == 60, "Died on +.volumes[43].qos.burst_time"
    assert result.volumes[43].qos.min_iops == 100, "Died on +.volumes[43].qos.min_iops"
    assert result.volumes[43].qos.max_iops == 15000, "Died on +.volumes[43].qos.max_iops"
    assert result.volumes[43].name == """snapshots-source-44""", "Died on +.volumes[43].name"
    assert result.volumes[43].volume_access_groups[0] == 4, "Died on +.volumes[43].volume_access_groups[0]"
    assert result.volumes[43].scsi_naadevice_id == """6f47acc1000000006d69643400000220""", "Died on +.volumes[43].scsi_naadevice_id"
    assert result.volumes[43].total_size == 5000658944, "Died on +.volumes[43].total_size"
    assert result.volumes[43].block_size == 4096, "Died on +.volumes[43].block_size"
    assert result.volumes[43].scsi_euidevice_id == """6d69643400000220f47acc0100000000""", "Died on +.volumes[43].scsi_euidevice_id"
    assert result.volumes[43].volume_id == 544, "Died on +.volumes[43].volume_id"
    assert result.volumes[43].access == """readWrite""", "Died on +.volumes[43].access"
    assert result.volumes[43].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-44.544""", "Died on +.volumes[43].iqn"
    assert result.volumes[43].slice_count == 1, "Died on +.volumes[43].slice_count"
    assert type(result.volumes[43].attributes) is dict, "Died on .volumes[43].attributes"
    assert result.volumes[43].volume_pairs[0].volume_pair_uuid == UUID("4f52398b-cdd1-407a-bce5-8a12969702e0"), "Died on .volumes[43].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[43].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[43].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[43].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[43].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[43].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[43].volume_pairs[0].remote_replication.state"
    assert result.volumes[43].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[43].volume_pairs[0].remote_replication.mode"
    assert result.volumes[43].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[43].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[43].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[43].volume_pairs[0].cluster_pair_id"
    assert result.volumes[43].volume_pairs[0].remote_volume_id == 1044, "Died on +.volumes[43].volume_pairs[0].remote_volume_id"
    assert result.volumes[43].volume_pairs[0].remote_volume_name == """snap-target-44""", "Died on +.volumes[43].volume_pairs[0].remote_volume_name"
    assert result.volumes[43].volume_pairs[0].remote_slice_id == 1044, "Died on +.volumes[43].volume_pairs[0].remote_slice_id"
    assert result.volumes[43].account_id == 4, "Died on +.volumes[43].account_id"
    assert result.volumes[43].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[43].create_time"
    assert result.volumes[43].virtual_volume_id is None, "Died on .volumes[43].virtual_volume_id"
    assert result.volumes[42].status == """active""", "Died on +.volumes[42].status"
    assert result.volumes[42].enable512e == False, "Died on +.volumes[42].enable512e"
    assert result.volumes[42].qos.burst_iops == 15000, "Died on +.volumes[42].qos.burst_iops"
    assert result.volumes[42].qos.burst_time == 60, "Died on +.volumes[42].qos.burst_time"
    assert result.volumes[42].qos.min_iops == 100, "Died on +.volumes[42].qos.min_iops"
    assert result.volumes[42].qos.max_iops == 15000, "Died on +.volumes[42].qos.max_iops"
    assert result.volumes[42].name == """snapshots-source-43""", "Died on +.volumes[42].name"
    assert result.volumes[42].volume_access_groups[0] == 4, "Died on +.volumes[42].volume_access_groups[0]"
    assert result.volumes[42].scsi_naadevice_id == """6f47acc1000000006d6964340000021f""", "Died on +.volumes[42].scsi_naadevice_id"
    assert result.volumes[42].total_size == 5000658944, "Died on +.volumes[42].total_size"
    assert result.volumes[42].block_size == 4096, "Died on +.volumes[42].block_size"
    assert result.volumes[42].scsi_euidevice_id == """6d6964340000021ff47acc0100000000""", "Died on +.volumes[42].scsi_euidevice_id"
    assert result.volumes[42].volume_id == 543, "Died on +.volumes[42].volume_id"
    assert result.volumes[42].access == """readWrite""", "Died on +.volumes[42].access"
    assert result.volumes[42].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-43.543""", "Died on +.volumes[42].iqn"
    assert result.volumes[42].slice_count == 1, "Died on +.volumes[42].slice_count"
    assert type(result.volumes[42].attributes) is dict, "Died on .volumes[42].attributes"
    assert result.volumes[42].volume_pairs[0].volume_pair_uuid == UUID("e33fe654-0789-47b2-8b90-f91e2753bf9e"), "Died on .volumes[42].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[42].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[42].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[42].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[42].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[42].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[42].volume_pairs[0].remote_replication.state"
    assert result.volumes[42].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[42].volume_pairs[0].remote_replication.mode"
    assert result.volumes[42].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[42].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[42].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[42].volume_pairs[0].cluster_pair_id"
    assert result.volumes[42].volume_pairs[0].remote_volume_id == 1043, "Died on +.volumes[42].volume_pairs[0].remote_volume_id"
    assert result.volumes[42].volume_pairs[0].remote_volume_name == """snap-target-43""", "Died on +.volumes[42].volume_pairs[0].remote_volume_name"
    assert result.volumes[42].volume_pairs[0].remote_slice_id == 1043, "Died on +.volumes[42].volume_pairs[0].remote_slice_id"
    assert result.volumes[42].account_id == 4, "Died on +.volumes[42].account_id"
    assert result.volumes[42].create_time == """2016-12-30T18:07:04Z""", "Died on +.volumes[42].create_time"
    assert result.volumes[42].virtual_volume_id is None, "Died on .volumes[42].virtual_volume_id"
    assert result.volumes[41].status == """active""", "Died on +.volumes[41].status"
    assert result.volumes[41].enable512e == False, "Died on +.volumes[41].enable512e"
    assert result.volumes[41].qos.burst_iops == 15000, "Died on +.volumes[41].qos.burst_iops"
    assert result.volumes[41].qos.burst_time == 60, "Died on +.volumes[41].qos.burst_time"
    assert result.volumes[41].qos.min_iops == 100, "Died on +.volumes[41].qos.min_iops"
    assert result.volumes[41].qos.max_iops == 15000, "Died on +.volumes[41].qos.max_iops"
    assert result.volumes[41].name == """snapshots-source-42""", "Died on +.volumes[41].name"
    assert result.volumes[41].volume_access_groups[0] == 4, "Died on +.volumes[41].volume_access_groups[0]"
    assert result.volumes[41].scsi_naadevice_id == """6f47acc1000000006d6964340000021e""", "Died on +.volumes[41].scsi_naadevice_id"
    assert result.volumes[41].total_size == 5000658944, "Died on +.volumes[41].total_size"
    assert result.volumes[41].block_size == 4096, "Died on +.volumes[41].block_size"
    assert result.volumes[41].scsi_euidevice_id == """6d6964340000021ef47acc0100000000""", "Died on +.volumes[41].scsi_euidevice_id"
    assert result.volumes[41].volume_id == 542, "Died on +.volumes[41].volume_id"
    assert result.volumes[41].access == """readWrite""", "Died on +.volumes[41].access"
    assert result.volumes[41].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-42.542""", "Died on +.volumes[41].iqn"
    assert result.volumes[41].slice_count == 1, "Died on +.volumes[41].slice_count"
    assert type(result.volumes[41].attributes) is dict, "Died on .volumes[41].attributes"
    assert result.volumes[41].volume_pairs[0].volume_pair_uuid == UUID("d6864ffa-c7c9-4469-b5f5-8711cb9a163a"), "Died on .volumes[41].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[41].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[41].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[41].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[41].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[41].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[41].volume_pairs[0].remote_replication.state"
    assert result.volumes[41].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[41].volume_pairs[0].remote_replication.mode"
    assert result.volumes[41].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[41].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[41].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[41].volume_pairs[0].cluster_pair_id"
    assert result.volumes[41].volume_pairs[0].remote_volume_id == 1042, "Died on +.volumes[41].volume_pairs[0].remote_volume_id"
    assert result.volumes[41].volume_pairs[0].remote_volume_name == """snap-target-42""", "Died on +.volumes[41].volume_pairs[0].remote_volume_name"
    assert result.volumes[41].volume_pairs[0].remote_slice_id == 1042, "Died on +.volumes[41].volume_pairs[0].remote_slice_id"
    assert result.volumes[41].account_id == 4, "Died on +.volumes[41].account_id"
    assert result.volumes[41].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[41].create_time"
    assert result.volumes[41].virtual_volume_id is None, "Died on .volumes[41].virtual_volume_id"
    assert result.volumes[40].status == """active""", "Died on +.volumes[40].status"
    assert result.volumes[40].enable512e == False, "Died on +.volumes[40].enable512e"
    assert result.volumes[40].qos.burst_iops == 15000, "Died on +.volumes[40].qos.burst_iops"
    assert result.volumes[40].qos.burst_time == 60, "Died on +.volumes[40].qos.burst_time"
    assert result.volumes[40].qos.min_iops == 100, "Died on +.volumes[40].qos.min_iops"
    assert result.volumes[40].qos.max_iops == 15000, "Died on +.volumes[40].qos.max_iops"
    assert result.volumes[40].name == """snapshots-source-41""", "Died on +.volumes[40].name"
    assert result.volumes[40].volume_access_groups[0] == 4, "Died on +.volumes[40].volume_access_groups[0]"
    assert result.volumes[40].scsi_naadevice_id == """6f47acc1000000006d6964340000021d""", "Died on +.volumes[40].scsi_naadevice_id"
    assert result.volumes[40].total_size == 5000658944, "Died on +.volumes[40].total_size"
    assert result.volumes[40].block_size == 4096, "Died on +.volumes[40].block_size"
    assert result.volumes[40].scsi_euidevice_id == """6d6964340000021df47acc0100000000""", "Died on +.volumes[40].scsi_euidevice_id"
    assert result.volumes[40].volume_id == 541, "Died on +.volumes[40].volume_id"
    assert result.volumes[40].access == """readWrite""", "Died on +.volumes[40].access"
    assert result.volumes[40].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-41.541""", "Died on +.volumes[40].iqn"
    assert result.volumes[40].slice_count == 1, "Died on +.volumes[40].slice_count"
    assert type(result.volumes[40].attributes) is dict, "Died on .volumes[40].attributes"
    assert result.volumes[40].volume_pairs[0].volume_pair_uuid == UUID("2680ed39-29a9-4e6d-bc2b-780eadf5f53b"), "Died on .volumes[40].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[40].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[40].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[40].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[40].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[40].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[40].volume_pairs[0].remote_replication.state"
    assert result.volumes[40].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[40].volume_pairs[0].remote_replication.mode"
    assert result.volumes[40].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[40].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[40].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[40].volume_pairs[0].cluster_pair_id"
    assert result.volumes[40].volume_pairs[0].remote_volume_id == 1041, "Died on +.volumes[40].volume_pairs[0].remote_volume_id"
    assert result.volumes[40].volume_pairs[0].remote_volume_name == """snap-target-41""", "Died on +.volumes[40].volume_pairs[0].remote_volume_name"
    assert result.volumes[40].volume_pairs[0].remote_slice_id == 1041, "Died on +.volumes[40].volume_pairs[0].remote_slice_id"
    assert result.volumes[40].account_id == 4, "Died on +.volumes[40].account_id"
    assert result.volumes[40].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[40].create_time"
    assert result.volumes[40].virtual_volume_id is None, "Died on .volumes[40].virtual_volume_id"
    assert result.volumes[39].status == """active""", "Died on +.volumes[39].status"
    assert result.volumes[39].enable512e == False, "Died on +.volumes[39].enable512e"
    assert result.volumes[39].qos.burst_iops == 15000, "Died on +.volumes[39].qos.burst_iops"
    assert result.volumes[39].qos.burst_time == 60, "Died on +.volumes[39].qos.burst_time"
    assert result.volumes[39].qos.min_iops == 100, "Died on +.volumes[39].qos.min_iops"
    assert result.volumes[39].qos.max_iops == 15000, "Died on +.volumes[39].qos.max_iops"
    assert result.volumes[39].name == """snapshots-source-40""", "Died on +.volumes[39].name"
    assert result.volumes[39].volume_access_groups[0] == 4, "Died on +.volumes[39].volume_access_groups[0]"
    assert result.volumes[39].scsi_naadevice_id == """6f47acc1000000006d6964340000021c""", "Died on +.volumes[39].scsi_naadevice_id"
    assert result.volumes[39].total_size == 5000658944, "Died on +.volumes[39].total_size"
    assert result.volumes[39].block_size == 4096, "Died on +.volumes[39].block_size"
    assert result.volumes[39].scsi_euidevice_id == """6d6964340000021cf47acc0100000000""", "Died on +.volumes[39].scsi_euidevice_id"
    assert result.volumes[39].volume_id == 540, "Died on +.volumes[39].volume_id"
    assert result.volumes[39].access == """readWrite""", "Died on +.volumes[39].access"
    assert result.volumes[39].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-40.540""", "Died on +.volumes[39].iqn"
    assert result.volumes[39].slice_count == 1, "Died on +.volumes[39].slice_count"
    assert type(result.volumes[39].attributes) is dict, "Died on .volumes[39].attributes"
    assert result.volumes[39].volume_pairs[0].volume_pair_uuid == UUID("26806a64-5f83-4b20-873c-6224dcc84dae"), "Died on .volumes[39].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[39].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[39].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[39].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[39].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[39].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[39].volume_pairs[0].remote_replication.state"
    assert result.volumes[39].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[39].volume_pairs[0].remote_replication.mode"
    assert result.volumes[39].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[39].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[39].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[39].volume_pairs[0].cluster_pair_id"
    assert result.volumes[39].volume_pairs[0].remote_volume_id == 1040, "Died on +.volumes[39].volume_pairs[0].remote_volume_id"
    assert result.volumes[39].volume_pairs[0].remote_volume_name == """snap-target-40""", "Died on +.volumes[39].volume_pairs[0].remote_volume_name"
    assert result.volumes[39].volume_pairs[0].remote_slice_id == 1040, "Died on +.volumes[39].volume_pairs[0].remote_slice_id"
    assert result.volumes[39].account_id == 4, "Died on +.volumes[39].account_id"
    assert result.volumes[39].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[39].create_time"
    assert result.volumes[39].virtual_volume_id is None, "Died on .volumes[39].virtual_volume_id"
    assert result.volumes[38].status == """active""", "Died on +.volumes[38].status"
    assert result.volumes[38].enable512e == False, "Died on +.volumes[38].enable512e"
    assert result.volumes[38].qos.burst_iops == 15000, "Died on +.volumes[38].qos.burst_iops"
    assert result.volumes[38].qos.burst_time == 60, "Died on +.volumes[38].qos.burst_time"
    assert result.volumes[38].qos.min_iops == 100, "Died on +.volumes[38].qos.min_iops"
    assert result.volumes[38].qos.max_iops == 15000, "Died on +.volumes[38].qos.max_iops"
    assert result.volumes[38].name == """snapshots-source-39""", "Died on +.volumes[38].name"
    assert result.volumes[38].volume_access_groups[0] == 4, "Died on +.volumes[38].volume_access_groups[0]"
    assert result.volumes[38].scsi_naadevice_id == """6f47acc1000000006d6964340000021b""", "Died on +.volumes[38].scsi_naadevice_id"
    assert result.volumes[38].total_size == 5000658944, "Died on +.volumes[38].total_size"
    assert result.volumes[38].block_size == 4096, "Died on +.volumes[38].block_size"
    assert result.volumes[38].scsi_euidevice_id == """6d6964340000021bf47acc0100000000""", "Died on +.volumes[38].scsi_euidevice_id"
    assert result.volumes[38].volume_id == 539, "Died on +.volumes[38].volume_id"
    assert result.volumes[38].access == """readWrite""", "Died on +.volumes[38].access"
    assert result.volumes[38].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-39.539""", "Died on +.volumes[38].iqn"
    assert result.volumes[38].slice_count == 1, "Died on +.volumes[38].slice_count"
    assert type(result.volumes[38].attributes) is dict, "Died on .volumes[38].attributes"
    assert result.volumes[38].volume_pairs[0].volume_pair_uuid == UUID("88325ec5-d4f0-4251-8867-7f8fb42accf1"), "Died on .volumes[38].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[38].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[38].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[38].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[38].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[38].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[38].volume_pairs[0].remote_replication.state"
    assert result.volumes[38].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[38].volume_pairs[0].remote_replication.mode"
    assert result.volumes[38].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[38].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[38].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[38].volume_pairs[0].cluster_pair_id"
    assert result.volumes[38].volume_pairs[0].remote_volume_id == 1039, "Died on +.volumes[38].volume_pairs[0].remote_volume_id"
    assert result.volumes[38].volume_pairs[0].remote_volume_name == """snap-target-39""", "Died on +.volumes[38].volume_pairs[0].remote_volume_name"
    assert result.volumes[38].volume_pairs[0].remote_slice_id == 1039, "Died on +.volumes[38].volume_pairs[0].remote_slice_id"
    assert result.volumes[38].account_id == 4, "Died on +.volumes[38].account_id"
    assert result.volumes[38].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[38].create_time"
    assert result.volumes[38].virtual_volume_id is None, "Died on .volumes[38].virtual_volume_id"
    assert result.volumes[37].status == """active""", "Died on +.volumes[37].status"
    assert result.volumes[37].enable512e == False, "Died on +.volumes[37].enable512e"
    assert result.volumes[37].qos.burst_iops == 15000, "Died on +.volumes[37].qos.burst_iops"
    assert result.volumes[37].qos.burst_time == 60, "Died on +.volumes[37].qos.burst_time"
    assert result.volumes[37].qos.min_iops == 100, "Died on +.volumes[37].qos.min_iops"
    assert result.volumes[37].qos.max_iops == 15000, "Died on +.volumes[37].qos.max_iops"
    assert result.volumes[37].name == """snapshots-source-38""", "Died on +.volumes[37].name"
    assert result.volumes[37].volume_access_groups[0] == 4, "Died on +.volumes[37].volume_access_groups[0]"
    assert result.volumes[37].scsi_naadevice_id == """6f47acc1000000006d6964340000021a""", "Died on +.volumes[37].scsi_naadevice_id"
    assert result.volumes[37].total_size == 5000658944, "Died on +.volumes[37].total_size"
    assert result.volumes[37].block_size == 4096, "Died on +.volumes[37].block_size"
    assert result.volumes[37].scsi_euidevice_id == """6d6964340000021af47acc0100000000""", "Died on +.volumes[37].scsi_euidevice_id"
    assert result.volumes[37].volume_id == 538, "Died on +.volumes[37].volume_id"
    assert result.volumes[37].access == """readWrite""", "Died on +.volumes[37].access"
    assert result.volumes[37].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-38.538""", "Died on +.volumes[37].iqn"
    assert result.volumes[37].slice_count == 1, "Died on +.volumes[37].slice_count"
    assert type(result.volumes[37].attributes) is dict, "Died on .volumes[37].attributes"
    assert result.volumes[37].volume_pairs[0].volume_pair_uuid == UUID("00bb9eae-110c-426d-bc85-f698493701b8"), "Died on .volumes[37].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[37].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[37].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[37].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[37].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[37].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[37].volume_pairs[0].remote_replication.state"
    assert result.volumes[37].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[37].volume_pairs[0].remote_replication.mode"
    assert result.volumes[37].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[37].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[37].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[37].volume_pairs[0].cluster_pair_id"
    assert result.volumes[37].volume_pairs[0].remote_volume_id == 1038, "Died on +.volumes[37].volume_pairs[0].remote_volume_id"
    assert result.volumes[37].volume_pairs[0].remote_volume_name == """snap-target-38""", "Died on +.volumes[37].volume_pairs[0].remote_volume_name"
    assert result.volumes[37].volume_pairs[0].remote_slice_id == 1038, "Died on +.volumes[37].volume_pairs[0].remote_slice_id"
    assert result.volumes[37].account_id == 4, "Died on +.volumes[37].account_id"
    assert result.volumes[37].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[37].create_time"
    assert result.volumes[37].virtual_volume_id is None, "Died on .volumes[37].virtual_volume_id"
    assert result.volumes[36].status == """active""", "Died on +.volumes[36].status"
    assert result.volumes[36].enable512e == False, "Died on +.volumes[36].enable512e"
    assert result.volumes[36].qos.burst_iops == 15000, "Died on +.volumes[36].qos.burst_iops"
    assert result.volumes[36].qos.burst_time == 60, "Died on +.volumes[36].qos.burst_time"
    assert result.volumes[36].qos.min_iops == 100, "Died on +.volumes[36].qos.min_iops"
    assert result.volumes[36].qos.max_iops == 15000, "Died on +.volumes[36].qos.max_iops"
    assert result.volumes[36].name == """snapshots-source-37""", "Died on +.volumes[36].name"
    assert result.volumes[36].volume_access_groups[0] == 4, "Died on +.volumes[36].volume_access_groups[0]"
    assert result.volumes[36].scsi_naadevice_id == """6f47acc1000000006d69643400000219""", "Died on +.volumes[36].scsi_naadevice_id"
    assert result.volumes[36].total_size == 5000658944, "Died on +.volumes[36].total_size"
    assert result.volumes[36].block_size == 4096, "Died on +.volumes[36].block_size"
    assert result.volumes[36].scsi_euidevice_id == """6d69643400000219f47acc0100000000""", "Died on +.volumes[36].scsi_euidevice_id"
    assert result.volumes[36].volume_id == 537, "Died on +.volumes[36].volume_id"
    assert result.volumes[36].access == """readWrite""", "Died on +.volumes[36].access"
    assert result.volumes[36].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-37.537""", "Died on +.volumes[36].iqn"
    assert result.volumes[36].slice_count == 1, "Died on +.volumes[36].slice_count"
    assert type(result.volumes[36].attributes) is dict, "Died on .volumes[36].attributes"
    assert result.volumes[36].volume_pairs[0].volume_pair_uuid == UUID("fa698dba-afc8-4c7b-b03e-2deb80974ad8"), "Died on .volumes[36].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[36].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[36].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[36].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[36].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[36].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[36].volume_pairs[0].remote_replication.state"
    assert result.volumes[36].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[36].volume_pairs[0].remote_replication.mode"
    assert result.volumes[36].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[36].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[36].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[36].volume_pairs[0].cluster_pair_id"
    assert result.volumes[36].volume_pairs[0].remote_volume_id == 1037, "Died on +.volumes[36].volume_pairs[0].remote_volume_id"
    assert result.volumes[36].volume_pairs[0].remote_volume_name == """snap-target-37""", "Died on +.volumes[36].volume_pairs[0].remote_volume_name"
    assert result.volumes[36].volume_pairs[0].remote_slice_id == 1037, "Died on +.volumes[36].volume_pairs[0].remote_slice_id"
    assert result.volumes[36].account_id == 4, "Died on +.volumes[36].account_id"
    assert result.volumes[36].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[36].create_time"
    assert result.volumes[36].virtual_volume_id is None, "Died on .volumes[36].virtual_volume_id"
    assert result.volumes[35].status == """active""", "Died on +.volumes[35].status"
    assert result.volumes[35].enable512e == False, "Died on +.volumes[35].enable512e"
    assert result.volumes[35].qos.burst_iops == 15000, "Died on +.volumes[35].qos.burst_iops"
    assert result.volumes[35].qos.burst_time == 60, "Died on +.volumes[35].qos.burst_time"
    assert result.volumes[35].qos.min_iops == 100, "Died on +.volumes[35].qos.min_iops"
    assert result.volumes[35].qos.max_iops == 15000, "Died on +.volumes[35].qos.max_iops"
    assert result.volumes[35].name == """snapshots-source-36""", "Died on +.volumes[35].name"
    assert result.volumes[35].volume_access_groups[0] == 4, "Died on +.volumes[35].volume_access_groups[0]"
    assert result.volumes[35].scsi_naadevice_id == """6f47acc1000000006d69643400000218""", "Died on +.volumes[35].scsi_naadevice_id"
    assert result.volumes[35].total_size == 5000658944, "Died on +.volumes[35].total_size"
    assert result.volumes[35].block_size == 4096, "Died on +.volumes[35].block_size"
    assert result.volumes[35].scsi_euidevice_id == """6d69643400000218f47acc0100000000""", "Died on +.volumes[35].scsi_euidevice_id"
    assert result.volumes[35].volume_id == 536, "Died on +.volumes[35].volume_id"
    assert result.volumes[35].access == """readWrite""", "Died on +.volumes[35].access"
    assert result.volumes[35].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-36.536""", "Died on +.volumes[35].iqn"
    assert result.volumes[35].slice_count == 1, "Died on +.volumes[35].slice_count"
    assert type(result.volumes[35].attributes) is dict, "Died on .volumes[35].attributes"
    assert result.volumes[35].volume_pairs[0].volume_pair_uuid == UUID("68f598bc-6e9b-4958-8b3c-b54298a63943"), "Died on .volumes[35].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[35].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[35].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[35].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[35].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[35].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[35].volume_pairs[0].remote_replication.state"
    assert result.volumes[35].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[35].volume_pairs[0].remote_replication.mode"
    assert result.volumes[35].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[35].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[35].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[35].volume_pairs[0].cluster_pair_id"
    assert result.volumes[35].volume_pairs[0].remote_volume_id == 1036, "Died on +.volumes[35].volume_pairs[0].remote_volume_id"
    assert result.volumes[35].volume_pairs[0].remote_volume_name == """snap-target-36""", "Died on +.volumes[35].volume_pairs[0].remote_volume_name"
    assert result.volumes[35].volume_pairs[0].remote_slice_id == 1036, "Died on +.volumes[35].volume_pairs[0].remote_slice_id"
    assert result.volumes[35].account_id == 4, "Died on +.volumes[35].account_id"
    assert result.volumes[35].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[35].create_time"
    assert result.volumes[35].virtual_volume_id is None, "Died on .volumes[35].virtual_volume_id"
    assert result.volumes[34].status == """active""", "Died on +.volumes[34].status"
    assert result.volumes[34].enable512e == False, "Died on +.volumes[34].enable512e"
    assert result.volumes[34].qos.burst_iops == 15000, "Died on +.volumes[34].qos.burst_iops"
    assert result.volumes[34].qos.burst_time == 60, "Died on +.volumes[34].qos.burst_time"
    assert result.volumes[34].qos.min_iops == 100, "Died on +.volumes[34].qos.min_iops"
    assert result.volumes[34].qos.max_iops == 15000, "Died on +.volumes[34].qos.max_iops"
    assert result.volumes[34].name == """snapshots-source-35""", "Died on +.volumes[34].name"
    assert result.volumes[34].volume_access_groups[0] == 4, "Died on +.volumes[34].volume_access_groups[0]"
    assert result.volumes[34].scsi_naadevice_id == """6f47acc1000000006d69643400000217""", "Died on +.volumes[34].scsi_naadevice_id"
    assert result.volumes[34].total_size == 5000658944, "Died on +.volumes[34].total_size"
    assert result.volumes[34].block_size == 4096, "Died on +.volumes[34].block_size"
    assert result.volumes[34].scsi_euidevice_id == """6d69643400000217f47acc0100000000""", "Died on +.volumes[34].scsi_euidevice_id"
    assert result.volumes[34].volume_id == 535, "Died on +.volumes[34].volume_id"
    assert result.volumes[34].access == """readWrite""", "Died on +.volumes[34].access"
    assert result.volumes[34].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-35.535""", "Died on +.volumes[34].iqn"
    assert result.volumes[34].slice_count == 1, "Died on +.volumes[34].slice_count"
    assert type(result.volumes[34].attributes) is dict, "Died on .volumes[34].attributes"
    assert result.volumes[34].volume_pairs[0].volume_pair_uuid == UUID("e444ba3b-c0f0-45b2-872c-455663a1c706"), "Died on .volumes[34].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[34].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[34].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[34].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[34].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[34].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[34].volume_pairs[0].remote_replication.state"
    assert result.volumes[34].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[34].volume_pairs[0].remote_replication.mode"
    assert result.volumes[34].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[34].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[34].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[34].volume_pairs[0].cluster_pair_id"
    assert result.volumes[34].volume_pairs[0].remote_volume_id == 1035, "Died on +.volumes[34].volume_pairs[0].remote_volume_id"
    assert result.volumes[34].volume_pairs[0].remote_volume_name == """snap-target-35""", "Died on +.volumes[34].volume_pairs[0].remote_volume_name"
    assert result.volumes[34].volume_pairs[0].remote_slice_id == 1035, "Died on +.volumes[34].volume_pairs[0].remote_slice_id"
    assert result.volumes[34].account_id == 4, "Died on +.volumes[34].account_id"
    assert result.volumes[34].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[34].create_time"
    assert result.volumes[34].virtual_volume_id is None, "Died on .volumes[34].virtual_volume_id"
    assert result.volumes[33].status == """active""", "Died on +.volumes[33].status"
    assert result.volumes[33].enable512e == False, "Died on +.volumes[33].enable512e"
    assert result.volumes[33].qos.burst_iops == 15000, "Died on +.volumes[33].qos.burst_iops"
    assert result.volumes[33].qos.burst_time == 60, "Died on +.volumes[33].qos.burst_time"
    assert result.volumes[33].qos.min_iops == 100, "Died on +.volumes[33].qos.min_iops"
    assert result.volumes[33].qos.max_iops == 15000, "Died on +.volumes[33].qos.max_iops"
    assert result.volumes[33].name == """snapshots-source-34""", "Died on +.volumes[33].name"
    assert result.volumes[33].volume_access_groups[0] == 4, "Died on +.volumes[33].volume_access_groups[0]"
    assert result.volumes[33].scsi_naadevice_id == """6f47acc1000000006d69643400000216""", "Died on +.volumes[33].scsi_naadevice_id"
    assert result.volumes[33].total_size == 5000658944, "Died on +.volumes[33].total_size"
    assert result.volumes[33].block_size == 4096, "Died on +.volumes[33].block_size"
    assert result.volumes[33].scsi_euidevice_id == """6d69643400000216f47acc0100000000""", "Died on +.volumes[33].scsi_euidevice_id"
    assert result.volumes[33].volume_id == 534, "Died on +.volumes[33].volume_id"
    assert result.volumes[33].access == """readWrite""", "Died on +.volumes[33].access"
    assert result.volumes[33].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-34.534""", "Died on +.volumes[33].iqn"
    assert result.volumes[33].slice_count == 1, "Died on +.volumes[33].slice_count"
    assert type(result.volumes[33].attributes) is dict, "Died on .volumes[33].attributes"
    assert result.volumes[33].volume_pairs[0].volume_pair_uuid == UUID("3719f1e8-253b-4a1f-ab8e-9ba98d28a9ec"), "Died on .volumes[33].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[33].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[33].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[33].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[33].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[33].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[33].volume_pairs[0].remote_replication.state"
    assert result.volumes[33].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[33].volume_pairs[0].remote_replication.mode"
    assert result.volumes[33].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[33].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[33].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[33].volume_pairs[0].cluster_pair_id"
    assert result.volumes[33].volume_pairs[0].remote_volume_id == 1034, "Died on +.volumes[33].volume_pairs[0].remote_volume_id"
    assert result.volumes[33].volume_pairs[0].remote_volume_name == """snap-target-34""", "Died on +.volumes[33].volume_pairs[0].remote_volume_name"
    assert result.volumes[33].volume_pairs[0].remote_slice_id == 1034, "Died on +.volumes[33].volume_pairs[0].remote_slice_id"
    assert result.volumes[33].account_id == 4, "Died on +.volumes[33].account_id"
    assert result.volumes[33].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[33].create_time"
    assert result.volumes[33].virtual_volume_id is None, "Died on .volumes[33].virtual_volume_id"
    assert result.volumes[32].status == """active""", "Died on +.volumes[32].status"
    assert result.volumes[32].enable512e == False, "Died on +.volumes[32].enable512e"
    assert result.volumes[32].qos.burst_iops == 15000, "Died on +.volumes[32].qos.burst_iops"
    assert result.volumes[32].qos.burst_time == 60, "Died on +.volumes[32].qos.burst_time"
    assert result.volumes[32].qos.min_iops == 100, "Died on +.volumes[32].qos.min_iops"
    assert result.volumes[32].qos.max_iops == 15000, "Died on +.volumes[32].qos.max_iops"
    assert result.volumes[32].name == """snapshots-source-33""", "Died on +.volumes[32].name"
    assert result.volumes[32].volume_access_groups[0] == 4, "Died on +.volumes[32].volume_access_groups[0]"
    assert result.volumes[32].scsi_naadevice_id == """6f47acc1000000006d69643400000215""", "Died on +.volumes[32].scsi_naadevice_id"
    assert result.volumes[32].total_size == 5000658944, "Died on +.volumes[32].total_size"
    assert result.volumes[32].block_size == 4096, "Died on +.volumes[32].block_size"
    assert result.volumes[32].scsi_euidevice_id == """6d69643400000215f47acc0100000000""", "Died on +.volumes[32].scsi_euidevice_id"
    assert result.volumes[32].volume_id == 533, "Died on +.volumes[32].volume_id"
    assert result.volumes[32].access == """readWrite""", "Died on +.volumes[32].access"
    assert result.volumes[32].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-33.533""", "Died on +.volumes[32].iqn"
    assert result.volumes[32].slice_count == 1, "Died on +.volumes[32].slice_count"
    assert type(result.volumes[32].attributes) is dict, "Died on .volumes[32].attributes"
    assert result.volumes[32].volume_pairs[0].volume_pair_uuid == UUID("93f39cce-da26-4d2d-8159-c976080d5222"), "Died on .volumes[32].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[32].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[32].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[32].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[32].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[32].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[32].volume_pairs[0].remote_replication.state"
    assert result.volumes[32].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[32].volume_pairs[0].remote_replication.mode"
    assert result.volumes[32].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[32].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[32].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[32].volume_pairs[0].cluster_pair_id"
    assert result.volumes[32].volume_pairs[0].remote_volume_id == 1033, "Died on +.volumes[32].volume_pairs[0].remote_volume_id"
    assert result.volumes[32].volume_pairs[0].remote_volume_name == """snap-target-33""", "Died on +.volumes[32].volume_pairs[0].remote_volume_name"
    assert result.volumes[32].volume_pairs[0].remote_slice_id == 1033, "Died on +.volumes[32].volume_pairs[0].remote_slice_id"
    assert result.volumes[32].account_id == 4, "Died on +.volumes[32].account_id"
    assert result.volumes[32].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[32].create_time"
    assert result.volumes[32].virtual_volume_id is None, "Died on .volumes[32].virtual_volume_id"
    assert result.volumes[31].status == """active""", "Died on +.volumes[31].status"
    assert result.volumes[31].enable512e == False, "Died on +.volumes[31].enable512e"
    assert result.volumes[31].qos.burst_iops == 15000, "Died on +.volumes[31].qos.burst_iops"
    assert result.volumes[31].qos.burst_time == 60, "Died on +.volumes[31].qos.burst_time"
    assert result.volumes[31].qos.min_iops == 100, "Died on +.volumes[31].qos.min_iops"
    assert result.volumes[31].qos.max_iops == 15000, "Died on +.volumes[31].qos.max_iops"
    assert result.volumes[31].name == """snapshots-source-32""", "Died on +.volumes[31].name"
    assert result.volumes[31].volume_access_groups[0] == 4, "Died on +.volumes[31].volume_access_groups[0]"
    assert result.volumes[31].scsi_naadevice_id == """6f47acc1000000006d69643400000214""", "Died on +.volumes[31].scsi_naadevice_id"
    assert result.volumes[31].total_size == 5000658944, "Died on +.volumes[31].total_size"
    assert result.volumes[31].block_size == 4096, "Died on +.volumes[31].block_size"
    assert result.volumes[31].scsi_euidevice_id == """6d69643400000214f47acc0100000000""", "Died on +.volumes[31].scsi_euidevice_id"
    assert result.volumes[31].volume_id == 532, "Died on +.volumes[31].volume_id"
    assert result.volumes[31].access == """readWrite""", "Died on +.volumes[31].access"
    assert result.volumes[31].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-32.532""", "Died on +.volumes[31].iqn"
    assert result.volumes[31].slice_count == 1, "Died on +.volumes[31].slice_count"
    assert type(result.volumes[31].attributes) is dict, "Died on .volumes[31].attributes"
    assert result.volumes[31].volume_pairs[0].volume_pair_uuid == UUID("ac08665e-8555-47e9-a15d-90a5b829ab68"), "Died on .volumes[31].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[31].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[31].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[31].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[31].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[31].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[31].volume_pairs[0].remote_replication.state"
    assert result.volumes[31].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[31].volume_pairs[0].remote_replication.mode"
    assert result.volumes[31].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[31].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[31].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[31].volume_pairs[0].cluster_pair_id"
    assert result.volumes[31].volume_pairs[0].remote_volume_id == 1032, "Died on +.volumes[31].volume_pairs[0].remote_volume_id"
    assert result.volumes[31].volume_pairs[0].remote_volume_name == """snap-target-32""", "Died on +.volumes[31].volume_pairs[0].remote_volume_name"
    assert result.volumes[31].volume_pairs[0].remote_slice_id == 1032, "Died on +.volumes[31].volume_pairs[0].remote_slice_id"
    assert result.volumes[31].account_id == 4, "Died on +.volumes[31].account_id"
    assert result.volumes[31].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[31].create_time"
    assert result.volumes[31].virtual_volume_id is None, "Died on .volumes[31].virtual_volume_id"
    assert result.volumes[30].status == """active""", "Died on +.volumes[30].status"
    assert result.volumes[30].enable512e == False, "Died on +.volumes[30].enable512e"
    assert result.volumes[30].qos.burst_iops == 15000, "Died on +.volumes[30].qos.burst_iops"
    assert result.volumes[30].qos.burst_time == 60, "Died on +.volumes[30].qos.burst_time"
    assert result.volumes[30].qos.min_iops == 100, "Died on +.volumes[30].qos.min_iops"
    assert result.volumes[30].qos.max_iops == 15000, "Died on +.volumes[30].qos.max_iops"
    assert result.volumes[30].name == """snapshots-source-31""", "Died on +.volumes[30].name"
    assert result.volumes[30].volume_access_groups[0] == 4, "Died on +.volumes[30].volume_access_groups[0]"
    assert result.volumes[30].scsi_naadevice_id == """6f47acc1000000006d69643400000213""", "Died on +.volumes[30].scsi_naadevice_id"
    assert result.volumes[30].total_size == 5000658944, "Died on +.volumes[30].total_size"
    assert result.volumes[30].block_size == 4096, "Died on +.volumes[30].block_size"
    assert result.volumes[30].scsi_euidevice_id == """6d69643400000213f47acc0100000000""", "Died on +.volumes[30].scsi_euidevice_id"
    assert result.volumes[30].volume_id == 531, "Died on +.volumes[30].volume_id"
    assert result.volumes[30].access == """readWrite""", "Died on +.volumes[30].access"
    assert result.volumes[30].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-31.531""", "Died on +.volumes[30].iqn"
    assert result.volumes[30].slice_count == 1, "Died on +.volumes[30].slice_count"
    assert type(result.volumes[30].attributes) is dict, "Died on .volumes[30].attributes"
    assert result.volumes[30].volume_pairs[0].volume_pair_uuid == UUID("08454700-bb4a-4d74-9119-0a6fc19f9e56"), "Died on .volumes[30].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[30].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[30].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[30].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[30].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[30].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[30].volume_pairs[0].remote_replication.state"
    assert result.volumes[30].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[30].volume_pairs[0].remote_replication.mode"
    assert result.volumes[30].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[30].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[30].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[30].volume_pairs[0].cluster_pair_id"
    assert result.volumes[30].volume_pairs[0].remote_volume_id == 1031, "Died on +.volumes[30].volume_pairs[0].remote_volume_id"
    assert result.volumes[30].volume_pairs[0].remote_volume_name == """snap-target-31""", "Died on +.volumes[30].volume_pairs[0].remote_volume_name"
    assert result.volumes[30].volume_pairs[0].remote_slice_id == 1031, "Died on +.volumes[30].volume_pairs[0].remote_slice_id"
    assert result.volumes[30].account_id == 4, "Died on +.volumes[30].account_id"
    assert result.volumes[30].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[30].create_time"
    assert result.volumes[30].virtual_volume_id is None, "Died on .volumes[30].virtual_volume_id"
    assert result.volumes[29].status == """active""", "Died on +.volumes[29].status"
    assert result.volumes[29].enable512e == False, "Died on +.volumes[29].enable512e"
    assert result.volumes[29].qos.burst_iops == 15000, "Died on +.volumes[29].qos.burst_iops"
    assert result.volumes[29].qos.burst_time == 60, "Died on +.volumes[29].qos.burst_time"
    assert result.volumes[29].qos.min_iops == 100, "Died on +.volumes[29].qos.min_iops"
    assert result.volumes[29].qos.max_iops == 15000, "Died on +.volumes[29].qos.max_iops"
    assert result.volumes[29].name == """snapshots-source-30""", "Died on +.volumes[29].name"
    assert result.volumes[29].volume_access_groups[0] == 4, "Died on +.volumes[29].volume_access_groups[0]"
    assert result.volumes[29].scsi_naadevice_id == """6f47acc1000000006d69643400000212""", "Died on +.volumes[29].scsi_naadevice_id"
    assert result.volumes[29].total_size == 5000658944, "Died on +.volumes[29].total_size"
    assert result.volumes[29].block_size == 4096, "Died on +.volumes[29].block_size"
    assert result.volumes[29].scsi_euidevice_id == """6d69643400000212f47acc0100000000""", "Died on +.volumes[29].scsi_euidevice_id"
    assert result.volumes[29].volume_id == 530, "Died on +.volumes[29].volume_id"
    assert result.volumes[29].access == """readWrite""", "Died on +.volumes[29].access"
    assert result.volumes[29].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-30.530""", "Died on +.volumes[29].iqn"
    assert result.volumes[29].slice_count == 1, "Died on +.volumes[29].slice_count"
    assert type(result.volumes[29].attributes) is dict, "Died on .volumes[29].attributes"
    assert result.volumes[29].volume_pairs[0].volume_pair_uuid == UUID("9a28feef-449d-4c86-8bd5-699e0a857d55"), "Died on .volumes[29].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[29].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[29].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[29].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[29].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[29].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[29].volume_pairs[0].remote_replication.state"
    assert result.volumes[29].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[29].volume_pairs[0].remote_replication.mode"
    assert result.volumes[29].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[29].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[29].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[29].volume_pairs[0].cluster_pair_id"
    assert result.volumes[29].volume_pairs[0].remote_volume_id == 1030, "Died on +.volumes[29].volume_pairs[0].remote_volume_id"
    assert result.volumes[29].volume_pairs[0].remote_volume_name == """snap-target-30""", "Died on +.volumes[29].volume_pairs[0].remote_volume_name"
    assert result.volumes[29].volume_pairs[0].remote_slice_id == 1030, "Died on +.volumes[29].volume_pairs[0].remote_slice_id"
    assert result.volumes[29].account_id == 4, "Died on +.volumes[29].account_id"
    assert result.volumes[29].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[29].create_time"
    assert result.volumes[29].virtual_volume_id is None, "Died on .volumes[29].virtual_volume_id"
    assert result.volumes[28].status == """active""", "Died on +.volumes[28].status"
    assert result.volumes[28].enable512e == False, "Died on +.volumes[28].enable512e"
    assert result.volumes[28].qos.burst_iops == 15000, "Died on +.volumes[28].qos.burst_iops"
    assert result.volumes[28].qos.burst_time == 60, "Died on +.volumes[28].qos.burst_time"
    assert result.volumes[28].qos.min_iops == 100, "Died on +.volumes[28].qos.min_iops"
    assert result.volumes[28].qos.max_iops == 15000, "Died on +.volumes[28].qos.max_iops"
    assert result.volumes[28].name == """snapshots-source-29""", "Died on +.volumes[28].name"
    assert result.volumes[28].volume_access_groups[0] == 4, "Died on +.volumes[28].volume_access_groups[0]"
    assert result.volumes[28].scsi_naadevice_id == """6f47acc1000000006d69643400000211""", "Died on +.volumes[28].scsi_naadevice_id"
    assert result.volumes[28].total_size == 5000658944, "Died on +.volumes[28].total_size"
    assert result.volumes[28].block_size == 4096, "Died on +.volumes[28].block_size"
    assert result.volumes[28].scsi_euidevice_id == """6d69643400000211f47acc0100000000""", "Died on +.volumes[28].scsi_euidevice_id"
    assert result.volumes[28].volume_id == 529, "Died on +.volumes[28].volume_id"
    assert result.volumes[28].access == """readWrite""", "Died on +.volumes[28].access"
    assert result.volumes[28].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-29.529""", "Died on +.volumes[28].iqn"
    assert result.volumes[28].slice_count == 1, "Died on +.volumes[28].slice_count"
    assert type(result.volumes[28].attributes) is dict, "Died on .volumes[28].attributes"
    assert result.volumes[28].volume_pairs[0].volume_pair_uuid == UUID("94816c9b-d676-424c-a2cc-a04dd6a1078c"), "Died on .volumes[28].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[28].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[28].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[28].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[28].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[28].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[28].volume_pairs[0].remote_replication.state"
    assert result.volumes[28].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[28].volume_pairs[0].remote_replication.mode"
    assert result.volumes[28].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[28].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[28].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[28].volume_pairs[0].cluster_pair_id"
    assert result.volumes[28].volume_pairs[0].remote_volume_id == 1029, "Died on +.volumes[28].volume_pairs[0].remote_volume_id"
    assert result.volumes[28].volume_pairs[0].remote_volume_name == """snap-target-29""", "Died on +.volumes[28].volume_pairs[0].remote_volume_name"
    assert result.volumes[28].volume_pairs[0].remote_slice_id == 1029, "Died on +.volumes[28].volume_pairs[0].remote_slice_id"
    assert result.volumes[28].account_id == 4, "Died on +.volumes[28].account_id"
    assert result.volumes[28].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[28].create_time"
    assert result.volumes[28].virtual_volume_id is None, "Died on .volumes[28].virtual_volume_id"
    assert result.volumes[27].status == """active""", "Died on +.volumes[27].status"
    assert result.volumes[27].enable512e == False, "Died on +.volumes[27].enable512e"
    assert result.volumes[27].qos.burst_iops == 15000, "Died on +.volumes[27].qos.burst_iops"
    assert result.volumes[27].qos.burst_time == 60, "Died on +.volumes[27].qos.burst_time"
    assert result.volumes[27].qos.min_iops == 100, "Died on +.volumes[27].qos.min_iops"
    assert result.volumes[27].qos.max_iops == 15000, "Died on +.volumes[27].qos.max_iops"
    assert result.volumes[27].name == """snapshots-source-28""", "Died on +.volumes[27].name"
    assert result.volumes[27].volume_access_groups[0] == 4, "Died on +.volumes[27].volume_access_groups[0]"
    assert result.volumes[27].scsi_naadevice_id == """6f47acc1000000006d69643400000210""", "Died on +.volumes[27].scsi_naadevice_id"
    assert result.volumes[27].total_size == 5000658944, "Died on +.volumes[27].total_size"
    assert result.volumes[27].block_size == 4096, "Died on +.volumes[27].block_size"
    assert result.volumes[27].scsi_euidevice_id == """6d69643400000210f47acc0100000000""", "Died on +.volumes[27].scsi_euidevice_id"
    assert result.volumes[27].volume_id == 528, "Died on +.volumes[27].volume_id"
    assert result.volumes[27].access == """readWrite""", "Died on +.volumes[27].access"
    assert result.volumes[27].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-28.528""", "Died on +.volumes[27].iqn"
    assert result.volumes[27].slice_count == 1, "Died on +.volumes[27].slice_count"
    assert type(result.volumes[27].attributes) is dict, "Died on .volumes[27].attributes"
    assert result.volumes[27].volume_pairs[0].volume_pair_uuid == UUID("11120df9-befa-43d5-a304-796033a0d844"), "Died on .volumes[27].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[27].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[27].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[27].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[27].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[27].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[27].volume_pairs[0].remote_replication.state"
    assert result.volumes[27].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[27].volume_pairs[0].remote_replication.mode"
    assert result.volumes[27].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[27].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[27].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[27].volume_pairs[0].cluster_pair_id"
    assert result.volumes[27].volume_pairs[0].remote_volume_id == 1028, "Died on +.volumes[27].volume_pairs[0].remote_volume_id"
    assert result.volumes[27].volume_pairs[0].remote_volume_name == """snap-target-28""", "Died on +.volumes[27].volume_pairs[0].remote_volume_name"
    assert result.volumes[27].volume_pairs[0].remote_slice_id == 1028, "Died on +.volumes[27].volume_pairs[0].remote_slice_id"
    assert result.volumes[27].account_id == 4, "Died on +.volumes[27].account_id"
    assert result.volumes[27].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[27].create_time"
    assert result.volumes[27].virtual_volume_id is None, "Died on .volumes[27].virtual_volume_id"
    assert result.volumes[26].status == """active""", "Died on +.volumes[26].status"
    assert result.volumes[26].enable512e == False, "Died on +.volumes[26].enable512e"
    assert result.volumes[26].qos.burst_iops == 15000, "Died on +.volumes[26].qos.burst_iops"
    assert result.volumes[26].qos.burst_time == 60, "Died on +.volumes[26].qos.burst_time"
    assert result.volumes[26].qos.min_iops == 100, "Died on +.volumes[26].qos.min_iops"
    assert result.volumes[26].qos.max_iops == 15000, "Died on +.volumes[26].qos.max_iops"
    assert result.volumes[26].name == """snapshots-source-27""", "Died on +.volumes[26].name"
    assert result.volumes[26].volume_access_groups[0] == 4, "Died on +.volumes[26].volume_access_groups[0]"
    assert result.volumes[26].scsi_naadevice_id == """6f47acc1000000006d6964340000020f""", "Died on +.volumes[26].scsi_naadevice_id"
    assert result.volumes[26].total_size == 5000658944, "Died on +.volumes[26].total_size"
    assert result.volumes[26].block_size == 4096, "Died on +.volumes[26].block_size"
    assert result.volumes[26].scsi_euidevice_id == """6d6964340000020ff47acc0100000000""", "Died on +.volumes[26].scsi_euidevice_id"
    assert result.volumes[26].volume_id == 527, "Died on +.volumes[26].volume_id"
    assert result.volumes[26].access == """readWrite""", "Died on +.volumes[26].access"
    assert result.volumes[26].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-27.527""", "Died on +.volumes[26].iqn"
    assert result.volumes[26].slice_count == 1, "Died on +.volumes[26].slice_count"
    assert type(result.volumes[26].attributes) is dict, "Died on .volumes[26].attributes"
    assert result.volumes[26].volume_pairs[0].volume_pair_uuid == UUID("687351e4-cc1a-4383-8445-90430be11ef1"), "Died on .volumes[26].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[26].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[26].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[26].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[26].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[26].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[26].volume_pairs[0].remote_replication.state"
    assert result.volumes[26].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[26].volume_pairs[0].remote_replication.mode"
    assert result.volumes[26].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[26].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[26].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[26].volume_pairs[0].cluster_pair_id"
    assert result.volumes[26].volume_pairs[0].remote_volume_id == 1027, "Died on +.volumes[26].volume_pairs[0].remote_volume_id"
    assert result.volumes[26].volume_pairs[0].remote_volume_name == """snap-target-27""", "Died on +.volumes[26].volume_pairs[0].remote_volume_name"
    assert result.volumes[26].volume_pairs[0].remote_slice_id == 1027, "Died on +.volumes[26].volume_pairs[0].remote_slice_id"
    assert result.volumes[26].account_id == 4, "Died on +.volumes[26].account_id"
    assert result.volumes[26].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[26].create_time"
    assert result.volumes[26].virtual_volume_id is None, "Died on .volumes[26].virtual_volume_id"
    assert result.volumes[25].status == """active""", "Died on +.volumes[25].status"
    assert result.volumes[25].enable512e == False, "Died on +.volumes[25].enable512e"
    assert result.volumes[25].qos.burst_iops == 15000, "Died on +.volumes[25].qos.burst_iops"
    assert result.volumes[25].qos.burst_time == 60, "Died on +.volumes[25].qos.burst_time"
    assert result.volumes[25].qos.min_iops == 100, "Died on +.volumes[25].qos.min_iops"
    assert result.volumes[25].qos.max_iops == 15000, "Died on +.volumes[25].qos.max_iops"
    assert result.volumes[25].name == """snapshots-source-26""", "Died on +.volumes[25].name"
    assert result.volumes[25].volume_access_groups[0] == 4, "Died on +.volumes[25].volume_access_groups[0]"
    assert result.volumes[25].scsi_naadevice_id == """6f47acc1000000006d6964340000020e""", "Died on +.volumes[25].scsi_naadevice_id"
    assert result.volumes[25].total_size == 5000658944, "Died on +.volumes[25].total_size"
    assert result.volumes[25].block_size == 4096, "Died on +.volumes[25].block_size"
    assert result.volumes[25].scsi_euidevice_id == """6d6964340000020ef47acc0100000000""", "Died on +.volumes[25].scsi_euidevice_id"
    assert result.volumes[25].volume_id == 526, "Died on +.volumes[25].volume_id"
    assert result.volumes[25].access == """readWrite""", "Died on +.volumes[25].access"
    assert result.volumes[25].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-26.526""", "Died on +.volumes[25].iqn"
    assert result.volumes[25].slice_count == 1, "Died on +.volumes[25].slice_count"
    assert type(result.volumes[25].attributes) is dict, "Died on .volumes[25].attributes"
    assert result.volumes[25].volume_pairs[0].volume_pair_uuid == UUID("53bf65c7-de12-45cd-9daa-ac7e98d036ce"), "Died on .volumes[25].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[25].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[25].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[25].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[25].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[25].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[25].volume_pairs[0].remote_replication.state"
    assert result.volumes[25].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[25].volume_pairs[0].remote_replication.mode"
    assert result.volumes[25].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[25].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[25].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[25].volume_pairs[0].cluster_pair_id"
    assert result.volumes[25].volume_pairs[0].remote_volume_id == 1026, "Died on +.volumes[25].volume_pairs[0].remote_volume_id"
    assert result.volumes[25].volume_pairs[0].remote_volume_name == """snap-target-26""", "Died on +.volumes[25].volume_pairs[0].remote_volume_name"
    assert result.volumes[25].volume_pairs[0].remote_slice_id == 1026, "Died on +.volumes[25].volume_pairs[0].remote_slice_id"
    assert result.volumes[25].account_id == 4, "Died on +.volumes[25].account_id"
    assert result.volumes[25].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[25].create_time"
    assert result.volumes[25].virtual_volume_id is None, "Died on .volumes[25].virtual_volume_id"
    assert result.volumes[24].status == """active""", "Died on +.volumes[24].status"
    assert result.volumes[24].enable512e == False, "Died on +.volumes[24].enable512e"
    assert result.volumes[24].qos.burst_iops == 15000, "Died on +.volumes[24].qos.burst_iops"
    assert result.volumes[24].qos.burst_time == 60, "Died on +.volumes[24].qos.burst_time"
    assert result.volumes[24].qos.min_iops == 100, "Died on +.volumes[24].qos.min_iops"
    assert result.volumes[24].qos.max_iops == 15000, "Died on +.volumes[24].qos.max_iops"
    assert result.volumes[24].name == """snapshots-source-25""", "Died on +.volumes[24].name"
    assert result.volumes[24].volume_access_groups[0] == 4, "Died on +.volumes[24].volume_access_groups[0]"
    assert result.volumes[24].scsi_naadevice_id == """6f47acc1000000006d6964340000020d""", "Died on +.volumes[24].scsi_naadevice_id"
    assert result.volumes[24].total_size == 5000658944, "Died on +.volumes[24].total_size"
    assert result.volumes[24].block_size == 4096, "Died on +.volumes[24].block_size"
    assert result.volumes[24].scsi_euidevice_id == """6d6964340000020df47acc0100000000""", "Died on +.volumes[24].scsi_euidevice_id"
    assert result.volumes[24].volume_id == 525, "Died on +.volumes[24].volume_id"
    assert result.volumes[24].access == """readWrite""", "Died on +.volumes[24].access"
    assert result.volumes[24].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-25.525""", "Died on +.volumes[24].iqn"
    assert result.volumes[24].slice_count == 1, "Died on +.volumes[24].slice_count"
    assert type(result.volumes[24].attributes) is dict, "Died on .volumes[24].attributes"
    assert result.volumes[24].volume_pairs[0].volume_pair_uuid == UUID("93fef25a-7d10-4fa0-afdf-64c5b39be343"), "Died on .volumes[24].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[24].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[24].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[24].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[24].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[24].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[24].volume_pairs[0].remote_replication.state"
    assert result.volumes[24].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[24].volume_pairs[0].remote_replication.mode"
    assert result.volumes[24].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[24].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[24].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[24].volume_pairs[0].cluster_pair_id"
    assert result.volumes[24].volume_pairs[0].remote_volume_id == 1025, "Died on +.volumes[24].volume_pairs[0].remote_volume_id"
    assert result.volumes[24].volume_pairs[0].remote_volume_name == """snap-target-25""", "Died on +.volumes[24].volume_pairs[0].remote_volume_name"
    assert result.volumes[24].volume_pairs[0].remote_slice_id == 1025, "Died on +.volumes[24].volume_pairs[0].remote_slice_id"
    assert result.volumes[24].account_id == 4, "Died on +.volumes[24].account_id"
    assert result.volumes[24].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[24].create_time"
    assert result.volumes[24].virtual_volume_id is None, "Died on .volumes[24].virtual_volume_id"
    assert result.volumes[23].status == """active""", "Died on +.volumes[23].status"
    assert result.volumes[23].enable512e == False, "Died on +.volumes[23].enable512e"
    assert result.volumes[23].qos.burst_iops == 15000, "Died on +.volumes[23].qos.burst_iops"
    assert result.volumes[23].qos.burst_time == 60, "Died on +.volumes[23].qos.burst_time"
    assert result.volumes[23].qos.min_iops == 100, "Died on +.volumes[23].qos.min_iops"
    assert result.volumes[23].qos.max_iops == 15000, "Died on +.volumes[23].qos.max_iops"
    assert result.volumes[23].name == """snapshots-source-24""", "Died on +.volumes[23].name"
    assert result.volumes[23].volume_access_groups[0] == 4, "Died on +.volumes[23].volume_access_groups[0]"
    assert result.volumes[23].scsi_naadevice_id == """6f47acc1000000006d6964340000020c""", "Died on +.volumes[23].scsi_naadevice_id"
    assert result.volumes[23].total_size == 5000658944, "Died on +.volumes[23].total_size"
    assert result.volumes[23].block_size == 4096, "Died on +.volumes[23].block_size"
    assert result.volumes[23].scsi_euidevice_id == """6d6964340000020cf47acc0100000000""", "Died on +.volumes[23].scsi_euidevice_id"
    assert result.volumes[23].volume_id == 524, "Died on +.volumes[23].volume_id"
    assert result.volumes[23].access == """readWrite""", "Died on +.volumes[23].access"
    assert result.volumes[23].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-24.524""", "Died on +.volumes[23].iqn"
    assert result.volumes[23].slice_count == 1, "Died on +.volumes[23].slice_count"
    assert type(result.volumes[23].attributes) is dict, "Died on .volumes[23].attributes"
    assert result.volumes[23].volume_pairs[0].volume_pair_uuid == UUID("a22a4a2b-f3da-4ee1-949f-2b8350380e89"), "Died on .volumes[23].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[23].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[23].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[23].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[23].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[23].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[23].volume_pairs[0].remote_replication.state"
    assert result.volumes[23].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[23].volume_pairs[0].remote_replication.mode"
    assert result.volumes[23].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[23].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[23].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[23].volume_pairs[0].cluster_pair_id"
    assert result.volumes[23].volume_pairs[0].remote_volume_id == 1024, "Died on +.volumes[23].volume_pairs[0].remote_volume_id"
    assert result.volumes[23].volume_pairs[0].remote_volume_name == """snap-target-24""", "Died on +.volumes[23].volume_pairs[0].remote_volume_name"
    assert result.volumes[23].volume_pairs[0].remote_slice_id == 1024, "Died on +.volumes[23].volume_pairs[0].remote_slice_id"
    assert result.volumes[23].account_id == 4, "Died on +.volumes[23].account_id"
    assert result.volumes[23].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[23].create_time"
    assert result.volumes[23].virtual_volume_id is None, "Died on .volumes[23].virtual_volume_id"
    assert result.volumes[22].status == """active""", "Died on +.volumes[22].status"
    assert result.volumes[22].enable512e == False, "Died on +.volumes[22].enable512e"
    assert result.volumes[22].qos.burst_iops == 15000, "Died on +.volumes[22].qos.burst_iops"
    assert result.volumes[22].qos.burst_time == 60, "Died on +.volumes[22].qos.burst_time"
    assert result.volumes[22].qos.min_iops == 100, "Died on +.volumes[22].qos.min_iops"
    assert result.volumes[22].qos.max_iops == 15000, "Died on +.volumes[22].qos.max_iops"
    assert result.volumes[22].name == """snapshots-source-23""", "Died on +.volumes[22].name"
    assert result.volumes[22].volume_access_groups[0] == 4, "Died on +.volumes[22].volume_access_groups[0]"
    assert result.volumes[22].scsi_naadevice_id == """6f47acc1000000006d6964340000020b""", "Died on +.volumes[22].scsi_naadevice_id"
    assert result.volumes[22].total_size == 5000658944, "Died on +.volumes[22].total_size"
    assert result.volumes[22].block_size == 4096, "Died on +.volumes[22].block_size"
    assert result.volumes[22].scsi_euidevice_id == """6d6964340000020bf47acc0100000000""", "Died on +.volumes[22].scsi_euidevice_id"
    assert result.volumes[22].volume_id == 523, "Died on +.volumes[22].volume_id"
    assert result.volumes[22].access == """readWrite""", "Died on +.volumes[22].access"
    assert result.volumes[22].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-23.523""", "Died on +.volumes[22].iqn"
    assert result.volumes[22].slice_count == 1, "Died on +.volumes[22].slice_count"
    assert type(result.volumes[22].attributes) is dict, "Died on .volumes[22].attributes"
    assert result.volumes[22].volume_pairs[0].volume_pair_uuid == UUID("e212d722-c41c-41bb-8572-9c7e036002b2"), "Died on .volumes[22].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[22].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[22].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[22].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[22].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[22].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[22].volume_pairs[0].remote_replication.state"
    assert result.volumes[22].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[22].volume_pairs[0].remote_replication.mode"
    assert result.volumes[22].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[22].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[22].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[22].volume_pairs[0].cluster_pair_id"
    assert result.volumes[22].volume_pairs[0].remote_volume_id == 1023, "Died on +.volumes[22].volume_pairs[0].remote_volume_id"
    assert result.volumes[22].volume_pairs[0].remote_volume_name == """snap-target-23""", "Died on +.volumes[22].volume_pairs[0].remote_volume_name"
    assert result.volumes[22].volume_pairs[0].remote_slice_id == 1023, "Died on +.volumes[22].volume_pairs[0].remote_slice_id"
    assert result.volumes[22].account_id == 4, "Died on +.volumes[22].account_id"
    assert result.volumes[22].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[22].create_time"
    assert result.volumes[22].virtual_volume_id is None, "Died on .volumes[22].virtual_volume_id"
    assert result.volumes[21].status == """active""", "Died on +.volumes[21].status"
    assert result.volumes[21].enable512e == False, "Died on +.volumes[21].enable512e"
    assert result.volumes[21].qos.burst_iops == 15000, "Died on +.volumes[21].qos.burst_iops"
    assert result.volumes[21].qos.burst_time == 60, "Died on +.volumes[21].qos.burst_time"
    assert result.volumes[21].qos.min_iops == 100, "Died on +.volumes[21].qos.min_iops"
    assert result.volumes[21].qos.max_iops == 15000, "Died on +.volumes[21].qos.max_iops"
    assert result.volumes[21].name == """snapshots-source-22""", "Died on +.volumes[21].name"
    assert result.volumes[21].volume_access_groups[0] == 4, "Died on +.volumes[21].volume_access_groups[0]"
    assert result.volumes[21].scsi_naadevice_id == """6f47acc1000000006d6964340000020a""", "Died on +.volumes[21].scsi_naadevice_id"
    assert result.volumes[21].total_size == 5000658944, "Died on +.volumes[21].total_size"
    assert result.volumes[21].block_size == 4096, "Died on +.volumes[21].block_size"
    assert result.volumes[21].scsi_euidevice_id == """6d6964340000020af47acc0100000000""", "Died on +.volumes[21].scsi_euidevice_id"
    assert result.volumes[21].volume_id == 522, "Died on +.volumes[21].volume_id"
    assert result.volumes[21].access == """readWrite""", "Died on +.volumes[21].access"
    assert result.volumes[21].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-22.522""", "Died on +.volumes[21].iqn"
    assert result.volumes[21].slice_count == 1, "Died on +.volumes[21].slice_count"
    assert type(result.volumes[21].attributes) is dict, "Died on .volumes[21].attributes"
    assert result.volumes[21].volume_pairs[0].volume_pair_uuid == UUID("e98ac0ca-a2ba-4334-bb6b-b76b79f15c34"), "Died on .volumes[21].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[21].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[21].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[21].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[21].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[21].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[21].volume_pairs[0].remote_replication.state"
    assert result.volumes[21].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[21].volume_pairs[0].remote_replication.mode"
    assert result.volumes[21].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[21].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[21].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[21].volume_pairs[0].cluster_pair_id"
    assert result.volumes[21].volume_pairs[0].remote_volume_id == 1022, "Died on +.volumes[21].volume_pairs[0].remote_volume_id"
    assert result.volumes[21].volume_pairs[0].remote_volume_name == """snap-target-22""", "Died on +.volumes[21].volume_pairs[0].remote_volume_name"
    assert result.volumes[21].volume_pairs[0].remote_slice_id == 1022, "Died on +.volumes[21].volume_pairs[0].remote_slice_id"
    assert result.volumes[21].account_id == 4, "Died on +.volumes[21].account_id"
    assert result.volumes[21].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[21].create_time"
    assert result.volumes[21].virtual_volume_id is None, "Died on .volumes[21].virtual_volume_id"
    assert result.volumes[20].status == """active""", "Died on +.volumes[20].status"
    assert result.volumes[20].enable512e == False, "Died on +.volumes[20].enable512e"
    assert result.volumes[20].qos.burst_iops == 15000, "Died on +.volumes[20].qos.burst_iops"
    assert result.volumes[20].qos.burst_time == 60, "Died on +.volumes[20].qos.burst_time"
    assert result.volumes[20].qos.min_iops == 100, "Died on +.volumes[20].qos.min_iops"
    assert result.volumes[20].qos.max_iops == 15000, "Died on +.volumes[20].qos.max_iops"
    assert result.volumes[20].name == """snapshots-source-21""", "Died on +.volumes[20].name"
    assert result.volumes[20].volume_access_groups[0] == 4, "Died on +.volumes[20].volume_access_groups[0]"
    assert result.volumes[20].scsi_naadevice_id == """6f47acc1000000006d69643400000209""", "Died on +.volumes[20].scsi_naadevice_id"
    assert result.volumes[20].total_size == 5000658944, "Died on +.volumes[20].total_size"
    assert result.volumes[20].block_size == 4096, "Died on +.volumes[20].block_size"
    assert result.volumes[20].scsi_euidevice_id == """6d69643400000209f47acc0100000000""", "Died on +.volumes[20].scsi_euidevice_id"
    assert result.volumes[20].volume_id == 521, "Died on +.volumes[20].volume_id"
    assert result.volumes[20].access == """readWrite""", "Died on +.volumes[20].access"
    assert result.volumes[20].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-21.521""", "Died on +.volumes[20].iqn"
    assert result.volumes[20].slice_count == 1, "Died on +.volumes[20].slice_count"
    assert type(result.volumes[20].attributes) is dict, "Died on .volumes[20].attributes"
    assert result.volumes[20].volume_pairs[0].volume_pair_uuid == UUID("d97e34eb-6e81-4bfe-9235-44f884310ae4"), "Died on .volumes[20].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[20].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[20].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[20].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[20].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[20].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[20].volume_pairs[0].remote_replication.state"
    assert result.volumes[20].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[20].volume_pairs[0].remote_replication.mode"
    assert result.volumes[20].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[20].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[20].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[20].volume_pairs[0].cluster_pair_id"
    assert result.volumes[20].volume_pairs[0].remote_volume_id == 1021, "Died on +.volumes[20].volume_pairs[0].remote_volume_id"
    assert result.volumes[20].volume_pairs[0].remote_volume_name == """snap-target-21""", "Died on +.volumes[20].volume_pairs[0].remote_volume_name"
    assert result.volumes[20].volume_pairs[0].remote_slice_id == 1021, "Died on +.volumes[20].volume_pairs[0].remote_slice_id"
    assert result.volumes[20].account_id == 4, "Died on +.volumes[20].account_id"
    assert result.volumes[20].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[20].create_time"
    assert result.volumes[20].virtual_volume_id is None, "Died on .volumes[20].virtual_volume_id"
    assert result.volumes[19].status == """active""", "Died on +.volumes[19].status"
    assert result.volumes[19].enable512e == False, "Died on +.volumes[19].enable512e"
    assert result.volumes[19].qos.burst_iops == 15000, "Died on +.volumes[19].qos.burst_iops"
    assert result.volumes[19].qos.burst_time == 60, "Died on +.volumes[19].qos.burst_time"
    assert result.volumes[19].qos.min_iops == 100, "Died on +.volumes[19].qos.min_iops"
    assert result.volumes[19].qos.max_iops == 15000, "Died on +.volumes[19].qos.max_iops"
    assert result.volumes[19].name == """snapshots-source-20""", "Died on +.volumes[19].name"
    assert result.volumes[19].volume_access_groups[0] == 4, "Died on +.volumes[19].volume_access_groups[0]"
    assert result.volumes[19].scsi_naadevice_id == """6f47acc1000000006d69643400000208""", "Died on +.volumes[19].scsi_naadevice_id"
    assert result.volumes[19].total_size == 5000658944, "Died on +.volumes[19].total_size"
    assert result.volumes[19].block_size == 4096, "Died on +.volumes[19].block_size"
    assert result.volumes[19].scsi_euidevice_id == """6d69643400000208f47acc0100000000""", "Died on +.volumes[19].scsi_euidevice_id"
    assert result.volumes[19].volume_id == 520, "Died on +.volumes[19].volume_id"
    assert result.volumes[19].access == """readWrite""", "Died on +.volumes[19].access"
    assert result.volumes[19].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-20.520""", "Died on +.volumes[19].iqn"
    assert result.volumes[19].slice_count == 1, "Died on +.volumes[19].slice_count"
    assert type(result.volumes[19].attributes) is dict, "Died on .volumes[19].attributes"
    assert result.volumes[19].volume_pairs[0].volume_pair_uuid == UUID("a389458d-3157-4ce3-9208-5c12bfa8f557"), "Died on .volumes[19].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[19].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[19].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[19].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[19].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[19].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[19].volume_pairs[0].remote_replication.state"
    assert result.volumes[19].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[19].volume_pairs[0].remote_replication.mode"
    assert result.volumes[19].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[19].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[19].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[19].volume_pairs[0].cluster_pair_id"
    assert result.volumes[19].volume_pairs[0].remote_volume_id == 1020, "Died on +.volumes[19].volume_pairs[0].remote_volume_id"
    assert result.volumes[19].volume_pairs[0].remote_volume_name == """snap-target-20""", "Died on +.volumes[19].volume_pairs[0].remote_volume_name"
    assert result.volumes[19].volume_pairs[0].remote_slice_id == 1020, "Died on +.volumes[19].volume_pairs[0].remote_slice_id"
    assert result.volumes[19].account_id == 4, "Died on +.volumes[19].account_id"
    assert result.volumes[19].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[19].create_time"
    assert result.volumes[19].virtual_volume_id is None, "Died on .volumes[19].virtual_volume_id"
    assert result.volumes[18].status == """active""", "Died on +.volumes[18].status"
    assert result.volumes[18].enable512e == False, "Died on +.volumes[18].enable512e"
    assert result.volumes[18].qos.burst_iops == 15000, "Died on +.volumes[18].qos.burst_iops"
    assert result.volumes[18].qos.burst_time == 60, "Died on +.volumes[18].qos.burst_time"
    assert result.volumes[18].qos.min_iops == 100, "Died on +.volumes[18].qos.min_iops"
    assert result.volumes[18].qos.max_iops == 15000, "Died on +.volumes[18].qos.max_iops"
    assert result.volumes[18].name == """snapshots-source-19""", "Died on +.volumes[18].name"
    assert result.volumes[18].volume_access_groups[0] == 4, "Died on +.volumes[18].volume_access_groups[0]"
    assert result.volumes[18].scsi_naadevice_id == """6f47acc1000000006d69643400000207""", "Died on +.volumes[18].scsi_naadevice_id"
    assert result.volumes[18].total_size == 5000658944, "Died on +.volumes[18].total_size"
    assert result.volumes[18].block_size == 4096, "Died on +.volumes[18].block_size"
    assert result.volumes[18].scsi_euidevice_id == """6d69643400000207f47acc0100000000""", "Died on +.volumes[18].scsi_euidevice_id"
    assert result.volumes[18].volume_id == 519, "Died on +.volumes[18].volume_id"
    assert result.volumes[18].access == """readWrite""", "Died on +.volumes[18].access"
    assert result.volumes[18].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-19.519""", "Died on +.volumes[18].iqn"
    assert result.volumes[18].slice_count == 1, "Died on +.volumes[18].slice_count"
    assert type(result.volumes[18].attributes) is dict, "Died on .volumes[18].attributes"
    assert result.volumes[18].volume_pairs[0].volume_pair_uuid == UUID("ed7ea45e-2b6d-4f25-ac96-7c11049bdabe"), "Died on .volumes[18].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[18].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[18].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[18].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[18].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[18].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[18].volume_pairs[0].remote_replication.state"
    assert result.volumes[18].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[18].volume_pairs[0].remote_replication.mode"
    assert result.volumes[18].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[18].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[18].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[18].volume_pairs[0].cluster_pair_id"
    assert result.volumes[18].volume_pairs[0].remote_volume_id == 1019, "Died on +.volumes[18].volume_pairs[0].remote_volume_id"
    assert result.volumes[18].volume_pairs[0].remote_volume_name == """snap-target-19""", "Died on +.volumes[18].volume_pairs[0].remote_volume_name"
    assert result.volumes[18].volume_pairs[0].remote_slice_id == 1019, "Died on +.volumes[18].volume_pairs[0].remote_slice_id"
    assert result.volumes[18].account_id == 4, "Died on +.volumes[18].account_id"
    assert result.volumes[18].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[18].create_time"
    assert result.volumes[18].virtual_volume_id is None, "Died on .volumes[18].virtual_volume_id"
    assert result.volumes[17].status == """active""", "Died on +.volumes[17].status"
    assert result.volumes[17].enable512e == False, "Died on +.volumes[17].enable512e"
    assert result.volumes[17].qos.burst_iops == 15000, "Died on +.volumes[17].qos.burst_iops"
    assert result.volumes[17].qos.burst_time == 60, "Died on +.volumes[17].qos.burst_time"
    assert result.volumes[17].qos.min_iops == 100, "Died on +.volumes[17].qos.min_iops"
    assert result.volumes[17].qos.max_iops == 15000, "Died on +.volumes[17].qos.max_iops"
    assert result.volumes[17].name == """snapshots-source-18""", "Died on +.volumes[17].name"
    assert result.volumes[17].volume_access_groups[0] == 4, "Died on +.volumes[17].volume_access_groups[0]"
    assert result.volumes[17].scsi_naadevice_id == """6f47acc1000000006d69643400000206""", "Died on +.volumes[17].scsi_naadevice_id"
    assert result.volumes[17].total_size == 5000658944, "Died on +.volumes[17].total_size"
    assert result.volumes[17].block_size == 4096, "Died on +.volumes[17].block_size"
    assert result.volumes[17].scsi_euidevice_id == """6d69643400000206f47acc0100000000""", "Died on +.volumes[17].scsi_euidevice_id"
    assert result.volumes[17].volume_id == 518, "Died on +.volumes[17].volume_id"
    assert result.volumes[17].access == """readWrite""", "Died on +.volumes[17].access"
    assert result.volumes[17].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-18.518""", "Died on +.volumes[17].iqn"
    assert result.volumes[17].slice_count == 1, "Died on +.volumes[17].slice_count"
    assert type(result.volumes[17].attributes) is dict, "Died on .volumes[17].attributes"
    assert result.volumes[17].volume_pairs[0].volume_pair_uuid == UUID("da17be64-f489-45d5-817e-0d9501798702"), "Died on .volumes[17].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[17].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[17].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[17].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[17].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[17].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[17].volume_pairs[0].remote_replication.state"
    assert result.volumes[17].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[17].volume_pairs[0].remote_replication.mode"
    assert result.volumes[17].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[17].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[17].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[17].volume_pairs[0].cluster_pair_id"
    assert result.volumes[17].volume_pairs[0].remote_volume_id == 1018, "Died on +.volumes[17].volume_pairs[0].remote_volume_id"
    assert result.volumes[17].volume_pairs[0].remote_volume_name == """snap-target-18""", "Died on +.volumes[17].volume_pairs[0].remote_volume_name"
    assert result.volumes[17].volume_pairs[0].remote_slice_id == 1018, "Died on +.volumes[17].volume_pairs[0].remote_slice_id"
    assert result.volumes[17].account_id == 4, "Died on +.volumes[17].account_id"
    assert result.volumes[17].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[17].create_time"
    assert result.volumes[17].virtual_volume_id is None, "Died on .volumes[17].virtual_volume_id"
    assert result.volumes[16].status == """active""", "Died on +.volumes[16].status"
    assert result.volumes[16].enable512e == False, "Died on +.volumes[16].enable512e"
    assert result.volumes[16].qos.burst_iops == 15000, "Died on +.volumes[16].qos.burst_iops"
    assert result.volumes[16].qos.burst_time == 60, "Died on +.volumes[16].qos.burst_time"
    assert result.volumes[16].qos.min_iops == 100, "Died on +.volumes[16].qos.min_iops"
    assert result.volumes[16].qos.max_iops == 15000, "Died on +.volumes[16].qos.max_iops"
    assert result.volumes[16].name == """snapshots-source-17""", "Died on +.volumes[16].name"
    assert result.volumes[16].volume_access_groups[0] == 4, "Died on +.volumes[16].volume_access_groups[0]"
    assert result.volumes[16].scsi_naadevice_id == """6f47acc1000000006d69643400000205""", "Died on +.volumes[16].scsi_naadevice_id"
    assert result.volumes[16].total_size == 5000658944, "Died on +.volumes[16].total_size"
    assert result.volumes[16].block_size == 4096, "Died on +.volumes[16].block_size"
    assert result.volumes[16].scsi_euidevice_id == """6d69643400000205f47acc0100000000""", "Died on +.volumes[16].scsi_euidevice_id"
    assert result.volumes[16].volume_id == 517, "Died on +.volumes[16].volume_id"
    assert result.volumes[16].access == """readWrite""", "Died on +.volumes[16].access"
    assert result.volumes[16].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-17.517""", "Died on +.volumes[16].iqn"
    assert result.volumes[16].slice_count == 1, "Died on +.volumes[16].slice_count"
    assert type(result.volumes[16].attributes) is dict, "Died on .volumes[16].attributes"
    assert result.volumes[16].volume_pairs[0].volume_pair_uuid == UUID("d0f476e0-c5f0-4fd9-bdfa-eccb436263c3"), "Died on .volumes[16].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[16].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[16].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[16].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[16].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[16].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[16].volume_pairs[0].remote_replication.state"
    assert result.volumes[16].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[16].volume_pairs[0].remote_replication.mode"
    assert result.volumes[16].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[16].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[16].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[16].volume_pairs[0].cluster_pair_id"
    assert result.volumes[16].volume_pairs[0].remote_volume_id == 1017, "Died on +.volumes[16].volume_pairs[0].remote_volume_id"
    assert result.volumes[16].volume_pairs[0].remote_volume_name == """snap-target-17""", "Died on +.volumes[16].volume_pairs[0].remote_volume_name"
    assert result.volumes[16].volume_pairs[0].remote_slice_id == 1017, "Died on +.volumes[16].volume_pairs[0].remote_slice_id"
    assert result.volumes[16].account_id == 4, "Died on +.volumes[16].account_id"
    assert result.volumes[16].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[16].create_time"
    assert result.volumes[16].virtual_volume_id is None, "Died on .volumes[16].virtual_volume_id"
    assert result.volumes[15].status == """active""", "Died on +.volumes[15].status"
    assert result.volumes[15].enable512e == False, "Died on +.volumes[15].enable512e"
    assert result.volumes[15].qos.burst_iops == 15000, "Died on +.volumes[15].qos.burst_iops"
    assert result.volumes[15].qos.burst_time == 60, "Died on +.volumes[15].qos.burst_time"
    assert result.volumes[15].qos.min_iops == 100, "Died on +.volumes[15].qos.min_iops"
    assert result.volumes[15].qos.max_iops == 15000, "Died on +.volumes[15].qos.max_iops"
    assert result.volumes[15].name == """snapshots-source-16""", "Died on +.volumes[15].name"
    assert result.volumes[15].volume_access_groups[0] == 4, "Died on +.volumes[15].volume_access_groups[0]"
    assert result.volumes[15].scsi_naadevice_id == """6f47acc1000000006d69643400000204""", "Died on +.volumes[15].scsi_naadevice_id"
    assert result.volumes[15].total_size == 5000658944, "Died on +.volumes[15].total_size"
    assert result.volumes[15].block_size == 4096, "Died on +.volumes[15].block_size"
    assert result.volumes[15].scsi_euidevice_id == """6d69643400000204f47acc0100000000""", "Died on +.volumes[15].scsi_euidevice_id"
    assert result.volumes[15].volume_id == 516, "Died on +.volumes[15].volume_id"
    assert result.volumes[15].access == """readWrite""", "Died on +.volumes[15].access"
    assert result.volumes[15].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-16.516""", "Died on +.volumes[15].iqn"
    assert result.volumes[15].slice_count == 1, "Died on +.volumes[15].slice_count"
    assert type(result.volumes[15].attributes) is dict, "Died on .volumes[15].attributes"
    assert result.volumes[15].volume_pairs[0].volume_pair_uuid == UUID("36ef96c8-77dd-4abe-9c82-f042e87b73a2"), "Died on .volumes[15].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[15].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[15].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[15].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[15].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[15].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[15].volume_pairs[0].remote_replication.state"
    assert result.volumes[15].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[15].volume_pairs[0].remote_replication.mode"
    assert result.volumes[15].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[15].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[15].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[15].volume_pairs[0].cluster_pair_id"
    assert result.volumes[15].volume_pairs[0].remote_volume_id == 1016, "Died on +.volumes[15].volume_pairs[0].remote_volume_id"
    assert result.volumes[15].volume_pairs[0].remote_volume_name == """snap-target-16""", "Died on +.volumes[15].volume_pairs[0].remote_volume_name"
    assert result.volumes[15].volume_pairs[0].remote_slice_id == 1016, "Died on +.volumes[15].volume_pairs[0].remote_slice_id"
    assert result.volumes[15].account_id == 4, "Died on +.volumes[15].account_id"
    assert result.volumes[15].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[15].create_time"
    assert result.volumes[15].virtual_volume_id is None, "Died on .volumes[15].virtual_volume_id"
    assert result.volumes[14].status == """active""", "Died on +.volumes[14].status"
    assert result.volumes[14].enable512e == False, "Died on +.volumes[14].enable512e"
    assert result.volumes[14].qos.burst_iops == 15000, "Died on +.volumes[14].qos.burst_iops"
    assert result.volumes[14].qos.burst_time == 60, "Died on +.volumes[14].qos.burst_time"
    assert result.volumes[14].qos.min_iops == 100, "Died on +.volumes[14].qos.min_iops"
    assert result.volumes[14].qos.max_iops == 15000, "Died on +.volumes[14].qos.max_iops"
    assert result.volumes[14].name == """snapshots-source-15""", "Died on +.volumes[14].name"
    assert result.volumes[14].volume_access_groups[0] == 4, "Died on +.volumes[14].volume_access_groups[0]"
    assert result.volumes[14].scsi_naadevice_id == """6f47acc1000000006d69643400000203""", "Died on +.volumes[14].scsi_naadevice_id"
    assert result.volumes[14].total_size == 5000658944, "Died on +.volumes[14].total_size"
    assert result.volumes[14].block_size == 4096, "Died on +.volumes[14].block_size"
    assert result.volumes[14].scsi_euidevice_id == """6d69643400000203f47acc0100000000""", "Died on +.volumes[14].scsi_euidevice_id"
    assert result.volumes[14].volume_id == 515, "Died on +.volumes[14].volume_id"
    assert result.volumes[14].access == """readWrite""", "Died on +.volumes[14].access"
    assert result.volumes[14].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-15.515""", "Died on +.volumes[14].iqn"
    assert result.volumes[14].slice_count == 1, "Died on +.volumes[14].slice_count"
    assert type(result.volumes[14].attributes) is dict, "Died on .volumes[14].attributes"
    assert result.volumes[14].volume_pairs[0].volume_pair_uuid == UUID("c0be44ff-054b-4f0d-b047-6c3f70cf31f6"), "Died on .volumes[14].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[14].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[14].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[14].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[14].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[14].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[14].volume_pairs[0].remote_replication.state"
    assert result.volumes[14].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[14].volume_pairs[0].remote_replication.mode"
    assert result.volumes[14].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[14].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[14].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[14].volume_pairs[0].cluster_pair_id"
    assert result.volumes[14].volume_pairs[0].remote_volume_id == 1015, "Died on +.volumes[14].volume_pairs[0].remote_volume_id"
    assert result.volumes[14].volume_pairs[0].remote_volume_name == """snap-target-15""", "Died on +.volumes[14].volume_pairs[0].remote_volume_name"
    assert result.volumes[14].volume_pairs[0].remote_slice_id == 1015, "Died on +.volumes[14].volume_pairs[0].remote_slice_id"
    assert result.volumes[14].account_id == 4, "Died on +.volumes[14].account_id"
    assert result.volumes[14].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[14].create_time"
    assert result.volumes[14].virtual_volume_id is None, "Died on .volumes[14].virtual_volume_id"
    assert result.volumes[13].status == """active""", "Died on +.volumes[13].status"
    assert result.volumes[13].enable512e == False, "Died on +.volumes[13].enable512e"
    assert result.volumes[13].qos.burst_iops == 15000, "Died on +.volumes[13].qos.burst_iops"
    assert result.volumes[13].qos.burst_time == 60, "Died on +.volumes[13].qos.burst_time"
    assert result.volumes[13].qos.min_iops == 100, "Died on +.volumes[13].qos.min_iops"
    assert result.volumes[13].qos.max_iops == 15000, "Died on +.volumes[13].qos.max_iops"
    assert result.volumes[13].name == """snapshots-source-14""", "Died on +.volumes[13].name"
    assert result.volumes[13].volume_access_groups[0] == 4, "Died on +.volumes[13].volume_access_groups[0]"
    assert result.volumes[13].scsi_naadevice_id == """6f47acc1000000006d69643400000202""", "Died on +.volumes[13].scsi_naadevice_id"
    assert result.volumes[13].total_size == 5000658944, "Died on +.volumes[13].total_size"
    assert result.volumes[13].block_size == 4096, "Died on +.volumes[13].block_size"
    assert result.volumes[13].scsi_euidevice_id == """6d69643400000202f47acc0100000000""", "Died on +.volumes[13].scsi_euidevice_id"
    assert result.volumes[13].volume_id == 514, "Died on +.volumes[13].volume_id"
    assert result.volumes[13].access == """readWrite""", "Died on +.volumes[13].access"
    assert result.volumes[13].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-14.514""", "Died on +.volumes[13].iqn"
    assert result.volumes[13].slice_count == 1, "Died on +.volumes[13].slice_count"
    assert type(result.volumes[13].attributes) is dict, "Died on .volumes[13].attributes"
    assert result.volumes[13].volume_pairs[0].volume_pair_uuid == UUID("2ae9dc92-5754-4ad1-a0b6-a2d9a25fa087"), "Died on .volumes[13].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[13].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[13].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[13].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[13].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[13].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[13].volume_pairs[0].remote_replication.state"
    assert result.volumes[13].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[13].volume_pairs[0].remote_replication.mode"
    assert result.volumes[13].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[13].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[13].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[13].volume_pairs[0].cluster_pair_id"
    assert result.volumes[13].volume_pairs[0].remote_volume_id == 1014, "Died on +.volumes[13].volume_pairs[0].remote_volume_id"
    assert result.volumes[13].volume_pairs[0].remote_volume_name == """snap-target-14""", "Died on +.volumes[13].volume_pairs[0].remote_volume_name"
    assert result.volumes[13].volume_pairs[0].remote_slice_id == 1014, "Died on +.volumes[13].volume_pairs[0].remote_slice_id"
    assert result.volumes[13].account_id == 4, "Died on +.volumes[13].account_id"
    assert result.volumes[13].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[13].create_time"
    assert result.volumes[13].virtual_volume_id is None, "Died on .volumes[13].virtual_volume_id"
    assert result.volumes[12].status == """active""", "Died on +.volumes[12].status"
    assert result.volumes[12].enable512e == False, "Died on +.volumes[12].enable512e"
    assert result.volumes[12].qos.burst_iops == 15000, "Died on +.volumes[12].qos.burst_iops"
    assert result.volumes[12].qos.burst_time == 60, "Died on +.volumes[12].qos.burst_time"
    assert result.volumes[12].qos.min_iops == 100, "Died on +.volumes[12].qos.min_iops"
    assert result.volumes[12].qos.max_iops == 15000, "Died on +.volumes[12].qos.max_iops"
    assert result.volumes[12].name == """snapshots-source-13""", "Died on +.volumes[12].name"
    assert result.volumes[12].volume_access_groups[0] == 4, "Died on +.volumes[12].volume_access_groups[0]"
    assert result.volumes[12].scsi_naadevice_id == """6f47acc1000000006d69643400000201""", "Died on +.volumes[12].scsi_naadevice_id"
    assert result.volumes[12].total_size == 5000658944, "Died on +.volumes[12].total_size"
    assert result.volumes[12].block_size == 4096, "Died on +.volumes[12].block_size"
    assert result.volumes[12].scsi_euidevice_id == """6d69643400000201f47acc0100000000""", "Died on +.volumes[12].scsi_euidevice_id"
    assert result.volumes[12].volume_id == 513, "Died on +.volumes[12].volume_id"
    assert result.volumes[12].access == """readWrite""", "Died on +.volumes[12].access"
    assert result.volumes[12].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-13.513""", "Died on +.volumes[12].iqn"
    assert result.volumes[12].slice_count == 1, "Died on +.volumes[12].slice_count"
    assert type(result.volumes[12].attributes) is dict, "Died on .volumes[12].attributes"
    assert result.volumes[12].volume_pairs[0].volume_pair_uuid == UUID("5e33e894-01ac-428c-9712-209998300c80"), "Died on .volumes[12].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[12].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[12].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[12].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[12].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[12].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[12].volume_pairs[0].remote_replication.state"
    assert result.volumes[12].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[12].volume_pairs[0].remote_replication.mode"
    assert result.volumes[12].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[12].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[12].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[12].volume_pairs[0].cluster_pair_id"
    assert result.volumes[12].volume_pairs[0].remote_volume_id == 1013, "Died on +.volumes[12].volume_pairs[0].remote_volume_id"
    assert result.volumes[12].volume_pairs[0].remote_volume_name == """snap-target-13""", "Died on +.volumes[12].volume_pairs[0].remote_volume_name"
    assert result.volumes[12].volume_pairs[0].remote_slice_id == 1013, "Died on +.volumes[12].volume_pairs[0].remote_slice_id"
    assert result.volumes[12].account_id == 4, "Died on +.volumes[12].account_id"
    assert result.volumes[12].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[12].create_time"
    assert result.volumes[12].virtual_volume_id is None, "Died on .volumes[12].virtual_volume_id"
    assert result.volumes[11].status == """active""", "Died on +.volumes[11].status"
    assert result.volumes[11].enable512e == False, "Died on +.volumes[11].enable512e"
    assert result.volumes[11].qos.burst_iops == 15000, "Died on +.volumes[11].qos.burst_iops"
    assert result.volumes[11].qos.burst_time == 60, "Died on +.volumes[11].qos.burst_time"
    assert result.volumes[11].qos.min_iops == 100, "Died on +.volumes[11].qos.min_iops"
    assert result.volumes[11].qos.max_iops == 15000, "Died on +.volumes[11].qos.max_iops"
    assert result.volumes[11].name == """snapshots-source-12""", "Died on +.volumes[11].name"
    assert result.volumes[11].volume_access_groups[0] == 4, "Died on +.volumes[11].volume_access_groups[0]"
    assert result.volumes[11].scsi_naadevice_id == """6f47acc1000000006d69643400000200""", "Died on +.volumes[11].scsi_naadevice_id"
    assert result.volumes[11].total_size == 5000658944, "Died on +.volumes[11].total_size"
    assert result.volumes[11].block_size == 4096, "Died on +.volumes[11].block_size"
    assert result.volumes[11].scsi_euidevice_id == """6d69643400000200f47acc0100000000""", "Died on +.volumes[11].scsi_euidevice_id"
    assert result.volumes[11].volume_id == 512, "Died on +.volumes[11].volume_id"
    assert result.volumes[11].access == """readWrite""", "Died on +.volumes[11].access"
    assert result.volumes[11].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-12.512""", "Died on +.volumes[11].iqn"
    assert result.volumes[11].slice_count == 1, "Died on +.volumes[11].slice_count"
    assert type(result.volumes[11].attributes) is dict, "Died on .volumes[11].attributes"
    assert result.volumes[11].volume_pairs[0].volume_pair_uuid == UUID("d79634c3-147b-492c-a5b4-f56f60ff7d57"), "Died on .volumes[11].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[11].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[11].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[11].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[11].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[11].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[11].volume_pairs[0].remote_replication.state"
    assert result.volumes[11].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[11].volume_pairs[0].remote_replication.mode"
    assert result.volumes[11].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[11].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[11].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[11].volume_pairs[0].cluster_pair_id"
    assert result.volumes[11].volume_pairs[0].remote_volume_id == 1012, "Died on +.volumes[11].volume_pairs[0].remote_volume_id"
    assert result.volumes[11].volume_pairs[0].remote_volume_name == """snap-target-12""", "Died on +.volumes[11].volume_pairs[0].remote_volume_name"
    assert result.volumes[11].volume_pairs[0].remote_slice_id == 1012, "Died on +.volumes[11].volume_pairs[0].remote_slice_id"
    assert result.volumes[11].account_id == 4, "Died on +.volumes[11].account_id"
    assert result.volumes[11].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[11].create_time"
    assert result.volumes[11].virtual_volume_id is None, "Died on .volumes[11].virtual_volume_id"
    assert result.volumes[10].status == """active""", "Died on +.volumes[10].status"
    assert result.volumes[10].enable512e == False, "Died on +.volumes[10].enable512e"
    assert result.volumes[10].qos.burst_iops == 15000, "Died on +.volumes[10].qos.burst_iops"
    assert result.volumes[10].qos.burst_time == 60, "Died on +.volumes[10].qos.burst_time"
    assert result.volumes[10].qos.min_iops == 100, "Died on +.volumes[10].qos.min_iops"
    assert result.volumes[10].qos.max_iops == 15000, "Died on +.volumes[10].qos.max_iops"
    assert result.volumes[10].name == """snapshots-source-11""", "Died on +.volumes[10].name"
    assert result.volumes[10].volume_access_groups[0] == 4, "Died on +.volumes[10].volume_access_groups[0]"
    assert result.volumes[10].scsi_naadevice_id == """6f47acc1000000006d696434000001ff""", "Died on +.volumes[10].scsi_naadevice_id"
    assert result.volumes[10].total_size == 5000658944, "Died on +.volumes[10].total_size"
    assert result.volumes[10].block_size == 4096, "Died on +.volumes[10].block_size"
    assert result.volumes[10].scsi_euidevice_id == """6d696434000001fff47acc0100000000""", "Died on +.volumes[10].scsi_euidevice_id"
    assert result.volumes[10].volume_id == 511, "Died on +.volumes[10].volume_id"
    assert result.volumes[10].access == """readWrite""", "Died on +.volumes[10].access"
    assert result.volumes[10].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-11.511""", "Died on +.volumes[10].iqn"
    assert result.volumes[10].slice_count == 1, "Died on +.volumes[10].slice_count"
    assert type(result.volumes[10].attributes) is dict, "Died on .volumes[10].attributes"
    assert result.volumes[10].volume_pairs[0].volume_pair_uuid == UUID("861e4f44-4b73-4fb4-ad39-13a5c8455130"), "Died on .volumes[10].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[10].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[10].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[10].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[10].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[10].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[10].volume_pairs[0].remote_replication.state"
    assert result.volumes[10].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[10].volume_pairs[0].remote_replication.mode"
    assert result.volumes[10].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[10].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[10].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[10].volume_pairs[0].cluster_pair_id"
    assert result.volumes[10].volume_pairs[0].remote_volume_id == 1011, "Died on +.volumes[10].volume_pairs[0].remote_volume_id"
    assert result.volumes[10].volume_pairs[0].remote_volume_name == """snap-target-11""", "Died on +.volumes[10].volume_pairs[0].remote_volume_name"
    assert result.volumes[10].volume_pairs[0].remote_slice_id == 1011, "Died on +.volumes[10].volume_pairs[0].remote_slice_id"
    assert result.volumes[10].account_id == 4, "Died on +.volumes[10].account_id"
    assert result.volumes[10].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[10].create_time"
    assert result.volumes[10].virtual_volume_id is None, "Died on .volumes[10].virtual_volume_id"
    assert result.volumes[9].status == """active""", "Died on +.volumes[9].status"
    assert result.volumes[9].enable512e == False, "Died on +.volumes[9].enable512e"
    assert result.volumes[9].qos.burst_iops == 15000, "Died on +.volumes[9].qos.burst_iops"
    assert result.volumes[9].qos.burst_time == 60, "Died on +.volumes[9].qos.burst_time"
    assert result.volumes[9].qos.min_iops == 100, "Died on +.volumes[9].qos.min_iops"
    assert result.volumes[9].qos.max_iops == 15000, "Died on +.volumes[9].qos.max_iops"
    assert result.volumes[9].name == """snapshots-source-10""", "Died on +.volumes[9].name"
    assert result.volumes[9].volume_access_groups[0] == 4, "Died on +.volumes[9].volume_access_groups[0]"
    assert result.volumes[9].scsi_naadevice_id == """6f47acc1000000006d696434000001fe""", "Died on +.volumes[9].scsi_naadevice_id"
    assert result.volumes[9].total_size == 5000658944, "Died on +.volumes[9].total_size"
    assert result.volumes[9].block_size == 4096, "Died on +.volumes[9].block_size"
    assert result.volumes[9].scsi_euidevice_id == """6d696434000001fef47acc0100000000""", "Died on +.volumes[9].scsi_euidevice_id"
    assert result.volumes[9].volume_id == 510, "Died on +.volumes[9].volume_id"
    assert result.volumes[9].access == """readWrite""", "Died on +.volumes[9].access"
    assert result.volumes[9].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-10.510""", "Died on +.volumes[9].iqn"
    assert result.volumes[9].slice_count == 1, "Died on +.volumes[9].slice_count"
    assert type(result.volumes[9].attributes) is dict, "Died on .volumes[9].attributes"
    assert result.volumes[9].volume_pairs[0].volume_pair_uuid == UUID("46417bba-2ee0-43a7-8606-c6ad374c1a10"), "Died on .volumes[9].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[9].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[9].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[9].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[9].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[9].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[9].volume_pairs[0].remote_replication.state"
    assert result.volumes[9].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[9].volume_pairs[0].remote_replication.mode"
    assert result.volumes[9].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[9].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[9].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[9].volume_pairs[0].cluster_pair_id"
    assert result.volumes[9].volume_pairs[0].remote_volume_id == 1010, "Died on +.volumes[9].volume_pairs[0].remote_volume_id"
    assert result.volumes[9].volume_pairs[0].remote_volume_name == """snap-target-10""", "Died on +.volumes[9].volume_pairs[0].remote_volume_name"
    assert result.volumes[9].volume_pairs[0].remote_slice_id == 1010, "Died on +.volumes[9].volume_pairs[0].remote_slice_id"
    assert result.volumes[9].account_id == 4, "Died on +.volumes[9].account_id"
    assert result.volumes[9].create_time == """2016-12-30T18:07:03Z""", "Died on +.volumes[9].create_time"
    assert result.volumes[9].virtual_volume_id is None, "Died on .volumes[9].virtual_volume_id"
    assert result.volumes[8].status == """active""", "Died on +.volumes[8].status"
    assert result.volumes[8].enable512e == False, "Died on +.volumes[8].enable512e"
    assert result.volumes[8].qos.burst_iops == 15000, "Died on +.volumes[8].qos.burst_iops"
    assert result.volumes[8].qos.burst_time == 60, "Died on +.volumes[8].qos.burst_time"
    assert result.volumes[8].qos.min_iops == 100, "Died on +.volumes[8].qos.min_iops"
    assert result.volumes[8].qos.max_iops == 15000, "Died on +.volumes[8].qos.max_iops"
    assert result.volumes[8].name == """snapshots-source-9""", "Died on +.volumes[8].name"
    assert result.volumes[8].volume_access_groups[0] == 4, "Died on +.volumes[8].volume_access_groups[0]"
    assert result.volumes[8].scsi_naadevice_id == """6f47acc1000000006d696434000001fd""", "Died on +.volumes[8].scsi_naadevice_id"
    assert result.volumes[8].total_size == 5000658944, "Died on +.volumes[8].total_size"
    assert result.volumes[8].block_size == 4096, "Died on +.volumes[8].block_size"
    assert result.volumes[8].scsi_euidevice_id == """6d696434000001fdf47acc0100000000""", "Died on +.volumes[8].scsi_euidevice_id"
    assert result.volumes[8].volume_id == 509, "Died on +.volumes[8].volume_id"
    assert result.volumes[8].access == """readWrite""", "Died on +.volumes[8].access"
    assert result.volumes[8].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-9.509""", "Died on +.volumes[8].iqn"
    assert result.volumes[8].slice_count == 1, "Died on +.volumes[8].slice_count"
    assert type(result.volumes[8].attributes) is dict, "Died on .volumes[8].attributes"
    assert result.volumes[8].volume_pairs[0].volume_pair_uuid == UUID("ff0a214e-46bd-45b4-9ba5-d600ea61e853"), "Died on .volumes[8].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[8].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[8].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[8].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[8].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[8].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[8].volume_pairs[0].remote_replication.state"
    assert result.volumes[8].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[8].volume_pairs[0].remote_replication.mode"
    assert result.volumes[8].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[8].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[8].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[8].volume_pairs[0].cluster_pair_id"
    assert result.volumes[8].volume_pairs[0].remote_volume_id == 1009, "Died on +.volumes[8].volume_pairs[0].remote_volume_id"
    assert result.volumes[8].volume_pairs[0].remote_volume_name == """snap-target-9""", "Died on +.volumes[8].volume_pairs[0].remote_volume_name"
    assert result.volumes[8].volume_pairs[0].remote_slice_id == 1009, "Died on +.volumes[8].volume_pairs[0].remote_slice_id"
    assert result.volumes[8].account_id == 4, "Died on +.volumes[8].account_id"
    assert result.volumes[8].create_time == """2016-12-30T18:07:02Z""", "Died on +.volumes[8].create_time"
    assert result.volumes[8].virtual_volume_id is None, "Died on .volumes[8].virtual_volume_id"
    assert result.volumes[7].status == """active""", "Died on +.volumes[7].status"
    assert result.volumes[7].enable512e == False, "Died on +.volumes[7].enable512e"
    assert result.volumes[7].qos.burst_iops == 15000, "Died on +.volumes[7].qos.burst_iops"
    assert result.volumes[7].qos.burst_time == 60, "Died on +.volumes[7].qos.burst_time"
    assert result.volumes[7].qos.min_iops == 100, "Died on +.volumes[7].qos.min_iops"
    assert result.volumes[7].qos.max_iops == 15000, "Died on +.volumes[7].qos.max_iops"
    assert result.volumes[7].name == """snapshots-source-8""", "Died on +.volumes[7].name"
    assert result.volumes[7].volume_access_groups[0] == 4, "Died on +.volumes[7].volume_access_groups[0]"
    assert result.volumes[7].scsi_naadevice_id == """6f47acc1000000006d696434000001fc""", "Died on +.volumes[7].scsi_naadevice_id"
    assert result.volumes[7].total_size == 5000658944, "Died on +.volumes[7].total_size"
    assert result.volumes[7].block_size == 4096, "Died on +.volumes[7].block_size"
    assert result.volumes[7].scsi_euidevice_id == """6d696434000001fcf47acc0100000000""", "Died on +.volumes[7].scsi_euidevice_id"
    assert result.volumes[7].volume_id == 508, "Died on +.volumes[7].volume_id"
    assert result.volumes[7].access == """readWrite""", "Died on +.volumes[7].access"
    assert result.volumes[7].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-8.508""", "Died on +.volumes[7].iqn"
    assert result.volumes[7].slice_count == 1, "Died on +.volumes[7].slice_count"
    assert type(result.volumes[7].attributes) is dict, "Died on .volumes[7].attributes"
    assert result.volumes[7].volume_pairs[0].volume_pair_uuid == UUID("a1d3defc-5988-4d3f-8fbd-9ac9bb6ef775"), "Died on .volumes[7].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[7].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[7].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[7].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[7].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[7].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[7].volume_pairs[0].remote_replication.state"
    assert result.volumes[7].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[7].volume_pairs[0].remote_replication.mode"
    assert result.volumes[7].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[7].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[7].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[7].volume_pairs[0].cluster_pair_id"
    assert result.volumes[7].volume_pairs[0].remote_volume_id == 1008, "Died on +.volumes[7].volume_pairs[0].remote_volume_id"
    assert result.volumes[7].volume_pairs[0].remote_volume_name == """snap-target-8""", "Died on +.volumes[7].volume_pairs[0].remote_volume_name"
    assert result.volumes[7].volume_pairs[0].remote_slice_id == 1008, "Died on +.volumes[7].volume_pairs[0].remote_slice_id"
    assert result.volumes[7].account_id == 4, "Died on +.volumes[7].account_id"
    assert result.volumes[7].create_time == """2016-12-30T18:07:02Z""", "Died on +.volumes[7].create_time"
    assert result.volumes[7].virtual_volume_id is None, "Died on .volumes[7].virtual_volume_id"
    assert result.volumes[6].status == """active""", "Died on +.volumes[6].status"
    assert result.volumes[6].enable512e == False, "Died on +.volumes[6].enable512e"
    assert result.volumes[6].qos.burst_iops == 15000, "Died on +.volumes[6].qos.burst_iops"
    assert result.volumes[6].qos.burst_time == 60, "Died on +.volumes[6].qos.burst_time"
    assert result.volumes[6].qos.min_iops == 100, "Died on +.volumes[6].qos.min_iops"
    assert result.volumes[6].qos.max_iops == 15000, "Died on +.volumes[6].qos.max_iops"
    assert result.volumes[6].name == """snapshots-source-7""", "Died on +.volumes[6].name"
    assert result.volumes[6].volume_access_groups[0] == 4, "Died on +.volumes[6].volume_access_groups[0]"
    assert result.volumes[6].scsi_naadevice_id == """6f47acc1000000006d696434000001fb""", "Died on +.volumes[6].scsi_naadevice_id"
    assert result.volumes[6].total_size == 5000658944, "Died on +.volumes[6].total_size"
    assert result.volumes[6].block_size == 4096, "Died on +.volumes[6].block_size"
    assert result.volumes[6].scsi_euidevice_id == """6d696434000001fbf47acc0100000000""", "Died on +.volumes[6].scsi_euidevice_id"
    assert result.volumes[6].volume_id == 507, "Died on +.volumes[6].volume_id"
    assert result.volumes[6].access == """readWrite""", "Died on +.volumes[6].access"
    assert result.volumes[6].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-7.507""", "Died on +.volumes[6].iqn"
    assert result.volumes[6].slice_count == 1, "Died on +.volumes[6].slice_count"
    assert type(result.volumes[6].attributes) is dict, "Died on .volumes[6].attributes"
    assert result.volumes[6].volume_pairs[0].volume_pair_uuid == UUID("307cf60c-571c-45e6-93a7-a7ce6bcf672d"), "Died on .volumes[6].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[6].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[6].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[6].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[6].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[6].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[6].volume_pairs[0].remote_replication.state"
    assert result.volumes[6].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[6].volume_pairs[0].remote_replication.mode"
    assert result.volumes[6].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[6].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[6].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[6].volume_pairs[0].cluster_pair_id"
    assert result.volumes[6].volume_pairs[0].remote_volume_id == 1007, "Died on +.volumes[6].volume_pairs[0].remote_volume_id"
    assert result.volumes[6].volume_pairs[0].remote_volume_name == """snap-target-7""", "Died on +.volumes[6].volume_pairs[0].remote_volume_name"
    assert result.volumes[6].volume_pairs[0].remote_slice_id == 1007, "Died on +.volumes[6].volume_pairs[0].remote_slice_id"
    assert result.volumes[6].account_id == 4, "Died on +.volumes[6].account_id"
    assert result.volumes[6].create_time == """2016-12-30T18:07:02Z""", "Died on +.volumes[6].create_time"
    assert result.volumes[6].virtual_volume_id is None, "Died on .volumes[6].virtual_volume_id"
    assert result.volumes[5].status == """active""", "Died on +.volumes[5].status"
    assert result.volumes[5].enable512e == False, "Died on +.volumes[5].enable512e"
    assert result.volumes[5].qos.burst_iops == 15000, "Died on +.volumes[5].qos.burst_iops"
    assert result.volumes[5].qos.burst_time == 60, "Died on +.volumes[5].qos.burst_time"
    assert result.volumes[5].qos.min_iops == 100, "Died on +.volumes[5].qos.min_iops"
    assert result.volumes[5].qos.max_iops == 15000, "Died on +.volumes[5].qos.max_iops"
    assert result.volumes[5].name == """snapshots-source-6""", "Died on +.volumes[5].name"
    assert result.volumes[5].volume_access_groups[0] == 4, "Died on +.volumes[5].volume_access_groups[0]"
    assert result.volumes[5].scsi_naadevice_id == """6f47acc1000000006d696434000001fa""", "Died on +.volumes[5].scsi_naadevice_id"
    assert result.volumes[5].total_size == 5000658944, "Died on +.volumes[5].total_size"
    assert result.volumes[5].block_size == 4096, "Died on +.volumes[5].block_size"
    assert result.volumes[5].scsi_euidevice_id == """6d696434000001faf47acc0100000000""", "Died on +.volumes[5].scsi_euidevice_id"
    assert result.volumes[5].volume_id == 506, "Died on +.volumes[5].volume_id"
    assert result.volumes[5].access == """readWrite""", "Died on +.volumes[5].access"
    assert result.volumes[5].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-6.506""", "Died on +.volumes[5].iqn"
    assert result.volumes[5].slice_count == 1, "Died on +.volumes[5].slice_count"
    assert type(result.volumes[5].attributes) is dict, "Died on .volumes[5].attributes"
    assert result.volumes[5].volume_pairs[0].volume_pair_uuid == UUID("d55b5395-266d-4531-8502-21516d8f1291"), "Died on .volumes[5].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[5].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[5].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[5].volume_pairs[0].remote_replication.remote_service_id == 9, "Died on +.volumes[5].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[5].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[5].volume_pairs[0].remote_replication.state"
    assert result.volumes[5].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[5].volume_pairs[0].remote_replication.mode"
    assert result.volumes[5].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[5].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[5].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[5].volume_pairs[0].cluster_pair_id"
    assert result.volumes[5].volume_pairs[0].remote_volume_id == 1006, "Died on +.volumes[5].volume_pairs[0].remote_volume_id"
    assert result.volumes[5].volume_pairs[0].remote_volume_name == """snap-target-6""", "Died on +.volumes[5].volume_pairs[0].remote_volume_name"
    assert result.volumes[5].volume_pairs[0].remote_slice_id == 1006, "Died on +.volumes[5].volume_pairs[0].remote_slice_id"
    assert result.volumes[5].account_id == 4, "Died on +.volumes[5].account_id"
    assert result.volumes[5].create_time == """2016-12-30T18:07:02Z""", "Died on +.volumes[5].create_time"
    assert result.volumes[5].virtual_volume_id is None, "Died on .volumes[5].virtual_volume_id"
    assert result.volumes[4].status == """active""", "Died on +.volumes[4].status"
    assert result.volumes[4].enable512e == False, "Died on +.volumes[4].enable512e"
    assert result.volumes[4].qos.burst_iops == 15000, "Died on +.volumes[4].qos.burst_iops"
    assert result.volumes[4].qos.burst_time == 60, "Died on +.volumes[4].qos.burst_time"
    assert result.volumes[4].qos.min_iops == 100, "Died on +.volumes[4].qos.min_iops"
    assert result.volumes[4].qos.max_iops == 15000, "Died on +.volumes[4].qos.max_iops"
    assert result.volumes[4].name == """snapshots-source-5""", "Died on +.volumes[4].name"
    assert result.volumes[4].volume_access_groups[0] == 4, "Died on +.volumes[4].volume_access_groups[0]"
    assert result.volumes[4].scsi_naadevice_id == """6f47acc1000000006d696434000001f9""", "Died on +.volumes[4].scsi_naadevice_id"
    assert result.volumes[4].total_size == 5000658944, "Died on +.volumes[4].total_size"
    assert result.volumes[4].block_size == 4096, "Died on +.volumes[4].block_size"
    assert result.volumes[4].scsi_euidevice_id == """6d696434000001f9f47acc0100000000""", "Died on +.volumes[4].scsi_euidevice_id"
    assert result.volumes[4].volume_id == 505, "Died on +.volumes[4].volume_id"
    assert result.volumes[4].access == """readWrite""", "Died on +.volumes[4].access"
    assert result.volumes[4].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-5.505""", "Died on +.volumes[4].iqn"
    assert result.volumes[4].slice_count == 1, "Died on +.volumes[4].slice_count"
    assert type(result.volumes[4].attributes) is dict, "Died on .volumes[4].attributes"
    assert result.volumes[4].volume_pairs[0].volume_pair_uuid == UUID("9b358840-69ab-41bb-a3a5-d8492d8dd7e1"), "Died on .volumes[4].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[4].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[4].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[4].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[4].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[4].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[4].volume_pairs[0].remote_replication.state"
    assert result.volumes[4].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[4].volume_pairs[0].remote_replication.mode"
    assert result.volumes[4].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[4].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[4].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[4].volume_pairs[0].cluster_pair_id"
    assert result.volumes[4].volume_pairs[0].remote_volume_id == 1005, "Died on +.volumes[4].volume_pairs[0].remote_volume_id"
    assert result.volumes[4].volume_pairs[0].remote_volume_name == """snap-target-5""", "Died on +.volumes[4].volume_pairs[0].remote_volume_name"
    assert result.volumes[4].volume_pairs[0].remote_slice_id == 1005, "Died on +.volumes[4].volume_pairs[0].remote_slice_id"
    assert result.volumes[4].account_id == 4, "Died on +.volumes[4].account_id"
    assert result.volumes[4].create_time == """2016-12-30T18:07:02Z""", "Died on +.volumes[4].create_time"
    assert result.volumes[4].virtual_volume_id is None, "Died on .volumes[4].virtual_volume_id"
    assert result.volumes[3].status == """active""", "Died on +.volumes[3].status"
    assert result.volumes[3].enable512e == False, "Died on +.volumes[3].enable512e"
    assert result.volumes[3].qos.burst_iops == 15000, "Died on +.volumes[3].qos.burst_iops"
    assert result.volumes[3].qos.burst_time == 60, "Died on +.volumes[3].qos.burst_time"
    assert result.volumes[3].qos.min_iops == 100, "Died on +.volumes[3].qos.min_iops"
    assert result.volumes[3].qos.max_iops == 15000, "Died on +.volumes[3].qos.max_iops"
    assert result.volumes[3].name == """snapshots-source-4""", "Died on +.volumes[3].name"
    assert result.volumes[3].volume_access_groups[0] == 4, "Died on +.volumes[3].volume_access_groups[0]"
    assert result.volumes[3].scsi_naadevice_id == """6f47acc1000000006d696434000001f8""", "Died on +.volumes[3].scsi_naadevice_id"
    assert result.volumes[3].total_size == 5000658944, "Died on +.volumes[3].total_size"
    assert result.volumes[3].block_size == 4096, "Died on +.volumes[3].block_size"
    assert result.volumes[3].scsi_euidevice_id == """6d696434000001f8f47acc0100000000""", "Died on +.volumes[3].scsi_euidevice_id"
    assert result.volumes[3].volume_id == 504, "Died on +.volumes[3].volume_id"
    assert result.volumes[3].access == """readWrite""", "Died on +.volumes[3].access"
    assert result.volumes[3].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-4.504""", "Died on +.volumes[3].iqn"
    assert result.volumes[3].slice_count == 1, "Died on +.volumes[3].slice_count"
    assert type(result.volumes[3].attributes) is dict, "Died on .volumes[3].attributes"
    assert result.volumes[3].volume_pairs[0].volume_pair_uuid == UUID("2dd334e5-f2fd-401f-a603-47125d50bd93"), "Died on .volumes[3].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[3].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[3].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[3].volume_pairs[0].remote_replication.remote_service_id == 21, "Died on +.volumes[3].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[3].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[3].volume_pairs[0].remote_replication.state"
    assert result.volumes[3].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[3].volume_pairs[0].remote_replication.mode"
    assert result.volumes[3].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[3].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[3].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[3].volume_pairs[0].cluster_pair_id"
    assert result.volumes[3].volume_pairs[0].remote_volume_id == 1004, "Died on +.volumes[3].volume_pairs[0].remote_volume_id"
    assert result.volumes[3].volume_pairs[0].remote_volume_name == """snap-target-4""", "Died on +.volumes[3].volume_pairs[0].remote_volume_name"
    assert result.volumes[3].volume_pairs[0].remote_slice_id == 1004, "Died on +.volumes[3].volume_pairs[0].remote_slice_id"
    assert result.volumes[3].account_id == 4, "Died on +.volumes[3].account_id"
    assert result.volumes[3].create_time == """2016-12-30T18:07:02Z""", "Died on +.volumes[3].create_time"
    assert result.volumes[3].virtual_volume_id is None, "Died on .volumes[3].virtual_volume_id"
    assert result.volumes[2].status == """active""", "Died on +.volumes[2].status"
    assert result.volumes[2].enable512e == False, "Died on +.volumes[2].enable512e"
    assert result.volumes[2].qos.burst_iops == 15000, "Died on +.volumes[2].qos.burst_iops"
    assert result.volumes[2].qos.burst_time == 60, "Died on +.volumes[2].qos.burst_time"
    assert result.volumes[2].qos.min_iops == 100, "Died on +.volumes[2].qos.min_iops"
    assert result.volumes[2].qos.max_iops == 15000, "Died on +.volumes[2].qos.max_iops"
    assert result.volumes[2].name == """snapshots-source-3""", "Died on +.volumes[2].name"
    assert result.volumes[2].volume_access_groups[0] == 4, "Died on +.volumes[2].volume_access_groups[0]"
    assert result.volumes[2].scsi_naadevice_id == """6f47acc1000000006d696434000001f7""", "Died on +.volumes[2].scsi_naadevice_id"
    assert result.volumes[2].total_size == 5000658944, "Died on +.volumes[2].total_size"
    assert result.volumes[2].block_size == 4096, "Died on +.volumes[2].block_size"
    assert result.volumes[2].scsi_euidevice_id == """6d696434000001f7f47acc0100000000""", "Died on +.volumes[2].scsi_euidevice_id"
    assert result.volumes[2].volume_id == 503, "Died on +.volumes[2].volume_id"
    assert result.volumes[2].access == """readWrite""", "Died on +.volumes[2].access"
    assert result.volumes[2].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-3.503""", "Died on +.volumes[2].iqn"
    assert result.volumes[2].slice_count == 1, "Died on +.volumes[2].slice_count"
    assert type(result.volumes[2].attributes) is dict, "Died on .volumes[2].attributes"
    assert result.volumes[2].volume_pairs[0].volume_pair_uuid == UUID("09e0b630-d7a8-4b44-b201-c7bf88f486e3"), "Died on .volumes[2].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[2].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[2].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[2].volume_pairs[0].remote_replication.remote_service_id == 13, "Died on +.volumes[2].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[2].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[2].volume_pairs[0].remote_replication.state"
    assert result.volumes[2].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[2].volume_pairs[0].remote_replication.mode"
    assert result.volumes[2].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[2].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[2].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[2].volume_pairs[0].cluster_pair_id"
    assert result.volumes[2].volume_pairs[0].remote_volume_id == 1003, "Died on +.volumes[2].volume_pairs[0].remote_volume_id"
    assert result.volumes[2].volume_pairs[0].remote_volume_name == """snap-target-3""", "Died on +.volumes[2].volume_pairs[0].remote_volume_name"
    assert result.volumes[2].volume_pairs[0].remote_slice_id == 1003, "Died on +.volumes[2].volume_pairs[0].remote_slice_id"
    assert result.volumes[2].account_id == 4, "Died on +.volumes[2].account_id"
    assert result.volumes[2].create_time == """2016-12-30T18:07:02Z""", "Died on +.volumes[2].create_time"
    assert result.volumes[2].virtual_volume_id is None, "Died on .volumes[2].virtual_volume_id"
    assert result.volumes[1].status == """active""", "Died on +.volumes[1].status"
    assert result.volumes[1].enable512e == False, "Died on +.volumes[1].enable512e"
    assert result.volumes[1].qos.burst_iops == 15000, "Died on +.volumes[1].qos.burst_iops"
    assert result.volumes[1].qos.burst_time == 60, "Died on +.volumes[1].qos.burst_time"
    assert result.volumes[1].qos.min_iops == 100, "Died on +.volumes[1].qos.min_iops"
    assert result.volumes[1].qos.max_iops == 15000, "Died on +.volumes[1].qos.max_iops"
    assert result.volumes[1].name == """snapshots-source-2""", "Died on +.volumes[1].name"
    assert result.volumes[1].volume_access_groups[0] == 4, "Died on +.volumes[1].volume_access_groups[0]"
    assert result.volumes[1].scsi_naadevice_id == """6f47acc1000000006d696434000001f6""", "Died on +.volumes[1].scsi_naadevice_id"
    assert result.volumes[1].total_size == 5000658944, "Died on +.volumes[1].total_size"
    assert result.volumes[1].block_size == 4096, "Died on +.volumes[1].block_size"
    assert result.volumes[1].scsi_euidevice_id == """6d696434000001f6f47acc0100000000""", "Died on +.volumes[1].scsi_euidevice_id"
    assert result.volumes[1].volume_id == 502, "Died on +.volumes[1].volume_id"
    assert result.volumes[1].access == """readWrite""", "Died on +.volumes[1].access"
    assert result.volumes[1].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-2.502""", "Died on +.volumes[1].iqn"
    assert result.volumes[1].slice_count == 1, "Died on +.volumes[1].slice_count"
    assert type(result.volumes[1].attributes) is dict, "Died on .volumes[1].attributes"
    assert result.volumes[1].volume_pairs[0].volume_pair_uuid == UUID("2270f1a2-89dd-413f-8164-8067d0b75d16"), "Died on .volumes[1].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[1].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[1].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[1].volume_pairs[0].remote_replication.remote_service_id == 17, "Died on +.volumes[1].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[1].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[1].volume_pairs[0].remote_replication.state"
    assert result.volumes[1].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[1].volume_pairs[0].remote_replication.mode"
    assert result.volumes[1].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[1].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[1].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[1].volume_pairs[0].cluster_pair_id"
    assert result.volumes[1].volume_pairs[0].remote_volume_id == 1002, "Died on +.volumes[1].volume_pairs[0].remote_volume_id"
    assert result.volumes[1].volume_pairs[0].remote_volume_name == """snap-target-2""", "Died on +.volumes[1].volume_pairs[0].remote_volume_name"
    assert result.volumes[1].volume_pairs[0].remote_slice_id == 1002, "Died on +.volumes[1].volume_pairs[0].remote_slice_id"
    assert result.volumes[1].account_id == 4, "Died on +.volumes[1].account_id"
    assert result.volumes[1].create_time == """2016-12-30T18:07:02Z""", "Died on +.volumes[1].create_time"
    assert result.volumes[1].virtual_volume_id is None, "Died on .volumes[1].virtual_volume_id"
    assert result.volumes[0].status == """active""", "Died on +.volumes[0].status"
    assert result.volumes[0].enable512e == False, "Died on +.volumes[0].enable512e"
    assert result.volumes[0].qos.burst_iops == 15000, "Died on +.volumes[0].qos.burst_iops"
    assert result.volumes[0].qos.burst_time == 60, "Died on +.volumes[0].qos.burst_time"
    assert result.volumes[0].qos.min_iops == 100, "Died on +.volumes[0].qos.min_iops"
    assert result.volumes[0].qos.max_iops == 15000, "Died on +.volumes[0].qos.max_iops"
    assert result.volumes[0].name == """snapshots-source-1""", "Died on +.volumes[0].name"
    assert result.volumes[0].volume_access_groups[0] == 4, "Died on +.volumes[0].volume_access_groups[0]"
    assert result.volumes[0].scsi_naadevice_id == """6f47acc1000000006d696434000001f5""", "Died on +.volumes[0].scsi_naadevice_id"
    assert result.volumes[0].total_size == 5000658944, "Died on +.volumes[0].total_size"
    assert result.volumes[0].block_size == 4096, "Died on +.volumes[0].block_size"
    assert result.volumes[0].scsi_euidevice_id == """6d696434000001f5f47acc0100000000""", "Died on +.volumes[0].scsi_euidevice_id"
    assert result.volumes[0].volume_id == 501, "Died on +.volumes[0].volume_id"
    assert result.volumes[0].access == """readWrite""", "Died on +.volumes[0].access"
    assert result.volumes[0].iqn == """iqn.2010-01.com.solidfire:mid4.snapshots-source-1.501""", "Died on +.volumes[0].iqn"
    assert result.volumes[0].slice_count == 1, "Died on +.volumes[0].slice_count"
    assert type(result.volumes[0].attributes) is dict, "Died on .volumes[0].attributes"
    assert result.volumes[0].volume_pairs[0].volume_pair_uuid == UUID("a3c7928a-6e21-4884-b5cf-9e7aea8841d4"), "Died on .volumes[0].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[0].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[0].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[0].volume_pairs[0].remote_replication.remote_service_id == 25, "Died on +.volumes[0].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[0].volume_pairs[0].remote_replication.state == """Idle""", "Died on +.volumes[0].volume_pairs[0].remote_replication.state"
    assert result.volumes[0].volume_pairs[0].remote_replication.mode == """SnapshotsOnly""", "Died on +.volumes[0].volume_pairs[0].remote_replication.mode"
    assert result.volumes[0].volume_pairs[0].remote_replication.snapshot_replication.state == """Idle""", "Died on +.volumes[0].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[0].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[0].volume_pairs[0].cluster_pair_id"
    assert result.volumes[0].volume_pairs[0].remote_volume_id == 1001, "Died on +.volumes[0].volume_pairs[0].remote_volume_id"
    assert result.volumes[0].volume_pairs[0].remote_volume_name == """snap-target-1""", "Died on +.volumes[0].volume_pairs[0].remote_volume_name"
    assert result.volumes[0].volume_pairs[0].remote_slice_id == 1001, "Died on +.volumes[0].volume_pairs[0].remote_slice_id"
    assert result.volumes[0].account_id == 4, "Died on +.volumes[0].account_id"
    assert result.volumes[0].create_time == """2016-12-30T18:07:02Z""", "Died on +.volumes[0].create_time"
    assert result.volumes[0].virtual_volume_id is None, "Died on .volumes[0].virtual_volume_id"

def test_modify_cluster_full_threshold_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ModifyClusterFullThreshold_v9.1_0)

    
    stage2_aware_threshold = 42 # stage2_aware_threshold
    stage3_block_threshold_percent = 42 # stage3_block_threshold_percent
    max_metadata_over_provision_factor = 42 # max_metadata_over_provision_factor
    result = ef.modify_cluster_full_threshold()
    assert result.sum_used_cluster_bytes == 0, "Died on +.sum_used_cluster_bytes"
    assert result.stage5_block_threshold_bytes == 8642066743296, "Died on +.stage5_block_threshold_bytes"
    assert result.stage2_aware_threshold == 3, "Died on +.stage2_aware_threshold"
    assert result.stage3_low_threshold == 2, "Died on +.stage3_low_threshold"
    assert result.fullness == """stage1Happy""", "Died on +.fullness"
    assert result.sum_total_cluster_bytes == 8642066743296, "Died on +.sum_total_cluster_bytes"
    assert result.slice_reserve_used_threshold_pct == 5, "Died on +.slice_reserve_used_threshold_pct"
    assert result.metadata_fullness == """stage1Happy""", "Died on +.metadata_fullness"
    assert result.stage3_block_threshold_bytes == 5963026052876, "Died on +.stage3_block_threshold_bytes"
    assert result.stage2_block_threshold_bytes == 1901254683526, "Died on +.stage2_block_threshold_bytes"
    assert result.stage3_block_threshold_percent == 10, "Died on +.stage3_block_threshold_percent"
    assert result.sum_total_metadata_cluster_bytes == 432103337164, "Died on +.sum_total_metadata_cluster_bytes"
    assert result.stage4_block_threshold_bytes == 6222288055174, "Died on +.stage4_block_threshold_bytes"
    assert result.sum_used_metadata_cluster_bytes == 0, "Died on +.sum_used_metadata_cluster_bytes"
    assert result.max_metadata_over_provision_factor == 5, "Died on +.max_metadata_over_provision_factor"
    assert result.block_fullness == """stage1Happy""", "Died on +.block_fullness"
    assert result.stage4_critical_threshold == 1, "Died on +.stage4_critical_threshold"

def test_modify_volume_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ModifyVolume_v9.1_0)

    
    volume_id = 42 # volume_id
    account_id = 42 # account_id
    access = "" # access
    qos = dict() # qos
    total_size = 42 # total_size
    attributes = dict() # attributes
    result = ef.modify_volume(volume_id,)
    assert result.volume.status == """active""", "Died on +.volume.status"
    assert result.volume.enable512e == False, "Died on +.volume.enable512e"
    assert result.volume.qos.burst_iops == 15000, "Died on +.volume.qos.burst_iops"
    assert result.volume.qos.burst_time == 60, "Died on +.volume.qos.burst_time"
    assert result.volume.qos.min_iops == 100, "Died on +.volume.qos.min_iops"
    assert result.volume.qos.max_iops == 15000, "Died on +.volume.qos.max_iops"
    assert result.volume.name == """6WspJv69FkAvBRqP""", "Died on +.volume.name"
    assert result.volume.scsi_naadevice_id == """6f47acc10000000062646270000001a6""", "Died on +.volume.scsi_naadevice_id"
    assert result.volume.total_size == 30139219968, "Died on +.volume.total_size"
    assert result.volume.block_size == 4096, "Died on +.volume.block_size"
    assert result.volume.scsi_euidevice_id == """62646270000001a6f47acc0100000000""", "Died on +.volume.scsi_euidevice_id"
    assert result.volume.volume_id == 422, "Died on +.volume.volume_id"
    assert result.volume.access == """readWrite""", "Died on +.volume.access"
    assert result.volume.iqn == """iqn.2010-01.com.solidfire:bdbp.6wspjv69fkavbrqp.422""", "Died on +.volume.iqn"
    assert result.volume.slice_count == 1, "Died on +.volume.slice_count"
    assert type(result.volume.attributes) is dict, "Died on .volume.attributes"
    assert result.volume.account_id == 3, "Died on +.volume.account_id"
    assert result.volume.create_time == """2017-01-04T20:56:29Z""", "Died on +.volume.create_time"
    assert result.volume.virtual_volume_id is None, "Died on .volume.virtual_volume_id"

def test_modify_volume_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ModifyVolume_v9.1_1)

    
    volume_id = 42 # volume_id
    account_id = 42 # account_id
    access = "" # access
    qos = dict() # qos
    total_size = 42 # total_size
    attributes = dict() # attributes
    result = ef.modify_volume(volume_id,)
    assert result.volume.status == """active""", "Died on +.volume.status"
    assert result.volume.enable512e == True, "Died on +.volume.enable512e"
    assert result.volume.qos.burst_iops == 15000, "Died on +.volume.qos.burst_iops"
    assert result.volume.qos.burst_time == 60, "Died on +.volume.qos.burst_time"
    assert result.volume.qos.min_iops == 100, "Died on +.volume.qos.min_iops"
    assert result.volume.qos.max_iops == 15000, "Died on +.volume.qos.max_iops"
    assert result.volume.name == """source-volume-1600GB-512e-1""", "Died on +.volume.name"
    assert result.volume.volume_access_groups[0] == 4, "Died on +.volume.volume_access_groups[0]"
    assert result.volume.scsi_naadevice_id == """6f47acc1000000006439766d00000019""", "Died on +.volume.scsi_naadevice_id"
    assert result.volume.total_size == 1600000098304, "Died on +.volume.total_size"
    assert result.volume.block_size == 4096, "Died on +.volume.block_size"
    assert result.volume.scsi_euidevice_id == """6439766d00000019f47acc0100000000""", "Died on +.volume.scsi_euidevice_id"
    assert result.volume.volume_id == 25, "Died on +.volume.volume_id"
    assert result.volume.access == """readWrite""", "Died on +.volume.access"
    assert result.volume.iqn == """iqn.2010-01.com.solidfire:d9vm.source-volume-1600gb-512e-1.25""", "Died on +.volume.iqn"
    assert result.volume.slice_count == 1, "Died on +.volume.slice_count"
    assert type(result.volume.attributes) is dict, "Died on .volume.attributes"
    assert result.volume.account_id == 1, "Died on +.volume.account_id"
    assert result.volume.create_time == """2016-12-30T17:39:49Z""", "Died on +.volume.create_time"
    assert result.volume.virtual_volume_id is None, "Died on .volume.virtual_volume_id"

def test_modify_volume_v9.1_2():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ModifyVolume_v9.1_2)

    
    volume_id = 42 # volume_id
    account_id = 42 # account_id
    access = "" # access
    qos = dict() # qos
    total_size = 42 # total_size
    attributes = dict() # attributes
    result = ef.modify_volume(volume_id,)
    assert result.volume.status == """active""", "Died on +.volume.status"
    assert result.volume.enable512e == False, "Died on +.volume.enable512e"
    assert result.volume.qos.burst_iops == 15000, "Died on +.volume.qos.burst_iops"
    assert result.volume.qos.burst_time == 60, "Died on +.volume.qos.burst_time"
    assert result.volume.qos.min_iops == 100, "Died on +.volume.qos.min_iops"
    assert result.volume.qos.max_iops == 15000, "Died on +.volume.qos.max_iops"
    assert result.volume.name == """wR3GK3ml3uxCAURK""", "Died on +.volume.name"
    assert result.volume.scsi_naadevice_id == """6f47acc1000000006439766d000000c2""", "Died on +.volume.scsi_naadevice_id"
    assert result.volume.total_size == 1000341504, "Died on +.volume.total_size"
    assert result.volume.block_size == 4096, "Died on +.volume.block_size"
    assert result.volume.scsi_euidevice_id == """6439766d000000c2f47acc0100000000""", "Died on +.volume.scsi_euidevice_id"
    assert result.volume.volume_id == 194, "Died on +.volume.volume_id"
    assert result.volume.access == """readWrite""", "Died on +.volume.access"
    assert result.volume.iqn == """iqn.2010-01.com.solidfire:d9vm.wr3gk3ml3uxcaurk.194""", "Died on +.volume.iqn"
    assert result.volume.slice_count == 1, "Died on +.volume.slice_count"
    assert type(result.volume.attributes) is dict, "Died on .volume.attributes"
    assert result.volume.account_id == 2, "Died on +.volume.account_id"
    assert result.volume.create_time == """2016-12-31T04:02:26Z""", "Died on +.volume.create_time"
    assert result.volume.virtual_volume_id is None, "Died on .volume.virtual_volume_id"

def test_modify_volume_access_group_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ModifyVolumeAccessGroup_v9.1_0)

    
    volume_access_group_id = 42 # volume_access_group_id
    virtual_network_id = 42 # virtual_network_id
    virtual_network_tags = 42 # virtual_network_tags
    name = "" # name
    initiators = "" # initiators
    volumes = 42 # volumes
    attributes = dict() # attributes
    result = ef.modify_volume_access_group(volume_access_group_id,)
    assert result.volume_access_group.name == """clone-suite-volume-set-1""", "Died on +.volume_access_group.name"
    assert result.volume_access_group.volumes[7] == 24, "Died on +.volume_access_group.volumes[7]"
    assert result.volume_access_group.volumes[6] == 23, "Died on +.volume_access_group.volumes[6]"
    assert result.volume_access_group.volumes[5] == 22, "Died on +.volume_access_group.volumes[5]"
    assert result.volume_access_group.volumes[4] == 21, "Died on +.volume_access_group.volumes[4]"
    assert result.volume_access_group.volumes[3] == 20, "Died on +.volume_access_group.volumes[3]"
    assert result.volume_access_group.volumes[2] == 19, "Died on +.volume_access_group.volumes[2]"
    assert result.volume_access_group.volumes[1] == 18, "Died on +.volume_access_group.volumes[1]"
    assert result.volume_access_group.volumes[0] == 17, "Died on +.volume_access_group.volumes[0]"
    assert type(result.volume_access_group.attributes) is dict, "Died on .volume_access_group.attributes"
    assert result.volume_access_group.volume_access_group_id == 3, "Died on +.volume_access_group.volume_access_group_id"

def test_modify_volume_access_group_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ModifyVolumeAccessGroup_v9.1_1)

    
    volume_access_group_id = 42 # volume_access_group_id
    virtual_network_id = 42 # virtual_network_id
    virtual_network_tags = 42 # virtual_network_tags
    name = "" # name
    initiators = "" # initiators
    volumes = 42 # volumes
    attributes = dict() # attributes
    result = ef.modify_volume_access_group(volume_access_group_id,)
    assert result.volume_access_group.name == """clone-suite-volume-set-1""", "Died on +.volume_access_group.name"
    assert result.volume_access_group.initiator_ids[0] == 10, "Died on +.volume_access_group.initiator_ids[0]"
    assert result.volume_access_group.volumes[7] == 24, "Died on +.volume_access_group.volumes[7]"
    assert result.volume_access_group.volumes[6] == 23, "Died on +.volume_access_group.volumes[6]"
    assert result.volume_access_group.volumes[5] == 22, "Died on +.volume_access_group.volumes[5]"
    assert result.volume_access_group.volumes[4] == 21, "Died on +.volume_access_group.volumes[4]"
    assert result.volume_access_group.volumes[3] == 20, "Died on +.volume_access_group.volumes[3]"
    assert result.volume_access_group.volumes[2] == 19, "Died on +.volume_access_group.volumes[2]"
    assert result.volume_access_group.volumes[1] == 18, "Died on +.volume_access_group.volumes[1]"
    assert result.volume_access_group.volumes[0] == 17, "Died on +.volume_access_group.volumes[0]"
    assert result.volume_access_group.initiators[0] == """iqn.2010-01.net.solidfire.eng:rclt1v0003""", "Died on +.volume_access_group.initiators[0]"
    assert type(result.volume_access_group.attributes) is dict, "Died on .volume_access_group.attributes"
    assert result.volume_access_group.volume_access_group_id == 3, "Died on +.volume_access_group.volume_access_group_id"

def test_modify_volume_pair_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ModifyVolumePair_v9.1_0)

    
    volume_id = 42 # volume_id
    paused_manual = True # paused_manual
    mode = "" # mode
    result = ef.modify_volume_pair(volume_id,)

def test_modify_volumes_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ModifyVolumes_v9.1_0)

    
    volume_ids = 42 # volume_ids
    account_id = 42 # account_id
    access = "" # access
    qos = dict() # qos
    total_size = 42 # total_size
    attributes = dict() # attributes
    result = ef.modify_volumes(volume_ids,)
    assert result.volumes[149].status == """active""", "Died on +.volumes[149].status"
    assert result.volumes[149].enable512e == False, "Died on +.volumes[149].enable512e"
    assert result.volumes[149].qos.burst_iops == 15000, "Died on +.volumes[149].qos.burst_iops"
    assert result.volumes[149].qos.burst_time == 60, "Died on +.volumes[149].qos.burst_time"
    assert result.volumes[149].qos.min_iops == 100, "Died on +.volumes[149].qos.min_iops"
    assert result.volumes[149].qos.max_iops == 15000, "Died on +.volumes[149].qos.max_iops"
    assert result.volumes[149].name == """async-target-150""", "Died on +.volumes[149].name"
    assert result.volumes[149].volume_access_groups[0] == 7, "Died on +.volumes[149].volume_access_groups[0]"
    assert result.volumes[149].scsi_naadevice_id == """6f47acc10000000034353335000003e8""", "Died on +.volumes[149].scsi_naadevice_id"
    assert result.volumes[149].total_size == 5000658944, "Died on +.volumes[149].total_size"
    assert result.volumes[149].block_size == 4096, "Died on +.volumes[149].block_size"
    assert result.volumes[149].scsi_euidevice_id == """34353335000003e8f47acc0100000000""", "Died on +.volumes[149].scsi_euidevice_id"
    assert result.volumes[149].volume_id == 1000, "Died on +.volumes[149].volume_id"
    assert result.volumes[149].access == """replicationTarget""", "Died on +.volumes[149].access"
    assert result.volumes[149].iqn == """iqn.2010-01.com.solidfire:4535.async-target-150.1000""", "Died on +.volumes[149].iqn"
    assert result.volumes[149].slice_count == 1, "Died on +.volumes[149].slice_count"
    assert type(result.volumes[149].attributes) is dict, "Died on .volumes[149].attributes"
    assert result.volumes[149].volume_pairs[0].volume_pair_uuid == UUID("0f4c282b-fe23-4004-b836-fe8c63c0cd07"), "Died on .volumes[149].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[149].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[149].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[149].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[149].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[149].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[149].volume_pairs[0].remote_replication.state"
    assert result.volumes[149].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[149].volume_pairs[0].remote_replication.mode"
    assert result.volumes[149].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[149].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[149].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[149].volume_pairs[0].cluster_pair_id"
    assert result.volumes[149].volume_pairs[0].remote_volume_id == 500, "Died on +.volumes[149].volume_pairs[0].remote_volume_id"
    assert result.volumes[149].volume_pairs[0].remote_volume_name == """async-source-150""", "Died on +.volumes[149].volume_pairs[0].remote_volume_name"
    assert result.volumes[149].volume_pairs[0].remote_slice_id == 500, "Died on +.volumes[149].volume_pairs[0].remote_slice_id"
    assert result.volumes[149].account_id == 6, "Died on +.volumes[149].account_id"
    assert result.volumes[149].create_time == """2016-12-30T18:10:14Z""", "Died on +.volumes[149].create_time"
    assert result.volumes[149].virtual_volume_id is None, "Died on .volumes[149].virtual_volume_id"
    assert result.volumes[148].status == """active""", "Died on +.volumes[148].status"
    assert result.volumes[148].enable512e == False, "Died on +.volumes[148].enable512e"
    assert result.volumes[148].qos.burst_iops == 15000, "Died on +.volumes[148].qos.burst_iops"
    assert result.volumes[148].qos.burst_time == 60, "Died on +.volumes[148].qos.burst_time"
    assert result.volumes[148].qos.min_iops == 100, "Died on +.volumes[148].qos.min_iops"
    assert result.volumes[148].qos.max_iops == 15000, "Died on +.volumes[148].qos.max_iops"
    assert result.volumes[148].name == """async-target-149""", "Died on +.volumes[148].name"
    assert result.volumes[148].volume_access_groups[0] == 7, "Died on +.volumes[148].volume_access_groups[0]"
    assert result.volumes[148].scsi_naadevice_id == """6f47acc10000000034353335000003e7""", "Died on +.volumes[148].scsi_naadevice_id"
    assert result.volumes[148].total_size == 5000658944, "Died on +.volumes[148].total_size"
    assert result.volumes[148].block_size == 4096, "Died on +.volumes[148].block_size"
    assert result.volumes[148].scsi_euidevice_id == """34353335000003e7f47acc0100000000""", "Died on +.volumes[148].scsi_euidevice_id"
    assert result.volumes[148].volume_id == 999, "Died on +.volumes[148].volume_id"
    assert result.volumes[148].access == """replicationTarget""", "Died on +.volumes[148].access"
    assert result.volumes[148].iqn == """iqn.2010-01.com.solidfire:4535.async-target-149.999""", "Died on +.volumes[148].iqn"
    assert result.volumes[148].slice_count == 1, "Died on +.volumes[148].slice_count"
    assert type(result.volumes[148].attributes) is dict, "Died on .volumes[148].attributes"
    assert result.volumes[148].volume_pairs[0].volume_pair_uuid == UUID("7d13df5f-caba-4cbe-bcbb-8359f980abc2"), "Died on .volumes[148].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[148].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[148].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[148].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[148].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[148].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[148].volume_pairs[0].remote_replication.state"
    assert result.volumes[148].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[148].volume_pairs[0].remote_replication.mode"
    assert result.volumes[148].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[148].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[148].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[148].volume_pairs[0].cluster_pair_id"
    assert result.volumes[148].volume_pairs[0].remote_volume_id == 499, "Died on +.volumes[148].volume_pairs[0].remote_volume_id"
    assert result.volumes[148].volume_pairs[0].remote_volume_name == """async-source-149""", "Died on +.volumes[148].volume_pairs[0].remote_volume_name"
    assert result.volumes[148].volume_pairs[0].remote_slice_id == 499, "Died on +.volumes[148].volume_pairs[0].remote_slice_id"
    assert result.volumes[148].account_id == 6, "Died on +.volumes[148].account_id"
    assert result.volumes[148].create_time == """2016-12-30T18:10:14Z""", "Died on +.volumes[148].create_time"
    assert result.volumes[148].virtual_volume_id is None, "Died on .volumes[148].virtual_volume_id"
    assert result.volumes[147].status == """active""", "Died on +.volumes[147].status"
    assert result.volumes[147].enable512e == False, "Died on +.volumes[147].enable512e"
    assert result.volumes[147].qos.burst_iops == 15000, "Died on +.volumes[147].qos.burst_iops"
    assert result.volumes[147].qos.burst_time == 60, "Died on +.volumes[147].qos.burst_time"
    assert result.volumes[147].qos.min_iops == 100, "Died on +.volumes[147].qos.min_iops"
    assert result.volumes[147].qos.max_iops == 15000, "Died on +.volumes[147].qos.max_iops"
    assert result.volumes[147].name == """async-target-148""", "Died on +.volumes[147].name"
    assert result.volumes[147].volume_access_groups[0] == 7, "Died on +.volumes[147].volume_access_groups[0]"
    assert result.volumes[147].scsi_naadevice_id == """6f47acc10000000034353335000003e6""", "Died on +.volumes[147].scsi_naadevice_id"
    assert result.volumes[147].total_size == 5000658944, "Died on +.volumes[147].total_size"
    assert result.volumes[147].block_size == 4096, "Died on +.volumes[147].block_size"
    assert result.volumes[147].scsi_euidevice_id == """34353335000003e6f47acc0100000000""", "Died on +.volumes[147].scsi_euidevice_id"
    assert result.volumes[147].volume_id == 998, "Died on +.volumes[147].volume_id"
    assert result.volumes[147].access == """replicationTarget""", "Died on +.volumes[147].access"
    assert result.volumes[147].iqn == """iqn.2010-01.com.solidfire:4535.async-target-148.998""", "Died on +.volumes[147].iqn"
    assert result.volumes[147].slice_count == 1, "Died on +.volumes[147].slice_count"
    assert type(result.volumes[147].attributes) is dict, "Died on .volumes[147].attributes"
    assert result.volumes[147].volume_pairs[0].volume_pair_uuid == UUID("ce63e468-4ace-42b8-a216-847195772140"), "Died on .volumes[147].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[147].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[147].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[147].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[147].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[147].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[147].volume_pairs[0].remote_replication.state"
    assert result.volumes[147].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[147].volume_pairs[0].remote_replication.mode"
    assert result.volumes[147].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[147].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[147].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[147].volume_pairs[0].cluster_pair_id"
    assert result.volumes[147].volume_pairs[0].remote_volume_id == 498, "Died on +.volumes[147].volume_pairs[0].remote_volume_id"
    assert result.volumes[147].volume_pairs[0].remote_volume_name == """async-source-148""", "Died on +.volumes[147].volume_pairs[0].remote_volume_name"
    assert result.volumes[147].volume_pairs[0].remote_slice_id == 498, "Died on +.volumes[147].volume_pairs[0].remote_slice_id"
    assert result.volumes[147].account_id == 6, "Died on +.volumes[147].account_id"
    assert result.volumes[147].create_time == """2016-12-30T18:10:14Z""", "Died on +.volumes[147].create_time"
    assert result.volumes[147].virtual_volume_id is None, "Died on .volumes[147].virtual_volume_id"
    assert result.volumes[146].status == """active""", "Died on +.volumes[146].status"
    assert result.volumes[146].enable512e == False, "Died on +.volumes[146].enable512e"
    assert result.volumes[146].qos.burst_iops == 15000, "Died on +.volumes[146].qos.burst_iops"
    assert result.volumes[146].qos.burst_time == 60, "Died on +.volumes[146].qos.burst_time"
    assert result.volumes[146].qos.min_iops == 100, "Died on +.volumes[146].qos.min_iops"
    assert result.volumes[146].qos.max_iops == 15000, "Died on +.volumes[146].qos.max_iops"
    assert result.volumes[146].name == """async-target-147""", "Died on +.volumes[146].name"
    assert result.volumes[146].volume_access_groups[0] == 7, "Died on +.volumes[146].volume_access_groups[0]"
    assert result.volumes[146].scsi_naadevice_id == """6f47acc10000000034353335000003e5""", "Died on +.volumes[146].scsi_naadevice_id"
    assert result.volumes[146].total_size == 5000658944, "Died on +.volumes[146].total_size"
    assert result.volumes[146].block_size == 4096, "Died on +.volumes[146].block_size"
    assert result.volumes[146].scsi_euidevice_id == """34353335000003e5f47acc0100000000""", "Died on +.volumes[146].scsi_euidevice_id"
    assert result.volumes[146].volume_id == 997, "Died on +.volumes[146].volume_id"
    assert result.volumes[146].access == """replicationTarget""", "Died on +.volumes[146].access"
    assert result.volumes[146].iqn == """iqn.2010-01.com.solidfire:4535.async-target-147.997""", "Died on +.volumes[146].iqn"
    assert result.volumes[146].slice_count == 1, "Died on +.volumes[146].slice_count"
    assert type(result.volumes[146].attributes) is dict, "Died on .volumes[146].attributes"
    assert result.volumes[146].volume_pairs[0].volume_pair_uuid == UUID("83ebddab-891e-4bec-98d5-862485f8aa96"), "Died on .volumes[146].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[146].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[146].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[146].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[146].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[146].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[146].volume_pairs[0].remote_replication.state"
    assert result.volumes[146].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[146].volume_pairs[0].remote_replication.mode"
    assert result.volumes[146].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[146].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[146].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[146].volume_pairs[0].cluster_pair_id"
    assert result.volumes[146].volume_pairs[0].remote_volume_id == 497, "Died on +.volumes[146].volume_pairs[0].remote_volume_id"
    assert result.volumes[146].volume_pairs[0].remote_volume_name == """async-source-147""", "Died on +.volumes[146].volume_pairs[0].remote_volume_name"
    assert result.volumes[146].volume_pairs[0].remote_slice_id == 497, "Died on +.volumes[146].volume_pairs[0].remote_slice_id"
    assert result.volumes[146].account_id == 6, "Died on +.volumes[146].account_id"
    assert result.volumes[146].create_time == """2016-12-30T18:10:14Z""", "Died on +.volumes[146].create_time"
    assert result.volumes[146].virtual_volume_id is None, "Died on .volumes[146].virtual_volume_id"
    assert result.volumes[145].status == """active""", "Died on +.volumes[145].status"
    assert result.volumes[145].enable512e == False, "Died on +.volumes[145].enable512e"
    assert result.volumes[145].qos.burst_iops == 15000, "Died on +.volumes[145].qos.burst_iops"
    assert result.volumes[145].qos.burst_time == 60, "Died on +.volumes[145].qos.burst_time"
    assert result.volumes[145].qos.min_iops == 100, "Died on +.volumes[145].qos.min_iops"
    assert result.volumes[145].qos.max_iops == 15000, "Died on +.volumes[145].qos.max_iops"
    assert result.volumes[145].name == """async-target-146""", "Died on +.volumes[145].name"
    assert result.volumes[145].volume_access_groups[0] == 7, "Died on +.volumes[145].volume_access_groups[0]"
    assert result.volumes[145].scsi_naadevice_id == """6f47acc10000000034353335000003e4""", "Died on +.volumes[145].scsi_naadevice_id"
    assert result.volumes[145].total_size == 5000658944, "Died on +.volumes[145].total_size"
    assert result.volumes[145].block_size == 4096, "Died on +.volumes[145].block_size"
    assert result.volumes[145].scsi_euidevice_id == """34353335000003e4f47acc0100000000""", "Died on +.volumes[145].scsi_euidevice_id"
    assert result.volumes[145].volume_id == 996, "Died on +.volumes[145].volume_id"
    assert result.volumes[145].access == """replicationTarget""", "Died on +.volumes[145].access"
    assert result.volumes[145].iqn == """iqn.2010-01.com.solidfire:4535.async-target-146.996""", "Died on +.volumes[145].iqn"
    assert result.volumes[145].slice_count == 1, "Died on +.volumes[145].slice_count"
    assert type(result.volumes[145].attributes) is dict, "Died on .volumes[145].attributes"
    assert result.volumes[145].volume_pairs[0].volume_pair_uuid == UUID("f8bccd97-7307-4f98-8ca8-724048cb7d1c"), "Died on .volumes[145].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[145].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[145].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[145].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[145].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[145].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[145].volume_pairs[0].remote_replication.state"
    assert result.volumes[145].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[145].volume_pairs[0].remote_replication.mode"
    assert result.volumes[145].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[145].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[145].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[145].volume_pairs[0].cluster_pair_id"
    assert result.volumes[145].volume_pairs[0].remote_volume_id == 496, "Died on +.volumes[145].volume_pairs[0].remote_volume_id"
    assert result.volumes[145].volume_pairs[0].remote_volume_name == """async-source-146""", "Died on +.volumes[145].volume_pairs[0].remote_volume_name"
    assert result.volumes[145].volume_pairs[0].remote_slice_id == 496, "Died on +.volumes[145].volume_pairs[0].remote_slice_id"
    assert result.volumes[145].account_id == 6, "Died on +.volumes[145].account_id"
    assert result.volumes[145].create_time == """2016-12-30T18:10:14Z""", "Died on +.volumes[145].create_time"
    assert result.volumes[145].virtual_volume_id is None, "Died on .volumes[145].virtual_volume_id"
    assert result.volumes[144].status == """active""", "Died on +.volumes[144].status"
    assert result.volumes[144].enable512e == False, "Died on +.volumes[144].enable512e"
    assert result.volumes[144].qos.burst_iops == 15000, "Died on +.volumes[144].qos.burst_iops"
    assert result.volumes[144].qos.burst_time == 60, "Died on +.volumes[144].qos.burst_time"
    assert result.volumes[144].qos.min_iops == 100, "Died on +.volumes[144].qos.min_iops"
    assert result.volumes[144].qos.max_iops == 15000, "Died on +.volumes[144].qos.max_iops"
    assert result.volumes[144].name == """async-target-145""", "Died on +.volumes[144].name"
    assert result.volumes[144].volume_access_groups[0] == 7, "Died on +.volumes[144].volume_access_groups[0]"
    assert result.volumes[144].scsi_naadevice_id == """6f47acc10000000034353335000003e3""", "Died on +.volumes[144].scsi_naadevice_id"
    assert result.volumes[144].total_size == 5000658944, "Died on +.volumes[144].total_size"
    assert result.volumes[144].block_size == 4096, "Died on +.volumes[144].block_size"
    assert result.volumes[144].scsi_euidevice_id == """34353335000003e3f47acc0100000000""", "Died on +.volumes[144].scsi_euidevice_id"
    assert result.volumes[144].volume_id == 995, "Died on +.volumes[144].volume_id"
    assert result.volumes[144].access == """replicationTarget""", "Died on +.volumes[144].access"
    assert result.volumes[144].iqn == """iqn.2010-01.com.solidfire:4535.async-target-145.995""", "Died on +.volumes[144].iqn"
    assert result.volumes[144].slice_count == 1, "Died on +.volumes[144].slice_count"
    assert type(result.volumes[144].attributes) is dict, "Died on .volumes[144].attributes"
    assert result.volumes[144].volume_pairs[0].volume_pair_uuid == UUID("36505d1b-8644-4642-b4f9-bffd67d69769"), "Died on .volumes[144].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[144].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[144].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[144].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[144].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[144].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[144].volume_pairs[0].remote_replication.state"
    assert result.volumes[144].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[144].volume_pairs[0].remote_replication.mode"
    assert result.volumes[144].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[144].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[144].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[144].volume_pairs[0].cluster_pair_id"
    assert result.volumes[144].volume_pairs[0].remote_volume_id == 495, "Died on +.volumes[144].volume_pairs[0].remote_volume_id"
    assert result.volumes[144].volume_pairs[0].remote_volume_name == """async-source-145""", "Died on +.volumes[144].volume_pairs[0].remote_volume_name"
    assert result.volumes[144].volume_pairs[0].remote_slice_id == 495, "Died on +.volumes[144].volume_pairs[0].remote_slice_id"
    assert result.volumes[144].account_id == 6, "Died on +.volumes[144].account_id"
    assert result.volumes[144].create_time == """2016-12-30T18:10:14Z""", "Died on +.volumes[144].create_time"
    assert result.volumes[144].virtual_volume_id is None, "Died on .volumes[144].virtual_volume_id"
    assert result.volumes[143].status == """active""", "Died on +.volumes[143].status"
    assert result.volumes[143].enable512e == False, "Died on +.volumes[143].enable512e"
    assert result.volumes[143].qos.burst_iops == 15000, "Died on +.volumes[143].qos.burst_iops"
    assert result.volumes[143].qos.burst_time == 60, "Died on +.volumes[143].qos.burst_time"
    assert result.volumes[143].qos.min_iops == 100, "Died on +.volumes[143].qos.min_iops"
    assert result.volumes[143].qos.max_iops == 15000, "Died on +.volumes[143].qos.max_iops"
    assert result.volumes[143].name == """async-target-144""", "Died on +.volumes[143].name"
    assert result.volumes[143].volume_access_groups[0] == 7, "Died on +.volumes[143].volume_access_groups[0]"
    assert result.volumes[143].scsi_naadevice_id == """6f47acc10000000034353335000003e2""", "Died on +.volumes[143].scsi_naadevice_id"
    assert result.volumes[143].total_size == 5000658944, "Died on +.volumes[143].total_size"
    assert result.volumes[143].block_size == 4096, "Died on +.volumes[143].block_size"
    assert result.volumes[143].scsi_euidevice_id == """34353335000003e2f47acc0100000000""", "Died on +.volumes[143].scsi_euidevice_id"
    assert result.volumes[143].volume_id == 994, "Died on +.volumes[143].volume_id"
    assert result.volumes[143].access == """replicationTarget""", "Died on +.volumes[143].access"
    assert result.volumes[143].iqn == """iqn.2010-01.com.solidfire:4535.async-target-144.994""", "Died on +.volumes[143].iqn"
    assert result.volumes[143].slice_count == 1, "Died on +.volumes[143].slice_count"
    assert type(result.volumes[143].attributes) is dict, "Died on .volumes[143].attributes"
    assert result.volumes[143].volume_pairs[0].volume_pair_uuid == UUID("e79a2291-9463-4093-9dce-427b7077a75f"), "Died on .volumes[143].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[143].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[143].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[143].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[143].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[143].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[143].volume_pairs[0].remote_replication.state"
    assert result.volumes[143].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[143].volume_pairs[0].remote_replication.mode"
    assert result.volumes[143].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[143].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[143].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[143].volume_pairs[0].cluster_pair_id"
    assert result.volumes[143].volume_pairs[0].remote_volume_id == 494, "Died on +.volumes[143].volume_pairs[0].remote_volume_id"
    assert result.volumes[143].volume_pairs[0].remote_volume_name == """async-source-144""", "Died on +.volumes[143].volume_pairs[0].remote_volume_name"
    assert result.volumes[143].volume_pairs[0].remote_slice_id == 494, "Died on +.volumes[143].volume_pairs[0].remote_slice_id"
    assert result.volumes[143].account_id == 6, "Died on +.volumes[143].account_id"
    assert result.volumes[143].create_time == """2016-12-30T18:10:14Z""", "Died on +.volumes[143].create_time"
    assert result.volumes[143].virtual_volume_id is None, "Died on .volumes[143].virtual_volume_id"
    assert result.volumes[142].status == """active""", "Died on +.volumes[142].status"
    assert result.volumes[142].enable512e == False, "Died on +.volumes[142].enable512e"
    assert result.volumes[142].qos.burst_iops == 15000, "Died on +.volumes[142].qos.burst_iops"
    assert result.volumes[142].qos.burst_time == 60, "Died on +.volumes[142].qos.burst_time"
    assert result.volumes[142].qos.min_iops == 100, "Died on +.volumes[142].qos.min_iops"
    assert result.volumes[142].qos.max_iops == 15000, "Died on +.volumes[142].qos.max_iops"
    assert result.volumes[142].name == """async-target-143""", "Died on +.volumes[142].name"
    assert result.volumes[142].volume_access_groups[0] == 7, "Died on +.volumes[142].volume_access_groups[0]"
    assert result.volumes[142].scsi_naadevice_id == """6f47acc10000000034353335000003e1""", "Died on +.volumes[142].scsi_naadevice_id"
    assert result.volumes[142].total_size == 5000658944, "Died on +.volumes[142].total_size"
    assert result.volumes[142].block_size == 4096, "Died on +.volumes[142].block_size"
    assert result.volumes[142].scsi_euidevice_id == """34353335000003e1f47acc0100000000""", "Died on +.volumes[142].scsi_euidevice_id"
    assert result.volumes[142].volume_id == 993, "Died on +.volumes[142].volume_id"
    assert result.volumes[142].access == """replicationTarget""", "Died on +.volumes[142].access"
    assert result.volumes[142].iqn == """iqn.2010-01.com.solidfire:4535.async-target-143.993""", "Died on +.volumes[142].iqn"
    assert result.volumes[142].slice_count == 1, "Died on +.volumes[142].slice_count"
    assert type(result.volumes[142].attributes) is dict, "Died on .volumes[142].attributes"
    assert result.volumes[142].volume_pairs[0].volume_pair_uuid == UUID("4e8fa940-6257-48a5-b556-350fbfba3e18"), "Died on .volumes[142].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[142].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[142].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[142].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[142].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[142].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[142].volume_pairs[0].remote_replication.state"
    assert result.volumes[142].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[142].volume_pairs[0].remote_replication.mode"
    assert result.volumes[142].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[142].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[142].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[142].volume_pairs[0].cluster_pair_id"
    assert result.volumes[142].volume_pairs[0].remote_volume_id == 493, "Died on +.volumes[142].volume_pairs[0].remote_volume_id"
    assert result.volumes[142].volume_pairs[0].remote_volume_name == """async-source-143""", "Died on +.volumes[142].volume_pairs[0].remote_volume_name"
    assert result.volumes[142].volume_pairs[0].remote_slice_id == 493, "Died on +.volumes[142].volume_pairs[0].remote_slice_id"
    assert result.volumes[142].account_id == 6, "Died on +.volumes[142].account_id"
    assert result.volumes[142].create_time == """2016-12-30T18:10:14Z""", "Died on +.volumes[142].create_time"
    assert result.volumes[142].virtual_volume_id is None, "Died on .volumes[142].virtual_volume_id"
    assert result.volumes[141].status == """active""", "Died on +.volumes[141].status"
    assert result.volumes[141].enable512e == False, "Died on +.volumes[141].enable512e"
    assert result.volumes[141].qos.burst_iops == 15000, "Died on +.volumes[141].qos.burst_iops"
    assert result.volumes[141].qos.burst_time == 60, "Died on +.volumes[141].qos.burst_time"
    assert result.volumes[141].qos.min_iops == 100, "Died on +.volumes[141].qos.min_iops"
    assert result.volumes[141].qos.max_iops == 15000, "Died on +.volumes[141].qos.max_iops"
    assert result.volumes[141].name == """async-target-142""", "Died on +.volumes[141].name"
    assert result.volumes[141].volume_access_groups[0] == 7, "Died on +.volumes[141].volume_access_groups[0]"
    assert result.volumes[141].scsi_naadevice_id == """6f47acc10000000034353335000003e0""", "Died on +.volumes[141].scsi_naadevice_id"
    assert result.volumes[141].total_size == 5000658944, "Died on +.volumes[141].total_size"
    assert result.volumes[141].block_size == 4096, "Died on +.volumes[141].block_size"
    assert result.volumes[141].scsi_euidevice_id == """34353335000003e0f47acc0100000000""", "Died on +.volumes[141].scsi_euidevice_id"
    assert result.volumes[141].volume_id == 992, "Died on +.volumes[141].volume_id"
    assert result.volumes[141].access == """replicationTarget""", "Died on +.volumes[141].access"
    assert result.volumes[141].iqn == """iqn.2010-01.com.solidfire:4535.async-target-142.992""", "Died on +.volumes[141].iqn"
    assert result.volumes[141].slice_count == 1, "Died on +.volumes[141].slice_count"
    assert type(result.volumes[141].attributes) is dict, "Died on .volumes[141].attributes"
    assert result.volumes[141].volume_pairs[0].volume_pair_uuid == UUID("7ccf758a-e22c-4eda-a9af-3a727daf4cc3"), "Died on .volumes[141].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[141].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[141].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[141].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[141].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[141].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[141].volume_pairs[0].remote_replication.state"
    assert result.volumes[141].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[141].volume_pairs[0].remote_replication.mode"
    assert result.volumes[141].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[141].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[141].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[141].volume_pairs[0].cluster_pair_id"
    assert result.volumes[141].volume_pairs[0].remote_volume_id == 492, "Died on +.volumes[141].volume_pairs[0].remote_volume_id"
    assert result.volumes[141].volume_pairs[0].remote_volume_name == """async-source-142""", "Died on +.volumes[141].volume_pairs[0].remote_volume_name"
    assert result.volumes[141].volume_pairs[0].remote_slice_id == 492, "Died on +.volumes[141].volume_pairs[0].remote_slice_id"
    assert result.volumes[141].account_id == 6, "Died on +.volumes[141].account_id"
    assert result.volumes[141].create_time == """2016-12-30T18:10:14Z""", "Died on +.volumes[141].create_time"
    assert result.volumes[141].virtual_volume_id is None, "Died on .volumes[141].virtual_volume_id"
    assert result.volumes[140].status == """active""", "Died on +.volumes[140].status"
    assert result.volumes[140].enable512e == False, "Died on +.volumes[140].enable512e"
    assert result.volumes[140].qos.burst_iops == 15000, "Died on +.volumes[140].qos.burst_iops"
    assert result.volumes[140].qos.burst_time == 60, "Died on +.volumes[140].qos.burst_time"
    assert result.volumes[140].qos.min_iops == 100, "Died on +.volumes[140].qos.min_iops"
    assert result.volumes[140].qos.max_iops == 15000, "Died on +.volumes[140].qos.max_iops"
    assert result.volumes[140].name == """async-target-141""", "Died on +.volumes[140].name"
    assert result.volumes[140].volume_access_groups[0] == 7, "Died on +.volumes[140].volume_access_groups[0]"
    assert result.volumes[140].scsi_naadevice_id == """6f47acc10000000034353335000003df""", "Died on +.volumes[140].scsi_naadevice_id"
    assert result.volumes[140].total_size == 5000658944, "Died on +.volumes[140].total_size"
    assert result.volumes[140].block_size == 4096, "Died on +.volumes[140].block_size"
    assert result.volumes[140].scsi_euidevice_id == """34353335000003dff47acc0100000000""", "Died on +.volumes[140].scsi_euidevice_id"
    assert result.volumes[140].volume_id == 991, "Died on +.volumes[140].volume_id"
    assert result.volumes[140].access == """replicationTarget""", "Died on +.volumes[140].access"
    assert result.volumes[140].iqn == """iqn.2010-01.com.solidfire:4535.async-target-141.991""", "Died on +.volumes[140].iqn"
    assert result.volumes[140].slice_count == 1, "Died on +.volumes[140].slice_count"
    assert type(result.volumes[140].attributes) is dict, "Died on .volumes[140].attributes"
    assert result.volumes[140].volume_pairs[0].volume_pair_uuid == UUID("68c1ef37-c32e-4598-a703-0ce036a4b9fc"), "Died on .volumes[140].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[140].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[140].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[140].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[140].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[140].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[140].volume_pairs[0].remote_replication.state"
    assert result.volumes[140].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[140].volume_pairs[0].remote_replication.mode"
    assert result.volumes[140].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[140].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[140].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[140].volume_pairs[0].cluster_pair_id"
    assert result.volumes[140].volume_pairs[0].remote_volume_id == 491, "Died on +.volumes[140].volume_pairs[0].remote_volume_id"
    assert result.volumes[140].volume_pairs[0].remote_volume_name == """async-source-141""", "Died on +.volumes[140].volume_pairs[0].remote_volume_name"
    assert result.volumes[140].volume_pairs[0].remote_slice_id == 491, "Died on +.volumes[140].volume_pairs[0].remote_slice_id"
    assert result.volumes[140].account_id == 6, "Died on +.volumes[140].account_id"
    assert result.volumes[140].create_time == """2016-12-30T18:10:14Z""", "Died on +.volumes[140].create_time"
    assert result.volumes[140].virtual_volume_id is None, "Died on .volumes[140].virtual_volume_id"
    assert result.volumes[139].status == """active""", "Died on +.volumes[139].status"
    assert result.volumes[139].enable512e == False, "Died on +.volumes[139].enable512e"
    assert result.volumes[139].qos.burst_iops == 15000, "Died on +.volumes[139].qos.burst_iops"
    assert result.volumes[139].qos.burst_time == 60, "Died on +.volumes[139].qos.burst_time"
    assert result.volumes[139].qos.min_iops == 100, "Died on +.volumes[139].qos.min_iops"
    assert result.volumes[139].qos.max_iops == 15000, "Died on +.volumes[139].qos.max_iops"
    assert result.volumes[139].name == """async-target-140""", "Died on +.volumes[139].name"
    assert result.volumes[139].volume_access_groups[0] == 7, "Died on +.volumes[139].volume_access_groups[0]"
    assert result.volumes[139].scsi_naadevice_id == """6f47acc10000000034353335000003de""", "Died on +.volumes[139].scsi_naadevice_id"
    assert result.volumes[139].total_size == 5000658944, "Died on +.volumes[139].total_size"
    assert result.volumes[139].block_size == 4096, "Died on +.volumes[139].block_size"
    assert result.volumes[139].scsi_euidevice_id == """34353335000003def47acc0100000000""", "Died on +.volumes[139].scsi_euidevice_id"
    assert result.volumes[139].volume_id == 990, "Died on +.volumes[139].volume_id"
    assert result.volumes[139].access == """replicationTarget""", "Died on +.volumes[139].access"
    assert result.volumes[139].iqn == """iqn.2010-01.com.solidfire:4535.async-target-140.990""", "Died on +.volumes[139].iqn"
    assert result.volumes[139].slice_count == 1, "Died on +.volumes[139].slice_count"
    assert type(result.volumes[139].attributes) is dict, "Died on .volumes[139].attributes"
    assert result.volumes[139].volume_pairs[0].volume_pair_uuid == UUID("6b74fd00-345d-4434-a3d1-2824c4fd1df5"), "Died on .volumes[139].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[139].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[139].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[139].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[139].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[139].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[139].volume_pairs[0].remote_replication.state"
    assert result.volumes[139].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[139].volume_pairs[0].remote_replication.mode"
    assert result.volumes[139].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[139].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[139].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[139].volume_pairs[0].cluster_pair_id"
    assert result.volumes[139].volume_pairs[0].remote_volume_id == 490, "Died on +.volumes[139].volume_pairs[0].remote_volume_id"
    assert result.volumes[139].volume_pairs[0].remote_volume_name == """async-source-140""", "Died on +.volumes[139].volume_pairs[0].remote_volume_name"
    assert result.volumes[139].volume_pairs[0].remote_slice_id == 490, "Died on +.volumes[139].volume_pairs[0].remote_slice_id"
    assert result.volumes[139].account_id == 6, "Died on +.volumes[139].account_id"
    assert result.volumes[139].create_time == """2016-12-30T18:10:14Z""", "Died on +.volumes[139].create_time"
    assert result.volumes[139].virtual_volume_id is None, "Died on .volumes[139].virtual_volume_id"
    assert result.volumes[138].status == """active""", "Died on +.volumes[138].status"
    assert result.volumes[138].enable512e == False, "Died on +.volumes[138].enable512e"
    assert result.volumes[138].qos.burst_iops == 15000, "Died on +.volumes[138].qos.burst_iops"
    assert result.volumes[138].qos.burst_time == 60, "Died on +.volumes[138].qos.burst_time"
    assert result.volumes[138].qos.min_iops == 100, "Died on +.volumes[138].qos.min_iops"
    assert result.volumes[138].qos.max_iops == 15000, "Died on +.volumes[138].qos.max_iops"
    assert result.volumes[138].name == """async-target-139""", "Died on +.volumes[138].name"
    assert result.volumes[138].volume_access_groups[0] == 7, "Died on +.volumes[138].volume_access_groups[0]"
    assert result.volumes[138].scsi_naadevice_id == """6f47acc10000000034353335000003dd""", "Died on +.volumes[138].scsi_naadevice_id"
    assert result.volumes[138].total_size == 5000658944, "Died on +.volumes[138].total_size"
    assert result.volumes[138].block_size == 4096, "Died on +.volumes[138].block_size"
    assert result.volumes[138].scsi_euidevice_id == """34353335000003ddf47acc0100000000""", "Died on +.volumes[138].scsi_euidevice_id"
    assert result.volumes[138].volume_id == 989, "Died on +.volumes[138].volume_id"
    assert result.volumes[138].access == """replicationTarget""", "Died on +.volumes[138].access"
    assert result.volumes[138].iqn == """iqn.2010-01.com.solidfire:4535.async-target-139.989""", "Died on +.volumes[138].iqn"
    assert result.volumes[138].slice_count == 1, "Died on +.volumes[138].slice_count"
    assert type(result.volumes[138].attributes) is dict, "Died on .volumes[138].attributes"
    assert result.volumes[138].volume_pairs[0].volume_pair_uuid == UUID("080c056c-2d9b-47ab-9dab-c4e998b2df4d"), "Died on .volumes[138].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[138].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[138].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[138].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[138].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[138].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[138].volume_pairs[0].remote_replication.state"
    assert result.volumes[138].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[138].volume_pairs[0].remote_replication.mode"
    assert result.volumes[138].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[138].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[138].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[138].volume_pairs[0].cluster_pair_id"
    assert result.volumes[138].volume_pairs[0].remote_volume_id == 489, "Died on +.volumes[138].volume_pairs[0].remote_volume_id"
    assert result.volumes[138].volume_pairs[0].remote_volume_name == """async-source-139""", "Died on +.volumes[138].volume_pairs[0].remote_volume_name"
    assert result.volumes[138].volume_pairs[0].remote_slice_id == 489, "Died on +.volumes[138].volume_pairs[0].remote_slice_id"
    assert result.volumes[138].account_id == 6, "Died on +.volumes[138].account_id"
    assert result.volumes[138].create_time == """2016-12-30T18:10:14Z""", "Died on +.volumes[138].create_time"
    assert result.volumes[138].virtual_volume_id is None, "Died on .volumes[138].virtual_volume_id"
    assert result.volumes[137].status == """active""", "Died on +.volumes[137].status"
    assert result.volumes[137].enable512e == False, "Died on +.volumes[137].enable512e"
    assert result.volumes[137].qos.burst_iops == 15000, "Died on +.volumes[137].qos.burst_iops"
    assert result.volumes[137].qos.burst_time == 60, "Died on +.volumes[137].qos.burst_time"
    assert result.volumes[137].qos.min_iops == 100, "Died on +.volumes[137].qos.min_iops"
    assert result.volumes[137].qos.max_iops == 15000, "Died on +.volumes[137].qos.max_iops"
    assert result.volumes[137].name == """async-target-138""", "Died on +.volumes[137].name"
    assert result.volumes[137].volume_access_groups[0] == 7, "Died on +.volumes[137].volume_access_groups[0]"
    assert result.volumes[137].scsi_naadevice_id == """6f47acc10000000034353335000003dc""", "Died on +.volumes[137].scsi_naadevice_id"
    assert result.volumes[137].total_size == 5000658944, "Died on +.volumes[137].total_size"
    assert result.volumes[137].block_size == 4096, "Died on +.volumes[137].block_size"
    assert result.volumes[137].scsi_euidevice_id == """34353335000003dcf47acc0100000000""", "Died on +.volumes[137].scsi_euidevice_id"
    assert result.volumes[137].volume_id == 988, "Died on +.volumes[137].volume_id"
    assert result.volumes[137].access == """replicationTarget""", "Died on +.volumes[137].access"
    assert result.volumes[137].iqn == """iqn.2010-01.com.solidfire:4535.async-target-138.988""", "Died on +.volumes[137].iqn"
    assert result.volumes[137].slice_count == 1, "Died on +.volumes[137].slice_count"
    assert type(result.volumes[137].attributes) is dict, "Died on .volumes[137].attributes"
    assert result.volumes[137].volume_pairs[0].volume_pair_uuid == UUID("5c0ae087-5d79-4b48-9783-75dbf1c680ef"), "Died on .volumes[137].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[137].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[137].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[137].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[137].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[137].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[137].volume_pairs[0].remote_replication.state"
    assert result.volumes[137].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[137].volume_pairs[0].remote_replication.mode"
    assert result.volumes[137].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[137].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[137].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[137].volume_pairs[0].cluster_pair_id"
    assert result.volumes[137].volume_pairs[0].remote_volume_id == 488, "Died on +.volumes[137].volume_pairs[0].remote_volume_id"
    assert result.volumes[137].volume_pairs[0].remote_volume_name == """async-source-138""", "Died on +.volumes[137].volume_pairs[0].remote_volume_name"
    assert result.volumes[137].volume_pairs[0].remote_slice_id == 488, "Died on +.volumes[137].volume_pairs[0].remote_slice_id"
    assert result.volumes[137].account_id == 6, "Died on +.volumes[137].account_id"
    assert result.volumes[137].create_time == """2016-12-30T18:10:14Z""", "Died on +.volumes[137].create_time"
    assert result.volumes[137].virtual_volume_id is None, "Died on .volumes[137].virtual_volume_id"
    assert result.volumes[136].status == """active""", "Died on +.volumes[136].status"
    assert result.volumes[136].enable512e == False, "Died on +.volumes[136].enable512e"
    assert result.volumes[136].qos.burst_iops == 15000, "Died on +.volumes[136].qos.burst_iops"
    assert result.volumes[136].qos.burst_time == 60, "Died on +.volumes[136].qos.burst_time"
    assert result.volumes[136].qos.min_iops == 100, "Died on +.volumes[136].qos.min_iops"
    assert result.volumes[136].qos.max_iops == 15000, "Died on +.volumes[136].qos.max_iops"
    assert result.volumes[136].name == """async-target-137""", "Died on +.volumes[136].name"
    assert result.volumes[136].volume_access_groups[0] == 7, "Died on +.volumes[136].volume_access_groups[0]"
    assert result.volumes[136].scsi_naadevice_id == """6f47acc10000000034353335000003db""", "Died on +.volumes[136].scsi_naadevice_id"
    assert result.volumes[136].total_size == 5000658944, "Died on +.volumes[136].total_size"
    assert result.volumes[136].block_size == 4096, "Died on +.volumes[136].block_size"
    assert result.volumes[136].scsi_euidevice_id == """34353335000003dbf47acc0100000000""", "Died on +.volumes[136].scsi_euidevice_id"
    assert result.volumes[136].volume_id == 987, "Died on +.volumes[136].volume_id"
    assert result.volumes[136].access == """replicationTarget""", "Died on +.volumes[136].access"
    assert result.volumes[136].iqn == """iqn.2010-01.com.solidfire:4535.async-target-137.987""", "Died on +.volumes[136].iqn"
    assert result.volumes[136].slice_count == 1, "Died on +.volumes[136].slice_count"
    assert type(result.volumes[136].attributes) is dict, "Died on .volumes[136].attributes"
    assert result.volumes[136].volume_pairs[0].volume_pair_uuid == UUID("6117b5c2-44da-4a92-bd76-82af77815768"), "Died on .volumes[136].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[136].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[136].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[136].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[136].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[136].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[136].volume_pairs[0].remote_replication.state"
    assert result.volumes[136].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[136].volume_pairs[0].remote_replication.mode"
    assert result.volumes[136].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[136].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[136].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[136].volume_pairs[0].cluster_pair_id"
    assert result.volumes[136].volume_pairs[0].remote_volume_id == 487, "Died on +.volumes[136].volume_pairs[0].remote_volume_id"
    assert result.volumes[136].volume_pairs[0].remote_volume_name == """async-source-137""", "Died on +.volumes[136].volume_pairs[0].remote_volume_name"
    assert result.volumes[136].volume_pairs[0].remote_slice_id == 487, "Died on +.volumes[136].volume_pairs[0].remote_slice_id"
    assert result.volumes[136].account_id == 6, "Died on +.volumes[136].account_id"
    assert result.volumes[136].create_time == """2016-12-30T18:10:14Z""", "Died on +.volumes[136].create_time"
    assert result.volumes[136].virtual_volume_id is None, "Died on .volumes[136].virtual_volume_id"
    assert result.volumes[135].status == """active""", "Died on +.volumes[135].status"
    assert result.volumes[135].enable512e == False, "Died on +.volumes[135].enable512e"
    assert result.volumes[135].qos.burst_iops == 15000, "Died on +.volumes[135].qos.burst_iops"
    assert result.volumes[135].qos.burst_time == 60, "Died on +.volumes[135].qos.burst_time"
    assert result.volumes[135].qos.min_iops == 100, "Died on +.volumes[135].qos.min_iops"
    assert result.volumes[135].qos.max_iops == 15000, "Died on +.volumes[135].qos.max_iops"
    assert result.volumes[135].name == """async-target-136""", "Died on +.volumes[135].name"
    assert result.volumes[135].volume_access_groups[0] == 7, "Died on +.volumes[135].volume_access_groups[0]"
    assert result.volumes[135].scsi_naadevice_id == """6f47acc10000000034353335000003da""", "Died on +.volumes[135].scsi_naadevice_id"
    assert result.volumes[135].total_size == 5000658944, "Died on +.volumes[135].total_size"
    assert result.volumes[135].block_size == 4096, "Died on +.volumes[135].block_size"
    assert result.volumes[135].scsi_euidevice_id == """34353335000003daf47acc0100000000""", "Died on +.volumes[135].scsi_euidevice_id"
    assert result.volumes[135].volume_id == 986, "Died on +.volumes[135].volume_id"
    assert result.volumes[135].access == """replicationTarget""", "Died on +.volumes[135].access"
    assert result.volumes[135].iqn == """iqn.2010-01.com.solidfire:4535.async-target-136.986""", "Died on +.volumes[135].iqn"
    assert result.volumes[135].slice_count == 1, "Died on +.volumes[135].slice_count"
    assert type(result.volumes[135].attributes) is dict, "Died on .volumes[135].attributes"
    assert result.volumes[135].volume_pairs[0].volume_pair_uuid == UUID("ffef312f-4d04-426f-9a3a-b6e6620a68ef"), "Died on .volumes[135].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[135].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[135].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[135].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[135].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[135].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[135].volume_pairs[0].remote_replication.state"
    assert result.volumes[135].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[135].volume_pairs[0].remote_replication.mode"
    assert result.volumes[135].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[135].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[135].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[135].volume_pairs[0].cluster_pair_id"
    assert result.volumes[135].volume_pairs[0].remote_volume_id == 486, "Died on +.volumes[135].volume_pairs[0].remote_volume_id"
    assert result.volumes[135].volume_pairs[0].remote_volume_name == """async-source-136""", "Died on +.volumes[135].volume_pairs[0].remote_volume_name"
    assert result.volumes[135].volume_pairs[0].remote_slice_id == 486, "Died on +.volumes[135].volume_pairs[0].remote_slice_id"
    assert result.volumes[135].account_id == 6, "Died on +.volumes[135].account_id"
    assert result.volumes[135].create_time == """2016-12-30T18:10:14Z""", "Died on +.volumes[135].create_time"
    assert result.volumes[135].virtual_volume_id is None, "Died on .volumes[135].virtual_volume_id"
    assert result.volumes[134].status == """active""", "Died on +.volumes[134].status"
    assert result.volumes[134].enable512e == False, "Died on +.volumes[134].enable512e"
    assert result.volumes[134].qos.burst_iops == 15000, "Died on +.volumes[134].qos.burst_iops"
    assert result.volumes[134].qos.burst_time == 60, "Died on +.volumes[134].qos.burst_time"
    assert result.volumes[134].qos.min_iops == 100, "Died on +.volumes[134].qos.min_iops"
    assert result.volumes[134].qos.max_iops == 15000, "Died on +.volumes[134].qos.max_iops"
    assert result.volumes[134].name == """async-target-135""", "Died on +.volumes[134].name"
    assert result.volumes[134].volume_access_groups[0] == 7, "Died on +.volumes[134].volume_access_groups[0]"
    assert result.volumes[134].scsi_naadevice_id == """6f47acc10000000034353335000003d9""", "Died on +.volumes[134].scsi_naadevice_id"
    assert result.volumes[134].total_size == 5000658944, "Died on +.volumes[134].total_size"
    assert result.volumes[134].block_size == 4096, "Died on +.volumes[134].block_size"
    assert result.volumes[134].scsi_euidevice_id == """34353335000003d9f47acc0100000000""", "Died on +.volumes[134].scsi_euidevice_id"
    assert result.volumes[134].volume_id == 985, "Died on +.volumes[134].volume_id"
    assert result.volumes[134].access == """replicationTarget""", "Died on +.volumes[134].access"
    assert result.volumes[134].iqn == """iqn.2010-01.com.solidfire:4535.async-target-135.985""", "Died on +.volumes[134].iqn"
    assert result.volumes[134].slice_count == 1, "Died on +.volumes[134].slice_count"
    assert type(result.volumes[134].attributes) is dict, "Died on .volumes[134].attributes"
    assert result.volumes[134].volume_pairs[0].volume_pair_uuid == UUID("e9f5b536-5978-4746-825f-58259a6db46b"), "Died on .volumes[134].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[134].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[134].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[134].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[134].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[134].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[134].volume_pairs[0].remote_replication.state"
    assert result.volumes[134].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[134].volume_pairs[0].remote_replication.mode"
    assert result.volumes[134].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[134].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[134].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[134].volume_pairs[0].cluster_pair_id"
    assert result.volumes[134].volume_pairs[0].remote_volume_id == 485, "Died on +.volumes[134].volume_pairs[0].remote_volume_id"
    assert result.volumes[134].volume_pairs[0].remote_volume_name == """async-source-135""", "Died on +.volumes[134].volume_pairs[0].remote_volume_name"
    assert result.volumes[134].volume_pairs[0].remote_slice_id == 485, "Died on +.volumes[134].volume_pairs[0].remote_slice_id"
    assert result.volumes[134].account_id == 6, "Died on +.volumes[134].account_id"
    assert result.volumes[134].create_time == """2016-12-30T18:10:14Z""", "Died on +.volumes[134].create_time"
    assert result.volumes[134].virtual_volume_id is None, "Died on .volumes[134].virtual_volume_id"
    assert result.volumes[133].status == """active""", "Died on +.volumes[133].status"
    assert result.volumes[133].enable512e == False, "Died on +.volumes[133].enable512e"
    assert result.volumes[133].qos.burst_iops == 15000, "Died on +.volumes[133].qos.burst_iops"
    assert result.volumes[133].qos.burst_time == 60, "Died on +.volumes[133].qos.burst_time"
    assert result.volumes[133].qos.min_iops == 100, "Died on +.volumes[133].qos.min_iops"
    assert result.volumes[133].qos.max_iops == 15000, "Died on +.volumes[133].qos.max_iops"
    assert result.volumes[133].name == """async-target-134""", "Died on +.volumes[133].name"
    assert result.volumes[133].volume_access_groups[0] == 7, "Died on +.volumes[133].volume_access_groups[0]"
    assert result.volumes[133].scsi_naadevice_id == """6f47acc10000000034353335000003d8""", "Died on +.volumes[133].scsi_naadevice_id"
    assert result.volumes[133].total_size == 5000658944, "Died on +.volumes[133].total_size"
    assert result.volumes[133].block_size == 4096, "Died on +.volumes[133].block_size"
    assert result.volumes[133].scsi_euidevice_id == """34353335000003d8f47acc0100000000""", "Died on +.volumes[133].scsi_euidevice_id"
    assert result.volumes[133].volume_id == 984, "Died on +.volumes[133].volume_id"
    assert result.volumes[133].access == """replicationTarget""", "Died on +.volumes[133].access"
    assert result.volumes[133].iqn == """iqn.2010-01.com.solidfire:4535.async-target-134.984""", "Died on +.volumes[133].iqn"
    assert result.volumes[133].slice_count == 1, "Died on +.volumes[133].slice_count"
    assert type(result.volumes[133].attributes) is dict, "Died on .volumes[133].attributes"
    assert result.volumes[133].volume_pairs[0].volume_pair_uuid == UUID("b62a15b0-4f77-4d02-bdad-6a84485ce2ea"), "Died on .volumes[133].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[133].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[133].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[133].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[133].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[133].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[133].volume_pairs[0].remote_replication.state"
    assert result.volumes[133].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[133].volume_pairs[0].remote_replication.mode"
    assert result.volumes[133].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[133].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[133].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[133].volume_pairs[0].cluster_pair_id"
    assert result.volumes[133].volume_pairs[0].remote_volume_id == 484, "Died on +.volumes[133].volume_pairs[0].remote_volume_id"
    assert result.volumes[133].volume_pairs[0].remote_volume_name == """async-source-134""", "Died on +.volumes[133].volume_pairs[0].remote_volume_name"
    assert result.volumes[133].volume_pairs[0].remote_slice_id == 484, "Died on +.volumes[133].volume_pairs[0].remote_slice_id"
    assert result.volumes[133].account_id == 6, "Died on +.volumes[133].account_id"
    assert result.volumes[133].create_time == """2016-12-30T18:10:14Z""", "Died on +.volumes[133].create_time"
    assert result.volumes[133].virtual_volume_id is None, "Died on .volumes[133].virtual_volume_id"
    assert result.volumes[132].status == """active""", "Died on +.volumes[132].status"
    assert result.volumes[132].enable512e == False, "Died on +.volumes[132].enable512e"
    assert result.volumes[132].qos.burst_iops == 15000, "Died on +.volumes[132].qos.burst_iops"
    assert result.volumes[132].qos.burst_time == 60, "Died on +.volumes[132].qos.burst_time"
    assert result.volumes[132].qos.min_iops == 100, "Died on +.volumes[132].qos.min_iops"
    assert result.volumes[132].qos.max_iops == 15000, "Died on +.volumes[132].qos.max_iops"
    assert result.volumes[132].name == """async-target-133""", "Died on +.volumes[132].name"
    assert result.volumes[132].volume_access_groups[0] == 7, "Died on +.volumes[132].volume_access_groups[0]"
    assert result.volumes[132].scsi_naadevice_id == """6f47acc10000000034353335000003d7""", "Died on +.volumes[132].scsi_naadevice_id"
    assert result.volumes[132].total_size == 5000658944, "Died on +.volumes[132].total_size"
    assert result.volumes[132].block_size == 4096, "Died on +.volumes[132].block_size"
    assert result.volumes[132].scsi_euidevice_id == """34353335000003d7f47acc0100000000""", "Died on +.volumes[132].scsi_euidevice_id"
    assert result.volumes[132].volume_id == 983, "Died on +.volumes[132].volume_id"
    assert result.volumes[132].access == """replicationTarget""", "Died on +.volumes[132].access"
    assert result.volumes[132].iqn == """iqn.2010-01.com.solidfire:4535.async-target-133.983""", "Died on +.volumes[132].iqn"
    assert result.volumes[132].slice_count == 1, "Died on +.volumes[132].slice_count"
    assert type(result.volumes[132].attributes) is dict, "Died on .volumes[132].attributes"
    assert result.volumes[132].volume_pairs[0].volume_pair_uuid == UUID("34d63c4d-4982-47f3-8419-71ce3503216e"), "Died on .volumes[132].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[132].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[132].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[132].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[132].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[132].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[132].volume_pairs[0].remote_replication.state"
    assert result.volumes[132].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[132].volume_pairs[0].remote_replication.mode"
    assert result.volumes[132].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[132].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[132].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[132].volume_pairs[0].cluster_pair_id"
    assert result.volumes[132].volume_pairs[0].remote_volume_id == 483, "Died on +.volumes[132].volume_pairs[0].remote_volume_id"
    assert result.volumes[132].volume_pairs[0].remote_volume_name == """async-source-133""", "Died on +.volumes[132].volume_pairs[0].remote_volume_name"
    assert result.volumes[132].volume_pairs[0].remote_slice_id == 483, "Died on +.volumes[132].volume_pairs[0].remote_slice_id"
    assert result.volumes[132].account_id == 6, "Died on +.volumes[132].account_id"
    assert result.volumes[132].create_time == """2016-12-30T18:10:14Z""", "Died on +.volumes[132].create_time"
    assert result.volumes[132].virtual_volume_id is None, "Died on .volumes[132].virtual_volume_id"
    assert result.volumes[131].status == """active""", "Died on +.volumes[131].status"
    assert result.volumes[131].enable512e == False, "Died on +.volumes[131].enable512e"
    assert result.volumes[131].qos.burst_iops == 15000, "Died on +.volumes[131].qos.burst_iops"
    assert result.volumes[131].qos.burst_time == 60, "Died on +.volumes[131].qos.burst_time"
    assert result.volumes[131].qos.min_iops == 100, "Died on +.volumes[131].qos.min_iops"
    assert result.volumes[131].qos.max_iops == 15000, "Died on +.volumes[131].qos.max_iops"
    assert result.volumes[131].name == """async-target-132""", "Died on +.volumes[131].name"
    assert result.volumes[131].volume_access_groups[0] == 7, "Died on +.volumes[131].volume_access_groups[0]"
    assert result.volumes[131].scsi_naadevice_id == """6f47acc10000000034353335000003d6""", "Died on +.volumes[131].scsi_naadevice_id"
    assert result.volumes[131].total_size == 5000658944, "Died on +.volumes[131].total_size"
    assert result.volumes[131].block_size == 4096, "Died on +.volumes[131].block_size"
    assert result.volumes[131].scsi_euidevice_id == """34353335000003d6f47acc0100000000""", "Died on +.volumes[131].scsi_euidevice_id"
    assert result.volumes[131].volume_id == 982, "Died on +.volumes[131].volume_id"
    assert result.volumes[131].access == """replicationTarget""", "Died on +.volumes[131].access"
    assert result.volumes[131].iqn == """iqn.2010-01.com.solidfire:4535.async-target-132.982""", "Died on +.volumes[131].iqn"
    assert result.volumes[131].slice_count == 1, "Died on +.volumes[131].slice_count"
    assert type(result.volumes[131].attributes) is dict, "Died on .volumes[131].attributes"
    assert result.volumes[131].volume_pairs[0].volume_pair_uuid == UUID("ce65b281-ca4a-4b95-9a28-4c01ee371c2e"), "Died on .volumes[131].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[131].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[131].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[131].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[131].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[131].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[131].volume_pairs[0].remote_replication.state"
    assert result.volumes[131].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[131].volume_pairs[0].remote_replication.mode"
    assert result.volumes[131].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[131].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[131].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[131].volume_pairs[0].cluster_pair_id"
    assert result.volumes[131].volume_pairs[0].remote_volume_id == 482, "Died on +.volumes[131].volume_pairs[0].remote_volume_id"
    assert result.volumes[131].volume_pairs[0].remote_volume_name == """async-source-132""", "Died on +.volumes[131].volume_pairs[0].remote_volume_name"
    assert result.volumes[131].volume_pairs[0].remote_slice_id == 482, "Died on +.volumes[131].volume_pairs[0].remote_slice_id"
    assert result.volumes[131].account_id == 6, "Died on +.volumes[131].account_id"
    assert result.volumes[131].create_time == """2016-12-30T18:10:14Z""", "Died on +.volumes[131].create_time"
    assert result.volumes[131].virtual_volume_id is None, "Died on .volumes[131].virtual_volume_id"
    assert result.volumes[130].status == """active""", "Died on +.volumes[130].status"
    assert result.volumes[130].enable512e == False, "Died on +.volumes[130].enable512e"
    assert result.volumes[130].qos.burst_iops == 15000, "Died on +.volumes[130].qos.burst_iops"
    assert result.volumes[130].qos.burst_time == 60, "Died on +.volumes[130].qos.burst_time"
    assert result.volumes[130].qos.min_iops == 100, "Died on +.volumes[130].qos.min_iops"
    assert result.volumes[130].qos.max_iops == 15000, "Died on +.volumes[130].qos.max_iops"
    assert result.volumes[130].name == """async-target-131""", "Died on +.volumes[130].name"
    assert result.volumes[130].volume_access_groups[0] == 7, "Died on +.volumes[130].volume_access_groups[0]"
    assert result.volumes[130].scsi_naadevice_id == """6f47acc10000000034353335000003d5""", "Died on +.volumes[130].scsi_naadevice_id"
    assert result.volumes[130].total_size == 5000658944, "Died on +.volumes[130].total_size"
    assert result.volumes[130].block_size == 4096, "Died on +.volumes[130].block_size"
    assert result.volumes[130].scsi_euidevice_id == """34353335000003d5f47acc0100000000""", "Died on +.volumes[130].scsi_euidevice_id"
    assert result.volumes[130].volume_id == 981, "Died on +.volumes[130].volume_id"
    assert result.volumes[130].access == """replicationTarget""", "Died on +.volumes[130].access"
    assert result.volumes[130].iqn == """iqn.2010-01.com.solidfire:4535.async-target-131.981""", "Died on +.volumes[130].iqn"
    assert result.volumes[130].slice_count == 1, "Died on +.volumes[130].slice_count"
    assert type(result.volumes[130].attributes) is dict, "Died on .volumes[130].attributes"
    assert result.volumes[130].volume_pairs[0].volume_pair_uuid == UUID("8ae819c5-abfe-424c-9f87-3bd7494fccc2"), "Died on .volumes[130].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[130].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[130].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[130].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[130].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[130].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[130].volume_pairs[0].remote_replication.state"
    assert result.volumes[130].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[130].volume_pairs[0].remote_replication.mode"
    assert result.volumes[130].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[130].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[130].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[130].volume_pairs[0].cluster_pair_id"
    assert result.volumes[130].volume_pairs[0].remote_volume_id == 481, "Died on +.volumes[130].volume_pairs[0].remote_volume_id"
    assert result.volumes[130].volume_pairs[0].remote_volume_name == """async-source-131""", "Died on +.volumes[130].volume_pairs[0].remote_volume_name"
    assert result.volumes[130].volume_pairs[0].remote_slice_id == 481, "Died on +.volumes[130].volume_pairs[0].remote_slice_id"
    assert result.volumes[130].account_id == 6, "Died on +.volumes[130].account_id"
    assert result.volumes[130].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[130].create_time"
    assert result.volumes[130].virtual_volume_id is None, "Died on .volumes[130].virtual_volume_id"
    assert result.volumes[129].status == """active""", "Died on +.volumes[129].status"
    assert result.volumes[129].enable512e == False, "Died on +.volumes[129].enable512e"
    assert result.volumes[129].qos.burst_iops == 15000, "Died on +.volumes[129].qos.burst_iops"
    assert result.volumes[129].qos.burst_time == 60, "Died on +.volumes[129].qos.burst_time"
    assert result.volumes[129].qos.min_iops == 100, "Died on +.volumes[129].qos.min_iops"
    assert result.volumes[129].qos.max_iops == 15000, "Died on +.volumes[129].qos.max_iops"
    assert result.volumes[129].name == """async-target-130""", "Died on +.volumes[129].name"
    assert result.volumes[129].volume_access_groups[0] == 7, "Died on +.volumes[129].volume_access_groups[0]"
    assert result.volumes[129].scsi_naadevice_id == """6f47acc10000000034353335000003d4""", "Died on +.volumes[129].scsi_naadevice_id"
    assert result.volumes[129].total_size == 5000658944, "Died on +.volumes[129].total_size"
    assert result.volumes[129].block_size == 4096, "Died on +.volumes[129].block_size"
    assert result.volumes[129].scsi_euidevice_id == """34353335000003d4f47acc0100000000""", "Died on +.volumes[129].scsi_euidevice_id"
    assert result.volumes[129].volume_id == 980, "Died on +.volumes[129].volume_id"
    assert result.volumes[129].access == """replicationTarget""", "Died on +.volumes[129].access"
    assert result.volumes[129].iqn == """iqn.2010-01.com.solidfire:4535.async-target-130.980""", "Died on +.volumes[129].iqn"
    assert result.volumes[129].slice_count == 1, "Died on +.volumes[129].slice_count"
    assert type(result.volumes[129].attributes) is dict, "Died on .volumes[129].attributes"
    assert result.volumes[129].volume_pairs[0].volume_pair_uuid == UUID("a2c0433c-a1e4-4313-9de6-3680a2a8a836"), "Died on .volumes[129].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[129].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[129].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[129].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[129].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[129].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[129].volume_pairs[0].remote_replication.state"
    assert result.volumes[129].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[129].volume_pairs[0].remote_replication.mode"
    assert result.volumes[129].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[129].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[129].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[129].volume_pairs[0].cluster_pair_id"
    assert result.volumes[129].volume_pairs[0].remote_volume_id == 480, "Died on +.volumes[129].volume_pairs[0].remote_volume_id"
    assert result.volumes[129].volume_pairs[0].remote_volume_name == """async-source-130""", "Died on +.volumes[129].volume_pairs[0].remote_volume_name"
    assert result.volumes[129].volume_pairs[0].remote_slice_id == 480, "Died on +.volumes[129].volume_pairs[0].remote_slice_id"
    assert result.volumes[129].account_id == 6, "Died on +.volumes[129].account_id"
    assert result.volumes[129].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[129].create_time"
    assert result.volumes[129].virtual_volume_id is None, "Died on .volumes[129].virtual_volume_id"
    assert result.volumes[128].status == """active""", "Died on +.volumes[128].status"
    assert result.volumes[128].enable512e == False, "Died on +.volumes[128].enable512e"
    assert result.volumes[128].qos.burst_iops == 15000, "Died on +.volumes[128].qos.burst_iops"
    assert result.volumes[128].qos.burst_time == 60, "Died on +.volumes[128].qos.burst_time"
    assert result.volumes[128].qos.min_iops == 100, "Died on +.volumes[128].qos.min_iops"
    assert result.volumes[128].qos.max_iops == 15000, "Died on +.volumes[128].qos.max_iops"
    assert result.volumes[128].name == """async-target-129""", "Died on +.volumes[128].name"
    assert result.volumes[128].volume_access_groups[0] == 7, "Died on +.volumes[128].volume_access_groups[0]"
    assert result.volumes[128].scsi_naadevice_id == """6f47acc10000000034353335000003d3""", "Died on +.volumes[128].scsi_naadevice_id"
    assert result.volumes[128].total_size == 5000658944, "Died on +.volumes[128].total_size"
    assert result.volumes[128].block_size == 4096, "Died on +.volumes[128].block_size"
    assert result.volumes[128].scsi_euidevice_id == """34353335000003d3f47acc0100000000""", "Died on +.volumes[128].scsi_euidevice_id"
    assert result.volumes[128].volume_id == 979, "Died on +.volumes[128].volume_id"
    assert result.volumes[128].access == """replicationTarget""", "Died on +.volumes[128].access"
    assert result.volumes[128].iqn == """iqn.2010-01.com.solidfire:4535.async-target-129.979""", "Died on +.volumes[128].iqn"
    assert result.volumes[128].slice_count == 1, "Died on +.volumes[128].slice_count"
    assert type(result.volumes[128].attributes) is dict, "Died on .volumes[128].attributes"
    assert result.volumes[128].volume_pairs[0].volume_pair_uuid == UUID("933086c9-232a-423a-b010-02e338a17d88"), "Died on .volumes[128].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[128].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[128].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[128].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[128].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[128].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[128].volume_pairs[0].remote_replication.state"
    assert result.volumes[128].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[128].volume_pairs[0].remote_replication.mode"
    assert result.volumes[128].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[128].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[128].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[128].volume_pairs[0].cluster_pair_id"
    assert result.volumes[128].volume_pairs[0].remote_volume_id == 479, "Died on +.volumes[128].volume_pairs[0].remote_volume_id"
    assert result.volumes[128].volume_pairs[0].remote_volume_name == """async-source-129""", "Died on +.volumes[128].volume_pairs[0].remote_volume_name"
    assert result.volumes[128].volume_pairs[0].remote_slice_id == 479, "Died on +.volumes[128].volume_pairs[0].remote_slice_id"
    assert result.volumes[128].account_id == 6, "Died on +.volumes[128].account_id"
    assert result.volumes[128].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[128].create_time"
    assert result.volumes[128].virtual_volume_id is None, "Died on .volumes[128].virtual_volume_id"
    assert result.volumes[127].status == """active""", "Died on +.volumes[127].status"
    assert result.volumes[127].enable512e == False, "Died on +.volumes[127].enable512e"
    assert result.volumes[127].qos.burst_iops == 15000, "Died on +.volumes[127].qos.burst_iops"
    assert result.volumes[127].qos.burst_time == 60, "Died on +.volumes[127].qos.burst_time"
    assert result.volumes[127].qos.min_iops == 100, "Died on +.volumes[127].qos.min_iops"
    assert result.volumes[127].qos.max_iops == 15000, "Died on +.volumes[127].qos.max_iops"
    assert result.volumes[127].name == """async-target-128""", "Died on +.volumes[127].name"
    assert result.volumes[127].volume_access_groups[0] == 7, "Died on +.volumes[127].volume_access_groups[0]"
    assert result.volumes[127].scsi_naadevice_id == """6f47acc10000000034353335000003d2""", "Died on +.volumes[127].scsi_naadevice_id"
    assert result.volumes[127].total_size == 5000658944, "Died on +.volumes[127].total_size"
    assert result.volumes[127].block_size == 4096, "Died on +.volumes[127].block_size"
    assert result.volumes[127].scsi_euidevice_id == """34353335000003d2f47acc0100000000""", "Died on +.volumes[127].scsi_euidevice_id"
    assert result.volumes[127].volume_id == 978, "Died on +.volumes[127].volume_id"
    assert result.volumes[127].access == """replicationTarget""", "Died on +.volumes[127].access"
    assert result.volumes[127].iqn == """iqn.2010-01.com.solidfire:4535.async-target-128.978""", "Died on +.volumes[127].iqn"
    assert result.volumes[127].slice_count == 1, "Died on +.volumes[127].slice_count"
    assert type(result.volumes[127].attributes) is dict, "Died on .volumes[127].attributes"
    assert result.volumes[127].volume_pairs[0].volume_pair_uuid == UUID("6debcece-423a-4f21-a9d4-e53f5adc341e"), "Died on .volumes[127].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[127].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[127].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[127].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[127].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[127].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[127].volume_pairs[0].remote_replication.state"
    assert result.volumes[127].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[127].volume_pairs[0].remote_replication.mode"
    assert result.volumes[127].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[127].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[127].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[127].volume_pairs[0].cluster_pair_id"
    assert result.volumes[127].volume_pairs[0].remote_volume_id == 478, "Died on +.volumes[127].volume_pairs[0].remote_volume_id"
    assert result.volumes[127].volume_pairs[0].remote_volume_name == """async-source-128""", "Died on +.volumes[127].volume_pairs[0].remote_volume_name"
    assert result.volumes[127].volume_pairs[0].remote_slice_id == 478, "Died on +.volumes[127].volume_pairs[0].remote_slice_id"
    assert result.volumes[127].account_id == 6, "Died on +.volumes[127].account_id"
    assert result.volumes[127].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[127].create_time"
    assert result.volumes[127].virtual_volume_id is None, "Died on .volumes[127].virtual_volume_id"
    assert result.volumes[126].status == """active""", "Died on +.volumes[126].status"
    assert result.volumes[126].enable512e == False, "Died on +.volumes[126].enable512e"
    assert result.volumes[126].qos.burst_iops == 15000, "Died on +.volumes[126].qos.burst_iops"
    assert result.volumes[126].qos.burst_time == 60, "Died on +.volumes[126].qos.burst_time"
    assert result.volumes[126].qos.min_iops == 100, "Died on +.volumes[126].qos.min_iops"
    assert result.volumes[126].qos.max_iops == 15000, "Died on +.volumes[126].qos.max_iops"
    assert result.volumes[126].name == """async-target-127""", "Died on +.volumes[126].name"
    assert result.volumes[126].volume_access_groups[0] == 7, "Died on +.volumes[126].volume_access_groups[0]"
    assert result.volumes[126].scsi_naadevice_id == """6f47acc10000000034353335000003d1""", "Died on +.volumes[126].scsi_naadevice_id"
    assert result.volumes[126].total_size == 5000658944, "Died on +.volumes[126].total_size"
    assert result.volumes[126].block_size == 4096, "Died on +.volumes[126].block_size"
    assert result.volumes[126].scsi_euidevice_id == """34353335000003d1f47acc0100000000""", "Died on +.volumes[126].scsi_euidevice_id"
    assert result.volumes[126].volume_id == 977, "Died on +.volumes[126].volume_id"
    assert result.volumes[126].access == """replicationTarget""", "Died on +.volumes[126].access"
    assert result.volumes[126].iqn == """iqn.2010-01.com.solidfire:4535.async-target-127.977""", "Died on +.volumes[126].iqn"
    assert result.volumes[126].slice_count == 1, "Died on +.volumes[126].slice_count"
    assert type(result.volumes[126].attributes) is dict, "Died on .volumes[126].attributes"
    assert result.volumes[126].volume_pairs[0].volume_pair_uuid == UUID("77dfcbf8-fd93-4029-ae7a-10e7164745f2"), "Died on .volumes[126].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[126].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[126].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[126].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[126].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[126].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[126].volume_pairs[0].remote_replication.state"
    assert result.volumes[126].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[126].volume_pairs[0].remote_replication.mode"
    assert result.volumes[126].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[126].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[126].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[126].volume_pairs[0].cluster_pair_id"
    assert result.volumes[126].volume_pairs[0].remote_volume_id == 477, "Died on +.volumes[126].volume_pairs[0].remote_volume_id"
    assert result.volumes[126].volume_pairs[0].remote_volume_name == """async-source-127""", "Died on +.volumes[126].volume_pairs[0].remote_volume_name"
    assert result.volumes[126].volume_pairs[0].remote_slice_id == 477, "Died on +.volumes[126].volume_pairs[0].remote_slice_id"
    assert result.volumes[126].account_id == 6, "Died on +.volumes[126].account_id"
    assert result.volumes[126].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[126].create_time"
    assert result.volumes[126].virtual_volume_id is None, "Died on .volumes[126].virtual_volume_id"
    assert result.volumes[125].status == """active""", "Died on +.volumes[125].status"
    assert result.volumes[125].enable512e == False, "Died on +.volumes[125].enable512e"
    assert result.volumes[125].qos.burst_iops == 15000, "Died on +.volumes[125].qos.burst_iops"
    assert result.volumes[125].qos.burst_time == 60, "Died on +.volumes[125].qos.burst_time"
    assert result.volumes[125].qos.min_iops == 100, "Died on +.volumes[125].qos.min_iops"
    assert result.volumes[125].qos.max_iops == 15000, "Died on +.volumes[125].qos.max_iops"
    assert result.volumes[125].name == """async-target-126""", "Died on +.volumes[125].name"
    assert result.volumes[125].volume_access_groups[0] == 7, "Died on +.volumes[125].volume_access_groups[0]"
    assert result.volumes[125].scsi_naadevice_id == """6f47acc10000000034353335000003d0""", "Died on +.volumes[125].scsi_naadevice_id"
    assert result.volumes[125].total_size == 5000658944, "Died on +.volumes[125].total_size"
    assert result.volumes[125].block_size == 4096, "Died on +.volumes[125].block_size"
    assert result.volumes[125].scsi_euidevice_id == """34353335000003d0f47acc0100000000""", "Died on +.volumes[125].scsi_euidevice_id"
    assert result.volumes[125].volume_id == 976, "Died on +.volumes[125].volume_id"
    assert result.volumes[125].access == """replicationTarget""", "Died on +.volumes[125].access"
    assert result.volumes[125].iqn == """iqn.2010-01.com.solidfire:4535.async-target-126.976""", "Died on +.volumes[125].iqn"
    assert result.volumes[125].slice_count == 1, "Died on +.volumes[125].slice_count"
    assert type(result.volumes[125].attributes) is dict, "Died on .volumes[125].attributes"
    assert result.volumes[125].volume_pairs[0].volume_pair_uuid == UUID("d415cadd-d670-4d3a-a8fb-505b78078b7e"), "Died on .volumes[125].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[125].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[125].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[125].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[125].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[125].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[125].volume_pairs[0].remote_replication.state"
    assert result.volumes[125].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[125].volume_pairs[0].remote_replication.mode"
    assert result.volumes[125].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[125].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[125].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[125].volume_pairs[0].cluster_pair_id"
    assert result.volumes[125].volume_pairs[0].remote_volume_id == 476, "Died on +.volumes[125].volume_pairs[0].remote_volume_id"
    assert result.volumes[125].volume_pairs[0].remote_volume_name == """async-source-126""", "Died on +.volumes[125].volume_pairs[0].remote_volume_name"
    assert result.volumes[125].volume_pairs[0].remote_slice_id == 476, "Died on +.volumes[125].volume_pairs[0].remote_slice_id"
    assert result.volumes[125].account_id == 6, "Died on +.volumes[125].account_id"
    assert result.volumes[125].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[125].create_time"
    assert result.volumes[125].virtual_volume_id is None, "Died on .volumes[125].virtual_volume_id"
    assert result.volumes[124].status == """active""", "Died on +.volumes[124].status"
    assert result.volumes[124].enable512e == False, "Died on +.volumes[124].enable512e"
    assert result.volumes[124].qos.burst_iops == 15000, "Died on +.volumes[124].qos.burst_iops"
    assert result.volumes[124].qos.burst_time == 60, "Died on +.volumes[124].qos.burst_time"
    assert result.volumes[124].qos.min_iops == 100, "Died on +.volumes[124].qos.min_iops"
    assert result.volumes[124].qos.max_iops == 15000, "Died on +.volumes[124].qos.max_iops"
    assert result.volumes[124].name == """async-target-125""", "Died on +.volumes[124].name"
    assert result.volumes[124].volume_access_groups[0] == 7, "Died on +.volumes[124].volume_access_groups[0]"
    assert result.volumes[124].scsi_naadevice_id == """6f47acc10000000034353335000003cf""", "Died on +.volumes[124].scsi_naadevice_id"
    assert result.volumes[124].total_size == 5000658944, "Died on +.volumes[124].total_size"
    assert result.volumes[124].block_size == 4096, "Died on +.volumes[124].block_size"
    assert result.volumes[124].scsi_euidevice_id == """34353335000003cff47acc0100000000""", "Died on +.volumes[124].scsi_euidevice_id"
    assert result.volumes[124].volume_id == 975, "Died on +.volumes[124].volume_id"
    assert result.volumes[124].access == """replicationTarget""", "Died on +.volumes[124].access"
    assert result.volumes[124].iqn == """iqn.2010-01.com.solidfire:4535.async-target-125.975""", "Died on +.volumes[124].iqn"
    assert result.volumes[124].slice_count == 1, "Died on +.volumes[124].slice_count"
    assert type(result.volumes[124].attributes) is dict, "Died on .volumes[124].attributes"
    assert result.volumes[124].volume_pairs[0].volume_pair_uuid == UUID("ea4ca8f7-bc25-4e02-ab6e-cf7b13c78221"), "Died on .volumes[124].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[124].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[124].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[124].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[124].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[124].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[124].volume_pairs[0].remote_replication.state"
    assert result.volumes[124].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[124].volume_pairs[0].remote_replication.mode"
    assert result.volumes[124].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[124].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[124].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[124].volume_pairs[0].cluster_pair_id"
    assert result.volumes[124].volume_pairs[0].remote_volume_id == 475, "Died on +.volumes[124].volume_pairs[0].remote_volume_id"
    assert result.volumes[124].volume_pairs[0].remote_volume_name == """async-source-125""", "Died on +.volumes[124].volume_pairs[0].remote_volume_name"
    assert result.volumes[124].volume_pairs[0].remote_slice_id == 475, "Died on +.volumes[124].volume_pairs[0].remote_slice_id"
    assert result.volumes[124].account_id == 6, "Died on +.volumes[124].account_id"
    assert result.volumes[124].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[124].create_time"
    assert result.volumes[124].virtual_volume_id is None, "Died on .volumes[124].virtual_volume_id"
    assert result.volumes[123].status == """active""", "Died on +.volumes[123].status"
    assert result.volumes[123].enable512e == False, "Died on +.volumes[123].enable512e"
    assert result.volumes[123].qos.burst_iops == 15000, "Died on +.volumes[123].qos.burst_iops"
    assert result.volumes[123].qos.burst_time == 60, "Died on +.volumes[123].qos.burst_time"
    assert result.volumes[123].qos.min_iops == 100, "Died on +.volumes[123].qos.min_iops"
    assert result.volumes[123].qos.max_iops == 15000, "Died on +.volumes[123].qos.max_iops"
    assert result.volumes[123].name == """async-target-124""", "Died on +.volumes[123].name"
    assert result.volumes[123].volume_access_groups[0] == 7, "Died on +.volumes[123].volume_access_groups[0]"
    assert result.volumes[123].scsi_naadevice_id == """6f47acc10000000034353335000003ce""", "Died on +.volumes[123].scsi_naadevice_id"
    assert result.volumes[123].total_size == 5000658944, "Died on +.volumes[123].total_size"
    assert result.volumes[123].block_size == 4096, "Died on +.volumes[123].block_size"
    assert result.volumes[123].scsi_euidevice_id == """34353335000003cef47acc0100000000""", "Died on +.volumes[123].scsi_euidevice_id"
    assert result.volumes[123].volume_id == 974, "Died on +.volumes[123].volume_id"
    assert result.volumes[123].access == """replicationTarget""", "Died on +.volumes[123].access"
    assert result.volumes[123].iqn == """iqn.2010-01.com.solidfire:4535.async-target-124.974""", "Died on +.volumes[123].iqn"
    assert result.volumes[123].slice_count == 1, "Died on +.volumes[123].slice_count"
    assert type(result.volumes[123].attributes) is dict, "Died on .volumes[123].attributes"
    assert result.volumes[123].volume_pairs[0].volume_pair_uuid == UUID("79c18d52-c2e2-4ee8-9d80-99f683320420"), "Died on .volumes[123].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[123].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[123].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[123].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[123].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[123].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[123].volume_pairs[0].remote_replication.state"
    assert result.volumes[123].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[123].volume_pairs[0].remote_replication.mode"
    assert result.volumes[123].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[123].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[123].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[123].volume_pairs[0].cluster_pair_id"
    assert result.volumes[123].volume_pairs[0].remote_volume_id == 474, "Died on +.volumes[123].volume_pairs[0].remote_volume_id"
    assert result.volumes[123].volume_pairs[0].remote_volume_name == """async-source-124""", "Died on +.volumes[123].volume_pairs[0].remote_volume_name"
    assert result.volumes[123].volume_pairs[0].remote_slice_id == 474, "Died on +.volumes[123].volume_pairs[0].remote_slice_id"
    assert result.volumes[123].account_id == 6, "Died on +.volumes[123].account_id"
    assert result.volumes[123].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[123].create_time"
    assert result.volumes[123].virtual_volume_id is None, "Died on .volumes[123].virtual_volume_id"
    assert result.volumes[122].status == """active""", "Died on +.volumes[122].status"
    assert result.volumes[122].enable512e == False, "Died on +.volumes[122].enable512e"
    assert result.volumes[122].qos.burst_iops == 15000, "Died on +.volumes[122].qos.burst_iops"
    assert result.volumes[122].qos.burst_time == 60, "Died on +.volumes[122].qos.burst_time"
    assert result.volumes[122].qos.min_iops == 100, "Died on +.volumes[122].qos.min_iops"
    assert result.volumes[122].qos.max_iops == 15000, "Died on +.volumes[122].qos.max_iops"
    assert result.volumes[122].name == """async-target-123""", "Died on +.volumes[122].name"
    assert result.volumes[122].volume_access_groups[0] == 7, "Died on +.volumes[122].volume_access_groups[0]"
    assert result.volumes[122].scsi_naadevice_id == """6f47acc10000000034353335000003cd""", "Died on +.volumes[122].scsi_naadevice_id"
    assert result.volumes[122].total_size == 5000658944, "Died on +.volumes[122].total_size"
    assert result.volumes[122].block_size == 4096, "Died on +.volumes[122].block_size"
    assert result.volumes[122].scsi_euidevice_id == """34353335000003cdf47acc0100000000""", "Died on +.volumes[122].scsi_euidevice_id"
    assert result.volumes[122].volume_id == 973, "Died on +.volumes[122].volume_id"
    assert result.volumes[122].access == """replicationTarget""", "Died on +.volumes[122].access"
    assert result.volumes[122].iqn == """iqn.2010-01.com.solidfire:4535.async-target-123.973""", "Died on +.volumes[122].iqn"
    assert result.volumes[122].slice_count == 1, "Died on +.volumes[122].slice_count"
    assert type(result.volumes[122].attributes) is dict, "Died on .volumes[122].attributes"
    assert result.volumes[122].volume_pairs[0].volume_pair_uuid == UUID("8ea655e2-5398-4752-801a-c9cfec8b29fa"), "Died on .volumes[122].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[122].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[122].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[122].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[122].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[122].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[122].volume_pairs[0].remote_replication.state"
    assert result.volumes[122].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[122].volume_pairs[0].remote_replication.mode"
    assert result.volumes[122].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[122].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[122].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[122].volume_pairs[0].cluster_pair_id"
    assert result.volumes[122].volume_pairs[0].remote_volume_id == 473, "Died on +.volumes[122].volume_pairs[0].remote_volume_id"
    assert result.volumes[122].volume_pairs[0].remote_volume_name == """async-source-123""", "Died on +.volumes[122].volume_pairs[0].remote_volume_name"
    assert result.volumes[122].volume_pairs[0].remote_slice_id == 473, "Died on +.volumes[122].volume_pairs[0].remote_slice_id"
    assert result.volumes[122].account_id == 6, "Died on +.volumes[122].account_id"
    assert result.volumes[122].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[122].create_time"
    assert result.volumes[122].virtual_volume_id is None, "Died on .volumes[122].virtual_volume_id"
    assert result.volumes[121].status == """active""", "Died on +.volumes[121].status"
    assert result.volumes[121].enable512e == False, "Died on +.volumes[121].enable512e"
    assert result.volumes[121].qos.burst_iops == 15000, "Died on +.volumes[121].qos.burst_iops"
    assert result.volumes[121].qos.burst_time == 60, "Died on +.volumes[121].qos.burst_time"
    assert result.volumes[121].qos.min_iops == 100, "Died on +.volumes[121].qos.min_iops"
    assert result.volumes[121].qos.max_iops == 15000, "Died on +.volumes[121].qos.max_iops"
    assert result.volumes[121].name == """async-target-122""", "Died on +.volumes[121].name"
    assert result.volumes[121].volume_access_groups[0] == 7, "Died on +.volumes[121].volume_access_groups[0]"
    assert result.volumes[121].scsi_naadevice_id == """6f47acc10000000034353335000003cc""", "Died on +.volumes[121].scsi_naadevice_id"
    assert result.volumes[121].total_size == 5000658944, "Died on +.volumes[121].total_size"
    assert result.volumes[121].block_size == 4096, "Died on +.volumes[121].block_size"
    assert result.volumes[121].scsi_euidevice_id == """34353335000003ccf47acc0100000000""", "Died on +.volumes[121].scsi_euidevice_id"
    assert result.volumes[121].volume_id == 972, "Died on +.volumes[121].volume_id"
    assert result.volumes[121].access == """replicationTarget""", "Died on +.volumes[121].access"
    assert result.volumes[121].iqn == """iqn.2010-01.com.solidfire:4535.async-target-122.972""", "Died on +.volumes[121].iqn"
    assert result.volumes[121].slice_count == 1, "Died on +.volumes[121].slice_count"
    assert type(result.volumes[121].attributes) is dict, "Died on .volumes[121].attributes"
    assert result.volumes[121].volume_pairs[0].volume_pair_uuid == UUID("041dbc24-a176-4dc6-95cf-0d090f0e58d4"), "Died on .volumes[121].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[121].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[121].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[121].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[121].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[121].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[121].volume_pairs[0].remote_replication.state"
    assert result.volumes[121].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[121].volume_pairs[0].remote_replication.mode"
    assert result.volumes[121].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[121].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[121].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[121].volume_pairs[0].cluster_pair_id"
    assert result.volumes[121].volume_pairs[0].remote_volume_id == 472, "Died on +.volumes[121].volume_pairs[0].remote_volume_id"
    assert result.volumes[121].volume_pairs[0].remote_volume_name == """async-source-122""", "Died on +.volumes[121].volume_pairs[0].remote_volume_name"
    assert result.volumes[121].volume_pairs[0].remote_slice_id == 472, "Died on +.volumes[121].volume_pairs[0].remote_slice_id"
    assert result.volumes[121].account_id == 6, "Died on +.volumes[121].account_id"
    assert result.volumes[121].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[121].create_time"
    assert result.volumes[121].virtual_volume_id is None, "Died on .volumes[121].virtual_volume_id"
    assert result.volumes[120].status == """active""", "Died on +.volumes[120].status"
    assert result.volumes[120].enable512e == False, "Died on +.volumes[120].enable512e"
    assert result.volumes[120].qos.burst_iops == 15000, "Died on +.volumes[120].qos.burst_iops"
    assert result.volumes[120].qos.burst_time == 60, "Died on +.volumes[120].qos.burst_time"
    assert result.volumes[120].qos.min_iops == 100, "Died on +.volumes[120].qos.min_iops"
    assert result.volumes[120].qos.max_iops == 15000, "Died on +.volumes[120].qos.max_iops"
    assert result.volumes[120].name == """async-target-121""", "Died on +.volumes[120].name"
    assert result.volumes[120].volume_access_groups[0] == 7, "Died on +.volumes[120].volume_access_groups[0]"
    assert result.volumes[120].scsi_naadevice_id == """6f47acc10000000034353335000003cb""", "Died on +.volumes[120].scsi_naadevice_id"
    assert result.volumes[120].total_size == 5000658944, "Died on +.volumes[120].total_size"
    assert result.volumes[120].block_size == 4096, "Died on +.volumes[120].block_size"
    assert result.volumes[120].scsi_euidevice_id == """34353335000003cbf47acc0100000000""", "Died on +.volumes[120].scsi_euidevice_id"
    assert result.volumes[120].volume_id == 971, "Died on +.volumes[120].volume_id"
    assert result.volumes[120].access == """replicationTarget""", "Died on +.volumes[120].access"
    assert result.volumes[120].iqn == """iqn.2010-01.com.solidfire:4535.async-target-121.971""", "Died on +.volumes[120].iqn"
    assert result.volumes[120].slice_count == 1, "Died on +.volumes[120].slice_count"
    assert type(result.volumes[120].attributes) is dict, "Died on .volumes[120].attributes"
    assert result.volumes[120].volume_pairs[0].volume_pair_uuid == UUID("cf577c4a-9bb1-4599-b5e6-6cb65e262fe9"), "Died on .volumes[120].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[120].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[120].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[120].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[120].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[120].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[120].volume_pairs[0].remote_replication.state"
    assert result.volumes[120].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[120].volume_pairs[0].remote_replication.mode"
    assert result.volumes[120].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[120].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[120].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[120].volume_pairs[0].cluster_pair_id"
    assert result.volumes[120].volume_pairs[0].remote_volume_id == 471, "Died on +.volumes[120].volume_pairs[0].remote_volume_id"
    assert result.volumes[120].volume_pairs[0].remote_volume_name == """async-source-121""", "Died on +.volumes[120].volume_pairs[0].remote_volume_name"
    assert result.volumes[120].volume_pairs[0].remote_slice_id == 471, "Died on +.volumes[120].volume_pairs[0].remote_slice_id"
    assert result.volumes[120].account_id == 6, "Died on +.volumes[120].account_id"
    assert result.volumes[120].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[120].create_time"
    assert result.volumes[120].virtual_volume_id is None, "Died on .volumes[120].virtual_volume_id"
    assert result.volumes[119].status == """active""", "Died on +.volumes[119].status"
    assert result.volumes[119].enable512e == False, "Died on +.volumes[119].enable512e"
    assert result.volumes[119].qos.burst_iops == 15000, "Died on +.volumes[119].qos.burst_iops"
    assert result.volumes[119].qos.burst_time == 60, "Died on +.volumes[119].qos.burst_time"
    assert result.volumes[119].qos.min_iops == 100, "Died on +.volumes[119].qos.min_iops"
    assert result.volumes[119].qos.max_iops == 15000, "Died on +.volumes[119].qos.max_iops"
    assert result.volumes[119].name == """async-target-120""", "Died on +.volumes[119].name"
    assert result.volumes[119].volume_access_groups[0] == 7, "Died on +.volumes[119].volume_access_groups[0]"
    assert result.volumes[119].scsi_naadevice_id == """6f47acc10000000034353335000003ca""", "Died on +.volumes[119].scsi_naadevice_id"
    assert result.volumes[119].total_size == 5000658944, "Died on +.volumes[119].total_size"
    assert result.volumes[119].block_size == 4096, "Died on +.volumes[119].block_size"
    assert result.volumes[119].scsi_euidevice_id == """34353335000003caf47acc0100000000""", "Died on +.volumes[119].scsi_euidevice_id"
    assert result.volumes[119].volume_id == 970, "Died on +.volumes[119].volume_id"
    assert result.volumes[119].access == """replicationTarget""", "Died on +.volumes[119].access"
    assert result.volumes[119].iqn == """iqn.2010-01.com.solidfire:4535.async-target-120.970""", "Died on +.volumes[119].iqn"
    assert result.volumes[119].slice_count == 1, "Died on +.volumes[119].slice_count"
    assert type(result.volumes[119].attributes) is dict, "Died on .volumes[119].attributes"
    assert result.volumes[119].volume_pairs[0].volume_pair_uuid == UUID("585fd0ce-261f-4c7f-957c-eb2bbebccdba"), "Died on .volumes[119].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[119].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[119].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[119].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[119].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[119].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[119].volume_pairs[0].remote_replication.state"
    assert result.volumes[119].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[119].volume_pairs[0].remote_replication.mode"
    assert result.volumes[119].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[119].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[119].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[119].volume_pairs[0].cluster_pair_id"
    assert result.volumes[119].volume_pairs[0].remote_volume_id == 470, "Died on +.volumes[119].volume_pairs[0].remote_volume_id"
    assert result.volumes[119].volume_pairs[0].remote_volume_name == """async-source-120""", "Died on +.volumes[119].volume_pairs[0].remote_volume_name"
    assert result.volumes[119].volume_pairs[0].remote_slice_id == 470, "Died on +.volumes[119].volume_pairs[0].remote_slice_id"
    assert result.volumes[119].account_id == 6, "Died on +.volumes[119].account_id"
    assert result.volumes[119].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[119].create_time"
    assert result.volumes[119].virtual_volume_id is None, "Died on .volumes[119].virtual_volume_id"
    assert result.volumes[118].status == """active""", "Died on +.volumes[118].status"
    assert result.volumes[118].enable512e == False, "Died on +.volumes[118].enable512e"
    assert result.volumes[118].qos.burst_iops == 15000, "Died on +.volumes[118].qos.burst_iops"
    assert result.volumes[118].qos.burst_time == 60, "Died on +.volumes[118].qos.burst_time"
    assert result.volumes[118].qos.min_iops == 100, "Died on +.volumes[118].qos.min_iops"
    assert result.volumes[118].qos.max_iops == 15000, "Died on +.volumes[118].qos.max_iops"
    assert result.volumes[118].name == """async-target-119""", "Died on +.volumes[118].name"
    assert result.volumes[118].volume_access_groups[0] == 7, "Died on +.volumes[118].volume_access_groups[0]"
    assert result.volumes[118].scsi_naadevice_id == """6f47acc10000000034353335000003c9""", "Died on +.volumes[118].scsi_naadevice_id"
    assert result.volumes[118].total_size == 5000658944, "Died on +.volumes[118].total_size"
    assert result.volumes[118].block_size == 4096, "Died on +.volumes[118].block_size"
    assert result.volumes[118].scsi_euidevice_id == """34353335000003c9f47acc0100000000""", "Died on +.volumes[118].scsi_euidevice_id"
    assert result.volumes[118].volume_id == 969, "Died on +.volumes[118].volume_id"
    assert result.volumes[118].access == """replicationTarget""", "Died on +.volumes[118].access"
    assert result.volumes[118].iqn == """iqn.2010-01.com.solidfire:4535.async-target-119.969""", "Died on +.volumes[118].iqn"
    assert result.volumes[118].slice_count == 1, "Died on +.volumes[118].slice_count"
    assert type(result.volumes[118].attributes) is dict, "Died on .volumes[118].attributes"
    assert result.volumes[118].volume_pairs[0].volume_pair_uuid == UUID("054f9393-f11d-46f6-a7f2-f95a8c34c01a"), "Died on .volumes[118].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[118].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[118].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[118].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[118].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[118].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[118].volume_pairs[0].remote_replication.state"
    assert result.volumes[118].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[118].volume_pairs[0].remote_replication.mode"
    assert result.volumes[118].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[118].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[118].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[118].volume_pairs[0].cluster_pair_id"
    assert result.volumes[118].volume_pairs[0].remote_volume_id == 469, "Died on +.volumes[118].volume_pairs[0].remote_volume_id"
    assert result.volumes[118].volume_pairs[0].remote_volume_name == """async-source-119""", "Died on +.volumes[118].volume_pairs[0].remote_volume_name"
    assert result.volumes[118].volume_pairs[0].remote_slice_id == 469, "Died on +.volumes[118].volume_pairs[0].remote_slice_id"
    assert result.volumes[118].account_id == 6, "Died on +.volumes[118].account_id"
    assert result.volumes[118].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[118].create_time"
    assert result.volumes[118].virtual_volume_id is None, "Died on .volumes[118].virtual_volume_id"
    assert result.volumes[117].status == """active""", "Died on +.volumes[117].status"
    assert result.volumes[117].enable512e == False, "Died on +.volumes[117].enable512e"
    assert result.volumes[117].qos.burst_iops == 15000, "Died on +.volumes[117].qos.burst_iops"
    assert result.volumes[117].qos.burst_time == 60, "Died on +.volumes[117].qos.burst_time"
    assert result.volumes[117].qos.min_iops == 100, "Died on +.volumes[117].qos.min_iops"
    assert result.volumes[117].qos.max_iops == 15000, "Died on +.volumes[117].qos.max_iops"
    assert result.volumes[117].name == """async-target-118""", "Died on +.volumes[117].name"
    assert result.volumes[117].volume_access_groups[0] == 7, "Died on +.volumes[117].volume_access_groups[0]"
    assert result.volumes[117].scsi_naadevice_id == """6f47acc10000000034353335000003c8""", "Died on +.volumes[117].scsi_naadevice_id"
    assert result.volumes[117].total_size == 5000658944, "Died on +.volumes[117].total_size"
    assert result.volumes[117].block_size == 4096, "Died on +.volumes[117].block_size"
    assert result.volumes[117].scsi_euidevice_id == """34353335000003c8f47acc0100000000""", "Died on +.volumes[117].scsi_euidevice_id"
    assert result.volumes[117].volume_id == 968, "Died on +.volumes[117].volume_id"
    assert result.volumes[117].access == """replicationTarget""", "Died on +.volumes[117].access"
    assert result.volumes[117].iqn == """iqn.2010-01.com.solidfire:4535.async-target-118.968""", "Died on +.volumes[117].iqn"
    assert result.volumes[117].slice_count == 1, "Died on +.volumes[117].slice_count"
    assert type(result.volumes[117].attributes) is dict, "Died on .volumes[117].attributes"
    assert result.volumes[117].volume_pairs[0].volume_pair_uuid == UUID("681a1041-8704-40d2-8249-aab80ea3389a"), "Died on .volumes[117].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[117].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[117].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[117].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[117].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[117].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[117].volume_pairs[0].remote_replication.state"
    assert result.volumes[117].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[117].volume_pairs[0].remote_replication.mode"
    assert result.volumes[117].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[117].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[117].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[117].volume_pairs[0].cluster_pair_id"
    assert result.volumes[117].volume_pairs[0].remote_volume_id == 468, "Died on +.volumes[117].volume_pairs[0].remote_volume_id"
    assert result.volumes[117].volume_pairs[0].remote_volume_name == """async-source-118""", "Died on +.volumes[117].volume_pairs[0].remote_volume_name"
    assert result.volumes[117].volume_pairs[0].remote_slice_id == 468, "Died on +.volumes[117].volume_pairs[0].remote_slice_id"
    assert result.volumes[117].account_id == 6, "Died on +.volumes[117].account_id"
    assert result.volumes[117].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[117].create_time"
    assert result.volumes[117].virtual_volume_id is None, "Died on .volumes[117].virtual_volume_id"
    assert result.volumes[116].status == """active""", "Died on +.volumes[116].status"
    assert result.volumes[116].enable512e == False, "Died on +.volumes[116].enable512e"
    assert result.volumes[116].qos.burst_iops == 15000, "Died on +.volumes[116].qos.burst_iops"
    assert result.volumes[116].qos.burst_time == 60, "Died on +.volumes[116].qos.burst_time"
    assert result.volumes[116].qos.min_iops == 100, "Died on +.volumes[116].qos.min_iops"
    assert result.volumes[116].qos.max_iops == 15000, "Died on +.volumes[116].qos.max_iops"
    assert result.volumes[116].name == """async-target-117""", "Died on +.volumes[116].name"
    assert result.volumes[116].volume_access_groups[0] == 7, "Died on +.volumes[116].volume_access_groups[0]"
    assert result.volumes[116].scsi_naadevice_id == """6f47acc10000000034353335000003c7""", "Died on +.volumes[116].scsi_naadevice_id"
    assert result.volumes[116].total_size == 5000658944, "Died on +.volumes[116].total_size"
    assert result.volumes[116].block_size == 4096, "Died on +.volumes[116].block_size"
    assert result.volumes[116].scsi_euidevice_id == """34353335000003c7f47acc0100000000""", "Died on +.volumes[116].scsi_euidevice_id"
    assert result.volumes[116].volume_id == 967, "Died on +.volumes[116].volume_id"
    assert result.volumes[116].access == """replicationTarget""", "Died on +.volumes[116].access"
    assert result.volumes[116].iqn == """iqn.2010-01.com.solidfire:4535.async-target-117.967""", "Died on +.volumes[116].iqn"
    assert result.volumes[116].slice_count == 1, "Died on +.volumes[116].slice_count"
    assert type(result.volumes[116].attributes) is dict, "Died on .volumes[116].attributes"
    assert result.volumes[116].volume_pairs[0].volume_pair_uuid == UUID("1eabc565-c031-4111-9a94-a38e1639321f"), "Died on .volumes[116].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[116].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[116].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[116].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[116].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[116].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[116].volume_pairs[0].remote_replication.state"
    assert result.volumes[116].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[116].volume_pairs[0].remote_replication.mode"
    assert result.volumes[116].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[116].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[116].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[116].volume_pairs[0].cluster_pair_id"
    assert result.volumes[116].volume_pairs[0].remote_volume_id == 467, "Died on +.volumes[116].volume_pairs[0].remote_volume_id"
    assert result.volumes[116].volume_pairs[0].remote_volume_name == """async-source-117""", "Died on +.volumes[116].volume_pairs[0].remote_volume_name"
    assert result.volumes[116].volume_pairs[0].remote_slice_id == 467, "Died on +.volumes[116].volume_pairs[0].remote_slice_id"
    assert result.volumes[116].account_id == 6, "Died on +.volumes[116].account_id"
    assert result.volumes[116].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[116].create_time"
    assert result.volumes[116].virtual_volume_id is None, "Died on .volumes[116].virtual_volume_id"
    assert result.volumes[115].status == """active""", "Died on +.volumes[115].status"
    assert result.volumes[115].enable512e == False, "Died on +.volumes[115].enable512e"
    assert result.volumes[115].qos.burst_iops == 15000, "Died on +.volumes[115].qos.burst_iops"
    assert result.volumes[115].qos.burst_time == 60, "Died on +.volumes[115].qos.burst_time"
    assert result.volumes[115].qos.min_iops == 100, "Died on +.volumes[115].qos.min_iops"
    assert result.volumes[115].qos.max_iops == 15000, "Died on +.volumes[115].qos.max_iops"
    assert result.volumes[115].name == """async-target-116""", "Died on +.volumes[115].name"
    assert result.volumes[115].volume_access_groups[0] == 7, "Died on +.volumes[115].volume_access_groups[0]"
    assert result.volumes[115].scsi_naadevice_id == """6f47acc10000000034353335000003c6""", "Died on +.volumes[115].scsi_naadevice_id"
    assert result.volumes[115].total_size == 5000658944, "Died on +.volumes[115].total_size"
    assert result.volumes[115].block_size == 4096, "Died on +.volumes[115].block_size"
    assert result.volumes[115].scsi_euidevice_id == """34353335000003c6f47acc0100000000""", "Died on +.volumes[115].scsi_euidevice_id"
    assert result.volumes[115].volume_id == 966, "Died on +.volumes[115].volume_id"
    assert result.volumes[115].access == """replicationTarget""", "Died on +.volumes[115].access"
    assert result.volumes[115].iqn == """iqn.2010-01.com.solidfire:4535.async-target-116.966""", "Died on +.volumes[115].iqn"
    assert result.volumes[115].slice_count == 1, "Died on +.volumes[115].slice_count"
    assert type(result.volumes[115].attributes) is dict, "Died on .volumes[115].attributes"
    assert result.volumes[115].volume_pairs[0].volume_pair_uuid == UUID("7bca3245-b7a2-453b-adc1-60a27a5d0bb0"), "Died on .volumes[115].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[115].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[115].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[115].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[115].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[115].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[115].volume_pairs[0].remote_replication.state"
    assert result.volumes[115].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[115].volume_pairs[0].remote_replication.mode"
    assert result.volumes[115].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[115].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[115].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[115].volume_pairs[0].cluster_pair_id"
    assert result.volumes[115].volume_pairs[0].remote_volume_id == 466, "Died on +.volumes[115].volume_pairs[0].remote_volume_id"
    assert result.volumes[115].volume_pairs[0].remote_volume_name == """async-source-116""", "Died on +.volumes[115].volume_pairs[0].remote_volume_name"
    assert result.volumes[115].volume_pairs[0].remote_slice_id == 466, "Died on +.volumes[115].volume_pairs[0].remote_slice_id"
    assert result.volumes[115].account_id == 6, "Died on +.volumes[115].account_id"
    assert result.volumes[115].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[115].create_time"
    assert result.volumes[115].virtual_volume_id is None, "Died on .volumes[115].virtual_volume_id"
    assert result.volumes[114].status == """active""", "Died on +.volumes[114].status"
    assert result.volumes[114].enable512e == False, "Died on +.volumes[114].enable512e"
    assert result.volumes[114].qos.burst_iops == 15000, "Died on +.volumes[114].qos.burst_iops"
    assert result.volumes[114].qos.burst_time == 60, "Died on +.volumes[114].qos.burst_time"
    assert result.volumes[114].qos.min_iops == 100, "Died on +.volumes[114].qos.min_iops"
    assert result.volumes[114].qos.max_iops == 15000, "Died on +.volumes[114].qos.max_iops"
    assert result.volumes[114].name == """async-target-115""", "Died on +.volumes[114].name"
    assert result.volumes[114].volume_access_groups[0] == 7, "Died on +.volumes[114].volume_access_groups[0]"
    assert result.volumes[114].scsi_naadevice_id == """6f47acc10000000034353335000003c5""", "Died on +.volumes[114].scsi_naadevice_id"
    assert result.volumes[114].total_size == 5000658944, "Died on +.volumes[114].total_size"
    assert result.volumes[114].block_size == 4096, "Died on +.volumes[114].block_size"
    assert result.volumes[114].scsi_euidevice_id == """34353335000003c5f47acc0100000000""", "Died on +.volumes[114].scsi_euidevice_id"
    assert result.volumes[114].volume_id == 965, "Died on +.volumes[114].volume_id"
    assert result.volumes[114].access == """replicationTarget""", "Died on +.volumes[114].access"
    assert result.volumes[114].iqn == """iqn.2010-01.com.solidfire:4535.async-target-115.965""", "Died on +.volumes[114].iqn"
    assert result.volumes[114].slice_count == 1, "Died on +.volumes[114].slice_count"
    assert type(result.volumes[114].attributes) is dict, "Died on .volumes[114].attributes"
    assert result.volumes[114].volume_pairs[0].volume_pair_uuid == UUID("ddae3a7d-4422-4708-bd84-a15d7f28e23a"), "Died on .volumes[114].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[114].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[114].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[114].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[114].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[114].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[114].volume_pairs[0].remote_replication.state"
    assert result.volumes[114].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[114].volume_pairs[0].remote_replication.mode"
    assert result.volumes[114].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[114].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[114].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[114].volume_pairs[0].cluster_pair_id"
    assert result.volumes[114].volume_pairs[0].remote_volume_id == 465, "Died on +.volumes[114].volume_pairs[0].remote_volume_id"
    assert result.volumes[114].volume_pairs[0].remote_volume_name == """async-source-115""", "Died on +.volumes[114].volume_pairs[0].remote_volume_name"
    assert result.volumes[114].volume_pairs[0].remote_slice_id == 465, "Died on +.volumes[114].volume_pairs[0].remote_slice_id"
    assert result.volumes[114].account_id == 6, "Died on +.volumes[114].account_id"
    assert result.volumes[114].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[114].create_time"
    assert result.volumes[114].virtual_volume_id is None, "Died on .volumes[114].virtual_volume_id"
    assert result.volumes[113].status == """active""", "Died on +.volumes[113].status"
    assert result.volumes[113].enable512e == False, "Died on +.volumes[113].enable512e"
    assert result.volumes[113].qos.burst_iops == 15000, "Died on +.volumes[113].qos.burst_iops"
    assert result.volumes[113].qos.burst_time == 60, "Died on +.volumes[113].qos.burst_time"
    assert result.volumes[113].qos.min_iops == 100, "Died on +.volumes[113].qos.min_iops"
    assert result.volumes[113].qos.max_iops == 15000, "Died on +.volumes[113].qos.max_iops"
    assert result.volumes[113].name == """async-target-114""", "Died on +.volumes[113].name"
    assert result.volumes[113].volume_access_groups[0] == 7, "Died on +.volumes[113].volume_access_groups[0]"
    assert result.volumes[113].scsi_naadevice_id == """6f47acc10000000034353335000003c4""", "Died on +.volumes[113].scsi_naadevice_id"
    assert result.volumes[113].total_size == 5000658944, "Died on +.volumes[113].total_size"
    assert result.volumes[113].block_size == 4096, "Died on +.volumes[113].block_size"
    assert result.volumes[113].scsi_euidevice_id == """34353335000003c4f47acc0100000000""", "Died on +.volumes[113].scsi_euidevice_id"
    assert result.volumes[113].volume_id == 964, "Died on +.volumes[113].volume_id"
    assert result.volumes[113].access == """replicationTarget""", "Died on +.volumes[113].access"
    assert result.volumes[113].iqn == """iqn.2010-01.com.solidfire:4535.async-target-114.964""", "Died on +.volumes[113].iqn"
    assert result.volumes[113].slice_count == 1, "Died on +.volumes[113].slice_count"
    assert type(result.volumes[113].attributes) is dict, "Died on .volumes[113].attributes"
    assert result.volumes[113].volume_pairs[0].volume_pair_uuid == UUID("6d024be1-4a42-4747-8e5f-cd9991817fad"), "Died on .volumes[113].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[113].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[113].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[113].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[113].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[113].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[113].volume_pairs[0].remote_replication.state"
    assert result.volumes[113].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[113].volume_pairs[0].remote_replication.mode"
    assert result.volumes[113].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[113].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[113].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[113].volume_pairs[0].cluster_pair_id"
    assert result.volumes[113].volume_pairs[0].remote_volume_id == 464, "Died on +.volumes[113].volume_pairs[0].remote_volume_id"
    assert result.volumes[113].volume_pairs[0].remote_volume_name == """async-source-114""", "Died on +.volumes[113].volume_pairs[0].remote_volume_name"
    assert result.volumes[113].volume_pairs[0].remote_slice_id == 464, "Died on +.volumes[113].volume_pairs[0].remote_slice_id"
    assert result.volumes[113].account_id == 6, "Died on +.volumes[113].account_id"
    assert result.volumes[113].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[113].create_time"
    assert result.volumes[113].virtual_volume_id is None, "Died on .volumes[113].virtual_volume_id"
    assert result.volumes[112].status == """active""", "Died on +.volumes[112].status"
    assert result.volumes[112].enable512e == False, "Died on +.volumes[112].enable512e"
    assert result.volumes[112].qos.burst_iops == 15000, "Died on +.volumes[112].qos.burst_iops"
    assert result.volumes[112].qos.burst_time == 60, "Died on +.volumes[112].qos.burst_time"
    assert result.volumes[112].qos.min_iops == 100, "Died on +.volumes[112].qos.min_iops"
    assert result.volumes[112].qos.max_iops == 15000, "Died on +.volumes[112].qos.max_iops"
    assert result.volumes[112].name == """async-target-113""", "Died on +.volumes[112].name"
    assert result.volumes[112].volume_access_groups[0] == 7, "Died on +.volumes[112].volume_access_groups[0]"
    assert result.volumes[112].scsi_naadevice_id == """6f47acc10000000034353335000003c3""", "Died on +.volumes[112].scsi_naadevice_id"
    assert result.volumes[112].total_size == 5000658944, "Died on +.volumes[112].total_size"
    assert result.volumes[112].block_size == 4096, "Died on +.volumes[112].block_size"
    assert result.volumes[112].scsi_euidevice_id == """34353335000003c3f47acc0100000000""", "Died on +.volumes[112].scsi_euidevice_id"
    assert result.volumes[112].volume_id == 963, "Died on +.volumes[112].volume_id"
    assert result.volumes[112].access == """replicationTarget""", "Died on +.volumes[112].access"
    assert result.volumes[112].iqn == """iqn.2010-01.com.solidfire:4535.async-target-113.963""", "Died on +.volumes[112].iqn"
    assert result.volumes[112].slice_count == 1, "Died on +.volumes[112].slice_count"
    assert type(result.volumes[112].attributes) is dict, "Died on .volumes[112].attributes"
    assert result.volumes[112].volume_pairs[0].volume_pair_uuid == UUID("5b7254b3-d330-47bc-bbb3-8aa3edceb260"), "Died on .volumes[112].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[112].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[112].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[112].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[112].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[112].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[112].volume_pairs[0].remote_replication.state"
    assert result.volumes[112].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[112].volume_pairs[0].remote_replication.mode"
    assert result.volumes[112].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[112].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[112].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[112].volume_pairs[0].cluster_pair_id"
    assert result.volumes[112].volume_pairs[0].remote_volume_id == 463, "Died on +.volumes[112].volume_pairs[0].remote_volume_id"
    assert result.volumes[112].volume_pairs[0].remote_volume_name == """async-source-113""", "Died on +.volumes[112].volume_pairs[0].remote_volume_name"
    assert result.volumes[112].volume_pairs[0].remote_slice_id == 463, "Died on +.volumes[112].volume_pairs[0].remote_slice_id"
    assert result.volumes[112].account_id == 6, "Died on +.volumes[112].account_id"
    assert result.volumes[112].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[112].create_time"
    assert result.volumes[112].virtual_volume_id is None, "Died on .volumes[112].virtual_volume_id"
    assert result.volumes[111].status == """active""", "Died on +.volumes[111].status"
    assert result.volumes[111].enable512e == False, "Died on +.volumes[111].enable512e"
    assert result.volumes[111].qos.burst_iops == 15000, "Died on +.volumes[111].qos.burst_iops"
    assert result.volumes[111].qos.burst_time == 60, "Died on +.volumes[111].qos.burst_time"
    assert result.volumes[111].qos.min_iops == 100, "Died on +.volumes[111].qos.min_iops"
    assert result.volumes[111].qos.max_iops == 15000, "Died on +.volumes[111].qos.max_iops"
    assert result.volumes[111].name == """async-target-112""", "Died on +.volumes[111].name"
    assert result.volumes[111].volume_access_groups[0] == 7, "Died on +.volumes[111].volume_access_groups[0]"
    assert result.volumes[111].scsi_naadevice_id == """6f47acc10000000034353335000003c2""", "Died on +.volumes[111].scsi_naadevice_id"
    assert result.volumes[111].total_size == 5000658944, "Died on +.volumes[111].total_size"
    assert result.volumes[111].block_size == 4096, "Died on +.volumes[111].block_size"
    assert result.volumes[111].scsi_euidevice_id == """34353335000003c2f47acc0100000000""", "Died on +.volumes[111].scsi_euidevice_id"
    assert result.volumes[111].volume_id == 962, "Died on +.volumes[111].volume_id"
    assert result.volumes[111].access == """replicationTarget""", "Died on +.volumes[111].access"
    assert result.volumes[111].iqn == """iqn.2010-01.com.solidfire:4535.async-target-112.962""", "Died on +.volumes[111].iqn"
    assert result.volumes[111].slice_count == 1, "Died on +.volumes[111].slice_count"
    assert type(result.volumes[111].attributes) is dict, "Died on .volumes[111].attributes"
    assert result.volumes[111].volume_pairs[0].volume_pair_uuid == UUID("8a7c9804-9c60-4138-80ed-ea2fcac85e97"), "Died on .volumes[111].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[111].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[111].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[111].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[111].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[111].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[111].volume_pairs[0].remote_replication.state"
    assert result.volumes[111].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[111].volume_pairs[0].remote_replication.mode"
    assert result.volumes[111].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[111].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[111].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[111].volume_pairs[0].cluster_pair_id"
    assert result.volumes[111].volume_pairs[0].remote_volume_id == 462, "Died on +.volumes[111].volume_pairs[0].remote_volume_id"
    assert result.volumes[111].volume_pairs[0].remote_volume_name == """async-source-112""", "Died on +.volumes[111].volume_pairs[0].remote_volume_name"
    assert result.volumes[111].volume_pairs[0].remote_slice_id == 462, "Died on +.volumes[111].volume_pairs[0].remote_slice_id"
    assert result.volumes[111].account_id == 6, "Died on +.volumes[111].account_id"
    assert result.volumes[111].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[111].create_time"
    assert result.volumes[111].virtual_volume_id is None, "Died on .volumes[111].virtual_volume_id"
    assert result.volumes[110].status == """active""", "Died on +.volumes[110].status"
    assert result.volumes[110].enable512e == False, "Died on +.volumes[110].enable512e"
    assert result.volumes[110].qos.burst_iops == 15000, "Died on +.volumes[110].qos.burst_iops"
    assert result.volumes[110].qos.burst_time == 60, "Died on +.volumes[110].qos.burst_time"
    assert result.volumes[110].qos.min_iops == 100, "Died on +.volumes[110].qos.min_iops"
    assert result.volumes[110].qos.max_iops == 15000, "Died on +.volumes[110].qos.max_iops"
    assert result.volumes[110].name == """async-target-111""", "Died on +.volumes[110].name"
    assert result.volumes[110].volume_access_groups[0] == 7, "Died on +.volumes[110].volume_access_groups[0]"
    assert result.volumes[110].scsi_naadevice_id == """6f47acc10000000034353335000003c1""", "Died on +.volumes[110].scsi_naadevice_id"
    assert result.volumes[110].total_size == 5000658944, "Died on +.volumes[110].total_size"
    assert result.volumes[110].block_size == 4096, "Died on +.volumes[110].block_size"
    assert result.volumes[110].scsi_euidevice_id == """34353335000003c1f47acc0100000000""", "Died on +.volumes[110].scsi_euidevice_id"
    assert result.volumes[110].volume_id == 961, "Died on +.volumes[110].volume_id"
    assert result.volumes[110].access == """replicationTarget""", "Died on +.volumes[110].access"
    assert result.volumes[110].iqn == """iqn.2010-01.com.solidfire:4535.async-target-111.961""", "Died on +.volumes[110].iqn"
    assert result.volumes[110].slice_count == 1, "Died on +.volumes[110].slice_count"
    assert type(result.volumes[110].attributes) is dict, "Died on .volumes[110].attributes"
    assert result.volumes[110].volume_pairs[0].volume_pair_uuid == UUID("93a09dd7-d794-4dba-925b-c3b3eb86bd88"), "Died on .volumes[110].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[110].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[110].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[110].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[110].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[110].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[110].volume_pairs[0].remote_replication.state"
    assert result.volumes[110].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[110].volume_pairs[0].remote_replication.mode"
    assert result.volumes[110].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[110].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[110].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[110].volume_pairs[0].cluster_pair_id"
    assert result.volumes[110].volume_pairs[0].remote_volume_id == 461, "Died on +.volumes[110].volume_pairs[0].remote_volume_id"
    assert result.volumes[110].volume_pairs[0].remote_volume_name == """async-source-111""", "Died on +.volumes[110].volume_pairs[0].remote_volume_name"
    assert result.volumes[110].volume_pairs[0].remote_slice_id == 461, "Died on +.volumes[110].volume_pairs[0].remote_slice_id"
    assert result.volumes[110].account_id == 6, "Died on +.volumes[110].account_id"
    assert result.volumes[110].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[110].create_time"
    assert result.volumes[110].virtual_volume_id is None, "Died on .volumes[110].virtual_volume_id"
    assert result.volumes[109].status == """active""", "Died on +.volumes[109].status"
    assert result.volumes[109].enable512e == False, "Died on +.volumes[109].enable512e"
    assert result.volumes[109].qos.burst_iops == 15000, "Died on +.volumes[109].qos.burst_iops"
    assert result.volumes[109].qos.burst_time == 60, "Died on +.volumes[109].qos.burst_time"
    assert result.volumes[109].qos.min_iops == 100, "Died on +.volumes[109].qos.min_iops"
    assert result.volumes[109].qos.max_iops == 15000, "Died on +.volumes[109].qos.max_iops"
    assert result.volumes[109].name == """async-target-110""", "Died on +.volumes[109].name"
    assert result.volumes[109].volume_access_groups[0] == 7, "Died on +.volumes[109].volume_access_groups[0]"
    assert result.volumes[109].scsi_naadevice_id == """6f47acc10000000034353335000003c0""", "Died on +.volumes[109].scsi_naadevice_id"
    assert result.volumes[109].total_size == 5000658944, "Died on +.volumes[109].total_size"
    assert result.volumes[109].block_size == 4096, "Died on +.volumes[109].block_size"
    assert result.volumes[109].scsi_euidevice_id == """34353335000003c0f47acc0100000000""", "Died on +.volumes[109].scsi_euidevice_id"
    assert result.volumes[109].volume_id == 960, "Died on +.volumes[109].volume_id"
    assert result.volumes[109].access == """replicationTarget""", "Died on +.volumes[109].access"
    assert result.volumes[109].iqn == """iqn.2010-01.com.solidfire:4535.async-target-110.960""", "Died on +.volumes[109].iqn"
    assert result.volumes[109].slice_count == 1, "Died on +.volumes[109].slice_count"
    assert type(result.volumes[109].attributes) is dict, "Died on .volumes[109].attributes"
    assert result.volumes[109].volume_pairs[0].volume_pair_uuid == UUID("80540080-6f03-41b4-ae2c-bbb0e907f875"), "Died on .volumes[109].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[109].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[109].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[109].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[109].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[109].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[109].volume_pairs[0].remote_replication.state"
    assert result.volumes[109].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[109].volume_pairs[0].remote_replication.mode"
    assert result.volumes[109].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[109].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[109].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[109].volume_pairs[0].cluster_pair_id"
    assert result.volumes[109].volume_pairs[0].remote_volume_id == 460, "Died on +.volumes[109].volume_pairs[0].remote_volume_id"
    assert result.volumes[109].volume_pairs[0].remote_volume_name == """async-source-110""", "Died on +.volumes[109].volume_pairs[0].remote_volume_name"
    assert result.volumes[109].volume_pairs[0].remote_slice_id == 460, "Died on +.volumes[109].volume_pairs[0].remote_slice_id"
    assert result.volumes[109].account_id == 6, "Died on +.volumes[109].account_id"
    assert result.volumes[109].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[109].create_time"
    assert result.volumes[109].virtual_volume_id is None, "Died on .volumes[109].virtual_volume_id"
    assert result.volumes[108].status == """active""", "Died on +.volumes[108].status"
    assert result.volumes[108].enable512e == False, "Died on +.volumes[108].enable512e"
    assert result.volumes[108].qos.burst_iops == 15000, "Died on +.volumes[108].qos.burst_iops"
    assert result.volumes[108].qos.burst_time == 60, "Died on +.volumes[108].qos.burst_time"
    assert result.volumes[108].qos.min_iops == 100, "Died on +.volumes[108].qos.min_iops"
    assert result.volumes[108].qos.max_iops == 15000, "Died on +.volumes[108].qos.max_iops"
    assert result.volumes[108].name == """async-target-109""", "Died on +.volumes[108].name"
    assert result.volumes[108].volume_access_groups[0] == 7, "Died on +.volumes[108].volume_access_groups[0]"
    assert result.volumes[108].scsi_naadevice_id == """6f47acc10000000034353335000003bf""", "Died on +.volumes[108].scsi_naadevice_id"
    assert result.volumes[108].total_size == 5000658944, "Died on +.volumes[108].total_size"
    assert result.volumes[108].block_size == 4096, "Died on +.volumes[108].block_size"
    assert result.volumes[108].scsi_euidevice_id == """34353335000003bff47acc0100000000""", "Died on +.volumes[108].scsi_euidevice_id"
    assert result.volumes[108].volume_id == 959, "Died on +.volumes[108].volume_id"
    assert result.volumes[108].access == """replicationTarget""", "Died on +.volumes[108].access"
    assert result.volumes[108].iqn == """iqn.2010-01.com.solidfire:4535.async-target-109.959""", "Died on +.volumes[108].iqn"
    assert result.volumes[108].slice_count == 1, "Died on +.volumes[108].slice_count"
    assert type(result.volumes[108].attributes) is dict, "Died on .volumes[108].attributes"
    assert result.volumes[108].volume_pairs[0].volume_pair_uuid == UUID("b1a77e86-e326-4d15-a606-ab81717ba2bd"), "Died on .volumes[108].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[108].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[108].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[108].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[108].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[108].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[108].volume_pairs[0].remote_replication.state"
    assert result.volumes[108].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[108].volume_pairs[0].remote_replication.mode"
    assert result.volumes[108].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[108].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[108].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[108].volume_pairs[0].cluster_pair_id"
    assert result.volumes[108].volume_pairs[0].remote_volume_id == 459, "Died on +.volumes[108].volume_pairs[0].remote_volume_id"
    assert result.volumes[108].volume_pairs[0].remote_volume_name == """async-source-109""", "Died on +.volumes[108].volume_pairs[0].remote_volume_name"
    assert result.volumes[108].volume_pairs[0].remote_slice_id == 459, "Died on +.volumes[108].volume_pairs[0].remote_slice_id"
    assert result.volumes[108].account_id == 6, "Died on +.volumes[108].account_id"
    assert result.volumes[108].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[108].create_time"
    assert result.volumes[108].virtual_volume_id is None, "Died on .volumes[108].virtual_volume_id"
    assert result.volumes[107].status == """active""", "Died on +.volumes[107].status"
    assert result.volumes[107].enable512e == False, "Died on +.volumes[107].enable512e"
    assert result.volumes[107].qos.burst_iops == 15000, "Died on +.volumes[107].qos.burst_iops"
    assert result.volumes[107].qos.burst_time == 60, "Died on +.volumes[107].qos.burst_time"
    assert result.volumes[107].qos.min_iops == 100, "Died on +.volumes[107].qos.min_iops"
    assert result.volumes[107].qos.max_iops == 15000, "Died on +.volumes[107].qos.max_iops"
    assert result.volumes[107].name == """async-target-108""", "Died on +.volumes[107].name"
    assert result.volumes[107].volume_access_groups[0] == 7, "Died on +.volumes[107].volume_access_groups[0]"
    assert result.volumes[107].scsi_naadevice_id == """6f47acc10000000034353335000003be""", "Died on +.volumes[107].scsi_naadevice_id"
    assert result.volumes[107].total_size == 5000658944, "Died on +.volumes[107].total_size"
    assert result.volumes[107].block_size == 4096, "Died on +.volumes[107].block_size"
    assert result.volumes[107].scsi_euidevice_id == """34353335000003bef47acc0100000000""", "Died on +.volumes[107].scsi_euidevice_id"
    assert result.volumes[107].volume_id == 958, "Died on +.volumes[107].volume_id"
    assert result.volumes[107].access == """replicationTarget""", "Died on +.volumes[107].access"
    assert result.volumes[107].iqn == """iqn.2010-01.com.solidfire:4535.async-target-108.958""", "Died on +.volumes[107].iqn"
    assert result.volumes[107].slice_count == 1, "Died on +.volumes[107].slice_count"
    assert type(result.volumes[107].attributes) is dict, "Died on .volumes[107].attributes"
    assert result.volumes[107].volume_pairs[0].volume_pair_uuid == UUID("d40deb28-ae79-453d-b612-aa046a0584f5"), "Died on .volumes[107].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[107].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[107].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[107].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[107].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[107].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[107].volume_pairs[0].remote_replication.state"
    assert result.volumes[107].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[107].volume_pairs[0].remote_replication.mode"
    assert result.volumes[107].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[107].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[107].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[107].volume_pairs[0].cluster_pair_id"
    assert result.volumes[107].volume_pairs[0].remote_volume_id == 458, "Died on +.volumes[107].volume_pairs[0].remote_volume_id"
    assert result.volumes[107].volume_pairs[0].remote_volume_name == """async-source-108""", "Died on +.volumes[107].volume_pairs[0].remote_volume_name"
    assert result.volumes[107].volume_pairs[0].remote_slice_id == 458, "Died on +.volumes[107].volume_pairs[0].remote_slice_id"
    assert result.volumes[107].account_id == 6, "Died on +.volumes[107].account_id"
    assert result.volumes[107].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[107].create_time"
    assert result.volumes[107].virtual_volume_id is None, "Died on .volumes[107].virtual_volume_id"
    assert result.volumes[106].status == """active""", "Died on +.volumes[106].status"
    assert result.volumes[106].enable512e == False, "Died on +.volumes[106].enable512e"
    assert result.volumes[106].qos.burst_iops == 15000, "Died on +.volumes[106].qos.burst_iops"
    assert result.volumes[106].qos.burst_time == 60, "Died on +.volumes[106].qos.burst_time"
    assert result.volumes[106].qos.min_iops == 100, "Died on +.volumes[106].qos.min_iops"
    assert result.volumes[106].qos.max_iops == 15000, "Died on +.volumes[106].qos.max_iops"
    assert result.volumes[106].name == """async-target-107""", "Died on +.volumes[106].name"
    assert result.volumes[106].volume_access_groups[0] == 7, "Died on +.volumes[106].volume_access_groups[0]"
    assert result.volumes[106].scsi_naadevice_id == """6f47acc10000000034353335000003bd""", "Died on +.volumes[106].scsi_naadevice_id"
    assert result.volumes[106].total_size == 5000658944, "Died on +.volumes[106].total_size"
    assert result.volumes[106].block_size == 4096, "Died on +.volumes[106].block_size"
    assert result.volumes[106].scsi_euidevice_id == """34353335000003bdf47acc0100000000""", "Died on +.volumes[106].scsi_euidevice_id"
    assert result.volumes[106].volume_id == 957, "Died on +.volumes[106].volume_id"
    assert result.volumes[106].access == """replicationTarget""", "Died on +.volumes[106].access"
    assert result.volumes[106].iqn == """iqn.2010-01.com.solidfire:4535.async-target-107.957""", "Died on +.volumes[106].iqn"
    assert result.volumes[106].slice_count == 1, "Died on +.volumes[106].slice_count"
    assert type(result.volumes[106].attributes) is dict, "Died on .volumes[106].attributes"
    assert result.volumes[106].volume_pairs[0].volume_pair_uuid == UUID("6e54ecd7-cd6f-495c-8918-05a317ec20d5"), "Died on .volumes[106].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[106].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[106].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[106].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[106].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[106].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[106].volume_pairs[0].remote_replication.state"
    assert result.volumes[106].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[106].volume_pairs[0].remote_replication.mode"
    assert result.volumes[106].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[106].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[106].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[106].volume_pairs[0].cluster_pair_id"
    assert result.volumes[106].volume_pairs[0].remote_volume_id == 457, "Died on +.volumes[106].volume_pairs[0].remote_volume_id"
    assert result.volumes[106].volume_pairs[0].remote_volume_name == """async-source-107""", "Died on +.volumes[106].volume_pairs[0].remote_volume_name"
    assert result.volumes[106].volume_pairs[0].remote_slice_id == 457, "Died on +.volumes[106].volume_pairs[0].remote_slice_id"
    assert result.volumes[106].account_id == 6, "Died on +.volumes[106].account_id"
    assert result.volumes[106].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[106].create_time"
    assert result.volumes[106].virtual_volume_id is None, "Died on .volumes[106].virtual_volume_id"
    assert result.volumes[105].status == """active""", "Died on +.volumes[105].status"
    assert result.volumes[105].enable512e == False, "Died on +.volumes[105].enable512e"
    assert result.volumes[105].qos.burst_iops == 15000, "Died on +.volumes[105].qos.burst_iops"
    assert result.volumes[105].qos.burst_time == 60, "Died on +.volumes[105].qos.burst_time"
    assert result.volumes[105].qos.min_iops == 100, "Died on +.volumes[105].qos.min_iops"
    assert result.volumes[105].qos.max_iops == 15000, "Died on +.volumes[105].qos.max_iops"
    assert result.volumes[105].name == """async-target-106""", "Died on +.volumes[105].name"
    assert result.volumes[105].volume_access_groups[0] == 7, "Died on +.volumes[105].volume_access_groups[0]"
    assert result.volumes[105].scsi_naadevice_id == """6f47acc10000000034353335000003bc""", "Died on +.volumes[105].scsi_naadevice_id"
    assert result.volumes[105].total_size == 5000658944, "Died on +.volumes[105].total_size"
    assert result.volumes[105].block_size == 4096, "Died on +.volumes[105].block_size"
    assert result.volumes[105].scsi_euidevice_id == """34353335000003bcf47acc0100000000""", "Died on +.volumes[105].scsi_euidevice_id"
    assert result.volumes[105].volume_id == 956, "Died on +.volumes[105].volume_id"
    assert result.volumes[105].access == """replicationTarget""", "Died on +.volumes[105].access"
    assert result.volumes[105].iqn == """iqn.2010-01.com.solidfire:4535.async-target-106.956""", "Died on +.volumes[105].iqn"
    assert result.volumes[105].slice_count == 1, "Died on +.volumes[105].slice_count"
    assert type(result.volumes[105].attributes) is dict, "Died on .volumes[105].attributes"
    assert result.volumes[105].volume_pairs[0].volume_pair_uuid == UUID("6a6639e4-4e8b-4b4c-ac44-6521fc591cae"), "Died on .volumes[105].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[105].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[105].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[105].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[105].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[105].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[105].volume_pairs[0].remote_replication.state"
    assert result.volumes[105].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[105].volume_pairs[0].remote_replication.mode"
    assert result.volumes[105].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[105].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[105].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[105].volume_pairs[0].cluster_pair_id"
    assert result.volumes[105].volume_pairs[0].remote_volume_id == 456, "Died on +.volumes[105].volume_pairs[0].remote_volume_id"
    assert result.volumes[105].volume_pairs[0].remote_volume_name == """async-source-106""", "Died on +.volumes[105].volume_pairs[0].remote_volume_name"
    assert result.volumes[105].volume_pairs[0].remote_slice_id == 456, "Died on +.volumes[105].volume_pairs[0].remote_slice_id"
    assert result.volumes[105].account_id == 6, "Died on +.volumes[105].account_id"
    assert result.volumes[105].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[105].create_time"
    assert result.volumes[105].virtual_volume_id is None, "Died on .volumes[105].virtual_volume_id"
    assert result.volumes[104].status == """active""", "Died on +.volumes[104].status"
    assert result.volumes[104].enable512e == False, "Died on +.volumes[104].enable512e"
    assert result.volumes[104].qos.burst_iops == 15000, "Died on +.volumes[104].qos.burst_iops"
    assert result.volumes[104].qos.burst_time == 60, "Died on +.volumes[104].qos.burst_time"
    assert result.volumes[104].qos.min_iops == 100, "Died on +.volumes[104].qos.min_iops"
    assert result.volumes[104].qos.max_iops == 15000, "Died on +.volumes[104].qos.max_iops"
    assert result.volumes[104].name == """async-target-105""", "Died on +.volumes[104].name"
    assert result.volumes[104].volume_access_groups[0] == 7, "Died on +.volumes[104].volume_access_groups[0]"
    assert result.volumes[104].scsi_naadevice_id == """6f47acc10000000034353335000003bb""", "Died on +.volumes[104].scsi_naadevice_id"
    assert result.volumes[104].total_size == 5000658944, "Died on +.volumes[104].total_size"
    assert result.volumes[104].block_size == 4096, "Died on +.volumes[104].block_size"
    assert result.volumes[104].scsi_euidevice_id == """34353335000003bbf47acc0100000000""", "Died on +.volumes[104].scsi_euidevice_id"
    assert result.volumes[104].volume_id == 955, "Died on +.volumes[104].volume_id"
    assert result.volumes[104].access == """replicationTarget""", "Died on +.volumes[104].access"
    assert result.volumes[104].iqn == """iqn.2010-01.com.solidfire:4535.async-target-105.955""", "Died on +.volumes[104].iqn"
    assert result.volumes[104].slice_count == 1, "Died on +.volumes[104].slice_count"
    assert type(result.volumes[104].attributes) is dict, "Died on .volumes[104].attributes"
    assert result.volumes[104].volume_pairs[0].volume_pair_uuid == UUID("891ab3b7-d8d9-44fa-8e69-52f4ace8a17f"), "Died on .volumes[104].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[104].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[104].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[104].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[104].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[104].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[104].volume_pairs[0].remote_replication.state"
    assert result.volumes[104].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[104].volume_pairs[0].remote_replication.mode"
    assert result.volumes[104].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[104].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[104].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[104].volume_pairs[0].cluster_pair_id"
    assert result.volumes[104].volume_pairs[0].remote_volume_id == 455, "Died on +.volumes[104].volume_pairs[0].remote_volume_id"
    assert result.volumes[104].volume_pairs[0].remote_volume_name == """async-source-105""", "Died on +.volumes[104].volume_pairs[0].remote_volume_name"
    assert result.volumes[104].volume_pairs[0].remote_slice_id == 455, "Died on +.volumes[104].volume_pairs[0].remote_slice_id"
    assert result.volumes[104].account_id == 6, "Died on +.volumes[104].account_id"
    assert result.volumes[104].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[104].create_time"
    assert result.volumes[104].virtual_volume_id is None, "Died on .volumes[104].virtual_volume_id"
    assert result.volumes[103].status == """active""", "Died on +.volumes[103].status"
    assert result.volumes[103].enable512e == False, "Died on +.volumes[103].enable512e"
    assert result.volumes[103].qos.burst_iops == 15000, "Died on +.volumes[103].qos.burst_iops"
    assert result.volumes[103].qos.burst_time == 60, "Died on +.volumes[103].qos.burst_time"
    assert result.volumes[103].qos.min_iops == 100, "Died on +.volumes[103].qos.min_iops"
    assert result.volumes[103].qos.max_iops == 15000, "Died on +.volumes[103].qos.max_iops"
    assert result.volumes[103].name == """async-target-104""", "Died on +.volumes[103].name"
    assert result.volumes[103].volume_access_groups[0] == 7, "Died on +.volumes[103].volume_access_groups[0]"
    assert result.volumes[103].scsi_naadevice_id == """6f47acc10000000034353335000003ba""", "Died on +.volumes[103].scsi_naadevice_id"
    assert result.volumes[103].total_size == 5000658944, "Died on +.volumes[103].total_size"
    assert result.volumes[103].block_size == 4096, "Died on +.volumes[103].block_size"
    assert result.volumes[103].scsi_euidevice_id == """34353335000003baf47acc0100000000""", "Died on +.volumes[103].scsi_euidevice_id"
    assert result.volumes[103].volume_id == 954, "Died on +.volumes[103].volume_id"
    assert result.volumes[103].access == """replicationTarget""", "Died on +.volumes[103].access"
    assert result.volumes[103].iqn == """iqn.2010-01.com.solidfire:4535.async-target-104.954""", "Died on +.volumes[103].iqn"
    assert result.volumes[103].slice_count == 1, "Died on +.volumes[103].slice_count"
    assert type(result.volumes[103].attributes) is dict, "Died on .volumes[103].attributes"
    assert result.volumes[103].volume_pairs[0].volume_pair_uuid == UUID("bf9e2a81-9409-407a-8daa-00f160831aa5"), "Died on .volumes[103].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[103].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[103].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[103].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[103].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[103].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[103].volume_pairs[0].remote_replication.state"
    assert result.volumes[103].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[103].volume_pairs[0].remote_replication.mode"
    assert result.volumes[103].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[103].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[103].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[103].volume_pairs[0].cluster_pair_id"
    assert result.volumes[103].volume_pairs[0].remote_volume_id == 454, "Died on +.volumes[103].volume_pairs[0].remote_volume_id"
    assert result.volumes[103].volume_pairs[0].remote_volume_name == """async-source-104""", "Died on +.volumes[103].volume_pairs[0].remote_volume_name"
    assert result.volumes[103].volume_pairs[0].remote_slice_id == 454, "Died on +.volumes[103].volume_pairs[0].remote_slice_id"
    assert result.volumes[103].account_id == 6, "Died on +.volumes[103].account_id"
    assert result.volumes[103].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[103].create_time"
    assert result.volumes[103].virtual_volume_id is None, "Died on .volumes[103].virtual_volume_id"
    assert result.volumes[102].status == """active""", "Died on +.volumes[102].status"
    assert result.volumes[102].enable512e == False, "Died on +.volumes[102].enable512e"
    assert result.volumes[102].qos.burst_iops == 15000, "Died on +.volumes[102].qos.burst_iops"
    assert result.volumes[102].qos.burst_time == 60, "Died on +.volumes[102].qos.burst_time"
    assert result.volumes[102].qos.min_iops == 100, "Died on +.volumes[102].qos.min_iops"
    assert result.volumes[102].qos.max_iops == 15000, "Died on +.volumes[102].qos.max_iops"
    assert result.volumes[102].name == """async-target-103""", "Died on +.volumes[102].name"
    assert result.volumes[102].volume_access_groups[0] == 7, "Died on +.volumes[102].volume_access_groups[0]"
    assert result.volumes[102].scsi_naadevice_id == """6f47acc10000000034353335000003b9""", "Died on +.volumes[102].scsi_naadevice_id"
    assert result.volumes[102].total_size == 5000658944, "Died on +.volumes[102].total_size"
    assert result.volumes[102].block_size == 4096, "Died on +.volumes[102].block_size"
    assert result.volumes[102].scsi_euidevice_id == """34353335000003b9f47acc0100000000""", "Died on +.volumes[102].scsi_euidevice_id"
    assert result.volumes[102].volume_id == 953, "Died on +.volumes[102].volume_id"
    assert result.volumes[102].access == """replicationTarget""", "Died on +.volumes[102].access"
    assert result.volumes[102].iqn == """iqn.2010-01.com.solidfire:4535.async-target-103.953""", "Died on +.volumes[102].iqn"
    assert result.volumes[102].slice_count == 1, "Died on +.volumes[102].slice_count"
    assert type(result.volumes[102].attributes) is dict, "Died on .volumes[102].attributes"
    assert result.volumes[102].volume_pairs[0].volume_pair_uuid == UUID("e8ec889b-8340-4208-8f91-34b922d5809f"), "Died on .volumes[102].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[102].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[102].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[102].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[102].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[102].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[102].volume_pairs[0].remote_replication.state"
    assert result.volumes[102].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[102].volume_pairs[0].remote_replication.mode"
    assert result.volumes[102].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[102].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[102].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[102].volume_pairs[0].cluster_pair_id"
    assert result.volumes[102].volume_pairs[0].remote_volume_id == 453, "Died on +.volumes[102].volume_pairs[0].remote_volume_id"
    assert result.volumes[102].volume_pairs[0].remote_volume_name == """async-source-103""", "Died on +.volumes[102].volume_pairs[0].remote_volume_name"
    assert result.volumes[102].volume_pairs[0].remote_slice_id == 453, "Died on +.volumes[102].volume_pairs[0].remote_slice_id"
    assert result.volumes[102].account_id == 6, "Died on +.volumes[102].account_id"
    assert result.volumes[102].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[102].create_time"
    assert result.volumes[102].virtual_volume_id is None, "Died on .volumes[102].virtual_volume_id"
    assert result.volumes[101].status == """active""", "Died on +.volumes[101].status"
    assert result.volumes[101].enable512e == False, "Died on +.volumes[101].enable512e"
    assert result.volumes[101].qos.burst_iops == 15000, "Died on +.volumes[101].qos.burst_iops"
    assert result.volumes[101].qos.burst_time == 60, "Died on +.volumes[101].qos.burst_time"
    assert result.volumes[101].qos.min_iops == 100, "Died on +.volumes[101].qos.min_iops"
    assert result.volumes[101].qos.max_iops == 15000, "Died on +.volumes[101].qos.max_iops"
    assert result.volumes[101].name == """async-target-102""", "Died on +.volumes[101].name"
    assert result.volumes[101].volume_access_groups[0] == 7, "Died on +.volumes[101].volume_access_groups[0]"
    assert result.volumes[101].scsi_naadevice_id == """6f47acc10000000034353335000003b8""", "Died on +.volumes[101].scsi_naadevice_id"
    assert result.volumes[101].total_size == 5000658944, "Died on +.volumes[101].total_size"
    assert result.volumes[101].block_size == 4096, "Died on +.volumes[101].block_size"
    assert result.volumes[101].scsi_euidevice_id == """34353335000003b8f47acc0100000000""", "Died on +.volumes[101].scsi_euidevice_id"
    assert result.volumes[101].volume_id == 952, "Died on +.volumes[101].volume_id"
    assert result.volumes[101].access == """replicationTarget""", "Died on +.volumes[101].access"
    assert result.volumes[101].iqn == """iqn.2010-01.com.solidfire:4535.async-target-102.952""", "Died on +.volumes[101].iqn"
    assert result.volumes[101].slice_count == 1, "Died on +.volumes[101].slice_count"
    assert type(result.volumes[101].attributes) is dict, "Died on .volumes[101].attributes"
    assert result.volumes[101].volume_pairs[0].volume_pair_uuid == UUID("4a95af7e-50c0-4db3-9e7c-e632478f4daa"), "Died on .volumes[101].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[101].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[101].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[101].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[101].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[101].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[101].volume_pairs[0].remote_replication.state"
    assert result.volumes[101].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[101].volume_pairs[0].remote_replication.mode"
    assert result.volumes[101].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[101].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[101].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[101].volume_pairs[0].cluster_pair_id"
    assert result.volumes[101].volume_pairs[0].remote_volume_id == 452, "Died on +.volumes[101].volume_pairs[0].remote_volume_id"
    assert result.volumes[101].volume_pairs[0].remote_volume_name == """async-source-102""", "Died on +.volumes[101].volume_pairs[0].remote_volume_name"
    assert result.volumes[101].volume_pairs[0].remote_slice_id == 452, "Died on +.volumes[101].volume_pairs[0].remote_slice_id"
    assert result.volumes[101].account_id == 6, "Died on +.volumes[101].account_id"
    assert result.volumes[101].create_time == """2016-12-30T18:10:13Z""", "Died on +.volumes[101].create_time"
    assert result.volumes[101].virtual_volume_id is None, "Died on .volumes[101].virtual_volume_id"
    assert result.volumes[100].status == """active""", "Died on +.volumes[100].status"
    assert result.volumes[100].enable512e == False, "Died on +.volumes[100].enable512e"
    assert result.volumes[100].qos.burst_iops == 15000, "Died on +.volumes[100].qos.burst_iops"
    assert result.volumes[100].qos.burst_time == 60, "Died on +.volumes[100].qos.burst_time"
    assert result.volumes[100].qos.min_iops == 100, "Died on +.volumes[100].qos.min_iops"
    assert result.volumes[100].qos.max_iops == 15000, "Died on +.volumes[100].qos.max_iops"
    assert result.volumes[100].name == """async-target-101""", "Died on +.volumes[100].name"
    assert result.volumes[100].volume_access_groups[0] == 7, "Died on +.volumes[100].volume_access_groups[0]"
    assert result.volumes[100].scsi_naadevice_id == """6f47acc10000000034353335000003b7""", "Died on +.volumes[100].scsi_naadevice_id"
    assert result.volumes[100].total_size == 5000658944, "Died on +.volumes[100].total_size"
    assert result.volumes[100].block_size == 4096, "Died on +.volumes[100].block_size"
    assert result.volumes[100].scsi_euidevice_id == """34353335000003b7f47acc0100000000""", "Died on +.volumes[100].scsi_euidevice_id"
    assert result.volumes[100].volume_id == 951, "Died on +.volumes[100].volume_id"
    assert result.volumes[100].access == """replicationTarget""", "Died on +.volumes[100].access"
    assert result.volumes[100].iqn == """iqn.2010-01.com.solidfire:4535.async-target-101.951""", "Died on +.volumes[100].iqn"
    assert result.volumes[100].slice_count == 1, "Died on +.volumes[100].slice_count"
    assert type(result.volumes[100].attributes) is dict, "Died on .volumes[100].attributes"
    assert result.volumes[100].volume_pairs[0].volume_pair_uuid == UUID("082f8060-bb88-40de-b93a-1cda4c1393f1"), "Died on .volumes[100].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[100].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[100].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[100].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[100].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[100].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[100].volume_pairs[0].remote_replication.state"
    assert result.volumes[100].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[100].volume_pairs[0].remote_replication.mode"
    assert result.volumes[100].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[100].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[100].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[100].volume_pairs[0].cluster_pair_id"
    assert result.volumes[100].volume_pairs[0].remote_volume_id == 451, "Died on +.volumes[100].volume_pairs[0].remote_volume_id"
    assert result.volumes[100].volume_pairs[0].remote_volume_name == """async-source-101""", "Died on +.volumes[100].volume_pairs[0].remote_volume_name"
    assert result.volumes[100].volume_pairs[0].remote_slice_id == 451, "Died on +.volumes[100].volume_pairs[0].remote_slice_id"
    assert result.volumes[100].account_id == 6, "Died on +.volumes[100].account_id"
    assert result.volumes[100].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[100].create_time"
    assert result.volumes[100].virtual_volume_id is None, "Died on .volumes[100].virtual_volume_id"
    assert result.volumes[99].status == """active""", "Died on +.volumes[99].status"
    assert result.volumes[99].enable512e == False, "Died on +.volumes[99].enable512e"
    assert result.volumes[99].qos.burst_iops == 15000, "Died on +.volumes[99].qos.burst_iops"
    assert result.volumes[99].qos.burst_time == 60, "Died on +.volumes[99].qos.burst_time"
    assert result.volumes[99].qos.min_iops == 100, "Died on +.volumes[99].qos.min_iops"
    assert result.volumes[99].qos.max_iops == 15000, "Died on +.volumes[99].qos.max_iops"
    assert result.volumes[99].name == """async-target-100""", "Died on +.volumes[99].name"
    assert result.volumes[99].volume_access_groups[0] == 7, "Died on +.volumes[99].volume_access_groups[0]"
    assert result.volumes[99].scsi_naadevice_id == """6f47acc10000000034353335000003b6""", "Died on +.volumes[99].scsi_naadevice_id"
    assert result.volumes[99].total_size == 5000658944, "Died on +.volumes[99].total_size"
    assert result.volumes[99].block_size == 4096, "Died on +.volumes[99].block_size"
    assert result.volumes[99].scsi_euidevice_id == """34353335000003b6f47acc0100000000""", "Died on +.volumes[99].scsi_euidevice_id"
    assert result.volumes[99].volume_id == 950, "Died on +.volumes[99].volume_id"
    assert result.volumes[99].access == """replicationTarget""", "Died on +.volumes[99].access"
    assert result.volumes[99].iqn == """iqn.2010-01.com.solidfire:4535.async-target-100.950""", "Died on +.volumes[99].iqn"
    assert result.volumes[99].slice_count == 1, "Died on +.volumes[99].slice_count"
    assert type(result.volumes[99].attributes) is dict, "Died on .volumes[99].attributes"
    assert result.volumes[99].volume_pairs[0].volume_pair_uuid == UUID("0398ef12-1514-48a4-a749-360f25b2fc63"), "Died on .volumes[99].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[99].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[99].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[99].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[99].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[99].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[99].volume_pairs[0].remote_replication.state"
    assert result.volumes[99].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[99].volume_pairs[0].remote_replication.mode"
    assert result.volumes[99].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[99].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[99].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[99].volume_pairs[0].cluster_pair_id"
    assert result.volumes[99].volume_pairs[0].remote_volume_id == 450, "Died on +.volumes[99].volume_pairs[0].remote_volume_id"
    assert result.volumes[99].volume_pairs[0].remote_volume_name == """async-source-100""", "Died on +.volumes[99].volume_pairs[0].remote_volume_name"
    assert result.volumes[99].volume_pairs[0].remote_slice_id == 450, "Died on +.volumes[99].volume_pairs[0].remote_slice_id"
    assert result.volumes[99].account_id == 6, "Died on +.volumes[99].account_id"
    assert result.volumes[99].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[99].create_time"
    assert result.volumes[99].virtual_volume_id is None, "Died on .volumes[99].virtual_volume_id"
    assert result.volumes[98].status == """active""", "Died on +.volumes[98].status"
    assert result.volumes[98].enable512e == False, "Died on +.volumes[98].enable512e"
    assert result.volumes[98].qos.burst_iops == 15000, "Died on +.volumes[98].qos.burst_iops"
    assert result.volumes[98].qos.burst_time == 60, "Died on +.volumes[98].qos.burst_time"
    assert result.volumes[98].qos.min_iops == 100, "Died on +.volumes[98].qos.min_iops"
    assert result.volumes[98].qos.max_iops == 15000, "Died on +.volumes[98].qos.max_iops"
    assert result.volumes[98].name == """async-target-99""", "Died on +.volumes[98].name"
    assert result.volumes[98].volume_access_groups[0] == 7, "Died on +.volumes[98].volume_access_groups[0]"
    assert result.volumes[98].scsi_naadevice_id == """6f47acc10000000034353335000003b5""", "Died on +.volumes[98].scsi_naadevice_id"
    assert result.volumes[98].total_size == 5000658944, "Died on +.volumes[98].total_size"
    assert result.volumes[98].block_size == 4096, "Died on +.volumes[98].block_size"
    assert result.volumes[98].scsi_euidevice_id == """34353335000003b5f47acc0100000000""", "Died on +.volumes[98].scsi_euidevice_id"
    assert result.volumes[98].volume_id == 949, "Died on +.volumes[98].volume_id"
    assert result.volumes[98].access == """replicationTarget""", "Died on +.volumes[98].access"
    assert result.volumes[98].iqn == """iqn.2010-01.com.solidfire:4535.async-target-99.949""", "Died on +.volumes[98].iqn"
    assert result.volumes[98].slice_count == 1, "Died on +.volumes[98].slice_count"
    assert type(result.volumes[98].attributes) is dict, "Died on .volumes[98].attributes"
    assert result.volumes[98].volume_pairs[0].volume_pair_uuid == UUID("4fafb35c-bc65-4731-86d7-17dab71deb61"), "Died on .volumes[98].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[98].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[98].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[98].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[98].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[98].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[98].volume_pairs[0].remote_replication.state"
    assert result.volumes[98].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[98].volume_pairs[0].remote_replication.mode"
    assert result.volumes[98].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[98].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[98].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[98].volume_pairs[0].cluster_pair_id"
    assert result.volumes[98].volume_pairs[0].remote_volume_id == 449, "Died on +.volumes[98].volume_pairs[0].remote_volume_id"
    assert result.volumes[98].volume_pairs[0].remote_volume_name == """async-source-99""", "Died on +.volumes[98].volume_pairs[0].remote_volume_name"
    assert result.volumes[98].volume_pairs[0].remote_slice_id == 449, "Died on +.volumes[98].volume_pairs[0].remote_slice_id"
    assert result.volumes[98].account_id == 6, "Died on +.volumes[98].account_id"
    assert result.volumes[98].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[98].create_time"
    assert result.volumes[98].virtual_volume_id is None, "Died on .volumes[98].virtual_volume_id"
    assert result.volumes[97].status == """active""", "Died on +.volumes[97].status"
    assert result.volumes[97].enable512e == False, "Died on +.volumes[97].enable512e"
    assert result.volumes[97].qos.burst_iops == 15000, "Died on +.volumes[97].qos.burst_iops"
    assert result.volumes[97].qos.burst_time == 60, "Died on +.volumes[97].qos.burst_time"
    assert result.volumes[97].qos.min_iops == 100, "Died on +.volumes[97].qos.min_iops"
    assert result.volumes[97].qos.max_iops == 15000, "Died on +.volumes[97].qos.max_iops"
    assert result.volumes[97].name == """async-target-98""", "Died on +.volumes[97].name"
    assert result.volumes[97].volume_access_groups[0] == 7, "Died on +.volumes[97].volume_access_groups[0]"
    assert result.volumes[97].scsi_naadevice_id == """6f47acc10000000034353335000003b4""", "Died on +.volumes[97].scsi_naadevice_id"
    assert result.volumes[97].total_size == 5000658944, "Died on +.volumes[97].total_size"
    assert result.volumes[97].block_size == 4096, "Died on +.volumes[97].block_size"
    assert result.volumes[97].scsi_euidevice_id == """34353335000003b4f47acc0100000000""", "Died on +.volumes[97].scsi_euidevice_id"
    assert result.volumes[97].volume_id == 948, "Died on +.volumes[97].volume_id"
    assert result.volumes[97].access == """replicationTarget""", "Died on +.volumes[97].access"
    assert result.volumes[97].iqn == """iqn.2010-01.com.solidfire:4535.async-target-98.948""", "Died on +.volumes[97].iqn"
    assert result.volumes[97].slice_count == 1, "Died on +.volumes[97].slice_count"
    assert type(result.volumes[97].attributes) is dict, "Died on .volumes[97].attributes"
    assert result.volumes[97].volume_pairs[0].volume_pair_uuid == UUID("da542591-20ec-4cd3-a15d-527b8d00c727"), "Died on .volumes[97].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[97].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[97].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[97].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[97].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[97].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[97].volume_pairs[0].remote_replication.state"
    assert result.volumes[97].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[97].volume_pairs[0].remote_replication.mode"
    assert result.volumes[97].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[97].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[97].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[97].volume_pairs[0].cluster_pair_id"
    assert result.volumes[97].volume_pairs[0].remote_volume_id == 448, "Died on +.volumes[97].volume_pairs[0].remote_volume_id"
    assert result.volumes[97].volume_pairs[0].remote_volume_name == """async-source-98""", "Died on +.volumes[97].volume_pairs[0].remote_volume_name"
    assert result.volumes[97].volume_pairs[0].remote_slice_id == 448, "Died on +.volumes[97].volume_pairs[0].remote_slice_id"
    assert result.volumes[97].account_id == 6, "Died on +.volumes[97].account_id"
    assert result.volumes[97].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[97].create_time"
    assert result.volumes[97].virtual_volume_id is None, "Died on .volumes[97].virtual_volume_id"
    assert result.volumes[96].status == """active""", "Died on +.volumes[96].status"
    assert result.volumes[96].enable512e == False, "Died on +.volumes[96].enable512e"
    assert result.volumes[96].qos.burst_iops == 15000, "Died on +.volumes[96].qos.burst_iops"
    assert result.volumes[96].qos.burst_time == 60, "Died on +.volumes[96].qos.burst_time"
    assert result.volumes[96].qos.min_iops == 100, "Died on +.volumes[96].qos.min_iops"
    assert result.volumes[96].qos.max_iops == 15000, "Died on +.volumes[96].qos.max_iops"
    assert result.volumes[96].name == """async-target-97""", "Died on +.volumes[96].name"
    assert result.volumes[96].volume_access_groups[0] == 7, "Died on +.volumes[96].volume_access_groups[0]"
    assert result.volumes[96].scsi_naadevice_id == """6f47acc10000000034353335000003b3""", "Died on +.volumes[96].scsi_naadevice_id"
    assert result.volumes[96].total_size == 5000658944, "Died on +.volumes[96].total_size"
    assert result.volumes[96].block_size == 4096, "Died on +.volumes[96].block_size"
    assert result.volumes[96].scsi_euidevice_id == """34353335000003b3f47acc0100000000""", "Died on +.volumes[96].scsi_euidevice_id"
    assert result.volumes[96].volume_id == 947, "Died on +.volumes[96].volume_id"
    assert result.volumes[96].access == """replicationTarget""", "Died on +.volumes[96].access"
    assert result.volumes[96].iqn == """iqn.2010-01.com.solidfire:4535.async-target-97.947""", "Died on +.volumes[96].iqn"
    assert result.volumes[96].slice_count == 1, "Died on +.volumes[96].slice_count"
    assert type(result.volumes[96].attributes) is dict, "Died on .volumes[96].attributes"
    assert result.volumes[96].volume_pairs[0].volume_pair_uuid == UUID("cfd216f2-594e-4e91-846e-3a2d444b647f"), "Died on .volumes[96].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[96].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[96].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[96].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[96].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[96].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[96].volume_pairs[0].remote_replication.state"
    assert result.volumes[96].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[96].volume_pairs[0].remote_replication.mode"
    assert result.volumes[96].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[96].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[96].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[96].volume_pairs[0].cluster_pair_id"
    assert result.volumes[96].volume_pairs[0].remote_volume_id == 447, "Died on +.volumes[96].volume_pairs[0].remote_volume_id"
    assert result.volumes[96].volume_pairs[0].remote_volume_name == """async-source-97""", "Died on +.volumes[96].volume_pairs[0].remote_volume_name"
    assert result.volumes[96].volume_pairs[0].remote_slice_id == 447, "Died on +.volumes[96].volume_pairs[0].remote_slice_id"
    assert result.volumes[96].account_id == 6, "Died on +.volumes[96].account_id"
    assert result.volumes[96].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[96].create_time"
    assert result.volumes[96].virtual_volume_id is None, "Died on .volumes[96].virtual_volume_id"
    assert result.volumes[95].status == """active""", "Died on +.volumes[95].status"
    assert result.volumes[95].enable512e == False, "Died on +.volumes[95].enable512e"
    assert result.volumes[95].qos.burst_iops == 15000, "Died on +.volumes[95].qos.burst_iops"
    assert result.volumes[95].qos.burst_time == 60, "Died on +.volumes[95].qos.burst_time"
    assert result.volumes[95].qos.min_iops == 100, "Died on +.volumes[95].qos.min_iops"
    assert result.volumes[95].qos.max_iops == 15000, "Died on +.volumes[95].qos.max_iops"
    assert result.volumes[95].name == """async-target-96""", "Died on +.volumes[95].name"
    assert result.volumes[95].volume_access_groups[0] == 7, "Died on +.volumes[95].volume_access_groups[0]"
    assert result.volumes[95].scsi_naadevice_id == """6f47acc10000000034353335000003b2""", "Died on +.volumes[95].scsi_naadevice_id"
    assert result.volumes[95].total_size == 5000658944, "Died on +.volumes[95].total_size"
    assert result.volumes[95].block_size == 4096, "Died on +.volumes[95].block_size"
    assert result.volumes[95].scsi_euidevice_id == """34353335000003b2f47acc0100000000""", "Died on +.volumes[95].scsi_euidevice_id"
    assert result.volumes[95].volume_id == 946, "Died on +.volumes[95].volume_id"
    assert result.volumes[95].access == """replicationTarget""", "Died on +.volumes[95].access"
    assert result.volumes[95].iqn == """iqn.2010-01.com.solidfire:4535.async-target-96.946""", "Died on +.volumes[95].iqn"
    assert result.volumes[95].slice_count == 1, "Died on +.volumes[95].slice_count"
    assert type(result.volumes[95].attributes) is dict, "Died on .volumes[95].attributes"
    assert result.volumes[95].volume_pairs[0].volume_pair_uuid == UUID("51cf1fb1-ea05-4782-aefb-fbb6ccc074f3"), "Died on .volumes[95].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[95].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[95].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[95].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[95].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[95].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[95].volume_pairs[0].remote_replication.state"
    assert result.volumes[95].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[95].volume_pairs[0].remote_replication.mode"
    assert result.volumes[95].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[95].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[95].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[95].volume_pairs[0].cluster_pair_id"
    assert result.volumes[95].volume_pairs[0].remote_volume_id == 446, "Died on +.volumes[95].volume_pairs[0].remote_volume_id"
    assert result.volumes[95].volume_pairs[0].remote_volume_name == """async-source-96""", "Died on +.volumes[95].volume_pairs[0].remote_volume_name"
    assert result.volumes[95].volume_pairs[0].remote_slice_id == 446, "Died on +.volumes[95].volume_pairs[0].remote_slice_id"
    assert result.volumes[95].account_id == 6, "Died on +.volumes[95].account_id"
    assert result.volumes[95].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[95].create_time"
    assert result.volumes[95].virtual_volume_id is None, "Died on .volumes[95].virtual_volume_id"
    assert result.volumes[94].status == """active""", "Died on +.volumes[94].status"
    assert result.volumes[94].enable512e == False, "Died on +.volumes[94].enable512e"
    assert result.volumes[94].qos.burst_iops == 15000, "Died on +.volumes[94].qos.burst_iops"
    assert result.volumes[94].qos.burst_time == 60, "Died on +.volumes[94].qos.burst_time"
    assert result.volumes[94].qos.min_iops == 100, "Died on +.volumes[94].qos.min_iops"
    assert result.volumes[94].qos.max_iops == 15000, "Died on +.volumes[94].qos.max_iops"
    assert result.volumes[94].name == """async-target-95""", "Died on +.volumes[94].name"
    assert result.volumes[94].volume_access_groups[0] == 7, "Died on +.volumes[94].volume_access_groups[0]"
    assert result.volumes[94].scsi_naadevice_id == """6f47acc10000000034353335000003b1""", "Died on +.volumes[94].scsi_naadevice_id"
    assert result.volumes[94].total_size == 5000658944, "Died on +.volumes[94].total_size"
    assert result.volumes[94].block_size == 4096, "Died on +.volumes[94].block_size"
    assert result.volumes[94].scsi_euidevice_id == """34353335000003b1f47acc0100000000""", "Died on +.volumes[94].scsi_euidevice_id"
    assert result.volumes[94].volume_id == 945, "Died on +.volumes[94].volume_id"
    assert result.volumes[94].access == """replicationTarget""", "Died on +.volumes[94].access"
    assert result.volumes[94].iqn == """iqn.2010-01.com.solidfire:4535.async-target-95.945""", "Died on +.volumes[94].iqn"
    assert result.volumes[94].slice_count == 1, "Died on +.volumes[94].slice_count"
    assert type(result.volumes[94].attributes) is dict, "Died on .volumes[94].attributes"
    assert result.volumes[94].volume_pairs[0].volume_pair_uuid == UUID("9a5bbab5-e7c3-4a1a-b03e-8989116cba90"), "Died on .volumes[94].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[94].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[94].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[94].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[94].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[94].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[94].volume_pairs[0].remote_replication.state"
    assert result.volumes[94].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[94].volume_pairs[0].remote_replication.mode"
    assert result.volumes[94].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[94].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[94].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[94].volume_pairs[0].cluster_pair_id"
    assert result.volumes[94].volume_pairs[0].remote_volume_id == 445, "Died on +.volumes[94].volume_pairs[0].remote_volume_id"
    assert result.volumes[94].volume_pairs[0].remote_volume_name == """async-source-95""", "Died on +.volumes[94].volume_pairs[0].remote_volume_name"
    assert result.volumes[94].volume_pairs[0].remote_slice_id == 445, "Died on +.volumes[94].volume_pairs[0].remote_slice_id"
    assert result.volumes[94].account_id == 6, "Died on +.volumes[94].account_id"
    assert result.volumes[94].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[94].create_time"
    assert result.volumes[94].virtual_volume_id is None, "Died on .volumes[94].virtual_volume_id"
    assert result.volumes[93].status == """active""", "Died on +.volumes[93].status"
    assert result.volumes[93].enable512e == False, "Died on +.volumes[93].enable512e"
    assert result.volumes[93].qos.burst_iops == 15000, "Died on +.volumes[93].qos.burst_iops"
    assert result.volumes[93].qos.burst_time == 60, "Died on +.volumes[93].qos.burst_time"
    assert result.volumes[93].qos.min_iops == 100, "Died on +.volumes[93].qos.min_iops"
    assert result.volumes[93].qos.max_iops == 15000, "Died on +.volumes[93].qos.max_iops"
    assert result.volumes[93].name == """async-target-94""", "Died on +.volumes[93].name"
    assert result.volumes[93].volume_access_groups[0] == 7, "Died on +.volumes[93].volume_access_groups[0]"
    assert result.volumes[93].scsi_naadevice_id == """6f47acc10000000034353335000003b0""", "Died on +.volumes[93].scsi_naadevice_id"
    assert result.volumes[93].total_size == 5000658944, "Died on +.volumes[93].total_size"
    assert result.volumes[93].block_size == 4096, "Died on +.volumes[93].block_size"
    assert result.volumes[93].scsi_euidevice_id == """34353335000003b0f47acc0100000000""", "Died on +.volumes[93].scsi_euidevice_id"
    assert result.volumes[93].volume_id == 944, "Died on +.volumes[93].volume_id"
    assert result.volumes[93].access == """replicationTarget""", "Died on +.volumes[93].access"
    assert result.volumes[93].iqn == """iqn.2010-01.com.solidfire:4535.async-target-94.944""", "Died on +.volumes[93].iqn"
    assert result.volumes[93].slice_count == 1, "Died on +.volumes[93].slice_count"
    assert type(result.volumes[93].attributes) is dict, "Died on .volumes[93].attributes"
    assert result.volumes[93].volume_pairs[0].volume_pair_uuid == UUID("35cf2d3d-922d-4fc4-a6da-8edeb81cc319"), "Died on .volumes[93].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[93].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[93].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[93].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[93].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[93].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[93].volume_pairs[0].remote_replication.state"
    assert result.volumes[93].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[93].volume_pairs[0].remote_replication.mode"
    assert result.volumes[93].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[93].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[93].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[93].volume_pairs[0].cluster_pair_id"
    assert result.volumes[93].volume_pairs[0].remote_volume_id == 444, "Died on +.volumes[93].volume_pairs[0].remote_volume_id"
    assert result.volumes[93].volume_pairs[0].remote_volume_name == """async-source-94""", "Died on +.volumes[93].volume_pairs[0].remote_volume_name"
    assert result.volumes[93].volume_pairs[0].remote_slice_id == 444, "Died on +.volumes[93].volume_pairs[0].remote_slice_id"
    assert result.volumes[93].account_id == 6, "Died on +.volumes[93].account_id"
    assert result.volumes[93].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[93].create_time"
    assert result.volumes[93].virtual_volume_id is None, "Died on .volumes[93].virtual_volume_id"
    assert result.volumes[92].status == """active""", "Died on +.volumes[92].status"
    assert result.volumes[92].enable512e == False, "Died on +.volumes[92].enable512e"
    assert result.volumes[92].qos.burst_iops == 15000, "Died on +.volumes[92].qos.burst_iops"
    assert result.volumes[92].qos.burst_time == 60, "Died on +.volumes[92].qos.burst_time"
    assert result.volumes[92].qos.min_iops == 100, "Died on +.volumes[92].qos.min_iops"
    assert result.volumes[92].qos.max_iops == 15000, "Died on +.volumes[92].qos.max_iops"
    assert result.volumes[92].name == """async-target-93""", "Died on +.volumes[92].name"
    assert result.volumes[92].volume_access_groups[0] == 7, "Died on +.volumes[92].volume_access_groups[0]"
    assert result.volumes[92].scsi_naadevice_id == """6f47acc10000000034353335000003af""", "Died on +.volumes[92].scsi_naadevice_id"
    assert result.volumes[92].total_size == 5000658944, "Died on +.volumes[92].total_size"
    assert result.volumes[92].block_size == 4096, "Died on +.volumes[92].block_size"
    assert result.volumes[92].scsi_euidevice_id == """34353335000003aff47acc0100000000""", "Died on +.volumes[92].scsi_euidevice_id"
    assert result.volumes[92].volume_id == 943, "Died on +.volumes[92].volume_id"
    assert result.volumes[92].access == """replicationTarget""", "Died on +.volumes[92].access"
    assert result.volumes[92].iqn == """iqn.2010-01.com.solidfire:4535.async-target-93.943""", "Died on +.volumes[92].iqn"
    assert result.volumes[92].slice_count == 1, "Died on +.volumes[92].slice_count"
    assert type(result.volumes[92].attributes) is dict, "Died on .volumes[92].attributes"
    assert result.volumes[92].volume_pairs[0].volume_pair_uuid == UUID("5438338d-4516-4772-b1a7-cbd528b4ae89"), "Died on .volumes[92].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[92].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[92].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[92].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[92].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[92].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[92].volume_pairs[0].remote_replication.state"
    assert result.volumes[92].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[92].volume_pairs[0].remote_replication.mode"
    assert result.volumes[92].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[92].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[92].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[92].volume_pairs[0].cluster_pair_id"
    assert result.volumes[92].volume_pairs[0].remote_volume_id == 443, "Died on +.volumes[92].volume_pairs[0].remote_volume_id"
    assert result.volumes[92].volume_pairs[0].remote_volume_name == """async-source-93""", "Died on +.volumes[92].volume_pairs[0].remote_volume_name"
    assert result.volumes[92].volume_pairs[0].remote_slice_id == 443, "Died on +.volumes[92].volume_pairs[0].remote_slice_id"
    assert result.volumes[92].account_id == 6, "Died on +.volumes[92].account_id"
    assert result.volumes[92].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[92].create_time"
    assert result.volumes[92].virtual_volume_id is None, "Died on .volumes[92].virtual_volume_id"
    assert result.volumes[91].status == """active""", "Died on +.volumes[91].status"
    assert result.volumes[91].enable512e == False, "Died on +.volumes[91].enable512e"
    assert result.volumes[91].qos.burst_iops == 15000, "Died on +.volumes[91].qos.burst_iops"
    assert result.volumes[91].qos.burst_time == 60, "Died on +.volumes[91].qos.burst_time"
    assert result.volumes[91].qos.min_iops == 100, "Died on +.volumes[91].qos.min_iops"
    assert result.volumes[91].qos.max_iops == 15000, "Died on +.volumes[91].qos.max_iops"
    assert result.volumes[91].name == """async-target-92""", "Died on +.volumes[91].name"
    assert result.volumes[91].volume_access_groups[0] == 7, "Died on +.volumes[91].volume_access_groups[0]"
    assert result.volumes[91].scsi_naadevice_id == """6f47acc10000000034353335000003ae""", "Died on +.volumes[91].scsi_naadevice_id"
    assert result.volumes[91].total_size == 5000658944, "Died on +.volumes[91].total_size"
    assert result.volumes[91].block_size == 4096, "Died on +.volumes[91].block_size"
    assert result.volumes[91].scsi_euidevice_id == """34353335000003aef47acc0100000000""", "Died on +.volumes[91].scsi_euidevice_id"
    assert result.volumes[91].volume_id == 942, "Died on +.volumes[91].volume_id"
    assert result.volumes[91].access == """replicationTarget""", "Died on +.volumes[91].access"
    assert result.volumes[91].iqn == """iqn.2010-01.com.solidfire:4535.async-target-92.942""", "Died on +.volumes[91].iqn"
    assert result.volumes[91].slice_count == 1, "Died on +.volumes[91].slice_count"
    assert type(result.volumes[91].attributes) is dict, "Died on .volumes[91].attributes"
    assert result.volumes[91].volume_pairs[0].volume_pair_uuid == UUID("303dee71-ddd8-4338-b573-22e001a0496d"), "Died on .volumes[91].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[91].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[91].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[91].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[91].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[91].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[91].volume_pairs[0].remote_replication.state"
    assert result.volumes[91].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[91].volume_pairs[0].remote_replication.mode"
    assert result.volumes[91].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[91].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[91].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[91].volume_pairs[0].cluster_pair_id"
    assert result.volumes[91].volume_pairs[0].remote_volume_id == 442, "Died on +.volumes[91].volume_pairs[0].remote_volume_id"
    assert result.volumes[91].volume_pairs[0].remote_volume_name == """async-source-92""", "Died on +.volumes[91].volume_pairs[0].remote_volume_name"
    assert result.volumes[91].volume_pairs[0].remote_slice_id == 442, "Died on +.volumes[91].volume_pairs[0].remote_slice_id"
    assert result.volumes[91].account_id == 6, "Died on +.volumes[91].account_id"
    assert result.volumes[91].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[91].create_time"
    assert result.volumes[91].virtual_volume_id is None, "Died on .volumes[91].virtual_volume_id"
    assert result.volumes[90].status == """active""", "Died on +.volumes[90].status"
    assert result.volumes[90].enable512e == False, "Died on +.volumes[90].enable512e"
    assert result.volumes[90].qos.burst_iops == 15000, "Died on +.volumes[90].qos.burst_iops"
    assert result.volumes[90].qos.burst_time == 60, "Died on +.volumes[90].qos.burst_time"
    assert result.volumes[90].qos.min_iops == 100, "Died on +.volumes[90].qos.min_iops"
    assert result.volumes[90].qos.max_iops == 15000, "Died on +.volumes[90].qos.max_iops"
    assert result.volumes[90].name == """async-target-91""", "Died on +.volumes[90].name"
    assert result.volumes[90].volume_access_groups[0] == 7, "Died on +.volumes[90].volume_access_groups[0]"
    assert result.volumes[90].scsi_naadevice_id == """6f47acc10000000034353335000003ad""", "Died on +.volumes[90].scsi_naadevice_id"
    assert result.volumes[90].total_size == 5000658944, "Died on +.volumes[90].total_size"
    assert result.volumes[90].block_size == 4096, "Died on +.volumes[90].block_size"
    assert result.volumes[90].scsi_euidevice_id == """34353335000003adf47acc0100000000""", "Died on +.volumes[90].scsi_euidevice_id"
    assert result.volumes[90].volume_id == 941, "Died on +.volumes[90].volume_id"
    assert result.volumes[90].access == """replicationTarget""", "Died on +.volumes[90].access"
    assert result.volumes[90].iqn == """iqn.2010-01.com.solidfire:4535.async-target-91.941""", "Died on +.volumes[90].iqn"
    assert result.volumes[90].slice_count == 1, "Died on +.volumes[90].slice_count"
    assert type(result.volumes[90].attributes) is dict, "Died on .volumes[90].attributes"
    assert result.volumes[90].volume_pairs[0].volume_pair_uuid == UUID("0b4d547a-ed9d-489a-a8b6-0980ae0fbf3e"), "Died on .volumes[90].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[90].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[90].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[90].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[90].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[90].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[90].volume_pairs[0].remote_replication.state"
    assert result.volumes[90].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[90].volume_pairs[0].remote_replication.mode"
    assert result.volumes[90].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[90].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[90].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[90].volume_pairs[0].cluster_pair_id"
    assert result.volumes[90].volume_pairs[0].remote_volume_id == 441, "Died on +.volumes[90].volume_pairs[0].remote_volume_id"
    assert result.volumes[90].volume_pairs[0].remote_volume_name == """async-source-91""", "Died on +.volumes[90].volume_pairs[0].remote_volume_name"
    assert result.volumes[90].volume_pairs[0].remote_slice_id == 441, "Died on +.volumes[90].volume_pairs[0].remote_slice_id"
    assert result.volumes[90].account_id == 6, "Died on +.volumes[90].account_id"
    assert result.volumes[90].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[90].create_time"
    assert result.volumes[90].virtual_volume_id is None, "Died on .volumes[90].virtual_volume_id"
    assert result.volumes[89].status == """active""", "Died on +.volumes[89].status"
    assert result.volumes[89].enable512e == False, "Died on +.volumes[89].enable512e"
    assert result.volumes[89].qos.burst_iops == 15000, "Died on +.volumes[89].qos.burst_iops"
    assert result.volumes[89].qos.burst_time == 60, "Died on +.volumes[89].qos.burst_time"
    assert result.volumes[89].qos.min_iops == 100, "Died on +.volumes[89].qos.min_iops"
    assert result.volumes[89].qos.max_iops == 15000, "Died on +.volumes[89].qos.max_iops"
    assert result.volumes[89].name == """async-target-90""", "Died on +.volumes[89].name"
    assert result.volumes[89].volume_access_groups[0] == 7, "Died on +.volumes[89].volume_access_groups[0]"
    assert result.volumes[89].scsi_naadevice_id == """6f47acc10000000034353335000003ac""", "Died on +.volumes[89].scsi_naadevice_id"
    assert result.volumes[89].total_size == 5000658944, "Died on +.volumes[89].total_size"
    assert result.volumes[89].block_size == 4096, "Died on +.volumes[89].block_size"
    assert result.volumes[89].scsi_euidevice_id == """34353335000003acf47acc0100000000""", "Died on +.volumes[89].scsi_euidevice_id"
    assert result.volumes[89].volume_id == 940, "Died on +.volumes[89].volume_id"
    assert result.volumes[89].access == """replicationTarget""", "Died on +.volumes[89].access"
    assert result.volumes[89].iqn == """iqn.2010-01.com.solidfire:4535.async-target-90.940""", "Died on +.volumes[89].iqn"
    assert result.volumes[89].slice_count == 1, "Died on +.volumes[89].slice_count"
    assert type(result.volumes[89].attributes) is dict, "Died on .volumes[89].attributes"
    assert result.volumes[89].volume_pairs[0].volume_pair_uuid == UUID("2d916f19-5e95-4512-8bc8-ad6bd2054715"), "Died on .volumes[89].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[89].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[89].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[89].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[89].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[89].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[89].volume_pairs[0].remote_replication.state"
    assert result.volumes[89].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[89].volume_pairs[0].remote_replication.mode"
    assert result.volumes[89].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[89].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[89].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[89].volume_pairs[0].cluster_pair_id"
    assert result.volumes[89].volume_pairs[0].remote_volume_id == 440, "Died on +.volumes[89].volume_pairs[0].remote_volume_id"
    assert result.volumes[89].volume_pairs[0].remote_volume_name == """async-source-90""", "Died on +.volumes[89].volume_pairs[0].remote_volume_name"
    assert result.volumes[89].volume_pairs[0].remote_slice_id == 440, "Died on +.volumes[89].volume_pairs[0].remote_slice_id"
    assert result.volumes[89].account_id == 6, "Died on +.volumes[89].account_id"
    assert result.volumes[89].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[89].create_time"
    assert result.volumes[89].virtual_volume_id is None, "Died on .volumes[89].virtual_volume_id"
    assert result.volumes[88].status == """active""", "Died on +.volumes[88].status"
    assert result.volumes[88].enable512e == False, "Died on +.volumes[88].enable512e"
    assert result.volumes[88].qos.burst_iops == 15000, "Died on +.volumes[88].qos.burst_iops"
    assert result.volumes[88].qos.burst_time == 60, "Died on +.volumes[88].qos.burst_time"
    assert result.volumes[88].qos.min_iops == 100, "Died on +.volumes[88].qos.min_iops"
    assert result.volumes[88].qos.max_iops == 15000, "Died on +.volumes[88].qos.max_iops"
    assert result.volumes[88].name == """async-target-89""", "Died on +.volumes[88].name"
    assert result.volumes[88].volume_access_groups[0] == 7, "Died on +.volumes[88].volume_access_groups[0]"
    assert result.volumes[88].scsi_naadevice_id == """6f47acc10000000034353335000003ab""", "Died on +.volumes[88].scsi_naadevice_id"
    assert result.volumes[88].total_size == 5000658944, "Died on +.volumes[88].total_size"
    assert result.volumes[88].block_size == 4096, "Died on +.volumes[88].block_size"
    assert result.volumes[88].scsi_euidevice_id == """34353335000003abf47acc0100000000""", "Died on +.volumes[88].scsi_euidevice_id"
    assert result.volumes[88].volume_id == 939, "Died on +.volumes[88].volume_id"
    assert result.volumes[88].access == """replicationTarget""", "Died on +.volumes[88].access"
    assert result.volumes[88].iqn == """iqn.2010-01.com.solidfire:4535.async-target-89.939""", "Died on +.volumes[88].iqn"
    assert result.volumes[88].slice_count == 1, "Died on +.volumes[88].slice_count"
    assert type(result.volumes[88].attributes) is dict, "Died on .volumes[88].attributes"
    assert result.volumes[88].volume_pairs[0].volume_pair_uuid == UUID("6c955073-1282-4097-83fe-627268b02e1d"), "Died on .volumes[88].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[88].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[88].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[88].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[88].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[88].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[88].volume_pairs[0].remote_replication.state"
    assert result.volumes[88].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[88].volume_pairs[0].remote_replication.mode"
    assert result.volumes[88].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[88].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[88].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[88].volume_pairs[0].cluster_pair_id"
    assert result.volumes[88].volume_pairs[0].remote_volume_id == 439, "Died on +.volumes[88].volume_pairs[0].remote_volume_id"
    assert result.volumes[88].volume_pairs[0].remote_volume_name == """async-source-89""", "Died on +.volumes[88].volume_pairs[0].remote_volume_name"
    assert result.volumes[88].volume_pairs[0].remote_slice_id == 439, "Died on +.volumes[88].volume_pairs[0].remote_slice_id"
    assert result.volumes[88].account_id == 6, "Died on +.volumes[88].account_id"
    assert result.volumes[88].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[88].create_time"
    assert result.volumes[88].virtual_volume_id is None, "Died on .volumes[88].virtual_volume_id"
    assert result.volumes[87].status == """active""", "Died on +.volumes[87].status"
    assert result.volumes[87].enable512e == False, "Died on +.volumes[87].enable512e"
    assert result.volumes[87].qos.burst_iops == 15000, "Died on +.volumes[87].qos.burst_iops"
    assert result.volumes[87].qos.burst_time == 60, "Died on +.volumes[87].qos.burst_time"
    assert result.volumes[87].qos.min_iops == 100, "Died on +.volumes[87].qos.min_iops"
    assert result.volumes[87].qos.max_iops == 15000, "Died on +.volumes[87].qos.max_iops"
    assert result.volumes[87].name == """async-target-88""", "Died on +.volumes[87].name"
    assert result.volumes[87].volume_access_groups[0] == 7, "Died on +.volumes[87].volume_access_groups[0]"
    assert result.volumes[87].scsi_naadevice_id == """6f47acc10000000034353335000003aa""", "Died on +.volumes[87].scsi_naadevice_id"
    assert result.volumes[87].total_size == 5000658944, "Died on +.volumes[87].total_size"
    assert result.volumes[87].block_size == 4096, "Died on +.volumes[87].block_size"
    assert result.volumes[87].scsi_euidevice_id == """34353335000003aaf47acc0100000000""", "Died on +.volumes[87].scsi_euidevice_id"
    assert result.volumes[87].volume_id == 938, "Died on +.volumes[87].volume_id"
    assert result.volumes[87].access == """replicationTarget""", "Died on +.volumes[87].access"
    assert result.volumes[87].iqn == """iqn.2010-01.com.solidfire:4535.async-target-88.938""", "Died on +.volumes[87].iqn"
    assert result.volumes[87].slice_count == 1, "Died on +.volumes[87].slice_count"
    assert type(result.volumes[87].attributes) is dict, "Died on .volumes[87].attributes"
    assert result.volumes[87].volume_pairs[0].volume_pair_uuid == UUID("d7031a87-622f-4a73-93ba-6d33027d4701"), "Died on .volumes[87].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[87].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[87].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[87].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[87].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[87].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[87].volume_pairs[0].remote_replication.state"
    assert result.volumes[87].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[87].volume_pairs[0].remote_replication.mode"
    assert result.volumes[87].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[87].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[87].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[87].volume_pairs[0].cluster_pair_id"
    assert result.volumes[87].volume_pairs[0].remote_volume_id == 438, "Died on +.volumes[87].volume_pairs[0].remote_volume_id"
    assert result.volumes[87].volume_pairs[0].remote_volume_name == """async-source-88""", "Died on +.volumes[87].volume_pairs[0].remote_volume_name"
    assert result.volumes[87].volume_pairs[0].remote_slice_id == 438, "Died on +.volumes[87].volume_pairs[0].remote_slice_id"
    assert result.volumes[87].account_id == 6, "Died on +.volumes[87].account_id"
    assert result.volumes[87].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[87].create_time"
    assert result.volumes[87].virtual_volume_id is None, "Died on .volumes[87].virtual_volume_id"
    assert result.volumes[86].status == """active""", "Died on +.volumes[86].status"
    assert result.volumes[86].enable512e == False, "Died on +.volumes[86].enable512e"
    assert result.volumes[86].qos.burst_iops == 15000, "Died on +.volumes[86].qos.burst_iops"
    assert result.volumes[86].qos.burst_time == 60, "Died on +.volumes[86].qos.burst_time"
    assert result.volumes[86].qos.min_iops == 100, "Died on +.volumes[86].qos.min_iops"
    assert result.volumes[86].qos.max_iops == 15000, "Died on +.volumes[86].qos.max_iops"
    assert result.volumes[86].name == """async-target-87""", "Died on +.volumes[86].name"
    assert result.volumes[86].volume_access_groups[0] == 7, "Died on +.volumes[86].volume_access_groups[0]"
    assert result.volumes[86].scsi_naadevice_id == """6f47acc10000000034353335000003a9""", "Died on +.volumes[86].scsi_naadevice_id"
    assert result.volumes[86].total_size == 5000658944, "Died on +.volumes[86].total_size"
    assert result.volumes[86].block_size == 4096, "Died on +.volumes[86].block_size"
    assert result.volumes[86].scsi_euidevice_id == """34353335000003a9f47acc0100000000""", "Died on +.volumes[86].scsi_euidevice_id"
    assert result.volumes[86].volume_id == 937, "Died on +.volumes[86].volume_id"
    assert result.volumes[86].access == """replicationTarget""", "Died on +.volumes[86].access"
    assert result.volumes[86].iqn == """iqn.2010-01.com.solidfire:4535.async-target-87.937""", "Died on +.volumes[86].iqn"
    assert result.volumes[86].slice_count == 1, "Died on +.volumes[86].slice_count"
    assert type(result.volumes[86].attributes) is dict, "Died on .volumes[86].attributes"
    assert result.volumes[86].volume_pairs[0].volume_pair_uuid == UUID("ff51f6f6-c96f-451a-8085-c455638302e5"), "Died on .volumes[86].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[86].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[86].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[86].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[86].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[86].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[86].volume_pairs[0].remote_replication.state"
    assert result.volumes[86].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[86].volume_pairs[0].remote_replication.mode"
    assert result.volumes[86].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[86].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[86].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[86].volume_pairs[0].cluster_pair_id"
    assert result.volumes[86].volume_pairs[0].remote_volume_id == 437, "Died on +.volumes[86].volume_pairs[0].remote_volume_id"
    assert result.volumes[86].volume_pairs[0].remote_volume_name == """async-source-87""", "Died on +.volumes[86].volume_pairs[0].remote_volume_name"
    assert result.volumes[86].volume_pairs[0].remote_slice_id == 437, "Died on +.volumes[86].volume_pairs[0].remote_slice_id"
    assert result.volumes[86].account_id == 6, "Died on +.volumes[86].account_id"
    assert result.volumes[86].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[86].create_time"
    assert result.volumes[86].virtual_volume_id is None, "Died on .volumes[86].virtual_volume_id"
    assert result.volumes[85].status == """active""", "Died on +.volumes[85].status"
    assert result.volumes[85].enable512e == False, "Died on +.volumes[85].enable512e"
    assert result.volumes[85].qos.burst_iops == 15000, "Died on +.volumes[85].qos.burst_iops"
    assert result.volumes[85].qos.burst_time == 60, "Died on +.volumes[85].qos.burst_time"
    assert result.volumes[85].qos.min_iops == 100, "Died on +.volumes[85].qos.min_iops"
    assert result.volumes[85].qos.max_iops == 15000, "Died on +.volumes[85].qos.max_iops"
    assert result.volumes[85].name == """async-target-86""", "Died on +.volumes[85].name"
    assert result.volumes[85].volume_access_groups[0] == 7, "Died on +.volumes[85].volume_access_groups[0]"
    assert result.volumes[85].scsi_naadevice_id == """6f47acc10000000034353335000003a8""", "Died on +.volumes[85].scsi_naadevice_id"
    assert result.volumes[85].total_size == 5000658944, "Died on +.volumes[85].total_size"
    assert result.volumes[85].block_size == 4096, "Died on +.volumes[85].block_size"
    assert result.volumes[85].scsi_euidevice_id == """34353335000003a8f47acc0100000000""", "Died on +.volumes[85].scsi_euidevice_id"
    assert result.volumes[85].volume_id == 936, "Died on +.volumes[85].volume_id"
    assert result.volumes[85].access == """replicationTarget""", "Died on +.volumes[85].access"
    assert result.volumes[85].iqn == """iqn.2010-01.com.solidfire:4535.async-target-86.936""", "Died on +.volumes[85].iqn"
    assert result.volumes[85].slice_count == 1, "Died on +.volumes[85].slice_count"
    assert type(result.volumes[85].attributes) is dict, "Died on .volumes[85].attributes"
    assert result.volumes[85].volume_pairs[0].volume_pair_uuid == UUID("f235969f-859f-4b0e-8faf-07ffd4559f79"), "Died on .volumes[85].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[85].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[85].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[85].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[85].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[85].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[85].volume_pairs[0].remote_replication.state"
    assert result.volumes[85].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[85].volume_pairs[0].remote_replication.mode"
    assert result.volumes[85].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[85].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[85].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[85].volume_pairs[0].cluster_pair_id"
    assert result.volumes[85].volume_pairs[0].remote_volume_id == 436, "Died on +.volumes[85].volume_pairs[0].remote_volume_id"
    assert result.volumes[85].volume_pairs[0].remote_volume_name == """async-source-86""", "Died on +.volumes[85].volume_pairs[0].remote_volume_name"
    assert result.volumes[85].volume_pairs[0].remote_slice_id == 436, "Died on +.volumes[85].volume_pairs[0].remote_slice_id"
    assert result.volumes[85].account_id == 6, "Died on +.volumes[85].account_id"
    assert result.volumes[85].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[85].create_time"
    assert result.volumes[85].virtual_volume_id is None, "Died on .volumes[85].virtual_volume_id"
    assert result.volumes[84].status == """active""", "Died on +.volumes[84].status"
    assert result.volumes[84].enable512e == False, "Died on +.volumes[84].enable512e"
    assert result.volumes[84].qos.burst_iops == 15000, "Died on +.volumes[84].qos.burst_iops"
    assert result.volumes[84].qos.burst_time == 60, "Died on +.volumes[84].qos.burst_time"
    assert result.volumes[84].qos.min_iops == 100, "Died on +.volumes[84].qos.min_iops"
    assert result.volumes[84].qos.max_iops == 15000, "Died on +.volumes[84].qos.max_iops"
    assert result.volumes[84].name == """async-target-85""", "Died on +.volumes[84].name"
    assert result.volumes[84].volume_access_groups[0] == 7, "Died on +.volumes[84].volume_access_groups[0]"
    assert result.volumes[84].scsi_naadevice_id == """6f47acc10000000034353335000003a7""", "Died on +.volumes[84].scsi_naadevice_id"
    assert result.volumes[84].total_size == 5000658944, "Died on +.volumes[84].total_size"
    assert result.volumes[84].block_size == 4096, "Died on +.volumes[84].block_size"
    assert result.volumes[84].scsi_euidevice_id == """34353335000003a7f47acc0100000000""", "Died on +.volumes[84].scsi_euidevice_id"
    assert result.volumes[84].volume_id == 935, "Died on +.volumes[84].volume_id"
    assert result.volumes[84].access == """replicationTarget""", "Died on +.volumes[84].access"
    assert result.volumes[84].iqn == """iqn.2010-01.com.solidfire:4535.async-target-85.935""", "Died on +.volumes[84].iqn"
    assert result.volumes[84].slice_count == 1, "Died on +.volumes[84].slice_count"
    assert type(result.volumes[84].attributes) is dict, "Died on .volumes[84].attributes"
    assert result.volumes[84].volume_pairs[0].volume_pair_uuid == UUID("0811f8f9-a162-4d1e-825f-5b6fb50e1fe9"), "Died on .volumes[84].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[84].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[84].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[84].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[84].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[84].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[84].volume_pairs[0].remote_replication.state"
    assert result.volumes[84].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[84].volume_pairs[0].remote_replication.mode"
    assert result.volumes[84].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[84].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[84].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[84].volume_pairs[0].cluster_pair_id"
    assert result.volumes[84].volume_pairs[0].remote_volume_id == 435, "Died on +.volumes[84].volume_pairs[0].remote_volume_id"
    assert result.volumes[84].volume_pairs[0].remote_volume_name == """async-source-85""", "Died on +.volumes[84].volume_pairs[0].remote_volume_name"
    assert result.volumes[84].volume_pairs[0].remote_slice_id == 435, "Died on +.volumes[84].volume_pairs[0].remote_slice_id"
    assert result.volumes[84].account_id == 6, "Died on +.volumes[84].account_id"
    assert result.volumes[84].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[84].create_time"
    assert result.volumes[84].virtual_volume_id is None, "Died on .volumes[84].virtual_volume_id"
    assert result.volumes[83].status == """active""", "Died on +.volumes[83].status"
    assert result.volumes[83].enable512e == False, "Died on +.volumes[83].enable512e"
    assert result.volumes[83].qos.burst_iops == 15000, "Died on +.volumes[83].qos.burst_iops"
    assert result.volumes[83].qos.burst_time == 60, "Died on +.volumes[83].qos.burst_time"
    assert result.volumes[83].qos.min_iops == 100, "Died on +.volumes[83].qos.min_iops"
    assert result.volumes[83].qos.max_iops == 15000, "Died on +.volumes[83].qos.max_iops"
    assert result.volumes[83].name == """async-target-84""", "Died on +.volumes[83].name"
    assert result.volumes[83].volume_access_groups[0] == 7, "Died on +.volumes[83].volume_access_groups[0]"
    assert result.volumes[83].scsi_naadevice_id == """6f47acc10000000034353335000003a6""", "Died on +.volumes[83].scsi_naadevice_id"
    assert result.volumes[83].total_size == 5000658944, "Died on +.volumes[83].total_size"
    assert result.volumes[83].block_size == 4096, "Died on +.volumes[83].block_size"
    assert result.volumes[83].scsi_euidevice_id == """34353335000003a6f47acc0100000000""", "Died on +.volumes[83].scsi_euidevice_id"
    assert result.volumes[83].volume_id == 934, "Died on +.volumes[83].volume_id"
    assert result.volumes[83].access == """replicationTarget""", "Died on +.volumes[83].access"
    assert result.volumes[83].iqn == """iqn.2010-01.com.solidfire:4535.async-target-84.934""", "Died on +.volumes[83].iqn"
    assert result.volumes[83].slice_count == 1, "Died on +.volumes[83].slice_count"
    assert type(result.volumes[83].attributes) is dict, "Died on .volumes[83].attributes"
    assert result.volumes[83].volume_pairs[0].volume_pair_uuid == UUID("0904c67f-bbc5-420c-88fd-133d7395f695"), "Died on .volumes[83].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[83].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[83].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[83].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[83].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[83].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[83].volume_pairs[0].remote_replication.state"
    assert result.volumes[83].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[83].volume_pairs[0].remote_replication.mode"
    assert result.volumes[83].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[83].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[83].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[83].volume_pairs[0].cluster_pair_id"
    assert result.volumes[83].volume_pairs[0].remote_volume_id == 434, "Died on +.volumes[83].volume_pairs[0].remote_volume_id"
    assert result.volumes[83].volume_pairs[0].remote_volume_name == """async-source-84""", "Died on +.volumes[83].volume_pairs[0].remote_volume_name"
    assert result.volumes[83].volume_pairs[0].remote_slice_id == 434, "Died on +.volumes[83].volume_pairs[0].remote_slice_id"
    assert result.volumes[83].account_id == 6, "Died on +.volumes[83].account_id"
    assert result.volumes[83].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[83].create_time"
    assert result.volumes[83].virtual_volume_id is None, "Died on .volumes[83].virtual_volume_id"
    assert result.volumes[82].status == """active""", "Died on +.volumes[82].status"
    assert result.volumes[82].enable512e == False, "Died on +.volumes[82].enable512e"
    assert result.volumes[82].qos.burst_iops == 15000, "Died on +.volumes[82].qos.burst_iops"
    assert result.volumes[82].qos.burst_time == 60, "Died on +.volumes[82].qos.burst_time"
    assert result.volumes[82].qos.min_iops == 100, "Died on +.volumes[82].qos.min_iops"
    assert result.volumes[82].qos.max_iops == 15000, "Died on +.volumes[82].qos.max_iops"
    assert result.volumes[82].name == """async-target-83""", "Died on +.volumes[82].name"
    assert result.volumes[82].volume_access_groups[0] == 7, "Died on +.volumes[82].volume_access_groups[0]"
    assert result.volumes[82].scsi_naadevice_id == """6f47acc10000000034353335000003a5""", "Died on +.volumes[82].scsi_naadevice_id"
    assert result.volumes[82].total_size == 5000658944, "Died on +.volumes[82].total_size"
    assert result.volumes[82].block_size == 4096, "Died on +.volumes[82].block_size"
    assert result.volumes[82].scsi_euidevice_id == """34353335000003a5f47acc0100000000""", "Died on +.volumes[82].scsi_euidevice_id"
    assert result.volumes[82].volume_id == 933, "Died on +.volumes[82].volume_id"
    assert result.volumes[82].access == """replicationTarget""", "Died on +.volumes[82].access"
    assert result.volumes[82].iqn == """iqn.2010-01.com.solidfire:4535.async-target-83.933""", "Died on +.volumes[82].iqn"
    assert result.volumes[82].slice_count == 1, "Died on +.volumes[82].slice_count"
    assert type(result.volumes[82].attributes) is dict, "Died on .volumes[82].attributes"
    assert result.volumes[82].volume_pairs[0].volume_pair_uuid == UUID("7e2fd259-f1cf-4168-a8ef-6bdcce243aea"), "Died on .volumes[82].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[82].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[82].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[82].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[82].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[82].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[82].volume_pairs[0].remote_replication.state"
    assert result.volumes[82].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[82].volume_pairs[0].remote_replication.mode"
    assert result.volumes[82].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[82].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[82].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[82].volume_pairs[0].cluster_pair_id"
    assert result.volumes[82].volume_pairs[0].remote_volume_id == 433, "Died on +.volumes[82].volume_pairs[0].remote_volume_id"
    assert result.volumes[82].volume_pairs[0].remote_volume_name == """async-source-83""", "Died on +.volumes[82].volume_pairs[0].remote_volume_name"
    assert result.volumes[82].volume_pairs[0].remote_slice_id == 433, "Died on +.volumes[82].volume_pairs[0].remote_slice_id"
    assert result.volumes[82].account_id == 6, "Died on +.volumes[82].account_id"
    assert result.volumes[82].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[82].create_time"
    assert result.volumes[82].virtual_volume_id is None, "Died on .volumes[82].virtual_volume_id"
    assert result.volumes[81].status == """active""", "Died on +.volumes[81].status"
    assert result.volumes[81].enable512e == False, "Died on +.volumes[81].enable512e"
    assert result.volumes[81].qos.burst_iops == 15000, "Died on +.volumes[81].qos.burst_iops"
    assert result.volumes[81].qos.burst_time == 60, "Died on +.volumes[81].qos.burst_time"
    assert result.volumes[81].qos.min_iops == 100, "Died on +.volumes[81].qos.min_iops"
    assert result.volumes[81].qos.max_iops == 15000, "Died on +.volumes[81].qos.max_iops"
    assert result.volumes[81].name == """async-target-82""", "Died on +.volumes[81].name"
    assert result.volumes[81].volume_access_groups[0] == 7, "Died on +.volumes[81].volume_access_groups[0]"
    assert result.volumes[81].scsi_naadevice_id == """6f47acc10000000034353335000003a4""", "Died on +.volumes[81].scsi_naadevice_id"
    assert result.volumes[81].total_size == 5000658944, "Died on +.volumes[81].total_size"
    assert result.volumes[81].block_size == 4096, "Died on +.volumes[81].block_size"
    assert result.volumes[81].scsi_euidevice_id == """34353335000003a4f47acc0100000000""", "Died on +.volumes[81].scsi_euidevice_id"
    assert result.volumes[81].volume_id == 932, "Died on +.volumes[81].volume_id"
    assert result.volumes[81].access == """replicationTarget""", "Died on +.volumes[81].access"
    assert result.volumes[81].iqn == """iqn.2010-01.com.solidfire:4535.async-target-82.932""", "Died on +.volumes[81].iqn"
    assert result.volumes[81].slice_count == 1, "Died on +.volumes[81].slice_count"
    assert type(result.volumes[81].attributes) is dict, "Died on .volumes[81].attributes"
    assert result.volumes[81].volume_pairs[0].volume_pair_uuid == UUID("2bcd520e-d684-4c0d-8595-64c5dbe01c22"), "Died on .volumes[81].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[81].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[81].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[81].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[81].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[81].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[81].volume_pairs[0].remote_replication.state"
    assert result.volumes[81].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[81].volume_pairs[0].remote_replication.mode"
    assert result.volumes[81].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[81].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[81].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[81].volume_pairs[0].cluster_pair_id"
    assert result.volumes[81].volume_pairs[0].remote_volume_id == 432, "Died on +.volumes[81].volume_pairs[0].remote_volume_id"
    assert result.volumes[81].volume_pairs[0].remote_volume_name == """async-source-82""", "Died on +.volumes[81].volume_pairs[0].remote_volume_name"
    assert result.volumes[81].volume_pairs[0].remote_slice_id == 432, "Died on +.volumes[81].volume_pairs[0].remote_slice_id"
    assert result.volumes[81].account_id == 6, "Died on +.volumes[81].account_id"
    assert result.volumes[81].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[81].create_time"
    assert result.volumes[81].virtual_volume_id is None, "Died on .volumes[81].virtual_volume_id"
    assert result.volumes[80].status == """active""", "Died on +.volumes[80].status"
    assert result.volumes[80].enable512e == False, "Died on +.volumes[80].enable512e"
    assert result.volumes[80].qos.burst_iops == 15000, "Died on +.volumes[80].qos.burst_iops"
    assert result.volumes[80].qos.burst_time == 60, "Died on +.volumes[80].qos.burst_time"
    assert result.volumes[80].qos.min_iops == 100, "Died on +.volumes[80].qos.min_iops"
    assert result.volumes[80].qos.max_iops == 15000, "Died on +.volumes[80].qos.max_iops"
    assert result.volumes[80].name == """async-target-81""", "Died on +.volumes[80].name"
    assert result.volumes[80].volume_access_groups[0] == 7, "Died on +.volumes[80].volume_access_groups[0]"
    assert result.volumes[80].scsi_naadevice_id == """6f47acc10000000034353335000003a3""", "Died on +.volumes[80].scsi_naadevice_id"
    assert result.volumes[80].total_size == 5000658944, "Died on +.volumes[80].total_size"
    assert result.volumes[80].block_size == 4096, "Died on +.volumes[80].block_size"
    assert result.volumes[80].scsi_euidevice_id == """34353335000003a3f47acc0100000000""", "Died on +.volumes[80].scsi_euidevice_id"
    assert result.volumes[80].volume_id == 931, "Died on +.volumes[80].volume_id"
    assert result.volumes[80].access == """replicationTarget""", "Died on +.volumes[80].access"
    assert result.volumes[80].iqn == """iqn.2010-01.com.solidfire:4535.async-target-81.931""", "Died on +.volumes[80].iqn"
    assert result.volumes[80].slice_count == 1, "Died on +.volumes[80].slice_count"
    assert type(result.volumes[80].attributes) is dict, "Died on .volumes[80].attributes"
    assert result.volumes[80].volume_pairs[0].volume_pair_uuid == UUID("93161aca-f397-4625-b1df-4d20777a7b79"), "Died on .volumes[80].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[80].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[80].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[80].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[80].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[80].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[80].volume_pairs[0].remote_replication.state"
    assert result.volumes[80].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[80].volume_pairs[0].remote_replication.mode"
    assert result.volumes[80].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[80].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[80].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[80].volume_pairs[0].cluster_pair_id"
    assert result.volumes[80].volume_pairs[0].remote_volume_id == 431, "Died on +.volumes[80].volume_pairs[0].remote_volume_id"
    assert result.volumes[80].volume_pairs[0].remote_volume_name == """async-source-81""", "Died on +.volumes[80].volume_pairs[0].remote_volume_name"
    assert result.volumes[80].volume_pairs[0].remote_slice_id == 431, "Died on +.volumes[80].volume_pairs[0].remote_slice_id"
    assert result.volumes[80].account_id == 6, "Died on +.volumes[80].account_id"
    assert result.volumes[80].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[80].create_time"
    assert result.volumes[80].virtual_volume_id is None, "Died on .volumes[80].virtual_volume_id"
    assert result.volumes[79].status == """active""", "Died on +.volumes[79].status"
    assert result.volumes[79].enable512e == False, "Died on +.volumes[79].enable512e"
    assert result.volumes[79].qos.burst_iops == 15000, "Died on +.volumes[79].qos.burst_iops"
    assert result.volumes[79].qos.burst_time == 60, "Died on +.volumes[79].qos.burst_time"
    assert result.volumes[79].qos.min_iops == 100, "Died on +.volumes[79].qos.min_iops"
    assert result.volumes[79].qos.max_iops == 15000, "Died on +.volumes[79].qos.max_iops"
    assert result.volumes[79].name == """async-target-80""", "Died on +.volumes[79].name"
    assert result.volumes[79].volume_access_groups[0] == 7, "Died on +.volumes[79].volume_access_groups[0]"
    assert result.volumes[79].scsi_naadevice_id == """6f47acc10000000034353335000003a2""", "Died on +.volumes[79].scsi_naadevice_id"
    assert result.volumes[79].total_size == 5000658944, "Died on +.volumes[79].total_size"
    assert result.volumes[79].block_size == 4096, "Died on +.volumes[79].block_size"
    assert result.volumes[79].scsi_euidevice_id == """34353335000003a2f47acc0100000000""", "Died on +.volumes[79].scsi_euidevice_id"
    assert result.volumes[79].volume_id == 930, "Died on +.volumes[79].volume_id"
    assert result.volumes[79].access == """replicationTarget""", "Died on +.volumes[79].access"
    assert result.volumes[79].iqn == """iqn.2010-01.com.solidfire:4535.async-target-80.930""", "Died on +.volumes[79].iqn"
    assert result.volumes[79].slice_count == 1, "Died on +.volumes[79].slice_count"
    assert type(result.volumes[79].attributes) is dict, "Died on .volumes[79].attributes"
    assert result.volumes[79].volume_pairs[0].volume_pair_uuid == UUID("69b8e9ed-155a-46fa-9b02-d1feed2edd3c"), "Died on .volumes[79].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[79].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[79].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[79].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[79].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[79].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[79].volume_pairs[0].remote_replication.state"
    assert result.volumes[79].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[79].volume_pairs[0].remote_replication.mode"
    assert result.volumes[79].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[79].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[79].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[79].volume_pairs[0].cluster_pair_id"
    assert result.volumes[79].volume_pairs[0].remote_volume_id == 430, "Died on +.volumes[79].volume_pairs[0].remote_volume_id"
    assert result.volumes[79].volume_pairs[0].remote_volume_name == """async-source-80""", "Died on +.volumes[79].volume_pairs[0].remote_volume_name"
    assert result.volumes[79].volume_pairs[0].remote_slice_id == 430, "Died on +.volumes[79].volume_pairs[0].remote_slice_id"
    assert result.volumes[79].account_id == 6, "Died on +.volumes[79].account_id"
    assert result.volumes[79].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[79].create_time"
    assert result.volumes[79].virtual_volume_id is None, "Died on .volumes[79].virtual_volume_id"
    assert result.volumes[78].status == """active""", "Died on +.volumes[78].status"
    assert result.volumes[78].enable512e == False, "Died on +.volumes[78].enable512e"
    assert result.volumes[78].qos.burst_iops == 15000, "Died on +.volumes[78].qos.burst_iops"
    assert result.volumes[78].qos.burst_time == 60, "Died on +.volumes[78].qos.burst_time"
    assert result.volumes[78].qos.min_iops == 100, "Died on +.volumes[78].qos.min_iops"
    assert result.volumes[78].qos.max_iops == 15000, "Died on +.volumes[78].qos.max_iops"
    assert result.volumes[78].name == """async-target-79""", "Died on +.volumes[78].name"
    assert result.volumes[78].volume_access_groups[0] == 7, "Died on +.volumes[78].volume_access_groups[0]"
    assert result.volumes[78].scsi_naadevice_id == """6f47acc10000000034353335000003a1""", "Died on +.volumes[78].scsi_naadevice_id"
    assert result.volumes[78].total_size == 5000658944, "Died on +.volumes[78].total_size"
    assert result.volumes[78].block_size == 4096, "Died on +.volumes[78].block_size"
    assert result.volumes[78].scsi_euidevice_id == """34353335000003a1f47acc0100000000""", "Died on +.volumes[78].scsi_euidevice_id"
    assert result.volumes[78].volume_id == 929, "Died on +.volumes[78].volume_id"
    assert result.volumes[78].access == """replicationTarget""", "Died on +.volumes[78].access"
    assert result.volumes[78].iqn == """iqn.2010-01.com.solidfire:4535.async-target-79.929""", "Died on +.volumes[78].iqn"
    assert result.volumes[78].slice_count == 1, "Died on +.volumes[78].slice_count"
    assert type(result.volumes[78].attributes) is dict, "Died on .volumes[78].attributes"
    assert result.volumes[78].volume_pairs[0].volume_pair_uuid == UUID("b3d8c277-3e1c-4fe2-8f55-beed4d374ea1"), "Died on .volumes[78].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[78].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[78].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[78].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[78].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[78].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[78].volume_pairs[0].remote_replication.state"
    assert result.volumes[78].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[78].volume_pairs[0].remote_replication.mode"
    assert result.volumes[78].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[78].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[78].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[78].volume_pairs[0].cluster_pair_id"
    assert result.volumes[78].volume_pairs[0].remote_volume_id == 429, "Died on +.volumes[78].volume_pairs[0].remote_volume_id"
    assert result.volumes[78].volume_pairs[0].remote_volume_name == """async-source-79""", "Died on +.volumes[78].volume_pairs[0].remote_volume_name"
    assert result.volumes[78].volume_pairs[0].remote_slice_id == 429, "Died on +.volumes[78].volume_pairs[0].remote_slice_id"
    assert result.volumes[78].account_id == 6, "Died on +.volumes[78].account_id"
    assert result.volumes[78].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[78].create_time"
    assert result.volumes[78].virtual_volume_id is None, "Died on .volumes[78].virtual_volume_id"
    assert result.volumes[77].status == """active""", "Died on +.volumes[77].status"
    assert result.volumes[77].enable512e == False, "Died on +.volumes[77].enable512e"
    assert result.volumes[77].qos.burst_iops == 15000, "Died on +.volumes[77].qos.burst_iops"
    assert result.volumes[77].qos.burst_time == 60, "Died on +.volumes[77].qos.burst_time"
    assert result.volumes[77].qos.min_iops == 100, "Died on +.volumes[77].qos.min_iops"
    assert result.volumes[77].qos.max_iops == 15000, "Died on +.volumes[77].qos.max_iops"
    assert result.volumes[77].name == """async-target-78""", "Died on +.volumes[77].name"
    assert result.volumes[77].volume_access_groups[0] == 7, "Died on +.volumes[77].volume_access_groups[0]"
    assert result.volumes[77].scsi_naadevice_id == """6f47acc10000000034353335000003a0""", "Died on +.volumes[77].scsi_naadevice_id"
    assert result.volumes[77].total_size == 5000658944, "Died on +.volumes[77].total_size"
    assert result.volumes[77].block_size == 4096, "Died on +.volumes[77].block_size"
    assert result.volumes[77].scsi_euidevice_id == """34353335000003a0f47acc0100000000""", "Died on +.volumes[77].scsi_euidevice_id"
    assert result.volumes[77].volume_id == 928, "Died on +.volumes[77].volume_id"
    assert result.volumes[77].access == """replicationTarget""", "Died on +.volumes[77].access"
    assert result.volumes[77].iqn == """iqn.2010-01.com.solidfire:4535.async-target-78.928""", "Died on +.volumes[77].iqn"
    assert result.volumes[77].slice_count == 1, "Died on +.volumes[77].slice_count"
    assert type(result.volumes[77].attributes) is dict, "Died on .volumes[77].attributes"
    assert result.volumes[77].volume_pairs[0].volume_pair_uuid == UUID("55bc363e-1f72-4b26-80af-82fcf992674d"), "Died on .volumes[77].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[77].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[77].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[77].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[77].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[77].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[77].volume_pairs[0].remote_replication.state"
    assert result.volumes[77].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[77].volume_pairs[0].remote_replication.mode"
    assert result.volumes[77].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[77].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[77].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[77].volume_pairs[0].cluster_pair_id"
    assert result.volumes[77].volume_pairs[0].remote_volume_id == 428, "Died on +.volumes[77].volume_pairs[0].remote_volume_id"
    assert result.volumes[77].volume_pairs[0].remote_volume_name == """async-source-78""", "Died on +.volumes[77].volume_pairs[0].remote_volume_name"
    assert result.volumes[77].volume_pairs[0].remote_slice_id == 428, "Died on +.volumes[77].volume_pairs[0].remote_slice_id"
    assert result.volumes[77].account_id == 6, "Died on +.volumes[77].account_id"
    assert result.volumes[77].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[77].create_time"
    assert result.volumes[77].virtual_volume_id is None, "Died on .volumes[77].virtual_volume_id"
    assert result.volumes[76].status == """active""", "Died on +.volumes[76].status"
    assert result.volumes[76].enable512e == False, "Died on +.volumes[76].enable512e"
    assert result.volumes[76].qos.burst_iops == 15000, "Died on +.volumes[76].qos.burst_iops"
    assert result.volumes[76].qos.burst_time == 60, "Died on +.volumes[76].qos.burst_time"
    assert result.volumes[76].qos.min_iops == 100, "Died on +.volumes[76].qos.min_iops"
    assert result.volumes[76].qos.max_iops == 15000, "Died on +.volumes[76].qos.max_iops"
    assert result.volumes[76].name == """async-target-77""", "Died on +.volumes[76].name"
    assert result.volumes[76].volume_access_groups[0] == 7, "Died on +.volumes[76].volume_access_groups[0]"
    assert result.volumes[76].scsi_naadevice_id == """6f47acc100000000343533350000039f""", "Died on +.volumes[76].scsi_naadevice_id"
    assert result.volumes[76].total_size == 5000658944, "Died on +.volumes[76].total_size"
    assert result.volumes[76].block_size == 4096, "Died on +.volumes[76].block_size"
    assert result.volumes[76].scsi_euidevice_id == """343533350000039ff47acc0100000000""", "Died on +.volumes[76].scsi_euidevice_id"
    assert result.volumes[76].volume_id == 927, "Died on +.volumes[76].volume_id"
    assert result.volumes[76].access == """replicationTarget""", "Died on +.volumes[76].access"
    assert result.volumes[76].iqn == """iqn.2010-01.com.solidfire:4535.async-target-77.927""", "Died on +.volumes[76].iqn"
    assert result.volumes[76].slice_count == 1, "Died on +.volumes[76].slice_count"
    assert type(result.volumes[76].attributes) is dict, "Died on .volumes[76].attributes"
    assert result.volumes[76].volume_pairs[0].volume_pair_uuid == UUID("e620a4a2-bfc3-4179-a05b-e624b4b9a9af"), "Died on .volumes[76].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[76].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[76].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[76].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[76].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[76].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[76].volume_pairs[0].remote_replication.state"
    assert result.volumes[76].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[76].volume_pairs[0].remote_replication.mode"
    assert result.volumes[76].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[76].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[76].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[76].volume_pairs[0].cluster_pair_id"
    assert result.volumes[76].volume_pairs[0].remote_volume_id == 427, "Died on +.volumes[76].volume_pairs[0].remote_volume_id"
    assert result.volumes[76].volume_pairs[0].remote_volume_name == """async-source-77""", "Died on +.volumes[76].volume_pairs[0].remote_volume_name"
    assert result.volumes[76].volume_pairs[0].remote_slice_id == 427, "Died on +.volumes[76].volume_pairs[0].remote_slice_id"
    assert result.volumes[76].account_id == 6, "Died on +.volumes[76].account_id"
    assert result.volumes[76].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[76].create_time"
    assert result.volumes[76].virtual_volume_id is None, "Died on .volumes[76].virtual_volume_id"
    assert result.volumes[75].status == """active""", "Died on +.volumes[75].status"
    assert result.volumes[75].enable512e == False, "Died on +.volumes[75].enable512e"
    assert result.volumes[75].qos.burst_iops == 15000, "Died on +.volumes[75].qos.burst_iops"
    assert result.volumes[75].qos.burst_time == 60, "Died on +.volumes[75].qos.burst_time"
    assert result.volumes[75].qos.min_iops == 100, "Died on +.volumes[75].qos.min_iops"
    assert result.volumes[75].qos.max_iops == 15000, "Died on +.volumes[75].qos.max_iops"
    assert result.volumes[75].name == """async-target-76""", "Died on +.volumes[75].name"
    assert result.volumes[75].volume_access_groups[0] == 7, "Died on +.volumes[75].volume_access_groups[0]"
    assert result.volumes[75].scsi_naadevice_id == """6f47acc100000000343533350000039e""", "Died on +.volumes[75].scsi_naadevice_id"
    assert result.volumes[75].total_size == 5000658944, "Died on +.volumes[75].total_size"
    assert result.volumes[75].block_size == 4096, "Died on +.volumes[75].block_size"
    assert result.volumes[75].scsi_euidevice_id == """343533350000039ef47acc0100000000""", "Died on +.volumes[75].scsi_euidevice_id"
    assert result.volumes[75].volume_id == 926, "Died on +.volumes[75].volume_id"
    assert result.volumes[75].access == """replicationTarget""", "Died on +.volumes[75].access"
    assert result.volumes[75].iqn == """iqn.2010-01.com.solidfire:4535.async-target-76.926""", "Died on +.volumes[75].iqn"
    assert result.volumes[75].slice_count == 1, "Died on +.volumes[75].slice_count"
    assert type(result.volumes[75].attributes) is dict, "Died on .volumes[75].attributes"
    assert result.volumes[75].volume_pairs[0].volume_pair_uuid == UUID("60efe220-a83e-4fb9-93b3-2018cdb29371"), "Died on .volumes[75].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[75].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[75].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[75].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[75].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[75].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[75].volume_pairs[0].remote_replication.state"
    assert result.volumes[75].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[75].volume_pairs[0].remote_replication.mode"
    assert result.volumes[75].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[75].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[75].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[75].volume_pairs[0].cluster_pair_id"
    assert result.volumes[75].volume_pairs[0].remote_volume_id == 426, "Died on +.volumes[75].volume_pairs[0].remote_volume_id"
    assert result.volumes[75].volume_pairs[0].remote_volume_name == """async-source-76""", "Died on +.volumes[75].volume_pairs[0].remote_volume_name"
    assert result.volumes[75].volume_pairs[0].remote_slice_id == 426, "Died on +.volumes[75].volume_pairs[0].remote_slice_id"
    assert result.volumes[75].account_id == 6, "Died on +.volumes[75].account_id"
    assert result.volumes[75].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[75].create_time"
    assert result.volumes[75].virtual_volume_id is None, "Died on .volumes[75].virtual_volume_id"
    assert result.volumes[74].status == """active""", "Died on +.volumes[74].status"
    assert result.volumes[74].enable512e == False, "Died on +.volumes[74].enable512e"
    assert result.volumes[74].qos.burst_iops == 15000, "Died on +.volumes[74].qos.burst_iops"
    assert result.volumes[74].qos.burst_time == 60, "Died on +.volumes[74].qos.burst_time"
    assert result.volumes[74].qos.min_iops == 100, "Died on +.volumes[74].qos.min_iops"
    assert result.volumes[74].qos.max_iops == 15000, "Died on +.volumes[74].qos.max_iops"
    assert result.volumes[74].name == """async-target-75""", "Died on +.volumes[74].name"
    assert result.volumes[74].volume_access_groups[0] == 7, "Died on +.volumes[74].volume_access_groups[0]"
    assert result.volumes[74].scsi_naadevice_id == """6f47acc100000000343533350000039d""", "Died on +.volumes[74].scsi_naadevice_id"
    assert result.volumes[74].total_size == 5000658944, "Died on +.volumes[74].total_size"
    assert result.volumes[74].block_size == 4096, "Died on +.volumes[74].block_size"
    assert result.volumes[74].scsi_euidevice_id == """343533350000039df47acc0100000000""", "Died on +.volumes[74].scsi_euidevice_id"
    assert result.volumes[74].volume_id == 925, "Died on +.volumes[74].volume_id"
    assert result.volumes[74].access == """replicationTarget""", "Died on +.volumes[74].access"
    assert result.volumes[74].iqn == """iqn.2010-01.com.solidfire:4535.async-target-75.925""", "Died on +.volumes[74].iqn"
    assert result.volumes[74].slice_count == 1, "Died on +.volumes[74].slice_count"
    assert type(result.volumes[74].attributes) is dict, "Died on .volumes[74].attributes"
    assert result.volumes[74].volume_pairs[0].volume_pair_uuid == UUID("01aee291-0ef3-4f1c-9ee9-f320c623b8f6"), "Died on .volumes[74].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[74].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[74].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[74].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[74].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[74].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[74].volume_pairs[0].remote_replication.state"
    assert result.volumes[74].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[74].volume_pairs[0].remote_replication.mode"
    assert result.volumes[74].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[74].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[74].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[74].volume_pairs[0].cluster_pair_id"
    assert result.volumes[74].volume_pairs[0].remote_volume_id == 425, "Died on +.volumes[74].volume_pairs[0].remote_volume_id"
    assert result.volumes[74].volume_pairs[0].remote_volume_name == """async-source-75""", "Died on +.volumes[74].volume_pairs[0].remote_volume_name"
    assert result.volumes[74].volume_pairs[0].remote_slice_id == 425, "Died on +.volumes[74].volume_pairs[0].remote_slice_id"
    assert result.volumes[74].account_id == 6, "Died on +.volumes[74].account_id"
    assert result.volumes[74].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[74].create_time"
    assert result.volumes[74].virtual_volume_id is None, "Died on .volumes[74].virtual_volume_id"
    assert result.volumes[73].status == """active""", "Died on +.volumes[73].status"
    assert result.volumes[73].enable512e == False, "Died on +.volumes[73].enable512e"
    assert result.volumes[73].qos.burst_iops == 15000, "Died on +.volumes[73].qos.burst_iops"
    assert result.volumes[73].qos.burst_time == 60, "Died on +.volumes[73].qos.burst_time"
    assert result.volumes[73].qos.min_iops == 100, "Died on +.volumes[73].qos.min_iops"
    assert result.volumes[73].qos.max_iops == 15000, "Died on +.volumes[73].qos.max_iops"
    assert result.volumes[73].name == """async-target-74""", "Died on +.volumes[73].name"
    assert result.volumes[73].volume_access_groups[0] == 7, "Died on +.volumes[73].volume_access_groups[0]"
    assert result.volumes[73].scsi_naadevice_id == """6f47acc100000000343533350000039c""", "Died on +.volumes[73].scsi_naadevice_id"
    assert result.volumes[73].total_size == 5000658944, "Died on +.volumes[73].total_size"
    assert result.volumes[73].block_size == 4096, "Died on +.volumes[73].block_size"
    assert result.volumes[73].scsi_euidevice_id == """343533350000039cf47acc0100000000""", "Died on +.volumes[73].scsi_euidevice_id"
    assert result.volumes[73].volume_id == 924, "Died on +.volumes[73].volume_id"
    assert result.volumes[73].access == """replicationTarget""", "Died on +.volumes[73].access"
    assert result.volumes[73].iqn == """iqn.2010-01.com.solidfire:4535.async-target-74.924""", "Died on +.volumes[73].iqn"
    assert result.volumes[73].slice_count == 1, "Died on +.volumes[73].slice_count"
    assert type(result.volumes[73].attributes) is dict, "Died on .volumes[73].attributes"
    assert result.volumes[73].volume_pairs[0].volume_pair_uuid == UUID("12a07d0d-d8cb-4314-88ef-ced395345351"), "Died on .volumes[73].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[73].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[73].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[73].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[73].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[73].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[73].volume_pairs[0].remote_replication.state"
    assert result.volumes[73].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[73].volume_pairs[0].remote_replication.mode"
    assert result.volumes[73].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[73].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[73].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[73].volume_pairs[0].cluster_pair_id"
    assert result.volumes[73].volume_pairs[0].remote_volume_id == 424, "Died on +.volumes[73].volume_pairs[0].remote_volume_id"
    assert result.volumes[73].volume_pairs[0].remote_volume_name == """async-source-74""", "Died on +.volumes[73].volume_pairs[0].remote_volume_name"
    assert result.volumes[73].volume_pairs[0].remote_slice_id == 424, "Died on +.volumes[73].volume_pairs[0].remote_slice_id"
    assert result.volumes[73].account_id == 6, "Died on +.volumes[73].account_id"
    assert result.volumes[73].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[73].create_time"
    assert result.volumes[73].virtual_volume_id is None, "Died on .volumes[73].virtual_volume_id"
    assert result.volumes[72].status == """active""", "Died on +.volumes[72].status"
    assert result.volumes[72].enable512e == False, "Died on +.volumes[72].enable512e"
    assert result.volumes[72].qos.burst_iops == 15000, "Died on +.volumes[72].qos.burst_iops"
    assert result.volumes[72].qos.burst_time == 60, "Died on +.volumes[72].qos.burst_time"
    assert result.volumes[72].qos.min_iops == 100, "Died on +.volumes[72].qos.min_iops"
    assert result.volumes[72].qos.max_iops == 15000, "Died on +.volumes[72].qos.max_iops"
    assert result.volumes[72].name == """async-target-73""", "Died on +.volumes[72].name"
    assert result.volumes[72].volume_access_groups[0] == 7, "Died on +.volumes[72].volume_access_groups[0]"
    assert result.volumes[72].scsi_naadevice_id == """6f47acc100000000343533350000039b""", "Died on +.volumes[72].scsi_naadevice_id"
    assert result.volumes[72].total_size == 5000658944, "Died on +.volumes[72].total_size"
    assert result.volumes[72].block_size == 4096, "Died on +.volumes[72].block_size"
    assert result.volumes[72].scsi_euidevice_id == """343533350000039bf47acc0100000000""", "Died on +.volumes[72].scsi_euidevice_id"
    assert result.volumes[72].volume_id == 923, "Died on +.volumes[72].volume_id"
    assert result.volumes[72].access == """replicationTarget""", "Died on +.volumes[72].access"
    assert result.volumes[72].iqn == """iqn.2010-01.com.solidfire:4535.async-target-73.923""", "Died on +.volumes[72].iqn"
    assert result.volumes[72].slice_count == 1, "Died on +.volumes[72].slice_count"
    assert type(result.volumes[72].attributes) is dict, "Died on .volumes[72].attributes"
    assert result.volumes[72].volume_pairs[0].volume_pair_uuid == UUID("61252f4a-a7fa-4028-b32d-b30ca92e2ffa"), "Died on .volumes[72].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[72].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[72].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[72].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[72].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[72].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[72].volume_pairs[0].remote_replication.state"
    assert result.volumes[72].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[72].volume_pairs[0].remote_replication.mode"
    assert result.volumes[72].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[72].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[72].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[72].volume_pairs[0].cluster_pair_id"
    assert result.volumes[72].volume_pairs[0].remote_volume_id == 423, "Died on +.volumes[72].volume_pairs[0].remote_volume_id"
    assert result.volumes[72].volume_pairs[0].remote_volume_name == """async-source-73""", "Died on +.volumes[72].volume_pairs[0].remote_volume_name"
    assert result.volumes[72].volume_pairs[0].remote_slice_id == 423, "Died on +.volumes[72].volume_pairs[0].remote_slice_id"
    assert result.volumes[72].account_id == 6, "Died on +.volumes[72].account_id"
    assert result.volumes[72].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[72].create_time"
    assert result.volumes[72].virtual_volume_id is None, "Died on .volumes[72].virtual_volume_id"
    assert result.volumes[71].status == """active""", "Died on +.volumes[71].status"
    assert result.volumes[71].enable512e == False, "Died on +.volumes[71].enable512e"
    assert result.volumes[71].qos.burst_iops == 15000, "Died on +.volumes[71].qos.burst_iops"
    assert result.volumes[71].qos.burst_time == 60, "Died on +.volumes[71].qos.burst_time"
    assert result.volumes[71].qos.min_iops == 100, "Died on +.volumes[71].qos.min_iops"
    assert result.volumes[71].qos.max_iops == 15000, "Died on +.volumes[71].qos.max_iops"
    assert result.volumes[71].name == """async-target-72""", "Died on +.volumes[71].name"
    assert result.volumes[71].volume_access_groups[0] == 7, "Died on +.volumes[71].volume_access_groups[0]"
    assert result.volumes[71].scsi_naadevice_id == """6f47acc100000000343533350000039a""", "Died on +.volumes[71].scsi_naadevice_id"
    assert result.volumes[71].total_size == 5000658944, "Died on +.volumes[71].total_size"
    assert result.volumes[71].block_size == 4096, "Died on +.volumes[71].block_size"
    assert result.volumes[71].scsi_euidevice_id == """343533350000039af47acc0100000000""", "Died on +.volumes[71].scsi_euidevice_id"
    assert result.volumes[71].volume_id == 922, "Died on +.volumes[71].volume_id"
    assert result.volumes[71].access == """replicationTarget""", "Died on +.volumes[71].access"
    assert result.volumes[71].iqn == """iqn.2010-01.com.solidfire:4535.async-target-72.922""", "Died on +.volumes[71].iqn"
    assert result.volumes[71].slice_count == 1, "Died on +.volumes[71].slice_count"
    assert type(result.volumes[71].attributes) is dict, "Died on .volumes[71].attributes"
    assert result.volumes[71].volume_pairs[0].volume_pair_uuid == UUID("03787c30-e701-42ae-a66c-fdc0d4a10c15"), "Died on .volumes[71].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[71].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[71].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[71].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[71].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[71].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[71].volume_pairs[0].remote_replication.state"
    assert result.volumes[71].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[71].volume_pairs[0].remote_replication.mode"
    assert result.volumes[71].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[71].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[71].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[71].volume_pairs[0].cluster_pair_id"
    assert result.volumes[71].volume_pairs[0].remote_volume_id == 422, "Died on +.volumes[71].volume_pairs[0].remote_volume_id"
    assert result.volumes[71].volume_pairs[0].remote_volume_name == """async-source-72""", "Died on +.volumes[71].volume_pairs[0].remote_volume_name"
    assert result.volumes[71].volume_pairs[0].remote_slice_id == 422, "Died on +.volumes[71].volume_pairs[0].remote_slice_id"
    assert result.volumes[71].account_id == 6, "Died on +.volumes[71].account_id"
    assert result.volumes[71].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[71].create_time"
    assert result.volumes[71].virtual_volume_id is None, "Died on .volumes[71].virtual_volume_id"
    assert result.volumes[70].status == """active""", "Died on +.volumes[70].status"
    assert result.volumes[70].enable512e == False, "Died on +.volumes[70].enable512e"
    assert result.volumes[70].qos.burst_iops == 15000, "Died on +.volumes[70].qos.burst_iops"
    assert result.volumes[70].qos.burst_time == 60, "Died on +.volumes[70].qos.burst_time"
    assert result.volumes[70].qos.min_iops == 100, "Died on +.volumes[70].qos.min_iops"
    assert result.volumes[70].qos.max_iops == 15000, "Died on +.volumes[70].qos.max_iops"
    assert result.volumes[70].name == """async-target-71""", "Died on +.volumes[70].name"
    assert result.volumes[70].volume_access_groups[0] == 7, "Died on +.volumes[70].volume_access_groups[0]"
    assert result.volumes[70].scsi_naadevice_id == """6f47acc1000000003435333500000399""", "Died on +.volumes[70].scsi_naadevice_id"
    assert result.volumes[70].total_size == 5000658944, "Died on +.volumes[70].total_size"
    assert result.volumes[70].block_size == 4096, "Died on +.volumes[70].block_size"
    assert result.volumes[70].scsi_euidevice_id == """3435333500000399f47acc0100000000""", "Died on +.volumes[70].scsi_euidevice_id"
    assert result.volumes[70].volume_id == 921, "Died on +.volumes[70].volume_id"
    assert result.volumes[70].access == """replicationTarget""", "Died on +.volumes[70].access"
    assert result.volumes[70].iqn == """iqn.2010-01.com.solidfire:4535.async-target-71.921""", "Died on +.volumes[70].iqn"
    assert result.volumes[70].slice_count == 1, "Died on +.volumes[70].slice_count"
    assert type(result.volumes[70].attributes) is dict, "Died on .volumes[70].attributes"
    assert result.volumes[70].volume_pairs[0].volume_pair_uuid == UUID("0e9daf8a-ddff-496c-aae4-8fffbca75f3a"), "Died on .volumes[70].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[70].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[70].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[70].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[70].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[70].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[70].volume_pairs[0].remote_replication.state"
    assert result.volumes[70].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[70].volume_pairs[0].remote_replication.mode"
    assert result.volumes[70].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[70].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[70].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[70].volume_pairs[0].cluster_pair_id"
    assert result.volumes[70].volume_pairs[0].remote_volume_id == 421, "Died on +.volumes[70].volume_pairs[0].remote_volume_id"
    assert result.volumes[70].volume_pairs[0].remote_volume_name == """async-source-71""", "Died on +.volumes[70].volume_pairs[0].remote_volume_name"
    assert result.volumes[70].volume_pairs[0].remote_slice_id == 421, "Died on +.volumes[70].volume_pairs[0].remote_slice_id"
    assert result.volumes[70].account_id == 6, "Died on +.volumes[70].account_id"
    assert result.volumes[70].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[70].create_time"
    assert result.volumes[70].virtual_volume_id is None, "Died on .volumes[70].virtual_volume_id"
    assert result.volumes[69].status == """active""", "Died on +.volumes[69].status"
    assert result.volumes[69].enable512e == False, "Died on +.volumes[69].enable512e"
    assert result.volumes[69].qos.burst_iops == 15000, "Died on +.volumes[69].qos.burst_iops"
    assert result.volumes[69].qos.burst_time == 60, "Died on +.volumes[69].qos.burst_time"
    assert result.volumes[69].qos.min_iops == 100, "Died on +.volumes[69].qos.min_iops"
    assert result.volumes[69].qos.max_iops == 15000, "Died on +.volumes[69].qos.max_iops"
    assert result.volumes[69].name == """async-target-70""", "Died on +.volumes[69].name"
    assert result.volumes[69].volume_access_groups[0] == 7, "Died on +.volumes[69].volume_access_groups[0]"
    assert result.volumes[69].scsi_naadevice_id == """6f47acc1000000003435333500000398""", "Died on +.volumes[69].scsi_naadevice_id"
    assert result.volumes[69].total_size == 5000658944, "Died on +.volumes[69].total_size"
    assert result.volumes[69].block_size == 4096, "Died on +.volumes[69].block_size"
    assert result.volumes[69].scsi_euidevice_id == """3435333500000398f47acc0100000000""", "Died on +.volumes[69].scsi_euidevice_id"
    assert result.volumes[69].volume_id == 920, "Died on +.volumes[69].volume_id"
    assert result.volumes[69].access == """replicationTarget""", "Died on +.volumes[69].access"
    assert result.volumes[69].iqn == """iqn.2010-01.com.solidfire:4535.async-target-70.920""", "Died on +.volumes[69].iqn"
    assert result.volumes[69].slice_count == 1, "Died on +.volumes[69].slice_count"
    assert type(result.volumes[69].attributes) is dict, "Died on .volumes[69].attributes"
    assert result.volumes[69].volume_pairs[0].volume_pair_uuid == UUID("8cb5e342-53ea-475b-8add-50653e536d8c"), "Died on .volumes[69].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[69].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[69].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[69].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[69].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[69].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[69].volume_pairs[0].remote_replication.state"
    assert result.volumes[69].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[69].volume_pairs[0].remote_replication.mode"
    assert result.volumes[69].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[69].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[69].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[69].volume_pairs[0].cluster_pair_id"
    assert result.volumes[69].volume_pairs[0].remote_volume_id == 420, "Died on +.volumes[69].volume_pairs[0].remote_volume_id"
    assert result.volumes[69].volume_pairs[0].remote_volume_name == """async-source-70""", "Died on +.volumes[69].volume_pairs[0].remote_volume_name"
    assert result.volumes[69].volume_pairs[0].remote_slice_id == 420, "Died on +.volumes[69].volume_pairs[0].remote_slice_id"
    assert result.volumes[69].account_id == 6, "Died on +.volumes[69].account_id"
    assert result.volumes[69].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[69].create_time"
    assert result.volumes[69].virtual_volume_id is None, "Died on .volumes[69].virtual_volume_id"
    assert result.volumes[68].status == """active""", "Died on +.volumes[68].status"
    assert result.volumes[68].enable512e == False, "Died on +.volumes[68].enable512e"
    assert result.volumes[68].qos.burst_iops == 15000, "Died on +.volumes[68].qos.burst_iops"
    assert result.volumes[68].qos.burst_time == 60, "Died on +.volumes[68].qos.burst_time"
    assert result.volumes[68].qos.min_iops == 100, "Died on +.volumes[68].qos.min_iops"
    assert result.volumes[68].qos.max_iops == 15000, "Died on +.volumes[68].qos.max_iops"
    assert result.volumes[68].name == """async-target-69""", "Died on +.volumes[68].name"
    assert result.volumes[68].volume_access_groups[0] == 7, "Died on +.volumes[68].volume_access_groups[0]"
    assert result.volumes[68].scsi_naadevice_id == """6f47acc1000000003435333500000397""", "Died on +.volumes[68].scsi_naadevice_id"
    assert result.volumes[68].total_size == 5000658944, "Died on +.volumes[68].total_size"
    assert result.volumes[68].block_size == 4096, "Died on +.volumes[68].block_size"
    assert result.volumes[68].scsi_euidevice_id == """3435333500000397f47acc0100000000""", "Died on +.volumes[68].scsi_euidevice_id"
    assert result.volumes[68].volume_id == 919, "Died on +.volumes[68].volume_id"
    assert result.volumes[68].access == """replicationTarget""", "Died on +.volumes[68].access"
    assert result.volumes[68].iqn == """iqn.2010-01.com.solidfire:4535.async-target-69.919""", "Died on +.volumes[68].iqn"
    assert result.volumes[68].slice_count == 1, "Died on +.volumes[68].slice_count"
    assert type(result.volumes[68].attributes) is dict, "Died on .volumes[68].attributes"
    assert result.volumes[68].volume_pairs[0].volume_pair_uuid == UUID("2b08cf38-cdac-483d-a7e9-db756bf54588"), "Died on .volumes[68].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[68].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[68].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[68].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[68].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[68].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[68].volume_pairs[0].remote_replication.state"
    assert result.volumes[68].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[68].volume_pairs[0].remote_replication.mode"
    assert result.volumes[68].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[68].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[68].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[68].volume_pairs[0].cluster_pair_id"
    assert result.volumes[68].volume_pairs[0].remote_volume_id == 419, "Died on +.volumes[68].volume_pairs[0].remote_volume_id"
    assert result.volumes[68].volume_pairs[0].remote_volume_name == """async-source-69""", "Died on +.volumes[68].volume_pairs[0].remote_volume_name"
    assert result.volumes[68].volume_pairs[0].remote_slice_id == 419, "Died on +.volumes[68].volume_pairs[0].remote_slice_id"
    assert result.volumes[68].account_id == 6, "Died on +.volumes[68].account_id"
    assert result.volumes[68].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[68].create_time"
    assert result.volumes[68].virtual_volume_id is None, "Died on .volumes[68].virtual_volume_id"
    assert result.volumes[67].status == """active""", "Died on +.volumes[67].status"
    assert result.volumes[67].enable512e == False, "Died on +.volumes[67].enable512e"
    assert result.volumes[67].qos.burst_iops == 15000, "Died on +.volumes[67].qos.burst_iops"
    assert result.volumes[67].qos.burst_time == 60, "Died on +.volumes[67].qos.burst_time"
    assert result.volumes[67].qos.min_iops == 100, "Died on +.volumes[67].qos.min_iops"
    assert result.volumes[67].qos.max_iops == 15000, "Died on +.volumes[67].qos.max_iops"
    assert result.volumes[67].name == """async-target-68""", "Died on +.volumes[67].name"
    assert result.volumes[67].volume_access_groups[0] == 7, "Died on +.volumes[67].volume_access_groups[0]"
    assert result.volumes[67].scsi_naadevice_id == """6f47acc1000000003435333500000396""", "Died on +.volumes[67].scsi_naadevice_id"
    assert result.volumes[67].total_size == 5000658944, "Died on +.volumes[67].total_size"
    assert result.volumes[67].block_size == 4096, "Died on +.volumes[67].block_size"
    assert result.volumes[67].scsi_euidevice_id == """3435333500000396f47acc0100000000""", "Died on +.volumes[67].scsi_euidevice_id"
    assert result.volumes[67].volume_id == 918, "Died on +.volumes[67].volume_id"
    assert result.volumes[67].access == """replicationTarget""", "Died on +.volumes[67].access"
    assert result.volumes[67].iqn == """iqn.2010-01.com.solidfire:4535.async-target-68.918""", "Died on +.volumes[67].iqn"
    assert result.volumes[67].slice_count == 1, "Died on +.volumes[67].slice_count"
    assert type(result.volumes[67].attributes) is dict, "Died on .volumes[67].attributes"
    assert result.volumes[67].volume_pairs[0].volume_pair_uuid == UUID("d88313b4-ef9a-4a18-b700-85116c2aa3cb"), "Died on .volumes[67].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[67].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[67].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[67].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[67].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[67].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[67].volume_pairs[0].remote_replication.state"
    assert result.volumes[67].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[67].volume_pairs[0].remote_replication.mode"
    assert result.volumes[67].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[67].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[67].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[67].volume_pairs[0].cluster_pair_id"
    assert result.volumes[67].volume_pairs[0].remote_volume_id == 418, "Died on +.volumes[67].volume_pairs[0].remote_volume_id"
    assert result.volumes[67].volume_pairs[0].remote_volume_name == """async-source-68""", "Died on +.volumes[67].volume_pairs[0].remote_volume_name"
    assert result.volumes[67].volume_pairs[0].remote_slice_id == 418, "Died on +.volumes[67].volume_pairs[0].remote_slice_id"
    assert result.volumes[67].account_id == 6, "Died on +.volumes[67].account_id"
    assert result.volumes[67].create_time == """2016-12-30T18:10:12Z""", "Died on +.volumes[67].create_time"
    assert result.volumes[67].virtual_volume_id is None, "Died on .volumes[67].virtual_volume_id"
    assert result.volumes[66].status == """active""", "Died on +.volumes[66].status"
    assert result.volumes[66].enable512e == False, "Died on +.volumes[66].enable512e"
    assert result.volumes[66].qos.burst_iops == 15000, "Died on +.volumes[66].qos.burst_iops"
    assert result.volumes[66].qos.burst_time == 60, "Died on +.volumes[66].qos.burst_time"
    assert result.volumes[66].qos.min_iops == 100, "Died on +.volumes[66].qos.min_iops"
    assert result.volumes[66].qos.max_iops == 15000, "Died on +.volumes[66].qos.max_iops"
    assert result.volumes[66].name == """async-target-67""", "Died on +.volumes[66].name"
    assert result.volumes[66].volume_access_groups[0] == 7, "Died on +.volumes[66].volume_access_groups[0]"
    assert result.volumes[66].scsi_naadevice_id == """6f47acc1000000003435333500000395""", "Died on +.volumes[66].scsi_naadevice_id"
    assert result.volumes[66].total_size == 5000658944, "Died on +.volumes[66].total_size"
    assert result.volumes[66].block_size == 4096, "Died on +.volumes[66].block_size"
    assert result.volumes[66].scsi_euidevice_id == """3435333500000395f47acc0100000000""", "Died on +.volumes[66].scsi_euidevice_id"
    assert result.volumes[66].volume_id == 917, "Died on +.volumes[66].volume_id"
    assert result.volumes[66].access == """replicationTarget""", "Died on +.volumes[66].access"
    assert result.volumes[66].iqn == """iqn.2010-01.com.solidfire:4535.async-target-67.917""", "Died on +.volumes[66].iqn"
    assert result.volumes[66].slice_count == 1, "Died on +.volumes[66].slice_count"
    assert type(result.volumes[66].attributes) is dict, "Died on .volumes[66].attributes"
    assert result.volumes[66].volume_pairs[0].volume_pair_uuid == UUID("d2eca197-3bbc-45a6-b04f-faa6087696a0"), "Died on .volumes[66].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[66].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[66].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[66].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[66].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[66].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[66].volume_pairs[0].remote_replication.state"
    assert result.volumes[66].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[66].volume_pairs[0].remote_replication.mode"
    assert result.volumes[66].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[66].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[66].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[66].volume_pairs[0].cluster_pair_id"
    assert result.volumes[66].volume_pairs[0].remote_volume_id == 417, "Died on +.volumes[66].volume_pairs[0].remote_volume_id"
    assert result.volumes[66].volume_pairs[0].remote_volume_name == """async-source-67""", "Died on +.volumes[66].volume_pairs[0].remote_volume_name"
    assert result.volumes[66].volume_pairs[0].remote_slice_id == 417, "Died on +.volumes[66].volume_pairs[0].remote_slice_id"
    assert result.volumes[66].account_id == 6, "Died on +.volumes[66].account_id"
    assert result.volumes[66].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[66].create_time"
    assert result.volumes[66].virtual_volume_id is None, "Died on .volumes[66].virtual_volume_id"
    assert result.volumes[65].status == """active""", "Died on +.volumes[65].status"
    assert result.volumes[65].enable512e == False, "Died on +.volumes[65].enable512e"
    assert result.volumes[65].qos.burst_iops == 15000, "Died on +.volumes[65].qos.burst_iops"
    assert result.volumes[65].qos.burst_time == 60, "Died on +.volumes[65].qos.burst_time"
    assert result.volumes[65].qos.min_iops == 100, "Died on +.volumes[65].qos.min_iops"
    assert result.volumes[65].qos.max_iops == 15000, "Died on +.volumes[65].qos.max_iops"
    assert result.volumes[65].name == """async-target-66""", "Died on +.volumes[65].name"
    assert result.volumes[65].volume_access_groups[0] == 7, "Died on +.volumes[65].volume_access_groups[0]"
    assert result.volumes[65].scsi_naadevice_id == """6f47acc1000000003435333500000394""", "Died on +.volumes[65].scsi_naadevice_id"
    assert result.volumes[65].total_size == 5000658944, "Died on +.volumes[65].total_size"
    assert result.volumes[65].block_size == 4096, "Died on +.volumes[65].block_size"
    assert result.volumes[65].scsi_euidevice_id == """3435333500000394f47acc0100000000""", "Died on +.volumes[65].scsi_euidevice_id"
    assert result.volumes[65].volume_id == 916, "Died on +.volumes[65].volume_id"
    assert result.volumes[65].access == """replicationTarget""", "Died on +.volumes[65].access"
    assert result.volumes[65].iqn == """iqn.2010-01.com.solidfire:4535.async-target-66.916""", "Died on +.volumes[65].iqn"
    assert result.volumes[65].slice_count == 1, "Died on +.volumes[65].slice_count"
    assert type(result.volumes[65].attributes) is dict, "Died on .volumes[65].attributes"
    assert result.volumes[65].volume_pairs[0].volume_pair_uuid == UUID("d71a61c8-1d7e-4615-b9eb-65e05c3ae824"), "Died on .volumes[65].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[65].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[65].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[65].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[65].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[65].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[65].volume_pairs[0].remote_replication.state"
    assert result.volumes[65].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[65].volume_pairs[0].remote_replication.mode"
    assert result.volumes[65].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[65].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[65].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[65].volume_pairs[0].cluster_pair_id"
    assert result.volumes[65].volume_pairs[0].remote_volume_id == 416, "Died on +.volumes[65].volume_pairs[0].remote_volume_id"
    assert result.volumes[65].volume_pairs[0].remote_volume_name == """async-source-66""", "Died on +.volumes[65].volume_pairs[0].remote_volume_name"
    assert result.volumes[65].volume_pairs[0].remote_slice_id == 416, "Died on +.volumes[65].volume_pairs[0].remote_slice_id"
    assert result.volumes[65].account_id == 6, "Died on +.volumes[65].account_id"
    assert result.volumes[65].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[65].create_time"
    assert result.volumes[65].virtual_volume_id is None, "Died on .volumes[65].virtual_volume_id"
    assert result.volumes[64].status == """active""", "Died on +.volumes[64].status"
    assert result.volumes[64].enable512e == False, "Died on +.volumes[64].enable512e"
    assert result.volumes[64].qos.burst_iops == 15000, "Died on +.volumes[64].qos.burst_iops"
    assert result.volumes[64].qos.burst_time == 60, "Died on +.volumes[64].qos.burst_time"
    assert result.volumes[64].qos.min_iops == 100, "Died on +.volumes[64].qos.min_iops"
    assert result.volumes[64].qos.max_iops == 15000, "Died on +.volumes[64].qos.max_iops"
    assert result.volumes[64].name == """async-target-65""", "Died on +.volumes[64].name"
    assert result.volumes[64].volume_access_groups[0] == 7, "Died on +.volumes[64].volume_access_groups[0]"
    assert result.volumes[64].scsi_naadevice_id == """6f47acc1000000003435333500000393""", "Died on +.volumes[64].scsi_naadevice_id"
    assert result.volumes[64].total_size == 5000658944, "Died on +.volumes[64].total_size"
    assert result.volumes[64].block_size == 4096, "Died on +.volumes[64].block_size"
    assert result.volumes[64].scsi_euidevice_id == """3435333500000393f47acc0100000000""", "Died on +.volumes[64].scsi_euidevice_id"
    assert result.volumes[64].volume_id == 915, "Died on +.volumes[64].volume_id"
    assert result.volumes[64].access == """replicationTarget""", "Died on +.volumes[64].access"
    assert result.volumes[64].iqn == """iqn.2010-01.com.solidfire:4535.async-target-65.915""", "Died on +.volumes[64].iqn"
    assert result.volumes[64].slice_count == 1, "Died on +.volumes[64].slice_count"
    assert type(result.volumes[64].attributes) is dict, "Died on .volumes[64].attributes"
    assert result.volumes[64].volume_pairs[0].volume_pair_uuid == UUID("23fe3e2f-5800-4415-b1d1-0fb585fac3a4"), "Died on .volumes[64].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[64].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[64].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[64].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[64].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[64].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[64].volume_pairs[0].remote_replication.state"
    assert result.volumes[64].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[64].volume_pairs[0].remote_replication.mode"
    assert result.volumes[64].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[64].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[64].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[64].volume_pairs[0].cluster_pair_id"
    assert result.volumes[64].volume_pairs[0].remote_volume_id == 415, "Died on +.volumes[64].volume_pairs[0].remote_volume_id"
    assert result.volumes[64].volume_pairs[0].remote_volume_name == """async-source-65""", "Died on +.volumes[64].volume_pairs[0].remote_volume_name"
    assert result.volumes[64].volume_pairs[0].remote_slice_id == 415, "Died on +.volumes[64].volume_pairs[0].remote_slice_id"
    assert result.volumes[64].account_id == 6, "Died on +.volumes[64].account_id"
    assert result.volumes[64].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[64].create_time"
    assert result.volumes[64].virtual_volume_id is None, "Died on .volumes[64].virtual_volume_id"
    assert result.volumes[63].status == """active""", "Died on +.volumes[63].status"
    assert result.volumes[63].enable512e == False, "Died on +.volumes[63].enable512e"
    assert result.volumes[63].qos.burst_iops == 15000, "Died on +.volumes[63].qos.burst_iops"
    assert result.volumes[63].qos.burst_time == 60, "Died on +.volumes[63].qos.burst_time"
    assert result.volumes[63].qos.min_iops == 100, "Died on +.volumes[63].qos.min_iops"
    assert result.volumes[63].qos.max_iops == 15000, "Died on +.volumes[63].qos.max_iops"
    assert result.volumes[63].name == """async-target-64""", "Died on +.volumes[63].name"
    assert result.volumes[63].volume_access_groups[0] == 7, "Died on +.volumes[63].volume_access_groups[0]"
    assert result.volumes[63].scsi_naadevice_id == """6f47acc1000000003435333500000392""", "Died on +.volumes[63].scsi_naadevice_id"
    assert result.volumes[63].total_size == 5000658944, "Died on +.volumes[63].total_size"
    assert result.volumes[63].block_size == 4096, "Died on +.volumes[63].block_size"
    assert result.volumes[63].scsi_euidevice_id == """3435333500000392f47acc0100000000""", "Died on +.volumes[63].scsi_euidevice_id"
    assert result.volumes[63].volume_id == 914, "Died on +.volumes[63].volume_id"
    assert result.volumes[63].access == """replicationTarget""", "Died on +.volumes[63].access"
    assert result.volumes[63].iqn == """iqn.2010-01.com.solidfire:4535.async-target-64.914""", "Died on +.volumes[63].iqn"
    assert result.volumes[63].slice_count == 1, "Died on +.volumes[63].slice_count"
    assert type(result.volumes[63].attributes) is dict, "Died on .volumes[63].attributes"
    assert result.volumes[63].volume_pairs[0].volume_pair_uuid == UUID("79595eed-9bd8-4d68-b8b2-53ba24e50162"), "Died on .volumes[63].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[63].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[63].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[63].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[63].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[63].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[63].volume_pairs[0].remote_replication.state"
    assert result.volumes[63].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[63].volume_pairs[0].remote_replication.mode"
    assert result.volumes[63].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[63].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[63].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[63].volume_pairs[0].cluster_pair_id"
    assert result.volumes[63].volume_pairs[0].remote_volume_id == 414, "Died on +.volumes[63].volume_pairs[0].remote_volume_id"
    assert result.volumes[63].volume_pairs[0].remote_volume_name == """async-source-64""", "Died on +.volumes[63].volume_pairs[0].remote_volume_name"
    assert result.volumes[63].volume_pairs[0].remote_slice_id == 414, "Died on +.volumes[63].volume_pairs[0].remote_slice_id"
    assert result.volumes[63].account_id == 6, "Died on +.volumes[63].account_id"
    assert result.volumes[63].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[63].create_time"
    assert result.volumes[63].virtual_volume_id is None, "Died on .volumes[63].virtual_volume_id"
    assert result.volumes[62].status == """active""", "Died on +.volumes[62].status"
    assert result.volumes[62].enable512e == False, "Died on +.volumes[62].enable512e"
    assert result.volumes[62].qos.burst_iops == 15000, "Died on +.volumes[62].qos.burst_iops"
    assert result.volumes[62].qos.burst_time == 60, "Died on +.volumes[62].qos.burst_time"
    assert result.volumes[62].qos.min_iops == 100, "Died on +.volumes[62].qos.min_iops"
    assert result.volumes[62].qos.max_iops == 15000, "Died on +.volumes[62].qos.max_iops"
    assert result.volumes[62].name == """async-target-63""", "Died on +.volumes[62].name"
    assert result.volumes[62].volume_access_groups[0] == 7, "Died on +.volumes[62].volume_access_groups[0]"
    assert result.volumes[62].scsi_naadevice_id == """6f47acc1000000003435333500000391""", "Died on +.volumes[62].scsi_naadevice_id"
    assert result.volumes[62].total_size == 5000658944, "Died on +.volumes[62].total_size"
    assert result.volumes[62].block_size == 4096, "Died on +.volumes[62].block_size"
    assert result.volumes[62].scsi_euidevice_id == """3435333500000391f47acc0100000000""", "Died on +.volumes[62].scsi_euidevice_id"
    assert result.volumes[62].volume_id == 913, "Died on +.volumes[62].volume_id"
    assert result.volumes[62].access == """replicationTarget""", "Died on +.volumes[62].access"
    assert result.volumes[62].iqn == """iqn.2010-01.com.solidfire:4535.async-target-63.913""", "Died on +.volumes[62].iqn"
    assert result.volumes[62].slice_count == 1, "Died on +.volumes[62].slice_count"
    assert type(result.volumes[62].attributes) is dict, "Died on .volumes[62].attributes"
    assert result.volumes[62].volume_pairs[0].volume_pair_uuid == UUID("2dc022e8-540a-4b45-a92e-c467a7207e52"), "Died on .volumes[62].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[62].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[62].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[62].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[62].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[62].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[62].volume_pairs[0].remote_replication.state"
    assert result.volumes[62].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[62].volume_pairs[0].remote_replication.mode"
    assert result.volumes[62].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[62].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[62].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[62].volume_pairs[0].cluster_pair_id"
    assert result.volumes[62].volume_pairs[0].remote_volume_id == 413, "Died on +.volumes[62].volume_pairs[0].remote_volume_id"
    assert result.volumes[62].volume_pairs[0].remote_volume_name == """async-source-63""", "Died on +.volumes[62].volume_pairs[0].remote_volume_name"
    assert result.volumes[62].volume_pairs[0].remote_slice_id == 413, "Died on +.volumes[62].volume_pairs[0].remote_slice_id"
    assert result.volumes[62].account_id == 6, "Died on +.volumes[62].account_id"
    assert result.volumes[62].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[62].create_time"
    assert result.volumes[62].virtual_volume_id is None, "Died on .volumes[62].virtual_volume_id"
    assert result.volumes[61].status == """active""", "Died on +.volumes[61].status"
    assert result.volumes[61].enable512e == False, "Died on +.volumes[61].enable512e"
    assert result.volumes[61].qos.burst_iops == 15000, "Died on +.volumes[61].qos.burst_iops"
    assert result.volumes[61].qos.burst_time == 60, "Died on +.volumes[61].qos.burst_time"
    assert result.volumes[61].qos.min_iops == 100, "Died on +.volumes[61].qos.min_iops"
    assert result.volumes[61].qos.max_iops == 15000, "Died on +.volumes[61].qos.max_iops"
    assert result.volumes[61].name == """async-target-62""", "Died on +.volumes[61].name"
    assert result.volumes[61].volume_access_groups[0] == 7, "Died on +.volumes[61].volume_access_groups[0]"
    assert result.volumes[61].scsi_naadevice_id == """6f47acc1000000003435333500000390""", "Died on +.volumes[61].scsi_naadevice_id"
    assert result.volumes[61].total_size == 5000658944, "Died on +.volumes[61].total_size"
    assert result.volumes[61].block_size == 4096, "Died on +.volumes[61].block_size"
    assert result.volumes[61].scsi_euidevice_id == """3435333500000390f47acc0100000000""", "Died on +.volumes[61].scsi_euidevice_id"
    assert result.volumes[61].volume_id == 912, "Died on +.volumes[61].volume_id"
    assert result.volumes[61].access == """replicationTarget""", "Died on +.volumes[61].access"
    assert result.volumes[61].iqn == """iqn.2010-01.com.solidfire:4535.async-target-62.912""", "Died on +.volumes[61].iqn"
    assert result.volumes[61].slice_count == 1, "Died on +.volumes[61].slice_count"
    assert type(result.volumes[61].attributes) is dict, "Died on .volumes[61].attributes"
    assert result.volumes[61].volume_pairs[0].volume_pair_uuid == UUID("3c78ca50-3b2a-4565-a47b-9a63a7a52948"), "Died on .volumes[61].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[61].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[61].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[61].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[61].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[61].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[61].volume_pairs[0].remote_replication.state"
    assert result.volumes[61].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[61].volume_pairs[0].remote_replication.mode"
    assert result.volumes[61].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[61].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[61].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[61].volume_pairs[0].cluster_pair_id"
    assert result.volumes[61].volume_pairs[0].remote_volume_id == 412, "Died on +.volumes[61].volume_pairs[0].remote_volume_id"
    assert result.volumes[61].volume_pairs[0].remote_volume_name == """async-source-62""", "Died on +.volumes[61].volume_pairs[0].remote_volume_name"
    assert result.volumes[61].volume_pairs[0].remote_slice_id == 412, "Died on +.volumes[61].volume_pairs[0].remote_slice_id"
    assert result.volumes[61].account_id == 6, "Died on +.volumes[61].account_id"
    assert result.volumes[61].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[61].create_time"
    assert result.volumes[61].virtual_volume_id is None, "Died on .volumes[61].virtual_volume_id"
    assert result.volumes[60].status == """active""", "Died on +.volumes[60].status"
    assert result.volumes[60].enable512e == False, "Died on +.volumes[60].enable512e"
    assert result.volumes[60].qos.burst_iops == 15000, "Died on +.volumes[60].qos.burst_iops"
    assert result.volumes[60].qos.burst_time == 60, "Died on +.volumes[60].qos.burst_time"
    assert result.volumes[60].qos.min_iops == 100, "Died on +.volumes[60].qos.min_iops"
    assert result.volumes[60].qos.max_iops == 15000, "Died on +.volumes[60].qos.max_iops"
    assert result.volumes[60].name == """async-target-61""", "Died on +.volumes[60].name"
    assert result.volumes[60].volume_access_groups[0] == 7, "Died on +.volumes[60].volume_access_groups[0]"
    assert result.volumes[60].scsi_naadevice_id == """6f47acc100000000343533350000038f""", "Died on +.volumes[60].scsi_naadevice_id"
    assert result.volumes[60].total_size == 5000658944, "Died on +.volumes[60].total_size"
    assert result.volumes[60].block_size == 4096, "Died on +.volumes[60].block_size"
    assert result.volumes[60].scsi_euidevice_id == """343533350000038ff47acc0100000000""", "Died on +.volumes[60].scsi_euidevice_id"
    assert result.volumes[60].volume_id == 911, "Died on +.volumes[60].volume_id"
    assert result.volumes[60].access == """replicationTarget""", "Died on +.volumes[60].access"
    assert result.volumes[60].iqn == """iqn.2010-01.com.solidfire:4535.async-target-61.911""", "Died on +.volumes[60].iqn"
    assert result.volumes[60].slice_count == 1, "Died on +.volumes[60].slice_count"
    assert type(result.volumes[60].attributes) is dict, "Died on .volumes[60].attributes"
    assert result.volumes[60].volume_pairs[0].volume_pair_uuid == UUID("fe73f803-49d0-4ecf-aa4f-50028d8d1a7d"), "Died on .volumes[60].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[60].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[60].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[60].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[60].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[60].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[60].volume_pairs[0].remote_replication.state"
    assert result.volumes[60].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[60].volume_pairs[0].remote_replication.mode"
    assert result.volumes[60].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[60].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[60].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[60].volume_pairs[0].cluster_pair_id"
    assert result.volumes[60].volume_pairs[0].remote_volume_id == 411, "Died on +.volumes[60].volume_pairs[0].remote_volume_id"
    assert result.volumes[60].volume_pairs[0].remote_volume_name == """async-source-61""", "Died on +.volumes[60].volume_pairs[0].remote_volume_name"
    assert result.volumes[60].volume_pairs[0].remote_slice_id == 411, "Died on +.volumes[60].volume_pairs[0].remote_slice_id"
    assert result.volumes[60].account_id == 6, "Died on +.volumes[60].account_id"
    assert result.volumes[60].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[60].create_time"
    assert result.volumes[60].virtual_volume_id is None, "Died on .volumes[60].virtual_volume_id"
    assert result.volumes[59].status == """active""", "Died on +.volumes[59].status"
    assert result.volumes[59].enable512e == False, "Died on +.volumes[59].enable512e"
    assert result.volumes[59].qos.burst_iops == 15000, "Died on +.volumes[59].qos.burst_iops"
    assert result.volumes[59].qos.burst_time == 60, "Died on +.volumes[59].qos.burst_time"
    assert result.volumes[59].qos.min_iops == 100, "Died on +.volumes[59].qos.min_iops"
    assert result.volumes[59].qos.max_iops == 15000, "Died on +.volumes[59].qos.max_iops"
    assert result.volumes[59].name == """async-target-60""", "Died on +.volumes[59].name"
    assert result.volumes[59].volume_access_groups[0] == 7, "Died on +.volumes[59].volume_access_groups[0]"
    assert result.volumes[59].scsi_naadevice_id == """6f47acc100000000343533350000038e""", "Died on +.volumes[59].scsi_naadevice_id"
    assert result.volumes[59].total_size == 5000658944, "Died on +.volumes[59].total_size"
    assert result.volumes[59].block_size == 4096, "Died on +.volumes[59].block_size"
    assert result.volumes[59].scsi_euidevice_id == """343533350000038ef47acc0100000000""", "Died on +.volumes[59].scsi_euidevice_id"
    assert result.volumes[59].volume_id == 910, "Died on +.volumes[59].volume_id"
    assert result.volumes[59].access == """replicationTarget""", "Died on +.volumes[59].access"
    assert result.volumes[59].iqn == """iqn.2010-01.com.solidfire:4535.async-target-60.910""", "Died on +.volumes[59].iqn"
    assert result.volumes[59].slice_count == 1, "Died on +.volumes[59].slice_count"
    assert type(result.volumes[59].attributes) is dict, "Died on .volumes[59].attributes"
    assert result.volumes[59].volume_pairs[0].volume_pair_uuid == UUID("9f81a748-d36d-4093-a4e6-af8123b07bad"), "Died on .volumes[59].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[59].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[59].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[59].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[59].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[59].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[59].volume_pairs[0].remote_replication.state"
    assert result.volumes[59].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[59].volume_pairs[0].remote_replication.mode"
    assert result.volumes[59].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[59].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[59].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[59].volume_pairs[0].cluster_pair_id"
    assert result.volumes[59].volume_pairs[0].remote_volume_id == 410, "Died on +.volumes[59].volume_pairs[0].remote_volume_id"
    assert result.volumes[59].volume_pairs[0].remote_volume_name == """async-source-60""", "Died on +.volumes[59].volume_pairs[0].remote_volume_name"
    assert result.volumes[59].volume_pairs[0].remote_slice_id == 410, "Died on +.volumes[59].volume_pairs[0].remote_slice_id"
    assert result.volumes[59].account_id == 6, "Died on +.volumes[59].account_id"
    assert result.volumes[59].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[59].create_time"
    assert result.volumes[59].virtual_volume_id is None, "Died on .volumes[59].virtual_volume_id"
    assert result.volumes[58].status == """active""", "Died on +.volumes[58].status"
    assert result.volumes[58].enable512e == False, "Died on +.volumes[58].enable512e"
    assert result.volumes[58].qos.burst_iops == 15000, "Died on +.volumes[58].qos.burst_iops"
    assert result.volumes[58].qos.burst_time == 60, "Died on +.volumes[58].qos.burst_time"
    assert result.volumes[58].qos.min_iops == 100, "Died on +.volumes[58].qos.min_iops"
    assert result.volumes[58].qos.max_iops == 15000, "Died on +.volumes[58].qos.max_iops"
    assert result.volumes[58].name == """async-target-59""", "Died on +.volumes[58].name"
    assert result.volumes[58].volume_access_groups[0] == 7, "Died on +.volumes[58].volume_access_groups[0]"
    assert result.volumes[58].scsi_naadevice_id == """6f47acc100000000343533350000038d""", "Died on +.volumes[58].scsi_naadevice_id"
    assert result.volumes[58].total_size == 5000658944, "Died on +.volumes[58].total_size"
    assert result.volumes[58].block_size == 4096, "Died on +.volumes[58].block_size"
    assert result.volumes[58].scsi_euidevice_id == """343533350000038df47acc0100000000""", "Died on +.volumes[58].scsi_euidevice_id"
    assert result.volumes[58].volume_id == 909, "Died on +.volumes[58].volume_id"
    assert result.volumes[58].access == """replicationTarget""", "Died on +.volumes[58].access"
    assert result.volumes[58].iqn == """iqn.2010-01.com.solidfire:4535.async-target-59.909""", "Died on +.volumes[58].iqn"
    assert result.volumes[58].slice_count == 1, "Died on +.volumes[58].slice_count"
    assert type(result.volumes[58].attributes) is dict, "Died on .volumes[58].attributes"
    assert result.volumes[58].volume_pairs[0].volume_pair_uuid == UUID("553b7fa9-987a-4284-8acb-220b5ef70cb6"), "Died on .volumes[58].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[58].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[58].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[58].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[58].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[58].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[58].volume_pairs[0].remote_replication.state"
    assert result.volumes[58].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[58].volume_pairs[0].remote_replication.mode"
    assert result.volumes[58].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[58].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[58].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[58].volume_pairs[0].cluster_pair_id"
    assert result.volumes[58].volume_pairs[0].remote_volume_id == 409, "Died on +.volumes[58].volume_pairs[0].remote_volume_id"
    assert result.volumes[58].volume_pairs[0].remote_volume_name == """async-source-59""", "Died on +.volumes[58].volume_pairs[0].remote_volume_name"
    assert result.volumes[58].volume_pairs[0].remote_slice_id == 409, "Died on +.volumes[58].volume_pairs[0].remote_slice_id"
    assert result.volumes[58].account_id == 6, "Died on +.volumes[58].account_id"
    assert result.volumes[58].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[58].create_time"
    assert result.volumes[58].virtual_volume_id is None, "Died on .volumes[58].virtual_volume_id"
    assert result.volumes[57].status == """active""", "Died on +.volumes[57].status"
    assert result.volumes[57].enable512e == False, "Died on +.volumes[57].enable512e"
    assert result.volumes[57].qos.burst_iops == 15000, "Died on +.volumes[57].qos.burst_iops"
    assert result.volumes[57].qos.burst_time == 60, "Died on +.volumes[57].qos.burst_time"
    assert result.volumes[57].qos.min_iops == 100, "Died on +.volumes[57].qos.min_iops"
    assert result.volumes[57].qos.max_iops == 15000, "Died on +.volumes[57].qos.max_iops"
    assert result.volumes[57].name == """async-target-58""", "Died on +.volumes[57].name"
    assert result.volumes[57].volume_access_groups[0] == 7, "Died on +.volumes[57].volume_access_groups[0]"
    assert result.volumes[57].scsi_naadevice_id == """6f47acc100000000343533350000038c""", "Died on +.volumes[57].scsi_naadevice_id"
    assert result.volumes[57].total_size == 5000658944, "Died on +.volumes[57].total_size"
    assert result.volumes[57].block_size == 4096, "Died on +.volumes[57].block_size"
    assert result.volumes[57].scsi_euidevice_id == """343533350000038cf47acc0100000000""", "Died on +.volumes[57].scsi_euidevice_id"
    assert result.volumes[57].volume_id == 908, "Died on +.volumes[57].volume_id"
    assert result.volumes[57].access == """replicationTarget""", "Died on +.volumes[57].access"
    assert result.volumes[57].iqn == """iqn.2010-01.com.solidfire:4535.async-target-58.908""", "Died on +.volumes[57].iqn"
    assert result.volumes[57].slice_count == 1, "Died on +.volumes[57].slice_count"
    assert type(result.volumes[57].attributes) is dict, "Died on .volumes[57].attributes"
    assert result.volumes[57].volume_pairs[0].volume_pair_uuid == UUID("c3e751b8-23c5-4605-b781-f57bd26bd2e4"), "Died on .volumes[57].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[57].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[57].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[57].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[57].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[57].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[57].volume_pairs[0].remote_replication.state"
    assert result.volumes[57].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[57].volume_pairs[0].remote_replication.mode"
    assert result.volumes[57].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[57].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[57].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[57].volume_pairs[0].cluster_pair_id"
    assert result.volumes[57].volume_pairs[0].remote_volume_id == 408, "Died on +.volumes[57].volume_pairs[0].remote_volume_id"
    assert result.volumes[57].volume_pairs[0].remote_volume_name == """async-source-58""", "Died on +.volumes[57].volume_pairs[0].remote_volume_name"
    assert result.volumes[57].volume_pairs[0].remote_slice_id == 408, "Died on +.volumes[57].volume_pairs[0].remote_slice_id"
    assert result.volumes[57].account_id == 6, "Died on +.volumes[57].account_id"
    assert result.volumes[57].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[57].create_time"
    assert result.volumes[57].virtual_volume_id is None, "Died on .volumes[57].virtual_volume_id"
    assert result.volumes[56].status == """active""", "Died on +.volumes[56].status"
    assert result.volumes[56].enable512e == False, "Died on +.volumes[56].enable512e"
    assert result.volumes[56].qos.burst_iops == 15000, "Died on +.volumes[56].qos.burst_iops"
    assert result.volumes[56].qos.burst_time == 60, "Died on +.volumes[56].qos.burst_time"
    assert result.volumes[56].qos.min_iops == 100, "Died on +.volumes[56].qos.min_iops"
    assert result.volumes[56].qos.max_iops == 15000, "Died on +.volumes[56].qos.max_iops"
    assert result.volumes[56].name == """async-target-57""", "Died on +.volumes[56].name"
    assert result.volumes[56].volume_access_groups[0] == 7, "Died on +.volumes[56].volume_access_groups[0]"
    assert result.volumes[56].scsi_naadevice_id == """6f47acc100000000343533350000038b""", "Died on +.volumes[56].scsi_naadevice_id"
    assert result.volumes[56].total_size == 5000658944, "Died on +.volumes[56].total_size"
    assert result.volumes[56].block_size == 4096, "Died on +.volumes[56].block_size"
    assert result.volumes[56].scsi_euidevice_id == """343533350000038bf47acc0100000000""", "Died on +.volumes[56].scsi_euidevice_id"
    assert result.volumes[56].volume_id == 907, "Died on +.volumes[56].volume_id"
    assert result.volumes[56].access == """replicationTarget""", "Died on +.volumes[56].access"
    assert result.volumes[56].iqn == """iqn.2010-01.com.solidfire:4535.async-target-57.907""", "Died on +.volumes[56].iqn"
    assert result.volumes[56].slice_count == 1, "Died on +.volumes[56].slice_count"
    assert type(result.volumes[56].attributes) is dict, "Died on .volumes[56].attributes"
    assert result.volumes[56].volume_pairs[0].volume_pair_uuid == UUID("390cc9f6-412d-4930-a73d-ebaad86b155f"), "Died on .volumes[56].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[56].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[56].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[56].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[56].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[56].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[56].volume_pairs[0].remote_replication.state"
    assert result.volumes[56].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[56].volume_pairs[0].remote_replication.mode"
    assert result.volumes[56].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[56].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[56].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[56].volume_pairs[0].cluster_pair_id"
    assert result.volumes[56].volume_pairs[0].remote_volume_id == 407, "Died on +.volumes[56].volume_pairs[0].remote_volume_id"
    assert result.volumes[56].volume_pairs[0].remote_volume_name == """async-source-57""", "Died on +.volumes[56].volume_pairs[0].remote_volume_name"
    assert result.volumes[56].volume_pairs[0].remote_slice_id == 407, "Died on +.volumes[56].volume_pairs[0].remote_slice_id"
    assert result.volumes[56].account_id == 6, "Died on +.volumes[56].account_id"
    assert result.volumes[56].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[56].create_time"
    assert result.volumes[56].virtual_volume_id is None, "Died on .volumes[56].virtual_volume_id"
    assert result.volumes[55].status == """active""", "Died on +.volumes[55].status"
    assert result.volumes[55].enable512e == False, "Died on +.volumes[55].enable512e"
    assert result.volumes[55].qos.burst_iops == 15000, "Died on +.volumes[55].qos.burst_iops"
    assert result.volumes[55].qos.burst_time == 60, "Died on +.volumes[55].qos.burst_time"
    assert result.volumes[55].qos.min_iops == 100, "Died on +.volumes[55].qos.min_iops"
    assert result.volumes[55].qos.max_iops == 15000, "Died on +.volumes[55].qos.max_iops"
    assert result.volumes[55].name == """async-target-56""", "Died on +.volumes[55].name"
    assert result.volumes[55].volume_access_groups[0] == 7, "Died on +.volumes[55].volume_access_groups[0]"
    assert result.volumes[55].scsi_naadevice_id == """6f47acc100000000343533350000038a""", "Died on +.volumes[55].scsi_naadevice_id"
    assert result.volumes[55].total_size == 5000658944, "Died on +.volumes[55].total_size"
    assert result.volumes[55].block_size == 4096, "Died on +.volumes[55].block_size"
    assert result.volumes[55].scsi_euidevice_id == """343533350000038af47acc0100000000""", "Died on +.volumes[55].scsi_euidevice_id"
    assert result.volumes[55].volume_id == 906, "Died on +.volumes[55].volume_id"
    assert result.volumes[55].access == """replicationTarget""", "Died on +.volumes[55].access"
    assert result.volumes[55].iqn == """iqn.2010-01.com.solidfire:4535.async-target-56.906""", "Died on +.volumes[55].iqn"
    assert result.volumes[55].slice_count == 1, "Died on +.volumes[55].slice_count"
    assert type(result.volumes[55].attributes) is dict, "Died on .volumes[55].attributes"
    assert result.volumes[55].volume_pairs[0].volume_pair_uuid == UUID("83f9175f-abca-4335-93f8-309e6a57be56"), "Died on .volumes[55].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[55].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[55].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[55].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[55].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[55].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[55].volume_pairs[0].remote_replication.state"
    assert result.volumes[55].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[55].volume_pairs[0].remote_replication.mode"
    assert result.volumes[55].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[55].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[55].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[55].volume_pairs[0].cluster_pair_id"
    assert result.volumes[55].volume_pairs[0].remote_volume_id == 406, "Died on +.volumes[55].volume_pairs[0].remote_volume_id"
    assert result.volumes[55].volume_pairs[0].remote_volume_name == """async-source-56""", "Died on +.volumes[55].volume_pairs[0].remote_volume_name"
    assert result.volumes[55].volume_pairs[0].remote_slice_id == 406, "Died on +.volumes[55].volume_pairs[0].remote_slice_id"
    assert result.volumes[55].account_id == 6, "Died on +.volumes[55].account_id"
    assert result.volumes[55].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[55].create_time"
    assert result.volumes[55].virtual_volume_id is None, "Died on .volumes[55].virtual_volume_id"
    assert result.volumes[54].status == """active""", "Died on +.volumes[54].status"
    assert result.volumes[54].enable512e == False, "Died on +.volumes[54].enable512e"
    assert result.volumes[54].qos.burst_iops == 15000, "Died on +.volumes[54].qos.burst_iops"
    assert result.volumes[54].qos.burst_time == 60, "Died on +.volumes[54].qos.burst_time"
    assert result.volumes[54].qos.min_iops == 100, "Died on +.volumes[54].qos.min_iops"
    assert result.volumes[54].qos.max_iops == 15000, "Died on +.volumes[54].qos.max_iops"
    assert result.volumes[54].name == """async-target-55""", "Died on +.volumes[54].name"
    assert result.volumes[54].volume_access_groups[0] == 7, "Died on +.volumes[54].volume_access_groups[0]"
    assert result.volumes[54].scsi_naadevice_id == """6f47acc1000000003435333500000389""", "Died on +.volumes[54].scsi_naadevice_id"
    assert result.volumes[54].total_size == 5000658944, "Died on +.volumes[54].total_size"
    assert result.volumes[54].block_size == 4096, "Died on +.volumes[54].block_size"
    assert result.volumes[54].scsi_euidevice_id == """3435333500000389f47acc0100000000""", "Died on +.volumes[54].scsi_euidevice_id"
    assert result.volumes[54].volume_id == 905, "Died on +.volumes[54].volume_id"
    assert result.volumes[54].access == """replicationTarget""", "Died on +.volumes[54].access"
    assert result.volumes[54].iqn == """iqn.2010-01.com.solidfire:4535.async-target-55.905""", "Died on +.volumes[54].iqn"
    assert result.volumes[54].slice_count == 1, "Died on +.volumes[54].slice_count"
    assert type(result.volumes[54].attributes) is dict, "Died on .volumes[54].attributes"
    assert result.volumes[54].volume_pairs[0].volume_pair_uuid == UUID("7d34604f-c00f-4500-b2e0-de8cae427ace"), "Died on .volumes[54].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[54].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[54].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[54].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[54].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[54].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[54].volume_pairs[0].remote_replication.state"
    assert result.volumes[54].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[54].volume_pairs[0].remote_replication.mode"
    assert result.volumes[54].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[54].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[54].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[54].volume_pairs[0].cluster_pair_id"
    assert result.volumes[54].volume_pairs[0].remote_volume_id == 405, "Died on +.volumes[54].volume_pairs[0].remote_volume_id"
    assert result.volumes[54].volume_pairs[0].remote_volume_name == """async-source-55""", "Died on +.volumes[54].volume_pairs[0].remote_volume_name"
    assert result.volumes[54].volume_pairs[0].remote_slice_id == 405, "Died on +.volumes[54].volume_pairs[0].remote_slice_id"
    assert result.volumes[54].account_id == 6, "Died on +.volumes[54].account_id"
    assert result.volumes[54].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[54].create_time"
    assert result.volumes[54].virtual_volume_id is None, "Died on .volumes[54].virtual_volume_id"
    assert result.volumes[53].status == """active""", "Died on +.volumes[53].status"
    assert result.volumes[53].enable512e == False, "Died on +.volumes[53].enable512e"
    assert result.volumes[53].qos.burst_iops == 15000, "Died on +.volumes[53].qos.burst_iops"
    assert result.volumes[53].qos.burst_time == 60, "Died on +.volumes[53].qos.burst_time"
    assert result.volumes[53].qos.min_iops == 100, "Died on +.volumes[53].qos.min_iops"
    assert result.volumes[53].qos.max_iops == 15000, "Died on +.volumes[53].qos.max_iops"
    assert result.volumes[53].name == """async-target-54""", "Died on +.volumes[53].name"
    assert result.volumes[53].volume_access_groups[0] == 7, "Died on +.volumes[53].volume_access_groups[0]"
    assert result.volumes[53].scsi_naadevice_id == """6f47acc1000000003435333500000388""", "Died on +.volumes[53].scsi_naadevice_id"
    assert result.volumes[53].total_size == 5000658944, "Died on +.volumes[53].total_size"
    assert result.volumes[53].block_size == 4096, "Died on +.volumes[53].block_size"
    assert result.volumes[53].scsi_euidevice_id == """3435333500000388f47acc0100000000""", "Died on +.volumes[53].scsi_euidevice_id"
    assert result.volumes[53].volume_id == 904, "Died on +.volumes[53].volume_id"
    assert result.volumes[53].access == """replicationTarget""", "Died on +.volumes[53].access"
    assert result.volumes[53].iqn == """iqn.2010-01.com.solidfire:4535.async-target-54.904""", "Died on +.volumes[53].iqn"
    assert result.volumes[53].slice_count == 1, "Died on +.volumes[53].slice_count"
    assert type(result.volumes[53].attributes) is dict, "Died on .volumes[53].attributes"
    assert result.volumes[53].volume_pairs[0].volume_pair_uuid == UUID("5e9bff32-60f8-4cd4-8a7e-215a4c640d44"), "Died on .volumes[53].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[53].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[53].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[53].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[53].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[53].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[53].volume_pairs[0].remote_replication.state"
    assert result.volumes[53].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[53].volume_pairs[0].remote_replication.mode"
    assert result.volumes[53].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[53].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[53].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[53].volume_pairs[0].cluster_pair_id"
    assert result.volumes[53].volume_pairs[0].remote_volume_id == 404, "Died on +.volumes[53].volume_pairs[0].remote_volume_id"
    assert result.volumes[53].volume_pairs[0].remote_volume_name == """async-source-54""", "Died on +.volumes[53].volume_pairs[0].remote_volume_name"
    assert result.volumes[53].volume_pairs[0].remote_slice_id == 404, "Died on +.volumes[53].volume_pairs[0].remote_slice_id"
    assert result.volumes[53].account_id == 6, "Died on +.volumes[53].account_id"
    assert result.volumes[53].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[53].create_time"
    assert result.volumes[53].virtual_volume_id is None, "Died on .volumes[53].virtual_volume_id"
    assert result.volumes[52].status == """active""", "Died on +.volumes[52].status"
    assert result.volumes[52].enable512e == False, "Died on +.volumes[52].enable512e"
    assert result.volumes[52].qos.burst_iops == 15000, "Died on +.volumes[52].qos.burst_iops"
    assert result.volumes[52].qos.burst_time == 60, "Died on +.volumes[52].qos.burst_time"
    assert result.volumes[52].qos.min_iops == 100, "Died on +.volumes[52].qos.min_iops"
    assert result.volumes[52].qos.max_iops == 15000, "Died on +.volumes[52].qos.max_iops"
    assert result.volumes[52].name == """async-target-53""", "Died on +.volumes[52].name"
    assert result.volumes[52].volume_access_groups[0] == 7, "Died on +.volumes[52].volume_access_groups[0]"
    assert result.volumes[52].scsi_naadevice_id == """6f47acc1000000003435333500000387""", "Died on +.volumes[52].scsi_naadevice_id"
    assert result.volumes[52].total_size == 5000658944, "Died on +.volumes[52].total_size"
    assert result.volumes[52].block_size == 4096, "Died on +.volumes[52].block_size"
    assert result.volumes[52].scsi_euidevice_id == """3435333500000387f47acc0100000000""", "Died on +.volumes[52].scsi_euidevice_id"
    assert result.volumes[52].volume_id == 903, "Died on +.volumes[52].volume_id"
    assert result.volumes[52].access == """replicationTarget""", "Died on +.volumes[52].access"
    assert result.volumes[52].iqn == """iqn.2010-01.com.solidfire:4535.async-target-53.903""", "Died on +.volumes[52].iqn"
    assert result.volumes[52].slice_count == 1, "Died on +.volumes[52].slice_count"
    assert type(result.volumes[52].attributes) is dict, "Died on .volumes[52].attributes"
    assert result.volumes[52].volume_pairs[0].volume_pair_uuid == UUID("3ec474cb-957f-45b9-be0b-29e131465ca4"), "Died on .volumes[52].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[52].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[52].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[52].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[52].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[52].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[52].volume_pairs[0].remote_replication.state"
    assert result.volumes[52].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[52].volume_pairs[0].remote_replication.mode"
    assert result.volumes[52].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[52].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[52].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[52].volume_pairs[0].cluster_pair_id"
    assert result.volumes[52].volume_pairs[0].remote_volume_id == 403, "Died on +.volumes[52].volume_pairs[0].remote_volume_id"
    assert result.volumes[52].volume_pairs[0].remote_volume_name == """async-source-53""", "Died on +.volumes[52].volume_pairs[0].remote_volume_name"
    assert result.volumes[52].volume_pairs[0].remote_slice_id == 403, "Died on +.volumes[52].volume_pairs[0].remote_slice_id"
    assert result.volumes[52].account_id == 6, "Died on +.volumes[52].account_id"
    assert result.volumes[52].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[52].create_time"
    assert result.volumes[52].virtual_volume_id is None, "Died on .volumes[52].virtual_volume_id"
    assert result.volumes[51].status == """active""", "Died on +.volumes[51].status"
    assert result.volumes[51].enable512e == False, "Died on +.volumes[51].enable512e"
    assert result.volumes[51].qos.burst_iops == 15000, "Died on +.volumes[51].qos.burst_iops"
    assert result.volumes[51].qos.burst_time == 60, "Died on +.volumes[51].qos.burst_time"
    assert result.volumes[51].qos.min_iops == 100, "Died on +.volumes[51].qos.min_iops"
    assert result.volumes[51].qos.max_iops == 15000, "Died on +.volumes[51].qos.max_iops"
    assert result.volumes[51].name == """async-target-52""", "Died on +.volumes[51].name"
    assert result.volumes[51].volume_access_groups[0] == 7, "Died on +.volumes[51].volume_access_groups[0]"
    assert result.volumes[51].scsi_naadevice_id == """6f47acc1000000003435333500000386""", "Died on +.volumes[51].scsi_naadevice_id"
    assert result.volumes[51].total_size == 5000658944, "Died on +.volumes[51].total_size"
    assert result.volumes[51].block_size == 4096, "Died on +.volumes[51].block_size"
    assert result.volumes[51].scsi_euidevice_id == """3435333500000386f47acc0100000000""", "Died on +.volumes[51].scsi_euidevice_id"
    assert result.volumes[51].volume_id == 902, "Died on +.volumes[51].volume_id"
    assert result.volumes[51].access == """replicationTarget""", "Died on +.volumes[51].access"
    assert result.volumes[51].iqn == """iqn.2010-01.com.solidfire:4535.async-target-52.902""", "Died on +.volumes[51].iqn"
    assert result.volumes[51].slice_count == 1, "Died on +.volumes[51].slice_count"
    assert type(result.volumes[51].attributes) is dict, "Died on .volumes[51].attributes"
    assert result.volumes[51].volume_pairs[0].volume_pair_uuid == UUID("deeb81b7-c243-4e2d-9dc2-be15ccb9605e"), "Died on .volumes[51].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[51].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[51].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[51].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[51].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[51].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[51].volume_pairs[0].remote_replication.state"
    assert result.volumes[51].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[51].volume_pairs[0].remote_replication.mode"
    assert result.volumes[51].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[51].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[51].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[51].volume_pairs[0].cluster_pair_id"
    assert result.volumes[51].volume_pairs[0].remote_volume_id == 402, "Died on +.volumes[51].volume_pairs[0].remote_volume_id"
    assert result.volumes[51].volume_pairs[0].remote_volume_name == """async-source-52""", "Died on +.volumes[51].volume_pairs[0].remote_volume_name"
    assert result.volumes[51].volume_pairs[0].remote_slice_id == 402, "Died on +.volumes[51].volume_pairs[0].remote_slice_id"
    assert result.volumes[51].account_id == 6, "Died on +.volumes[51].account_id"
    assert result.volumes[51].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[51].create_time"
    assert result.volumes[51].virtual_volume_id is None, "Died on .volumes[51].virtual_volume_id"
    assert result.volumes[50].status == """active""", "Died on +.volumes[50].status"
    assert result.volumes[50].enable512e == False, "Died on +.volumes[50].enable512e"
    assert result.volumes[50].qos.burst_iops == 15000, "Died on +.volumes[50].qos.burst_iops"
    assert result.volumes[50].qos.burst_time == 60, "Died on +.volumes[50].qos.burst_time"
    assert result.volumes[50].qos.min_iops == 100, "Died on +.volumes[50].qos.min_iops"
    assert result.volumes[50].qos.max_iops == 15000, "Died on +.volumes[50].qos.max_iops"
    assert result.volumes[50].name == """async-target-51""", "Died on +.volumes[50].name"
    assert result.volumes[50].volume_access_groups[0] == 7, "Died on +.volumes[50].volume_access_groups[0]"
    assert result.volumes[50].scsi_naadevice_id == """6f47acc1000000003435333500000385""", "Died on +.volumes[50].scsi_naadevice_id"
    assert result.volumes[50].total_size == 5000658944, "Died on +.volumes[50].total_size"
    assert result.volumes[50].block_size == 4096, "Died on +.volumes[50].block_size"
    assert result.volumes[50].scsi_euidevice_id == """3435333500000385f47acc0100000000""", "Died on +.volumes[50].scsi_euidevice_id"
    assert result.volumes[50].volume_id == 901, "Died on +.volumes[50].volume_id"
    assert result.volumes[50].access == """replicationTarget""", "Died on +.volumes[50].access"
    assert result.volumes[50].iqn == """iqn.2010-01.com.solidfire:4535.async-target-51.901""", "Died on +.volumes[50].iqn"
    assert result.volumes[50].slice_count == 1, "Died on +.volumes[50].slice_count"
    assert type(result.volumes[50].attributes) is dict, "Died on .volumes[50].attributes"
    assert result.volumes[50].volume_pairs[0].volume_pair_uuid == UUID("24382fea-190d-447f-b2cd-e4fcaace9a7b"), "Died on .volumes[50].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[50].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[50].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[50].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[50].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[50].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[50].volume_pairs[0].remote_replication.state"
    assert result.volumes[50].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[50].volume_pairs[0].remote_replication.mode"
    assert result.volumes[50].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[50].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[50].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[50].volume_pairs[0].cluster_pair_id"
    assert result.volumes[50].volume_pairs[0].remote_volume_id == 401, "Died on +.volumes[50].volume_pairs[0].remote_volume_id"
    assert result.volumes[50].volume_pairs[0].remote_volume_name == """async-source-51""", "Died on +.volumes[50].volume_pairs[0].remote_volume_name"
    assert result.volumes[50].volume_pairs[0].remote_slice_id == 401, "Died on +.volumes[50].volume_pairs[0].remote_slice_id"
    assert result.volumes[50].account_id == 6, "Died on +.volumes[50].account_id"
    assert result.volumes[50].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[50].create_time"
    assert result.volumes[50].virtual_volume_id is None, "Died on .volumes[50].virtual_volume_id"
    assert result.volumes[49].status == """active""", "Died on +.volumes[49].status"
    assert result.volumes[49].enable512e == False, "Died on +.volumes[49].enable512e"
    assert result.volumes[49].qos.burst_iops == 15000, "Died on +.volumes[49].qos.burst_iops"
    assert result.volumes[49].qos.burst_time == 60, "Died on +.volumes[49].qos.burst_time"
    assert result.volumes[49].qos.min_iops == 100, "Died on +.volumes[49].qos.min_iops"
    assert result.volumes[49].qos.max_iops == 15000, "Died on +.volumes[49].qos.max_iops"
    assert result.volumes[49].name == """async-target-50""", "Died on +.volumes[49].name"
    assert result.volumes[49].volume_access_groups[0] == 7, "Died on +.volumes[49].volume_access_groups[0]"
    assert result.volumes[49].scsi_naadevice_id == """6f47acc1000000003435333500000384""", "Died on +.volumes[49].scsi_naadevice_id"
    assert result.volumes[49].total_size == 5000658944, "Died on +.volumes[49].total_size"
    assert result.volumes[49].block_size == 4096, "Died on +.volumes[49].block_size"
    assert result.volumes[49].scsi_euidevice_id == """3435333500000384f47acc0100000000""", "Died on +.volumes[49].scsi_euidevice_id"
    assert result.volumes[49].volume_id == 900, "Died on +.volumes[49].volume_id"
    assert result.volumes[49].access == """replicationTarget""", "Died on +.volumes[49].access"
    assert result.volumes[49].iqn == """iqn.2010-01.com.solidfire:4535.async-target-50.900""", "Died on +.volumes[49].iqn"
    assert result.volumes[49].slice_count == 1, "Died on +.volumes[49].slice_count"
    assert type(result.volumes[49].attributes) is dict, "Died on .volumes[49].attributes"
    assert result.volumes[49].volume_pairs[0].volume_pair_uuid == UUID("71f25692-b66a-48d6-b261-14df3ee00af0"), "Died on .volumes[49].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[49].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[49].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[49].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[49].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[49].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[49].volume_pairs[0].remote_replication.state"
    assert result.volumes[49].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[49].volume_pairs[0].remote_replication.mode"
    assert result.volumes[49].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[49].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[49].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[49].volume_pairs[0].cluster_pair_id"
    assert result.volumes[49].volume_pairs[0].remote_volume_id == 400, "Died on +.volumes[49].volume_pairs[0].remote_volume_id"
    assert result.volumes[49].volume_pairs[0].remote_volume_name == """async-source-50""", "Died on +.volumes[49].volume_pairs[0].remote_volume_name"
    assert result.volumes[49].volume_pairs[0].remote_slice_id == 400, "Died on +.volumes[49].volume_pairs[0].remote_slice_id"
    assert result.volumes[49].account_id == 6, "Died on +.volumes[49].account_id"
    assert result.volumes[49].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[49].create_time"
    assert result.volumes[49].virtual_volume_id is None, "Died on .volumes[49].virtual_volume_id"
    assert result.volumes[48].status == """active""", "Died on +.volumes[48].status"
    assert result.volumes[48].enable512e == False, "Died on +.volumes[48].enable512e"
    assert result.volumes[48].qos.burst_iops == 15000, "Died on +.volumes[48].qos.burst_iops"
    assert result.volumes[48].qos.burst_time == 60, "Died on +.volumes[48].qos.burst_time"
    assert result.volumes[48].qos.min_iops == 100, "Died on +.volumes[48].qos.min_iops"
    assert result.volumes[48].qos.max_iops == 15000, "Died on +.volumes[48].qos.max_iops"
    assert result.volumes[48].name == """async-target-49""", "Died on +.volumes[48].name"
    assert result.volumes[48].volume_access_groups[0] == 7, "Died on +.volumes[48].volume_access_groups[0]"
    assert result.volumes[48].scsi_naadevice_id == """6f47acc1000000003435333500000383""", "Died on +.volumes[48].scsi_naadevice_id"
    assert result.volumes[48].total_size == 5000658944, "Died on +.volumes[48].total_size"
    assert result.volumes[48].block_size == 4096, "Died on +.volumes[48].block_size"
    assert result.volumes[48].scsi_euidevice_id == """3435333500000383f47acc0100000000""", "Died on +.volumes[48].scsi_euidevice_id"
    assert result.volumes[48].volume_id == 899, "Died on +.volumes[48].volume_id"
    assert result.volumes[48].access == """replicationTarget""", "Died on +.volumes[48].access"
    assert result.volumes[48].iqn == """iqn.2010-01.com.solidfire:4535.async-target-49.899""", "Died on +.volumes[48].iqn"
    assert result.volumes[48].slice_count == 1, "Died on +.volumes[48].slice_count"
    assert type(result.volumes[48].attributes) is dict, "Died on .volumes[48].attributes"
    assert result.volumes[48].volume_pairs[0].volume_pair_uuid == UUID("5936d4d1-6234-42c4-abdf-17e591c4f2ea"), "Died on .volumes[48].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[48].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[48].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[48].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[48].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[48].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[48].volume_pairs[0].remote_replication.state"
    assert result.volumes[48].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[48].volume_pairs[0].remote_replication.mode"
    assert result.volumes[48].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[48].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[48].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[48].volume_pairs[0].cluster_pair_id"
    assert result.volumes[48].volume_pairs[0].remote_volume_id == 399, "Died on +.volumes[48].volume_pairs[0].remote_volume_id"
    assert result.volumes[48].volume_pairs[0].remote_volume_name == """async-source-49""", "Died on +.volumes[48].volume_pairs[0].remote_volume_name"
    assert result.volumes[48].volume_pairs[0].remote_slice_id == 399, "Died on +.volumes[48].volume_pairs[0].remote_slice_id"
    assert result.volumes[48].account_id == 6, "Died on +.volumes[48].account_id"
    assert result.volumes[48].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[48].create_time"
    assert result.volumes[48].virtual_volume_id is None, "Died on .volumes[48].virtual_volume_id"
    assert result.volumes[47].status == """active""", "Died on +.volumes[47].status"
    assert result.volumes[47].enable512e == False, "Died on +.volumes[47].enable512e"
    assert result.volumes[47].qos.burst_iops == 15000, "Died on +.volumes[47].qos.burst_iops"
    assert result.volumes[47].qos.burst_time == 60, "Died on +.volumes[47].qos.burst_time"
    assert result.volumes[47].qos.min_iops == 100, "Died on +.volumes[47].qos.min_iops"
    assert result.volumes[47].qos.max_iops == 15000, "Died on +.volumes[47].qos.max_iops"
    assert result.volumes[47].name == """async-target-48""", "Died on +.volumes[47].name"
    assert result.volumes[47].volume_access_groups[0] == 7, "Died on +.volumes[47].volume_access_groups[0]"
    assert result.volumes[47].scsi_naadevice_id == """6f47acc1000000003435333500000382""", "Died on +.volumes[47].scsi_naadevice_id"
    assert result.volumes[47].total_size == 5000658944, "Died on +.volumes[47].total_size"
    assert result.volumes[47].block_size == 4096, "Died on +.volumes[47].block_size"
    assert result.volumes[47].scsi_euidevice_id == """3435333500000382f47acc0100000000""", "Died on +.volumes[47].scsi_euidevice_id"
    assert result.volumes[47].volume_id == 898, "Died on +.volumes[47].volume_id"
    assert result.volumes[47].access == """replicationTarget""", "Died on +.volumes[47].access"
    assert result.volumes[47].iqn == """iqn.2010-01.com.solidfire:4535.async-target-48.898""", "Died on +.volumes[47].iqn"
    assert result.volumes[47].slice_count == 1, "Died on +.volumes[47].slice_count"
    assert type(result.volumes[47].attributes) is dict, "Died on .volumes[47].attributes"
    assert result.volumes[47].volume_pairs[0].volume_pair_uuid == UUID("f7582790-40d2-4b58-9be2-e8d55e7b067b"), "Died on .volumes[47].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[47].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[47].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[47].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[47].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[47].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[47].volume_pairs[0].remote_replication.state"
    assert result.volumes[47].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[47].volume_pairs[0].remote_replication.mode"
    assert result.volumes[47].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[47].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[47].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[47].volume_pairs[0].cluster_pair_id"
    assert result.volumes[47].volume_pairs[0].remote_volume_id == 398, "Died on +.volumes[47].volume_pairs[0].remote_volume_id"
    assert result.volumes[47].volume_pairs[0].remote_volume_name == """async-source-48""", "Died on +.volumes[47].volume_pairs[0].remote_volume_name"
    assert result.volumes[47].volume_pairs[0].remote_slice_id == 398, "Died on +.volumes[47].volume_pairs[0].remote_slice_id"
    assert result.volumes[47].account_id == 6, "Died on +.volumes[47].account_id"
    assert result.volumes[47].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[47].create_time"
    assert result.volumes[47].virtual_volume_id is None, "Died on .volumes[47].virtual_volume_id"
    assert result.volumes[46].status == """active""", "Died on +.volumes[46].status"
    assert result.volumes[46].enable512e == False, "Died on +.volumes[46].enable512e"
    assert result.volumes[46].qos.burst_iops == 15000, "Died on +.volumes[46].qos.burst_iops"
    assert result.volumes[46].qos.burst_time == 60, "Died on +.volumes[46].qos.burst_time"
    assert result.volumes[46].qos.min_iops == 100, "Died on +.volumes[46].qos.min_iops"
    assert result.volumes[46].qos.max_iops == 15000, "Died on +.volumes[46].qos.max_iops"
    assert result.volumes[46].name == """async-target-47""", "Died on +.volumes[46].name"
    assert result.volumes[46].volume_access_groups[0] == 7, "Died on +.volumes[46].volume_access_groups[0]"
    assert result.volumes[46].scsi_naadevice_id == """6f47acc1000000003435333500000381""", "Died on +.volumes[46].scsi_naadevice_id"
    assert result.volumes[46].total_size == 5000658944, "Died on +.volumes[46].total_size"
    assert result.volumes[46].block_size == 4096, "Died on +.volumes[46].block_size"
    assert result.volumes[46].scsi_euidevice_id == """3435333500000381f47acc0100000000""", "Died on +.volumes[46].scsi_euidevice_id"
    assert result.volumes[46].volume_id == 897, "Died on +.volumes[46].volume_id"
    assert result.volumes[46].access == """replicationTarget""", "Died on +.volumes[46].access"
    assert result.volumes[46].iqn == """iqn.2010-01.com.solidfire:4535.async-target-47.897""", "Died on +.volumes[46].iqn"
    assert result.volumes[46].slice_count == 1, "Died on +.volumes[46].slice_count"
    assert type(result.volumes[46].attributes) is dict, "Died on .volumes[46].attributes"
    assert result.volumes[46].volume_pairs[0].volume_pair_uuid == UUID("de397b35-66dd-4137-8803-3474b10fb914"), "Died on .volumes[46].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[46].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[46].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[46].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[46].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[46].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[46].volume_pairs[0].remote_replication.state"
    assert result.volumes[46].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[46].volume_pairs[0].remote_replication.mode"
    assert result.volumes[46].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[46].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[46].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[46].volume_pairs[0].cluster_pair_id"
    assert result.volumes[46].volume_pairs[0].remote_volume_id == 397, "Died on +.volumes[46].volume_pairs[0].remote_volume_id"
    assert result.volumes[46].volume_pairs[0].remote_volume_name == """async-source-47""", "Died on +.volumes[46].volume_pairs[0].remote_volume_name"
    assert result.volumes[46].volume_pairs[0].remote_slice_id == 397, "Died on +.volumes[46].volume_pairs[0].remote_slice_id"
    assert result.volumes[46].account_id == 6, "Died on +.volumes[46].account_id"
    assert result.volumes[46].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[46].create_time"
    assert result.volumes[46].virtual_volume_id is None, "Died on .volumes[46].virtual_volume_id"
    assert result.volumes[45].status == """active""", "Died on +.volumes[45].status"
    assert result.volumes[45].enable512e == False, "Died on +.volumes[45].enable512e"
    assert result.volumes[45].qos.burst_iops == 15000, "Died on +.volumes[45].qos.burst_iops"
    assert result.volumes[45].qos.burst_time == 60, "Died on +.volumes[45].qos.burst_time"
    assert result.volumes[45].qos.min_iops == 100, "Died on +.volumes[45].qos.min_iops"
    assert result.volumes[45].qos.max_iops == 15000, "Died on +.volumes[45].qos.max_iops"
    assert result.volumes[45].name == """async-target-46""", "Died on +.volumes[45].name"
    assert result.volumes[45].volume_access_groups[0] == 7, "Died on +.volumes[45].volume_access_groups[0]"
    assert result.volumes[45].scsi_naadevice_id == """6f47acc1000000003435333500000380""", "Died on +.volumes[45].scsi_naadevice_id"
    assert result.volumes[45].total_size == 5000658944, "Died on +.volumes[45].total_size"
    assert result.volumes[45].block_size == 4096, "Died on +.volumes[45].block_size"
    assert result.volumes[45].scsi_euidevice_id == """3435333500000380f47acc0100000000""", "Died on +.volumes[45].scsi_euidevice_id"
    assert result.volumes[45].volume_id == 896, "Died on +.volumes[45].volume_id"
    assert result.volumes[45].access == """replicationTarget""", "Died on +.volumes[45].access"
    assert result.volumes[45].iqn == """iqn.2010-01.com.solidfire:4535.async-target-46.896""", "Died on +.volumes[45].iqn"
    assert result.volumes[45].slice_count == 1, "Died on +.volumes[45].slice_count"
    assert type(result.volumes[45].attributes) is dict, "Died on .volumes[45].attributes"
    assert result.volumes[45].volume_pairs[0].volume_pair_uuid == UUID("fc7473f5-03ab-4c00-a4fd-a4e9756fa3a4"), "Died on .volumes[45].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[45].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[45].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[45].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[45].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[45].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[45].volume_pairs[0].remote_replication.state"
    assert result.volumes[45].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[45].volume_pairs[0].remote_replication.mode"
    assert result.volumes[45].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[45].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[45].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[45].volume_pairs[0].cluster_pair_id"
    assert result.volumes[45].volume_pairs[0].remote_volume_id == 396, "Died on +.volumes[45].volume_pairs[0].remote_volume_id"
    assert result.volumes[45].volume_pairs[0].remote_volume_name == """async-source-46""", "Died on +.volumes[45].volume_pairs[0].remote_volume_name"
    assert result.volumes[45].volume_pairs[0].remote_slice_id == 396, "Died on +.volumes[45].volume_pairs[0].remote_slice_id"
    assert result.volumes[45].account_id == 6, "Died on +.volumes[45].account_id"
    assert result.volumes[45].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[45].create_time"
    assert result.volumes[45].virtual_volume_id is None, "Died on .volumes[45].virtual_volume_id"
    assert result.volumes[44].status == """active""", "Died on +.volumes[44].status"
    assert result.volumes[44].enable512e == False, "Died on +.volumes[44].enable512e"
    assert result.volumes[44].qos.burst_iops == 15000, "Died on +.volumes[44].qos.burst_iops"
    assert result.volumes[44].qos.burst_time == 60, "Died on +.volumes[44].qos.burst_time"
    assert result.volumes[44].qos.min_iops == 100, "Died on +.volumes[44].qos.min_iops"
    assert result.volumes[44].qos.max_iops == 15000, "Died on +.volumes[44].qos.max_iops"
    assert result.volumes[44].name == """async-target-45""", "Died on +.volumes[44].name"
    assert result.volumes[44].volume_access_groups[0] == 7, "Died on +.volumes[44].volume_access_groups[0]"
    assert result.volumes[44].scsi_naadevice_id == """6f47acc100000000343533350000037f""", "Died on +.volumes[44].scsi_naadevice_id"
    assert result.volumes[44].total_size == 5000658944, "Died on +.volumes[44].total_size"
    assert result.volumes[44].block_size == 4096, "Died on +.volumes[44].block_size"
    assert result.volumes[44].scsi_euidevice_id == """343533350000037ff47acc0100000000""", "Died on +.volumes[44].scsi_euidevice_id"
    assert result.volumes[44].volume_id == 895, "Died on +.volumes[44].volume_id"
    assert result.volumes[44].access == """replicationTarget""", "Died on +.volumes[44].access"
    assert result.volumes[44].iqn == """iqn.2010-01.com.solidfire:4535.async-target-45.895""", "Died on +.volumes[44].iqn"
    assert result.volumes[44].slice_count == 1, "Died on +.volumes[44].slice_count"
    assert type(result.volumes[44].attributes) is dict, "Died on .volumes[44].attributes"
    assert result.volumes[44].volume_pairs[0].volume_pair_uuid == UUID("ccb8583d-25c7-4724-a115-9412b54ca815"), "Died on .volumes[44].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[44].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[44].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[44].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[44].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[44].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[44].volume_pairs[0].remote_replication.state"
    assert result.volumes[44].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[44].volume_pairs[0].remote_replication.mode"
    assert result.volumes[44].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[44].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[44].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[44].volume_pairs[0].cluster_pair_id"
    assert result.volumes[44].volume_pairs[0].remote_volume_id == 395, "Died on +.volumes[44].volume_pairs[0].remote_volume_id"
    assert result.volumes[44].volume_pairs[0].remote_volume_name == """async-source-45""", "Died on +.volumes[44].volume_pairs[0].remote_volume_name"
    assert result.volumes[44].volume_pairs[0].remote_slice_id == 395, "Died on +.volumes[44].volume_pairs[0].remote_slice_id"
    assert result.volumes[44].account_id == 6, "Died on +.volumes[44].account_id"
    assert result.volumes[44].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[44].create_time"
    assert result.volumes[44].virtual_volume_id is None, "Died on .volumes[44].virtual_volume_id"
    assert result.volumes[43].status == """active""", "Died on +.volumes[43].status"
    assert result.volumes[43].enable512e == False, "Died on +.volumes[43].enable512e"
    assert result.volumes[43].qos.burst_iops == 15000, "Died on +.volumes[43].qos.burst_iops"
    assert result.volumes[43].qos.burst_time == 60, "Died on +.volumes[43].qos.burst_time"
    assert result.volumes[43].qos.min_iops == 100, "Died on +.volumes[43].qos.min_iops"
    assert result.volumes[43].qos.max_iops == 15000, "Died on +.volumes[43].qos.max_iops"
    assert result.volumes[43].name == """async-target-44""", "Died on +.volumes[43].name"
    assert result.volumes[43].volume_access_groups[0] == 7, "Died on +.volumes[43].volume_access_groups[0]"
    assert result.volumes[43].scsi_naadevice_id == """6f47acc100000000343533350000037e""", "Died on +.volumes[43].scsi_naadevice_id"
    assert result.volumes[43].total_size == 5000658944, "Died on +.volumes[43].total_size"
    assert result.volumes[43].block_size == 4096, "Died on +.volumes[43].block_size"
    assert result.volumes[43].scsi_euidevice_id == """343533350000037ef47acc0100000000""", "Died on +.volumes[43].scsi_euidevice_id"
    assert result.volumes[43].volume_id == 894, "Died on +.volumes[43].volume_id"
    assert result.volumes[43].access == """replicationTarget""", "Died on +.volumes[43].access"
    assert result.volumes[43].iqn == """iqn.2010-01.com.solidfire:4535.async-target-44.894""", "Died on +.volumes[43].iqn"
    assert result.volumes[43].slice_count == 1, "Died on +.volumes[43].slice_count"
    assert type(result.volumes[43].attributes) is dict, "Died on .volumes[43].attributes"
    assert result.volumes[43].volume_pairs[0].volume_pair_uuid == UUID("426e436a-8d98-4ecd-b343-a810d1cb2c38"), "Died on .volumes[43].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[43].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[43].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[43].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[43].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[43].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[43].volume_pairs[0].remote_replication.state"
    assert result.volumes[43].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[43].volume_pairs[0].remote_replication.mode"
    assert result.volumes[43].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[43].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[43].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[43].volume_pairs[0].cluster_pair_id"
    assert result.volumes[43].volume_pairs[0].remote_volume_id == 394, "Died on +.volumes[43].volume_pairs[0].remote_volume_id"
    assert result.volumes[43].volume_pairs[0].remote_volume_name == """async-source-44""", "Died on +.volumes[43].volume_pairs[0].remote_volume_name"
    assert result.volumes[43].volume_pairs[0].remote_slice_id == 394, "Died on +.volumes[43].volume_pairs[0].remote_slice_id"
    assert result.volumes[43].account_id == 6, "Died on +.volumes[43].account_id"
    assert result.volumes[43].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[43].create_time"
    assert result.volumes[43].virtual_volume_id is None, "Died on .volumes[43].virtual_volume_id"
    assert result.volumes[42].status == """active""", "Died on +.volumes[42].status"
    assert result.volumes[42].enable512e == False, "Died on +.volumes[42].enable512e"
    assert result.volumes[42].qos.burst_iops == 15000, "Died on +.volumes[42].qos.burst_iops"
    assert result.volumes[42].qos.burst_time == 60, "Died on +.volumes[42].qos.burst_time"
    assert result.volumes[42].qos.min_iops == 100, "Died on +.volumes[42].qos.min_iops"
    assert result.volumes[42].qos.max_iops == 15000, "Died on +.volumes[42].qos.max_iops"
    assert result.volumes[42].name == """async-target-43""", "Died on +.volumes[42].name"
    assert result.volumes[42].volume_access_groups[0] == 7, "Died on +.volumes[42].volume_access_groups[0]"
    assert result.volumes[42].scsi_naadevice_id == """6f47acc100000000343533350000037d""", "Died on +.volumes[42].scsi_naadevice_id"
    assert result.volumes[42].total_size == 5000658944, "Died on +.volumes[42].total_size"
    assert result.volumes[42].block_size == 4096, "Died on +.volumes[42].block_size"
    assert result.volumes[42].scsi_euidevice_id == """343533350000037df47acc0100000000""", "Died on +.volumes[42].scsi_euidevice_id"
    assert result.volumes[42].volume_id == 893, "Died on +.volumes[42].volume_id"
    assert result.volumes[42].access == """replicationTarget""", "Died on +.volumes[42].access"
    assert result.volumes[42].iqn == """iqn.2010-01.com.solidfire:4535.async-target-43.893""", "Died on +.volumes[42].iqn"
    assert result.volumes[42].slice_count == 1, "Died on +.volumes[42].slice_count"
    assert type(result.volumes[42].attributes) is dict, "Died on .volumes[42].attributes"
    assert result.volumes[42].volume_pairs[0].volume_pair_uuid == UUID("d71e973a-d396-44c3-abdc-7d36504898bc"), "Died on .volumes[42].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[42].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[42].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[42].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[42].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[42].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[42].volume_pairs[0].remote_replication.state"
    assert result.volumes[42].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[42].volume_pairs[0].remote_replication.mode"
    assert result.volumes[42].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[42].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[42].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[42].volume_pairs[0].cluster_pair_id"
    assert result.volumes[42].volume_pairs[0].remote_volume_id == 393, "Died on +.volumes[42].volume_pairs[0].remote_volume_id"
    assert result.volumes[42].volume_pairs[0].remote_volume_name == """async-source-43""", "Died on +.volumes[42].volume_pairs[0].remote_volume_name"
    assert result.volumes[42].volume_pairs[0].remote_slice_id == 393, "Died on +.volumes[42].volume_pairs[0].remote_slice_id"
    assert result.volumes[42].account_id == 6, "Died on +.volumes[42].account_id"
    assert result.volumes[42].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[42].create_time"
    assert result.volumes[42].virtual_volume_id is None, "Died on .volumes[42].virtual_volume_id"
    assert result.volumes[41].status == """active""", "Died on +.volumes[41].status"
    assert result.volumes[41].enable512e == False, "Died on +.volumes[41].enable512e"
    assert result.volumes[41].qos.burst_iops == 15000, "Died on +.volumes[41].qos.burst_iops"
    assert result.volumes[41].qos.burst_time == 60, "Died on +.volumes[41].qos.burst_time"
    assert result.volumes[41].qos.min_iops == 100, "Died on +.volumes[41].qos.min_iops"
    assert result.volumes[41].qos.max_iops == 15000, "Died on +.volumes[41].qos.max_iops"
    assert result.volumes[41].name == """async-target-42""", "Died on +.volumes[41].name"
    assert result.volumes[41].volume_access_groups[0] == 7, "Died on +.volumes[41].volume_access_groups[0]"
    assert result.volumes[41].scsi_naadevice_id == """6f47acc100000000343533350000037c""", "Died on +.volumes[41].scsi_naadevice_id"
    assert result.volumes[41].total_size == 5000658944, "Died on +.volumes[41].total_size"
    assert result.volumes[41].block_size == 4096, "Died on +.volumes[41].block_size"
    assert result.volumes[41].scsi_euidevice_id == """343533350000037cf47acc0100000000""", "Died on +.volumes[41].scsi_euidevice_id"
    assert result.volumes[41].volume_id == 892, "Died on +.volumes[41].volume_id"
    assert result.volumes[41].access == """replicationTarget""", "Died on +.volumes[41].access"
    assert result.volumes[41].iqn == """iqn.2010-01.com.solidfire:4535.async-target-42.892""", "Died on +.volumes[41].iqn"
    assert result.volumes[41].slice_count == 1, "Died on +.volumes[41].slice_count"
    assert type(result.volumes[41].attributes) is dict, "Died on .volumes[41].attributes"
    assert result.volumes[41].volume_pairs[0].volume_pair_uuid == UUID("aa741d59-b1b1-4c11-be4c-1e8e499547e7"), "Died on .volumes[41].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[41].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[41].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[41].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[41].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[41].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[41].volume_pairs[0].remote_replication.state"
    assert result.volumes[41].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[41].volume_pairs[0].remote_replication.mode"
    assert result.volumes[41].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[41].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[41].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[41].volume_pairs[0].cluster_pair_id"
    assert result.volumes[41].volume_pairs[0].remote_volume_id == 392, "Died on +.volumes[41].volume_pairs[0].remote_volume_id"
    assert result.volumes[41].volume_pairs[0].remote_volume_name == """async-source-42""", "Died on +.volumes[41].volume_pairs[0].remote_volume_name"
    assert result.volumes[41].volume_pairs[0].remote_slice_id == 392, "Died on +.volumes[41].volume_pairs[0].remote_slice_id"
    assert result.volumes[41].account_id == 6, "Died on +.volumes[41].account_id"
    assert result.volumes[41].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[41].create_time"
    assert result.volumes[41].virtual_volume_id is None, "Died on .volumes[41].virtual_volume_id"
    assert result.volumes[40].status == """active""", "Died on +.volumes[40].status"
    assert result.volumes[40].enable512e == False, "Died on +.volumes[40].enable512e"
    assert result.volumes[40].qos.burst_iops == 15000, "Died on +.volumes[40].qos.burst_iops"
    assert result.volumes[40].qos.burst_time == 60, "Died on +.volumes[40].qos.burst_time"
    assert result.volumes[40].qos.min_iops == 100, "Died on +.volumes[40].qos.min_iops"
    assert result.volumes[40].qos.max_iops == 15000, "Died on +.volumes[40].qos.max_iops"
    assert result.volumes[40].name == """async-target-41""", "Died on +.volumes[40].name"
    assert result.volumes[40].volume_access_groups[0] == 7, "Died on +.volumes[40].volume_access_groups[0]"
    assert result.volumes[40].scsi_naadevice_id == """6f47acc100000000343533350000037b""", "Died on +.volumes[40].scsi_naadevice_id"
    assert result.volumes[40].total_size == 5000658944, "Died on +.volumes[40].total_size"
    assert result.volumes[40].block_size == 4096, "Died on +.volumes[40].block_size"
    assert result.volumes[40].scsi_euidevice_id == """343533350000037bf47acc0100000000""", "Died on +.volumes[40].scsi_euidevice_id"
    assert result.volumes[40].volume_id == 891, "Died on +.volumes[40].volume_id"
    assert result.volumes[40].access == """replicationTarget""", "Died on +.volumes[40].access"
    assert result.volumes[40].iqn == """iqn.2010-01.com.solidfire:4535.async-target-41.891""", "Died on +.volumes[40].iqn"
    assert result.volumes[40].slice_count == 1, "Died on +.volumes[40].slice_count"
    assert type(result.volumes[40].attributes) is dict, "Died on .volumes[40].attributes"
    assert result.volumes[40].volume_pairs[0].volume_pair_uuid == UUID("9aa17777-c222-4fe7-9837-0473b614f560"), "Died on .volumes[40].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[40].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[40].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[40].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[40].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[40].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[40].volume_pairs[0].remote_replication.state"
    assert result.volumes[40].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[40].volume_pairs[0].remote_replication.mode"
    assert result.volumes[40].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[40].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[40].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[40].volume_pairs[0].cluster_pair_id"
    assert result.volumes[40].volume_pairs[0].remote_volume_id == 391, "Died on +.volumes[40].volume_pairs[0].remote_volume_id"
    assert result.volumes[40].volume_pairs[0].remote_volume_name == """async-source-41""", "Died on +.volumes[40].volume_pairs[0].remote_volume_name"
    assert result.volumes[40].volume_pairs[0].remote_slice_id == 391, "Died on +.volumes[40].volume_pairs[0].remote_slice_id"
    assert result.volumes[40].account_id == 6, "Died on +.volumes[40].account_id"
    assert result.volumes[40].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[40].create_time"
    assert result.volumes[40].virtual_volume_id is None, "Died on .volumes[40].virtual_volume_id"
    assert result.volumes[39].status == """active""", "Died on +.volumes[39].status"
    assert result.volumes[39].enable512e == False, "Died on +.volumes[39].enable512e"
    assert result.volumes[39].qos.burst_iops == 15000, "Died on +.volumes[39].qos.burst_iops"
    assert result.volumes[39].qos.burst_time == 60, "Died on +.volumes[39].qos.burst_time"
    assert result.volumes[39].qos.min_iops == 100, "Died on +.volumes[39].qos.min_iops"
    assert result.volumes[39].qos.max_iops == 15000, "Died on +.volumes[39].qos.max_iops"
    assert result.volumes[39].name == """async-target-40""", "Died on +.volumes[39].name"
    assert result.volumes[39].volume_access_groups[0] == 7, "Died on +.volumes[39].volume_access_groups[0]"
    assert result.volumes[39].scsi_naadevice_id == """6f47acc100000000343533350000037a""", "Died on +.volumes[39].scsi_naadevice_id"
    assert result.volumes[39].total_size == 5000658944, "Died on +.volumes[39].total_size"
    assert result.volumes[39].block_size == 4096, "Died on +.volumes[39].block_size"
    assert result.volumes[39].scsi_euidevice_id == """343533350000037af47acc0100000000""", "Died on +.volumes[39].scsi_euidevice_id"
    assert result.volumes[39].volume_id == 890, "Died on +.volumes[39].volume_id"
    assert result.volumes[39].access == """replicationTarget""", "Died on +.volumes[39].access"
    assert result.volumes[39].iqn == """iqn.2010-01.com.solidfire:4535.async-target-40.890""", "Died on +.volumes[39].iqn"
    assert result.volumes[39].slice_count == 1, "Died on +.volumes[39].slice_count"
    assert type(result.volumes[39].attributes) is dict, "Died on .volumes[39].attributes"
    assert result.volumes[39].volume_pairs[0].volume_pair_uuid == UUID("deffd6e7-5a0e-4de6-a5f6-2cc673fc381f"), "Died on .volumes[39].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[39].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[39].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[39].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[39].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[39].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[39].volume_pairs[0].remote_replication.state"
    assert result.volumes[39].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[39].volume_pairs[0].remote_replication.mode"
    assert result.volumes[39].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[39].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[39].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[39].volume_pairs[0].cluster_pair_id"
    assert result.volumes[39].volume_pairs[0].remote_volume_id == 390, "Died on +.volumes[39].volume_pairs[0].remote_volume_id"
    assert result.volumes[39].volume_pairs[0].remote_volume_name == """async-source-40""", "Died on +.volumes[39].volume_pairs[0].remote_volume_name"
    assert result.volumes[39].volume_pairs[0].remote_slice_id == 390, "Died on +.volumes[39].volume_pairs[0].remote_slice_id"
    assert result.volumes[39].account_id == 6, "Died on +.volumes[39].account_id"
    assert result.volumes[39].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[39].create_time"
    assert result.volumes[39].virtual_volume_id is None, "Died on .volumes[39].virtual_volume_id"
    assert result.volumes[38].status == """active""", "Died on +.volumes[38].status"
    assert result.volumes[38].enable512e == False, "Died on +.volumes[38].enable512e"
    assert result.volumes[38].qos.burst_iops == 15000, "Died on +.volumes[38].qos.burst_iops"
    assert result.volumes[38].qos.burst_time == 60, "Died on +.volumes[38].qos.burst_time"
    assert result.volumes[38].qos.min_iops == 100, "Died on +.volumes[38].qos.min_iops"
    assert result.volumes[38].qos.max_iops == 15000, "Died on +.volumes[38].qos.max_iops"
    assert result.volumes[38].name == """async-target-39""", "Died on +.volumes[38].name"
    assert result.volumes[38].volume_access_groups[0] == 7, "Died on +.volumes[38].volume_access_groups[0]"
    assert result.volumes[38].scsi_naadevice_id == """6f47acc1000000003435333500000379""", "Died on +.volumes[38].scsi_naadevice_id"
    assert result.volumes[38].total_size == 5000658944, "Died on +.volumes[38].total_size"
    assert result.volumes[38].block_size == 4096, "Died on +.volumes[38].block_size"
    assert result.volumes[38].scsi_euidevice_id == """3435333500000379f47acc0100000000""", "Died on +.volumes[38].scsi_euidevice_id"
    assert result.volumes[38].volume_id == 889, "Died on +.volumes[38].volume_id"
    assert result.volumes[38].access == """replicationTarget""", "Died on +.volumes[38].access"
    assert result.volumes[38].iqn == """iqn.2010-01.com.solidfire:4535.async-target-39.889""", "Died on +.volumes[38].iqn"
    assert result.volumes[38].slice_count == 1, "Died on +.volumes[38].slice_count"
    assert type(result.volumes[38].attributes) is dict, "Died on .volumes[38].attributes"
    assert result.volumes[38].volume_pairs[0].volume_pair_uuid == UUID("feaeee6d-7c56-477f-bb89-e6167ad20159"), "Died on .volumes[38].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[38].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[38].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[38].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[38].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[38].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[38].volume_pairs[0].remote_replication.state"
    assert result.volumes[38].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[38].volume_pairs[0].remote_replication.mode"
    assert result.volumes[38].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[38].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[38].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[38].volume_pairs[0].cluster_pair_id"
    assert result.volumes[38].volume_pairs[0].remote_volume_id == 389, "Died on +.volumes[38].volume_pairs[0].remote_volume_id"
    assert result.volumes[38].volume_pairs[0].remote_volume_name == """async-source-39""", "Died on +.volumes[38].volume_pairs[0].remote_volume_name"
    assert result.volumes[38].volume_pairs[0].remote_slice_id == 389, "Died on +.volumes[38].volume_pairs[0].remote_slice_id"
    assert result.volumes[38].account_id == 6, "Died on +.volumes[38].account_id"
    assert result.volumes[38].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[38].create_time"
    assert result.volumes[38].virtual_volume_id is None, "Died on .volumes[38].virtual_volume_id"
    assert result.volumes[37].status == """active""", "Died on +.volumes[37].status"
    assert result.volumes[37].enable512e == False, "Died on +.volumes[37].enable512e"
    assert result.volumes[37].qos.burst_iops == 15000, "Died on +.volumes[37].qos.burst_iops"
    assert result.volumes[37].qos.burst_time == 60, "Died on +.volumes[37].qos.burst_time"
    assert result.volumes[37].qos.min_iops == 100, "Died on +.volumes[37].qos.min_iops"
    assert result.volumes[37].qos.max_iops == 15000, "Died on +.volumes[37].qos.max_iops"
    assert result.volumes[37].name == """async-target-38""", "Died on +.volumes[37].name"
    assert result.volumes[37].volume_access_groups[0] == 7, "Died on +.volumes[37].volume_access_groups[0]"
    assert result.volumes[37].scsi_naadevice_id == """6f47acc1000000003435333500000378""", "Died on +.volumes[37].scsi_naadevice_id"
    assert result.volumes[37].total_size == 5000658944, "Died on +.volumes[37].total_size"
    assert result.volumes[37].block_size == 4096, "Died on +.volumes[37].block_size"
    assert result.volumes[37].scsi_euidevice_id == """3435333500000378f47acc0100000000""", "Died on +.volumes[37].scsi_euidevice_id"
    assert result.volumes[37].volume_id == 888, "Died on +.volumes[37].volume_id"
    assert result.volumes[37].access == """replicationTarget""", "Died on +.volumes[37].access"
    assert result.volumes[37].iqn == """iqn.2010-01.com.solidfire:4535.async-target-38.888""", "Died on +.volumes[37].iqn"
    assert result.volumes[37].slice_count == 1, "Died on +.volumes[37].slice_count"
    assert type(result.volumes[37].attributes) is dict, "Died on .volumes[37].attributes"
    assert result.volumes[37].volume_pairs[0].volume_pair_uuid == UUID("676ed288-74af-4fa8-809c-d8ca6667536e"), "Died on .volumes[37].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[37].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[37].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[37].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[37].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[37].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[37].volume_pairs[0].remote_replication.state"
    assert result.volumes[37].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[37].volume_pairs[0].remote_replication.mode"
    assert result.volumes[37].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[37].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[37].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[37].volume_pairs[0].cluster_pair_id"
    assert result.volumes[37].volume_pairs[0].remote_volume_id == 388, "Died on +.volumes[37].volume_pairs[0].remote_volume_id"
    assert result.volumes[37].volume_pairs[0].remote_volume_name == """async-source-38""", "Died on +.volumes[37].volume_pairs[0].remote_volume_name"
    assert result.volumes[37].volume_pairs[0].remote_slice_id == 388, "Died on +.volumes[37].volume_pairs[0].remote_slice_id"
    assert result.volumes[37].account_id == 6, "Died on +.volumes[37].account_id"
    assert result.volumes[37].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[37].create_time"
    assert result.volumes[37].virtual_volume_id is None, "Died on .volumes[37].virtual_volume_id"
    assert result.volumes[36].status == """active""", "Died on +.volumes[36].status"
    assert result.volumes[36].enable512e == False, "Died on +.volumes[36].enable512e"
    assert result.volumes[36].qos.burst_iops == 15000, "Died on +.volumes[36].qos.burst_iops"
    assert result.volumes[36].qos.burst_time == 60, "Died on +.volumes[36].qos.burst_time"
    assert result.volumes[36].qos.min_iops == 100, "Died on +.volumes[36].qos.min_iops"
    assert result.volumes[36].qos.max_iops == 15000, "Died on +.volumes[36].qos.max_iops"
    assert result.volumes[36].name == """async-target-37""", "Died on +.volumes[36].name"
    assert result.volumes[36].volume_access_groups[0] == 7, "Died on +.volumes[36].volume_access_groups[0]"
    assert result.volumes[36].scsi_naadevice_id == """6f47acc1000000003435333500000377""", "Died on +.volumes[36].scsi_naadevice_id"
    assert result.volumes[36].total_size == 5000658944, "Died on +.volumes[36].total_size"
    assert result.volumes[36].block_size == 4096, "Died on +.volumes[36].block_size"
    assert result.volumes[36].scsi_euidevice_id == """3435333500000377f47acc0100000000""", "Died on +.volumes[36].scsi_euidevice_id"
    assert result.volumes[36].volume_id == 887, "Died on +.volumes[36].volume_id"
    assert result.volumes[36].access == """replicationTarget""", "Died on +.volumes[36].access"
    assert result.volumes[36].iqn == """iqn.2010-01.com.solidfire:4535.async-target-37.887""", "Died on +.volumes[36].iqn"
    assert result.volumes[36].slice_count == 1, "Died on +.volumes[36].slice_count"
    assert type(result.volumes[36].attributes) is dict, "Died on .volumes[36].attributes"
    assert result.volumes[36].volume_pairs[0].volume_pair_uuid == UUID("15b7c967-607f-47d7-b443-152131c9af86"), "Died on .volumes[36].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[36].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[36].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[36].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[36].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[36].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[36].volume_pairs[0].remote_replication.state"
    assert result.volumes[36].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[36].volume_pairs[0].remote_replication.mode"
    assert result.volumes[36].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[36].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[36].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[36].volume_pairs[0].cluster_pair_id"
    assert result.volumes[36].volume_pairs[0].remote_volume_id == 387, "Died on +.volumes[36].volume_pairs[0].remote_volume_id"
    assert result.volumes[36].volume_pairs[0].remote_volume_name == """async-source-37""", "Died on +.volumes[36].volume_pairs[0].remote_volume_name"
    assert result.volumes[36].volume_pairs[0].remote_slice_id == 387, "Died on +.volumes[36].volume_pairs[0].remote_slice_id"
    assert result.volumes[36].account_id == 6, "Died on +.volumes[36].account_id"
    assert result.volumes[36].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[36].create_time"
    assert result.volumes[36].virtual_volume_id is None, "Died on .volumes[36].virtual_volume_id"
    assert result.volumes[35].status == """active""", "Died on +.volumes[35].status"
    assert result.volumes[35].enable512e == False, "Died on +.volumes[35].enable512e"
    assert result.volumes[35].qos.burst_iops == 15000, "Died on +.volumes[35].qos.burst_iops"
    assert result.volumes[35].qos.burst_time == 60, "Died on +.volumes[35].qos.burst_time"
    assert result.volumes[35].qos.min_iops == 100, "Died on +.volumes[35].qos.min_iops"
    assert result.volumes[35].qos.max_iops == 15000, "Died on +.volumes[35].qos.max_iops"
    assert result.volumes[35].name == """async-target-36""", "Died on +.volumes[35].name"
    assert result.volumes[35].volume_access_groups[0] == 7, "Died on +.volumes[35].volume_access_groups[0]"
    assert result.volumes[35].scsi_naadevice_id == """6f47acc1000000003435333500000376""", "Died on +.volumes[35].scsi_naadevice_id"
    assert result.volumes[35].total_size == 5000658944, "Died on +.volumes[35].total_size"
    assert result.volumes[35].block_size == 4096, "Died on +.volumes[35].block_size"
    assert result.volumes[35].scsi_euidevice_id == """3435333500000376f47acc0100000000""", "Died on +.volumes[35].scsi_euidevice_id"
    assert result.volumes[35].volume_id == 886, "Died on +.volumes[35].volume_id"
    assert result.volumes[35].access == """replicationTarget""", "Died on +.volumes[35].access"
    assert result.volumes[35].iqn == """iqn.2010-01.com.solidfire:4535.async-target-36.886""", "Died on +.volumes[35].iqn"
    assert result.volumes[35].slice_count == 1, "Died on +.volumes[35].slice_count"
    assert type(result.volumes[35].attributes) is dict, "Died on .volumes[35].attributes"
    assert result.volumes[35].volume_pairs[0].volume_pair_uuid == UUID("ef82aeff-5c27-47e1-8db1-6b77c0f73d05"), "Died on .volumes[35].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[35].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[35].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[35].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[35].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[35].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[35].volume_pairs[0].remote_replication.state"
    assert result.volumes[35].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[35].volume_pairs[0].remote_replication.mode"
    assert result.volumes[35].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[35].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[35].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[35].volume_pairs[0].cluster_pair_id"
    assert result.volumes[35].volume_pairs[0].remote_volume_id == 386, "Died on +.volumes[35].volume_pairs[0].remote_volume_id"
    assert result.volumes[35].volume_pairs[0].remote_volume_name == """async-source-36""", "Died on +.volumes[35].volume_pairs[0].remote_volume_name"
    assert result.volumes[35].volume_pairs[0].remote_slice_id == 386, "Died on +.volumes[35].volume_pairs[0].remote_slice_id"
    assert result.volumes[35].account_id == 6, "Died on +.volumes[35].account_id"
    assert result.volumes[35].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[35].create_time"
    assert result.volumes[35].virtual_volume_id is None, "Died on .volumes[35].virtual_volume_id"
    assert result.volumes[34].status == """active""", "Died on +.volumes[34].status"
    assert result.volumes[34].enable512e == False, "Died on +.volumes[34].enable512e"
    assert result.volumes[34].qos.burst_iops == 15000, "Died on +.volumes[34].qos.burst_iops"
    assert result.volumes[34].qos.burst_time == 60, "Died on +.volumes[34].qos.burst_time"
    assert result.volumes[34].qos.min_iops == 100, "Died on +.volumes[34].qos.min_iops"
    assert result.volumes[34].qos.max_iops == 15000, "Died on +.volumes[34].qos.max_iops"
    assert result.volumes[34].name == """async-target-35""", "Died on +.volumes[34].name"
    assert result.volumes[34].volume_access_groups[0] == 7, "Died on +.volumes[34].volume_access_groups[0]"
    assert result.volumes[34].scsi_naadevice_id == """6f47acc1000000003435333500000375""", "Died on +.volumes[34].scsi_naadevice_id"
    assert result.volumes[34].total_size == 5000658944, "Died on +.volumes[34].total_size"
    assert result.volumes[34].block_size == 4096, "Died on +.volumes[34].block_size"
    assert result.volumes[34].scsi_euidevice_id == """3435333500000375f47acc0100000000""", "Died on +.volumes[34].scsi_euidevice_id"
    assert result.volumes[34].volume_id == 885, "Died on +.volumes[34].volume_id"
    assert result.volumes[34].access == """replicationTarget""", "Died on +.volumes[34].access"
    assert result.volumes[34].iqn == """iqn.2010-01.com.solidfire:4535.async-target-35.885""", "Died on +.volumes[34].iqn"
    assert result.volumes[34].slice_count == 1, "Died on +.volumes[34].slice_count"
    assert type(result.volumes[34].attributes) is dict, "Died on .volumes[34].attributes"
    assert result.volumes[34].volume_pairs[0].volume_pair_uuid == UUID("5cbe248d-3307-48b7-8c6b-d560b181065a"), "Died on .volumes[34].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[34].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[34].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[34].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[34].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[34].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[34].volume_pairs[0].remote_replication.state"
    assert result.volumes[34].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[34].volume_pairs[0].remote_replication.mode"
    assert result.volumes[34].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[34].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[34].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[34].volume_pairs[0].cluster_pair_id"
    assert result.volumes[34].volume_pairs[0].remote_volume_id == 385, "Died on +.volumes[34].volume_pairs[0].remote_volume_id"
    assert result.volumes[34].volume_pairs[0].remote_volume_name == """async-source-35""", "Died on +.volumes[34].volume_pairs[0].remote_volume_name"
    assert result.volumes[34].volume_pairs[0].remote_slice_id == 385, "Died on +.volumes[34].volume_pairs[0].remote_slice_id"
    assert result.volumes[34].account_id == 6, "Died on +.volumes[34].account_id"
    assert result.volumes[34].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[34].create_time"
    assert result.volumes[34].virtual_volume_id is None, "Died on .volumes[34].virtual_volume_id"
    assert result.volumes[33].status == """active""", "Died on +.volumes[33].status"
    assert result.volumes[33].enable512e == False, "Died on +.volumes[33].enable512e"
    assert result.volumes[33].qos.burst_iops == 15000, "Died on +.volumes[33].qos.burst_iops"
    assert result.volumes[33].qos.burst_time == 60, "Died on +.volumes[33].qos.burst_time"
    assert result.volumes[33].qos.min_iops == 100, "Died on +.volumes[33].qos.min_iops"
    assert result.volumes[33].qos.max_iops == 15000, "Died on +.volumes[33].qos.max_iops"
    assert result.volumes[33].name == """async-target-34""", "Died on +.volumes[33].name"
    assert result.volumes[33].volume_access_groups[0] == 7, "Died on +.volumes[33].volume_access_groups[0]"
    assert result.volumes[33].scsi_naadevice_id == """6f47acc1000000003435333500000374""", "Died on +.volumes[33].scsi_naadevice_id"
    assert result.volumes[33].total_size == 5000658944, "Died on +.volumes[33].total_size"
    assert result.volumes[33].block_size == 4096, "Died on +.volumes[33].block_size"
    assert result.volumes[33].scsi_euidevice_id == """3435333500000374f47acc0100000000""", "Died on +.volumes[33].scsi_euidevice_id"
    assert result.volumes[33].volume_id == 884, "Died on +.volumes[33].volume_id"
    assert result.volumes[33].access == """replicationTarget""", "Died on +.volumes[33].access"
    assert result.volumes[33].iqn == """iqn.2010-01.com.solidfire:4535.async-target-34.884""", "Died on +.volumes[33].iqn"
    assert result.volumes[33].slice_count == 1, "Died on +.volumes[33].slice_count"
    assert type(result.volumes[33].attributes) is dict, "Died on .volumes[33].attributes"
    assert result.volumes[33].volume_pairs[0].volume_pair_uuid == UUID("335e160a-bbb8-4552-9178-fad09b803228"), "Died on .volumes[33].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[33].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[33].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[33].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[33].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[33].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[33].volume_pairs[0].remote_replication.state"
    assert result.volumes[33].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[33].volume_pairs[0].remote_replication.mode"
    assert result.volumes[33].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[33].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[33].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[33].volume_pairs[0].cluster_pair_id"
    assert result.volumes[33].volume_pairs[0].remote_volume_id == 384, "Died on +.volumes[33].volume_pairs[0].remote_volume_id"
    assert result.volumes[33].volume_pairs[0].remote_volume_name == """async-source-34""", "Died on +.volumes[33].volume_pairs[0].remote_volume_name"
    assert result.volumes[33].volume_pairs[0].remote_slice_id == 384, "Died on +.volumes[33].volume_pairs[0].remote_slice_id"
    assert result.volumes[33].account_id == 6, "Died on +.volumes[33].account_id"
    assert result.volumes[33].create_time == """2016-12-30T18:10:11Z""", "Died on +.volumes[33].create_time"
    assert result.volumes[33].virtual_volume_id is None, "Died on .volumes[33].virtual_volume_id"
    assert result.volumes[32].status == """active""", "Died on +.volumes[32].status"
    assert result.volumes[32].enable512e == False, "Died on +.volumes[32].enable512e"
    assert result.volumes[32].qos.burst_iops == 15000, "Died on +.volumes[32].qos.burst_iops"
    assert result.volumes[32].qos.burst_time == 60, "Died on +.volumes[32].qos.burst_time"
    assert result.volumes[32].qos.min_iops == 100, "Died on +.volumes[32].qos.min_iops"
    assert result.volumes[32].qos.max_iops == 15000, "Died on +.volumes[32].qos.max_iops"
    assert result.volumes[32].name == """async-target-33""", "Died on +.volumes[32].name"
    assert result.volumes[32].volume_access_groups[0] == 7, "Died on +.volumes[32].volume_access_groups[0]"
    assert result.volumes[32].scsi_naadevice_id == """6f47acc1000000003435333500000373""", "Died on +.volumes[32].scsi_naadevice_id"
    assert result.volumes[32].total_size == 5000658944, "Died on +.volumes[32].total_size"
    assert result.volumes[32].block_size == 4096, "Died on +.volumes[32].block_size"
    assert result.volumes[32].scsi_euidevice_id == """3435333500000373f47acc0100000000""", "Died on +.volumes[32].scsi_euidevice_id"
    assert result.volumes[32].volume_id == 883, "Died on +.volumes[32].volume_id"
    assert result.volumes[32].access == """replicationTarget""", "Died on +.volumes[32].access"
    assert result.volumes[32].iqn == """iqn.2010-01.com.solidfire:4535.async-target-33.883""", "Died on +.volumes[32].iqn"
    assert result.volumes[32].slice_count == 1, "Died on +.volumes[32].slice_count"
    assert type(result.volumes[32].attributes) is dict, "Died on .volumes[32].attributes"
    assert result.volumes[32].volume_pairs[0].volume_pair_uuid == UUID("d8801b84-38ea-4344-9f1d-47a1a9e35f66"), "Died on .volumes[32].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[32].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[32].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[32].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[32].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[32].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[32].volume_pairs[0].remote_replication.state"
    assert result.volumes[32].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[32].volume_pairs[0].remote_replication.mode"
    assert result.volumes[32].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[32].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[32].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[32].volume_pairs[0].cluster_pair_id"
    assert result.volumes[32].volume_pairs[0].remote_volume_id == 383, "Died on +.volumes[32].volume_pairs[0].remote_volume_id"
    assert result.volumes[32].volume_pairs[0].remote_volume_name == """async-source-33""", "Died on +.volumes[32].volume_pairs[0].remote_volume_name"
    assert result.volumes[32].volume_pairs[0].remote_slice_id == 383, "Died on +.volumes[32].volume_pairs[0].remote_slice_id"
    assert result.volumes[32].account_id == 6, "Died on +.volumes[32].account_id"
    assert result.volumes[32].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[32].create_time"
    assert result.volumes[32].virtual_volume_id is None, "Died on .volumes[32].virtual_volume_id"
    assert result.volumes[31].status == """active""", "Died on +.volumes[31].status"
    assert result.volumes[31].enable512e == False, "Died on +.volumes[31].enable512e"
    assert result.volumes[31].qos.burst_iops == 15000, "Died on +.volumes[31].qos.burst_iops"
    assert result.volumes[31].qos.burst_time == 60, "Died on +.volumes[31].qos.burst_time"
    assert result.volumes[31].qos.min_iops == 100, "Died on +.volumes[31].qos.min_iops"
    assert result.volumes[31].qos.max_iops == 15000, "Died on +.volumes[31].qos.max_iops"
    assert result.volumes[31].name == """async-target-32""", "Died on +.volumes[31].name"
    assert result.volumes[31].volume_access_groups[0] == 7, "Died on +.volumes[31].volume_access_groups[0]"
    assert result.volumes[31].scsi_naadevice_id == """6f47acc1000000003435333500000372""", "Died on +.volumes[31].scsi_naadevice_id"
    assert result.volumes[31].total_size == 5000658944, "Died on +.volumes[31].total_size"
    assert result.volumes[31].block_size == 4096, "Died on +.volumes[31].block_size"
    assert result.volumes[31].scsi_euidevice_id == """3435333500000372f47acc0100000000""", "Died on +.volumes[31].scsi_euidevice_id"
    assert result.volumes[31].volume_id == 882, "Died on +.volumes[31].volume_id"
    assert result.volumes[31].access == """replicationTarget""", "Died on +.volumes[31].access"
    assert result.volumes[31].iqn == """iqn.2010-01.com.solidfire:4535.async-target-32.882""", "Died on +.volumes[31].iqn"
    assert result.volumes[31].slice_count == 1, "Died on +.volumes[31].slice_count"
    assert type(result.volumes[31].attributes) is dict, "Died on .volumes[31].attributes"
    assert result.volumes[31].volume_pairs[0].volume_pair_uuid == UUID("13357901-05fe-4451-8ed3-59b290f658d5"), "Died on .volumes[31].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[31].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[31].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[31].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[31].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[31].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[31].volume_pairs[0].remote_replication.state"
    assert result.volumes[31].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[31].volume_pairs[0].remote_replication.mode"
    assert result.volumes[31].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[31].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[31].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[31].volume_pairs[0].cluster_pair_id"
    assert result.volumes[31].volume_pairs[0].remote_volume_id == 382, "Died on +.volumes[31].volume_pairs[0].remote_volume_id"
    assert result.volumes[31].volume_pairs[0].remote_volume_name == """async-source-32""", "Died on +.volumes[31].volume_pairs[0].remote_volume_name"
    assert result.volumes[31].volume_pairs[0].remote_slice_id == 382, "Died on +.volumes[31].volume_pairs[0].remote_slice_id"
    assert result.volumes[31].account_id == 6, "Died on +.volumes[31].account_id"
    assert result.volumes[31].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[31].create_time"
    assert result.volumes[31].virtual_volume_id is None, "Died on .volumes[31].virtual_volume_id"
    assert result.volumes[30].status == """active""", "Died on +.volumes[30].status"
    assert result.volumes[30].enable512e == False, "Died on +.volumes[30].enable512e"
    assert result.volumes[30].qos.burst_iops == 15000, "Died on +.volumes[30].qos.burst_iops"
    assert result.volumes[30].qos.burst_time == 60, "Died on +.volumes[30].qos.burst_time"
    assert result.volumes[30].qos.min_iops == 100, "Died on +.volumes[30].qos.min_iops"
    assert result.volumes[30].qos.max_iops == 15000, "Died on +.volumes[30].qos.max_iops"
    assert result.volumes[30].name == """async-target-31""", "Died on +.volumes[30].name"
    assert result.volumes[30].volume_access_groups[0] == 7, "Died on +.volumes[30].volume_access_groups[0]"
    assert result.volumes[30].scsi_naadevice_id == """6f47acc1000000003435333500000371""", "Died on +.volumes[30].scsi_naadevice_id"
    assert result.volumes[30].total_size == 5000658944, "Died on +.volumes[30].total_size"
    assert result.volumes[30].block_size == 4096, "Died on +.volumes[30].block_size"
    assert result.volumes[30].scsi_euidevice_id == """3435333500000371f47acc0100000000""", "Died on +.volumes[30].scsi_euidevice_id"
    assert result.volumes[30].volume_id == 881, "Died on +.volumes[30].volume_id"
    assert result.volumes[30].access == """replicationTarget""", "Died on +.volumes[30].access"
    assert result.volumes[30].iqn == """iqn.2010-01.com.solidfire:4535.async-target-31.881""", "Died on +.volumes[30].iqn"
    assert result.volumes[30].slice_count == 1, "Died on +.volumes[30].slice_count"
    assert type(result.volumes[30].attributes) is dict, "Died on .volumes[30].attributes"
    assert result.volumes[30].volume_pairs[0].volume_pair_uuid == UUID("ed578ad7-fece-4d15-a192-d5890c75adb9"), "Died on .volumes[30].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[30].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[30].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[30].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[30].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[30].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[30].volume_pairs[0].remote_replication.state"
    assert result.volumes[30].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[30].volume_pairs[0].remote_replication.mode"
    assert result.volumes[30].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[30].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[30].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[30].volume_pairs[0].cluster_pair_id"
    assert result.volumes[30].volume_pairs[0].remote_volume_id == 381, "Died on +.volumes[30].volume_pairs[0].remote_volume_id"
    assert result.volumes[30].volume_pairs[0].remote_volume_name == """async-source-31""", "Died on +.volumes[30].volume_pairs[0].remote_volume_name"
    assert result.volumes[30].volume_pairs[0].remote_slice_id == 381, "Died on +.volumes[30].volume_pairs[0].remote_slice_id"
    assert result.volumes[30].account_id == 6, "Died on +.volumes[30].account_id"
    assert result.volumes[30].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[30].create_time"
    assert result.volumes[30].virtual_volume_id is None, "Died on .volumes[30].virtual_volume_id"
    assert result.volumes[29].status == """active""", "Died on +.volumes[29].status"
    assert result.volumes[29].enable512e == False, "Died on +.volumes[29].enable512e"
    assert result.volumes[29].qos.burst_iops == 15000, "Died on +.volumes[29].qos.burst_iops"
    assert result.volumes[29].qos.burst_time == 60, "Died on +.volumes[29].qos.burst_time"
    assert result.volumes[29].qos.min_iops == 100, "Died on +.volumes[29].qos.min_iops"
    assert result.volumes[29].qos.max_iops == 15000, "Died on +.volumes[29].qos.max_iops"
    assert result.volumes[29].name == """async-target-30""", "Died on +.volumes[29].name"
    assert result.volumes[29].volume_access_groups[0] == 7, "Died on +.volumes[29].volume_access_groups[0]"
    assert result.volumes[29].scsi_naadevice_id == """6f47acc1000000003435333500000370""", "Died on +.volumes[29].scsi_naadevice_id"
    assert result.volumes[29].total_size == 5000658944, "Died on +.volumes[29].total_size"
    assert result.volumes[29].block_size == 4096, "Died on +.volumes[29].block_size"
    assert result.volumes[29].scsi_euidevice_id == """3435333500000370f47acc0100000000""", "Died on +.volumes[29].scsi_euidevice_id"
    assert result.volumes[29].volume_id == 880, "Died on +.volumes[29].volume_id"
    assert result.volumes[29].access == """replicationTarget""", "Died on +.volumes[29].access"
    assert result.volumes[29].iqn == """iqn.2010-01.com.solidfire:4535.async-target-30.880""", "Died on +.volumes[29].iqn"
    assert result.volumes[29].slice_count == 1, "Died on +.volumes[29].slice_count"
    assert type(result.volumes[29].attributes) is dict, "Died on .volumes[29].attributes"
    assert result.volumes[29].volume_pairs[0].volume_pair_uuid == UUID("6c2ff942-29d9-4250-ab4a-5df91abda05c"), "Died on .volumes[29].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[29].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[29].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[29].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[29].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[29].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[29].volume_pairs[0].remote_replication.state"
    assert result.volumes[29].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[29].volume_pairs[0].remote_replication.mode"
    assert result.volumes[29].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[29].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[29].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[29].volume_pairs[0].cluster_pair_id"
    assert result.volumes[29].volume_pairs[0].remote_volume_id == 380, "Died on +.volumes[29].volume_pairs[0].remote_volume_id"
    assert result.volumes[29].volume_pairs[0].remote_volume_name == """async-source-30""", "Died on +.volumes[29].volume_pairs[0].remote_volume_name"
    assert result.volumes[29].volume_pairs[0].remote_slice_id == 380, "Died on +.volumes[29].volume_pairs[0].remote_slice_id"
    assert result.volumes[29].account_id == 6, "Died on +.volumes[29].account_id"
    assert result.volumes[29].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[29].create_time"
    assert result.volumes[29].virtual_volume_id is None, "Died on .volumes[29].virtual_volume_id"
    assert result.volumes[28].status == """active""", "Died on +.volumes[28].status"
    assert result.volumes[28].enable512e == False, "Died on +.volumes[28].enable512e"
    assert result.volumes[28].qos.burst_iops == 15000, "Died on +.volumes[28].qos.burst_iops"
    assert result.volumes[28].qos.burst_time == 60, "Died on +.volumes[28].qos.burst_time"
    assert result.volumes[28].qos.min_iops == 100, "Died on +.volumes[28].qos.min_iops"
    assert result.volumes[28].qos.max_iops == 15000, "Died on +.volumes[28].qos.max_iops"
    assert result.volumes[28].name == """async-target-29""", "Died on +.volumes[28].name"
    assert result.volumes[28].volume_access_groups[0] == 7, "Died on +.volumes[28].volume_access_groups[0]"
    assert result.volumes[28].scsi_naadevice_id == """6f47acc100000000343533350000036f""", "Died on +.volumes[28].scsi_naadevice_id"
    assert result.volumes[28].total_size == 5000658944, "Died on +.volumes[28].total_size"
    assert result.volumes[28].block_size == 4096, "Died on +.volumes[28].block_size"
    assert result.volumes[28].scsi_euidevice_id == """343533350000036ff47acc0100000000""", "Died on +.volumes[28].scsi_euidevice_id"
    assert result.volumes[28].volume_id == 879, "Died on +.volumes[28].volume_id"
    assert result.volumes[28].access == """replicationTarget""", "Died on +.volumes[28].access"
    assert result.volumes[28].iqn == """iqn.2010-01.com.solidfire:4535.async-target-29.879""", "Died on +.volumes[28].iqn"
    assert result.volumes[28].slice_count == 1, "Died on +.volumes[28].slice_count"
    assert type(result.volumes[28].attributes) is dict, "Died on .volumes[28].attributes"
    assert result.volumes[28].volume_pairs[0].volume_pair_uuid == UUID("527d7c44-f4b8-424c-b4cf-6e4ec39419a6"), "Died on .volumes[28].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[28].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[28].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[28].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[28].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[28].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[28].volume_pairs[0].remote_replication.state"
    assert result.volumes[28].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[28].volume_pairs[0].remote_replication.mode"
    assert result.volumes[28].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[28].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[28].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[28].volume_pairs[0].cluster_pair_id"
    assert result.volumes[28].volume_pairs[0].remote_volume_id == 379, "Died on +.volumes[28].volume_pairs[0].remote_volume_id"
    assert result.volumes[28].volume_pairs[0].remote_volume_name == """async-source-29""", "Died on +.volumes[28].volume_pairs[0].remote_volume_name"
    assert result.volumes[28].volume_pairs[0].remote_slice_id == 379, "Died on +.volumes[28].volume_pairs[0].remote_slice_id"
    assert result.volumes[28].account_id == 6, "Died on +.volumes[28].account_id"
    assert result.volumes[28].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[28].create_time"
    assert result.volumes[28].virtual_volume_id is None, "Died on .volumes[28].virtual_volume_id"
    assert result.volumes[27].status == """active""", "Died on +.volumes[27].status"
    assert result.volumes[27].enable512e == False, "Died on +.volumes[27].enable512e"
    assert result.volumes[27].qos.burst_iops == 15000, "Died on +.volumes[27].qos.burst_iops"
    assert result.volumes[27].qos.burst_time == 60, "Died on +.volumes[27].qos.burst_time"
    assert result.volumes[27].qos.min_iops == 100, "Died on +.volumes[27].qos.min_iops"
    assert result.volumes[27].qos.max_iops == 15000, "Died on +.volumes[27].qos.max_iops"
    assert result.volumes[27].name == """async-target-28""", "Died on +.volumes[27].name"
    assert result.volumes[27].volume_access_groups[0] == 7, "Died on +.volumes[27].volume_access_groups[0]"
    assert result.volumes[27].scsi_naadevice_id == """6f47acc100000000343533350000036e""", "Died on +.volumes[27].scsi_naadevice_id"
    assert result.volumes[27].total_size == 5000658944, "Died on +.volumes[27].total_size"
    assert result.volumes[27].block_size == 4096, "Died on +.volumes[27].block_size"
    assert result.volumes[27].scsi_euidevice_id == """343533350000036ef47acc0100000000""", "Died on +.volumes[27].scsi_euidevice_id"
    assert result.volumes[27].volume_id == 878, "Died on +.volumes[27].volume_id"
    assert result.volumes[27].access == """replicationTarget""", "Died on +.volumes[27].access"
    assert result.volumes[27].iqn == """iqn.2010-01.com.solidfire:4535.async-target-28.878""", "Died on +.volumes[27].iqn"
    assert result.volumes[27].slice_count == 1, "Died on +.volumes[27].slice_count"
    assert type(result.volumes[27].attributes) is dict, "Died on .volumes[27].attributes"
    assert result.volumes[27].volume_pairs[0].volume_pair_uuid == UUID("a8c85e6a-4e6f-47c4-b3b6-c91b9184c55b"), "Died on .volumes[27].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[27].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[27].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[27].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[27].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[27].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[27].volume_pairs[0].remote_replication.state"
    assert result.volumes[27].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[27].volume_pairs[0].remote_replication.mode"
    assert result.volumes[27].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[27].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[27].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[27].volume_pairs[0].cluster_pair_id"
    assert result.volumes[27].volume_pairs[0].remote_volume_id == 378, "Died on +.volumes[27].volume_pairs[0].remote_volume_id"
    assert result.volumes[27].volume_pairs[0].remote_volume_name == """async-source-28""", "Died on +.volumes[27].volume_pairs[0].remote_volume_name"
    assert result.volumes[27].volume_pairs[0].remote_slice_id == 378, "Died on +.volumes[27].volume_pairs[0].remote_slice_id"
    assert result.volumes[27].account_id == 6, "Died on +.volumes[27].account_id"
    assert result.volumes[27].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[27].create_time"
    assert result.volumes[27].virtual_volume_id is None, "Died on .volumes[27].virtual_volume_id"
    assert result.volumes[26].status == """active""", "Died on +.volumes[26].status"
    assert result.volumes[26].enable512e == False, "Died on +.volumes[26].enable512e"
    assert result.volumes[26].qos.burst_iops == 15000, "Died on +.volumes[26].qos.burst_iops"
    assert result.volumes[26].qos.burst_time == 60, "Died on +.volumes[26].qos.burst_time"
    assert result.volumes[26].qos.min_iops == 100, "Died on +.volumes[26].qos.min_iops"
    assert result.volumes[26].qos.max_iops == 15000, "Died on +.volumes[26].qos.max_iops"
    assert result.volumes[26].name == """async-target-27""", "Died on +.volumes[26].name"
    assert result.volumes[26].volume_access_groups[0] == 7, "Died on +.volumes[26].volume_access_groups[0]"
    assert result.volumes[26].scsi_naadevice_id == """6f47acc100000000343533350000036d""", "Died on +.volumes[26].scsi_naadevice_id"
    assert result.volumes[26].total_size == 5000658944, "Died on +.volumes[26].total_size"
    assert result.volumes[26].block_size == 4096, "Died on +.volumes[26].block_size"
    assert result.volumes[26].scsi_euidevice_id == """343533350000036df47acc0100000000""", "Died on +.volumes[26].scsi_euidevice_id"
    assert result.volumes[26].volume_id == 877, "Died on +.volumes[26].volume_id"
    assert result.volumes[26].access == """replicationTarget""", "Died on +.volumes[26].access"
    assert result.volumes[26].iqn == """iqn.2010-01.com.solidfire:4535.async-target-27.877""", "Died on +.volumes[26].iqn"
    assert result.volumes[26].slice_count == 1, "Died on +.volumes[26].slice_count"
    assert type(result.volumes[26].attributes) is dict, "Died on .volumes[26].attributes"
    assert result.volumes[26].volume_pairs[0].volume_pair_uuid == UUID("4f876f64-6099-4389-a92c-2284bb78595b"), "Died on .volumes[26].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[26].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[26].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[26].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[26].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[26].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[26].volume_pairs[0].remote_replication.state"
    assert result.volumes[26].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[26].volume_pairs[0].remote_replication.mode"
    assert result.volumes[26].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[26].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[26].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[26].volume_pairs[0].cluster_pair_id"
    assert result.volumes[26].volume_pairs[0].remote_volume_id == 377, "Died on +.volumes[26].volume_pairs[0].remote_volume_id"
    assert result.volumes[26].volume_pairs[0].remote_volume_name == """async-source-27""", "Died on +.volumes[26].volume_pairs[0].remote_volume_name"
    assert result.volumes[26].volume_pairs[0].remote_slice_id == 377, "Died on +.volumes[26].volume_pairs[0].remote_slice_id"
    assert result.volumes[26].account_id == 6, "Died on +.volumes[26].account_id"
    assert result.volumes[26].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[26].create_time"
    assert result.volumes[26].virtual_volume_id is None, "Died on .volumes[26].virtual_volume_id"
    assert result.volumes[25].status == """active""", "Died on +.volumes[25].status"
    assert result.volumes[25].enable512e == False, "Died on +.volumes[25].enable512e"
    assert result.volumes[25].qos.burst_iops == 15000, "Died on +.volumes[25].qos.burst_iops"
    assert result.volumes[25].qos.burst_time == 60, "Died on +.volumes[25].qos.burst_time"
    assert result.volumes[25].qos.min_iops == 100, "Died on +.volumes[25].qos.min_iops"
    assert result.volumes[25].qos.max_iops == 15000, "Died on +.volumes[25].qos.max_iops"
    assert result.volumes[25].name == """async-target-26""", "Died on +.volumes[25].name"
    assert result.volumes[25].volume_access_groups[0] == 7, "Died on +.volumes[25].volume_access_groups[0]"
    assert result.volumes[25].scsi_naadevice_id == """6f47acc100000000343533350000036c""", "Died on +.volumes[25].scsi_naadevice_id"
    assert result.volumes[25].total_size == 5000658944, "Died on +.volumes[25].total_size"
    assert result.volumes[25].block_size == 4096, "Died on +.volumes[25].block_size"
    assert result.volumes[25].scsi_euidevice_id == """343533350000036cf47acc0100000000""", "Died on +.volumes[25].scsi_euidevice_id"
    assert result.volumes[25].volume_id == 876, "Died on +.volumes[25].volume_id"
    assert result.volumes[25].access == """replicationTarget""", "Died on +.volumes[25].access"
    assert result.volumes[25].iqn == """iqn.2010-01.com.solidfire:4535.async-target-26.876""", "Died on +.volumes[25].iqn"
    assert result.volumes[25].slice_count == 1, "Died on +.volumes[25].slice_count"
    assert type(result.volumes[25].attributes) is dict, "Died on .volumes[25].attributes"
    assert result.volumes[25].volume_pairs[0].volume_pair_uuid == UUID("d7330f99-7146-4169-9e80-26654cf094b3"), "Died on .volumes[25].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[25].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[25].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[25].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[25].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[25].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[25].volume_pairs[0].remote_replication.state"
    assert result.volumes[25].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[25].volume_pairs[0].remote_replication.mode"
    assert result.volumes[25].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[25].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[25].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[25].volume_pairs[0].cluster_pair_id"
    assert result.volumes[25].volume_pairs[0].remote_volume_id == 376, "Died on +.volumes[25].volume_pairs[0].remote_volume_id"
    assert result.volumes[25].volume_pairs[0].remote_volume_name == """async-source-26""", "Died on +.volumes[25].volume_pairs[0].remote_volume_name"
    assert result.volumes[25].volume_pairs[0].remote_slice_id == 376, "Died on +.volumes[25].volume_pairs[0].remote_slice_id"
    assert result.volumes[25].account_id == 6, "Died on +.volumes[25].account_id"
    assert result.volumes[25].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[25].create_time"
    assert result.volumes[25].virtual_volume_id is None, "Died on .volumes[25].virtual_volume_id"
    assert result.volumes[24].status == """active""", "Died on +.volumes[24].status"
    assert result.volumes[24].enable512e == False, "Died on +.volumes[24].enable512e"
    assert result.volumes[24].qos.burst_iops == 15000, "Died on +.volumes[24].qos.burst_iops"
    assert result.volumes[24].qos.burst_time == 60, "Died on +.volumes[24].qos.burst_time"
    assert result.volumes[24].qos.min_iops == 100, "Died on +.volumes[24].qos.min_iops"
    assert result.volumes[24].qos.max_iops == 15000, "Died on +.volumes[24].qos.max_iops"
    assert result.volumes[24].name == """async-target-25""", "Died on +.volumes[24].name"
    assert result.volumes[24].volume_access_groups[0] == 7, "Died on +.volumes[24].volume_access_groups[0]"
    assert result.volumes[24].scsi_naadevice_id == """6f47acc100000000343533350000036b""", "Died on +.volumes[24].scsi_naadevice_id"
    assert result.volumes[24].total_size == 5000658944, "Died on +.volumes[24].total_size"
    assert result.volumes[24].block_size == 4096, "Died on +.volumes[24].block_size"
    assert result.volumes[24].scsi_euidevice_id == """343533350000036bf47acc0100000000""", "Died on +.volumes[24].scsi_euidevice_id"
    assert result.volumes[24].volume_id == 875, "Died on +.volumes[24].volume_id"
    assert result.volumes[24].access == """replicationTarget""", "Died on +.volumes[24].access"
    assert result.volumes[24].iqn == """iqn.2010-01.com.solidfire:4535.async-target-25.875""", "Died on +.volumes[24].iqn"
    assert result.volumes[24].slice_count == 1, "Died on +.volumes[24].slice_count"
    assert type(result.volumes[24].attributes) is dict, "Died on .volumes[24].attributes"
    assert result.volumes[24].volume_pairs[0].volume_pair_uuid == UUID("92b88bbf-e0ae-4bbe-aa92-808dab3246b3"), "Died on .volumes[24].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[24].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[24].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[24].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[24].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[24].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[24].volume_pairs[0].remote_replication.state"
    assert result.volumes[24].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[24].volume_pairs[0].remote_replication.mode"
    assert result.volumes[24].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[24].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[24].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[24].volume_pairs[0].cluster_pair_id"
    assert result.volumes[24].volume_pairs[0].remote_volume_id == 375, "Died on +.volumes[24].volume_pairs[0].remote_volume_id"
    assert result.volumes[24].volume_pairs[0].remote_volume_name == """async-source-25""", "Died on +.volumes[24].volume_pairs[0].remote_volume_name"
    assert result.volumes[24].volume_pairs[0].remote_slice_id == 375, "Died on +.volumes[24].volume_pairs[0].remote_slice_id"
    assert result.volumes[24].account_id == 6, "Died on +.volumes[24].account_id"
    assert result.volumes[24].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[24].create_time"
    assert result.volumes[24].virtual_volume_id is None, "Died on .volumes[24].virtual_volume_id"
    assert result.volumes[23].status == """active""", "Died on +.volumes[23].status"
    assert result.volumes[23].enable512e == False, "Died on +.volumes[23].enable512e"
    assert result.volumes[23].qos.burst_iops == 15000, "Died on +.volumes[23].qos.burst_iops"
    assert result.volumes[23].qos.burst_time == 60, "Died on +.volumes[23].qos.burst_time"
    assert result.volumes[23].qos.min_iops == 100, "Died on +.volumes[23].qos.min_iops"
    assert result.volumes[23].qos.max_iops == 15000, "Died on +.volumes[23].qos.max_iops"
    assert result.volumes[23].name == """async-target-24""", "Died on +.volumes[23].name"
    assert result.volumes[23].volume_access_groups[0] == 7, "Died on +.volumes[23].volume_access_groups[0]"
    assert result.volumes[23].scsi_naadevice_id == """6f47acc100000000343533350000036a""", "Died on +.volumes[23].scsi_naadevice_id"
    assert result.volumes[23].total_size == 5000658944, "Died on +.volumes[23].total_size"
    assert result.volumes[23].block_size == 4096, "Died on +.volumes[23].block_size"
    assert result.volumes[23].scsi_euidevice_id == """343533350000036af47acc0100000000""", "Died on +.volumes[23].scsi_euidevice_id"
    assert result.volumes[23].volume_id == 874, "Died on +.volumes[23].volume_id"
    assert result.volumes[23].access == """replicationTarget""", "Died on +.volumes[23].access"
    assert result.volumes[23].iqn == """iqn.2010-01.com.solidfire:4535.async-target-24.874""", "Died on +.volumes[23].iqn"
    assert result.volumes[23].slice_count == 1, "Died on +.volumes[23].slice_count"
    assert type(result.volumes[23].attributes) is dict, "Died on .volumes[23].attributes"
    assert result.volumes[23].volume_pairs[0].volume_pair_uuid == UUID("1f954998-8217-495b-9805-a64ac39ee84e"), "Died on .volumes[23].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[23].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[23].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[23].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[23].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[23].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[23].volume_pairs[0].remote_replication.state"
    assert result.volumes[23].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[23].volume_pairs[0].remote_replication.mode"
    assert result.volumes[23].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[23].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[23].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[23].volume_pairs[0].cluster_pair_id"
    assert result.volumes[23].volume_pairs[0].remote_volume_id == 374, "Died on +.volumes[23].volume_pairs[0].remote_volume_id"
    assert result.volumes[23].volume_pairs[0].remote_volume_name == """async-source-24""", "Died on +.volumes[23].volume_pairs[0].remote_volume_name"
    assert result.volumes[23].volume_pairs[0].remote_slice_id == 374, "Died on +.volumes[23].volume_pairs[0].remote_slice_id"
    assert result.volumes[23].account_id == 6, "Died on +.volumes[23].account_id"
    assert result.volumes[23].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[23].create_time"
    assert result.volumes[23].virtual_volume_id is None, "Died on .volumes[23].virtual_volume_id"
    assert result.volumes[22].status == """active""", "Died on +.volumes[22].status"
    assert result.volumes[22].enable512e == False, "Died on +.volumes[22].enable512e"
    assert result.volumes[22].qos.burst_iops == 15000, "Died on +.volumes[22].qos.burst_iops"
    assert result.volumes[22].qos.burst_time == 60, "Died on +.volumes[22].qos.burst_time"
    assert result.volumes[22].qos.min_iops == 100, "Died on +.volumes[22].qos.min_iops"
    assert result.volumes[22].qos.max_iops == 15000, "Died on +.volumes[22].qos.max_iops"
    assert result.volumes[22].name == """async-target-23""", "Died on +.volumes[22].name"
    assert result.volumes[22].volume_access_groups[0] == 7, "Died on +.volumes[22].volume_access_groups[0]"
    assert result.volumes[22].scsi_naadevice_id == """6f47acc1000000003435333500000369""", "Died on +.volumes[22].scsi_naadevice_id"
    assert result.volumes[22].total_size == 5000658944, "Died on +.volumes[22].total_size"
    assert result.volumes[22].block_size == 4096, "Died on +.volumes[22].block_size"
    assert result.volumes[22].scsi_euidevice_id == """3435333500000369f47acc0100000000""", "Died on +.volumes[22].scsi_euidevice_id"
    assert result.volumes[22].volume_id == 873, "Died on +.volumes[22].volume_id"
    assert result.volumes[22].access == """replicationTarget""", "Died on +.volumes[22].access"
    assert result.volumes[22].iqn == """iqn.2010-01.com.solidfire:4535.async-target-23.873""", "Died on +.volumes[22].iqn"
    assert result.volumes[22].slice_count == 1, "Died on +.volumes[22].slice_count"
    assert type(result.volumes[22].attributes) is dict, "Died on .volumes[22].attributes"
    assert result.volumes[22].volume_pairs[0].volume_pair_uuid == UUID("7a129672-78b5-4c23-825e-3446fa2371ed"), "Died on .volumes[22].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[22].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[22].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[22].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[22].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[22].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[22].volume_pairs[0].remote_replication.state"
    assert result.volumes[22].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[22].volume_pairs[0].remote_replication.mode"
    assert result.volumes[22].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[22].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[22].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[22].volume_pairs[0].cluster_pair_id"
    assert result.volumes[22].volume_pairs[0].remote_volume_id == 373, "Died on +.volumes[22].volume_pairs[0].remote_volume_id"
    assert result.volumes[22].volume_pairs[0].remote_volume_name == """async-source-23""", "Died on +.volumes[22].volume_pairs[0].remote_volume_name"
    assert result.volumes[22].volume_pairs[0].remote_slice_id == 373, "Died on +.volumes[22].volume_pairs[0].remote_slice_id"
    assert result.volumes[22].account_id == 6, "Died on +.volumes[22].account_id"
    assert result.volumes[22].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[22].create_time"
    assert result.volumes[22].virtual_volume_id is None, "Died on .volumes[22].virtual_volume_id"
    assert result.volumes[21].status == """active""", "Died on +.volumes[21].status"
    assert result.volumes[21].enable512e == False, "Died on +.volumes[21].enable512e"
    assert result.volumes[21].qos.burst_iops == 15000, "Died on +.volumes[21].qos.burst_iops"
    assert result.volumes[21].qos.burst_time == 60, "Died on +.volumes[21].qos.burst_time"
    assert result.volumes[21].qos.min_iops == 100, "Died on +.volumes[21].qos.min_iops"
    assert result.volumes[21].qos.max_iops == 15000, "Died on +.volumes[21].qos.max_iops"
    assert result.volumes[21].name == """async-target-22""", "Died on +.volumes[21].name"
    assert result.volumes[21].volume_access_groups[0] == 7, "Died on +.volumes[21].volume_access_groups[0]"
    assert result.volumes[21].scsi_naadevice_id == """6f47acc1000000003435333500000368""", "Died on +.volumes[21].scsi_naadevice_id"
    assert result.volumes[21].total_size == 5000658944, "Died on +.volumes[21].total_size"
    assert result.volumes[21].block_size == 4096, "Died on +.volumes[21].block_size"
    assert result.volumes[21].scsi_euidevice_id == """3435333500000368f47acc0100000000""", "Died on +.volumes[21].scsi_euidevice_id"
    assert result.volumes[21].volume_id == 872, "Died on +.volumes[21].volume_id"
    assert result.volumes[21].access == """replicationTarget""", "Died on +.volumes[21].access"
    assert result.volumes[21].iqn == """iqn.2010-01.com.solidfire:4535.async-target-22.872""", "Died on +.volumes[21].iqn"
    assert result.volumes[21].slice_count == 1, "Died on +.volumes[21].slice_count"
    assert type(result.volumes[21].attributes) is dict, "Died on .volumes[21].attributes"
    assert result.volumes[21].volume_pairs[0].volume_pair_uuid == UUID("c5bc171f-9ac4-4901-a902-8b93f931fc4c"), "Died on .volumes[21].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[21].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[21].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[21].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[21].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[21].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[21].volume_pairs[0].remote_replication.state"
    assert result.volumes[21].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[21].volume_pairs[0].remote_replication.mode"
    assert result.volumes[21].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[21].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[21].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[21].volume_pairs[0].cluster_pair_id"
    assert result.volumes[21].volume_pairs[0].remote_volume_id == 372, "Died on +.volumes[21].volume_pairs[0].remote_volume_id"
    assert result.volumes[21].volume_pairs[0].remote_volume_name == """async-source-22""", "Died on +.volumes[21].volume_pairs[0].remote_volume_name"
    assert result.volumes[21].volume_pairs[0].remote_slice_id == 372, "Died on +.volumes[21].volume_pairs[0].remote_slice_id"
    assert result.volumes[21].account_id == 6, "Died on +.volumes[21].account_id"
    assert result.volumes[21].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[21].create_time"
    assert result.volumes[21].virtual_volume_id is None, "Died on .volumes[21].virtual_volume_id"
    assert result.volumes[20].status == """active""", "Died on +.volumes[20].status"
    assert result.volumes[20].enable512e == False, "Died on +.volumes[20].enable512e"
    assert result.volumes[20].qos.burst_iops == 15000, "Died on +.volumes[20].qos.burst_iops"
    assert result.volumes[20].qos.burst_time == 60, "Died on +.volumes[20].qos.burst_time"
    assert result.volumes[20].qos.min_iops == 100, "Died on +.volumes[20].qos.min_iops"
    assert result.volumes[20].qos.max_iops == 15000, "Died on +.volumes[20].qos.max_iops"
    assert result.volumes[20].name == """async-target-21""", "Died on +.volumes[20].name"
    assert result.volumes[20].volume_access_groups[0] == 7, "Died on +.volumes[20].volume_access_groups[0]"
    assert result.volumes[20].scsi_naadevice_id == """6f47acc1000000003435333500000367""", "Died on +.volumes[20].scsi_naadevice_id"
    assert result.volumes[20].total_size == 5000658944, "Died on +.volumes[20].total_size"
    assert result.volumes[20].block_size == 4096, "Died on +.volumes[20].block_size"
    assert result.volumes[20].scsi_euidevice_id == """3435333500000367f47acc0100000000""", "Died on +.volumes[20].scsi_euidevice_id"
    assert result.volumes[20].volume_id == 871, "Died on +.volumes[20].volume_id"
    assert result.volumes[20].access == """replicationTarget""", "Died on +.volumes[20].access"
    assert result.volumes[20].iqn == """iqn.2010-01.com.solidfire:4535.async-target-21.871""", "Died on +.volumes[20].iqn"
    assert result.volumes[20].slice_count == 1, "Died on +.volumes[20].slice_count"
    assert type(result.volumes[20].attributes) is dict, "Died on .volumes[20].attributes"
    assert result.volumes[20].volume_pairs[0].volume_pair_uuid == UUID("70624f14-f877-485b-b467-caf24ce4828e"), "Died on .volumes[20].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[20].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[20].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[20].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[20].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[20].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[20].volume_pairs[0].remote_replication.state"
    assert result.volumes[20].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[20].volume_pairs[0].remote_replication.mode"
    assert result.volumes[20].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[20].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[20].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[20].volume_pairs[0].cluster_pair_id"
    assert result.volumes[20].volume_pairs[0].remote_volume_id == 371, "Died on +.volumes[20].volume_pairs[0].remote_volume_id"
    assert result.volumes[20].volume_pairs[0].remote_volume_name == """async-source-21""", "Died on +.volumes[20].volume_pairs[0].remote_volume_name"
    assert result.volumes[20].volume_pairs[0].remote_slice_id == 371, "Died on +.volumes[20].volume_pairs[0].remote_slice_id"
    assert result.volumes[20].account_id == 6, "Died on +.volumes[20].account_id"
    assert result.volumes[20].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[20].create_time"
    assert result.volumes[20].virtual_volume_id is None, "Died on .volumes[20].virtual_volume_id"
    assert result.volumes[19].status == """active""", "Died on +.volumes[19].status"
    assert result.volumes[19].enable512e == False, "Died on +.volumes[19].enable512e"
    assert result.volumes[19].qos.burst_iops == 15000, "Died on +.volumes[19].qos.burst_iops"
    assert result.volumes[19].qos.burst_time == 60, "Died on +.volumes[19].qos.burst_time"
    assert result.volumes[19].qos.min_iops == 100, "Died on +.volumes[19].qos.min_iops"
    assert result.volumes[19].qos.max_iops == 15000, "Died on +.volumes[19].qos.max_iops"
    assert result.volumes[19].name == """async-target-20""", "Died on +.volumes[19].name"
    assert result.volumes[19].volume_access_groups[0] == 7, "Died on +.volumes[19].volume_access_groups[0]"
    assert result.volumes[19].scsi_naadevice_id == """6f47acc1000000003435333500000366""", "Died on +.volumes[19].scsi_naadevice_id"
    assert result.volumes[19].total_size == 5000658944, "Died on +.volumes[19].total_size"
    assert result.volumes[19].block_size == 4096, "Died on +.volumes[19].block_size"
    assert result.volumes[19].scsi_euidevice_id == """3435333500000366f47acc0100000000""", "Died on +.volumes[19].scsi_euidevice_id"
    assert result.volumes[19].volume_id == 870, "Died on +.volumes[19].volume_id"
    assert result.volumes[19].access == """replicationTarget""", "Died on +.volumes[19].access"
    assert result.volumes[19].iqn == """iqn.2010-01.com.solidfire:4535.async-target-20.870""", "Died on +.volumes[19].iqn"
    assert result.volumes[19].slice_count == 1, "Died on +.volumes[19].slice_count"
    assert type(result.volumes[19].attributes) is dict, "Died on .volumes[19].attributes"
    assert result.volumes[19].volume_pairs[0].volume_pair_uuid == UUID("b3045c41-a104-4f32-bf72-42d94808d107"), "Died on .volumes[19].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[19].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[19].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[19].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[19].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[19].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[19].volume_pairs[0].remote_replication.state"
    assert result.volumes[19].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[19].volume_pairs[0].remote_replication.mode"
    assert result.volumes[19].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[19].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[19].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[19].volume_pairs[0].cluster_pair_id"
    assert result.volumes[19].volume_pairs[0].remote_volume_id == 370, "Died on +.volumes[19].volume_pairs[0].remote_volume_id"
    assert result.volumes[19].volume_pairs[0].remote_volume_name == """async-source-20""", "Died on +.volumes[19].volume_pairs[0].remote_volume_name"
    assert result.volumes[19].volume_pairs[0].remote_slice_id == 370, "Died on +.volumes[19].volume_pairs[0].remote_slice_id"
    assert result.volumes[19].account_id == 6, "Died on +.volumes[19].account_id"
    assert result.volumes[19].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[19].create_time"
    assert result.volumes[19].virtual_volume_id is None, "Died on .volumes[19].virtual_volume_id"
    assert result.volumes[18].status == """active""", "Died on +.volumes[18].status"
    assert result.volumes[18].enable512e == False, "Died on +.volumes[18].enable512e"
    assert result.volumes[18].qos.burst_iops == 15000, "Died on +.volumes[18].qos.burst_iops"
    assert result.volumes[18].qos.burst_time == 60, "Died on +.volumes[18].qos.burst_time"
    assert result.volumes[18].qos.min_iops == 100, "Died on +.volumes[18].qos.min_iops"
    assert result.volumes[18].qos.max_iops == 15000, "Died on +.volumes[18].qos.max_iops"
    assert result.volumes[18].name == """async-target-19""", "Died on +.volumes[18].name"
    assert result.volumes[18].volume_access_groups[0] == 7, "Died on +.volumes[18].volume_access_groups[0]"
    assert result.volumes[18].scsi_naadevice_id == """6f47acc1000000003435333500000365""", "Died on +.volumes[18].scsi_naadevice_id"
    assert result.volumes[18].total_size == 5000658944, "Died on +.volumes[18].total_size"
    assert result.volumes[18].block_size == 4096, "Died on +.volumes[18].block_size"
    assert result.volumes[18].scsi_euidevice_id == """3435333500000365f47acc0100000000""", "Died on +.volumes[18].scsi_euidevice_id"
    assert result.volumes[18].volume_id == 869, "Died on +.volumes[18].volume_id"
    assert result.volumes[18].access == """replicationTarget""", "Died on +.volumes[18].access"
    assert result.volumes[18].iqn == """iqn.2010-01.com.solidfire:4535.async-target-19.869""", "Died on +.volumes[18].iqn"
    assert result.volumes[18].slice_count == 1, "Died on +.volumes[18].slice_count"
    assert type(result.volumes[18].attributes) is dict, "Died on .volumes[18].attributes"
    assert result.volumes[18].volume_pairs[0].volume_pair_uuid == UUID("b5564f14-a628-4335-8814-7c6aba9e2540"), "Died on .volumes[18].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[18].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[18].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[18].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[18].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[18].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[18].volume_pairs[0].remote_replication.state"
    assert result.volumes[18].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[18].volume_pairs[0].remote_replication.mode"
    assert result.volumes[18].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[18].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[18].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[18].volume_pairs[0].cluster_pair_id"
    assert result.volumes[18].volume_pairs[0].remote_volume_id == 369, "Died on +.volumes[18].volume_pairs[0].remote_volume_id"
    assert result.volumes[18].volume_pairs[0].remote_volume_name == """async-source-19""", "Died on +.volumes[18].volume_pairs[0].remote_volume_name"
    assert result.volumes[18].volume_pairs[0].remote_slice_id == 369, "Died on +.volumes[18].volume_pairs[0].remote_slice_id"
    assert result.volumes[18].account_id == 6, "Died on +.volumes[18].account_id"
    assert result.volumes[18].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[18].create_time"
    assert result.volumes[18].virtual_volume_id is None, "Died on .volumes[18].virtual_volume_id"
    assert result.volumes[17].status == """active""", "Died on +.volumes[17].status"
    assert result.volumes[17].enable512e == False, "Died on +.volumes[17].enable512e"
    assert result.volumes[17].qos.burst_iops == 15000, "Died on +.volumes[17].qos.burst_iops"
    assert result.volumes[17].qos.burst_time == 60, "Died on +.volumes[17].qos.burst_time"
    assert result.volumes[17].qos.min_iops == 100, "Died on +.volumes[17].qos.min_iops"
    assert result.volumes[17].qos.max_iops == 15000, "Died on +.volumes[17].qos.max_iops"
    assert result.volumes[17].name == """async-target-18""", "Died on +.volumes[17].name"
    assert result.volumes[17].volume_access_groups[0] == 7, "Died on +.volumes[17].volume_access_groups[0]"
    assert result.volumes[17].scsi_naadevice_id == """6f47acc1000000003435333500000364""", "Died on +.volumes[17].scsi_naadevice_id"
    assert result.volumes[17].total_size == 5000658944, "Died on +.volumes[17].total_size"
    assert result.volumes[17].block_size == 4096, "Died on +.volumes[17].block_size"
    assert result.volumes[17].scsi_euidevice_id == """3435333500000364f47acc0100000000""", "Died on +.volumes[17].scsi_euidevice_id"
    assert result.volumes[17].volume_id == 868, "Died on +.volumes[17].volume_id"
    assert result.volumes[17].access == """replicationTarget""", "Died on +.volumes[17].access"
    assert result.volumes[17].iqn == """iqn.2010-01.com.solidfire:4535.async-target-18.868""", "Died on +.volumes[17].iqn"
    assert result.volumes[17].slice_count == 1, "Died on +.volumes[17].slice_count"
    assert type(result.volumes[17].attributes) is dict, "Died on .volumes[17].attributes"
    assert result.volumes[17].volume_pairs[0].volume_pair_uuid == UUID("0b34e697-6833-448a-8ab0-30090ba1199f"), "Died on .volumes[17].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[17].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[17].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[17].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[17].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[17].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[17].volume_pairs[0].remote_replication.state"
    assert result.volumes[17].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[17].volume_pairs[0].remote_replication.mode"
    assert result.volumes[17].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[17].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[17].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[17].volume_pairs[0].cluster_pair_id"
    assert result.volumes[17].volume_pairs[0].remote_volume_id == 368, "Died on +.volumes[17].volume_pairs[0].remote_volume_id"
    assert result.volumes[17].volume_pairs[0].remote_volume_name == """async-source-18""", "Died on +.volumes[17].volume_pairs[0].remote_volume_name"
    assert result.volumes[17].volume_pairs[0].remote_slice_id == 368, "Died on +.volumes[17].volume_pairs[0].remote_slice_id"
    assert result.volumes[17].account_id == 6, "Died on +.volumes[17].account_id"
    assert result.volumes[17].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[17].create_time"
    assert result.volumes[17].virtual_volume_id is None, "Died on .volumes[17].virtual_volume_id"
    assert result.volumes[16].status == """active""", "Died on +.volumes[16].status"
    assert result.volumes[16].enable512e == False, "Died on +.volumes[16].enable512e"
    assert result.volumes[16].qos.burst_iops == 15000, "Died on +.volumes[16].qos.burst_iops"
    assert result.volumes[16].qos.burst_time == 60, "Died on +.volumes[16].qos.burst_time"
    assert result.volumes[16].qos.min_iops == 100, "Died on +.volumes[16].qos.min_iops"
    assert result.volumes[16].qos.max_iops == 15000, "Died on +.volumes[16].qos.max_iops"
    assert result.volumes[16].name == """async-target-17""", "Died on +.volumes[16].name"
    assert result.volumes[16].volume_access_groups[0] == 7, "Died on +.volumes[16].volume_access_groups[0]"
    assert result.volumes[16].scsi_naadevice_id == """6f47acc1000000003435333500000363""", "Died on +.volumes[16].scsi_naadevice_id"
    assert result.volumes[16].total_size == 5000658944, "Died on +.volumes[16].total_size"
    assert result.volumes[16].block_size == 4096, "Died on +.volumes[16].block_size"
    assert result.volumes[16].scsi_euidevice_id == """3435333500000363f47acc0100000000""", "Died on +.volumes[16].scsi_euidevice_id"
    assert result.volumes[16].volume_id == 867, "Died on +.volumes[16].volume_id"
    assert result.volumes[16].access == """replicationTarget""", "Died on +.volumes[16].access"
    assert result.volumes[16].iqn == """iqn.2010-01.com.solidfire:4535.async-target-17.867""", "Died on +.volumes[16].iqn"
    assert result.volumes[16].slice_count == 1, "Died on +.volumes[16].slice_count"
    assert type(result.volumes[16].attributes) is dict, "Died on .volumes[16].attributes"
    assert result.volumes[16].volume_pairs[0].volume_pair_uuid == UUID("cdd04be8-0839-4823-ae3b-6e41b32d3e59"), "Died on .volumes[16].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[16].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[16].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[16].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[16].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[16].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[16].volume_pairs[0].remote_replication.state"
    assert result.volumes[16].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[16].volume_pairs[0].remote_replication.mode"
    assert result.volumes[16].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[16].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[16].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[16].volume_pairs[0].cluster_pair_id"
    assert result.volumes[16].volume_pairs[0].remote_volume_id == 367, "Died on +.volumes[16].volume_pairs[0].remote_volume_id"
    assert result.volumes[16].volume_pairs[0].remote_volume_name == """async-source-17""", "Died on +.volumes[16].volume_pairs[0].remote_volume_name"
    assert result.volumes[16].volume_pairs[0].remote_slice_id == 367, "Died on +.volumes[16].volume_pairs[0].remote_slice_id"
    assert result.volumes[16].account_id == 6, "Died on +.volumes[16].account_id"
    assert result.volumes[16].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[16].create_time"
    assert result.volumes[16].virtual_volume_id is None, "Died on .volumes[16].virtual_volume_id"
    assert result.volumes[15].status == """active""", "Died on +.volumes[15].status"
    assert result.volumes[15].enable512e == False, "Died on +.volumes[15].enable512e"
    assert result.volumes[15].qos.burst_iops == 15000, "Died on +.volumes[15].qos.burst_iops"
    assert result.volumes[15].qos.burst_time == 60, "Died on +.volumes[15].qos.burst_time"
    assert result.volumes[15].qos.min_iops == 100, "Died on +.volumes[15].qos.min_iops"
    assert result.volumes[15].qos.max_iops == 15000, "Died on +.volumes[15].qos.max_iops"
    assert result.volumes[15].name == """async-target-16""", "Died on +.volumes[15].name"
    assert result.volumes[15].volume_access_groups[0] == 7, "Died on +.volumes[15].volume_access_groups[0]"
    assert result.volumes[15].scsi_naadevice_id == """6f47acc1000000003435333500000362""", "Died on +.volumes[15].scsi_naadevice_id"
    assert result.volumes[15].total_size == 5000658944, "Died on +.volumes[15].total_size"
    assert result.volumes[15].block_size == 4096, "Died on +.volumes[15].block_size"
    assert result.volumes[15].scsi_euidevice_id == """3435333500000362f47acc0100000000""", "Died on +.volumes[15].scsi_euidevice_id"
    assert result.volumes[15].volume_id == 866, "Died on +.volumes[15].volume_id"
    assert result.volumes[15].access == """replicationTarget""", "Died on +.volumes[15].access"
    assert result.volumes[15].iqn == """iqn.2010-01.com.solidfire:4535.async-target-16.866""", "Died on +.volumes[15].iqn"
    assert result.volumes[15].slice_count == 1, "Died on +.volumes[15].slice_count"
    assert type(result.volumes[15].attributes) is dict, "Died on .volumes[15].attributes"
    assert result.volumes[15].volume_pairs[0].volume_pair_uuid == UUID("4a66cace-ccd6-4694-b65f-a095ba5b1633"), "Died on .volumes[15].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[15].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[15].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[15].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[15].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[15].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[15].volume_pairs[0].remote_replication.state"
    assert result.volumes[15].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[15].volume_pairs[0].remote_replication.mode"
    assert result.volumes[15].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[15].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[15].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[15].volume_pairs[0].cluster_pair_id"
    assert result.volumes[15].volume_pairs[0].remote_volume_id == 366, "Died on +.volumes[15].volume_pairs[0].remote_volume_id"
    assert result.volumes[15].volume_pairs[0].remote_volume_name == """async-source-16""", "Died on +.volumes[15].volume_pairs[0].remote_volume_name"
    assert result.volumes[15].volume_pairs[0].remote_slice_id == 366, "Died on +.volumes[15].volume_pairs[0].remote_slice_id"
    assert result.volumes[15].account_id == 6, "Died on +.volumes[15].account_id"
    assert result.volumes[15].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[15].create_time"
    assert result.volumes[15].virtual_volume_id is None, "Died on .volumes[15].virtual_volume_id"
    assert result.volumes[14].status == """active""", "Died on +.volumes[14].status"
    assert result.volumes[14].enable512e == False, "Died on +.volumes[14].enable512e"
    assert result.volumes[14].qos.burst_iops == 15000, "Died on +.volumes[14].qos.burst_iops"
    assert result.volumes[14].qos.burst_time == 60, "Died on +.volumes[14].qos.burst_time"
    assert result.volumes[14].qos.min_iops == 100, "Died on +.volumes[14].qos.min_iops"
    assert result.volumes[14].qos.max_iops == 15000, "Died on +.volumes[14].qos.max_iops"
    assert result.volumes[14].name == """async-target-15""", "Died on +.volumes[14].name"
    assert result.volumes[14].volume_access_groups[0] == 7, "Died on +.volumes[14].volume_access_groups[0]"
    assert result.volumes[14].scsi_naadevice_id == """6f47acc1000000003435333500000361""", "Died on +.volumes[14].scsi_naadevice_id"
    assert result.volumes[14].total_size == 5000658944, "Died on +.volumes[14].total_size"
    assert result.volumes[14].block_size == 4096, "Died on +.volumes[14].block_size"
    assert result.volumes[14].scsi_euidevice_id == """3435333500000361f47acc0100000000""", "Died on +.volumes[14].scsi_euidevice_id"
    assert result.volumes[14].volume_id == 865, "Died on +.volumes[14].volume_id"
    assert result.volumes[14].access == """replicationTarget""", "Died on +.volumes[14].access"
    assert result.volumes[14].iqn == """iqn.2010-01.com.solidfire:4535.async-target-15.865""", "Died on +.volumes[14].iqn"
    assert result.volumes[14].slice_count == 1, "Died on +.volumes[14].slice_count"
    assert type(result.volumes[14].attributes) is dict, "Died on .volumes[14].attributes"
    assert result.volumes[14].volume_pairs[0].volume_pair_uuid == UUID("2d00b77d-2157-4ac5-a804-6e6c6ff5898b"), "Died on .volumes[14].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[14].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[14].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[14].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[14].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[14].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[14].volume_pairs[0].remote_replication.state"
    assert result.volumes[14].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[14].volume_pairs[0].remote_replication.mode"
    assert result.volumes[14].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[14].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[14].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[14].volume_pairs[0].cluster_pair_id"
    assert result.volumes[14].volume_pairs[0].remote_volume_id == 365, "Died on +.volumes[14].volume_pairs[0].remote_volume_id"
    assert result.volumes[14].volume_pairs[0].remote_volume_name == """async-source-15""", "Died on +.volumes[14].volume_pairs[0].remote_volume_name"
    assert result.volumes[14].volume_pairs[0].remote_slice_id == 365, "Died on +.volumes[14].volume_pairs[0].remote_slice_id"
    assert result.volumes[14].account_id == 6, "Died on +.volumes[14].account_id"
    assert result.volumes[14].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[14].create_time"
    assert result.volumes[14].virtual_volume_id is None, "Died on .volumes[14].virtual_volume_id"
    assert result.volumes[13].status == """active""", "Died on +.volumes[13].status"
    assert result.volumes[13].enable512e == False, "Died on +.volumes[13].enable512e"
    assert result.volumes[13].qos.burst_iops == 15000, "Died on +.volumes[13].qos.burst_iops"
    assert result.volumes[13].qos.burst_time == 60, "Died on +.volumes[13].qos.burst_time"
    assert result.volumes[13].qos.min_iops == 100, "Died on +.volumes[13].qos.min_iops"
    assert result.volumes[13].qos.max_iops == 15000, "Died on +.volumes[13].qos.max_iops"
    assert result.volumes[13].name == """async-target-14""", "Died on +.volumes[13].name"
    assert result.volumes[13].volume_access_groups[0] == 7, "Died on +.volumes[13].volume_access_groups[0]"
    assert result.volumes[13].scsi_naadevice_id == """6f47acc1000000003435333500000360""", "Died on +.volumes[13].scsi_naadevice_id"
    assert result.volumes[13].total_size == 5000658944, "Died on +.volumes[13].total_size"
    assert result.volumes[13].block_size == 4096, "Died on +.volumes[13].block_size"
    assert result.volumes[13].scsi_euidevice_id == """3435333500000360f47acc0100000000""", "Died on +.volumes[13].scsi_euidevice_id"
    assert result.volumes[13].volume_id == 864, "Died on +.volumes[13].volume_id"
    assert result.volumes[13].access == """replicationTarget""", "Died on +.volumes[13].access"
    assert result.volumes[13].iqn == """iqn.2010-01.com.solidfire:4535.async-target-14.864""", "Died on +.volumes[13].iqn"
    assert result.volumes[13].slice_count == 1, "Died on +.volumes[13].slice_count"
    assert type(result.volumes[13].attributes) is dict, "Died on .volumes[13].attributes"
    assert result.volumes[13].volume_pairs[0].volume_pair_uuid == UUID("9fb4b84a-f18c-4963-a9d3-ee4483130438"), "Died on .volumes[13].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[13].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[13].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[13].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[13].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[13].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[13].volume_pairs[0].remote_replication.state"
    assert result.volumes[13].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[13].volume_pairs[0].remote_replication.mode"
    assert result.volumes[13].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[13].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[13].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[13].volume_pairs[0].cluster_pair_id"
    assert result.volumes[13].volume_pairs[0].remote_volume_id == 364, "Died on +.volumes[13].volume_pairs[0].remote_volume_id"
    assert result.volumes[13].volume_pairs[0].remote_volume_name == """async-source-14""", "Died on +.volumes[13].volume_pairs[0].remote_volume_name"
    assert result.volumes[13].volume_pairs[0].remote_slice_id == 364, "Died on +.volumes[13].volume_pairs[0].remote_slice_id"
    assert result.volumes[13].account_id == 6, "Died on +.volumes[13].account_id"
    assert result.volumes[13].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[13].create_time"
    assert result.volumes[13].virtual_volume_id is None, "Died on .volumes[13].virtual_volume_id"
    assert result.volumes[12].status == """active""", "Died on +.volumes[12].status"
    assert result.volumes[12].enable512e == False, "Died on +.volumes[12].enable512e"
    assert result.volumes[12].qos.burst_iops == 15000, "Died on +.volumes[12].qos.burst_iops"
    assert result.volumes[12].qos.burst_time == 60, "Died on +.volumes[12].qos.burst_time"
    assert result.volumes[12].qos.min_iops == 100, "Died on +.volumes[12].qos.min_iops"
    assert result.volumes[12].qos.max_iops == 15000, "Died on +.volumes[12].qos.max_iops"
    assert result.volumes[12].name == """async-target-13""", "Died on +.volumes[12].name"
    assert result.volumes[12].volume_access_groups[0] == 7, "Died on +.volumes[12].volume_access_groups[0]"
    assert result.volumes[12].scsi_naadevice_id == """6f47acc100000000343533350000035f""", "Died on +.volumes[12].scsi_naadevice_id"
    assert result.volumes[12].total_size == 5000658944, "Died on +.volumes[12].total_size"
    assert result.volumes[12].block_size == 4096, "Died on +.volumes[12].block_size"
    assert result.volumes[12].scsi_euidevice_id == """343533350000035ff47acc0100000000""", "Died on +.volumes[12].scsi_euidevice_id"
    assert result.volumes[12].volume_id == 863, "Died on +.volumes[12].volume_id"
    assert result.volumes[12].access == """replicationTarget""", "Died on +.volumes[12].access"
    assert result.volumes[12].iqn == """iqn.2010-01.com.solidfire:4535.async-target-13.863""", "Died on +.volumes[12].iqn"
    assert result.volumes[12].slice_count == 1, "Died on +.volumes[12].slice_count"
    assert type(result.volumes[12].attributes) is dict, "Died on .volumes[12].attributes"
    assert result.volumes[12].volume_pairs[0].volume_pair_uuid == UUID("9db4853a-05c2-4bf8-a2c3-649c3c1cf3b1"), "Died on .volumes[12].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[12].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[12].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[12].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[12].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[12].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[12].volume_pairs[0].remote_replication.state"
    assert result.volumes[12].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[12].volume_pairs[0].remote_replication.mode"
    assert result.volumes[12].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[12].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[12].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[12].volume_pairs[0].cluster_pair_id"
    assert result.volumes[12].volume_pairs[0].remote_volume_id == 363, "Died on +.volumes[12].volume_pairs[0].remote_volume_id"
    assert result.volumes[12].volume_pairs[0].remote_volume_name == """async-source-13""", "Died on +.volumes[12].volume_pairs[0].remote_volume_name"
    assert result.volumes[12].volume_pairs[0].remote_slice_id == 363, "Died on +.volumes[12].volume_pairs[0].remote_slice_id"
    assert result.volumes[12].account_id == 6, "Died on +.volumes[12].account_id"
    assert result.volumes[12].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[12].create_time"
    assert result.volumes[12].virtual_volume_id is None, "Died on .volumes[12].virtual_volume_id"
    assert result.volumes[11].status == """active""", "Died on +.volumes[11].status"
    assert result.volumes[11].enable512e == False, "Died on +.volumes[11].enable512e"
    assert result.volumes[11].qos.burst_iops == 15000, "Died on +.volumes[11].qos.burst_iops"
    assert result.volumes[11].qos.burst_time == 60, "Died on +.volumes[11].qos.burst_time"
    assert result.volumes[11].qos.min_iops == 100, "Died on +.volumes[11].qos.min_iops"
    assert result.volumes[11].qos.max_iops == 15000, "Died on +.volumes[11].qos.max_iops"
    assert result.volumes[11].name == """async-target-12""", "Died on +.volumes[11].name"
    assert result.volumes[11].volume_access_groups[0] == 7, "Died on +.volumes[11].volume_access_groups[0]"
    assert result.volumes[11].scsi_naadevice_id == """6f47acc100000000343533350000035e""", "Died on +.volumes[11].scsi_naadevice_id"
    assert result.volumes[11].total_size == 5000658944, "Died on +.volumes[11].total_size"
    assert result.volumes[11].block_size == 4096, "Died on +.volumes[11].block_size"
    assert result.volumes[11].scsi_euidevice_id == """343533350000035ef47acc0100000000""", "Died on +.volumes[11].scsi_euidevice_id"
    assert result.volumes[11].volume_id == 862, "Died on +.volumes[11].volume_id"
    assert result.volumes[11].access == """replicationTarget""", "Died on +.volumes[11].access"
    assert result.volumes[11].iqn == """iqn.2010-01.com.solidfire:4535.async-target-12.862""", "Died on +.volumes[11].iqn"
    assert result.volumes[11].slice_count == 1, "Died on +.volumes[11].slice_count"
    assert type(result.volumes[11].attributes) is dict, "Died on .volumes[11].attributes"
    assert result.volumes[11].volume_pairs[0].volume_pair_uuid == UUID("ebe7aa4c-13ee-403b-af7c-ffd71119434b"), "Died on .volumes[11].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[11].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[11].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[11].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[11].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[11].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[11].volume_pairs[0].remote_replication.state"
    assert result.volumes[11].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[11].volume_pairs[0].remote_replication.mode"
    assert result.volumes[11].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[11].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[11].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[11].volume_pairs[0].cluster_pair_id"
    assert result.volumes[11].volume_pairs[0].remote_volume_id == 362, "Died on +.volumes[11].volume_pairs[0].remote_volume_id"
    assert result.volumes[11].volume_pairs[0].remote_volume_name == """async-source-12""", "Died on +.volumes[11].volume_pairs[0].remote_volume_name"
    assert result.volumes[11].volume_pairs[0].remote_slice_id == 362, "Died on +.volumes[11].volume_pairs[0].remote_slice_id"
    assert result.volumes[11].account_id == 6, "Died on +.volumes[11].account_id"
    assert result.volumes[11].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[11].create_time"
    assert result.volumes[11].virtual_volume_id is None, "Died on .volumes[11].virtual_volume_id"
    assert result.volumes[10].status == """active""", "Died on +.volumes[10].status"
    assert result.volumes[10].enable512e == False, "Died on +.volumes[10].enable512e"
    assert result.volumes[10].qos.burst_iops == 15000, "Died on +.volumes[10].qos.burst_iops"
    assert result.volumes[10].qos.burst_time == 60, "Died on +.volumes[10].qos.burst_time"
    assert result.volumes[10].qos.min_iops == 100, "Died on +.volumes[10].qos.min_iops"
    assert result.volumes[10].qos.max_iops == 15000, "Died on +.volumes[10].qos.max_iops"
    assert result.volumes[10].name == """async-target-11""", "Died on +.volumes[10].name"
    assert result.volumes[10].volume_access_groups[0] == 7, "Died on +.volumes[10].volume_access_groups[0]"
    assert result.volumes[10].scsi_naadevice_id == """6f47acc100000000343533350000035d""", "Died on +.volumes[10].scsi_naadevice_id"
    assert result.volumes[10].total_size == 5000658944, "Died on +.volumes[10].total_size"
    assert result.volumes[10].block_size == 4096, "Died on +.volumes[10].block_size"
    assert result.volumes[10].scsi_euidevice_id == """343533350000035df47acc0100000000""", "Died on +.volumes[10].scsi_euidevice_id"
    assert result.volumes[10].volume_id == 861, "Died on +.volumes[10].volume_id"
    assert result.volumes[10].access == """replicationTarget""", "Died on +.volumes[10].access"
    assert result.volumes[10].iqn == """iqn.2010-01.com.solidfire:4535.async-target-11.861""", "Died on +.volumes[10].iqn"
    assert result.volumes[10].slice_count == 1, "Died on +.volumes[10].slice_count"
    assert type(result.volumes[10].attributes) is dict, "Died on .volumes[10].attributes"
    assert result.volumes[10].volume_pairs[0].volume_pair_uuid == UUID("1a6d9de2-d86e-484f-b8e0-70e7b783188c"), "Died on .volumes[10].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[10].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[10].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[10].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[10].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[10].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[10].volume_pairs[0].remote_replication.state"
    assert result.volumes[10].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[10].volume_pairs[0].remote_replication.mode"
    assert result.volumes[10].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[10].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[10].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[10].volume_pairs[0].cluster_pair_id"
    assert result.volumes[10].volume_pairs[0].remote_volume_id == 361, "Died on +.volumes[10].volume_pairs[0].remote_volume_id"
    assert result.volumes[10].volume_pairs[0].remote_volume_name == """async-source-11""", "Died on +.volumes[10].volume_pairs[0].remote_volume_name"
    assert result.volumes[10].volume_pairs[0].remote_slice_id == 361, "Died on +.volumes[10].volume_pairs[0].remote_slice_id"
    assert result.volumes[10].account_id == 6, "Died on +.volumes[10].account_id"
    assert result.volumes[10].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[10].create_time"
    assert result.volumes[10].virtual_volume_id is None, "Died on .volumes[10].virtual_volume_id"
    assert result.volumes[9].status == """active""", "Died on +.volumes[9].status"
    assert result.volumes[9].enable512e == False, "Died on +.volumes[9].enable512e"
    assert result.volumes[9].qos.burst_iops == 15000, "Died on +.volumes[9].qos.burst_iops"
    assert result.volumes[9].qos.burst_time == 60, "Died on +.volumes[9].qos.burst_time"
    assert result.volumes[9].qos.min_iops == 100, "Died on +.volumes[9].qos.min_iops"
    assert result.volumes[9].qos.max_iops == 15000, "Died on +.volumes[9].qos.max_iops"
    assert result.volumes[9].name == """async-target-10""", "Died on +.volumes[9].name"
    assert result.volumes[9].volume_access_groups[0] == 7, "Died on +.volumes[9].volume_access_groups[0]"
    assert result.volumes[9].scsi_naadevice_id == """6f47acc100000000343533350000035c""", "Died on +.volumes[9].scsi_naadevice_id"
    assert result.volumes[9].total_size == 5000658944, "Died on +.volumes[9].total_size"
    assert result.volumes[9].block_size == 4096, "Died on +.volumes[9].block_size"
    assert result.volumes[9].scsi_euidevice_id == """343533350000035cf47acc0100000000""", "Died on +.volumes[9].scsi_euidevice_id"
    assert result.volumes[9].volume_id == 860, "Died on +.volumes[9].volume_id"
    assert result.volumes[9].access == """replicationTarget""", "Died on +.volumes[9].access"
    assert result.volumes[9].iqn == """iqn.2010-01.com.solidfire:4535.async-target-10.860""", "Died on +.volumes[9].iqn"
    assert result.volumes[9].slice_count == 1, "Died on +.volumes[9].slice_count"
    assert type(result.volumes[9].attributes) is dict, "Died on .volumes[9].attributes"
    assert result.volumes[9].volume_pairs[0].volume_pair_uuid == UUID("37dceebd-e299-45c0-9cb9-d9826a861192"), "Died on .volumes[9].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[9].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[9].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[9].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[9].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[9].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[9].volume_pairs[0].remote_replication.state"
    assert result.volumes[9].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[9].volume_pairs[0].remote_replication.mode"
    assert result.volumes[9].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[9].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[9].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[9].volume_pairs[0].cluster_pair_id"
    assert result.volumes[9].volume_pairs[0].remote_volume_id == 360, "Died on +.volumes[9].volume_pairs[0].remote_volume_id"
    assert result.volumes[9].volume_pairs[0].remote_volume_name == """async-source-10""", "Died on +.volumes[9].volume_pairs[0].remote_volume_name"
    assert result.volumes[9].volume_pairs[0].remote_slice_id == 360, "Died on +.volumes[9].volume_pairs[0].remote_slice_id"
    assert result.volumes[9].account_id == 6, "Died on +.volumes[9].account_id"
    assert result.volumes[9].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[9].create_time"
    assert result.volumes[9].virtual_volume_id is None, "Died on .volumes[9].virtual_volume_id"
    assert result.volumes[8].status == """active""", "Died on +.volumes[8].status"
    assert result.volumes[8].enable512e == False, "Died on +.volumes[8].enable512e"
    assert result.volumes[8].qos.burst_iops == 15000, "Died on +.volumes[8].qos.burst_iops"
    assert result.volumes[8].qos.burst_time == 60, "Died on +.volumes[8].qos.burst_time"
    assert result.volumes[8].qos.min_iops == 100, "Died on +.volumes[8].qos.min_iops"
    assert result.volumes[8].qos.max_iops == 15000, "Died on +.volumes[8].qos.max_iops"
    assert result.volumes[8].name == """async-target-9""", "Died on +.volumes[8].name"
    assert result.volumes[8].volume_access_groups[0] == 7, "Died on +.volumes[8].volume_access_groups[0]"
    assert result.volumes[8].scsi_naadevice_id == """6f47acc100000000343533350000035b""", "Died on +.volumes[8].scsi_naadevice_id"
    assert result.volumes[8].total_size == 5000658944, "Died on +.volumes[8].total_size"
    assert result.volumes[8].block_size == 4096, "Died on +.volumes[8].block_size"
    assert result.volumes[8].scsi_euidevice_id == """343533350000035bf47acc0100000000""", "Died on +.volumes[8].scsi_euidevice_id"
    assert result.volumes[8].volume_id == 859, "Died on +.volumes[8].volume_id"
    assert result.volumes[8].access == """replicationTarget""", "Died on +.volumes[8].access"
    assert result.volumes[8].iqn == """iqn.2010-01.com.solidfire:4535.async-target-9.859""", "Died on +.volumes[8].iqn"
    assert result.volumes[8].slice_count == 1, "Died on +.volumes[8].slice_count"
    assert type(result.volumes[8].attributes) is dict, "Died on .volumes[8].attributes"
    assert result.volumes[8].volume_pairs[0].volume_pair_uuid == UUID("2a96f9b2-d5f0-4087-9b8f-0e553b465f47"), "Died on .volumes[8].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[8].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[8].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[8].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[8].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[8].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[8].volume_pairs[0].remote_replication.state"
    assert result.volumes[8].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[8].volume_pairs[0].remote_replication.mode"
    assert result.volumes[8].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[8].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[8].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[8].volume_pairs[0].cluster_pair_id"
    assert result.volumes[8].volume_pairs[0].remote_volume_id == 359, "Died on +.volumes[8].volume_pairs[0].remote_volume_id"
    assert result.volumes[8].volume_pairs[0].remote_volume_name == """async-source-9""", "Died on +.volumes[8].volume_pairs[0].remote_volume_name"
    assert result.volumes[8].volume_pairs[0].remote_slice_id == 359, "Died on +.volumes[8].volume_pairs[0].remote_slice_id"
    assert result.volumes[8].account_id == 6, "Died on +.volumes[8].account_id"
    assert result.volumes[8].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[8].create_time"
    assert result.volumes[8].virtual_volume_id is None, "Died on .volumes[8].virtual_volume_id"
    assert result.volumes[7].status == """active""", "Died on +.volumes[7].status"
    assert result.volumes[7].enable512e == False, "Died on +.volumes[7].enable512e"
    assert result.volumes[7].qos.burst_iops == 15000, "Died on +.volumes[7].qos.burst_iops"
    assert result.volumes[7].qos.burst_time == 60, "Died on +.volumes[7].qos.burst_time"
    assert result.volumes[7].qos.min_iops == 100, "Died on +.volumes[7].qos.min_iops"
    assert result.volumes[7].qos.max_iops == 15000, "Died on +.volumes[7].qos.max_iops"
    assert result.volumes[7].name == """async-target-8""", "Died on +.volumes[7].name"
    assert result.volumes[7].volume_access_groups[0] == 7, "Died on +.volumes[7].volume_access_groups[0]"
    assert result.volumes[7].scsi_naadevice_id == """6f47acc100000000343533350000035a""", "Died on +.volumes[7].scsi_naadevice_id"
    assert result.volumes[7].total_size == 5000658944, "Died on +.volumes[7].total_size"
    assert result.volumes[7].block_size == 4096, "Died on +.volumes[7].block_size"
    assert result.volumes[7].scsi_euidevice_id == """343533350000035af47acc0100000000""", "Died on +.volumes[7].scsi_euidevice_id"
    assert result.volumes[7].volume_id == 858, "Died on +.volumes[7].volume_id"
    assert result.volumes[7].access == """replicationTarget""", "Died on +.volumes[7].access"
    assert result.volumes[7].iqn == """iqn.2010-01.com.solidfire:4535.async-target-8.858""", "Died on +.volumes[7].iqn"
    assert result.volumes[7].slice_count == 1, "Died on +.volumes[7].slice_count"
    assert type(result.volumes[7].attributes) is dict, "Died on .volumes[7].attributes"
    assert result.volumes[7].volume_pairs[0].volume_pair_uuid == UUID("bd7a09a2-d915-4815-bc90-de77ee784626"), "Died on .volumes[7].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[7].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[7].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[7].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[7].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[7].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[7].volume_pairs[0].remote_replication.state"
    assert result.volumes[7].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[7].volume_pairs[0].remote_replication.mode"
    assert result.volumes[7].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[7].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[7].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[7].volume_pairs[0].cluster_pair_id"
    assert result.volumes[7].volume_pairs[0].remote_volume_id == 358, "Died on +.volumes[7].volume_pairs[0].remote_volume_id"
    assert result.volumes[7].volume_pairs[0].remote_volume_name == """async-source-8""", "Died on +.volumes[7].volume_pairs[0].remote_volume_name"
    assert result.volumes[7].volume_pairs[0].remote_slice_id == 358, "Died on +.volumes[7].volume_pairs[0].remote_slice_id"
    assert result.volumes[7].account_id == 6, "Died on +.volumes[7].account_id"
    assert result.volumes[7].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[7].create_time"
    assert result.volumes[7].virtual_volume_id is None, "Died on .volumes[7].virtual_volume_id"
    assert result.volumes[6].status == """active""", "Died on +.volumes[6].status"
    assert result.volumes[6].enable512e == False, "Died on +.volumes[6].enable512e"
    assert result.volumes[6].qos.burst_iops == 15000, "Died on +.volumes[6].qos.burst_iops"
    assert result.volumes[6].qos.burst_time == 60, "Died on +.volumes[6].qos.burst_time"
    assert result.volumes[6].qos.min_iops == 100, "Died on +.volumes[6].qos.min_iops"
    assert result.volumes[6].qos.max_iops == 15000, "Died on +.volumes[6].qos.max_iops"
    assert result.volumes[6].name == """async-target-7""", "Died on +.volumes[6].name"
    assert result.volumes[6].volume_access_groups[0] == 7, "Died on +.volumes[6].volume_access_groups[0]"
    assert result.volumes[6].scsi_naadevice_id == """6f47acc1000000003435333500000359""", "Died on +.volumes[6].scsi_naadevice_id"
    assert result.volumes[6].total_size == 5000658944, "Died on +.volumes[6].total_size"
    assert result.volumes[6].block_size == 4096, "Died on +.volumes[6].block_size"
    assert result.volumes[6].scsi_euidevice_id == """3435333500000359f47acc0100000000""", "Died on +.volumes[6].scsi_euidevice_id"
    assert result.volumes[6].volume_id == 857, "Died on +.volumes[6].volume_id"
    assert result.volumes[6].access == """replicationTarget""", "Died on +.volumes[6].access"
    assert result.volumes[6].iqn == """iqn.2010-01.com.solidfire:4535.async-target-7.857""", "Died on +.volumes[6].iqn"
    assert result.volumes[6].slice_count == 1, "Died on +.volumes[6].slice_count"
    assert type(result.volumes[6].attributes) is dict, "Died on .volumes[6].attributes"
    assert result.volumes[6].volume_pairs[0].volume_pair_uuid == UUID("d091e440-3614-41da-b781-36523a5babb6"), "Died on .volumes[6].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[6].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[6].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[6].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[6].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[6].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[6].volume_pairs[0].remote_replication.state"
    assert result.volumes[6].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[6].volume_pairs[0].remote_replication.mode"
    assert result.volumes[6].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[6].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[6].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[6].volume_pairs[0].cluster_pair_id"
    assert result.volumes[6].volume_pairs[0].remote_volume_id == 357, "Died on +.volumes[6].volume_pairs[0].remote_volume_id"
    assert result.volumes[6].volume_pairs[0].remote_volume_name == """async-source-7""", "Died on +.volumes[6].volume_pairs[0].remote_volume_name"
    assert result.volumes[6].volume_pairs[0].remote_slice_id == 357, "Died on +.volumes[6].volume_pairs[0].remote_slice_id"
    assert result.volumes[6].account_id == 6, "Died on +.volumes[6].account_id"
    assert result.volumes[6].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[6].create_time"
    assert result.volumes[6].virtual_volume_id is None, "Died on .volumes[6].virtual_volume_id"
    assert result.volumes[5].status == """active""", "Died on +.volumes[5].status"
    assert result.volumes[5].enable512e == False, "Died on +.volumes[5].enable512e"
    assert result.volumes[5].qos.burst_iops == 15000, "Died on +.volumes[5].qos.burst_iops"
    assert result.volumes[5].qos.burst_time == 60, "Died on +.volumes[5].qos.burst_time"
    assert result.volumes[5].qos.min_iops == 100, "Died on +.volumes[5].qos.min_iops"
    assert result.volumes[5].qos.max_iops == 15000, "Died on +.volumes[5].qos.max_iops"
    assert result.volumes[5].name == """async-target-6""", "Died on +.volumes[5].name"
    assert result.volumes[5].volume_access_groups[0] == 7, "Died on +.volumes[5].volume_access_groups[0]"
    assert result.volumes[5].scsi_naadevice_id == """6f47acc1000000003435333500000358""", "Died on +.volumes[5].scsi_naadevice_id"
    assert result.volumes[5].total_size == 5000658944, "Died on +.volumes[5].total_size"
    assert result.volumes[5].block_size == 4096, "Died on +.volumes[5].block_size"
    assert result.volumes[5].scsi_euidevice_id == """3435333500000358f47acc0100000000""", "Died on +.volumes[5].scsi_euidevice_id"
    assert result.volumes[5].volume_id == 856, "Died on +.volumes[5].volume_id"
    assert result.volumes[5].access == """replicationTarget""", "Died on +.volumes[5].access"
    assert result.volumes[5].iqn == """iqn.2010-01.com.solidfire:4535.async-target-6.856""", "Died on +.volumes[5].iqn"
    assert result.volumes[5].slice_count == 1, "Died on +.volumes[5].slice_count"
    assert type(result.volumes[5].attributes) is dict, "Died on .volumes[5].attributes"
    assert result.volumes[5].volume_pairs[0].volume_pair_uuid == UUID("db6e72bf-7582-491c-8aea-dff3d6d8b219"), "Died on .volumes[5].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[5].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[5].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[5].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[5].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[5].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[5].volume_pairs[0].remote_replication.state"
    assert result.volumes[5].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[5].volume_pairs[0].remote_replication.mode"
    assert result.volumes[5].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[5].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[5].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[5].volume_pairs[0].cluster_pair_id"
    assert result.volumes[5].volume_pairs[0].remote_volume_id == 356, "Died on +.volumes[5].volume_pairs[0].remote_volume_id"
    assert result.volumes[5].volume_pairs[0].remote_volume_name == """async-source-6""", "Died on +.volumes[5].volume_pairs[0].remote_volume_name"
    assert result.volumes[5].volume_pairs[0].remote_slice_id == 356, "Died on +.volumes[5].volume_pairs[0].remote_slice_id"
    assert result.volumes[5].account_id == 6, "Died on +.volumes[5].account_id"
    assert result.volumes[5].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[5].create_time"
    assert result.volumes[5].virtual_volume_id is None, "Died on .volumes[5].virtual_volume_id"
    assert result.volumes[4].status == """active""", "Died on +.volumes[4].status"
    assert result.volumes[4].enable512e == False, "Died on +.volumes[4].enable512e"
    assert result.volumes[4].qos.burst_iops == 15000, "Died on +.volumes[4].qos.burst_iops"
    assert result.volumes[4].qos.burst_time == 60, "Died on +.volumes[4].qos.burst_time"
    assert result.volumes[4].qos.min_iops == 100, "Died on +.volumes[4].qos.min_iops"
    assert result.volumes[4].qos.max_iops == 15000, "Died on +.volumes[4].qos.max_iops"
    assert result.volumes[4].name == """async-target-5""", "Died on +.volumes[4].name"
    assert result.volumes[4].volume_access_groups[0] == 7, "Died on +.volumes[4].volume_access_groups[0]"
    assert result.volumes[4].scsi_naadevice_id == """6f47acc1000000003435333500000357""", "Died on +.volumes[4].scsi_naadevice_id"
    assert result.volumes[4].total_size == 5000658944, "Died on +.volumes[4].total_size"
    assert result.volumes[4].block_size == 4096, "Died on +.volumes[4].block_size"
    assert result.volumes[4].scsi_euidevice_id == """3435333500000357f47acc0100000000""", "Died on +.volumes[4].scsi_euidevice_id"
    assert result.volumes[4].volume_id == 855, "Died on +.volumes[4].volume_id"
    assert result.volumes[4].access == """replicationTarget""", "Died on +.volumes[4].access"
    assert result.volumes[4].iqn == """iqn.2010-01.com.solidfire:4535.async-target-5.855""", "Died on +.volumes[4].iqn"
    assert result.volumes[4].slice_count == 1, "Died on +.volumes[4].slice_count"
    assert type(result.volumes[4].attributes) is dict, "Died on .volumes[4].attributes"
    assert result.volumes[4].volume_pairs[0].volume_pair_uuid == UUID("6f03bffd-ec05-4fe9-915e-bf5c536780d4"), "Died on .volumes[4].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[4].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[4].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[4].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[4].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[4].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[4].volume_pairs[0].remote_replication.state"
    assert result.volumes[4].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[4].volume_pairs[0].remote_replication.mode"
    assert result.volumes[4].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[4].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[4].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[4].volume_pairs[0].cluster_pair_id"
    assert result.volumes[4].volume_pairs[0].remote_volume_id == 355, "Died on +.volumes[4].volume_pairs[0].remote_volume_id"
    assert result.volumes[4].volume_pairs[0].remote_volume_name == """async-source-5""", "Died on +.volumes[4].volume_pairs[0].remote_volume_name"
    assert result.volumes[4].volume_pairs[0].remote_slice_id == 355, "Died on +.volumes[4].volume_pairs[0].remote_slice_id"
    assert result.volumes[4].account_id == 6, "Died on +.volumes[4].account_id"
    assert result.volumes[4].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[4].create_time"
    assert result.volumes[4].virtual_volume_id is None, "Died on .volumes[4].virtual_volume_id"
    assert result.volumes[3].status == """active""", "Died on +.volumes[3].status"
    assert result.volumes[3].enable512e == False, "Died on +.volumes[3].enable512e"
    assert result.volumes[3].qos.burst_iops == 15000, "Died on +.volumes[3].qos.burst_iops"
    assert result.volumes[3].qos.burst_time == 60, "Died on +.volumes[3].qos.burst_time"
    assert result.volumes[3].qos.min_iops == 100, "Died on +.volumes[3].qos.min_iops"
    assert result.volumes[3].qos.max_iops == 15000, "Died on +.volumes[3].qos.max_iops"
    assert result.volumes[3].name == """async-target-4""", "Died on +.volumes[3].name"
    assert result.volumes[3].volume_access_groups[0] == 7, "Died on +.volumes[3].volume_access_groups[0]"
    assert result.volumes[3].scsi_naadevice_id == """6f47acc1000000003435333500000356""", "Died on +.volumes[3].scsi_naadevice_id"
    assert result.volumes[3].total_size == 5000658944, "Died on +.volumes[3].total_size"
    assert result.volumes[3].block_size == 4096, "Died on +.volumes[3].block_size"
    assert result.volumes[3].scsi_euidevice_id == """3435333500000356f47acc0100000000""", "Died on +.volumes[3].scsi_euidevice_id"
    assert result.volumes[3].volume_id == 854, "Died on +.volumes[3].volume_id"
    assert result.volumes[3].access == """replicationTarget""", "Died on +.volumes[3].access"
    assert result.volumes[3].iqn == """iqn.2010-01.com.solidfire:4535.async-target-4.854""", "Died on +.volumes[3].iqn"
    assert result.volumes[3].slice_count == 1, "Died on +.volumes[3].slice_count"
    assert type(result.volumes[3].attributes) is dict, "Died on .volumes[3].attributes"
    assert result.volumes[3].volume_pairs[0].volume_pair_uuid == UUID("83059f6b-ba06-46b2-a6a5-9a589f22e053"), "Died on .volumes[3].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[3].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[3].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[3].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[3].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[3].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[3].volume_pairs[0].remote_replication.state"
    assert result.volumes[3].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[3].volume_pairs[0].remote_replication.mode"
    assert result.volumes[3].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[3].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[3].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[3].volume_pairs[0].cluster_pair_id"
    assert result.volumes[3].volume_pairs[0].remote_volume_id == 354, "Died on +.volumes[3].volume_pairs[0].remote_volume_id"
    assert result.volumes[3].volume_pairs[0].remote_volume_name == """async-source-4""", "Died on +.volumes[3].volume_pairs[0].remote_volume_name"
    assert result.volumes[3].volume_pairs[0].remote_slice_id == 354, "Died on +.volumes[3].volume_pairs[0].remote_slice_id"
    assert result.volumes[3].account_id == 6, "Died on +.volumes[3].account_id"
    assert result.volumes[3].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[3].create_time"
    assert result.volumes[3].virtual_volume_id is None, "Died on .volumes[3].virtual_volume_id"
    assert result.volumes[2].status == """active""", "Died on +.volumes[2].status"
    assert result.volumes[2].enable512e == False, "Died on +.volumes[2].enable512e"
    assert result.volumes[2].qos.burst_iops == 15000, "Died on +.volumes[2].qos.burst_iops"
    assert result.volumes[2].qos.burst_time == 60, "Died on +.volumes[2].qos.burst_time"
    assert result.volumes[2].qos.min_iops == 100, "Died on +.volumes[2].qos.min_iops"
    assert result.volumes[2].qos.max_iops == 15000, "Died on +.volumes[2].qos.max_iops"
    assert result.volumes[2].name == """async-target-3""", "Died on +.volumes[2].name"
    assert result.volumes[2].volume_access_groups[0] == 7, "Died on +.volumes[2].volume_access_groups[0]"
    assert result.volumes[2].scsi_naadevice_id == """6f47acc1000000003435333500000355""", "Died on +.volumes[2].scsi_naadevice_id"
    assert result.volumes[2].total_size == 5000658944, "Died on +.volumes[2].total_size"
    assert result.volumes[2].block_size == 4096, "Died on +.volumes[2].block_size"
    assert result.volumes[2].scsi_euidevice_id == """3435333500000355f47acc0100000000""", "Died on +.volumes[2].scsi_euidevice_id"
    assert result.volumes[2].volume_id == 853, "Died on +.volumes[2].volume_id"
    assert result.volumes[2].access == """replicationTarget""", "Died on +.volumes[2].access"
    assert result.volumes[2].iqn == """iqn.2010-01.com.solidfire:4535.async-target-3.853""", "Died on +.volumes[2].iqn"
    assert result.volumes[2].slice_count == 1, "Died on +.volumes[2].slice_count"
    assert type(result.volumes[2].attributes) is dict, "Died on .volumes[2].attributes"
    assert result.volumes[2].volume_pairs[0].volume_pair_uuid == UUID("4a730be3-3c48-4393-92b0-9fcd7a5ee76a"), "Died on .volumes[2].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[2].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[2].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[2].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[2].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[2].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[2].volume_pairs[0].remote_replication.state"
    assert result.volumes[2].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[2].volume_pairs[0].remote_replication.mode"
    assert result.volumes[2].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[2].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[2].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[2].volume_pairs[0].cluster_pair_id"
    assert result.volumes[2].volume_pairs[0].remote_volume_id == 353, "Died on +.volumes[2].volume_pairs[0].remote_volume_id"
    assert result.volumes[2].volume_pairs[0].remote_volume_name == """async-source-3""", "Died on +.volumes[2].volume_pairs[0].remote_volume_name"
    assert result.volumes[2].volume_pairs[0].remote_slice_id == 353, "Died on +.volumes[2].volume_pairs[0].remote_slice_id"
    assert result.volumes[2].account_id == 6, "Died on +.volumes[2].account_id"
    assert result.volumes[2].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[2].create_time"
    assert result.volumes[2].virtual_volume_id is None, "Died on .volumes[2].virtual_volume_id"
    assert result.volumes[1].status == """active""", "Died on +.volumes[1].status"
    assert result.volumes[1].enable512e == False, "Died on +.volumes[1].enable512e"
    assert result.volumes[1].qos.burst_iops == 15000, "Died on +.volumes[1].qos.burst_iops"
    assert result.volumes[1].qos.burst_time == 60, "Died on +.volumes[1].qos.burst_time"
    assert result.volumes[1].qos.min_iops == 100, "Died on +.volumes[1].qos.min_iops"
    assert result.volumes[1].qos.max_iops == 15000, "Died on +.volumes[1].qos.max_iops"
    assert result.volumes[1].name == """async-target-2""", "Died on +.volumes[1].name"
    assert result.volumes[1].volume_access_groups[0] == 7, "Died on +.volumes[1].volume_access_groups[0]"
    assert result.volumes[1].scsi_naadevice_id == """6f47acc1000000003435333500000354""", "Died on +.volumes[1].scsi_naadevice_id"
    assert result.volumes[1].total_size == 5000658944, "Died on +.volumes[1].total_size"
    assert result.volumes[1].block_size == 4096, "Died on +.volumes[1].block_size"
    assert result.volumes[1].scsi_euidevice_id == """3435333500000354f47acc0100000000""", "Died on +.volumes[1].scsi_euidevice_id"
    assert result.volumes[1].volume_id == 852, "Died on +.volumes[1].volume_id"
    assert result.volumes[1].access == """replicationTarget""", "Died on +.volumes[1].access"
    assert result.volumes[1].iqn == """iqn.2010-01.com.solidfire:4535.async-target-2.852""", "Died on +.volumes[1].iqn"
    assert result.volumes[1].slice_count == 1, "Died on +.volumes[1].slice_count"
    assert type(result.volumes[1].attributes) is dict, "Died on .volumes[1].attributes"
    assert result.volumes[1].volume_pairs[0].volume_pair_uuid == UUID("70c7fe2c-44b0-4f7e-8ab1-b53d8feba168"), "Died on .volumes[1].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[1].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[1].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[1].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[1].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[1].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[1].volume_pairs[0].remote_replication.state"
    assert result.volumes[1].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[1].volume_pairs[0].remote_replication.mode"
    assert result.volumes[1].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[1].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[1].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[1].volume_pairs[0].cluster_pair_id"
    assert result.volumes[1].volume_pairs[0].remote_volume_id == 352, "Died on +.volumes[1].volume_pairs[0].remote_volume_id"
    assert result.volumes[1].volume_pairs[0].remote_volume_name == """async-source-2""", "Died on +.volumes[1].volume_pairs[0].remote_volume_name"
    assert result.volumes[1].volume_pairs[0].remote_slice_id == 352, "Died on +.volumes[1].volume_pairs[0].remote_slice_id"
    assert result.volumes[1].account_id == 6, "Died on +.volumes[1].account_id"
    assert result.volumes[1].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[1].create_time"
    assert result.volumes[1].virtual_volume_id is None, "Died on .volumes[1].virtual_volume_id"
    assert result.volumes[0].status == """active""", "Died on +.volumes[0].status"
    assert result.volumes[0].enable512e == False, "Died on +.volumes[0].enable512e"
    assert result.volumes[0].qos.burst_iops == 15000, "Died on +.volumes[0].qos.burst_iops"
    assert result.volumes[0].qos.burst_time == 60, "Died on +.volumes[0].qos.burst_time"
    assert result.volumes[0].qos.min_iops == 100, "Died on +.volumes[0].qos.min_iops"
    assert result.volumes[0].qos.max_iops == 15000, "Died on +.volumes[0].qos.max_iops"
    assert result.volumes[0].name == """async-target-1""", "Died on +.volumes[0].name"
    assert result.volumes[0].volume_access_groups[0] == 7, "Died on +.volumes[0].volume_access_groups[0]"
    assert result.volumes[0].scsi_naadevice_id == """6f47acc1000000003435333500000353""", "Died on +.volumes[0].scsi_naadevice_id"
    assert result.volumes[0].total_size == 5000658944, "Died on +.volumes[0].total_size"
    assert result.volumes[0].block_size == 4096, "Died on +.volumes[0].block_size"
    assert result.volumes[0].scsi_euidevice_id == """3435333500000353f47acc0100000000""", "Died on +.volumes[0].scsi_euidevice_id"
    assert result.volumes[0].volume_id == 851, "Died on +.volumes[0].volume_id"
    assert result.volumes[0].access == """replicationTarget""", "Died on +.volumes[0].access"
    assert result.volumes[0].iqn == """iqn.2010-01.com.solidfire:4535.async-target-1.851""", "Died on +.volumes[0].iqn"
    assert result.volumes[0].slice_count == 1, "Died on +.volumes[0].slice_count"
    assert type(result.volumes[0].attributes) is dict, "Died on .volumes[0].attributes"
    assert result.volumes[0].volume_pairs[0].volume_pair_uuid == UUID("1d8d2587-e2b1-4c39-b780-5a949f83df45"), "Died on .volumes[0].volume_pairs[0].volume_pair_uuid"
    assert result.volumes[0].volume_pairs[0].remote_replication.pause_limit == 3145728000, "Died on +.volumes[0].volume_pairs[0].remote_replication.pause_limit"
    assert result.volumes[0].volume_pairs[0].remote_replication.remote_service_id == 0, "Died on +.volumes[0].volume_pairs[0].remote_replication.remote_service_id"
    assert result.volumes[0].volume_pairs[0].remote_replication.state == """PausedMisconfigured""", "Died on +.volumes[0].volume_pairs[0].remote_replication.state"
    assert result.volumes[0].volume_pairs[0].remote_replication.mode == """Async""", "Died on +.volumes[0].volume_pairs[0].remote_replication.mode"
    assert result.volumes[0].volume_pairs[0].remote_replication.snapshot_replication.state == """PausedMisconfigured""", "Died on +.volumes[0].volume_pairs[0].remote_replication.snapshot_replication.state"
    assert result.volumes[0].volume_pairs[0].cluster_pair_id == 1, "Died on +.volumes[0].volume_pairs[0].cluster_pair_id"
    assert result.volumes[0].volume_pairs[0].remote_volume_id == 351, "Died on +.volumes[0].volume_pairs[0].remote_volume_id"
    assert result.volumes[0].volume_pairs[0].remote_volume_name == """async-source-1""", "Died on +.volumes[0].volume_pairs[0].remote_volume_name"
    assert result.volumes[0].volume_pairs[0].remote_slice_id == 351, "Died on +.volumes[0].volume_pairs[0].remote_slice_id"
    assert result.volumes[0].account_id == 6, "Died on +.volumes[0].account_id"
    assert result.volumes[0].create_time == """2016-12-30T18:10:10Z""", "Died on +.volumes[0].create_time"
    assert result.volumes[0].virtual_volume_id is None, "Died on .volumes[0].virtual_volume_id"

def test_purge_deleted_volume_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_PurgeDeletedVolume_v8.4_0)

    
    volume_id = 42 # volume_id
    result = ef.purge_deleted_volume(volume_id,)

def test_purge_deleted_volumes_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_PurgeDeletedVolumes_v9.1_0)

    
    volume_ids = 42 # volume_ids
    account_ids = 42 # account_ids
    volume_access_group_ids = 42 # volume_access_group_ids
    result = ef.purge_deleted_volumes()

def test_remove_account_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_RemoveAccount_v9.1_0)

    
    account_id = 42 # account_id
    result = ef.remove_account(account_id,)

def test_remove_cluster_pair_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_RemoveClusterPair_v9.1_0)

    
    cluster_pair_id = 42 # cluster_pair_id
    result = ef.remove_cluster_pair(cluster_pair_id,)

def test_reset_node_v8.2_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ResetNode_v8.2_0)

    
    build = "" # build
    force = True # force
    option = "" # option
    result = ef.reset_node(build,force,)
    assert result.duration == """00:00:19.430030""", "Died on +.duration"
    assert result.result == """Passed""", "Died on +.result"
    assert result.details.rtfi_info.status_url_current == """https://10.117.56.81:442/config/rtfi/status/current.json""", "Died on +.details.rtfi_info.status_url_current"
    assert type(result.details.rtfi_info.options) is dict, "Died on .details.rtfi_info.options"
    assert result.details.rtfi_info.status_url_all == """https://10.117.56.81:442/config/rtfi/status/all.json""", "Died on +.details.rtfi_info.status_url_all"
    assert result.details.rtfi_info.build == """file:///sf/rtfi/image/filesystem.squashfs""", "Died on +.details.rtfi_info.build"

def test_reset_node_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ResetNode_v8.6_0)

    
    build = "" # build
    force = True # force
    option = "" # option
    result = ef.reset_node(build,force,)
    assert result.duration == """00:00:14.115031""", "Died on +.duration"
    assert result.result == """Passed""", "Died on +.result"
    assert result.details.rtfi_info.build == """file:///sf/rtfi/image/filesystem.squashfs""", "Died on +.details.rtfi_info.build"
    assert result.details.rtfi_info.status_url_all == """https://10.117.56.44:442/config/rtfi/status/all.json""", "Died on +.details.rtfi_info.status_url_all"
    assert result.details.rtfi_info.status_url_logfile == """https://10.117.56.44:442/config/rtfi/status/rtfi.log""", "Died on +.details.rtfi_info.status_url_logfile"
    assert result.details.rtfi_info.status_url_current == """https://10.117.56.44:442/config/rtfi/status/current.json""", "Died on +.details.rtfi_info.status_url_current"
    assert type(result.details.rtfi_info.options) is dict, "Died on .details.rtfi_info.options"

def test_reset_node_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ResetNode_v8.7_0)

    
    build = "" # build
    force = True # force
    option = "" # option
    result = ef.reset_node(build,force,)
    assert result.duration == """00:00:14.679255""", "Died on +.duration"
    assert result.result == """Passed""", "Died on +.result"
    assert result.details.rtfi_info.build == """file:///sf/rtfi/image/filesystem.squashfs""", "Died on +.details.rtfi_info.build"
    assert result.details.rtfi_info.status_url_all == """https://10.117.56.44:442/config/rtfi/status/all.json""", "Died on +.details.rtfi_info.status_url_all"
    assert result.details.rtfi_info.status_url_logfile == """https://10.117.56.44:442/config/rtfi/status/rtfi.log""", "Died on +.details.rtfi_info.status_url_logfile"
    assert result.details.rtfi_info.status_url_current == """https://10.117.56.44:442/config/rtfi/status/current.json""", "Died on +.details.rtfi_info.status_url_current"
    assert type(result.details.rtfi_info.options) is dict, "Died on .details.rtfi_info.options"

def test_reset_node_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ResetNode_v9.0_0)

    
    build = "" # build
    force = True # force
    option = "" # option
    result = ef.reset_node(build,force,)
    assert result.duration == """00:00:00.174456""", "Died on +.duration"
    assert result.result == """Passed""", "Died on +.result"
    assert result.details.rtfi_info.mipi == """Bond1G""", "Died on +.details.rtfi_info.mipi"
    assert result.details.rtfi_info.generation == 1, "Died on +.details.rtfi_info.generation"
    assert result.details.rtfi_info.generation_next == 3, "Died on +.details.rtfi_info.generation_next"
    assert result.details.rtfi_info.build == """file:///sf/rtfi/image/filesystem.squashfs""", "Died on +.details.rtfi_info.build"
    assert result.details.rtfi_info.status_url_all == """https://10.117.56.107:442/config/rtfi/status/all.json""", "Died on +.details.rtfi_info.status_url_all"
    assert result.details.rtfi_info.status_url_logfile == """https://10.117.56.107:442/config/rtfi/status/rtfi.log""", "Died on +.details.rtfi_info.status_url_logfile"
    assert result.details.rtfi_info.mip == """10.117.56.107""", "Died on +.details.rtfi_info.mip"
    assert result.details.rtfi_info.status_url_current == """https://10.117.56.107:442/config/rtfi/status/current.json""", "Died on +.details.rtfi_info.status_url_current"

def test_reset_node_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ResetNode_v9.1_0)

    
    build = "" # build
    force = True # force
    option = "" # option
    result = ef.reset_node(build,force,)
    assert result.duration == """00:00:00.177384""", "Died on +.duration"
    assert result.result == """Passed""", "Died on +.result"
    assert result.details.rtfi_info.mipi == """Bond1G""", "Died on +.details.rtfi_info.mipi"
    assert result.details.rtfi_info.generation == 31, "Died on +.details.rtfi_info.generation"
    assert result.details.rtfi_info.generation_next == 32, "Died on +.details.rtfi_info.generation_next"
    assert result.details.rtfi_info.build == """file:///sf/rtfi/image/filesystem.squashfs""", "Died on +.details.rtfi_info.build"
    assert result.details.rtfi_info.status_url_all == """https://10.117.56.15:442/config/rtfi/status/all.json""", "Died on +.details.rtfi_info.status_url_all"
    assert result.details.rtfi_info.status_url_logfile == """https://10.117.56.15:442/config/rtfi/status/rtfi.log""", "Died on +.details.rtfi_info.status_url_logfile"
    assert result.details.rtfi_info.mip == """10.117.56.15""", "Died on +.details.rtfi_info.mip"
    assert result.details.rtfi_info.status_url_current == """https://10.117.56.15:442/config/rtfi/status/current.json""", "Died on +.details.rtfi_info.status_url_current"

def test_reset_node_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_ResetNode_v9.1_1)

    
    build = "" # build
    force = True # force
    option = "" # option
    result = ef.reset_node(build,force,)
    assert result.duration == """00:00:00.130800""", "Died on +.duration"
    assert result.result == """Passed""", "Died on +.result"
    assert result.details.rtfi_info.mipi == """Bond1G""", "Died on +.details.rtfi_info.mipi"
    assert result.details.rtfi_info.generation == 8, "Died on +.details.rtfi_info.generation"
    assert result.details.rtfi_info.generation_next == 10, "Died on +.details.rtfi_info.generation_next"
    assert result.details.rtfi_info.build == """file:///sf/rtfi/image/filesystem.squashfs""", "Died on +.details.rtfi_info.build"
    assert result.details.rtfi_info.status_url_all == """https://10.117.56.76:442/config/rtfi/status/all.json""", "Died on +.details.rtfi_info.status_url_all"
    assert result.details.rtfi_info.status_url_logfile == """https://10.117.56.76:442/config/rtfi/status/rtfi.log""", "Died on +.details.rtfi_info.status_url_logfile"
    assert result.details.rtfi_info.mip == """10.117.56.76""", "Died on +.details.rtfi_info.mip"
    assert result.details.rtfi_info.status_url_current == """https://10.117.56.76:442/config/rtfi/status/current.json""", "Died on +.details.rtfi_info.status_url_current"

def test_restart_services_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_RestartServices_v8.4_0)

    
    force = True # force
    service = "" # service
    action = "" # action
    result = ef.restart_services(force,)

def test_restart_services_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_RestartServices_v8.6_0)

    
    force = True # force
    service = "" # service
    action = "" # action
    result = ef.restart_services(force,)

def test_restart_services_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_RestartServices_v8.7_0)

    
    force = True # force
    service = "" # service
    action = "" # action
    result = ef.restart_services(force,)

def test_restart_services_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_RestartServices_v9.0_0)

    
    force = True # force
    service = "" # service
    action = "" # action
    result = ef.restart_services(force,)

def test_restart_services_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_RestartServices_v9.1_0)

    
    force = True # force
    service = "" # service
    action = "" # action
    result = ef.restart_services(force,)

def test_restart_services_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_RestartServices_v9.1_1)

    
    force = True # force
    service = "" # service
    action = "" # action
    result = ef.restart_services(force,)

def test_restart_services_v9.1_2():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_RestartServices_v9.1_2)

    
    force = True # force
    service = "" # service
    action = "" # action
    result = ef.restart_services(force,)

def test_restore_deleted_volume_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_RestoreDeletedVolume_v9.1_0)

    
    volume_id = 42 # volume_id
    result = ef.restore_deleted_volume(volume_id,)

def test_set_cluster_config_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetClusterConfig_v8.4_0)

    
    cluster = dict() # cluster
    result = ef.set_cluster_config(cluster,)
    assert result.cluster.mipi == """Bond1G""", "Died on +.cluster.mipi"
    assert result.cluster.name == """NLABP0907""", "Died on +.cluster.name"
    assert result.cluster.state == """Available""", "Died on +.cluster.state"
    assert result.cluster.sipi == """Bond10G""", "Died on +.cluster.sipi"
    assert result.cluster.node_id == 0, "Died on +.cluster.node_id"
    assert result.cluster.cipi == """Bond10G""", "Died on +.cluster.cipi"
    assert result.cluster.role == """Storage""", "Died on +.cluster.role"
    assert result.cluster.pending_node_id == 0, "Died on +.cluster.pending_node_id"

def test_set_cluster_config_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetClusterConfig_v8.6_0)

    
    cluster = dict() # cluster
    result = ef.set_cluster_config(cluster,)
    assert result.cluster.mipi == """Bond1G""", "Died on +.cluster.mipi"
    assert result.cluster.name == """NLABP2124""", "Died on +.cluster.name"
    assert result.cluster.state == """Available""", "Died on +.cluster.state"
    assert result.cluster.sipi == """Bond10G""", "Died on +.cluster.sipi"
    assert result.cluster.node_id == 0, "Died on +.cluster.node_id"
    assert result.cluster.cipi == """Bond10G""", "Died on +.cluster.cipi"
    assert result.cluster.role == """Storage""", "Died on +.cluster.role"
    assert result.cluster.pending_node_id == 0, "Died on +.cluster.pending_node_id"

def test_set_cluster_config_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetClusterConfig_v8.7_0)

    
    cluster = dict() # cluster
    result = ef.set_cluster_config(cluster,)
    assert result.cluster.encryption_capable == True, "Died on +.cluster.encryption_capable"
    assert result.cluster.mipi == """Bond1G""", "Died on +.cluster.mipi"
    assert result.cluster.name == """NLABP0919""", "Died on +.cluster.name"
    assert result.cluster.state == """Available""", "Died on +.cluster.state"
    assert result.cluster.sipi == """Bond10G""", "Died on +.cluster.sipi"
    assert result.cluster.node_id == 0, "Died on +.cluster.node_id"
    assert result.cluster.cipi == """Bond10G""", "Died on +.cluster.cipi"
    assert result.cluster.role == """Storage""", "Died on +.cluster.role"
    assert result.cluster.pending_node_id == 0, "Died on +.cluster.pending_node_id"

def test_set_cluster_config_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetClusterConfig_v9.0_0)

    
    cluster = dict() # cluster
    result = ef.set_cluster_config(cluster,)
    assert result.cluster.mipi == """Bond1G""", "Died on +.cluster.mipi"
    assert result.cluster.node_id == 0, "Died on +.cluster.node_id"
    assert result.cluster.name == """NLABP2010""", "Died on +.cluster.name"
    assert result.cluster.sipi == """Bond10G""", "Died on +.cluster.sipi"
    assert result.cluster.state == """Available""", "Died on +.cluster.state"
    assert result.cluster.version == """9.0.0.1554""", "Died on +.cluster.version"
    assert result.cluster.role == """Storage""", "Died on +.cluster.role"
    assert result.cluster.cipi == """Bond10G""", "Died on +.cluster.cipi"
    assert result.cluster.pending_node_id == 0, "Died on +.cluster.pending_node_id"

def test_set_cluster_config_v9.0_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetClusterConfig_v9.0_1)

    
    cluster = dict() # cluster
    result = ef.set_cluster_config(cluster,)
    assert result.cluster.mipi == """Bond1G""", "Died on +.cluster.mipi"
    assert result.cluster.name == """NLABP2022""", "Died on +.cluster.name"
    assert result.cluster.state == """Available""", "Died on +.cluster.state"
    assert result.cluster.sipi == """Bond10G""", "Died on +.cluster.sipi"
    assert result.cluster.node_id == 0, "Died on +.cluster.node_id"
    assert result.cluster.cipi == """Bond10G""", "Died on +.cluster.cipi"
    assert result.cluster.role == """Storage""", "Died on +.cluster.role"
    assert result.cluster.pending_node_id == 0, "Died on +.cluster.pending_node_id"

def test_set_cluster_config_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetClusterConfig_v9.1_0)

    
    cluster = dict() # cluster
    result = ef.set_cluster_config(cluster,)
    assert result.cluster.mipi == """Bond1G""", "Died on +.cluster.mipi"
    assert result.cluster.name == """NLABP0904""", "Died on +.cluster.name"
    assert result.cluster.state == """Available""", "Died on +.cluster.state"
    assert result.cluster.sipi == """Bond10G""", "Died on +.cluster.sipi"
    assert result.cluster.node_id == 0, "Died on +.cluster.node_id"
    assert result.cluster.cipi == """Bond10G""", "Died on +.cluster.cipi"
    assert result.cluster.role == """Storage""", "Died on +.cluster.role"
    assert result.cluster.pending_node_id == 0, "Died on +.cluster.pending_node_id"

def test_set_cluster_config_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetClusterConfig_v9.1_1)

    
    cluster = dict() # cluster
    result = ef.set_cluster_config(cluster,)
    assert result.cluster.mipi == """Bond1G""", "Died on +.cluster.mipi"
    assert result.cluster.node_id == 0, "Died on +.cluster.node_id"
    assert result.cluster.name == """NLABP1802""", "Died on +.cluster.name"
    assert result.cluster.sipi == """Bond10G""", "Died on +.cluster.sipi"
    assert result.cluster.cluster == """AutoTest2-6kyp""", "Died on +.cluster.cluster"
    assert result.cluster.state == """Pending""", "Died on +.cluster.state"
    assert result.cluster.version == """9.1.0.28""", "Died on +.cluster.version"
    assert result.cluster.role == """Storage""", "Died on +.cluster.role"
    assert result.cluster.cipi == """Bond10G""", "Died on +.cluster.cipi"
    assert result.cluster.pending_node_id == 0, "Died on +.cluster.pending_node_id"

def test_set_cluster_config_v9.1_2():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetClusterConfig_v9.1_2)

    
    cluster = dict() # cluster
    result = ef.set_cluster_config(cluster,)
    assert result.cluster.encryption_capable == True, "Died on +.cluster.encryption_capable"
    assert result.cluster.mipi == """Bond1G""", "Died on +.cluster.mipi"
    assert result.cluster.name == """NLABP0902""", "Died on +.cluster.name"
    assert result.cluster.node_id == 0, "Died on +.cluster.node_id"
    assert result.cluster.sipi == """Bond10G""", "Died on +.cluster.sipi"
    assert result.cluster.cluster == """AutoTest2-xccB""", "Died on +.cluster.cluster"
    assert result.cluster.state == """Pending""", "Died on +.cluster.state"
    assert result.cluster.version == """9.1.0.40""", "Died on +.cluster.version"
    assert result.cluster.role == """Storage""", "Died on +.cluster.role"
    assert result.cluster.cipi == """Bond10G""", "Died on +.cluster.cipi"
    assert result.cluster.pending_node_id == 0, "Died on +.cluster.pending_node_id"

def test_set_login_session_info_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetLoginSessionInfo_v8.4_0)

    
    timeout = "" # timeout
    result = ef.set_login_session_info(timeout,)

def test_set_login_session_info_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetLoginSessionInfo_v8.6_0)

    
    timeout = "" # timeout
    result = ef.set_login_session_info(timeout,)

def test_set_login_session_info_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetLoginSessionInfo_v8.7_0)

    
    timeout = "" # timeout
    result = ef.set_login_session_info(timeout,)

def test_set_login_session_info_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetLoginSessionInfo_v9.0_0)

    
    timeout = "" # timeout
    result = ef.set_login_session_info(timeout,)

def test_set_login_session_info_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetLoginSessionInfo_v9.1_0)

    
    timeout = "" # timeout
    result = ef.set_login_session_info(timeout,)

def test_set_network_config_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetNetworkConfig_v8.4_0)

    
    network = dict() # network
    result = ef.set_network_config(network,)
    assert result.network.bond1_g.mac_address == """b8:ca:3a:f7:b7:e1""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.symmetric_route_rules[3] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[3]"
    assert result.network.bond1_g.symmetric_route_rules[2] == """ip rule add from 10.117.56.16 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[2]"
    assert result.network.bond1_g.symmetric_route_rules[1] == """ip route add default via 10.117.57.254 dev Bond1G src 10.117.56.16 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[1]"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add 10.117.56.0/23 dev Bond1G src 10.117.56.16 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """b8:ca:3a:f7:b7:e1""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """10.117.56.0""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.56.16""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.network == """10.117.56.0""", "Died on +.network.bond1_g.network"
    assert result.network.bond1_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.method == """static""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_fail_over_mac == """Active""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """ActivePassive""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.117.56.16""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_downdelay == """200""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """b8:ca:3a:f7:b7:dd""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.symmetric_route_rules[2] == """ip rule add from 10.117.58.16 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[2]"
    assert result.network.bond10_g.symmetric_route_rules[1] == """ip route add default via 10.117.59.254 dev Bond10G src 10.117.58.16 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[1]"
    assert result.network.bond10_g.symmetric_route_rules[0] == """ip route add 10.117.58.0/23 dev Bond10G src 10.117.58.16 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[0]"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.gateway == """10.117.59.254""", "Died on +.network.bond10_g.gateway"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """b8:ca:3a:f7:b7:dd""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """10.117.58.0""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.58.16""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.network == """10.117.58.0""", "Died on +.network.bond10_g.network"
    assert result.network.bond10_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.method == """static""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_fail_over_mac == """Active""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """ActivePassive""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """10.117.58.16""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_downdelay == """200""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """b8:ca:3a:f7:b7:e3""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """b8:ca:3a:f7:b7:e3""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """b8:ca:3a:f7:b7:e3""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """b8:ca:3a:f7:b7:e3""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """b8:ca:3a:f7:b7:e1""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """b8:ca:3a:f7:b7:e1""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """b8:ca:3a:f7:b7:e1""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """b8:ca:3a:f7:b7:e1""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """b8:ca:3a:f7:b7:df""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """b8:ca:3a:f7:b7:df""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """b8:ca:3a:f7:b7:df""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """b8:ca:3a:f7:b7:df""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """b8:ca:3a:f7:b7:dd""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """b8:ca:3a:f7:b7:dd""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """b8:ca:3a:f7:b7:dd""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """b8:ca:3a:f7:b7:dd""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_set_network_config_v8.4_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetNetworkConfig_v8.4_1)

    
    network = dict() # network
    result = ef.set_network_config(network,)
    assert result.network.bond1_g.mac_address == """b8:ca:3a:f5:04:e1""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.bond_fail_over_mac == """None""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g.symmetric_route_rules[3] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[3]"
    assert result.network.bond1_g.symmetric_route_rules[2] == """ip rule add from 10.117.56.19 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[2]"
    assert result.network.bond1_g.symmetric_route_rules[1] == """ip route add default via 10.117.57.254 dev Bond1G src 10.117.56.19 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[1]"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add 10.117.56.0/23 dev Bond1G src 10.117.56.19 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """b8:ca:3a:f5:04:e1""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """10.117.56.0""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.56.19""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.network == """10.117.56.0""", "Died on +.network.bond1_g.network"
    assert result.network.bond1_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.method == """static""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_lacp_rate == """Fast""", "Died on +.network.bond1_g.bond_lacp_rate"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """LACP""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.117.56.19""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_xmit_hash_policy == """Layer3_4""", "Died on +.network.bond1_g.bond_xmit_hash_policy"
    assert result.network.bond1_g.bond_downdelay == """200""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """b8:ca:3a:f5:04:dd""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.bond_fail_over_mac == """None""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g.symmetric_route_rules[2] == """ip rule add from 10.117.58.19 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[2]"
    assert result.network.bond10_g.symmetric_route_rules[1] == """ip route add default via 10.117.59.254 dev Bond10G src 10.117.58.19 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[1]"
    assert result.network.bond10_g.symmetric_route_rules[0] == """ip route add 10.117.58.0/23 dev Bond10G src 10.117.58.19 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[0]"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.gateway == """10.117.59.254""", "Died on +.network.bond10_g.gateway"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """b8:ca:3a:f5:04:dd""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """10.117.58.0""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.58.19""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.network == """10.117.58.0""", "Died on +.network.bond10_g.network"
    assert result.network.bond10_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.method == """static""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_lacp_rate == """Fast""", "Died on +.network.bond10_g.bond_lacp_rate"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """LACP""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """10.117.58.19""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_xmit_hash_policy == """Layer3_4""", "Died on +.network.bond10_g.bond_xmit_hash_policy"
    assert result.network.bond10_g.bond_downdelay == """200""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """b8:ca:3a:f5:04:e3""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """b8:ca:3a:f5:04:e1""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """b8:ca:3a:f5:04:e3""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """b8:ca:3a:f5:04:e1""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """b8:ca:3a:f5:04:e1""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """b8:ca:3a:f5:04:e1""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """b8:ca:3a:f5:04:e1""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """b8:ca:3a:f5:04:e1""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """b8:ca:3a:f5:04:df""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """b8:ca:3a:f5:04:dd""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """b8:ca:3a:f5:04:df""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """b8:ca:3a:f5:04:dd""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """b8:ca:3a:f5:04:dd""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """b8:ca:3a:f5:04:dd""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """b8:ca:3a:f5:04:dd""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """b8:ca:3a:f5:04:dd""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_set_network_config_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetNetworkConfig_v8.6_0)

    
    network = dict() # network
    result = ef.set_network_config(network,)
    assert result.network.bond1_g.mac_address == """b8:ca:3a:f5:10:8f""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.symmetric_route_rules[3] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[3]"
    assert result.network.bond1_g.symmetric_route_rules[2] == """ip rule add from 10.117.56.9 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[2]"
    assert result.network.bond1_g.symmetric_route_rules[1] == """ip route add default via 10.117.57.254 dev Bond1G src 10.117.56.9 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[1]"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add 10.117.56.0/23 dev Bond1G src 10.117.56.9 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """b8:ca:3a:f5:10:8f""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """10.117.56.0""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.56.9""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.network == """10.117.56.0""", "Died on +.network.bond1_g.network"
    assert result.network.bond1_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.method == """static""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_fail_over_mac == """Active""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """ActivePassive""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.117.56.9""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_downdelay == """200""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """b8:ca:3a:f5:10:8b""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.symmetric_route_rules[2] == """ip rule add from 10.117.58.9 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[2]"
    assert result.network.bond10_g.symmetric_route_rules[1] == """ip route add default via 10.117.59.254 dev Bond10G src 10.117.58.9 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[1]"
    assert result.network.bond10_g.symmetric_route_rules[0] == """ip route add 10.117.58.0/23 dev Bond10G src 10.117.58.9 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[0]"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.gateway == """10.117.59.254""", "Died on +.network.bond10_g.gateway"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """b8:ca:3a:f5:10:8b""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """10.117.58.0""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.58.9""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.network == """10.117.58.0""", "Died on +.network.bond10_g.network"
    assert result.network.bond10_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.method == """static""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_fail_over_mac == """Active""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """ActivePassive""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """10.117.58.9""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_downdelay == """200""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """b8:ca:3a:f5:10:91""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """b8:ca:3a:f5:10:91""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """b8:ca:3a:f5:10:91""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """b8:ca:3a:f5:10:91""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """b8:ca:3a:f5:10:8f""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """b8:ca:3a:f5:10:8f""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """b8:ca:3a:f5:10:8f""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """b8:ca:3a:f5:10:8f""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """b8:ca:3a:f5:10:8d""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """b8:ca:3a:f5:10:8d""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """b8:ca:3a:f5:10:8d""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """b8:ca:3a:f5:10:8d""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """b8:ca:3a:f5:10:8b""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """b8:ca:3a:f5:10:8b""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """b8:ca:3a:f5:10:8b""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """b8:ca:3a:f5:10:8b""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_set_network_config_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetNetworkConfig_v8.7_0)

    
    network = dict() # network
    result = ef.set_network_config(network,)
    assert result.network.bond1_g.mac_address == """44:a8:42:02:cc:7d""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.symmetric_route_rules[3] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[3]"
    assert result.network.bond1_g.symmetric_route_rules[2] == """ip rule add from 10.117.56.45 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[2]"
    assert result.network.bond1_g.symmetric_route_rules[1] == """ip route add default via 10.117.57.254 dev Bond1G src 10.117.56.45 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[1]"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add 10.117.56.0/23 dev Bond1G src 10.117.56.45 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """44:a8:42:02:cc:7d""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """10.117.56.0""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.56.45""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.network == """10.117.56.0""", "Died on +.network.bond1_g.network"
    assert result.network.bond1_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.method == """static""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_fail_over_mac == """Active""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """ActivePassive""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.117.56.45""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_downdelay == """200""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """44:a8:42:02:cc:79""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.symmetric_route_rules[2] == """ip rule add from 10.117.58.45 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[2]"
    assert result.network.bond10_g.symmetric_route_rules[1] == """ip route add default via 10.117.59.254 dev Bond10G src 10.117.58.45 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[1]"
    assert result.network.bond10_g.symmetric_route_rules[0] == """ip route add 10.117.58.0/23 dev Bond10G src 10.117.58.45 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[0]"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.gateway == """10.117.59.254""", "Died on +.network.bond10_g.gateway"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """44:a8:42:02:cc:79""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """10.117.58.0""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.58.45""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.network == """10.117.58.0""", "Died on +.network.bond10_g.network"
    assert result.network.bond10_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.method == """static""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_fail_over_mac == """Active""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """ActivePassive""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """10.117.58.45""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_downdelay == """200""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """44:a8:42:02:cc:7f""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """44:a8:42:02:cc:7f""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """44:a8:42:02:cc:7f""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """44:a8:42:02:cc:7f""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """44:a8:42:02:cc:7d""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """44:a8:42:02:cc:7d""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """44:a8:42:02:cc:7d""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """44:a8:42:02:cc:7d""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """44:a8:42:02:cc:7b""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """44:a8:42:02:cc:7b""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """44:a8:42:02:cc:7b""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """44:a8:42:02:cc:7b""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """44:a8:42:02:cc:79""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """44:a8:42:02:cc:79""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """44:a8:42:02:cc:79""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """44:a8:42:02:cc:79""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_set_network_config_v8.7_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetNetworkConfig_v8.7_1)

    
    network = dict() # network
    result = ef.set_network_config(network,)
    assert result.network.bond1_g.mac_address == """b0:83:fe:eb:b1:fa""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.bond_fail_over_mac == """None""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g.symmetric_route_rules[3] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[3]"
    assert result.network.bond1_g.symmetric_route_rules[2] == """ip rule add from 10.117.56.14 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[2]"
    assert result.network.bond1_g.symmetric_route_rules[1] == """ip route add default via 10.117.57.254 dev Bond1G src 10.117.56.14 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[1]"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add 10.117.56.0/23 dev Bond1G src 10.117.56.14 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """b0:83:fe:eb:b1:fa""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """10.117.56.0""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.56.14""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.network == """10.117.56.0""", "Died on +.network.bond1_g.network"
    assert result.network.bond1_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.method == """static""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_lacp_rate == """Fast""", "Died on +.network.bond1_g.bond_lacp_rate"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """LACP""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.117.56.14""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_xmit_hash_policy == """Layer3_4""", "Died on +.network.bond1_g.bond_xmit_hash_policy"
    assert result.network.bond1_g.bond_downdelay == """200""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """b0:83:fe:eb:b1:f6""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.bond_fail_over_mac == """None""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g.symmetric_route_rules[2] == """ip rule add from 10.117.58.14 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[2]"
    assert result.network.bond10_g.symmetric_route_rules[1] == """ip route add default via 10.117.59.254 dev Bond10G src 10.117.58.14 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[1]"
    assert result.network.bond10_g.symmetric_route_rules[0] == """ip route add 10.117.58.0/23 dev Bond10G src 10.117.58.14 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[0]"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.gateway == """10.117.59.254""", "Died on +.network.bond10_g.gateway"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """b0:83:fe:eb:b1:f6""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """10.117.58.0""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.58.14""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.network == """10.117.58.0""", "Died on +.network.bond10_g.network"
    assert result.network.bond10_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.method == """static""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_lacp_rate == """Fast""", "Died on +.network.bond10_g.bond_lacp_rate"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """LACP""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """10.117.58.14""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_xmit_hash_policy == """Layer3_4""", "Died on +.network.bond10_g.bond_xmit_hash_policy"
    assert result.network.bond10_g.bond_downdelay == """200""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """b0:83:fe:eb:b1:fc""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """b0:83:fe:eb:b1:fa""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """b0:83:fe:eb:b1:fc""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """b0:83:fe:eb:b1:fa""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """b0:83:fe:eb:b1:fa""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """b0:83:fe:eb:b1:fa""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """b0:83:fe:eb:b1:fa""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """b0:83:fe:eb:b1:fa""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """b0:83:fe:eb:b1:f8""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """b0:83:fe:eb:b1:f6""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """b0:83:fe:eb:b1:f8""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """b0:83:fe:eb:b1:f6""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """b0:83:fe:eb:b1:f6""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """b0:83:fe:eb:b1:f6""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """b0:83:fe:eb:b1:f6""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """b0:83:fe:eb:b1:f6""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_set_network_config_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetNetworkConfig_v9.0_0)

    
    network = dict() # network
    result = ef.set_network_config(network,)
    assert result.network.bond1_g.mac_address == """b8:ca:3a:f5:1b:cd""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.virtual_network_tag == """0""", "Died on +.network.bond1_g.virtual_network_tag"
    assert result.network.bond1_g.symmetric_route_rules[3] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[3]"
    assert result.network.bond1_g.symmetric_route_rules[2] == """ip rule add from 10.117.56.100 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[2]"
    assert result.network.bond1_g.symmetric_route_rules[1] == """ip route add default via 10.117.57.254 dev Bond1G src 10.117.56.100 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[1]"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add 10.117.56.0/23 dev Bond1G src 10.117.56.100 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """b8:ca:3a:f5:1b:cd""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """10.117.56.0""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.56.100""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.network == """10.117.56.0""", "Died on +.network.bond1_g.network"
    assert result.network.bond1_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.method == """static""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_fail_over_mac == """None""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """ALB""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.117.56.100""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_downdelay == """200""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """b8:ca:3a:f5:1b:c9""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.virtual_network_tag == """0""", "Died on +.network.bond10_g.virtual_network_tag"
    assert result.network.bond10_g.symmetric_route_rules[2] == """ip rule add from 10.117.58.100 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[2]"
    assert result.network.bond10_g.symmetric_route_rules[1] == """ip route add default via 10.117.59.254 dev Bond10G src 10.117.58.100 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[1]"
    assert result.network.bond10_g.symmetric_route_rules[0] == """ip route add 10.117.58.0/23 dev Bond10G src 10.117.58.100 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[0]"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.gateway == """10.117.59.254""", "Died on +.network.bond10_g.gateway"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """b8:ca:3a:f5:1b:c9""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """10.117.58.0""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.58.100""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.network == """10.117.58.0""", "Died on +.network.bond10_g.network"
    assert result.network.bond10_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.method == """static""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_fail_over_mac == """None""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """ALB""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """10.117.58.100""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_downdelay == """200""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """b8:ca:3a:f5:1b:cf""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """b8:ca:3a:f5:1b:cf""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """b8:ca:3a:f5:1b:cf""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """b8:ca:3a:f5:1b:cf""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """b8:ca:3a:f5:1b:cd""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """b8:ca:3a:f5:1b:cd""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """b8:ca:3a:f5:1b:cd""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """b8:ca:3a:f5:1b:cd""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """b8:ca:3a:f5:1b:cb""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """b8:ca:3a:f5:1b:cb""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """b8:ca:3a:f5:1b:cb""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """b8:ca:3a:f5:1b:cb""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """b8:ca:3a:f5:1b:c9""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """b8:ca:3a:f5:1b:c9""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """b8:ca:3a:f5:1b:c9""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """b8:ca:3a:f5:1b:c9""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_set_network_config_v9.0_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetNetworkConfig_v9.0_1)

    
    network = dict() # network
    result = ef.set_network_config(network,)
    assert result.network.bond1_g.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.virtual_network_tag == """0""", "Died on +.network.bond1_g.virtual_network_tag"
    assert result.network.bond1_g.symmetric_route_rules[3] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[3]"
    assert result.network.bond1_g.symmetric_route_rules[2] == """ip rule add from 10.117.56.22 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[2]"
    assert result.network.bond1_g.symmetric_route_rules[1] == """ip route add default via 10.117.57.254 dev Bond1G src 10.117.56.22 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[1]"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add 10.117.56.0/23 dev Bond1G src 10.117.56.22 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """10.117.56.0""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.56.22""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.network == """10.117.56.0""", "Died on +.network.bond1_g.network"
    assert result.network.bond1_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.method == """static""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_fail_over_mac == """None""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """ActivePassive""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.117.56.22""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_downdelay == """200""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.virtual_network_tag == """0""", "Died on +.network.bond10_g.virtual_network_tag"
    assert result.network.bond10_g.symmetric_route_rules[2] == """ip rule add from 10.117.58.22 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[2]"
    assert result.network.bond10_g.symmetric_route_rules[1] == """ip route add default via 10.117.59.254 dev Bond10G src 10.117.58.22 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[1]"
    assert result.network.bond10_g.symmetric_route_rules[0] == """ip route add 10.117.58.0/23 dev Bond10G src 10.117.58.22 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[0]"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.gateway == """10.117.59.254""", "Died on +.network.bond10_g.gateway"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """10.117.58.0""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.58.22""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.network == """10.117.58.0""", "Died on +.network.bond10_g.network"
    assert result.network.bond10_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.method == """static""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_fail_over_mac == """None""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """ActivePassive""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """10.117.58.22""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_downdelay == """200""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """44:a8:42:02:cb:77""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """44:a8:42:02:cb:77""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """44:a8:42:02:cb:75""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """44:a8:42:02:cb:75""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """44:a8:42:02:cb:73""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """44:a8:42:02:cb:73""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """44:a8:42:02:cb:71""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """44:a8:42:02:cb:71""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_set_network_config_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetNetworkConfig_v9.1_0)

    
    network = dict() # network
    result = ef.set_network_config(network,)
    assert result.network.bond1_g.mac_address == """44:a8:42:02:af:3b""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.virtual_network_tag == """0""", "Died on +.network.bond1_g.virtual_network_tag"
    assert result.network.bond1_g.symmetric_route_rules[3] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[3]"
    assert result.network.bond1_g.symmetric_route_rules[2] == """ip rule add from 10.117.56.74 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[2]"
    assert result.network.bond1_g.symmetric_route_rules[1] == """ip route add default via 10.117.57.254 dev Bond1G src 10.117.56.74 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[1]"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add 10.117.56.0/23 dev Bond1G src 10.117.56.74 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """44:a8:42:02:af:3b""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """10.117.56.0""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.56.74""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.network == """10.117.56.0""", "Died on +.network.bond1_g.network"
    assert result.network.bond1_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.method == """static""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_fail_over_mac == """None""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """ActivePassive""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.117.56.74""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_downdelay == """200""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """44:a8:42:02:af:37""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.virtual_network_tag == """0""", "Died on +.network.bond10_g.virtual_network_tag"
    assert result.network.bond10_g.symmetric_route_rules[2] == """ip rule add from 10.117.58.74 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[2]"
    assert result.network.bond10_g.symmetric_route_rules[1] == """ip route add default via 10.117.59.254 dev Bond10G src 10.117.58.74 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[1]"
    assert result.network.bond10_g.symmetric_route_rules[0] == """ip route add 10.117.58.0/23 dev Bond10G src 10.117.58.74 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[0]"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.gateway == """10.117.59.254""", "Died on +.network.bond10_g.gateway"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """44:a8:42:02:af:37""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """10.117.58.0""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.58.74""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.network == """10.117.58.0""", "Died on +.network.bond10_g.network"
    assert result.network.bond10_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.method == """static""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_fail_over_mac == """None""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """ActivePassive""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """10.117.58.74""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_downdelay == """200""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """44:a8:42:02:af:3d""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """44:a8:42:02:af:3b""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """44:a8:42:02:af:3d""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """44:a8:42:02:af:3b""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """44:a8:42:02:af:3b""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """44:a8:42:02:af:3b""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """44:a8:42:02:af:3b""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """44:a8:42:02:af:3b""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """44:a8:42:02:af:39""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """44:a8:42:02:af:37""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """44:a8:42:02:af:39""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """44:a8:42:02:af:37""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """44:a8:42:02:af:37""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """44:a8:42:02:af:37""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """44:a8:42:02:af:37""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """44:a8:42:02:af:37""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_set_network_config_v9.1_1():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetNetworkConfig_v9.1_1)

    
    network = dict() # network
    result = ef.set_network_config(network,)
    assert result.network.bond1_g.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.bond1_g.mac_address"
    assert result.network.bond1_g._default == True, "Died on +.network.bond1_g._default"
    assert result.network.bond1_g.family == """inet""", "Died on +.network.bond1_g.family"
    assert result.network.bond1_g.virtual_network_tag == """0""", "Died on +.network.bond1_g.virtual_network_tag"
    assert result.network.bond1_g.symmetric_route_rules[3] == """ip route add default via 10.117.57.254""", "Died on +.network.bond1_g.symmetric_route_rules[3]"
    assert result.network.bond1_g.symmetric_route_rules[2] == """ip rule add from 10.117.56.22 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[2]"
    assert result.network.bond1_g.symmetric_route_rules[1] == """ip route add default via 10.117.57.254 dev Bond1G src 10.117.56.22 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[1]"
    assert result.network.bond1_g.symmetric_route_rules[0] == """ip route add 10.117.56.0/23 dev Bond1G src 10.117.56.22 table Bond1G""", "Died on +.network.bond1_g.symmetric_route_rules[0]"
    assert result.network.bond1_g.bond_updelay == """200""", "Died on +.network.bond1_g.bond_updelay"
    assert result.network.bond1_g.gateway == """10.117.57.254""", "Died on +.network.bond1_g.gateway"
    assert result.network.bond1_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.physical.mac_address_permanent"
    assert result.network.bond1_g.physical.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.bond1_g.physical.mac_address"
    assert result.network.bond1_g.physical.up_and_running == True, "Died on +.network.bond1_g.physical.up_and_running"
    assert result.network.bond1_g.physical.network == """10.117.56.0""", "Died on +.network.bond1_g.physical.network"
    assert result.network.bond1_g.physical.mtu == """1500""", "Died on +.network.bond1_g.physical.mtu"
    assert result.network.bond1_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond1_g.physical.netmask"
    assert result.network.bond1_g.physical.address == """10.117.56.22""", "Died on +.network.bond1_g.physical.address"
    assert result.network.bond1_g.network == """10.117.56.0""", "Died on +.network.bond1_g.network"
    assert result.network.bond1_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond1_g.dns_search"
    assert result.network.bond1_g.method == """static""", "Died on +.network.bond1_g.method"
    assert result.network.bond1_g.status == """UpAndRunning""", "Died on +.network.bond1_g.status"
    assert result.network.bond1_g.bond_fail_over_mac == """None""", "Died on +.network.bond1_g.bond_fail_over_mac"
    assert result.network.bond1_g.bond_miimon == """100""", "Died on +.network.bond1_g.bond_miimon"
    assert result.network.bond1_g.auto == True, "Died on +.network.bond1_g.auto"
    assert result.network.bond1_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond1_g.dns_nameservers"
    assert result.network.bond1_g.bond_slaves == """eth2 eth3""", "Died on +.network.bond1_g.bond_slaves"
    assert result.network.bond1_g.netmask == """255.255.254.0""", "Died on +.network.bond1_g.netmask"
    assert result.network.bond1_g.bond_mode == """ActivePassive""", "Died on +.network.bond1_g.bond_mode"
    assert result.network.bond1_g.address == """10.117.56.22""", "Died on +.network.bond1_g.address"
    assert result.network.bond1_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond1_g.mac_address_permanent"
    assert result.network.bond1_g.up_and_running == True, "Died on +.network.bond1_g.up_and_running"
    assert result.network.bond1_g.bond_downdelay == """200""", "Died on +.network.bond1_g.bond_downdelay"
    assert result.network.bond1_g.mtu == """1500""", "Died on +.network.bond1_g.mtu"
    assert result.network.bond1_g.bond_primary_reselect == """Failure""", "Died on +.network.bond1_g.bond_primary_reselect"
    assert result.network.lo.status == """UpAndRunning""", "Died on +.network.lo.status"
    assert result.network.lo.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address_permanent"
    assert result.network.lo.up_and_running == True, "Died on +.network.lo.up_and_running"
    assert result.network.lo.family == """inet""", "Died on +.network.lo.family"
    assert result.network.lo.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.mac_address"
    assert result.network.lo.auto == True, "Died on +.network.lo.auto"
    assert result.network.lo.method == """loopback""", "Died on +.network.lo.method"
    assert result.network.lo.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address_permanent"
    assert result.network.lo.physical.mac_address == """00:00:00:00:00:00""", "Died on +.network.lo.physical.mac_address"
    assert result.network.lo.physical.up_and_running == True, "Died on +.network.lo.physical.up_and_running"
    assert result.network.lo.physical.network == """N/A""", "Died on +.network.lo.physical.network"
    assert result.network.lo.physical.netmask == """N/A""", "Died on +.network.lo.physical.netmask"
    assert result.network.lo.physical.address == """0.0.0.0""", "Died on +.network.lo.physical.address"
    assert result.network.bond10_g.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.bond10_g.mac_address"
    assert result.network.bond10_g._default == False, "Died on +.network.bond10_g._default"
    assert result.network.bond10_g.family == """inet""", "Died on +.network.bond10_g.family"
    assert result.network.bond10_g.virtual_network_tag == """0""", "Died on +.network.bond10_g.virtual_network_tag"
    assert result.network.bond10_g.symmetric_route_rules[2] == """ip rule add from 10.117.58.22 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[2]"
    assert result.network.bond10_g.symmetric_route_rules[1] == """ip route add default via 10.117.59.254 dev Bond10G src 10.117.58.22 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[1]"
    assert result.network.bond10_g.symmetric_route_rules[0] == """ip route add 10.117.58.0/23 dev Bond10G src 10.117.58.22 table Bond10G""", "Died on +.network.bond10_g.symmetric_route_rules[0]"
    assert result.network.bond10_g.bond_updelay == """200""", "Died on +.network.bond10_g.bond_updelay"
    assert result.network.bond10_g.gateway == """10.117.59.254""", "Died on +.network.bond10_g.gateway"
    assert result.network.bond10_g.physical.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.physical.mac_address_permanent"
    assert result.network.bond10_g.physical.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.bond10_g.physical.mac_address"
    assert result.network.bond10_g.physical.up_and_running == True, "Died on +.network.bond10_g.physical.up_and_running"
    assert result.network.bond10_g.physical.network == """10.117.58.0""", "Died on +.network.bond10_g.physical.network"
    assert result.network.bond10_g.physical.mtu == """9000""", "Died on +.network.bond10_g.physical.mtu"
    assert result.network.bond10_g.physical.netmask == """255.255.254.0""", "Died on +.network.bond10_g.physical.netmask"
    assert result.network.bond10_g.physical.address == """10.117.58.22""", "Died on +.network.bond10_g.physical.address"
    assert result.network.bond10_g.network == """10.117.58.0""", "Died on +.network.bond10_g.network"
    assert result.network.bond10_g.dns_search == """one.den.solidfire.net""", "Died on +.network.bond10_g.dns_search"
    assert result.network.bond10_g.method == """static""", "Died on +.network.bond10_g.method"
    assert result.network.bond10_g.status == """UpAndRunning""", "Died on +.network.bond10_g.status"
    assert result.network.bond10_g.bond_fail_over_mac == """None""", "Died on +.network.bond10_g.bond_fail_over_mac"
    assert result.network.bond10_g.bond_miimon == """100""", "Died on +.network.bond10_g.bond_miimon"
    assert result.network.bond10_g.auto == True, "Died on +.network.bond10_g.auto"
    assert result.network.bond10_g.dns_nameservers == """10.117.30.40""", "Died on +.network.bond10_g.dns_nameservers"
    assert result.network.bond10_g.bond_slaves == """eth0 eth1""", "Died on +.network.bond10_g.bond_slaves"
    assert result.network.bond10_g.netmask == """255.255.254.0""", "Died on +.network.bond10_g.netmask"
    assert result.network.bond10_g.bond_mode == """ActivePassive""", "Died on +.network.bond10_g.bond_mode"
    assert result.network.bond10_g.address == """10.117.58.22""", "Died on +.network.bond10_g.address"
    assert result.network.bond10_g.mac_address_permanent == """00:00:00:00:00:00""", "Died on +.network.bond10_g.mac_address_permanent"
    assert result.network.bond10_g.up_and_running == True, "Died on +.network.bond10_g.up_and_running"
    assert result.network.bond10_g.bond_downdelay == """200""", "Died on +.network.bond10_g.bond_downdelay"
    assert result.network.bond10_g.mtu == """9000""", "Died on +.network.bond10_g.mtu"
    assert result.network.bond10_g.bond_primary_reselect == """Failure""", "Died on +.network.bond10_g.bond_primary_reselect"
    assert result.network.eth3.status == """UpAndRunning""", "Died on +.network.eth3.status"
    assert result.network.eth3.mac_address_permanent == """44:a8:42:02:cb:77""", "Died on +.network.eth3.mac_address_permanent"
    assert result.network.eth3.up_and_running == True, "Died on +.network.eth3.up_and_running"
    assert result.network.eth3.family == """inet""", "Died on +.network.eth3.family"
    assert result.network.eth3.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.eth3.mac_address"
    assert result.network.eth3.auto == True, "Died on +.network.eth3.auto"
    assert result.network.eth3.bond_master == """Bond1G""", "Died on +.network.eth3.bond_master"
    assert result.network.eth3.method == """bond""", "Died on +.network.eth3.method"
    assert result.network.eth3.physical.mac_address_permanent == """44:a8:42:02:cb:77""", "Died on +.network.eth3.physical.mac_address_permanent"
    assert result.network.eth3.physical.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.eth3.physical.mac_address"
    assert result.network.eth3.physical.up_and_running == True, "Died on +.network.eth3.physical.up_and_running"
    assert result.network.eth3.physical.network == """N/A""", "Died on +.network.eth3.physical.network"
    assert result.network.eth3.physical.netmask == """N/A""", "Died on +.network.eth3.physical.netmask"
    assert result.network.eth3.physical.address == """0.0.0.0""", "Died on +.network.eth3.physical.address"
    assert result.network.eth2.status == """UpAndRunning""", "Died on +.network.eth2.status"
    assert result.network.eth2.mac_address_permanent == """44:a8:42:02:cb:75""", "Died on +.network.eth2.mac_address_permanent"
    assert result.network.eth2.up_and_running == True, "Died on +.network.eth2.up_and_running"
    assert result.network.eth2.family == """inet""", "Died on +.network.eth2.family"
    assert result.network.eth2.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.eth2.mac_address"
    assert result.network.eth2.auto == True, "Died on +.network.eth2.auto"
    assert result.network.eth2.bond_master == """Bond1G""", "Died on +.network.eth2.bond_master"
    assert result.network.eth2.method == """bond""", "Died on +.network.eth2.method"
    assert result.network.eth2.physical.mac_address_permanent == """44:a8:42:02:cb:75""", "Died on +.network.eth2.physical.mac_address_permanent"
    assert result.network.eth2.physical.mac_address == """44:a8:42:02:cb:75""", "Died on +.network.eth2.physical.mac_address"
    assert result.network.eth2.physical.up_and_running == True, "Died on +.network.eth2.physical.up_and_running"
    assert result.network.eth2.physical.network == """N/A""", "Died on +.network.eth2.physical.network"
    assert result.network.eth2.physical.netmask == """N/A""", "Died on +.network.eth2.physical.netmask"
    assert result.network.eth2.physical.address == """0.0.0.0""", "Died on +.network.eth2.physical.address"
    assert result.network.eth1.status == """UpAndRunning""", "Died on +.network.eth1.status"
    assert result.network.eth1.mac_address_permanent == """44:a8:42:02:cb:73""", "Died on +.network.eth1.mac_address_permanent"
    assert result.network.eth1.up_and_running == True, "Died on +.network.eth1.up_and_running"
    assert result.network.eth1.family == """inet""", "Died on +.network.eth1.family"
    assert result.network.eth1.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.eth1.mac_address"
    assert result.network.eth1.auto == True, "Died on +.network.eth1.auto"
    assert result.network.eth1.bond_master == """Bond10G""", "Died on +.network.eth1.bond_master"
    assert result.network.eth1.method == """bond""", "Died on +.network.eth1.method"
    assert result.network.eth1.physical.mac_address_permanent == """44:a8:42:02:cb:73""", "Died on +.network.eth1.physical.mac_address_permanent"
    assert result.network.eth1.physical.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.eth1.physical.mac_address"
    assert result.network.eth1.physical.up_and_running == True, "Died on +.network.eth1.physical.up_and_running"
    assert result.network.eth1.physical.network == """N/A""", "Died on +.network.eth1.physical.network"
    assert result.network.eth1.physical.netmask == """N/A""", "Died on +.network.eth1.physical.netmask"
    assert result.network.eth1.physical.address == """0.0.0.0""", "Died on +.network.eth1.physical.address"
    assert result.network.eth0.status == """UpAndRunning""", "Died on +.network.eth0.status"
    assert result.network.eth0.mac_address_permanent == """44:a8:42:02:cb:71""", "Died on +.network.eth0.mac_address_permanent"
    assert result.network.eth0.up_and_running == True, "Died on +.network.eth0.up_and_running"
    assert result.network.eth0.family == """inet""", "Died on +.network.eth0.family"
    assert result.network.eth0.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.eth0.mac_address"
    assert result.network.eth0.auto == True, "Died on +.network.eth0.auto"
    assert result.network.eth0.bond_master == """Bond10G""", "Died on +.network.eth0.bond_master"
    assert result.network.eth0.method == """bond""", "Died on +.network.eth0.method"
    assert result.network.eth0.physical.mac_address_permanent == """44:a8:42:02:cb:71""", "Died on +.network.eth0.physical.mac_address_permanent"
    assert result.network.eth0.physical.mac_address == """44:a8:42:02:cb:71""", "Died on +.network.eth0.physical.mac_address"
    assert result.network.eth0.physical.up_and_running == True, "Died on +.network.eth0.physical.up_and_running"
    assert result.network.eth0.physical.network == """N/A""", "Died on +.network.eth0.physical.network"
    assert result.network.eth0.physical.netmask == """N/A""", "Died on +.network.eth0.physical.netmask"
    assert result.network.eth0.physical.address == """0.0.0.0""", "Died on +.network.eth0.physical.address"

def test_set_ntp_info_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetNtpInfo_v8.4_0)

    
    servers = "" # servers
    broadcastclient = True # broadcastclient
    result = ef.set_ntp_info(servers,)

def test_set_ntp_info_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetNtpInfo_v8.6_0)

    
    servers = "" # servers
    broadcastclient = True # broadcastclient
    result = ef.set_ntp_info(servers,)

def test_set_ntp_info_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetNtpInfo_v8.7_0)

    
    servers = "" # servers
    broadcastclient = True # broadcastclient
    result = ef.set_ntp_info(servers,)

def test_set_ntp_info_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetNtpInfo_v9.0_0)

    
    servers = "" # servers
    broadcastclient = True # broadcastclient
    result = ef.set_ntp_info(servers,)

def test_set_ntp_info_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetNtpInfo_v9.1_0)

    
    servers = "" # servers
    broadcastclient = True # broadcastclient
    result = ef.set_ntp_info(servers,)

def test_set_snmp_info_v8.4_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetSnmpInfo_v8.4_0)

    
    networks = dict() # networks
    enabled = True # enabled
    snmp_v3_enabled = True # snmp_v3_enabled
    usm_users = dict() # usm_users
    result = ef.set_snmp_info()

def test_set_snmp_info_v8.6_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetSnmpInfo_v8.6_0)

    
    networks = dict() # networks
    enabled = True # enabled
    snmp_v3_enabled = True # snmp_v3_enabled
    usm_users = dict() # usm_users
    result = ef.set_snmp_info()

def test_set_snmp_info_v8.7_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetSnmpInfo_v8.7_0)

    
    networks = dict() # networks
    enabled = True # enabled
    snmp_v3_enabled = True # snmp_v3_enabled
    usm_users = dict() # usm_users
    result = ef.set_snmp_info()

def test_set_snmp_info_v9.0_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetSnmpInfo_v9.0_0)

    
    networks = dict() # networks
    enabled = True # enabled
    snmp_v3_enabled = True # snmp_v3_enabled
    usm_users = dict() # usm_users
    result = ef.set_snmp_info()

def test_set_snmp_info_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_SetSnmpInfo_v9.1_0)

    
    networks = dict() # networks
    enabled = True # enabled
    snmp_v3_enabled = True # snmp_v3_enabled
    usm_users = dict() # usm_users
    result = ef.set_snmp_info()

def test_shutdown_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_Shutdown_v9.1_0)

    
    nodes = 42 # nodes
    option = "" # option
    result = ef.shutdown(nodes,)
    assert result.successful[0] == 3, "Died on +.successful[0]"

def test_start_bulk_volume_read_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_StartBulkVolumeRead_v9.1_0)

    
    volume_id = 42 # volume_id
    format = "" # format
    snapshot_id = 42 # snapshot_id
    script = "" # script
    script_parameters = "" # script_parameters
    attributes = dict() # attributes
    result = ef.start_bulk_volume_read(volume_id,format,)
    assert result.url == """https://10.117.58.37:8443/""", "Died on +.url"
    assert result.async_handle == 4, "Died on +.async_handle"
    assert result.key == """0d0a4ea1f36a4c23d561da8c1ffb627b""", "Died on +.key"

def test_start_bulk_volume_write_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_StartBulkVolumeWrite_v9.1_0)

    
    volume_id = 42 # volume_id
    format = "" # format
    script = "" # script
    script_parameters = "" # script_parameters
    attributes = dict() # attributes
    result = ef.start_bulk_volume_write(volume_id,format,)
    assert result.url == """https://10.117.58.37:8443/""", "Died on +.url"
    assert result.async_handle == 9, "Died on +.async_handle"
    assert result.key == """f0eb228ca3ad797493568636580f2827""", "Died on +.key"

def test_start_cluster_pairing_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_StartClusterPairing_v9.1_0)

    
    result = ef.start_cluster_pairing()
    assert result.cluster_pair_id == 1, "Died on +.cluster_pair_id"
    assert result.cluster_pairing_key == """7b22636c7573746572506169724944223a312c22636c75737465725061697255554944223a2237353361623661372d653739662d346139352d383832662d373066646231396331666334222c22636c7573746572556e697175654944223a226d696434222c226d766970223a2231302e3131372e35372e323437222c226e616d65223a224175746f54657374322d7850696e222c2270617373776f7264223a223f4e7c4b794b57356f3e502f693b5c2226222c22727063436f6e6e656374696f6e4944223a3837383939353832322c22736f66747761726556657273696f6e223a22392e312e302e3238222c22757365726e616d65223a225f5f53465f706169725f7a723170735a5a4a5a736f7076575370227d""", "Died on +.cluster_pairing_key"

def test_start_volume_pairing_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_StartVolumePairing_v9.1_0)

    
    volume_id = 42 # volume_id
    mode = "" # mode
    result = ef.start_volume_pairing(volume_id,)
    assert result.volume_pairing_key == """7b2235313265223a66616c73652c226d766970223a2231302e3131372e35372e323437222c22736c6963654944223a3333382c22766f6c756d654944223a3333382c22766f6c756d654e616d65223a2273796e632d736f757263652d313338222c22766f6c756d655061697255554944223a2238353261653530322d306361322d343239612d616263652d363764376335373163663562227d""", "Died on +.volume_pairing_key"

def test_update_bulk_volume_status_v9.1_0():
    ef = Element("10.117.60.15:444", "admin", "admin", 9.0)
    ef._dispatcher.post = MagicMock(return_value = Resources.RESP_UpdateBulkVolumeStatus_v9.1_0)

    
    key = "" # key
    status = "" # status
    percent_complete = "" # percent_complete
    message = "" # message
    attributes = dict() # attributes
    result = ef.update_bulk_volume_status(key,status,)
    assert result.status == """running""", "Died on +.status"
    assert type(result.attributes) is dict, "Died on .attributes"
    assert result.url == """https://10.117.58.37:8443/""", "Died on +.url"


if __name__ == "__main__":
    test_cancel_clone_v9_0()
    test_cancel_group_clone_v9_0()
    test_copy_volume_v9_0()
    test_create_storage_container_v9_0()
    test_create_volume_access_group_v9_0()
    test_delete_storage_containers_v9_0()
    test_delete_volumes_v9_0()
    test_enable_feature_v9_0()
    test_get_account_efficiency_v9_0()
    test_get_cluster_hardware_info_v9_0()
    test_get_drive_config_v9_0()
    test_get_drive_config_v9_1()
    test_get_drive_config_v9_2()
    test_get_feature_status_v9_0()
    test_get_hardware_config_v9_0()
    test_get_hardware_info_v9_0()
    test_get_hardware_info_v9_1()
    test_get_hardware_info_v9_2()
    test_get_hardware_info_v9_3()
    test_get_ipmi_config_v9_0()
    test_get_ipmi_config_v9_1()
    test_get_ipmi_info_v9_0()
    test_get_limits_v9_0()
    test_get_network_config_v9_0()
    test_get_node_hardware_info_v9_0()
    test_get_nvram_info_v9_0()
    test_get_origin_v9_0()
    test_get_storage_container_efficiency_v9_0()
    test_get_virtual_volume_count_v9_0()
    test_get_volume_count_v9_0()
    test_list_all_nodes_v8_0()
    test_list_async_results_v9_0()
    test_list_drive_stats_v9_0()
    test_list_fibre_channel_sessions_v9_0()
    test_list_iscsisessions_v9_0()
    test_list_pending_active_nodes_v9_0()
    test_list_protocol_endpoints_v9_0()
    test_list_services_v9_0()
    test_list_snapshots_v8_0()
    test_list_snapshots_v9_0()
    test_list_storage_containers_v9_0()
    test_list_virtual_volume_bindings_v9_0()
    test_list_virtual_volume_hosts_v9_0()
    test_list_virtual_volumes_v9_0()
    test_list_virtual_volumes_v9_1()
    test_list_virtual_volume_tasks_v9_0()
    test_list_volume_access_groups_v9_0()
    test_list_volume_stats_by_virtual_volume_v9_0()
    test_list_volume_stats_by_virtual_volume_v9_1()
    test_modify_storage_container_v9_0()
    test_modify_volume_access_group_v9_0()
    test_modify_volumes_v9_0()
    test_modify_volumes_v9_1()
    test_purge_deleted_volumes_v9_0()
    test_reset_node_v9_0()
    test_restart_networking_v9_0()
    test_restart_services_v9_0()
    test_restart_services_v9_1()
    test_set_default_qos_v9_0()
    test_shutdown_v9_0()
    test_add_account_v8.4_0()
    test_add_account_v8.6_0()
    test_add_account_v8.7_0()
    test_add_account_v9.0_0()
    test_add_account_v9.1_0()
    test_add_cluster_admin_v8.4_0()
    test_add_cluster_admin_v8.6_0()
    test_add_cluster_admin_v8.7_0()
    test_add_cluster_admin_v9.0_0()
    test_add_cluster_admin_v9.1_0()
    test_add_drives_v8.4_0()
    test_add_drives_v8.6_0()
    test_add_drives_v8.7_0()
    test_add_drives_v9.0_0()
    test_add_drives_v9.1_0()
    test_add_initiators_to_volume_access_group_v9.1_1()
    test_add_initiators_to_volume_access_group_v9.1_2()
    test_clear_cluster_faults_v9.1_0()
    test_clone_volume_v9.1_0()
    test_complete_cluster_pairing_v9.1_0()
    test_complete_volume_pairing_v9.1_0()
    test_create_cluster_v5.0_0()
    test_create_snapshot_v9.1_0()
    test_create_snapshot_v9.1_1()
    test_create_support_bundle_v8.6_0()
    test_create_support_bundle_v8.7_0()
    test_create_support_bundle_v9.0_0()
    test_create_support_bundle_v9.1_0()
    test_create_volume_v8.4_0()
    test_create_volume_access_group_v9.1_0()
    test_delete_all_support_bundles_v8.6_0()
    test_delete_all_support_bundles_v8.7_0()
    test_delete_all_support_bundles_v9.0_0()
    test_delete_all_support_bundles_v9.1_0()
    test_delete_snapshot_v9.1_0()
    test_delete_volume_v8.4_0()
    test_delete_volume_access_group_v9.1_0()
    test_delete_volumes_v9.1_0()
    test_delete_volumes_v9.1_1()
    test_delete_volumes_v9.1_2()
    test_disable_encryption_at_rest_v8.7_0()
    test_disable_encryption_at_rest_v9.1_1()
    test_disable_encryption_at_rest_v9.1_2()
    test_enable_encryption_at_rest_v8.4_0()
    test_enable_encryption_at_rest_v8.6_0()
    test_enable_encryption_at_rest_v9.0_0()
    test_get_api_v1.0_0()
    test_get_api_v5.0_0()
    test_get_api_v8.4_0()
    test_get_api_v8.6_0()
    test_get_api_v8.7_0()
    test_get_api_v9.0_0()
    test_get_api_v9.1_0()
    test_get_async_result_v9.1_0()
    test_get_async_result_v9.1_1()
    test_get_async_result_v9.1_10()
    test_get_async_result_v9.1_11()
    test_get_async_result_v9.1_12()
    test_get_async_result_v9.1_2()
    test_get_async_result_v9.1_3()
    test_get_async_result_v9.1_4()
    test_get_async_result_v9.1_5()
    test_get_async_result_v9.1_6()
    test_get_async_result_v9.1_7()
    test_get_async_result_v9.1_8()
    test_get_async_result_v9.1_9()
    test_get_bootstrap_config_v5.0_0()
    test_get_cluster_capacity_v8.4_0()
    test_get_cluster_capacity_v8.6_0()
    test_get_cluster_capacity_v8.7_0()
    test_get_cluster_capacity_v9.0_0()
    test_get_cluster_capacity_v9.1_0()
    test_get_cluster_full_threshold_v8.4_0()
    test_get_cluster_full_threshold_v8.7_0()
    test_get_cluster_full_threshold_v9.1_0()
    test_get_cluster_hardware_info_v9.1_0()
    test_get_cluster_hardware_info_v9.1_1()
    test_get_cluster_hardware_info_v9.1_10()
    test_get_cluster_hardware_info_v9.1_11()
    test_get_cluster_hardware_info_v9.1_12()
    test_get_cluster_hardware_info_v9.1_13()
    test_get_cluster_hardware_info_v9.1_14()
    test_get_cluster_hardware_info_v9.1_15()
    test_get_cluster_hardware_info_v9.1_16()
    test_get_cluster_hardware_info_v9.1_17()
    test_get_cluster_hardware_info_v9.1_18()
    test_get_cluster_hardware_info_v9.1_19()
    test_get_cluster_hardware_info_v9.1_2()
    test_get_cluster_hardware_info_v9.1_20()
    test_get_cluster_hardware_info_v9.1_21()
    test_get_cluster_hardware_info_v9.1_22()
    test_get_cluster_hardware_info_v9.1_23()
    test_get_cluster_hardware_info_v9.1_24()
    test_get_cluster_hardware_info_v9.1_25()
    test_get_cluster_hardware_info_v9.1_26()
    test_get_cluster_hardware_info_v9.1_27()
    test_get_cluster_hardware_info_v9.1_28()
    test_get_cluster_hardware_info_v9.1_29()
    test_get_cluster_hardware_info_v9.1_3()
    test_get_cluster_hardware_info_v9.1_30()
    test_get_cluster_hardware_info_v9.1_31()
    test_get_cluster_hardware_info_v9.1_32()
    test_get_cluster_hardware_info_v9.1_33()
    test_get_cluster_hardware_info_v9.1_34()
    test_get_cluster_hardware_info_v9.1_35()
    test_get_cluster_hardware_info_v9.1_36()
    test_get_cluster_hardware_info_v9.1_37()
    test_get_cluster_hardware_info_v9.1_38()
    test_get_cluster_hardware_info_v9.1_39()
    test_get_cluster_hardware_info_v9.1_4()
    test_get_cluster_hardware_info_v9.1_40()
    test_get_cluster_hardware_info_v9.1_41()
    test_get_cluster_hardware_info_v9.1_42()
    test_get_cluster_hardware_info_v9.1_43()
    test_get_cluster_hardware_info_v9.1_44()
    test_get_cluster_hardware_info_v9.1_45()
    test_get_cluster_hardware_info_v9.1_46()
    test_get_cluster_hardware_info_v9.1_5()
    test_get_cluster_hardware_info_v9.1_6()
    test_get_cluster_hardware_info_v9.1_7()
    test_get_cluster_hardware_info_v9.1_8()
    test_get_cluster_hardware_info_v9.1_9()
    test_get_cluster_info_v8.4_0()
    test_get_cluster_info_v8.6_0()
    test_get_cluster_info_v8.7_0()
    test_get_cluster_info_v9.0_0()
    test_get_cluster_info_v9.1_0()
    test_get_cluster_master_node_id_v9.1_0()
    test_get_cluster_state_v8.4_0()
    test_get_cluster_state_v8.6_0()
    test_get_cluster_state_v8.7_0()
    test_get_cluster_state_v9.0_0()
    test_get_cluster_state_v9.1_0()
    test_get_cluster_version_info_v1.0_0()
    test_get_config_v9.1_0()
    test_get_drive_config_v8.4_0()
    test_get_drive_config_v8.6_0()
    test_get_drive_config_v8.7_0()
    test_get_drive_config_v9.0_0()
    test_get_drive_config_v9.1_0()
    test_get_hardware_config_v8.4_0()
    test_get_hardware_config_v8.6_0()
    test_get_hardware_config_v8.7_0()
    test_get_hardware_config_v9.0_0()
    test_get_hardware_config_v9.1_0()
    test_get_hardware_config_v9.1_1()
    test_get_limits_v9.1_0()
    test_get_network_config_v8.4_0()
    test_get_network_config_v8.6_0()
    test_get_network_config_v8.6_1()
    test_get_network_config_v8.6_2()
    test_get_network_config_v8.6_3()
    test_get_network_config_v8.7_0()
    test_get_network_config_v8.7_1()
    test_get_network_config_v8.7_2()
    test_get_network_config_v9.0_0()
    test_get_network_config_v9.0_1()
    test_get_network_config_v9.1_0()
    test_get_network_config_v9.1_1()
    test_get_network_config_v9.1_2()
    test_get_network_config_v9.1_3()
    test_get_network_config_v9.1_4()
    test_get_network_config_v9.1_5()
    test_get_network_config_v9.1_6()
    test_get_pending_operation_v8.2_0()
    test_get_pending_operation_v8.4_0()
    test_get_pending_operation_v8.7_0()
    test_get_pending_operation_v9.0_0()
    test_get_pending_operation_v9.1_0()
    test_get_raw_stats_v9.1_0()
    test_get_raw_stats_v9.1_1()
    test_list_accounts_v8.4_0()
    test_list_accounts_v8.4_1()
    test_list_accounts_v8.6_0()
    test_list_accounts_v8.7_0()
    test_list_accounts_v8.7_1()
    test_list_accounts_v9.0_0()
    test_list_accounts_v9.1_0()
    test_list_active_nodes_v8.4_0()
    test_list_active_nodes_v8.6_0()
    test_list_active_nodes_v8.7_0()
    test_list_active_nodes_v9.0_0()
    test_list_active_nodes_v9.1_0()
    test_list_active_paired_volumes_v9.1_0()
    test_list_active_paired_volumes_v9.1_1()
    test_list_active_volumes_v8.4_0()
    test_list_active_volumes_v8.6_0()
    test_list_active_volumes_v8.7_0()
    test_list_active_volumes_v9.0_0()
    test_list_active_volumes_v9.1_0()
    test_list_active_volumes_v9.1_1()
    test_list_all_nodes_v8.4_0()
    test_list_all_nodes_v8.6_0()
    test_list_all_nodes_v8.7_0()
    test_list_all_nodes_v9.0_0()
    test_list_all_nodes_v9.0_1()
    test_list_all_nodes_v9.1_0()
    test_list_all_nodes_v9.1_1()
    test_list_all_nodes_v9.1_2()
    test_list_bulk_volume_jobs_v9.1_0()
    test_list_bulk_volume_jobs_v9.1_1()
    test_list_cluster_faults_v8.4_0()
    test_list_cluster_faults_v8.6_0()
    test_list_cluster_faults_v9.0_0()
    test_list_cluster_faults_v9.1_0()
    test_list_cluster_faults_v9.1_1()
    test_list_cluster_faults_v9.1_10()
    test_list_cluster_faults_v9.1_2()
    test_list_cluster_faults_v9.1_3()
    test_list_cluster_faults_v9.1_4()
    test_list_cluster_faults_v9.1_5()
    test_list_cluster_faults_v9.1_6()
    test_list_cluster_faults_v9.1_7()
    test_list_cluster_faults_v9.1_8()
    test_list_cluster_faults_v9.1_9()
    test_list_cluster_pairs_v9.1_0()
    test_list_deleted_volumes_v8.4_0()
    test_list_deleted_volumes_v9.1_0()
    test_list_drives_v8.4_0()
    test_list_drives_v8.6_0()
    test_list_drives_v8.7_0()
    test_list_drives_v9.0_0()
    test_list_drives_v9.1_0()
    test_list_node_fibre_channel_port_info_v9.1_0()
    test_list_pending_nodes_v9.1_0()
    test_list_snapshots_v9.1_0()
    test_list_snapshots_v9.1_1()
    test_list_volume_access_groups_v9.1_0()
    test_list_volumes_v8.4_0()
    test_list_volumes_v8.7_0()
    test_list_volumes_for_account_v9.1_0()
    test_list_volumes_for_account_v9.1_1()
    test_list_volumes_for_account_v9.1_2()
    test_modify_cluster_full_threshold_v9.1_0()
    test_modify_volume_v9.1_0()
    test_modify_volume_v9.1_1()
    test_modify_volume_v9.1_2()
    test_modify_volume_access_group_v9.1_0()
    test_modify_volume_access_group_v9.1_1()
    test_modify_volume_pair_v9.1_0()
    test_modify_volumes_v9.1_0()
    test_purge_deleted_volume_v8.4_0()
    test_purge_deleted_volumes_v9.1_0()
    test_remove_account_v9.1_0()
    test_remove_cluster_pair_v9.1_0()
    test_reset_node_v8.2_0()
    test_reset_node_v8.6_0()
    test_reset_node_v8.7_0()
    test_reset_node_v9.0_0()
    test_reset_node_v9.1_0()
    test_reset_node_v9.1_1()
    test_restart_services_v8.4_0()
    test_restart_services_v8.6_0()
    test_restart_services_v8.7_0()
    test_restart_services_v9.0_0()
    test_restart_services_v9.1_0()
    test_restart_services_v9.1_1()
    test_restart_services_v9.1_2()
    test_restore_deleted_volume_v9.1_0()
    test_set_cluster_config_v8.4_0()
    test_set_cluster_config_v8.6_0()
    test_set_cluster_config_v8.7_0()
    test_set_cluster_config_v9.0_0()
    test_set_cluster_config_v9.0_1()
    test_set_cluster_config_v9.1_0()
    test_set_cluster_config_v9.1_1()
    test_set_cluster_config_v9.1_2()
    test_set_login_session_info_v8.4_0()
    test_set_login_session_info_v8.6_0()
    test_set_login_session_info_v8.7_0()
    test_set_login_session_info_v9.0_0()
    test_set_login_session_info_v9.1_0()
    test_set_network_config_v8.4_0()
    test_set_network_config_v8.4_1()
    test_set_network_config_v8.6_0()
    test_set_network_config_v8.7_0()
    test_set_network_config_v8.7_1()
    test_set_network_config_v9.0_0()
    test_set_network_config_v9.0_1()
    test_set_network_config_v9.1_0()
    test_set_network_config_v9.1_1()
    test_set_ntp_info_v8.4_0()
    test_set_ntp_info_v8.6_0()
    test_set_ntp_info_v8.7_0()
    test_set_ntp_info_v9.0_0()
    test_set_ntp_info_v9.1_0()
    test_set_snmp_info_v8.4_0()
    test_set_snmp_info_v8.6_0()
    test_set_snmp_info_v8.7_0()
    test_set_snmp_info_v9.0_0()
    test_set_snmp_info_v9.1_0()
    test_shutdown_v9.1_0()
    test_start_bulk_volume_read_v9.1_0()
    test_start_bulk_volume_write_v9.1_0()
    test_start_cluster_pairing_v9.1_0()
    test_start_volume_pairing_v9.1_0()
    test_update_bulk_volume_status_v9.1_0()